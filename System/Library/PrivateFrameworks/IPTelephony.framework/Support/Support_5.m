void sub_1BF03124C(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;

  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v2 + 112) = v7;
    operator delete(v7);
  }
  if (*(char *)(v2 + 103) < 0)
    operator delete(*v4);
  if (*(char *)(v2 + 79) < 0)
    operator delete(*v3);
  if (*(char *)(v2 + 55) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE104c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE128c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void ims::Client::sendUssd(uint64_t a1, uint64_t a2)
{
  _QWORD v3[4];
  std::string v4;
  std::string __p;
  std::string v6;
  std::string v7;

  memset(&v7, 0, sizeof(v7));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v7 = *(std::string *)a2;
  memset(&v6, 0, sizeof(v6));
  if (*(char *)(a1 + 31) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  else
    v6 = *(std::string *)(a1 + 8);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 1174405120;
  v3[2] = ___ZNK3ims6Client8sendUssdERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
  v3[3] = &__block_descriptor_tmp_23_0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v4, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    v4 = v6;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
  else
    __p = v7;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_1BF03147C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a18 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (*(char *)(v30 - 25) < 0)
    operator delete(*(void **)(v30 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims6Client8sendUssdERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  IPTelephonyManager::sendUssdData(v5, (void **)(a1 + 32), (const std::string *)(a1 + 56));
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF031564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::Client::cancelUssd(ims::Client *this)
{
  _QWORD v1[4];
  std::string __p;
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&v3, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    v3 = *(std::string *)((char *)this + 8);
  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 1174405120;
  v1[2] = ___ZNK3ims6Client10cancelUssdEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_24_0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v3.__r_.__value_.__l.__data_, v3.__r_.__value_.__l.__size_);
  else
    __p = v3;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
}

void sub_1BF03164C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (*(char *)(v19 - 25) < 0)
    operator delete(*(void **)(v19 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims6Client10cancelUssdEv_block_invoke(void **a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  IPTelephonyManager::cancelUssdSession(v5, a1 + 4);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF031700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::Client::updateSimAccessClass(ims::Client *this, const unsigned int *a2)
{
  int v2;
  _QWORD v3[4];
  std::string __p;
  int v5;
  std::string v6;

  v2 = *a2;
  memset(&v6, 0, sizeof(v6));
  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    v6 = *(std::string *)((char *)this + 8);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 1174405120;
  v3[2] = ___ZN3ims6Client20updateSimAccessClassERKj_block_invoke;
  v3[3] = &__block_descriptor_tmp_26_1;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  v5 = v2;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1BF0317F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 25) < 0)
    operator delete(*(void **)(v18 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZN3ims6Client20updateSimAccessClassERKj_block_invoke(unsigned int *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  IPTelephonyManager::updateSimAccessClass(v5, (uint64_t)(a1 + 8), a1 + 14);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF0318A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::Client::setThumperEnabled(ims::Client *this, char a2)
{
  _QWORD v3[4];
  std::string __p;
  char v5;
  std::string v6;

  memset(&v6, 0, sizeof(v6));
  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    v6 = *(std::string *)((char *)this + 8);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 1174405120;
  v3[2] = ___ZN3ims6Client17setThumperEnabledEb_block_invoke;
  v3[3] = &__block_descriptor_tmp_27;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  v5 = a2;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1BF031998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 25) < 0)
    operator delete(*(void **)(v18 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZN3ims6Client17setThumperEnabledEb_block_invoke(unsigned __int8 *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  BambiClient::setThumperEnabled(*(_QWORD *)(v5 + 168), (uint64_t)(a1 + 32), a1[56]);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF031A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::Client::transferCalls(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[4];
  std::string v5;
  std::string __p;
  std::string v7;
  std::string v8;

  memset(&v8, 0, sizeof(v8));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v8 = *(std::string *)a2;
  memset(&v7, 0, sizeof(v7));
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v7 = *(std::string *)a3;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1174405120;
  v4[2] = ___ZN3ims6Client13transferCallsERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9__block_invoke;
  v4[3] = &__block_descriptor_tmp_28_0;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v5, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
  else
    v5 = v8;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
  else
    __p = v7;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

{
  std::string __p;
  std::string v6;

  if (a2 && a3)
  {
    if (*(char *)(a2 + 39) < 0)
      std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
    else
      v6 = *(std::string *)(a2 + 16);
    if (*(char *)(a3 + 39) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 16), *(_QWORD *)(a3 + 24));
    else
      __p = *(std::string *)(a3 + 16);
    (*(void (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)a1 + 352))(a1, &v6, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1BF031BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a18 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (*(char *)(v30 - 25) < 0)
    operator delete(*(void **)(v30 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZN3ims6Client13transferCallsERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9__block_invoke(IMSClientManager *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v5);
  IMSCallManager::transferCalls(*(_QWORD *)(v5 + 200), (uint64_t)a1 + 32, (uint64_t)a1 + 56);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF031CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF031D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ims::Client::transferCalls(ims::Client *this)
{
  IMSClientManager::callOnMainQueue((IMSClientManager *)&__block_literal_global_30);
}

void ___ZN3ims6Client13transferCallsEv_block_invoke(IMSClientManager *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v4);
  IMSCallManager::transferAllCalls(*(IMSCallManager **)(v4 + 200));
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1BF031E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::ClientHandle::authChallengeResponse(ims::ClientHandle *this, const ims::AuthChallengeResponse *a2)
{
  ims::AuthChallengeResponse *v3;
  _QWORD v4[4];
  std::string __p;
  ims::AuthChallengeResponse *v6;
  const __CFDictionary *v7;
  std::string v8;

  memset(&v8, 0, sizeof(v8));
  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&v8, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    v8 = *(std::string *)((char *)this + 8);
  v3 = (ims::AuthChallengeResponse *)operator new();
  *(_DWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  ims::AuthChallengeResponse::Serialize(a2, &v7);
  ims::AuthChallengeResponse::Deserialize(v3, v7);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v7);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1174405120;
  v4[2] = ___ZN3ims12ClientHandle21authChallengeResponseERKNS_21AuthChallengeResponseE_block_invoke;
  v4[3] = &__block_descriptor_tmp_31;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
  else
    __p = v8;
  v6 = v3;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_1BF031F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
    operator delete(__p);
  if (*(char *)(v19 - 25) < 0)
    operator delete(*(void **)(v19 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZN3ims12ClientHandle21authChallengeResponseERKNS_21AuthChallengeResponseE_block_invoke(uint64_t *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance((uint64_t *)&v7);
  IPTelephonyManager::handleAkaAuthResponse(v7, (uint64_t)(a1 + 4), a1[7]);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = a1[7];
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    JUMPOUT(0x1C3B87100);
  }
}

void sub_1BF032070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

ims::EmergencyClient *ims::EmergencyClient::EmergencyClient(ims::EmergencyClient *this)
{
  std::string *v2;
  __int128 v3;

  *(_QWORD *)this = off_1E78D3CF0;
  v2 = (std::string *)((char *)this + 8);
  if (byte_1ED70C967 < 0)
  {
    std::string::__init_copy_ctor_external(v2, (const std::string::value_type *)IMSClientManager::kEmergencyStack, *((std::string::size_type *)&IMSClientManager::kEmergencyStack + 1));
  }
  else
  {
    v3 = IMSClientManager::kEmergencyStack;
    v2->__r_.__value_.__r.__words[2] = unk_1ED70C960;
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
  *(_QWORD *)this = off_1E78D2DE8;
  *((_BYTE *)this + 32) = 1;
  return this;
}

void ims::EmergencyClient::exitEmergencyState(ims::EmergencyClient *this)
{
  IMSClientManager::callOnMainQueue((IMSClientManager *)&__block_literal_global_33);
}

void ___ZN3ims15EmergencyClient18exitEmergencyStateEv_block_invoke(IMSClientManager *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v4);
  BambiClient::exitEmergencyState(*(BambiClient **)(v4 + 168));
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1BF03217C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::EmergencyClient::updateNetworkServices(ims::EmergencyClient *this, const ims::NetworkServices *a2)
{
  _QWORD v3[4];
  std::string __p;
  void *v5[39];
  std::string v6;
  _OWORD v7[19];
  uint64_t v8;

  v8 = 0;
  memset(v7, 0, sizeof(v7));
  ims::NetworkServices::NetworkServices((ims::NetworkServices *)v7, a2);
  memset(&v6, 0, sizeof(v6));
  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    v6 = *(std::string *)((char *)this + 8);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 1174405120;
  v3[2] = ___ZN3ims15EmergencyClient21updateNetworkServicesERKNS_15NetworkServicesE_block_invoke;
  v3[3] = &__block_descriptor_tmp_34;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  ims::NetworkServices::NetworkServices((ims::NetworkServices *)v5, (const ims::NetworkServices *)v7);
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  ims::NetworkServices::~NetworkServices(v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  ims::NetworkServices::~NetworkServices((void **)v7);
}

void sub_1BF0322C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62)
{
  if (a60 < 0)
    operator delete(__p);
  ims::NetworkServices::~NetworkServices(&a62);
  _Unwind_Resume(a1);
}

void ___ZN3ims15EmergencyClient21updateNetworkServicesERKNS_15NetworkServicesE_block_invoke(IMSClientManager *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v5);
  IPTelephonyManager::updateNetworkServices(v5, (uint64_t)a1 + 32, (uint64_t)a1 + 56, 1);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF0323A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::ClientHandle::reportDeviceEvent(ims::ClientHandle *this, const unsigned int *a2)
{
  int v2;
  _QWORD v3[4];
  std::string __p;
  int v5;
  std::string v6;

  v2 = *a2;
  memset(&v6, 0, sizeof(v6));
  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    v6 = *(std::string *)((char *)this + 8);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 1174405120;
  v3[2] = ___ZNK3ims12ClientHandle17reportDeviceEventERKj_block_invoke;
  v3[3] = &__block_descriptor_tmp_35_2;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  v5 = v2;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1BF032494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 25) < 0)
    operator delete(*(void **)(v18 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims12ClientHandle17reportDeviceEventERKj_block_invoke(int *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  IPTelephonyManager::handleDeviceEvents(v5, (uint64_t)(a1 + 8), a1 + 14);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF03254C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::ClientHandle::reportConnectivityAvailable(ims::ClientHandle *this, char a2)
{
  _QWORD v3[4];
  std::string __p;
  char v5;
  std::string v6;

  memset(&v6, 0, sizeof(v6));
  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    v6 = *(std::string *)((char *)this + 8);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 1174405120;
  v3[2] = ___ZNK3ims12ClientHandle27reportConnectivityAvailableEb_block_invoke;
  v3[3] = &__block_descriptor_tmp_36;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  v5 = a2;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1BF03263C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 25) < 0)
    operator delete(*(void **)(v18 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims12ClientHandle27reportConnectivityAvailableEb_block_invoke(unsigned __int8 *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v6);
  v2 = *(_QWORD **)(v6 + 168);
  if (v2)
    BambiClient::handleConnectivityChange(v2, (uint64_t)(a1 + 32), a1[56]);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF0326FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::ClientHandle::setCapability(uint64_t a1, _DWORD *a2, char a3)
{
  void *v4;
  _QWORD v5[4];
  std::string v6;
  char v7;
  _QWORD v8[4];
  std::string v9;
  char v10;
  _QWORD v11[4];
  char v12;
  _QWORD v13[4];
  std::string v14;
  char v15;
  std::string v16;

  switch(*a2)
  {
    case 0:
      memset(&v16, 0, sizeof(v16));
      if (*(char *)(a1 + 31) < 0)
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
      else
        v16 = *(std::string *)(a1 + 8);
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 1174405120;
      v13[2] = ___ZNK3ims12ClientHandle13setCapabilityERKNS_12CapabilitiesEb_block_invoke;
      v13[3] = &__block_descriptor_tmp_37_0;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v14, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
      else
        v14 = v16;
      v15 = a3;
      IMSClientManager::callOnMainQueue((IMSClientManager *)v13);
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_28;
      v4 = (void *)v14.__r_.__value_.__r.__words[0];
      break;
    case 1:
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 0x40000000;
      v11[2] = ___ZNK3ims12ClientHandle13setCapabilityERKNS_12CapabilitiesEb_block_invoke_38;
      v11[3] = &__block_descriptor_tmp_39_0;
      v12 = a3;
      IMSClientManager::callOnMainQueue((IMSClientManager *)v11);
      return;
    case 2:
      memset(&v16, 0, sizeof(v16));
      if (*(char *)(a1 + 31) < 0)
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
      else
        v16 = *(std::string *)(a1 + 8);
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 1174405120;
      v8[2] = ___ZNK3ims12ClientHandle13setCapabilityERKNS_12CapabilitiesEb_block_invoke_2;
      v8[3] = &__block_descriptor_tmp_40_1;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v9, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
      else
        v9 = v16;
      v10 = a3;
      IMSClientManager::callOnMainQueue((IMSClientManager *)v8);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_28;
      v4 = (void *)v9.__r_.__value_.__r.__words[0];
      break;
    case 3:
      memset(&v16, 0, sizeof(v16));
      if (*(char *)(a1 + 31) < 0)
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
      else
        v16 = *(std::string *)(a1 + 8);
      v5[0] = MEMORY[0x1E0C809B0];
      v5[1] = 1174405120;
      v5[2] = ___ZNK3ims12ClientHandle13setCapabilityERKNS_12CapabilitiesEb_block_invoke_41;
      v5[3] = &__block_descriptor_tmp_42_1;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v6, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
      else
        v6 = v16;
      v7 = a3;
      IMSClientManager::callOnMainQueue((IMSClientManager *)v5);
      if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_28;
      v4 = (void *)v6.__r_.__value_.__r.__words[0];
      break;
    default:
      return;
  }
  operator delete(v4);
LABEL_28:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1BF0329A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (*(char *)(v30 - 41) < 0)
    operator delete(*(void **)(v30 - 64));
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims12ClientHandle13setCapabilityERKNS_12CapabilitiesEb_block_invoke(unsigned __int8 *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  IPTelephonyManager::setAutoAnswer(v5, (uint64_t)(a1 + 32), a1[56]);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF032A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3ims12ClientHandle13setCapabilityERKNS_12CapabilitiesEb_block_invoke_38(unsigned __int8 *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  IPTelephonyManager *v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance((uint64_t *)&v5);
  IPTelephonyManager::setLoggingEnabled(v5, a1[32]);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF032B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3ims12ClientHandle13setCapabilityERKNS_12CapabilitiesEb_block_invoke_2(unsigned __int8 *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  BambiClient::setThumperEnabled(*(_QWORD *)(v5 + 168), (uint64_t)(a1 + 32), a1[56]);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF032BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3ims12ClientHandle13setCapabilityERKNS_12CapabilitiesEb_block_invoke_41(IMSClientManager *a1)
{
  char v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6[2];

  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(v6);
  v2 = *((_BYTE *)a1 + 56);
  v3 = (std::__shared_weak_count *)v6[1];
  *(_BYTE *)(*(_QWORD *)(v6[0] + 168) + 800) = v2 ^ 1;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ims::ClientHandle::setTextMode(uint64_t a1, int a2, char a3)
{
  _QWORD v5[4];
  std::string __p;
  int v7;
  char v8;
  std::string v9;

  memset(&v9, 0, sizeof(v9));
  if (*(char *)(a1 + 31) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  else
    v9 = *(std::string *)(a1 + 8);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 1174405120;
  v5[2] = ___ZN3ims12ClientHandle11setTextModeENS_20TextMediaSessionModeEb_block_invoke;
  v5[3] = &__block_descriptor_tmp_43_0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  else
    __p = v9;
  v7 = a2;
  v8 = a3;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_1BF032D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 25) < 0)
    operator delete(*(void **)(v18 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZN3ims12ClientHandle11setTextModeENS_20TextMediaSessionModeEb_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  IMSCallManager::setTextMediaSessionMode(*(_QWORD *)(v5 + 200), (unsigned __int8 *)(a1 + 32), *(_DWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 60));
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF032DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ims::ClientHandle::sendSuppServicesConfigInfo(ims::ClientHandle *this, CFDictionaryRef theDict, const __CFDictionary *a3)
{
  const __CFDictionary *Value;
  void **v6;
  char v7;
  BOOL *v8;
  const __CFBoolean *v9;
  void **v10;
  char v11;
  void ***v12;
  _QWORD v14[4];
  std::string v15;
  void *v16[45];
  _QWORD v17[2];
  _BYTE __str[32];
  __int128 v19;
  void *v20[2];
  _OWORD v21[2];
  __int128 v22;
  uint64_t v23;
  _OWORD v24[2];
  _BYTE v25[80];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  void *v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  std::string v42;
  void (**v43)(ims::CFDictionary *__hidden);
  __int128 v44;
  _QWORD v45[3];

  v45[2] = *MEMORY[0x1E0C80C00];
  memset(&v42, 0, sizeof(v42));
  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&v42, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    v42 = *(std::string *)((char *)this + 8);
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  *(_OWORD *)v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v26 = 0u;
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, sizeof(v24));
  v23 = 0;
  v22 = 0u;
  *(_OWORD *)v20 = 0u;
  memset(v21, 0, sizeof(v21));
  v19 = 0u;
  memset(__str, 0, sizeof(__str));
  Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("kRegSimFiles"));
  ims::IsimFiles::Deserialize((CFIndex)__str, Value);
  std::string::operator=((std::string *)v25, (const std::string *)__str);
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)v24 + 8), *(std::string **)&__str[24], (__int128 *)v19, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *(_QWORD *)&__str[24]) >> 3));
  std::string::operator=((std::string *)&v25[24], (const std::string *)v20);
  CFDictionaryGetValue(theDict, CFSTR("kRegDeviceID"));
  v43 = 0;
  v44 = 0uLL;
  ctu::cf::assign();
  v6 = (void **)v43;
  v45[0] = v44;
  *(_QWORD *)((char *)v45 + 7) = *(_QWORD *)((char *)&v44 + 7);
  v7 = HIBYTE(v44);
  if ((v25[71] & 0x80000000) != 0)
    operator delete(*(void **)&v25[48]);
  *(_QWORD *)&v25[48] = v6;
  *(_QWORD *)&v25[56] = v45[0];
  *(_QWORD *)&v25[63] = *(_QWORD *)((char *)v45 + 7);
  v25[71] = v7;
  v8 = (BOOL *)CFDictionaryGetValue(theDict, CFSTR("kRegIsimPresent"));
  LOBYTE(v43) = 0;
  ctu::cf::assign((ctu::cf *)&v43, v8, v9);
  LOBYTE(v31[0]) = (_BYTE)v43;
  CFDictionaryGetValue(theDict, CFSTR("kRegCarrierID"));
  v43 = 0;
  v44 = 0uLL;
  ctu::cf::assign();
  v10 = (void **)v43;
  v45[0] = v44;
  *(_QWORD *)((char *)v45 + 7) = *(_QWORD *)((char *)&v44 + 7);
  v11 = HIBYTE(v44);
  if (SHIBYTE(v32) < 0)
    operator delete(v31[1]);
  v31[1] = v10;
  *(_QWORD *)&v32 = v45[0];
  *(_QWORD *)((char *)&v32 + 7) = *(_QWORD *)((char *)v45 + 7);
  HIBYTE(v32) = v11;
  *(_QWORD *)&v44 = a3;
  if (a3)
    CFRetain(a3);
  v43 = &off_1E78EAC60;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1174405120;
  v14[2] = ___ZN3ims12ClientHandle26sendSuppServicesConfigInfoEPK14__CFDictionaryS3__block_invoke;
  v14[3] = &__block_descriptor_tmp_44_1;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v15, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
  else
    v15 = v42;
  XcapConfig::XcapConfig((XcapConfig *)v16, (const XcapConfig *)v24);
  v17[0] = off_1E78EAB00;
  v17[1] = v44;
  if ((_QWORD)v44)
    CFRetain((CFTypeRef)v44);
  v17[0] = &off_1E78EAC60;
  dispatch_async(MEMORY[0x1E0C80D38], v14);
  ims::CFType::~CFType((ims::CFType *)v17);
  XcapConfig::~XcapConfig(v16);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  ims::CFType::~CFType((ims::CFType *)&v43);
  v43 = (void (**)(ims::CFDictionary *__hidden))&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v12);
  v43 = (void (**)(ims::CFDictionary *__hidden))v21 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  if (SBYTE7(v21[0]) < 0)
    operator delete(v20[0]);
  v43 = (void (**)(ims::CFDictionary *__hidden))&__str[24];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  XcapConfig::~XcapConfig((void **)v24);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1BF0331AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  uint64_t v63;

  ims::CFType::~CFType((ims::CFType *)(v63 - 112));
  ims::IsimFiles::~IsimFiles(&a63);
  XcapConfig::~XcapConfig((void **)&STACK[0x230]);
  if (*(char *)(v63 - 121) < 0)
    operator delete(*(void **)(v63 - 144));
  _Unwind_Resume(a1);
}

void ___ZN3ims12ClientHandle26sendSuppServicesConfigInfoEPK14__CFDictionaryS3__block_invoke(void **a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  IPTelephonyManager::initializeXcap(v5, (uint64_t)(a1 + 4), (uint64_t)(a1 + 7), a1[53]);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF0332C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c16_ZTS10XcapConfig416c24_ZTSN3ims12CFDictionaryE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  CFTypeRef result;

  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  XcapConfig::XcapConfig((XcapConfig *)(a1 + 56), (const XcapConfig *)(a2 + 56));
  result = *(CFTypeRef *)(a2 + 424);
  *(_QWORD *)(a1 + 416) = off_1E78EAB00;
  *(_QWORD *)(a1 + 424) = result;
  if (result)
    result = CFRetain(result);
  *(_QWORD *)(a1 + 416) = &off_1E78EAC60;
  return result;
}

void sub_1BF033368(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  void **v3;

  XcapConfig::~XcapConfig(v3);
  if (*(char *)(v2 + 55) < 0)
    operator delete(*v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c16_ZTS10XcapConfig416c24_ZTSN3ims12CFDictionaryE(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 56);
  ims::CFType::~CFType((ims::CFType *)(a1 + 416));
  XcapConfig::~XcapConfig(v2);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void ims::IsimFiles::~IsimFiles(void **this)
{
  void **v2;

  v2 = this + 12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t ims::ClientHandle::sendSuppServicesProvInfo(ims::ClientHandle *this, CFTypeRef cf)
{
  _QWORD block[4];
  std::string __p;
  _QWORD v6[2];
  void (**v7)(ims::CFDictionary *__hidden);
  CFTypeRef v8;
  std::string v9;

  memset(&v9, 0, sizeof(v9));
  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&v9, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    v9 = *(std::string *)((char *)this + 8);
  v8 = cf;
  if (cf)
    CFRetain(cf);
  v7 = &off_1E78EAC60;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN3ims12ClientHandle24sendSuppServicesProvInfoEPK14__CFDictionary_block_invoke;
  block[3] = &__block_descriptor_tmp_45_0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
    cf = v8;
  }
  else
  {
    __p = v9;
  }
  v6[0] = off_1E78EAB00;
  v6[1] = cf;
  if (cf)
    CFRetain(cf);
  v6[0] = &off_1E78EAC60;
  dispatch_async(MEMORY[0x1E0C80D38], block);
  ims::CFType::~CFType((ims::CFType *)v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  ims::CFType::~CFType((ims::CFType *)&v7);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1BF03358C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  ims::CFType::~CFType((ims::CFType *)(v19 - 64));
  if (*(char *)(v19 - 25) < 0)
    operator delete(*(void **)(v19 - 48));
  _Unwind_Resume(a1);
}

void ___ZN3ims12ClientHandle24sendSuppServicesProvInfoEPK14__CFDictionary_block_invoke(ctu::cf **a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  IMSXcapManager::handleRequest(*(_QWORD *)(v5 + 224), (uint64_t)(a1 + 4), a1[8]);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF033658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c24_ZTSN3ims12CFDictionaryE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  CFTypeRef result;

  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  result = *(CFTypeRef *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = off_1E78EAB00;
  *(_QWORD *)(a1 + 64) = result;
  if (result)
    result = CFRetain(result);
  *(_QWORD *)(a1 + 56) = &off_1E78EAC60;
  return result;
}

void sub_1BF0336E8(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 55) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c24_ZTSN3ims12CFDictionaryE(uint64_t a1)
{
  ims::CFType::~CFType((ims::CFType *)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void ims::ClientHandle::setMute(ims::ClientHandle *this, char a2)
{
  _QWORD v3[4];
  std::string __p;
  char v5;
  std::string v6;

  memset(&v6, 0, sizeof(v6));
  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    v6 = *(std::string *)((char *)this + 8);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 1174405120;
  v3[2] = ___ZNK3ims12ClientHandle7setMuteEb_block_invoke;
  v3[3] = &__block_descriptor_tmp_46_1;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  v5 = a2;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1BF03381C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 25) < 0)
    operator delete(*(void **)(v18 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims12ClientHandle7setMuteEb_block_invoke(void **a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  BambiClient::setMute(*(_QWORD *)(v5 + 168), a1 + 4);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF0338D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::CallHandle::playDtmf(ims::CallHandle *this, char a2)
{
  _QWORD v3[4];
  std::string __p;
  char v5;
  std::string v6;

  memset(&v6, 0, sizeof(v6));
  if (*((char *)this + 39) < 0)
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
  else
    v6 = *(std::string *)((char *)this + 16);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 1174405120;
  v3[2] = ___ZNK3ims10CallHandle8playDtmfEh_block_invoke;
  v3[3] = &__block_descriptor_tmp_47_0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  v5 = a2;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1BF0339C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 25) < 0)
    operator delete(*(void **)(v18 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims10CallHandle8playDtmfEh_block_invoke(unsigned __int8 *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD v6[3];
  char v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v8);
  v2 = *(_QWORD *)(v8 + 200);
  ImsUuid::ImsUuid(v6, (uint64_t)(a1 + 32));
  IMSCallManager::playDtmf(v2, (uint64_t)v6, (RTPManager *)a1[56]);
  v6[0] = off_1E78C0288;
  if (v7 < 0)
    operator delete((void *)v6[1]);
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF033AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ims::CallHandle::playDtmf(uint64_t a1, uint64_t a2)
{
  _QWORD v3[4];
  std::string v4;
  void *__p;
  void *v6;
  uint64_t v7;
  void *v8;
  _BYTE *v9;
  uint64_t v10;
  std::string v11;

  memset(&v11, 0, sizeof(v11));
  if (*(char *)(a1 + 39) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  else
    v11 = *(std::string *)(a1 + 16);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v8, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 1174405120;
  v3[2] = ___ZNK3ims10CallHandle8playDtmfERKNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke;
  v3[3] = &__block_descriptor_tmp_48_1;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v4, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v4 = v11;
  __p = 0;
  v6 = 0;
  v7 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v8, (uint64_t)v9, v9 - (_BYTE *)v8);
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1BF033C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21)
{
  uint64_t v21;
  void *v23;

  v23 = *(void **)(v21 - 72);
  if (v23)
  {
    *(_QWORD *)(v21 - 64) = v23;
    operator delete(v23);
  }
  if (*(char *)(v21 - 25) < 0)
    operator delete(*(void **)(v21 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims10CallHandle8playDtmfERKNSt3__16vectorIhNS1_9allocatorIhEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *__p;
  void *v7;
  uint64_t v8;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v11);
  v2 = *(_QWORD *)(v11 + 200);
  ImsUuid::ImsUuid(v9, a1 + 32);
  __p = 0;
  v7 = 0;
  v8 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56));
  IMSCallManager::playDtmf(v2, (uint64_t)v9, (unsigned __int8 **)&__p);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  v9[0] = off_1E78C0288;
  if (v10 < 0)
    operator delete((void *)v9[1]);
  v3 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF033D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (__p)
    operator delete(__p);
  if (a19 < 0)
    operator delete(a14);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v19 - 32);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(a1 + 56), *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56));
}

void sub_1BF033DFC(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 55) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void ims::CallHandle::stopDtmf(ims::CallHandle *this)
{
  _QWORD v1[4];
  std::string __p;
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  if (*((char *)this + 39) < 0)
    std::string::__init_copy_ctor_external(&v3, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
  else
    v3 = *(std::string *)((char *)this + 16);
  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 1174405120;
  v1[2] = ___ZNK3ims10CallHandle8stopDtmfEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_49_0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v3.__r_.__value_.__l.__data_, v3.__r_.__value_.__l.__size_);
  else
    __p = v3;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
}

void sub_1BF033F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (*(char *)(v19 - 25) < 0)
    operator delete(*(void **)(v19 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims10CallHandle8stopDtmfEv_block_invoke(IMSClientManager *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD v6[3];
  char v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v8);
  v2 = *(_QWORD *)(v8 + 200);
  ImsUuid::ImsUuid(v6, (uint64_t)a1 + 32);
  IMSCallManager::stopDtmf(v2, (uint64_t)v6);
  v6[0] = off_1E78C0288;
  if (v7 < 0)
    operator delete((void *)v6[1]);
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF034008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t ims::Call::Call(uint64_t a1, const std::string *a2, uint64_t a3)
{
  void **v5;
  std::string v7;

  *(_WORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 62) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)a1 = &off_1E78D31D0;
  std::string::operator=((std::string *)(a1 + 16), a2);
  if (a3)
  {
    if (*(char *)(a3 + 31) < 0)
      std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
    else
      v7 = *(std::string *)(a3 + 8);
    v5 = (void **)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      operator delete(*v5);
    *(_OWORD *)v5 = *(_OWORD *)&v7.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)&v7.__r_.__value_.__l + 2);
  }
  return a1;
}

void sub_1BF0340E4(_Unwind_Exception *a1)
{
  void **v1;

  ims::CallHandle::~CallHandle(v1);
  _Unwind_Resume(a1);
}

void ims::CallHandle::~CallHandle(void **this)
{
  *this = &off_1E78D3270;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  ims::CallHandle::~CallHandle(this);
  JUMPOUT(0x1C3B87100);
}

_QWORD *ims::Call::Call(uint64_t a1, __int128 *a2, __int128 *a3)
{
  _QWORD *result;

  result = (_QWORD *)ims::CallHandle::CallHandle(a1, a2, a3);
  *result = &off_1E78D31D0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)ims::CallHandle::CallHandle(a1, a2, a3);
  *result = &off_1E78D31D0;
  return result;
}

uint64_t ims::CallHandle::CallHandle(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  *(_QWORD *)a1 = &off_1E78D3270;
  *(_WORD *)(a1 + 8) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v5;
  }
  v6 = (std::string *)(a1 + 40);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(_DWORD *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 68) = 0;
  return a1;
}

void sub_1BF034208(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void ims::Call::dial()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  const std::string *v4;
  const std::string *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[4];
  std::string v11;
  void *v12[637];
  std::string v13;
  void (**v14)(ImsUuid *__hidden);
  __int128 v15;
  uint64_t v16;
  void *v17[2];
  __int128 __p;
  uint64_t v19;
  __int16 v20;
  _BYTE v21[32];
  int v22;
  char v23;
  char v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[40];
  std::string v38[2];
  std::string v39[2];
  char v40;
  std::string v41;
  uint64_t v42;
  std::string v43;
  std::string v44;

  v0 = MEMORY[0x1E0C80A78]();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = v0;
  memset(&v44, 0, sizeof(v44));
  if (*(char *)(v1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)v1, *(_QWORD *)(v1 + 8));
  else
    v44 = *(std::string *)v1;
  bzero(v17, 0x13E8uLL);
  BYTE1(v17[0]) = -1;
  memset(v21, 0, sizeof(v21));
  v17[1] = off_1E78C0288;
  __p = 0uLL;
  v19 = 0;
  v20 = 0;
  v23 = 1;
  v24 = 1;
  v26 = 257;
  v28 = 256;
  v25 = 0x200000001;
  v27 = 0;
  v35 = 0u;
  v36 = 0u;
  v30 = 0;
  v22 = 90;
  v29 = 0;
  v34 = 0;
  v32 = 0u;
  v33 = 0u;
  v31 = 0u;
  *(_QWORD *)v37 = 0x40A7700000000000;
  memset(&v37[8], 0, 32);
  memset(v38, 0, sizeof(v38));
  memset(v39, 0, sizeof(v39));
  v40 = 0;
  BambiEmergencyCallOptions::BambiEmergencyCallOptions((BambiEmergencyCallOptions *)&v42);
  memset(&v43, 0, sizeof(v43));
  std::string::operator=(&v39[1], (const std::string *)(v7 + 8));
  BYTE1(v17[0]) = *(_BYTE *)v7;
  std::string::operator=((std::string *)v21, v5);
  LOBYTE(v20) = *(_BYTE *)(v8 + 9);
  HIBYTE(v20) = *(_BYTE *)(v8 + 8);
  BYTE1(v29) = *(_DWORD *)(v8 + 64) == 2;
  HIWORD(v29) = *(_WORD *)(v8 + 68);
  v34 = *(_BYTE *)(v7 + 32);
  v9 = *(_OWORD *)(v7 + 80);
  v35 = *(_OWORD *)(v7 + 64);
  v36 = v9;
  *(_OWORD *)v37 = *(_OWORD *)(v7 + 96);
  LOBYTE(v29) = 0;
  std::string::operator=((std::string *)&v37[16], (const std::string *)(v7 + 112));
  std::string::operator=(v38, (const std::string *)(v7 + 136));
  std::string::operator=(&v38[1], (const std::string *)(v7 + 160));
  std::string::operator=(v39, (const std::string *)(v7 + 184));
  v40 = v3;
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(&v41, (const std::string *)(v7 + 216));
  if (*(char *)(v8 + 39) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(v8 + 16), *(_QWORD *)(v8 + 24));
  else
    v13 = *(std::string *)(v8 + 16);
  ImsUuid::ImsUuid(&v14, (uint64_t)&v13);
  if (SHIBYTE(v19) < 0)
    operator delete((void *)__p);
  __p = v15;
  v19 = v16;
  HIBYTE(v16) = 0;
  LOBYTE(v15) = 0;
  v14 = off_1E78C0288;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  LOBYTE(v17[0]) = 0;
  std::string::operator=(&v43, (const std::string *)(v8 + 40));
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1174405120;
  v10[2] = ___ZN3ims4Call4dialERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_10CallConfigES9_b_block_invoke;
  v10[3] = &__block_descriptor_tmp_50;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v11, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  else
    v11 = v44;
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)v12, (const IMSCallOptions *)v17);
  IMSClientManager::callOnMainQueue((IMSClientManager *)v10);
  IMSCallOptions::~IMSCallOptions(v12);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  IMSCallOptions::~IMSCallOptions(v17);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
}

void sub_1BF0345EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  IMSCallOptions::~IMSCallOptions((void **)&STACK[0x1458]);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)(v2 - 112));
  _Unwind_Resume(a1);
}

void ___ZN3ims4Call4dialERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_10CallConfigES9_b_block_invoke()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5[637];
  uint64_t v6;
  std::__shared_weak_count *v7;

  v0 = MEMORY[0x1E0C80A78]();
  IMSClientManager::instance((IMSClientManager *)v0);
  IPTelephonyManager::getInstance(&v6);
  v1 = *(_QWORD **)(v6 + 200);
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)v5, (const IMSCallOptions *)(v0 + 56));
  IMSCallManager::initializeNonEmergencyCall(v1, (std::string *)(v0 + 32), (uint64_t)v5);
  IMSCallOptions::~IMSCallOptions(v5);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF03472C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  IMSCallOptions::~IMSCallOptions((void **)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 48);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c20_ZTS14IMSCallOptions(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)(a1 + 56), (const IMSCallOptions *)(a2 + 56));
}

void sub_1BF0347B4(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 55) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c20_ZTS14IMSCallOptions(uint64_t a1)
{
  IMSCallOptions::~IMSCallOptions((void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void ims::EmergencyCall::dial()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  const std::string::value_type *v11;
  const void *v12;
  const void *v13;
  _QWORD v14[4];
  std::string v15;
  void *v16[637];
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  std::string v20[4];
  _QWORD v21[2];
  std::string v22;
  _QWORD v23[4];
  std::string v24;
  void *v25[637];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  std::string v29[4];
  _QWORD v30[2];
  std::string v31;
  _QWORD v32[2];
  _QWORD v33[4];
  std::string v34;
  void *v35[637];
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  std::string v39[4];
  _QWORD v40[2];
  std::string v41;
  _QWORD v42[2];
  _QWORD v43[2];
  std::string v44;
  void (**v45)(ImsUuid *__hidden);
  __int128 cf;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _BYTE v50[592];
  std::string v51[2];
  std::string v52[2];
  __int16 v53;
  _QWORD v54[2];
  std::string v55;
  std::string __s;
  void *v57[2];
  __int128 __p;
  uint64_t v59;
  __int16 v60;
  __int128 v61;
  __int128 v62;
  int v63;
  char v64;
  char v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  int v70;
  char v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  char v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _QWORD v85[4];
  char v86;
  std::string v87;
  std::string v88[176];
  _BYTE v89[440];
  std::string v90;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = v0;
  bzero(v57, 0x13E8uLL);
  BYTE1(v57[0]) = -1;
  v61 = 0u;
  v62 = 0u;
  v57[1] = off_1E78C0288;
  __p = 0uLL;
  v59 = 0;
  v60 = 0;
  v63 = 90;
  v64 = 1;
  v65 = 1;
  v66 = 0x200000001;
  v67 = 257;
  v68 = 0;
  v69 = 256;
  v76 = 0u;
  v77 = 0u;
  v71 = 0;
  v70 = 0;
  v75 = 0;
  v74 = 0u;
  v73 = 0u;
  v72 = 0u;
  v78 = 0x40A7700000000000;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  memset(v85, 0, sizeof(v85));
  v86 = 0;
  BambiEmergencyCallOptions::BambiEmergencyCallOptions((BambiEmergencyCallOptions *)v88);
  memset(&v90, 0, sizeof(v90));
  memset(&__s, 0, sizeof(__s));
  if (*(char *)(v8 + 23) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)v8, *(_QWORD *)(v8 + 8));
  else
    __s = *(std::string *)v8;
  memset(&v55, 0, sizeof(v55));
  if (*(char *)(v6 + 23) < 0)
    std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
  else
    v55 = *(std::string *)v6;
  bzero(&v48, 0x2E0uLL);
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)v50);
  memset(v52, 0, sizeof(v52));
  memset(v51, 0, sizeof(v51));
  v53 = 257;
  LOWORD(v54[1]) = 256;
  BYTE2(v54[1]) = 1;
  HIDWORD(v54[0]) = 0;
  ims::NetworkConfig::operator=((uint64_t)v50, v2 + 24);
  std::string::operator=(v51, (const std::string *)(v2 + 616));
  std::string::operator=(&v51[1], (const std::string *)(v2 + 640));
  std::string::operator=(v52, (const std::string *)(v2 + 664));
  std::string::operator=(&v52[1], (const std::string *)(v2 + 688));
  v53 = *(_WORD *)(v2 + 712);
  HIDWORD(v54[0]) = *(_DWORD *)(v2 + 724);
  LOBYTE(v54[1]) = *(_BYTE *)(v2 + 728);
  *(_WORD *)((char *)&v54[1] + 1) = *(_WORD *)(v2 + 729);
  LOBYTE(v57[0]) = 1;
  BYTE1(v57[0]) = *(_BYTE *)v4;
  std::string::operator=((std::string *)&v85[1], (const std::string *)(v4 + 8));
  v75 = 0;
  LOBYTE(v60) = *(_BYTE *)(v9 + 9);
  HIBYTE(v60) = *(_BYTE *)(v9 + 8);
  LOBYTE(v70) = 0;
  BYTE1(v70) = *(_DWORD *)(v9 + 64) == 2;
  HIWORD(v70) = *(_WORD *)(v9 + 68);
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(&v87, (const std::string *)(v4 + 216));
  SipUri::fromString((uint64_t)v89, (std::string *)(v4 + 40));
  v10 = *(_DWORD *)(v4 + 208) - 1;
  if (v10 > 6)
    v11 = "";
  else
    v11 = off_1E78D3DF8[v10];
  std::string::__assign_external(v88, v11);
  v89[432] = *(_BYTE *)(v4 + 248);
  std::string::operator=(&v90, (const std::string *)(v9 + 40));
  if (*(char *)(v9 + 39) < 0)
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)(v9 + 16), *(_QWORD *)(v9 + 24));
  else
    v44 = *(std::string *)(v9 + 16);
  ImsUuid::ImsUuid(&v45, (uint64_t)&v44);
  if (SHIBYTE(v59) < 0)
    operator delete((void *)__p);
  __p = cf;
  v59 = v47;
  HIBYTE(v47) = 0;
  LOBYTE(cf) = 0;
  v45 = off_1E78C0288;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  v12 = *(const void **)(v2 + 8);
  if (v12)
  {
    v45 = (void (**)(ImsUuid *__hidden))off_1E78EAB00;
    *(_QWORD *)&cf = v12;
    CFRetain(v12);
    v45 = &off_1E78EAC60;
    v13 = *(const void **)(v2 + 16);
    if (v13)
    {
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78EAB00;
      v44.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
      CFRetain(v13);
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78EAC60;
      v33[0] = MEMORY[0x1E0C809B0];
      v33[1] = 1174405120;
      v33[2] = ___ZN3ims13EmergencyCall4dialERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_RKNS_10CallConfigERKNS_11StackConfigE_block_invoke;
      v33[3] = &__block_descriptor_tmp_51_0;
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v34, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      else
        v34 = __s;
      IMSCallOptions::IMSCallOptions((IMSCallOptions *)v35, (const IMSCallOptions *)v57);
      v36 = v48;
      v37 = v49;
      ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)&v38, (const ims::NetworkConfig *)v50);
      ims::DeviceConfig::DeviceConfig(v39, (__int128 *)v51);
      *(_DWORD *)((char *)v40 + 7) = *(_DWORD *)((char *)v54 + 7);
      v40[0] = v54[0];
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v41, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
      else
        v41 = v55;
      v42[0] = off_1E78EAB00;
      v42[1] = cf;
      if ((_QWORD)cf)
        CFRetain((CFTypeRef)cf);
      v42[0] = &off_1E78EAC60;
      v43[0] = off_1E78EAB00;
      v43[1] = v44.__r_.__value_.__l.__size_;
      if (v44.__r_.__value_.__l.__size_)
        CFRetain((CFTypeRef)v44.__r_.__value_.__l.__size_);
      v43[0] = &off_1E78EAC60;
      IMSClientManager::callOnMainQueue((IMSClientManager *)v33);
      ims::CFType::~CFType((ims::CFType *)v43);
      ims::CFType::~CFType((ims::CFType *)v42);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      ims::StackConfig::~StackConfig((void **)&v36);
      IMSCallOptions::~IMSCallOptions(v35);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      ims::CFType::~CFType((ims::CFType *)&v44);
    }
    else
    {
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 1174405120;
      v23[2] = ___ZN3ims13EmergencyCall4dialERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_RKNS_10CallConfigERKNS_11StackConfigE_block_invoke_52;
      v23[3] = &__block_descriptor_tmp_53_1;
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v24, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      else
        v24 = __s;
      IMSCallOptions::IMSCallOptions((IMSCallOptions *)v25, (const IMSCallOptions *)v57);
      v26 = v48;
      v27 = v49;
      ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)&v28, (const ims::NetworkConfig *)v50);
      ims::DeviceConfig::DeviceConfig(v29, (__int128 *)v51);
      *(_DWORD *)((char *)v30 + 7) = *(_DWORD *)((char *)v54 + 7);
      v30[0] = v54[0];
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v31, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
      else
        v31 = v55;
      v32[0] = off_1E78EAB00;
      v32[1] = cf;
      if ((_QWORD)cf)
        CFRetain((CFTypeRef)cf);
      v32[0] = &off_1E78EAC60;
      IMSClientManager::callOnMainQueue((IMSClientManager *)v23);
      ims::CFType::~CFType((ims::CFType *)v32);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      ims::StackConfig::~StackConfig((void **)&v26);
      IMSCallOptions::~IMSCallOptions(v25);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
    }
    ims::CFType::~CFType((ims::CFType *)&v45);
  }
  else
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 1174405120;
    v14[2] = ___ZN3ims13EmergencyCall4dialERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_RKNS_10CallConfigERKNS_11StackConfigE_block_invoke_54;
    v14[3] = &__block_descriptor_tmp_55;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v15, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    else
      v15 = __s;
    IMSCallOptions::IMSCallOptions((IMSCallOptions *)v16, (const IMSCallOptions *)v57);
    v17 = v48;
    v18 = v49;
    ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)&v19, (const ims::NetworkConfig *)v50);
    ims::DeviceConfig::DeviceConfig(v20, (__int128 *)v51);
    *(_DWORD *)((char *)v21 + 7) = *(_DWORD *)((char *)v54 + 7);
    v21[0] = v54[0];
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v22, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
    else
      v22 = v55;
    IMSClientManager::callOnMainQueue((IMSClientManager *)v14);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    ims::StackConfig::~StackConfig((void **)&v17);
    IMSCallOptions::~IMSCallOptions(v16);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  ims::StackConfig::~StackConfig((void **)&v48);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  IMSCallOptions::~IMSCallOptions(v57);
}

void sub_1BF0351A4(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;

  ims::StackConfig::~StackConfig(v1);
  IMSCallOptions::~IMSCallOptions(v2);
  if (*(char *)(v4 + 55) < 0)
    operator delete((void *)STACK[0x1740]);
  ims::CFType::~CFType((ims::CFType *)&STACK[0x45A0]);
  ims::StackConfig::~StackConfig((void **)&STACK[0x45C0]);
  if (*(char *)(v3 + 823) < 0)
    operator delete((void *)STACK[0x48A0]);
  if (*(char *)(v3 + 855) < 0)
    operator delete((void *)STACK[0x48C0]);
  IMSCallOptions::~IMSCallOptions((void **)&STACK[0x48D8]);
  _Unwind_Resume(a1);
}

void ___ZN3ims13EmergencyCall4dialERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_RKNS_10CallConfigERKNS_11StackConfigE_block_invoke()
{
  uint64_t v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  void *v4[637];
  uint64_t v5;
  std::__shared_weak_count *v6;

  v0 = MEMORY[0x1E0C80A78]();
  IMSClientManager::instance((IMSClientManager *)v0);
  IPTelephonyManager::getInstance(&v5);
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)v4, (const IMSCallOptions *)(v0 + 56));
  IPTelephonyManager::initializeEmergency();
  IMSCallOptions::~IMSCallOptions(v4);
  v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1BF0354F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  IMSCallOptions::~IMSCallOptions((void **)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 48);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c20_ZTS14IMSCallOptions5152c23_ZTSN3ims11StackConfigE5888c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE5912c24_ZTSN3ims12CFDictionaryE5928c24_ZTSN3ims12CFDictionaryE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  const void *v8;
  CFTypeRef result;

  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)(a1 + 56), (const IMSCallOptions *)(a2 + 56));
  v5 = *(_OWORD *)(a2 + 5152);
  *(_QWORD *)(a1 + 5168) = *(_QWORD *)(a2 + 5168);
  *(_OWORD *)(a1 + 5152) = v5;
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)(a1 + 5176), (const ims::NetworkConfig *)(a2 + 5176));
  ims::DeviceConfig::DeviceConfig((std::string *)(a1 + 5768), (__int128 *)(a2 + 5768));
  v6 = *(_QWORD *)(a2 + 5872);
  *(_DWORD *)(a1 + 5879) = *(_DWORD *)(a2 + 5879);
  *(_QWORD *)(a1 + 5872) = v6;
  if (*(char *)(a2 + 5911) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 5888), *(const std::string::value_type **)(a2 + 5888), *(_QWORD *)(a2 + 5896));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 5888);
    *(_QWORD *)(a1 + 5904) = *(_QWORD *)(a2 + 5904);
    *(_OWORD *)(a1 + 5888) = v7;
  }
  *(_QWORD *)(a1 + 5912) = off_1E78EAB00;
  v8 = *(const void **)(a2 + 5920);
  *(_QWORD *)(a1 + 5920) = v8;
  if (v8)
    CFRetain(v8);
  *(_QWORD *)(a1 + 5912) = &off_1E78EAC60;
  *(_QWORD *)(a1 + 5928) = off_1E78EAB00;
  result = *(CFTypeRef *)(a2 + 5936);
  *(_QWORD *)(a1 + 5936) = result;
  if (result)
    result = CFRetain(result);
  *(_QWORD *)(a1 + 5928) = &off_1E78EAC60;
  return result;
}

void sub_1BF035660(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  void **v3;

  ims::StackConfig::~StackConfig((void **)(v2 + 5152));
  IMSCallOptions::~IMSCallOptions(v3);
  if (*(char *)(v2 + 55) < 0)
    operator delete(*v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c20_ZTS14IMSCallOptions5152c23_ZTSN3ims11StackConfigE5888c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE5912c24_ZTSN3ims12CFDictionaryE5928c24_ZTSN3ims12CFDictionaryE(uint64_t a1)
{
  void **v2;
  void **v3;
  ims::CFType *v4;

  v2 = (void **)(a1 + 56);
  v3 = (void **)(a1 + 5152);
  v4 = (ims::CFType *)(a1 + 5912);
  ims::CFType::~CFType((ims::CFType *)(a1 + 5928));
  ims::CFType::~CFType(v4);
  if (*(char *)(a1 + 5911) < 0)
    operator delete(*(void **)(a1 + 5888));
  ims::StackConfig::~StackConfig(v3);
  IMSCallOptions::~IMSCallOptions(v2);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void ___ZN3ims13EmergencyCall4dialERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_RKNS_10CallConfigERKNS_11StackConfigE_block_invoke_52()
{
  uint64_t v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  void *v4[637];
  uint64_t v5;
  std::__shared_weak_count *v6;

  v0 = MEMORY[0x1E0C80A78]();
  IMSClientManager::instance((IMSClientManager *)v0);
  IPTelephonyManager::getInstance(&v5);
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)v4, (const IMSCallOptions *)(v0 + 56));
  IPTelephonyManager::initializeEmergency();
  IMSCallOptions::~IMSCallOptions(v4);
  v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1BF035844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  IMSCallOptions::~IMSCallOptions((void **)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 48);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c20_ZTS14IMSCallOptions5152c23_ZTSN3ims11StackConfigE5888c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE5912c24_ZTSN3ims12CFDictionaryE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  CFTypeRef result;

  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)(a1 + 56), (const IMSCallOptions *)(a2 + 56));
  v5 = *(_OWORD *)(a2 + 5152);
  *(_QWORD *)(a1 + 5168) = *(_QWORD *)(a2 + 5168);
  *(_OWORD *)(a1 + 5152) = v5;
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)(a1 + 5176), (const ims::NetworkConfig *)(a2 + 5176));
  ims::DeviceConfig::DeviceConfig((std::string *)(a1 + 5768), (__int128 *)(a2 + 5768));
  v6 = *(_QWORD *)(a2 + 5872);
  *(_DWORD *)(a1 + 5879) = *(_DWORD *)(a2 + 5879);
  *(_QWORD *)(a1 + 5872) = v6;
  if (*(char *)(a2 + 5911) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 5888), *(const std::string::value_type **)(a2 + 5888), *(_QWORD *)(a2 + 5896));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 5888);
    *(_QWORD *)(a1 + 5904) = *(_QWORD *)(a2 + 5904);
    *(_OWORD *)(a1 + 5888) = v7;
  }
  *(_QWORD *)(a1 + 5912) = off_1E78EAB00;
  result = *(CFTypeRef *)(a2 + 5920);
  *(_QWORD *)(a1 + 5920) = result;
  if (result)
    result = CFRetain(result);
  *(_QWORD *)(a1 + 5912) = &off_1E78EAC60;
  return result;
}

void sub_1BF03598C(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  void **v3;

  ims::StackConfig::~StackConfig((void **)(v2 + 5152));
  IMSCallOptions::~IMSCallOptions(v3);
  if (*(char *)(v2 + 55) < 0)
    operator delete(*v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c20_ZTS14IMSCallOptions5152c23_ZTSN3ims11StackConfigE5888c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE5912c24_ZTSN3ims12CFDictionaryE(uint64_t a1)
{
  void **v2;
  void **v3;

  v2 = (void **)(a1 + 56);
  v3 = (void **)(a1 + 5152);
  ims::CFType::~CFType((ims::CFType *)(a1 + 5912));
  if (*(char *)(a1 + 5911) < 0)
    operator delete(*(void **)(a1 + 5888));
  ims::StackConfig::~StackConfig(v3);
  IMSCallOptions::~IMSCallOptions(v2);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void ___ZN3ims13EmergencyCall4dialERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_RKNS_10CallConfigERKNS_11StackConfigE_block_invoke_54()
{
  uint64_t v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  void *v4[637];
  uint64_t v5;
  std::__shared_weak_count *v6;

  v0 = MEMORY[0x1E0C80A78]();
  IMSClientManager::instance((IMSClientManager *)v0);
  IPTelephonyManager::getInstance(&v5);
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)v4, (const IMSCallOptions *)(v0 + 56));
  IPTelephonyManager::initializeEmergency();
  IMSCallOptions::~IMSCallOptions(v4);
  v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1BF035B4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  IMSCallOptions::~IMSCallOptions((void **)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 48);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c20_ZTS14IMSCallOptions5152c23_ZTSN3ims11StackConfigE5888c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  std::string *v7;
  __int128 v8;

  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)(a1 + 56), (const IMSCallOptions *)(a2 + 56));
  v5 = *(_OWORD *)(a2 + 5152);
  *(_QWORD *)(a1 + 5168) = *(_QWORD *)(a2 + 5168);
  *(_OWORD *)(a1 + 5152) = v5;
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)(a1 + 5176), (const ims::NetworkConfig *)(a2 + 5176));
  ims::DeviceConfig::DeviceConfig((std::string *)(a1 + 5768), (__int128 *)(a2 + 5768));
  v6 = *(_QWORD *)(a2 + 5872);
  *(_DWORD *)(a1 + 5879) = *(_DWORD *)(a2 + 5879);
  *(_QWORD *)(a1 + 5872) = v6;
  v7 = (std::string *)(a1 + 5888);
  if (*(char *)(a2 + 5911) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 5888), *(_QWORD *)(a2 + 5896));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 5888);
    *(_QWORD *)(a1 + 5904) = *(_QWORD *)(a2 + 5904);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_1BF035C70(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  void **v3;
  void **v4;

  ims::StackConfig::~StackConfig(v4);
  IMSCallOptions::~IMSCallOptions(v3);
  if (*(char *)(v2 + 55) < 0)
    operator delete(*v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c20_ZTS14IMSCallOptions5152c23_ZTSN3ims11StackConfigE5888c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  void **v2;
  void **v3;

  v2 = (void **)(a1 + 56);
  v3 = (void **)(a1 + 5152);
  if (*(char *)(a1 + 5911) < 0)
    operator delete(*(void **)(a1 + 5888));
  ims::StackConfig::~StackConfig(v3);
  IMSCallOptions::~IMSCallOptions(v2);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void ims::Call::pull()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  const std::string *v3;
  const std::string *v4;
  uint64_t v5;
  __int128 v6;
  _QWORD v7[4];
  void *v8[637];
  std::string v9;
  void (**v10)(ImsUuid *__hidden);
  __int128 v11;
  uint64_t v12;
  void *v13[2];
  __int128 __p;
  uint64_t v15;
  __int16 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  char v20;
  char v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  char v27;
  __int128 v28;
  _QWORD v29[4];
  char v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[40];
  std::string v34[2];
  std::string v35[2];
  char v36;
  uint64_t v37;
  std::string v38;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  bzero(v13, 0x13E8uLL);
  BYTE1(v13[0]) = -1;
  v17 = 0u;
  v18 = 0u;
  v13[1] = off_1E78C0288;
  __p = 0uLL;
  v15 = 0;
  v16 = 0;
  v20 = 1;
  v21 = 1;
  v23 = 257;
  v25 = 256;
  v22 = 0x200000001;
  v24 = 0;
  v31 = 0u;
  v32 = 0u;
  v27 = 0;
  v19 = 90;
  v26 = 0;
  v30 = 0;
  memset(v29, 0, sizeof(v29));
  v28 = 0u;
  *(_QWORD *)v33 = 0x40A7700000000000;
  memset(&v33[8], 0, 32);
  memset(v34, 0, sizeof(v34));
  memset(v35, 0, sizeof(v35));
  v36 = 0;
  BambiEmergencyCallOptions::BambiEmergencyCallOptions((BambiEmergencyCallOptions *)&v37);
  memset(&v38, 0, sizeof(v38));
  std::string::operator=(&v35[1], (const std::string *)(v2 + 8));
  BYTE1(v13[0]) = *(_BYTE *)v2;
  LOBYTE(v16) = *(_BYTE *)(v5 + 9);
  HIBYTE(v16) = *(_BYTE *)(v5 + 8);
  BYTE1(v26) = *(_DWORD *)(v5 + 64) == 2;
  HIWORD(v26) = *(_WORD *)(v5 + 68);
  v30 = *(_BYTE *)(v2 + 32);
  v6 = *(_OWORD *)(v2 + 80);
  v31 = *(_OWORD *)(v2 + 64);
  v32 = v6;
  *(_OWORD *)v33 = *(_OWORD *)(v2 + 96);
  LOBYTE(v26) = 0;
  std::string::operator=((std::string *)&v33[16], (const std::string *)(v2 + 112));
  std::string::operator=(v34, (const std::string *)(v2 + 136));
  std::string::operator=(&v34[1], (const std::string *)(v2 + 160));
  std::string::operator=(v35, (const std::string *)(v2 + 184));
  std::string::operator=((std::string *)&v29[1], v4);
  if (*(char *)(v5 + 39) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(v5 + 16), *(_QWORD *)(v5 + 24));
  else
    v9 = *(std::string *)(v5 + 16);
  ImsUuid::ImsUuid(&v10, (uint64_t)&v9);
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p);
  __p = v11;
  v15 = v12;
  HIBYTE(v12) = 0;
  LOBYTE(v11) = 0;
  v10 = off_1E78C0288;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  std::string::operator=(&v38, (const std::string *)(v5 + 40));
  LOBYTE(v13[0]) = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN3ims4Call4pullERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_10CallConfigE_block_invoke;
  v7[3] = &__block_descriptor_tmp_56_0;
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)v8, (const IMSCallOptions *)v13);
  IMSClientManager::callOnMainQueue((IMSClientManager *)v7);
  IMSCallOptions::~IMSCallOptions(v8);
  IMSCallOptions::~IMSCallOptions(v13);
}

void sub_1BF03609C(_Unwind_Exception *a1)
{
  IMSCallOptions::~IMSCallOptions((void **)&STACK[0x1448]);
  _Unwind_Resume(a1);
}

void ___ZN3ims4Call4pullERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_10CallConfigE_block_invoke()
{
  uint64_t v0;
  uint64_t *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5[637];
  uint64_t v6;
  std::__shared_weak_count *v7;

  v0 = MEMORY[0x1E0C80A78]();
  IMSClientManager::instance((IMSClientManager *)v0);
  IPTelephonyManager::getInstance(&v6);
  v1 = *(uint64_t **)(v6 + 200);
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)v5, (const IMSCallOptions *)(v0 + 32));
  IMSCallManager::initializePullCall(v1, (uint64_t)v5);
  IMSCallOptions::~IMSCallOptions(v5);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF0361B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  IMSCallOptions::~IMSCallOptions((void **)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 48);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c20_ZTS14IMSCallOptions(uint64_t a1, uint64_t a2)
{
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)(a1 + 32), (const IMSCallOptions *)(a2 + 32));
}

void __destroy_helper_block_e8_32c20_ZTS14IMSCallOptions(uint64_t a1)
{
  IMSCallOptions::~IMSCallOptions((void **)(a1 + 32));
}

uint64_t ims::CallHandle::setCallIdBlocking(uint64_t this, char a2, char a3)
{
  *(_BYTE *)(this + 8) = a3;
  *(_BYTE *)(this + 9) = a2;
  return this;
}

void ims::Call::ring(ims::Call *this)
{
  _QWORD v1[4];
  std::string __p;
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  if (*((char *)this + 39) < 0)
    std::string::__init_copy_ctor_external(&v3, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
  else
    v3 = *(std::string *)((char *)this + 16);
  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 1174405120;
  v1[2] = ___ZNK3ims4Call4ringEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_57_1;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v3.__r_.__value_.__l.__data_, v3.__r_.__value_.__l.__size_);
  else
    __p = v3;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
}

void sub_1BF0362CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (*(char *)(v19 - 25) < 0)
    operator delete(*(void **)(v19 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims4Call4ringEv_block_invoke(IMSClientManager *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD v6[3];
  char v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v8);
  v2 = *(_QWORD *)(v8 + 200);
  ImsUuid::ImsUuid(v6, (uint64_t)a1 + 32);
  IMSCallManager::ringCall(v2, (uint64_t)v6);
  v6[0] = off_1E78C0288;
  if (v7 < 0)
    operator delete((void *)v6[1]);
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF0363A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ims::Call::refresh(ims::Call *this, char a2)
{
  _QWORD v3[4];
  std::string __p;
  char v5;
  std::string v6;

  memset(&v6, 0, sizeof(v6));
  if (*((char *)this + 39) < 0)
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
  else
    v6 = *(std::string *)((char *)this + 16);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 1174405120;
  v3[2] = ___ZNK3ims4Call7refreshEb_block_invoke;
  v3[3] = &__block_descriptor_tmp_58_1;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  v5 = a2;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1BF0364B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 25) < 0)
    operator delete(*(void **)(v18 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims4Call7refreshEb_block_invoke(unsigned __int8 *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD v6[3];
  char v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v8);
  v2 = *(_QWORD *)(v8 + 200);
  ImsUuid::ImsUuid(v6, (uint64_t)(a1 + 32));
  IMSCallManager::refreshCall(v2, (uint64_t)v6, a1[56]);
  v6[0] = off_1E78C0288;
  if (v7 < 0)
    operator delete((void *)v6[1]);
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF036594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ims::Call::hold(ims::Call *this)
{
  _QWORD v1[4];
  std::string __p;
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  if (*((char *)this + 39) < 0)
    std::string::__init_copy_ctor_external(&v3, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
  else
    v3 = *(std::string *)((char *)this + 16);
  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 1174405120;
  v1[2] = ___ZNK3ims4Call4holdEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_59_1;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v3.__r_.__value_.__l.__data_, v3.__r_.__value_.__l.__size_);
  else
    __p = v3;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
}

void sub_1BF0366A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (*(char *)(v19 - 25) < 0)
    operator delete(*(void **)(v19 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims4Call4holdEv_block_invoke(IMSClientManager *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD v6[3];
  char v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v8);
  v2 = *(_QWORD *)(v8 + 200);
  ImsUuid::ImsUuid(v6, (uint64_t)a1 + 32);
  IMSCallManager::deactivateCall(v2, (uint64_t)v6);
  v6[0] = off_1E78C0288;
  if (v7 < 0)
    operator delete((void *)v6[1]);
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF036778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ims::Call::resume(ims::Call *this)
{
  _QWORD v1[4];
  std::string __p;
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  if (*((char *)this + 39) < 0)
    std::string::__init_copy_ctor_external(&v3, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
  else
    v3 = *(std::string *)((char *)this + 16);
  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 1174405120;
  v1[2] = ___ZNK3ims4Call6resumeEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_60_1;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v3.__r_.__value_.__l.__data_, v3.__r_.__value_.__l.__size_);
  else
    __p = v3;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
}

void sub_1BF036884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (*(char *)(v19 - 25) < 0)
    operator delete(*(void **)(v19 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims4Call6resumeEv_block_invoke(IMSClientManager *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD v6[3];
  char v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v8);
  v2 = *(_QWORD *)(v8 + 200);
  ImsUuid::ImsUuid(v6, (uint64_t)a1 + 32);
  IMSCallManager::activateCall(v2, (uint64_t)v6);
  v6[0] = off_1E78C0288;
  if (v7 < 0)
    operator delete((void *)v6[1]);
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF03695C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ims::CallHandle::setTextMediaSessionMode(uint64_t a1, int a2)
{
  _QWORD v3[4];
  std::string __p;
  int v5;
  std::string v6;

  *(_DWORD *)(a1 + 64) = a2;
  memset(&v6, 0, sizeof(v6));
  if (*(char *)(a1 + 39) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  else
    v6 = *(std::string *)(a1 + 16);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 1174405120;
  v3[2] = ___ZN3ims10CallHandle23setTextMediaSessionModeENS_20TextMediaSessionModeE_block_invoke;
  v3[3] = &__block_descriptor_tmp_61_3;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  v5 = a2;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1BF036A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 25) < 0)
    operator delete(*(void **)(v18 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZN3ims10CallHandle23setTextMediaSessionModeENS_20TextMediaSessionModeE_block_invoke(int *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD v6[3];
  char v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v8);
  v2 = *(_QWORD *)(v8 + 200);
  ImsUuid::ImsUuid(v6, (uint64_t)(a1 + 8));
  IMSCallManager::setTextMediaSessionMode(v2, (uint64_t)v6, a1[14]);
  v6[0] = off_1E78C0288;
  if (v7 < 0)
    operator delete((void *)v6[1]);
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF036B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

_QWORD *ims::EmergencyCall::EmergencyCall(uint64_t a1, __int128 *a2)
{
  _QWORD *result;

  result = (_QWORD *)ims::CallHandle::CallHandle(a1, a2, &IMSClientManager::kEmergencyStack);
  *result = &off_1E78D34C8;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)ims::CallHandle::CallHandle(a1, a2, &IMSClientManager::kEmergencyStack);
  *result = &off_1E78D34C8;
  return result;
}

void ims::CallHandle::hangup(uint64_t a1, _DWORD *a2)
{
  std::string::value_type *v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  _QWORD v11[4];
  std::string v12;
  std::string __p;
  std::string v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  std::string::basic_string[abi:ne180100]<0>(&v15, "UserTriggered");
  switch(*a2)
  {
    case 1:
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      {
        v15.__r_.__value_.__l.__size_ = 12;
        v5 = (std::string *)v15.__r_.__value_.__r.__words[0];
        v4 = (std::string::value_type *)(v15.__r_.__value_.__r.__words[0] + 12);
      }
      else
      {
        v4 = &v15.__r_.__value_.__s.__data_[12];
        *((_BYTE *)&v15.__r_.__value_.__s + 23) = 12;
        v5 = &v15;
      }
      qmemcpy(v5, "DoNotDisturb", 12);
      goto LABEL_26;
    case 2:
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      {
        v15.__r_.__value_.__l.__size_ = 19;
        v6 = (std::string *)v15.__r_.__value_.__r.__words[0];
        v4 = (std::string::value_type *)(v15.__r_.__value_.__r.__words[0] + 19);
      }
      else
      {
        v4 = &v15.__r_.__value_.__s.__data_[19];
        *((_BYTE *)&v15.__r_.__value_.__s + 23) = 19;
        v6 = &v15;
      }
      qmemcpy(v6, "CallWaitingDisabled", 19);
      goto LABEL_26;
    case 3:
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      {
        v15.__r_.__value_.__l.__size_ = 5;
        v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
        v4 = (std::string::value_type *)(v15.__r_.__value_.__r.__words[0] + 5);
      }
      else
      {
        v4 = &v15.__r_.__value_.__s.__data_[5];
        *((_BYTE *)&v15.__r_.__value_.__s + 23) = 5;
        v7 = &v15;
      }
      qmemcpy(v7, "SRVCC", 5);
      goto LABEL_26;
    case 4:
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      {
        v15.__r_.__value_.__l.__size_ = 16;
        v8 = (std::string *)v15.__r_.__value_.__r.__words[0];
        v4 = (std::string::value_type *)(v15.__r_.__value_.__r.__words[0] + 16);
      }
      else
      {
        v4 = &v15.__r_.__value_.__s.__data_[16];
        *((_BYTE *)&v15.__r_.__value_.__s + 23) = 16;
        v8 = &v15;
      }
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)"DeferToSecondary";
      goto LABEL_26;
    case 5:
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      {
        v15.__r_.__value_.__l.__size_ = 14;
        v9 = (std::string *)v15.__r_.__value_.__r.__words[0];
        v4 = (std::string::value_type *)(v15.__r_.__value_.__r.__words[0] + 14);
      }
      else
      {
        v4 = &v15.__r_.__value_.__s.__data_[14];
        *((_BYTE *)&v15.__r_.__value_.__s + 23) = 14;
        v9 = &v15;
      }
      qmemcpy(v9, "AvoidVoicemail", 14);
      goto LABEL_26;
    case 6:
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      {
        v15.__r_.__value_.__l.__size_ = 7;
        v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
        v4 = (std::string::value_type *)(v15.__r_.__value_.__r.__words[0] + 7);
      }
      else
      {
        v4 = &v15.__r_.__value_.__s.__data_[7];
        *((_BYTE *)&v15.__r_.__value_.__s + 23) = 7;
        v10 = &v15;
      }
      qmemcpy(v10, "Blocked", 7);
LABEL_26:
      *v4 = 0;
      break;
    default:
      break;
  }
  memset(&v14, 0, sizeof(v14));
  if (*(char *)(a1 + 39) < 0)
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  else
    v14 = *(std::string *)(a1 + 16);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1174405120;
  v11[2] = ___ZNK3ims10CallHandle6hangupERKNS_13CallEndReasonE_block_invoke;
  v11[3] = &__block_descriptor_tmp_62_0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v12, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  else
    v12 = v14;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  else
    __p = v15;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_1BF036EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a18 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (*(char *)(v30 - 33) < 0)
    operator delete(*(void **)(v30 - 56));
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims10CallHandle6hangupERKNS_13CallEndReasonE_block_invoke(IMSClientManager *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD v6[3];
  char v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v8);
  v2 = *(_QWORD *)(v8 + 200);
  ImsUuid::ImsUuid(v6, (uint64_t)a1 + 32);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v2 + 40))(v2, v6, (uint64_t)a1 + 56);
  v6[0] = off_1E78C0288;
  if (v7 < 0)
    operator delete((void *)v6[1]);
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF03700C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ims::CallHandle::answer(uint64_t a1, uint64_t a2)
{
  _QWORD v3[4];
  std::string v4;
  std::string __p;
  std::string v6;
  std::string v7;

  memset(&v7, 0, sizeof(v7));
  if (*(char *)(a1 + 39) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  else
    v7 = *(std::string *)(a1 + 16);
  memset(&v6, 0, sizeof(v6));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v6 = *(std::string *)a2;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 1174405120;
  v3[2] = ___ZNK3ims10CallHandle6answerERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
  v3[3] = &__block_descriptor_tmp_63_1;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v4, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
  else
    v4 = v7;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_1BF037198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a18 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (*(char *)(v30 - 25) < 0)
    operator delete(*(void **)(v30 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims10CallHandle6answerERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(IMSClientManager *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD v6[3];
  char v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v8);
  v2 = *(_QWORD *)(v8 + 200);
  ImsUuid::ImsUuid(v6, (uint64_t)a1 + 32);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v2 + 32))(v2, v6, (uint64_t)a1 + 56);
  v6[0] = off_1E78C0288;
  if (v7 < 0)
    operator delete((void *)v6[1]);
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF0372AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ims::CallHandle::setRelayCall(ims::CallHandle *this, char a2)
{
  _QWORD v3[4];
  std::string __p;
  char v5;
  std::string v6;

  *((_BYTE *)this + 68) = a2;
  memset(&v6, 0, sizeof(v6));
  if (*((char *)this + 39) < 0)
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
  else
    v6 = *(std::string *)((char *)this + 16);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 1174405120;
  v3[2] = ___ZN3ims10CallHandle12setRelayCallEb_block_invoke;
  v3[3] = &__block_descriptor_tmp_64;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  v5 = a2;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1BF0373C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 25) < 0)
    operator delete(*(void **)(v18 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZN3ims10CallHandle12setRelayCallEb_block_invoke(unsigned __int8 *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD v6[3];
  char v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v8);
  v2 = *(_QWORD *)(v8 + 200);
  ImsUuid::ImsUuid(v6, (uint64_t)(a1 + 32));
  IMSCallManager::setRelayMode(v2, (uint64_t)v6, a1[56]);
  v6[0] = off_1E78C0288;
  if (v7 < 0)
    operator delete((void *)v6[1]);
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF0374A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ims::CallHandle::setScreeningCall(ims::CallHandle *this, char a2)
{
  _QWORD v3[4];
  std::string __p;
  char v5;
  std::string v6;

  *((_BYTE *)this + 69) = a2;
  memset(&v6, 0, sizeof(v6));
  if (*((char *)this + 39) < 0)
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
  else
    v6 = *(std::string *)((char *)this + 16);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 1174405120;
  v3[2] = ___ZN3ims10CallHandle16setScreeningCallEb_block_invoke;
  v3[3] = &__block_descriptor_tmp_65_0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  v5 = a2;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1BF0375B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 25) < 0)
    operator delete(*(void **)(v18 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZN3ims10CallHandle16setScreeningCallEb_block_invoke(unsigned __int8 *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD v6[3];
  char v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v8);
  v2 = *(_QWORD *)(v8 + 200);
  ImsUuid::ImsUuid(v6, (uint64_t)(a1 + 32));
  IMSCallManager::setScreeningMode(v2, (uint64_t)v6, a1[56]);
  v6[0] = off_1E78C0288;
  if (v7 < 0)
    operator delete((void *)v6[1]);
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF037694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t ims::CreateNewClient(NSObject *this, dispatch_queue_s *a2)
{
  uint64_t Client;
  void (**v5)(ImsUuid *__hidden);
  std::string __p;
  std::string v7;

  ImsUuid::generate((ImsUuid *)&v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v7 = __p;
  Client = IMSClientManager::createClient((std::string::size_type)&v7, this);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  v5 = off_1E78C0288;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return Client;
}

void sub_1BF037768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ims::setBBServerConnection(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD v6[2];

  v1 = (std::__shared_weak_count *)a1[1];
  v6[0] = *a1;
  v6[1] = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  IMSClientManager::setBBServerConnection(v6);
  if (v1)
  {
    v4 = (unint64_t *)&v1->__shared_owners_;
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1BF037834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::addCallEndInfo(xpc_object_t *a1)
{
  xpc_object_t v1;
  void *v2;

  v1 = *a1;
  v2 = v1;
  if (v1)
  {
    xpc_retain(v1);
  }
  else
  {
    v1 = xpc_null_create();
    v2 = v1;
  }
  IMSClientManager::addCallEndInfo(&v2);
  xpc_release(v1);
}

void sub_1BF0378A0(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

void ims::Call::~Call(void **this)
{
  ims::CallHandle::~CallHandle(this);
  JUMPOUT(0x1C3B87100);
}

void ims::EmergencyCall::~EmergencyCall(void **this)
{
  ims::CallHandle::~CallHandle(this);
  JUMPOUT(0x1C3B87100);
}

void ims::EmergencyClient::~EmergencyClient(void **this)
{
  *this = off_1E78D3CF0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78D3CF0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

void ims::StackEventDelegateWrapper::~StackEventDelegateWrapper(ims::StackEventDelegateWrapper *this)
{
  JUMPOUT(0x1C3B87100);
}

void std::__shared_ptr_pointer<ims::StackEventDelegateWrapper *,std::shared_ptr<ims::StackEventDelegate>::__shared_ptr_default_delete<ims::StackEventDelegate,ims::StackEventDelegateWrapper>,std::allocator<ims::StackEventDelegateWrapper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_pointer<ims::StackEventDelegateWrapper *,std::shared_ptr<ims::StackEventDelegate>::__shared_ptr_default_delete<ims::StackEventDelegate,ims::StackEventDelegateWrapper>,std::allocator<ims::StackEventDelegateWrapper>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ims::StackEventDelegateWrapper *,std::shared_ptr<ims::StackEventDelegate>::__shared_ptr_default_delete<ims::StackEventDelegate,ims::StackEventDelegateWrapper>,std::allocator<ims::StackEventDelegateWrapper>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ims::CallEventDelegateWrapper::~CallEventDelegateWrapper(ims::CallEventDelegateWrapper *this)
{
  JUMPOUT(0x1C3B87100);
}

void std::__shared_ptr_pointer<ims::CallEventDelegateWrapper *,std::shared_ptr<ims::CallEventDelegate>::__shared_ptr_default_delete<ims::CallEventDelegate,ims::CallEventDelegateWrapper>,std::allocator<ims::CallEventDelegateWrapper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_pointer<ims::CallEventDelegateWrapper *,std::shared_ptr<ims::CallEventDelegate>::__shared_ptr_default_delete<ims::CallEventDelegate,ims::CallEventDelegateWrapper>,std::allocator<ims::CallEventDelegateWrapper>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ims::CallEventDelegateWrapper *,std::shared_ptr<ims::CallEventDelegate>::__shared_ptr_default_delete<ims::CallEventDelegate,ims::CallEventDelegateWrapper>,std::allocator<ims::CallEventDelegateWrapper>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ims::CallManagerEventDelegateWrapper::~CallManagerEventDelegateWrapper(void **this)
{
  *this = &unk_1E78D2260;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = &unk_1E78D2260;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

uint64_t ims::CallManagerEventDelegateWrapper::handleIncomingEvent(ims::CallManagerEventDelegateWrapper *this, ims::CallHandle *a2, const ims::CallIncomingInfo *a3)
{
  uint64_t result;

  if (a2)
    return (*(uint64_t (**)(ims::CallHandle *))(*(_QWORD *)a2 + 8))(a2);
  return result;
}

void std::__shared_ptr_pointer<ims::CallManagerEventDelegateWrapper *,std::shared_ptr<ims::CallManagerEventDelegate>::__shared_ptr_default_delete<ims::CallManagerEventDelegate,ims::CallManagerEventDelegateWrapper>,std::allocator<ims::CallManagerEventDelegateWrapper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_pointer<ims::CallManagerEventDelegateWrapper *,std::shared_ptr<ims::CallManagerEventDelegate>::__shared_ptr_default_delete<ims::CallManagerEventDelegate,ims::CallManagerEventDelegateWrapper>,std::allocator<ims::CallManagerEventDelegateWrapper>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ims::CallManagerEventDelegateWrapper *,std::shared_ptr<ims::CallManagerEventDelegate>::__shared_ptr_default_delete<ims::CallManagerEventDelegate,ims::CallManagerEventDelegateWrapper>,std::allocator<ims::CallManagerEventDelegateWrapper>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ims::MessageEventDelegateWrapper::~MessageEventDelegateWrapper(ims::MessageEventDelegateWrapper *this)
{
  JUMPOUT(0x1C3B87100);
}

void std::__shared_ptr_pointer<ims::MessageEventDelegateWrapper *,std::shared_ptr<ims::MessageEventDelegate>::__shared_ptr_default_delete<ims::MessageEventDelegate,ims::MessageEventDelegateWrapper>,std::allocator<ims::MessageEventDelegateWrapper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_pointer<ims::MessageEventDelegateWrapper *,std::shared_ptr<ims::MessageEventDelegate>::__shared_ptr_default_delete<ims::MessageEventDelegate,ims::MessageEventDelegateWrapper>,std::allocator<ims::MessageEventDelegateWrapper>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ims::MessageEventDelegateWrapper *,std::shared_ptr<ims::MessageEventDelegate>::__shared_ptr_default_delete<ims::MessageEventDelegate,ims::MessageEventDelegateWrapper>,std::allocator<ims::MessageEventDelegateWrapper>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ims::XcapEventDelegateWrapper::~XcapEventDelegateWrapper(ims::XcapEventDelegateWrapper *this)
{
  JUMPOUT(0x1C3B87100);
}

void std::__shared_ptr_pointer<ims::XcapEventDelegateWrapper *,std::shared_ptr<ims::XcapEventDelegate>::__shared_ptr_default_delete<ims::XcapEventDelegate,ims::XcapEventDelegateWrapper>,std::allocator<ims::XcapEventDelegateWrapper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_pointer<ims::XcapEventDelegateWrapper *,std::shared_ptr<ims::XcapEventDelegate>::__shared_ptr_default_delete<ims::XcapEventDelegate,ims::XcapEventDelegateWrapper>,std::allocator<ims::XcapEventDelegateWrapper>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ims::XcapEventDelegateWrapper *,std::shared_ptr<ims::XcapEventDelegate>::__shared_ptr_default_delete<ims::XcapEventDelegate,ims::XcapEventDelegateWrapper>,std::allocator<ims::XcapEventDelegateWrapper>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

ims::NetworkConfig *ims::NetworkConfig::NetworkConfig(ims::NetworkConfig *this, const ims::NetworkConfig *a2)
{
  std::string *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;

  v4 = (std::string *)ims::NetworkServices::NetworkServices(this, a2);
  if (*((char *)a2 + 335) < 0)
  {
    std::string::__init_copy_ctor_external(v4 + 13, *((const std::string::value_type **)a2 + 39), *((_QWORD *)a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 312);
    v4[13].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 41);
    *(_OWORD *)&v4[13].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 359) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 14, *((const std::string::value_type **)a2 + 42), *((_QWORD *)a2 + 43));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 21);
    *((_QWORD *)this + 44) = *((_QWORD *)a2 + 44);
    *((_OWORD *)this + 21) = v6;
  }
  if (*((char *)a2 + 383) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 15, *((const std::string::value_type **)a2 + 45), *((_QWORD *)a2 + 46));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 360);
    *((_QWORD *)this + 47) = *((_QWORD *)a2 + 47);
    *(_OWORD *)((char *)this + 360) = v7;
  }
  if (*((char *)a2 + 407) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 16, *((const std::string::value_type **)a2 + 48), *((_QWORD *)a2 + 49));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 24);
    *((_QWORD *)this + 50) = *((_QWORD *)a2 + 50);
    *((_OWORD *)this + 24) = v8;
  }
  if (*((char *)a2 + 431) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 17, *((const std::string::value_type **)a2 + 51), *((_QWORD *)a2 + 52));
  }
  else
  {
    v9 = *(_OWORD *)((char *)a2 + 408);
    *((_QWORD *)this + 53) = *((_QWORD *)a2 + 53);
    *(_OWORD *)((char *)this + 408) = v9;
  }
  if (*((char *)a2 + 455) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 18, *((const std::string::value_type **)a2 + 54), *((_QWORD *)a2 + 55));
  }
  else
  {
    v10 = *((_OWORD *)a2 + 27);
    *((_QWORD *)this + 56) = *((_QWORD *)a2 + 56);
    *((_OWORD *)this + 27) = v10;
  }
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 19, *((__int128 **)a2 + 57), *((__int128 **)a2 + 58), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 58) - *((_QWORD *)a2 + 57)) >> 3));
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 62) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 20, *((__int128 **)a2 + 60), *((__int128 **)a2 + 61), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 61) - *((_QWORD *)a2 + 60)) >> 3));
  if (*((char *)a2 + 527) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 21, *((const std::string::value_type **)a2 + 63), *((_QWORD *)a2 + 64));
  }
  else
  {
    v11 = *(_OWORD *)((char *)a2 + 504);
    *((_QWORD *)this + 65) = *((_QWORD *)a2 + 65);
    *(_OWORD *)((char *)this + 504) = v11;
  }
  v12 = *((_DWORD *)a2 + 132);
  *(_DWORD *)((char *)this + 531) = *(_DWORD *)((char *)a2 + 531);
  *((_DWORD *)this + 132) = v12;
  if (*((char *)a2 + 559) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 536), *((const std::string::value_type **)a2 + 67), *((_QWORD *)a2 + 68));
  }
  else
  {
    v13 = *(_OWORD *)((char *)a2 + 536);
    *((_QWORD *)this + 69) = *((_QWORD *)a2 + 69);
    *(_OWORD *)((char *)this + 536) = v13;
  }
  v14 = (std::string *)((char *)this + 560);
  if (*((char *)a2 + 583) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *((const std::string::value_type **)a2 + 70), *((_QWORD *)a2 + 71));
  }
  else
  {
    v15 = *((_OWORD *)a2 + 35);
    *((_QWORD *)this + 72) = *((_QWORD *)a2 + 72);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  *((_WORD *)this + 292) = *((_WORD *)a2 + 292);
  return this;
}

void sub_1BF037FB0(_Unwind_Exception *a1, uint64_t a2, void **a3, void **a4, ...)
{
  uint64_t v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  va_list va;

  va_start(va, a4);
  if (*(char *)(v4 + 559) < 0)
    operator delete(*v6);
  if (*(char *)(v4 + 527) < 0)
    operator delete(*v5);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v4 + 455) < 0)
    operator delete(*v10);
  if (*(char *)(v4 + 431) < 0)
    operator delete(*v9);
  if (*(char *)(v4 + 407) < 0)
    operator delete(*v8);
  if (*(char *)(v4 + 383) < 0)
    operator delete(*v7);
  if (*(char *)(v4 + 359) < 0)
    operator delete(*a3);
  if (*(char *)(v4 + 335) < 0)
    operator delete(*a4);
  ims::NetworkServices::~NetworkServices((void **)v4);
  _Unwind_Resume(a1);
}

std::string *ims::DeviceConfig::DeviceConfig(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  v7 = this + 3;
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v8 = *(__int128 *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  LOWORD(this[4].__r_.__value_.__l.__data_) = *((_WORD *)a2 + 48);
  return this;
}

void sub_1BF03819C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned short>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BF038244(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void IMSCallOptions::IMSCallOptions(IMSCallOptions *this, const IMSCallOptions *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_WORD *)this = *(_WORD *)a2;
  *((_QWORD *)this + 1) = off_1E78C0288;
  if (*((char *)a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
  }
  else
  {
    v4 = *((_OWORD *)a2 + 1);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
    *((_OWORD *)this + 1) = v4;
  }
  BambiCallOptions::BambiCallOptions((IMSCallOptions *)((char *)this + 40), (const IMSCallOptions *)((char *)a2 + 40));
  BambiEmergencyCallOptions::BambiEmergencyCallOptions((std::string *)((char *)this + 392), (const IMSCallOptions *)((char *)a2 + 392));
  v5 = (std::string *)((char *)this + 5072);
  if (*((char *)a2 + 5095) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 634), *((_QWORD *)a2 + 635));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 317);
    *((_QWORD *)this + 636) = *((_QWORD *)a2 + 636);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1BF038330(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  uint64_t v5;

  BambiEmergencyCallOptions::~BambiEmergencyCallOptions(v4);
  BambiCallOptions::~BambiCallOptions(v3);
  *(_QWORD *)(v1 + 8) = v5;
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void IMSCallOptions::~IMSCallOptions(void **this)
{
  char *v2;

  v2 = (char *)this + 5063;
  if (*((char *)this + 5095) < 0)
    operator delete(this[634]);
  if (*v2 < 0)
    operator delete(this[630]);
  SipUri::~SipUri((SipUri *)(this + 579));
  SipStackConfig::~SipStackConfig(this + 268);
  SipRegistrationConfig::~SipRegistrationConfig(this + 59);
  if (*((char *)this + 463) < 0)
    operator delete(this[55]);
  if (*((char *)this + 439) < 0)
    operator delete(this[52]);
  if (*((char *)this + 415) < 0)
    operator delete(this[49]);
  BambiCallOptions::~BambiCallOptions(this + 5);
  this[1] = off_1E78C0288;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

ImsOutStream *SipSecurityMechanism::log(SipSecurityMechanism *this, ImsOutStream *a2)
{
  (*(void (**)(ImsOutStream *, char *))(*(_QWORD *)a2 + 32))(a2, (char *)this + 8);
  SipParameterMap::toStream((SipSecurityMechanism *)((char *)this + 32), a2, 0, 0, 0, 0);
  return a2;
}

std::string *SipSecurityMechanism::loggableName@<X0>(SipSecurityMechanism *this@<X0>, std::string *a2@<X8>)
{
  return LoggableString::LoggableString(a2, (const std::string *)((char *)this + 8));
}

uint64_t tlv::parseV<nas::tlv::SsacInfoVoice>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  int v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)1);
  v5 = *(unsigned __int8 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 1), v4, (const unsigned __int8 *)2);
  v6 = *(unsigned __int16 *)((char *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 3);
  return (v6 << 16) | v5;
}

void sub_1BF0384F8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BF0384E4);
}

uint64_t nas::tlv::parseField(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)1);
  *(_BYTE *)a3 = *(_BYTE *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 1), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 2) = *(_WORD *)(a1 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 3), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 4) = *(_BYTE *)(a1 + 3);
  return a1 + 4;
}

unint64_t tlv::parseV<nas::tlv::AcbInfoSignaling>(uint64_t *a1, int a2)
{
  unsigned int v3;
  unsigned __int16 v4;

  v4 = 0;
  v3 = 0;
  *a1 = nas::tlv::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)&v3);
  return v3 | ((unint64_t)v4 << 32);
}

void sub_1BF0385C8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BF0385ACLL);
}

unint64_t tlv::parseV<nas::tlv::AcbInfoData>(uint64_t *a1, int a2)
{
  unsigned int v3;
  unsigned __int16 v4;

  v4 = 0;
  v3 = 0;
  *a1 = nas::tlv::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), (uint64_t)&v3);
  return v3 | ((unint64_t)v4 << 32);
}

void sub_1BF038624(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BF038608);
}

BOOL tlv::parseV<nas::tlv::AcbInfoSkipVoice>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

void sub_1BF038674(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BF038668);
}

BOOL tlv::parseV<nas::tlv::AcbInfoSkipSms>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

void sub_1BF0386C8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BF0386BCLL);
}

uint64_t tlv::parseV<nas::tlv::SubInfoVSID>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

void sub_1BF038714(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BF038708);
}

uint64_t tlv::parseV<nas::tlv::CallType>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)8);
  result = *(_QWORD *)v3;
  *a1 = (tlv *)((char *)v3 + 8);
  return result;
}

void sub_1BF038760(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BF038754);
}

uint64_t tlv::parseV<nas::tlv::SystemMode>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

void sub_1BF0387AC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BF0387A0);
}

uint64_t tlv::parseV<nas::tlv::VoiceSystemId>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

void sub_1BF0387F8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BF0387ECLL);
}

uint64_t tlv::parseV<nas::tlv::Response>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

void sub_1BF038844(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BF038838);
}

uint64_t tlv::parseV<nas::tlv::BarringTime>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

void sub_1BF038890(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BF038884);
}

BOOL tlv::parseV<nas::tlv::NwCongestion>(tlv **a1, int a2)
{
  tlv *v3;
  _BOOL8 result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3 != 0;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

void sub_1BF0388E4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BF0388D8);
}

uint64_t tlv::parseV<nas::tlv::TimerValueRemaining>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

void sub_1BF038930(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BF038924);
}

uint64_t tlv::parseV<nas::tlv::RemainingTimerValue>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

void sub_1BF03897C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BF038970);
}

uint64_t tlv::parseV<nas::tlv::Status>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

void sub_1BF0389C8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BF0389BCLL);
}

uint64_t SipRetryAfterHeader::SipRetryAfterHeader(uint64_t a1, int a2, const std::string *a3)
{
  uint64_t v6;

  v6 = SipHeader::SipHeader(a1, (const std::string *)"Retry-After");
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 64) = &off_1E78B82D8;
  *(_QWORD *)(v6 + 72) = v6 + 80;
  *(_WORD *)(v6 + 96) = 256;
  *(_QWORD *)v6 = off_1E78D3E80;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = 0;
  *(_DWORD *)(v6 + 104) = a2;
  std::string::operator=((std::string *)(v6 + 112), a3);
  return a1;
}

void sub_1BF038A60(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[135] < 0)
    operator delete(*v2);
  SipParameterHeader::~SipParameterHeader((SipParameterHeader *)v1);
  _Unwind_Resume(a1);
}

uint64_t SipRetryAfterHeader::encodeValue(SipRetryAfterHeader *this, ImsOutStream *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char v7;
  char v8;

  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  if (*((char *)this + 135) < 0)
  {
    if (!*((_QWORD *)this + 15))
      return 1;
    goto LABEL_3;
  }
  if (*((_BYTE *)this + 135))
  {
LABEL_3:
    v4 = (_QWORD *)*((_QWORD *)a2 + 1);
    v7 = 40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v7, 1);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, char *))(*(_QWORD *)a2 + 32))(a2, (char *)this + 112);
    v5 = (_QWORD *)*((_QWORD *)a2 + 1);
    v8 = 41;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v8, 1);
    *((_BYTE *)a2 + 17) = 0;
  }
  return 1;
}

uint64_t SipRetryAfterHeader::setValueFromString(uint64_t a1, std::string *this)
{
  std::string::size_type v4;
  std::string::size_type v5;
  std::string::size_type v6;
  void **v7;
  std::string *p_p;
  std::string *v9;
  std::string __p;
  char v12;

  v4 = std::string::find(this, 40, 0);
  if (v4 == -1 || (v5 = v4, v6 = std::string::find(this, 41, v4), v6 == -1))
  {
    if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = this;
    else
      v9 = (std::string *)this->__r_.__value_.__r.__words[0];
    *(_DWORD *)(a1 + 104) = strtoul((const char *)v9, 0, 10);
  }
  else
  {
    std::string::basic_string(&__p, this, v5 + 1, v6 - v5, (std::allocator<char> *)&v12);
    v7 = (void **)(a1 + 112);
    if (*(char *)(a1 + 135) < 0)
      operator delete(*v7);
    *(_OWORD *)v7 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 128) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    memset(&__p, 0, sizeof(__p));
    std::string::basic_string(&__p, this, 0, v5, (std::allocator<char> *)&v12);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)(a1 + 104) = strtoul((const char *)p_p, 0, 10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 1;
}

void SipRetryAfterHeader::~SipRetryAfterHeader(void **this)
{
  *this = off_1E78D3E80;
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  *this = off_1E78E5828;
  this[8] = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
}

{
  *this = off_1E78D3E80;
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  *this = off_1E78E5828;
  this[8] = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipRetryAfterHeader::clone(SipRetryAfterHeader *this)
{
  uint64_t v2;

  v2 = operator new();
  SipParameterHeader::SipParameterHeader((SipParameterHeader *)v2, this);
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)v2 = off_1E78D3E80;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_DWORD *)(v2 + 104) = *((_DWORD *)this + 26);
  std::string::operator=((std::string *)(v2 + 112), (const std::string *)((char *)this + 112));
  return v2;
}

void sub_1BF038D9C(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[135] < 0)
    operator delete(*v2);
  SipParameterHeader::~SipParameterHeader((SipParameterHeader *)v1);
  MEMORY[0x1C3B87100](v1, 0x10B3C4013ADD0EBLL);
  _Unwind_Resume(a1);
}

time_t ims::analytics::ActiveRatField::create@<X0>(ims::analytics::ActiveRatField *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v5;
  time_t result;

  v5 = operator new(0x48uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_1E78D3F20;
  v5[3] = &off_1E78D3F70;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  v5[8] = 0;
  *a2 = v5 + 3;
  a2[1] = v5;
  return result;
}

void sub_1BF038E60(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v1[2]);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<`anonymous namespace'::ActiveRatFieldImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D3F20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<`anonymous namespace'::ActiveRatFieldImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D3F20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<`anonymous namespace'::ActiveRatFieldImpl>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 24))(a1 + 24);
}

time_t `anonymous namespace'::ActiveRatFieldImpl::setLatestRat(time_t this, const ims::AccessNetwork *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;

  v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)a2 + 1);
  if (v2)
  {
    v3 = *((unsigned __int8 *)a2 + 47);
    if ((v3 & 0x80u) != 0)
      v3 = *((_QWORD *)a2 + 4);
    if (v3)
    {
      v4 = this;
      std::allocate_shared[abi:ne180100]<ims::AccessNetwork,std::allocator<ims::AccessNetwork>,ims::AccessNetwork const&,void>((__int128 *)a2, &v8);
      std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](v4 + 24, &v8);
      v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
      if (*((_QWORD *)&v8 + 1))
      {
        v6 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      this = time(0);
      *(_QWORD *)(v4 + 40) = this;
    }
  }
  return this;
}

void `anonymous namespace'::ActiveRatFieldImpl::trackAudioProgress(_anonymous_namespace_::ActiveRatFieldImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;

  if (*((_QWORD *)this + 3) && time(0) - *((_QWORD *)this + 5) >= 3)
  {
    v3 = *((_QWORD *)this + 3);
    v2 = *((_QWORD *)this + 4);
    if (v2)
    {
      v4 = (unint64_t *)(v2 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 1) = v3;
    *((_QWORD *)this + 2) = v2;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "ActiveRat");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v12 = ImsLogger::debug(ims::_logger, (uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Audio is active over RAT: ", 26);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, *((_QWORD *)this + 1));
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    if (v14 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15[0]);
  }
}

void sub_1BF039114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::ActiveRatFieldImpl::getActiveRat@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 16);
  *a2 = *(_QWORD *)(this + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void `anonymous namespace'::ActiveRatFieldImpl::~ActiveRatFieldImpl(_anonymous_namespace_::ActiveRatFieldImpl *this)
{
  char *v1;

  *(_QWORD *)this = &off_1E78D3F70;
  v1 = (char *)this + 8;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &off_1E78D3F70;
  v1 = (char *)this + 8;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x1C3B87100);
}

std::string *std::allocate_shared[abi:ne180100]<ims::AccessNetwork,std::allocator<ims::AccessNetwork>,ims::AccessNetwork const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  std::string *v4;
  std::string *result;

  v4 = (std::string *)operator new(0x60uLL);
  result = std::__shared_ptr_emplace<ims::AccessNetwork>::__shared_ptr_emplace[abi:ne180100]<ims::AccessNetwork const&,std::allocator<ims::AccessNetwork>,0>(v4, a1);
  *a2 = v4 + 1;
  a2[1] = v4;
  return result;
}

void sub_1BF039240(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<ims::AccessNetwork>::__shared_ptr_emplace[abi:ne180100]<ims::AccessNetwork const&,std::allocator<ims::AccessNetwork>,0>(std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78D3FD0;
  std::construct_at[abi:ne180100]<ims::AccessNetwork,ims::AccessNetwork const&,ims::AccessNetwork*>(a1 + 1, a2);
  return a1;
}

void sub_1BF039288(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ims::AccessNetwork>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D3FD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ims::AccessNetwork>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D3FD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

void std::__shared_ptr_emplace<ims::AccessNetwork>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

std::string *std::construct_at[abi:ne180100]<ims::AccessNetwork,ims::AccessNetwork const&,ims::AccessNetwork*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = a2[3];
  this[2].__r_.__value_.__s.__data_[16] = *((_BYTE *)a2 + 64);
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  return this;
}

void sub_1BF0393AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void SDPLazuliBuilder::~SDPLazuliBuilder(SDPLazuliBuilder *this)
{
  *(_QWORD *)this = &off_1E78D4020;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E78D4020;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1C3B87100);
}

void SDPLazuliBuilder::createSDP(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  SDPMediaLazuliSettings *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[368];
  _QWORD v12[2];

  *a3 = 0;
  a3[1] = 0;
  std::allocate_shared[abi:ne180100]<SDPModel,std::allocator<SDPModel>,std::shared_ptr<SDPModel> &,void>((uint64_t *)(a1 + 8), a3);
  v5 = (std::__shared_weak_count *)a3[1];
  v12[0] = *a3;
  v12[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = std::__optional_copy_base<SDPMediaLazuliSettings,false>::__optional_copy_base[abi:ne180100]((SDPMediaLazuliSettings *)v11, a2);
  SDPLazuliBuilder::adjustModel((uint64_t)v8, (uint64_t)v12, (uint64_t)v11);
  if (v11[360])
    SDPMediaLazuliSettings::~SDPMediaLazuliSettings((SDPMediaLazuliSettings *)v11);
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BF0394F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;
  uint64_t v56;

  if (a55)
    SDPMediaLazuliSettings::~SDPMediaLazuliSettings((SDPMediaLazuliSettings *)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v56 - 56);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v55);
  _Unwind_Resume(a1);
}

void SDPLazuliBuilder::adjustModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  std::string v6;
  std::string *v7;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 416);
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 424);
  if (v4 != v3)
  {
    while (*(_DWORD *)(v4 + 12) != 6)
    {
      v4 += 200;
      if (v4 == v3)
        return;
    }
    if (*(_BYTE *)(a3 + 360))
    {
      memset(&v6, 0, sizeof(v6));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v6, *(__int128 **)(a3 + 280), *(__int128 **)(a3 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 288) - *(_QWORD *)(a3 + 280)) >> 3));
      SDPMedia::setAcceptTypes((_QWORD *)v4, (__int128 **)&v6);
      v7 = &v6;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
      memset(&v6, 0, sizeof(v6));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v6, *(__int128 **)(a3 + 304), *(__int128 **)(a3 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 312) - *(_QWORD *)(a3 + 304)) >> 3));
      SDPMedia::setAcceptWrappedTypes((_QWORD *)v4, (__int128 **)&v6);
      v7 = &v6;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
    }
  }
}

void sub_1BF039608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

SDPMediaLazuliSettings *std::__optional_copy_base<SDPMediaLazuliSettings,false>::__optional_copy_base[abi:ne180100](SDPMediaLazuliSettings *this, uint64_t a2)
{
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 360) = 0;
  if (*(_BYTE *)(a2 + 360))
  {
    SDPMediaLazuliSettings::SDPMediaLazuliSettings(this, (__int128 **)a2);
    *((_BYTE *)this + 360) = 1;
  }
  return this;
}

void sub_1BF03966C(_Unwind_Exception *exception_object)
{
  SDPMediaLazuliSettings *v1;

  if (*((_BYTE *)v1 + 360))
    SDPMediaLazuliSettings::~SDPMediaLazuliSettings(v1);
  _Unwind_Resume(exception_object);
}

std::string *ims::toString<ms::MediaServiceDirection>@<X0>(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  unsigned int v2;
  char *v3;
  std::string *result;

  v2 = *a1;
  switch(v2)
  {
    case 0u:
      v3 = "QMI::Inactive";
      goto LABEL_7;
    case 1u:
      v3 = "QMI::SendOnly";
      goto LABEL_7;
    case 2u:
      v3 = "QMI::ReceiveOnly";
      goto LABEL_7;
    case 3u:
      v3 = "QMI::SendReceive";
LABEL_7:
      result = (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, v3);
      break;
    default:
      result = std::to_string(a2, v2);
      break;
  }
  return result;
}

uint64_t QMIRTPCommandDriver::QMIRTPCommandDriver(uint64_t a1, dispatch_object_t *a2, uint64_t a3)
{
  os_log_s *v6;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E78D4050;
  *(_BYTE *)(a1 + 24) = 0;
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = (os_log_s *)ImsLogger::osLog((ImsLogger *)ims::_logger);
  qmi::ClientRouter::ClientRouter((qmi::ClientRouter *)(a1 + 32), v6);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = a1 + 80;
  *(_QWORD *)(a1 + 88) = a1 + 80;
  *(_QWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = *a2;
  if (*a2)
    dispatch_retain(*a2);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = a3;
  return a1;
}

void sub_1BF03978C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void QMIRTPCommandDriver::~QMIRTPCommandDriver(QMIRTPCommandDriver *this)
{
  char *v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)this = &off_1E78D4050;
  v2 = (char *)this + 32;
  qmi::ClientRouter::reset((QMIRTPCommandDriver *)((char *)this + 32));
  qmi::Client::release((QMIRTPCommandDriver *)((char *)this + 48));
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = *((_QWORD *)this + 14);
  if (v4)
    dispatch_release(v4);
  std::__list_imp<unsigned long long>::clear((_QWORD *)this + 10);
  qmi::Client::~Client((QMIRTPCommandDriver *)((char *)this + 48));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

{
  QMIRTPCommandDriver::~QMIRTPCommandDriver(this);
  JUMPOUT(0x1C3B87100);
}

void QMIRTPCommandDriver::initializeDriverForInstance(QMIRTPCommandDriver *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  void *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;

  std::string::basic_string[abi:ne180100]<0>(v21, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"initializeDriverForInstance", 27);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [instance=", 11);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v20 < 0)
    operator delete(__p[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  v8 = *((_QWORD *)this + 15);
  if (v8)
  {
    v10 = (void *)*((_QWORD *)this + 1);
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    v21[0] = v10;
    if (!v9 || (v11 = std::__shared_weak_count::lock(v9), (v21[1] = v11) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v12 = v11;
    v17 = v10;
    v18 = v11;
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v8 + 16))(v8, a2, &v17);
    if (v18)
      std::__shared_weak_count::__release_weak(v18);
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1BF039A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t QMIRTPCommandDriver::getInstanceType(_QWORD *a1, void **a2)
{
  uint64_t v4;
  size_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;

  std::string::basic_string[abi:ne180100]<0>(v18, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v18, (uint64_t)__p);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"getInstanceType", 15);
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" [stackId=", 10);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 32))(v4, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  v6 = (std::__shared_weak_count *)a1[17];
  if (!v6)
  {
    v7 = 0;
LABEL_11:
    std::string::basic_string[abi:ne180100]<0>(v18, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = (_BYTE *)ImsLogger::error(ims::_logger, (uint64_t)v18, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)v11 + 1), (uint64_t)"No controller associated with this command driver!", 50);
    v11[17] = 0;
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_12;
  }
  v7 = std::__shared_weak_count::lock(v6);
  if (!v7)
    goto LABEL_11;
  v8 = a1[16];
  if (!v8)
    goto LABEL_11;
  QMIRTPStackController::getProfileByStackId(v8, a2);
  v10 = v9;
  if ((v9 & 0xFF00000000) != 0)
    goto LABEL_17;
  std::string::basic_string[abi:ne180100]<0>(v18, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v11 = (_BYTE *)ImsLogger::error(ims::_logger, (uint64_t)v18, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)v11 + 1), (uint64_t)"No profile for stack ", 21);
  v11[17] = 0;
  (*(void (**)(_BYTE *, void **))(*(_QWORD *)v11 + 32))(v11, a2);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_12:
  v11[17] = 0;
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  v10 = -1;
LABEL_17:
  std::string::basic_string[abi:ne180100]<0>(v18, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v12 = ImsLogger::debug(ims::_logger, (uint64_t)v18, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Using instance ", 15);
  *(_BYTE *)(v12 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)" for stack ", 11);
  *(_BYTE *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 32))(v12, a2);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v12 + 17) = 0;
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v10)
    return 2 * (v10 == 1);
  else
    return 1;
}

void sub_1BF039E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMIRTPCommandDriver::voiceSystemIdRetrieved(std::__shared_weak_count *this, unsigned int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  std::__shared_weak_count *shared_weak_owners;
  std::__shared_weak_count *v10;
  uint64_t **shared_owners;
  NSObject *v12;
  char v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  uint64_t (**v17)();
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t (***v38)();
  uint64_t v39;
  uint64_t (***v40)();
  uint64_t v41;
  IPTelephonyManager **v42;
  uint64_t v43;
  __int128 *v44;
  uint64_t v45;
  __int128 *v46;
  uint64_t v47;
  __int128 *v48;
  uint64_t v49;
  __int128 *v50;
  uint64_t v51;
  __int128 *v52;
  uint64_t v53;
  __int128 *v54;
  uint64_t v55;
  __int128 *v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  dispatch_object_t v91;
  IPTelephonyManager *v92;
  std::__shared_weak_count *v93;
  __int128 v94;
  std::string v95;
  uint64_t **v96;
  std::__shared_weak_count *v97;
  unsigned int v98;
  dispatch_object_t object;
  IPTelephonyManager *v100[2];
  IPTelephonyManager **v101;
  uint64_t (**v102)();
  std::__shared_weak_count *v103;
  char v104;
  void **v105;
  uint64_t (**v106)();
  std::__shared_weak_count *v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v98 = a2;
  std::string::basic_string[abi:ne180100]<0>(&v109, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&v106, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)&v109, (uint64_t)&v106);
  if (!this)
    __cxa_bad_typeid();
  v6 = v5;
  v7 = *(_QWORD **)(v5 + 8);
  v8 = strlen((const char *)(*((_QWORD *)this->__vftable[-1].__on_zero_shared_weak + 1) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, *((_QWORD *)this->__vftable[-1].__on_zero_shared_weak + 1) & 0x7FFFFFFFFFFFFFFFLL, v8);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"voiceSystemIdRetrieved", 22);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" [instance=", 11);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)", voiceSystemId=", 16);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SBYTE7(v108) < 0)
    operator delete(v106);
  if (SBYTE7(v110) < 0)
    operator delete((void *)v109);
  v96 = 0;
  v97 = 0;
  shared_weak_owners = (std::__shared_weak_count *)this[5].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    v10 = std::__shared_weak_count::lock(shared_weak_owners);
    v97 = v10;
    if (v10)
    {
      shared_owners = (uint64_t **)this[5].__shared_owners_;
      v96 = shared_owners;
      if (shared_owners)
      {
        QMIRTPStackController::setVoiceSystemIdForInstance(shared_owners, v98, a3);
        v12 = sImsDispatchQueue;
        if (sImsDispatchQueue
          || (v12 = dispatch_queue_create("com.apple.ipTelephony.queue", 0), (sImsDispatchQueue = (uint64_t)v12) != 0))
        {
          dispatch_retain(v12);
          v13 = 0;
        }
        else
        {
          v13 = 1;
        }
        memset(&v95, 0, sizeof(v95));
        std::string::basic_string[abi:ne180100]<0>(&v95, "ims::RTP.");
        ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()(&v109);
        if ((SBYTE7(v110) & 0x80u) == 0)
          v14 = (const std::string::value_type *)&v109;
        else
          v14 = (const std::string::value_type *)v109;
        if ((SBYTE7(v110) & 0x80u) == 0)
          v15 = BYTE7(v110);
        else
          v15 = *((_QWORD *)&v109 + 1);
        std::string::append(&v95, v14, v15);
        if (SBYTE7(v110) < 0)
          operator delete((void *)v109);
        v17 = (uint64_t (**)())this->__shared_owners_;
        v16 = (std::__shared_weak_count *)this->__shared_weak_owners_;
        if (v16)
        {
          p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
          do
            v19 = __ldxr(p_shared_weak_owners);
          while (__stxr(v19 + 1, p_shared_weak_owners));
        }
        IPTelephonyManager::getInstance((uint64_t *)&v92);
        IPTelephonyManager::getBBServerConnection(v92, &v94);
        object = v12;
        if ((v13 & 1) == 0)
          dispatch_retain(v12);
        v109 = 0u;
        v110 = 0u;
        std::string::basic_string[abi:ne180100]<0>(&v106, "ims");
        v102 = 0;
        v103 = 0;
        if (v16)
        {
          v20 = std::__shared_weak_count::lock(v16);
          if (!v20)
          {
            v102 = 0;
            v103 = 0;
            goto LABEL_44;
          }
          v21 = v20;
          v22 = (unint64_t *)&v20->__shared_weak_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v102 = v17;
          v103 = v20;
          std::__shared_weak_count::__release_weak(v16);
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            v16 = v21;
LABEL_44:
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        *(_OWORD *)v100 = v94;
        v94 = 0uLL;
        qmi::Client::createWithQueueLocal();
        v29 = (std::__shared_weak_count *)v100[1];
        if (v100[1])
        {
          v30 = (unint64_t *)((char *)v100[1] + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        if (v103)
          std::__shared_weak_count::__release_weak(v103);
        if (SBYTE7(v108) < 0)
          operator delete(v106);
        if (object)
          dispatch_release(object);
        v106 = 0;
        v107 = 0;
        v108 = v110;
        v110 = 0uLL;
        qmi::ClientRouter::addClient();
        qmi::Client::~Client((qmi::Client *)&v106);
        qmi::ClientRouter::get();
        qmi::Client::~Client((qmi::Client *)&v109);
        v32 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
        if (*((_QWORD *)&v94 + 1))
        {
          v33 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v35 = v93;
        if (v93)
        {
          v36 = (unint64_t *)&v93->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v106 = &off_1E78D4B10;
        v107 = this;
        *((_QWORD *)&v108 + 1) = &v106;
        qmi::ClientRouter::setHandler();
        v38 = (uint64_t (***)())*((_QWORD *)&v108 + 1);
        if (*((uint64_t (****)())&v108 + 1) == &v106)
        {
          v39 = 4;
          v38 = &v106;
        }
        else
        {
          if (!*((_QWORD *)&v108 + 1))
            goto LABEL_71;
          v39 = 5;
        }
        (*v38)[v39]();
LABEL_71:
        v102 = &off_1E78D4BA0;
        v103 = this;
        v105 = (void **)&v102;
        qmi::ClientRouter::setHandler();
        v40 = (uint64_t (***)())v105;
        if (v105 == (void **)&v102)
        {
          v41 = 4;
          v40 = &v102;
        }
        else
        {
          if (!v105)
            goto LABEL_76;
          v41 = 5;
        }
        (*v40)[v41]();
LABEL_76:
        v100[0] = (IPTelephonyManager *)&off_1E78D4C20;
        v100[1] = (IPTelephonyManager *)this;
        v101 = v100;
        qmi::ClientRouter::setHandler();
        v42 = v101;
        if (v101 == v100)
        {
          v43 = 4;
          v42 = v100;
        }
        else
        {
          if (!v101)
            goto LABEL_81;
          v43 = 5;
        }
        (*((void (**)(void))*v42 + v43))();
LABEL_81:
        *(_QWORD *)&v109 = &off_1E78D4CA0;
        *((_QWORD *)&v109 + 1) = this;
        *((_QWORD *)&v110 + 1) = &v109;
        qmi::ClientRouter::setIndHandlerInternal();
        v44 = (__int128 *)*((_QWORD *)&v110 + 1);
        if (*((__int128 **)&v110 + 1) == &v109)
        {
          v45 = 4;
          v44 = &v109;
        }
        else
        {
          if (!*((_QWORD *)&v110 + 1))
            goto LABEL_86;
          v45 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v44 + 8 * v45))();
LABEL_86:
        *(_QWORD *)&v109 = &off_1E78D4D30;
        *((_QWORD *)&v109 + 1) = this;
        *((_QWORD *)&v110 + 1) = &v109;
        qmi::ClientRouter::setIndHandlerInternal();
        v46 = (__int128 *)*((_QWORD *)&v110 + 1);
        if (*((__int128 **)&v110 + 1) == &v109)
        {
          v47 = 4;
          v46 = &v109;
        }
        else
        {
          if (!*((_QWORD *)&v110 + 1))
            goto LABEL_91;
          v47 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
LABEL_91:
        *(_QWORD *)&v109 = &off_1E78D4DB0;
        *((_QWORD *)&v109 + 1) = this;
        *((_QWORD *)&v110 + 1) = &v109;
        qmi::ClientRouter::setIndHandlerInternal();
        v48 = (__int128 *)*((_QWORD *)&v110 + 1);
        if (*((__int128 **)&v110 + 1) == &v109)
        {
          v49 = 4;
          v48 = &v109;
        }
        else
        {
          if (!*((_QWORD *)&v110 + 1))
            goto LABEL_96;
          v49 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v48 + 8 * v49))();
LABEL_96:
        *(_QWORD *)&v109 = &off_1E78D4E30;
        *((_QWORD *)&v109 + 1) = this;
        *((_QWORD *)&v110 + 1) = &v109;
        qmi::ClientRouter::setIndHandlerInternal();
        v50 = (__int128 *)*((_QWORD *)&v110 + 1);
        if (*((__int128 **)&v110 + 1) == &v109)
        {
          v51 = 4;
          v50 = &v109;
        }
        else
        {
          if (!*((_QWORD *)&v110 + 1))
            goto LABEL_101;
          v51 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
LABEL_101:
        *(_QWORD *)&v109 = &off_1E78D4EB0;
        *((_QWORD *)&v109 + 1) = this;
        *((_QWORD *)&v110 + 1) = &v109;
        qmi::ClientRouter::setIndHandlerInternal();
        v52 = (__int128 *)*((_QWORD *)&v110 + 1);
        if (*((__int128 **)&v110 + 1) == &v109)
        {
          v53 = 4;
          v52 = &v109;
        }
        else
        {
          if (!*((_QWORD *)&v110 + 1))
            goto LABEL_106;
          v53 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v52 + 8 * v53))();
LABEL_106:
        *(_QWORD *)&v109 = &off_1E78D4F30;
        *((_QWORD *)&v109 + 1) = this;
        *((_QWORD *)&v110 + 1) = &v109;
        qmi::ClientRouter::setIndHandlerInternal();
        v54 = (__int128 *)*((_QWORD *)&v110 + 1);
        if (*((__int128 **)&v110 + 1) == &v109)
        {
          v55 = 4;
          v54 = &v109;
        }
        else
        {
          if (!*((_QWORD *)&v110 + 1))
            goto LABEL_111;
          v55 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v54 + 8 * v55))();
LABEL_111:
        *(_QWORD *)&v109 = &off_1E78D4FB0;
        *((_QWORD *)&v109 + 1) = this;
        *((_QWORD *)&v110 + 1) = &v109;
        qmi::ClientRouter::setIndHandlerInternal();
        v56 = (__int128 *)*((_QWORD *)&v110 + 1);
        if (*((__int128 **)&v110 + 1) == &v109)
        {
          v57 = 4;
          v56 = &v109;
        }
        else
        {
          if (!*((_QWORD *)&v110 + 1))
            goto LABEL_116;
          v57 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v56 + 8 * v57))();
LABEL_116:
        *(_QWORD *)&v109 = &off_1E78D5030;
        *((_QWORD *)&v109 + 1) = this;
        *((_QWORD *)&v110 + 1) = &v109;
        qmi::ClientRouter::setIndHandlerInternal();
        v58 = (__int128 *)*((_QWORD *)&v110 + 1);
        if (*((__int128 **)&v110 + 1) == &v109)
        {
          v59 = 4;
          v58 = &v109;
        }
        else
        {
          if (!*((_QWORD *)&v110 + 1))
            goto LABEL_121;
          v59 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v58 + 8 * v59))();
LABEL_121:
        *(_QWORD *)&v109 = &off_1E78D50B0;
        *((_QWORD *)&v109 + 1) = this;
        *((_QWORD *)&v110 + 1) = &v109;
        qmi::ClientRouter::setIndHandlerInternal();
        v60 = (__int128 *)*((_QWORD *)&v110 + 1);
        if (*((__int128 **)&v110 + 1) == &v109)
        {
          v61 = 4;
          v60 = &v109;
        }
        else
        {
          if (!*((_QWORD *)&v110 + 1))
            goto LABEL_126;
          v61 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v60 + 8 * v61))();
LABEL_126:
        qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)&this[1].__shared_owners_);
        qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)&this[1].__shared_owners_);
        qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)&this[1].__shared_owners_);
        qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)&this[1].__shared_owners_);
        qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)&this[1].__shared_owners_);
        qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)&this[1].__shared_owners_);
        qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)&this[1].__shared_owners_);
        qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)&this[1].__shared_owners_);
        qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)&this[1].__shared_owners_);
        qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)&this[1].__shared_owners_);
        qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)&this[1].__shared_owners_);
        qmi::ClientRouter::start();
        if (!LOBYTE(this[1].__vftable))
        {
          std::string::basic_string[abi:ne180100]<0>(&v106, "ims::QMIRTPCommandDriver::Audio");
          v91 = v12;
          if ((v13 & 1) == 0)
            dispatch_retain(v12);
          std::string::basic_string[abi:ne180100]<0>(&v102, "ims");
          v62 = (std::__shared_weak_count *)this->__shared_weak_owners_;
          if (v62)
          {
            v63 = this->__shared_owners_;
            v64 = (unint64_t *)&v62->__shared_weak_owners_;
            do
              v65 = __ldxr(v64);
            while (__stxr(v65 + 1, v64));
            v89 = 0;
            v90 = 0;
            v66 = std::__shared_weak_count::lock(v62);
            v67 = v66;
            if (v66)
            {
              v68 = (unint64_t *)&v66->__shared_weak_owners_;
              do
                v69 = __ldxr(v68);
              while (__stxr(v69 + 1, v68));
            }
            else
            {
              v63 = 0;
            }
            v89 = v63;
            v90 = v66;
            std::__shared_weak_count::__release_weak(v62);
            if (v67)
            {
              v70 = (unint64_t *)&v67->__shared_owners_;
              do
                v71 = __ldaxr(v70);
              while (__stlxr(v71 - 1, v70));
              if (!v71)
              {
                ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                std::__shared_weak_count::__release_weak(v67);
              }
            }
          }
          else
          {
            v89 = 0;
            v90 = 0;
          }
          IPTelephonyManager::getInstance((uint64_t *)v100);
          IPTelephonyManager::getBBServerConnection(v100[0], &v87);
          qmi::Client::createWithQueueLocal();
          std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)&this[2].__shared_weak_owners_, &v110);
          qmi::Client::~Client((qmi::Client *)&v109);
          v72 = v88;
          if (v88)
          {
            v73 = (unint64_t *)&v88->__shared_owners_;
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          v75 = (std::__shared_weak_count *)v100[1];
          if (v100[1])
          {
            v76 = (unint64_t *)((char *)v100[1] + 8);
            do
              v77 = __ldaxr(v76);
            while (__stlxr(v77 - 1, v76));
            if (!v77)
            {
              ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
              std::__shared_weak_count::__release_weak(v75);
            }
          }
          if (v90)
            std::__shared_weak_count::__release_weak(v90);
          if (v104 < 0)
            operator delete(v102);
          if (v91)
            dispatch_release(v91);
          if (SBYTE7(v108) < 0)
            operator delete(v106);
          if (this[2].__shared_weak_owners_)
          {
            std::string::basic_string[abi:ne180100]<0>(&v109, "rtp.qmidriver");
            std::string::basic_string[abi:ne180100]<0>(&v106, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v78 = ImsLogger::debug(ims::_logger, (uint64_t)&v109, (uint64_t)&v106);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v78 + 8), (uint64_t)"QMI AUDIO client successfully created", 37);
            *(_BYTE *)(v78 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v78 + 64))(v78, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v78 + 17) = 0;
            if (SBYTE7(v108) < 0)
              operator delete(v106);
            if (SBYTE7(v110) < 0)
              operator delete((void *)v109);
            qmi::Client::setHandler();
            qmi::Client::start((qmi::Client *)&this[2]);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&v109, "rtp.qmidriver");
            std::string::basic_string[abi:ne180100]<0>(&v106, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v79 = ImsLogger::error(ims::_logger, (uint64_t)&v109, (uint64_t)&v106);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v79 + 8), (uint64_t)"QMI Audio client creation failed", 32);
            *(_BYTE *)(v79 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v79 + 64))(v79, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v79 + 17) = 0;
            if (SBYTE7(v108) < 0)
              operator delete(v106);
            if (SBYTE7(v110) < 0)
              operator delete((void *)v109);
            v80 = v96[6];
            v81 = (std::__shared_weak_count *)v96[7];
            *(_QWORD *)&v109 = v80;
            *((_QWORD *)&v109 + 1) = v81;
            if (v81)
            {
              v82 = (unint64_t *)&v81->__shared_owners_;
              do
                v83 = __ldxr(v82);
              while (__stxr(v83 + 1, v82));
            }
            v84 = v80[37];
            if (v84)
              AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v84 + 120), 2);
            if (v81)
            {
              v85 = (unint64_t *)&v81->__shared_owners_;
              do
                v86 = __ldaxr(v85);
              while (__stlxr(v86 - 1, v85));
              if (!v86)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
          }
        }
        LOBYTE(this[1].__vftable) = 1;
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v95.__r_.__value_.__l.__data_);
        if ((v13 & 1) == 0)
          dispatch_release(v12);
        v10 = v97;
        if (!v97)
          return;
LABEL_39:
        v27 = (unint64_t *)&v10->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        return;
      }
    }
  }
  else
  {
    v10 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v109, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&v106, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v26 = ImsLogger::error(ims::_logger, (uint64_t)&v109, (uint64_t)&v106);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"No controller associated with this command driver!", 50);
  *(_BYTE *)(v26 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v26 + 17) = 0;
  if (SBYTE7(v108) < 0)
    operator delete(v106);
  if (SBYTE7(v110) < 0)
    operator delete((void *)v109);
  if (v10)
    goto LABEL_39;
}

void sub_1BF03AD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, dispatch_object_t object, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,dispatch_object_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  NSObject *v37;
  char v38;
  uint64_t v39;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v39 - 128);
  if (a29 < 0)
    operator delete(__p);
  if ((v38 & 1) == 0)
    dispatch_release(v37);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void ___ZN19QMIRTPCommandDriver22voiceSystemIdRetrievedEjj_block_invoke(uint64_t a1)
{
  uint64_t v1;
  const void **v2;
  char *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void *v18;
  _QWORD v19[6];
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  void *__p[2];
  __int128 v25;
  _QWORD aBlock[5];

  v1 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)__p = 0u;
  v25 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v2 = (const void **)__p[1];
  if (__p[1] != (void *)v25)
  {
    while (*((_BYTE *)*v2 + 8) != 1)
    {
      if (++v2 == (const void **)v25)
        goto LABEL_8;
    }
  }
  if (v2 == (const void **)v25)
  {
LABEL_8:
    v5 = operator new();
    v6 = v5;
    *(_BYTE *)(v5 + 8) = 1;
    *(_QWORD *)v5 = &off_1E78D4AB0;
    *(_DWORD *)(v5 + 12) = 0;
    v4 = (_DWORD *)(v5 + 12);
    v7 = v25;
    if ((unint64_t)v25 >= *((_QWORD *)&v25 + 1))
    {
      v9 = (uint64_t)(v25 - (unint64_t)__p[1]) >> 3;
      if ((unint64_t)(v9 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v10 = (uint64_t)(*((_QWORD *)&v25 + 1) - (unint64_t)__p[1]) >> 2;
      if (v10 <= v9 + 1)
        v10 = v9 + 1;
      if (*((_QWORD *)&v25 + 1) - (unint64_t)__p[1] >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11)
        v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v25 + 8, v11);
      else
        v12 = 0;
      v13 = (uint64_t *)&v12[8 * v9];
      v14 = &v12[8 * v11];
      *v13 = v6;
      v8 = v13 + 1;
      v16 = (char *)__p[1];
      v15 = (char *)v25;
      if ((void *)v25 != __p[1])
      {
        do
        {
          v17 = *((_QWORD *)v15 - 1);
          v15 -= 8;
          *--v13 = v17;
        }
        while (v15 != v16);
        v15 = (char *)__p[1];
      }
      __p[1] = v13;
      *(_QWORD *)&v25 = v8;
      *((_QWORD *)&v25 + 1) = v14;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v25 = v5;
      v8 = (_QWORD *)(v7 + 8);
    }
    *(_QWORD *)&v25 = v8;
  }
  else
  {
    if (!v3)
      __cxa_bad_cast();
    v4 = v3 + 12;
  }
  *v4 = 1;
  v19[5] = v1 + 48;
  v20 = QMIServiceMsg::create();
  v21 = 25000;
  v22 = 0;
  v23 = 0;
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 0x40000000;
  v19[2] = ___ZN19QMIRTPCommandDriver20onAudioClientStartedEv_block_invoke_2;
  v19[3] = &__block_descriptor_tmp_28_1;
  v19[4] = v1;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN5audio12DownlinkDtmf8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E78D4AE0;
  aBlock[4] = v19;
  v18 = _Block_copy(aBlock);
  v23 = v18;
  if (v20)
  {
    qmi::Client::send();
    v18 = v23;
  }
  if (v18)
    _Block_release(v18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_1BF03B228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19)
{
  if (a15)
    qmi::Client::send();
  if (aBlock)
    _Block_release(aBlock);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

void QMIRTPCommandDriver::voiceSystemIdUpdated(QMIRTPCommandDriver *this, unsigned int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t **v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;

  std::string::basic_string[abi:ne180100]<0>(v18, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v18, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v7 = v6;
  v8 = *(_QWORD **)(v6 + 8);
  v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"voiceSystemIdUpdated", 20);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [instance=", 11);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)", voiceSystemId=", 16);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (v10)
  {
    v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      v12 = (uint64_t **)*((_QWORD *)this + 16);
      if (v12)
      {
        QMIRTPStackController::setVoiceSystemIdForInstance(v12, a2, a3);
LABEL_16:
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        return;
      }
    }
  }
  else
  {
    v11 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v13 = ImsLogger::error(ims::_logger, (uint64_t)v18, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"No controller associated with this command driver!", 50);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  if (v11)
    goto LABEL_16;
}

void sub_1BF03B51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN19QMIRTPCommandDriver20onAudioClientStartedEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  char v7;
  void *v8[2];
  void (*v9)(uint64_t, qmi::MessageBase *);
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void (*v14)(uint64_t, QMIServiceMsg *);
  void *v15;
  void **v16;

  if (*(_DWORD *)(a2 + 4))
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v2 = (char *)qmi::asString();
    std::string::basic_string[abi:ne180100]<0>(&v12, v2);
    std::string::basic_string[abi:ne180100]<0>(v8, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::error(ims::_logger, (uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Failed to register downlink dtmf callback. Error ", 49);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 32))(v3, &v12);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    if (v7 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v9) < 0)
      operator delete(v8[0]);
    if (SHIBYTE(v14) < 0)
      operator delete(v12);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    std::string::basic_string[abi:ne180100]<0>(&v12, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(v8, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::debug(ims::_logger, (uint64_t)&v12, (uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Succesfully registered downlink dtmf callback", 45);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (SHIBYTE(v9) < 0)
      operator delete(v8[0]);
    if (SHIBYTE(v14) < 0)
      operator delete(v12);
    v8[0] = (void *)MEMORY[0x1E0C809B0];
    v8[1] = (void *)0x40000000;
    v9 = ___ZN19QMIRTPCommandDriver25setDownlinkDtmfIndicationEv_block_invoke;
    v10 = &__block_descriptor_tmp_244;
    v11 = v4;
    v12 = (void *)MEMORY[0x1E0C809B0];
    v13 = 0x40000000;
    v14 = ___ZNK3qmi6Client13setIndHandlerIRKN5audio12DownlinkDtmf10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
    v15 = &unk_1E78D63B0;
    v16 = v8;
    qmi::Client::setIndHandler();
  }
}

void sub_1BF03B7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 33) < 0)
    operator delete(*(void **)(v21 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN19QMIRTPCommandDriver20serviceInitializeReqEjj_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver20serviceInitializeReqEjj_block_invoke_2(uint64_t a1, _BYTE *a2)
{
  uint64_t result;

  result = QMIRTPStackController::isAssertEnabled(*(QMIRTPStackController **)(a1 + 32));
  *a2 = result;
  return result;
}

uint64_t __copy_helper_block_e8_32c49_ZTSNSt3__110shared_ptrI21QMIRTPStackControllerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c49_ZTSNSt3__110shared_ptrI21QMIRTPStackControllerEE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void QMIRTPCommandDriver::sessionInitializeReq(_QWORD *a1, _QWORD *a2, char a3, uint64_t a4, int a5, _QWORD *a6)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  size_t v18;
  const void **v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  _QWORD *v23;
  size_t v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  const void **v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  const void **v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  _BYTE *v80;
  _BYTE *v81;
  void *v82;
  const void **v83;
  _WORD *v84;
  uint64_t v85;
  uint64_t v86;
  _WORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t *v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  const void **v99;
  unsigned __int16 *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int16 *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t *v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  const void **v118;
  char *v119;
  _DWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  uint64_t *v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  const void **v134;
  char *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  uint64_t *v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  _QWORD *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  _QWORD v176[2];
  uint64_t (*v177)(uint64_t, _DWORD *);
  void *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  _QWORD v181[2];
  void (*v182)(uint64_t, unsigned __int16 *);
  void *v183;
  _BYTE *v184;
  _QWORD v185[2];
  uint64_t (*v186)(uint64_t, _WORD *);
  void *v187;
  _BYTE *v188;
  _QWORD v189[2];
  void (*v190)(uint64_t, uint64_t);
  void *v191;
  _BYTE *v192;
  std::__shared_weak_count *v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  _QWORD v196[2];
  void (*v197)(uint64_t, uint64_t);
  void *v198;
  uint64_t v199;
  _QWORD v200[2];
  uint64_t (*v201)(uint64_t, _DWORD *);
  void *v202;
  char v203;
  __int128 v204;
  __int128 v205;
  _BYTE *v206;
  std::__shared_weak_count *v207;
  timeval v208;
  void (*v209)(uint64_t, unsigned __int16 *);
  void *v210;
  char *v211;
  std::__shared_weak_count *v212;
  char *v213;
  std::__shared_weak_count *v214;
  void *aBlock[2];
  void (*v216)(uint64_t, QMIServiceMsg *);
  void *v217;
  timeval *v218;

  if (!*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v208, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(aBlock, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v20 = ImsLogger::error(ims::_logger, (uint64_t)&v208, (uint64_t)aBlock);
    if (!a1)
      __cxa_bad_typeid();
    v21 = v20;
    v22 = (const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v23 = *(_QWORD **)(v20 + 8);
    v24 = strlen(v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v22, v24);
    *(_BYTE *)(v21 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v21 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"sessionInitializeReq", 20);
    *(_BYTE *)(v21 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)" session is null", 16);
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v21 + 17) = 0;
    if (SHIBYTE(v216) < 0)
      operator delete(aBlock[0]);
    if (SHIBYTE(v209) < 0)
      operator delete((void *)v208.tv_sec);
    return;
  }
  v206 = 0;
  v207 = 0;
  v8 = (std::__shared_weak_count *)a6[1];
  if (!v8)
  {
    v13 = 0;
    goto LABEL_20;
  }
  v13 = std::__shared_weak_count::lock(v8);
  v207 = v13;
  if (!v13 || (v206 = (_BYTE *)*a6, (v14 = v206) == 0))
  {
LABEL_20:
    std::string::basic_string[abi:ne180100]<0>(&v208, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(aBlock, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v25 = ImsLogger::error(ims::_logger, (uint64_t)&v208, (uint64_t)aBlock);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"SDPSession expired in QMIRTPCommandDriver::sessionInitializeReq", 63);
    *(_BYTE *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v25 + 17) = 0;
    if (SHIBYTE(v216) < 0)
      operator delete(aBlock[0]);
    if (SHIBYTE(v209) < 0)
      operator delete((void *)v208.tv_sec);
    if (!v13)
      return;
LABEL_25:
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v208, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(aBlock, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v15 = ImsLogger::debug(ims::_logger, (uint64_t)&v208, (uint64_t)aBlock);
  if (!a1)
    __cxa_bad_typeid();
  v16 = v15;
  v17 = *(_QWORD **)(v15 + 8);
  v18 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v18);
  *(_BYTE *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"sessionInitializeReq", 20);
  *(_BYTE *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v16 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(*a2 + 24) + 176))(*a2 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" appId=", 7);
  *(_BYTE *)(v16 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v16 + 17) = 0;
  if (SHIBYTE(v216) < 0)
    operator delete(aBlock[0]);
  if (SHIBYTE(v209) < 0)
    operator delete((void *)v208.tv_sec);
  v204 = 0u;
  v205 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v204);
  v200[0] = MEMORY[0x1E0C809B0];
  v200[1] = 0x40000000;
  v201 = ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke;
  v202 = &__block_descriptor_tmp_57_2;
  v203 = a3;
  v19 = (const void **)*((_QWORD *)&v204 + 1);
  if (*((_QWORD *)&v204 + 1) != (_QWORD)v205)
  {
    while (*((_BYTE *)*v19 + 8) != 1)
    {
      if (++v19 == (const void **)v205)
        goto LABEL_32;
    }
  }
  if (v19 == (const void **)v205)
  {
LABEL_32:
    v29 = operator new();
    v30 = v29;
    *(_BYTE *)(v29 + 8) = 1;
    *(_QWORD *)v29 = &off_1E78D53D8;
    *(_DWORD *)(v29 + 12) = 0;
    v31 = (_DWORD *)(v29 + 12);
    v32 = v205;
    if ((unint64_t)v205 >= *((_QWORD *)&v205 + 1))
    {
      v34 = (uint64_t)(v205 - *((_QWORD *)&v204 + 1)) >> 3;
      if ((unint64_t)(v34 + 1) >> 61)
        goto LABEL_251;
      v35 = (uint64_t)(*((_QWORD *)&v205 + 1) - *((_QWORD *)&v204 + 1)) >> 2;
      if (v35 <= v34 + 1)
        v35 = v34 + 1;
      if (*((_QWORD *)&v205 + 1) - *((_QWORD *)&v204 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
        v36 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v36 = v35;
      if (v36)
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v205 + 8, v36);
      else
        v37 = 0;
      v38 = (uint64_t *)&v37[8 * v34];
      v39 = &v37[8 * v36];
      *v38 = v30;
      v33 = v38 + 1;
      v41 = (char *)*((_QWORD *)&v204 + 1);
      v40 = (char *)v205;
      if ((_QWORD)v205 != *((_QWORD *)&v204 + 1))
      {
        do
        {
          v42 = *((_QWORD *)v40 - 1);
          v40 -= 8;
          *--v38 = v42;
        }
        while (v40 != v41);
        v40 = (char *)*((_QWORD *)&v204 + 1);
      }
      *((_QWORD *)&v204 + 1) = v38;
      *(_QWORD *)&v205 = v33;
      *((_QWORD *)&v205 + 1) = v39;
      if (v40)
        operator delete(v40);
    }
    else
    {
      *(_QWORD *)v205 = v29;
      v33 = (_QWORD *)(v32 + 8);
    }
    *(_QWORD *)&v205 = v33;
    v201((uint64_t)v200, v31);
  }
  else
  {
    if (!v28)
      goto LABEL_249;
    ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke((uint64_t)v200, v28 + 3);
  }
  v196[0] = MEMORY[0x1E0C809B0];
  v196[1] = 0x40000000;
  v197 = ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_2;
  v198 = &__block_descriptor_tmp_59_2;
  v199 = a4;
  v43 = (const void **)*((_QWORD *)&v204 + 1);
  if (*((_QWORD *)&v204 + 1) != (_QWORD)v205)
  {
    while (*((_BYTE *)*v43 + 8) != 2)
    {
      if (++v43 == (const void **)v205)
        goto LABEL_56;
    }
  }
  if (v43 == (const void **)v205)
  {
LABEL_56:
    v45 = operator new();
    v46 = v45;
    *(_BYTE *)(v45 + 8) = 2;
    *(_QWORD *)v45 = &off_1E78D5428;
    *(_DWORD *)(v45 + 16) = 0;
    v47 = v45 + 16;
    *(_BYTE *)(v45 + 20) = 0;
    *(_QWORD *)(v45 + 32) = 0;
    *(_QWORD *)(v45 + 40) = 0;
    *(_QWORD *)(v45 + 24) = 0;
    v48 = v205;
    if ((unint64_t)v205 < *((_QWORD *)&v205 + 1))
    {
      *(_QWORD *)v205 = v45;
      v49 = (_QWORD *)(v48 + 8);
LABEL_72:
      *(_QWORD *)&v205 = v49;
      v197((uint64_t)v196, v47);
      goto LABEL_73;
    }
    v50 = (uint64_t)(v205 - *((_QWORD *)&v204 + 1)) >> 3;
    if (!((unint64_t)(v50 + 1) >> 61))
    {
      v51 = (uint64_t)(*((_QWORD *)&v205 + 1) - *((_QWORD *)&v204 + 1)) >> 2;
      if (v51 <= v50 + 1)
        v51 = v50 + 1;
      if (*((_QWORD *)&v205 + 1) - *((_QWORD *)&v204 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
        v52 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v52 = v51;
      if (v52)
        v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v205 + 8, v52);
      else
        v53 = 0;
      v54 = (uint64_t *)&v53[8 * v50];
      v55 = &v53[8 * v52];
      *v54 = v46;
      v49 = v54 + 1;
      v57 = (char *)*((_QWORD *)&v204 + 1);
      v56 = (char *)v205;
      if ((_QWORD)v205 != *((_QWORD *)&v204 + 1))
      {
        do
        {
          v58 = *((_QWORD *)v56 - 1);
          v56 -= 8;
          *--v54 = v58;
        }
        while (v56 != v57);
        v56 = (char *)*((_QWORD *)&v204 + 1);
      }
      *((_QWORD *)&v204 + 1) = v54;
      *(_QWORD *)&v205 = v49;
      *((_QWORD *)&v205 + 1) = v55;
      if (v56)
        operator delete(v56);
      goto LABEL_72;
    }
LABEL_251:
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  if (!v44)
LABEL_249:
    __cxa_bad_cast();
  ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_2((uint64_t)v196, (uint64_t)v44 + 16);
LABEL_73:
  v189[0] = MEMORY[0x1E0C809B0];
  v189[1] = 1174405120;
  v190 = ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_3;
  v191 = &__block_descriptor_tmp_60_2;
  v192 = v14;
  v193 = v13;
  v59 = (unint64_t *)&v13->__shared_owners_;
  do
    v60 = __ldxr(v59);
  while (__stxr(v60 + 1, v59));
  v61 = (std::__shared_weak_count *)a2[1];
  v194 = *a2;
  v195 = v61;
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v64 = (const void **)*((_QWORD *)&v204 + 1);
  if (*((_QWORD *)&v204 + 1) != (_QWORD)v205)
  {
    while (*((_BYTE *)*v64 + 8) != 3)
    {
      if (++v64 == (const void **)v205)
        goto LABEL_85;
    }
  }
  if (v64 == (const void **)v205)
  {
LABEL_85:
    v67 = operator new();
    v68 = v67;
    *(_BYTE *)(v67 + 8) = 3;
    *(_QWORD *)v67 = &off_1E78D5478;
    *(_BYTE *)(v67 + 16) = 0;
    v66 = (char *)(v67 + 16);
    *(_QWORD *)(v67 + 32) = 0;
    *(_QWORD *)(v67 + 40) = 0;
    *(_QWORD *)(v67 + 24) = 0;
    *(_DWORD *)(v67 + 48) = 0;
    v69 = v205;
    if ((unint64_t)v205 >= *((_QWORD *)&v205 + 1))
    {
      v71 = (uint64_t)(v205 - *((_QWORD *)&v204 + 1)) >> 3;
      if ((unint64_t)(v71 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v72 = (uint64_t)(*((_QWORD *)&v205 + 1) - *((_QWORD *)&v204 + 1)) >> 2;
      if (v72 <= v71 + 1)
        v72 = v71 + 1;
      if (*((_QWORD *)&v205 + 1) - *((_QWORD *)&v204 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
        v73 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v73 = v72;
      if (v73)
        v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v205 + 8, v73);
      else
        v74 = 0;
      v75 = (uint64_t *)&v74[8 * v71];
      v76 = &v74[8 * v73];
      *v75 = v68;
      v70 = v75 + 1;
      v78 = (char *)*((_QWORD *)&v204 + 1);
      v77 = (char *)v205;
      if ((_QWORD)v205 != *((_QWORD *)&v204 + 1))
      {
        do
        {
          v79 = *((_QWORD *)v77 - 1);
          v77 -= 8;
          *--v75 = v79;
        }
        while (v77 != v78);
        v77 = (char *)*((_QWORD *)&v204 + 1);
      }
      *((_QWORD *)&v204 + 1) = v75;
      *(_QWORD *)&v205 = v70;
      *((_QWORD *)&v205 + 1) = v76;
      if (v77)
        operator delete(v77);
    }
    else
    {
      *(_QWORD *)v205 = v67;
      v70 = (_QWORD *)(v69 + 8);
    }
    *(_QWORD *)&v205 = v70;
  }
  else
  {
    if (!v65)
      __cxa_bad_cast();
    v66 = v65 + 16;
  }
  v190((uint64_t)v189, (uint64_t)v66);
  if (a5 == 2)
  {
    if (v14[584])
    {
      v80 = v14 + 152;
      goto LABEL_110;
    }
  }
  else if (a5 == 6 && v14[1856])
  {
    v80 = v14 + 1496;
    goto LABEL_110;
  }
  v80 = v14 + 1032;
  if (!v14[1328])
    v80 = 0;
LABEL_110:
  if (v14[584])
    v81 = v14 + 152;
  else
    v81 = 0;
  v82 = (void *)MEMORY[0x1E0C809B0];
  v185[0] = MEMORY[0x1E0C809B0];
  v185[1] = 0x40000000;
  v186 = ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_61;
  v187 = &__block_descriptor_tmp_63_2;
  v188 = v80;
  v83 = (const void **)*((_QWORD *)&v204 + 1);
  if (*((_QWORD *)&v204 + 1) != (_QWORD)v205)
  {
    while (*((_BYTE *)*v83 + 8) != 16)
    {
      if (++v83 == (const void **)v205)
        goto LABEL_120;
    }
  }
  if (v83 == (const void **)v205)
  {
LABEL_120:
    v85 = operator new();
    v86 = v85;
    *(_BYTE *)(v85 + 8) = 16;
    *(_QWORD *)v85 = &off_1E78D54C8;
    *(_WORD *)(v85 + 10) = 0;
    v87 = (_WORD *)(v85 + 10);
    v88 = v205;
    if ((unint64_t)v205 >= *((_QWORD *)&v205 + 1))
    {
      v90 = (uint64_t)(v205 - *((_QWORD *)&v204 + 1)) >> 3;
      if ((unint64_t)(v90 + 1) >> 61)
        goto LABEL_252;
      v91 = (uint64_t)(*((_QWORD *)&v205 + 1) - *((_QWORD *)&v204 + 1)) >> 2;
      if (v91 <= v90 + 1)
        v91 = v90 + 1;
      if (*((_QWORD *)&v205 + 1) - *((_QWORD *)&v204 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
        v92 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v92 = v91;
      if (v92)
        v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v205 + 8, v92);
      else
        v93 = 0;
      v94 = (uint64_t *)&v93[8 * v90];
      v95 = &v93[8 * v92];
      *v94 = v86;
      v89 = v94 + 1;
      v97 = (char *)*((_QWORD *)&v204 + 1);
      v96 = (char *)v205;
      if ((_QWORD)v205 != *((_QWORD *)&v204 + 1))
      {
        do
        {
          v98 = *((_QWORD *)v96 - 1);
          v96 -= 8;
          *--v94 = v98;
        }
        while (v96 != v97);
        v96 = (char *)*((_QWORD *)&v204 + 1);
      }
      *((_QWORD *)&v204 + 1) = v94;
      *(_QWORD *)&v205 = v89;
      *((_QWORD *)&v205 + 1) = v95;
      if (v96)
        operator delete(v96);
    }
    else
    {
      *(_QWORD *)v205 = v85;
      v89 = (_QWORD *)(v88 + 8);
    }
    *(_QWORD *)&v205 = v89;
    v186((uint64_t)v185, v87);
  }
  else
  {
    if (!v84)
      goto LABEL_250;
    ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_61((uint64_t)v185, v84 + 5);
  }
  v181[0] = v82;
  v181[1] = 0x40000000;
  v182 = ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_2_64;
  v183 = &__block_descriptor_tmp_65_1;
  v184 = v81;
  v99 = (const void **)*((_QWORD *)&v204 + 1);
  if (*((_QWORD *)&v204 + 1) != (_QWORD)v205)
  {
    while (*((_BYTE *)*v99 + 8) != 17)
    {
      if (++v99 == (const void **)v205)
        goto LABEL_144;
    }
  }
  if (v99 != (const void **)v205)
  {
    if (v100)
    {
      ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_2_64((uint64_t)v181, v100 + 8);
      goto LABEL_161;
    }
LABEL_250:
    __cxa_bad_cast();
  }
LABEL_144:
  v101 = operator new();
  v102 = v101;
  *(_BYTE *)(v101 + 8) = 17;
  *(_QWORD *)v101 = &off_1E78D5518;
  *(_WORD *)(v101 + 16) = 0;
  v103 = (unsigned __int16 *)(v101 + 16);
  *(_QWORD *)(v101 + 32) = 0;
  *(_QWORD *)(v101 + 40) = 0;
  *(_QWORD *)(v101 + 24) = 0;
  *(_DWORD *)(v101 + 47) = 0;
  v104 = v205;
  if ((unint64_t)v205 >= *((_QWORD *)&v205 + 1))
  {
    v106 = (uint64_t)(v205 - *((_QWORD *)&v204 + 1)) >> 3;
    if (!((unint64_t)(v106 + 1) >> 61))
    {
      v107 = (uint64_t)(*((_QWORD *)&v205 + 1) - *((_QWORD *)&v204 + 1)) >> 2;
      if (v107 <= v106 + 1)
        v107 = v106 + 1;
      if (*((_QWORD *)&v205 + 1) - *((_QWORD *)&v204 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
        v108 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v108 = v107;
      if (v108)
        v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v205 + 8, v108);
      else
        v109 = 0;
      v110 = (uint64_t *)&v109[8 * v106];
      v111 = &v109[8 * v108];
      *v110 = v102;
      v105 = v110 + 1;
      v113 = (char *)*((_QWORD *)&v204 + 1);
      v112 = (char *)v205;
      if ((_QWORD)v205 != *((_QWORD *)&v204 + 1))
      {
        do
        {
          v114 = *((_QWORD *)v112 - 1);
          v112 -= 8;
          *--v110 = v114;
        }
        while (v112 != v113);
        v112 = (char *)*((_QWORD *)&v204 + 1);
      }
      *((_QWORD *)&v204 + 1) = v110;
      *(_QWORD *)&v205 = v105;
      *((_QWORD *)&v205 + 1) = v111;
      if (v112)
        operator delete(v112);
      goto LABEL_160;
    }
LABEL_252:
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  *(_QWORD *)v205 = v101;
  v105 = (_QWORD *)(v104 + 8);
LABEL_160:
  *(_QWORD *)&v205 = v105;
  v182((uint64_t)v181, v103);
LABEL_161:
  v176[0] = v82;
  v176[1] = 1174405120;
  v177 = ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_3_66;
  v178 = &__block_descriptor_tmp_68_0;
  v115 = (std::__shared_weak_count *)a2[1];
  v179 = *a2;
  v180 = v115;
  if (v115)
  {
    v116 = (unint64_t *)&v115->__shared_owners_;
    do
      v117 = __ldxr(v116);
    while (__stxr(v117 + 1, v116));
  }
  v118 = (const void **)*((_QWORD *)&v204 + 1);
  if (*((_QWORD *)&v204 + 1) != (_QWORD)v205)
  {
    while (*((_BYTE *)*v118 + 8) != 18)
    {
      if (++v118 == (const void **)v205)
        goto LABEL_171;
    }
  }
  if (v118 == (const void **)v205)
  {
LABEL_171:
    v121 = operator new();
    v122 = v121;
    *(_BYTE *)(v121 + 8) = 18;
    *(_QWORD *)v121 = &off_1E78D5568;
    *(_DWORD *)(v121 + 12) = 0;
    v120 = (_DWORD *)(v121 + 12);
    v123 = v205;
    if ((unint64_t)v205 >= *((_QWORD *)&v205 + 1))
    {
      v125 = (uint64_t)(v205 - *((_QWORD *)&v204 + 1)) >> 3;
      if ((unint64_t)(v125 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v126 = (uint64_t)(*((_QWORD *)&v205 + 1) - *((_QWORD *)&v204 + 1)) >> 2;
      if (v126 <= v125 + 1)
        v126 = v125 + 1;
      if (*((_QWORD *)&v205 + 1) - *((_QWORD *)&v204 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
        v127 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v127 = v126;
      if (v127)
        v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v205 + 8, v127);
      else
        v128 = 0;
      v129 = (uint64_t *)&v128[8 * v125];
      v130 = &v128[8 * v127];
      *v129 = v122;
      v124 = v129 + 1;
      v132 = (char *)*((_QWORD *)&v204 + 1);
      v131 = (char *)v205;
      if ((_QWORD)v205 != *((_QWORD *)&v204 + 1))
      {
        do
        {
          v133 = *((_QWORD *)v131 - 1);
          v131 -= 8;
          *--v129 = v133;
        }
        while (v131 != v132);
        v131 = (char *)*((_QWORD *)&v204 + 1);
      }
      *((_QWORD *)&v204 + 1) = v129;
      *(_QWORD *)&v205 = v124;
      *((_QWORD *)&v205 + 1) = v130;
      if (v131)
        operator delete(v131);
    }
    else
    {
      *(_QWORD *)v205 = v121;
      v124 = (_QWORD *)(v123 + 8);
    }
    *(_QWORD *)&v205 = v124;
  }
  else
  {
    if (!v119)
      __cxa_bad_cast();
    v120 = v119 + 12;
  }
  v177((uint64_t)v176, v120);
  v134 = (const void **)*((_QWORD *)&v204 + 1);
  if (*((_QWORD *)&v204 + 1) != (_QWORD)v205)
  {
    while (*((_BYTE *)*v134 + 8) != 20)
    {
      if (++v134 == (const void **)v205)
        goto LABEL_195;
    }
  }
  if (v134 == (const void **)v205)
  {
LABEL_195:
    v137 = operator new();
    v138 = v137;
    *(_BYTE *)(v137 + 8) = 20;
    *(_QWORD *)v137 = &off_1E78D55B8;
    *(_QWORD *)(v137 + 16) = 0;
    v136 = (_QWORD *)(v137 + 16);
    v139 = v205;
    if ((unint64_t)v205 >= *((_QWORD *)&v205 + 1))
    {
      v141 = (uint64_t)(v205 - *((_QWORD *)&v204 + 1)) >> 3;
      if ((unint64_t)(v141 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v142 = (uint64_t)(*((_QWORD *)&v205 + 1) - *((_QWORD *)&v204 + 1)) >> 2;
      if (v142 <= v141 + 1)
        v142 = v141 + 1;
      if (*((_QWORD *)&v205 + 1) - *((_QWORD *)&v204 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
        v143 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v143 = v142;
      if (v143)
        v144 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v205 + 8, v143);
      else
        v144 = 0;
      v145 = (uint64_t *)&v144[8 * v141];
      v146 = &v144[8 * v143];
      *v145 = v138;
      v140 = v145 + 1;
      v148 = (char *)*((_QWORD *)&v204 + 1);
      v147 = (char *)v205;
      if ((_QWORD)v205 != *((_QWORD *)&v204 + 1))
      {
        do
        {
          v149 = *((_QWORD *)v147 - 1);
          v147 -= 8;
          *--v145 = v149;
        }
        while (v147 != v148);
        v147 = (char *)*((_QWORD *)&v204 + 1);
      }
      *((_QWORD *)&v204 + 1) = v145;
      *(_QWORD *)&v205 = v140;
      *((_QWORD *)&v205 + 1) = v146;
      if (v147)
        operator delete(v147);
    }
    else
    {
      *(_QWORD *)v205 = v137;
      v140 = (_QWORD *)(v139 + 8);
    }
    *(_QWORD *)&v205 = v140;
  }
  else
  {
    if (!v135)
      __cxa_bad_cast();
    v136 = v135 + 16;
  }
  v208.tv_sec = 0;
  *(_QWORD *)&v208.tv_usec = 0;
  gettimeofday(&v208, 0);
  *v136 = 1000 * v208.tv_sec + v208.tv_usec / 1000 + 2208988800000;
  if (QMIRTPCommandDriver::getInstanceType(a1, (void **)(*a2 + 80)))
  {
    v150 = qmi::ClientRouter::get();
    v151 = operator new();
    *(_QWORD *)v151 = v150;
    *(_QWORD *)(v151 + 8) = QMIServiceMsg::create();
    *(_DWORD *)(v151 + 16) = 25000;
    *(_QWORD *)(v151 + 24) = 0;
    *(_QWORD *)(v151 + 32) = 0;
    v175 = v151;
    v152 = *a2;
    v153 = a2[1];
    if (v153)
    {
      v154 = (unint64_t *)(v153 + 8);
      do
        v155 = __ldxr(v154);
      while (__stxr(v155 + 1, v154));
    }
    v156 = operator new(0x38uLL);
    v156[1] = 0;
    v157 = v156 + 1;
    v156[2] = 0;
    *v156 = &off_1E78D5620;
    v156[3] = a1;
    v156[4] = v152;
    v156[5] = v153;
    *((_BYTE *)v156 + 48) = a3;
    v213 = (char *)(v156 + 3);
    v214 = (std::__shared_weak_count *)v156;
    v208.tv_sec = (__darwin_time_t)v82;
    *(_QWORD *)&v208.tv_usec = 1174405120;
    v209 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS5_I9IpAddressEEN8SDPMedia9MediaTypeENS4_8weak_ptrI10SDPSessionEEE3__0EEOS1_OT__block_invoke;
    v210 = &__block_descriptor_tmp_266;
    v211 = (char *)(v156 + 3);
    v212 = (std::__shared_weak_count *)v156;
    do
      v158 = __ldxr(v157);
    while (__stxr(v158 + 1, v157));
    aBlock[0] = v82;
    aBlock[1] = (void *)0x40000000;
    v216 = ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms17SessionInitialize8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    v217 = &unk_1E78D5668;
    v218 = &v208;
    *(_QWORD *)(v175 + 32) = _Block_copy(aBlock);
    v159 = v212;
    if (v212)
    {
      v160 = (unint64_t *)&v212->__shared_owners_;
      do
        v161 = __ldaxr(v160);
      while (__stlxr(v161 - 1, v160));
      if (!v161)
      {
        ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
        std::__shared_weak_count::__release_weak(v159);
      }
    }
    v162 = v214;
    if (v214)
    {
      v163 = (unint64_t *)&v214->__shared_owners_;
      do
        v164 = __ldaxr(v163);
      while (__stlxr(v164 - 1, v163));
      if (!v164)
      {
        ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
        std::__shared_weak_count::__release_weak(v162);
      }
    }
    v165 = v175;
    v175 = 0;
    if (v165)
      std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v175, v165);
  }
  v166 = v180;
  if (v180)
  {
    v167 = (unint64_t *)&v180->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  v169 = v195;
  if (v195)
  {
    v170 = (unint64_t *)&v195->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = v193;
  if (v193)
  {
    v173 = (unint64_t *)&v193->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v204);
  v13 = v207;
  if (v207)
    goto LABEL_25;
}

void sub_1BF03CAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v22 - 160);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v17);
  if (a16)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v19, a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v21);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v20);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v22 - 256));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v22 - 224);
  _Unwind_Resume(a1);
}

void sub_1BF03CBC0()
{
  uint64_t v0;

  if (*(char *)(v0 - 121) < 0)
    operator delete(*(void **)(v0 - 144));
  if (*(char *)(v0 - 185) < 0)
    operator delete(*(void **)(v0 - 208));
  JUMPOUT(0x1BF03CBB8);
}

uint64_t ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(unsigned __int8 *)(result + 32);
  return result;
}

void ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  _BOOL4 v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t *v12;
  void **v13;
  char v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  char v26;
  void **v27;
  unint64_t v28;
  uint64_t v29;

  v4 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 128))(**(_QWORD **)(a1 + 32));
  v5 = v4[23];
  if ((v5 & 0x80u) == 0)
    v6 = v4[23];
  else
    v6 = *((_QWORD *)v4 + 1);
  if (v6 != 3)
  {
LABEL_11:
    v8 = 0;
    goto LABEL_13;
  }
  if ((v5 & 0x80) == 0)
  {
    if (!v4[23])
    {
LABEL_10:
      v8 = 1;
      goto LABEL_13;
    }
    v7 = &IpAddress::kAddressTypeIPv6;
    while (*v4 == *(unsigned __int8 *)v7)
    {
      ++v4;
      v7 = (__int128 *)((char *)v7 + 1);
      if (!--v5)
        goto LABEL_10;
    }
    goto LABEL_11;
  }
  v8 = memcmp(*(const void **)v4, &IpAddress::kAddressTypeIPv6, *((_QWORD *)v4 + 1)) == 0;
LABEL_13:
  *(_DWORD *)a2 = v8;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  IpAddress::asString(**(_QWORD **)(a1 + 32), (uint64_t)&v27, 0);
  v9 = 0;
  v10 = HIBYTE(v29);
  if (v29 >= 0)
    v11 = HIBYTE(v29);
  else
    v11 = v28;
  *(_BYTE *)(a2 + 4) = v11;
  v12 = (unint64_t *)(a2 + 8);
  if ((v10 & 0x80) != 0)
    goto LABEL_19;
  while (v9 < v10)
  {
    v13 = (void **)&v27;
    while (1)
    {
      v14 = *((_BYTE *)v13 + v9);
      v16 = *(_BYTE **)(a2 + 16);
      v15 = *(_QWORD *)(a2 + 24);
      if ((unint64_t)v16 >= v15)
      {
        v18 = *v12;
        v19 = &v16[-*v12];
        v20 = (unint64_t)(v19 + 1);
        if ((uint64_t)(v19 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v21 = v15 - v18;
        if (2 * v21 > v20)
          v20 = 2 * v21;
        v22 = v21 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v20;
        v23 = v22 ? (char *)operator new(v22) : 0;
        v24 = &v19[(_QWORD)v23];
        v19[(_QWORD)v23] = v14;
        v17 = (uint64_t)&v19[(_QWORD)v23 + 1];
        if (v16 != (_BYTE *)v18)
        {
          v25 = &v16[~v18];
          do
          {
            v26 = *--v16;
            (v25--)[(_QWORD)v23] = v26;
          }
          while (v16 != (_BYTE *)v18);
          v16 = (_BYTE *)*v12;
          v24 = v23;
        }
        *(_QWORD *)(a2 + 8) = v24;
        *(_QWORD *)(a2 + 16) = v17;
        *(_QWORD *)(a2 + 24) = &v23[v22];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v16 = v14;
        v17 = (uint64_t)(v16 + 1);
      }
      *(_QWORD *)(a2 + 16) = v17;
      ++v9;
      v10 = HIBYTE(v29);
      if ((v29 & 0x8000000000000000) == 0)
        break;
LABEL_19:
      v13 = v27;
      if (v9 >= v28)
      {
        operator delete(v27);
        return;
      }
    }
  }
}

void sub_1BF03CE14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string::value_type v20;
  unint64_t *v21;
  std::string *v22;
  std::string::value_type v23;
  unint64_t v24;
  std::string::value_type *v25;
  uint64_t v26;
  unint64_t v27;
  std::string::value_type *v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  char *v32;
  char *v33;
  std::string::value_type *v34;
  std::string::value_type v35;
  std::string v36;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(std::__shared_weak_count **)(v4 + 128);
  if (v5 && (v6 = std::__shared_weak_count::lock(v5)) != 0)
  {
    v7 = v6;
    v8 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 120) + 176);
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (v10)
    {
      if (!v8)
      {
LABEL_7:
        v11 = 0;
        goto LABEL_10;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
      if (!v8)
        goto LABEL_7;
    }
  }
  else if (!MEMORY[0xB0])
  {
    goto LABEL_7;
  }
  v11 = 1;
LABEL_10:
  *(_DWORD *)(a2 + 32) = v11;
  *(_BYTE *)(*(_QWORD *)(a1 + 48) + 481) = v11;
  memset(&v36, 0, sizeof(v36));
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(std::__shared_weak_count **)(v12 + 128);
  if (v13)
  {
    v14 = std::__shared_weak_count::lock(v13);
    if (v14)
    {
      v15 = *(_QWORD *)(v12 + 120);
      goto LABEL_15;
    }
  }
  else
  {
    v14 = 0;
  }
  v15 = 0;
LABEL_15:
  if (*(char *)(v15 + 3903) < 0)
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(v15 + 3880), *(_QWORD *)(v15 + 3888));
  else
    v36 = *(std::string *)(v15 + 3880);
  if (v14)
  {
    v16 = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v18 = 0;
  v19 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  else
    v20 = v36.__r_.__value_.__s.__data_[8];
  *(_BYTE *)a2 = v20;
  v21 = (unint64_t *)(a2 + 8);
  if ((v19 & 0x80) != 0)
    goto LABEL_29;
  while (v18 < v19)
  {
    v22 = &v36;
    while (1)
    {
      v23 = v22->__r_.__value_.__s.__data_[v18];
      v25 = *(std::string::value_type **)(a2 + 16);
      v24 = *(_QWORD *)(a2 + 24);
      if ((unint64_t)v25 >= v24)
      {
        v27 = *v21;
        v28 = &v25[-*v21];
        v29 = (unint64_t)(v28 + 1);
        if ((uint64_t)(v28 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v30 = v24 - v27;
        if (2 * v30 > v29)
          v29 = 2 * v30;
        v31 = v30 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v29;
        v32 = v31 ? (char *)operator new(v31) : 0;
        v33 = &v28[(_QWORD)v32];
        v28[(_QWORD)v32] = v23;
        v26 = (uint64_t)&v28[(_QWORD)v32 + 1];
        if (v25 != (std::string::value_type *)v27)
        {
          v34 = &v25[~v27];
          do
          {
            v35 = *--v25;
            (v34--)[(_QWORD)v32] = v35;
          }
          while (v25 != (std::string::value_type *)v27);
          v25 = (std::string::value_type *)*v21;
          v33 = v32;
        }
        *(_QWORD *)(a2 + 8) = v33;
        *(_QWORD *)(a2 + 16) = v26;
        *(_QWORD *)(a2 + 24) = &v32[v31];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v25 = v23;
        v26 = (uint64_t)(v25 + 1);
      }
      *(_QWORD *)(a2 + 16) = v26;
      ++v18;
      v19 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      if ((*((_BYTE *)&v36.__r_.__value_.__s + 23) & 0x80) == 0)
        break;
LABEL_29:
      v22 = (std::string *)v36.__r_.__value_.__r.__words[0];
      if (v18 >= v36.__r_.__value_.__l.__size_)
      {
        operator delete(v36.__r_.__value_.__l.__data_);
        return;
      }
    }
  }
}

void sub_1BF03D0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_32c38_ZTSNSt3__110shared_ptrI10SDPSessionEE48c41_ZTSNSt3__110shared_ptrI13QMIRTPSessionEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  result[6] = a2[6];
  result[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c38_ZTSNSt3__110shared_ptrI10SDPSessionEE48c41_ZTSNSt3__110shared_ptrI13QMIRTPSessionEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 32;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 48);
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
}

uint64_t ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_61(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(*(_QWORD *)(result + 32) + 24);
  return result;
}

void ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_2_64(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 v5;
  char v6;
  unint64_t v7;
  unint64_t *v8;
  _BYTE *v9;
  std::string *v10;
  std::string::value_type v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  char v22;
  uint64_t v23;
  std::string v24;

  v3 = a1;
  memset(&v24, 0, sizeof(v24));
  v4 = *(_QWORD *)(a1 + 32);
  if (*(char *)(v4 + 95) < 0)
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(v4 + 72), *(_QWORD *)(v4 + 80));
  else
    v24 = *(std::string *)(v4 + 72);
  v5 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  v6 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v5 = v24.__r_.__value_.__r.__words[1];
  *a2 = v5;
  if (v5)
  {
    v23 = v3;
    v7 = 0;
    v8 = (unint64_t *)(a2 + 4);
    v9 = (_BYTE *)*((_QWORD *)a2 + 2);
    do
    {
      v10 = (std::string *)v24.__r_.__value_.__r.__words[0];
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v24;
      v11 = v10->__r_.__value_.__s.__data_[v7];
      v12 = *((_QWORD *)a2 + 3);
      if ((unint64_t)v9 >= v12)
      {
        v14 = *v8;
        v15 = &v9[-*v8];
        v16 = (unint64_t)(v15 + 1);
        if ((uint64_t)(v15 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v17 = v12 - v14;
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
          v18 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
          v19 = (char *)operator new(v18);
        else
          v19 = 0;
        v20 = &v15[(_QWORD)v19];
        v15[(_QWORD)v19] = v11;
        v13 = (uint64_t)&v15[(_QWORD)v19 + 1];
        if (v9 != (_BYTE *)v14)
        {
          v21 = &v9[~v14];
          do
          {
            v22 = *--v9;
            (v21--)[(_QWORD)v19] = v22;
          }
          while (v9 != (_BYTE *)v14);
          v9 = (_BYTE *)*v8;
          v20 = v19;
        }
        *((_QWORD *)a2 + 1) = v20;
        *((_QWORD *)a2 + 2) = v13;
        *((_QWORD *)a2 + 3) = &v19[v18];
        if (v9)
          operator delete(v9);
      }
      else
      {
        *v9 = v11;
        v13 = (uint64_t)(v9 + 1);
      }
      *((_QWORD *)a2 + 2) = v13;
      ++v7;
      v9 = (_BYTE *)v13;
    }
    while (v7 < *a2);
    v6 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    v3 = v23;
  }
  a2[16] = *(_WORD *)(*(_QWORD *)(v3 + 32) + 24) + 1;
  *((_BYTE *)a2 + 34) = 1;
  if (v6 < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
}

void sub_1BF03D328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  char v16;

  if (v16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS1_I9IpAddressEEN8SDPMedia9MediaTypeENS0_8weak_ptrI10SDPSessionEE_block_invoke_3_66(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 176))(*(_QWORD *)(a1 + 32) + 24);
  *a2 = result;
  return result;
}

uint64_t __copy_helper_block_e8_32c41_ZTSNSt3__110shared_ptrI13QMIRTPSessionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c41_ZTSNSt3__110shared_ptrI13QMIRTPSessionEE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void ___ZN19QMIRTPCommandDriver27handleSessionInitializeRespERKN2ms17SessionInitialize8ResponseENSt3__110shared_ptrI13QMIRTPSessionEEh_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(a1 + 56))
  {
    v36 = 0;
    v37 = 0;
    v3 = *(std::__shared_weak_count **)(v2 + 136);
    if (v3)
    {
      v37 = std::__shared_weak_count::lock(v3);
      if (v37)
      {
        v4 = *(_QWORD *)(v2 + 128);
        v36 = (_QWORD *)v4;
        if (v4)
        {
          v5 = *(_QWORD *)(v4 + 48);
          v6 = *(std::__shared_weak_count **)(v4 + 56);
          v32 = v5;
          v33 = v6;
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldxr(p_shared_owners);
            while (__stxr(v8 + 1, p_shared_owners));
          }
          v9 = *(_QWORD *)(v5 + 296);
          if (v9)
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v9 + 120), 4);
          if (v6)
          {
            v10 = (unint64_t *)&v6->__shared_owners_;
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v12 = *(std::__shared_weak_count **)(a1 + 48);
          v30 = *(_QWORD *)(a1 + 40);
          v31 = v12;
          if (v12)
          {
            v13 = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldxr(v13);
            while (__stxr(v14 + 1, v13));
          }
          QMIRTPStackController::sessionDidInitialize((uint64_t)v36, &v30, 0, 4);
          v15 = v31;
          if (v31)
          {
            v16 = (unint64_t *)&v31->__shared_owners_;
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
        }
      }
    }
    v18 = v37;
    if (v37)
    {
      v19 = (unint64_t *)&v37->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
LABEL_41:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    v36 = 0;
    v37 = 0;
    v21 = *(std::__shared_weak_count **)(v2 + 136);
    if (v21)
    {
      v37 = std::__shared_weak_count::lock(v21);
      if (v37)
      {
        v22 = *(_QWORD **)(v2 + 128);
        v36 = v22;
        if (v22)
        {
          v23 = *(std::__shared_weak_count **)(a1 + 48);
          v34 = *(_QWORD *)(a1 + 40);
          v35 = v23;
          if (v23)
          {
            v24 = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldxr(v24);
            while (__stxr(v25 + 1, v24));
          }
          QMIRTPStackController::handleInitializeRequestReceipt(v22, &v34);
          v26 = v35;
          if (v35)
          {
            v27 = (unint64_t *)&v35->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
        }
      }
    }
    v18 = v37;
    if (v37)
    {
      v29 = (unint64_t *)&v37->__shared_owners_;
      do
        v20 = __ldaxr(v29);
      while (__stlxr(v20 - 1, v29));
      goto LABEL_41;
    }
  }
}

void sub_1BF03D5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v5 - 32);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__110shared_ptrI13QMIRTPSessionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_40c41_ZTSNSt3__110shared_ptrI13QMIRTPSessionEE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 40);
}

uint64_t ___ZN19QMIRTPCommandDriver33handleSessionInitializeIndicationERKN2ms17SessionInitialize10IndicationE_block_invoke(uint64_t result, unsigned int *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void ___ZN19QMIRTPCommandDriver33handleSessionInitializeIndicationERKN2ms17SessionInitialize10IndicationE_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(std::__shared_weak_count **)(v2 + 136);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD **)(v2 + 128);
      if (v6)
        QMIRTPStackController::sessionDidInitialize(v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), *(_DWORD *)(a1 + 56));
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF03D6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMIRTPCommandDriver::sessionUninitializeReq(std::__shared_weak_count_vtbl *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  int InstanceType;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  _QWORD *v35;
  size_t v36;
  std::__shared_weak_count *on_zero_shared;
  void (__cdecl *v38)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count_vtbl *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  int v56;
  uint64_t v57;
  _QWORD v58[2];
  uint64_t (*v59)(uint64_t, _BYTE *);
  void *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  _OWORD v63[2];
  void *__p;
  uint64_t v65;
  void (*v66)(uint64_t, unsigned __int16 *);
  void *v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;
  _QWORD *v70;
  std::__shared_weak_count *v71;
  void *aBlock[2];
  void (*v73)(uint64_t, QMIServiceMsg *);
  void *v74;
  void **p_p;

  if (*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(aBlock, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)aBlock);
    if (!a1)
      __cxa_bad_typeid();
    v5 = v4;
    v6 = *(_QWORD **)(v4 + 8);
    v7 = strlen((const char *)(*(_QWORD *)(*((_QWORD *)a1->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*((_QWORD *)a1->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"sessionUninitializeReq", 22);
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [sessionId=", 12);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)(*a2 + 24) + 176))(*a2 + 24);
    std::ostream::operator<<();
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (SHIBYTE(v73) < 0)
      operator delete(aBlock[0]);
    if (SHIBYTE(v66) < 0)
      operator delete(__p);
    memset(v63, 0, sizeof(v63));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v63);
    v8 = (void *)MEMORY[0x1E0C809B0];
    v58[0] = MEMORY[0x1E0C809B0];
    v58[1] = 1174405120;
    v59 = ___ZN19QMIRTPCommandDriver22sessionUninitializeReqENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke;
    v60 = &__block_descriptor_tmp_79;
    v9 = (std::__shared_weak_count *)a2[1];
    v61 = *a2;
    v62 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v12 = qmi::MutableMessageBase::getTLV<ms::tlv::RTPSessionIdentifier>(v63, 1);
    v59((uint64_t)v58, (_BYTE *)v12);
    InstanceType = QMIRTPCommandDriver::getInstanceType(a1, (void **)(*a2 + 80));
    if (InstanceType)
    {
      v14 = qmi::ClientRouter::get();
      v56 = InstanceType;
      v15 = operator new();
      *(_QWORD *)v15 = v14;
      *(_QWORD *)(v15 + 8) = QMIServiceMsg::create();
      *(_DWORD *)(v15 + 16) = 25000;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0;
      v57 = v15;
      v16 = *a2;
      v17 = (std::__shared_weak_count *)a2[1];
      v53 = a1;
      v54 = v16;
      v55 = v17;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = (std::__shared_weak_count *)operator new(0x30uLL);
      v20->__shared_owners_ = 0;
      v21 = (unint64_t *)&v20->__shared_owners_;
      v20->__shared_weak_owners_ = 0;
      v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D5768;
      v20[1].__vftable = a1;
      v20[1].__shared_owners_ = v16;
      v20[1].__shared_weak_owners_ = (uint64_t)v17;
      v54 = 0;
      v55 = 0;
      v70 = &v20[1].__vftable;
      v71 = v20;
      __p = v8;
      v65 = 1174405120;
      v66 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver22sessionUninitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEE3__0EEOS1_OT__block_invoke;
      v67 = &__block_descriptor_tmp_273;
      v68 = &v20[1].__vftable;
      v69 = v20;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      aBlock[0] = v8;
      aBlock[1] = (void *)0x40000000;
      v73 = ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms19SessionUninitialize8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      v74 = &unk_1E78D57B0;
      p_p = &__p;
      *(_QWORD *)(v15 + 32) = _Block_copy(aBlock);
      v23 = v69;
      if (v69)
      {
        v24 = (unint64_t *)&v69->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = v71;
      if (v71)
      {
        v27 = (unint64_t *)&v71->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if (v55)
      {
        v29 = &v55->__shared_owners_;
        do
          v30 = __ldaxr((unint64_t *)v29);
        while (__stlxr(v30 - 1, (unint64_t *)v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v31 = v57;
      v57 = 0;
      if (v31)
        std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v57, v31);
    }
    else
    {
      __p = 0;
      v65 = 0;
      on_zero_shared = (std::__shared_weak_count *)a1[3].__on_zero_shared;
      if (on_zero_shared)
      {
        v65 = (uint64_t)std::__shared_weak_count::lock(on_zero_shared);
        if (v65)
        {
          v38 = a1[3].~__shared_weak_count_0;
          __p = v38;
          if (v38)
          {
            v39 = (std::__shared_weak_count *)a2[1];
            v51 = *a2;
            v52 = v39;
            if (v39)
            {
              v40 = (unint64_t *)&v39->__shared_owners_;
              do
                v41 = __ldxr(v40);
              while (__stxr(v41 + 1, v40));
            }
            QMIRTPStackController::sessionDidUninitialize((uint64_t)v38, &v51, 0);
            v42 = v52;
            if (v52)
            {
              v43 = (unint64_t *)&v52->__shared_owners_;
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
          }
        }
      }
      v45 = (std::__shared_weak_count *)v65;
      if (v65)
      {
        v46 = (unint64_t *)(v65 + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
    }
    v48 = v62;
    if (v62)
    {
      v49 = (unint64_t *)&v62->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v63);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(aBlock, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v32 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)aBlock);
    if (!a1)
      __cxa_bad_typeid();
    v33 = v32;
    v34 = (const char *)(*(_QWORD *)(*((_QWORD *)a1->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v35 = *(_QWORD **)(v32 + 8);
    v36 = strlen(v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v34, v36);
    *(_BYTE *)(v33 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v33 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"sessionUninitializeReq", 22);
    *(_BYTE *)(v33 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)" session is null", 16);
    *(_BYTE *)(v33 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v33 + 17) = 0;
    if (SHIBYTE(v73) < 0)
      operator delete(aBlock[0]);
    if (SHIBYTE(v66) < 0)
      operator delete(__p);
  }
}

void sub_1BF03DD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

uint64_t ___ZN19QMIRTPCommandDriver22sessionUninitializeReqENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(*(_QWORD *)(result + 32) + 482);
  return result;
}

void ___ZN19QMIRTPCommandDriver29handleSessionUninitializeRespERKN2ms19SessionUninitialize8ResponseENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(a1 + 56))
  {
    v36 = 0;
    v37 = 0;
    v3 = *(std::__shared_weak_count **)(v2 + 136);
    if (v3)
    {
      v37 = std::__shared_weak_count::lock(v3);
      if (v37)
      {
        v4 = *(_QWORD *)(v2 + 128);
        v36 = (_QWORD *)v4;
        if (v4)
        {
          v5 = *(_QWORD *)(v4 + 48);
          v6 = *(std::__shared_weak_count **)(v4 + 56);
          v32 = v5;
          v33 = v6;
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldxr(p_shared_owners);
            while (__stxr(v8 + 1, p_shared_owners));
          }
          v9 = *(_QWORD *)(v5 + 296);
          if (v9)
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v9 + 120), 5);
          if (v6)
          {
            v10 = (unint64_t *)&v6->__shared_owners_;
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v12 = *(std::__shared_weak_count **)(a1 + 48);
          v30 = *(_QWORD *)(a1 + 40);
          v31 = v12;
          if (v12)
          {
            v13 = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldxr(v13);
            while (__stxr(v14 + 1, v13));
          }
          QMIRTPStackController::sessionDidUninitialize((uint64_t)v36, &v30, 4);
          v15 = v31;
          if (v31)
          {
            v16 = (unint64_t *)&v31->__shared_owners_;
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
        }
      }
    }
    v18 = v37;
    if (v37)
    {
      v19 = (unint64_t *)&v37->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
LABEL_41:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    v36 = 0;
    v37 = 0;
    v21 = *(std::__shared_weak_count **)(v2 + 136);
    if (v21)
    {
      v37 = std::__shared_weak_count::lock(v21);
      if (v37)
      {
        v22 = *(_QWORD **)(v2 + 128);
        v36 = v22;
        if (v22)
        {
          v23 = *(std::__shared_weak_count **)(a1 + 48);
          v34 = *(_QWORD *)(a1 + 40);
          v35 = v23;
          if (v23)
          {
            v24 = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldxr(v24);
            while (__stxr(v25 + 1, v24));
          }
          QMIRTPStackController::handleUninitializeRequestReceipt(v22, &v34);
          v26 = v35;
          if (v35)
          {
            v27 = (unint64_t *)&v35->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
        }
      }
    }
    v18 = v37;
    if (v37)
    {
      v29 = (unint64_t *)&v37->__shared_owners_;
      do
        v20 = __ldaxr(v29);
      while (__stlxr(v20 - 1, v29));
      goto LABEL_41;
    }
  }
}

void sub_1BF03DFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v5 - 32);
  _Unwind_Resume(a1);
}

void ___ZN19QMIRTPCommandDriver35handleSessionUninitializeIndicationERKN2ms19SessionUninitialize10IndicationE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  QMIRTPStackController *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(v2 + 136);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = *(QMIRTPStackController **)(v2 + 128);
      if (v6)
        QMIRTPStackController::sessionDidUninitialize(v6, *(unsigned __int8 *)(a1 + 44), *(_DWORD *)(a1 + 40));
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF03E0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMIRTPCommandDriver::sessionConfigureReq(std::__shared_weak_count_vtbl *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  void *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  _QWORD *v28;
  size_t v29;
  uint64_t v30;
  const char *v31;
  size_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD v40[5];
  std::__shared_weak_count *v41;
  _OWORD v42[2];
  uint64_t v43;
  void *__p[2];
  void (*v45)(uint64_t, unsigned __int16 *);
  void *v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  void *aBlock[2];
  void (*v52)(uint64_t, QMIServiceMsg *);
  void *v53;
  void **v54;

  if (*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(aBlock, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)aBlock);
    if (!a1)
      __cxa_bad_typeid();
    v5 = v4;
    v6 = *(_QWORD **)(v4 + 8);
    v7 = strlen((const char *)(*(_QWORD *)(*((_QWORD *)a1->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*((_QWORD *)a1->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"sessionConfigureReq", 19);
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [sessionId=", 12);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)(*a2 + 24) + 176))(*a2 + 24);
    std::ostream::operator<<();
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (SHIBYTE(v52) < 0)
      operator delete(aBlock[0]);
    if (SHIBYTE(v45) < 0)
      operator delete(__p[0]);
    v43 = 0;
    memset(v42, 0, sizeof(v42));
    LOBYTE(v42[0]) = *(_BYTE *)(*a2 + 528);
    qmi::MutableMessageBase::MutableMessageBase();
    if (LOBYTE(v42[0]))
    {
      if (QMIRTPCommandDriver::getInstanceType(a1, (void **)(*a2 + 80)))
      {
        v8 = qmi::ClientRouter::get();
        v9 = operator new();
        *(_QWORD *)v9 = v8;
        *(_QWORD *)(v9 + 8) = QMIServiceMsg::create();
        *(_DWORD *)(v9 + 16) = 25000;
        *(_QWORD *)(v9 + 24) = 0;
        *(_QWORD *)(v9 + 32) = 0;
        v39 = v9;
        v11 = *a2;
        v10 = a2[1];
        if (v10)
        {
          v12 = (unint64_t *)(v10 + 8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        v14 = (std::__shared_weak_count *)operator new(0x30uLL);
        v14->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        v14->__shared_weak_owners_ = 0;
        v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D5860;
        v14[1].__vftable = a1;
        v14[1].__shared_owners_ = v11;
        v14[1].__shared_weak_owners_ = v10;
        v49 = &v14[1].__vftable;
        v50 = v14;
        v16 = (void *)MEMORY[0x1E0C809B0];
        __p[0] = (void *)MEMORY[0x1E0C809B0];
        __p[1] = (void *)1174405120;
        v45 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver19sessionConfigureReqENSt3__110shared_ptrI13QMIRTPSessionEEE3__0EEOS1_OT__block_invoke;
        v46 = &__block_descriptor_tmp_277;
        v47 = &v14[1].__vftable;
        v48 = v14;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
        aBlock[0] = v16;
        aBlock[1] = (void *)0x40000000;
        v52 = ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms16SessionConfigure8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        v53 = &unk_1E78D58A8;
        v54 = __p;
        *(_QWORD *)(v9 + 32) = _Block_copy(aBlock);
        v18 = v48;
        if (v48)
        {
          v19 = (unint64_t *)&v48->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v21 = v50;
        if (v50)
        {
          v22 = (unint64_t *)&v50->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        v24 = v39;
        v39 = 0;
        if (v24)
          std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v39, v24);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(aBlock, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v30 = ImsLogger::warn(ims::_logger, (uint64_t)__p, (uint64_t)aBlock);
      v31 = (const char *)(*(_QWORD *)(*((_QWORD *)a1->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL);
      v32 = strlen(v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)v31, v32);
      *(_BYTE *)(v30 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"::", 2);
      *(_BYTE *)(v30 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"sessionConfigureReq", 19);
      *(_BYTE *)(v30 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)" session configuration is null", 30);
      *(_BYTE *)(v30 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v30 + 17) = 0;
      if (SHIBYTE(v52) < 0)
        operator delete(aBlock[0]);
      if (SHIBYTE(v45) < 0)
        operator delete(__p[0]);
      v40[0] = MEMORY[0x1E0C809B0];
      v40[1] = 1174405120;
      v40[2] = ___ZN19QMIRTPCommandDriver19sessionConfigureReqENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke;
      v40[3] = &__block_descriptor_tmp_85;
      v33 = (std::__shared_weak_count *)a2[1];
      v40[4] = *a2;
      v41 = v33;
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      ims::performBlock((IMSClientManager *)v40);
      v36 = v41;
      if (v41)
      {
        v37 = (unint64_t *)&v41->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)((char *)v42 + 8));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(aBlock, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v25 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)aBlock);
    if (!a1)
      __cxa_bad_typeid();
    v26 = v25;
    v27 = (const char *)(*(_QWORD *)(*((_QWORD *)a1->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v28 = *(_QWORD **)(v25 + 8);
    v29 = strlen(v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v27, v29);
    *(_BYTE *)(v26 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v26 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"sessionConfigureReq", 19);
    *(_BYTE *)(v26 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)" session is null", 16);
    *(_BYTE *)(v26 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v26 + 17) = 0;
    if (SHIBYTE(v52) < 0)
      operator delete(aBlock[0]);
    if (SHIBYTE(v45) < 0)
      operator delete(__p[0]);
  }
}

void sub_1BF03E754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  qmi::MutableMessageBase *v31;
  uint64_t v32;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v32);
  qmi::MutableMessageBase::~MutableMessageBase(v31);
  _Unwind_Resume(a1);
}

void ___ZN19QMIRTPCommandDriver19sessionConfigureReqENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 152))(&v16, *(_QWORD *)(a1 + 32) + 24);
  v18 = 0;
  v19 = 0;
  if (v17)
  {
    v19 = std::__shared_weak_count::lock(v17);
    if (v19)
    {
      v2 = v16;
      v18 = v16;
    }
    else
    {
      v2 = 0;
    }
    if (v17)
      std::__shared_weak_count::__release_weak(v17);
    if (v2)
    {
      v4 = *(_QWORD *)(a1 + 32);
      v3 = *(std::__shared_weak_count **)(a1 + 40);
      if (v4)
        v5 = v4 + 24;
      else
        v5 = 0;
      v14 = v5;
      v15 = v3;
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v2 + 16))(v2, &v14, 0);
      v8 = v15;
      if (v15)
      {
        v9 = (unint64_t *)&v15->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
  v11 = v19;
  if (v19)
  {
    v12 = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF03E968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void ___ZN19QMIRTPCommandDriver26handleSessionConfigureRespERKN2ms16SessionConfigure8ResponseENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(a1 + 56))
  {
    v36 = 0;
    v37 = 0;
    v3 = *(std::__shared_weak_count **)(v2 + 136);
    if (v3)
    {
      v37 = std::__shared_weak_count::lock(v3);
      if (v37)
      {
        v4 = *(_QWORD **)(v2 + 128);
        v36 = v4;
        if (v4)
        {
          v5 = v4[6];
          v6 = (std::__shared_weak_count *)v4[7];
          v32 = v5;
          v33 = v6;
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldxr(p_shared_owners);
            while (__stxr(v8 + 1, p_shared_owners));
          }
          v9 = *(_QWORD *)(v5 + 296);
          if (v9)
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v9 + 120), 6);
          if (v6)
          {
            v10 = (unint64_t *)&v6->__shared_owners_;
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v12 = *(std::__shared_weak_count **)(a1 + 48);
          v30 = *(_QWORD *)(a1 + 40);
          v31 = v12;
          if (v12)
          {
            v13 = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldxr(v13);
            while (__stxr(v14 + 1, v13));
          }
          QMIRTPStackController::sessionDidConfigure(v36, &v30, 4);
          v15 = v31;
          if (v31)
          {
            v16 = (unint64_t *)&v31->__shared_owners_;
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
        }
      }
    }
    v18 = v37;
    if (v37)
    {
      v19 = (unint64_t *)&v37->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
LABEL_41:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    v36 = 0;
    v37 = 0;
    v21 = *(std::__shared_weak_count **)(v2 + 136);
    if (v21)
    {
      v37 = std::__shared_weak_count::lock(v21);
      if (v37)
      {
        v22 = *(_QWORD **)(v2 + 128);
        v36 = v22;
        if (v22)
        {
          v23 = *(std::__shared_weak_count **)(a1 + 48);
          v34 = *(_QWORD *)(a1 + 40);
          v35 = v23;
          if (v23)
          {
            v24 = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldxr(v24);
            while (__stxr(v25 + 1, v24));
          }
          QMIRTPStackController::handleConfigureRequestReceipt(v22, &v34);
          v26 = v35;
          if (v35)
          {
            v27 = (unint64_t *)&v35->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
        }
      }
    }
    v18 = v37;
    if (v37)
    {
      v29 = (unint64_t *)&v37->__shared_owners_;
      do
        v20 = __ldaxr(v29);
      while (__stlxr(v20 - 1, v29));
      goto LABEL_41;
    }
  }
}

void sub_1BF03EB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v5 - 32);
  _Unwind_Resume(a1);
}

void ___ZN19QMIRTPCommandDriver32handleSessionConfigureIndicationERKN2ms16SessionConfigure10IndicationE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  QMIRTPStackController *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(v2 + 136);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = *(QMIRTPStackController **)(v2 + 128);
      if (v6)
        QMIRTPStackController::sessionDidConfigure(v6, *(unsigned __int8 *)(a1 + 44), *(_DWORD *)(a1 + 40));
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF03EC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMIRTPCommandDriver::sessionSetStreamDirectionReq(_QWORD *a1, _QWORD *a2, unsigned int a3, char a4)
{
  unsigned int v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  const void **v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD v57[2];
  uint64_t (*v58)(uint64_t, _DWORD *);
  void *v59;
  unsigned int v60;
  char v61;
  _QWORD v62[2];
  uint64_t (*v63)(uint64_t, _BYTE *);
  void *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  __int128 v67;
  __int128 v68;
  unsigned int v69;
  void *__p[2];
  void (*v71)(uint64_t, unsigned __int16 *);
  void *v72;
  char *v73;
  std::__shared_weak_count *v74;
  char *v75;
  std::__shared_weak_count *v76;
  void *aBlock[2];
  void (*v78)(uint64_t, QMIServiceMsg *);
  void *v79;
  void **v80;

  v5 = a3;
  v69 = a3;
  if (!*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(aBlock, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)aBlock);
    if (!a1)
      __cxa_bad_typeid();
    v9 = v8;
    v10 = *(_QWORD **)(v8 + 8);
    v11 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
    *(_BYTE *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"sessionSetStreamDirectionReq", 28);
    *(_BYTE *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" session is null", 16);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (SHIBYTE(v78) < 0)
      operator delete(aBlock[0]);
    if (SHIBYTE(v71) < 0)
      operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(aBlock, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v12 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)aBlock);
  if (!a1)
    __cxa_bad_typeid();
  v13 = v12;
  v14 = *(_QWORD **)(v12 + 8);
  v15 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v15);
  *(_BYTE *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"sessionSetStreamDirectionReq", 28);
  *(_BYTE *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(*a2 + 24) + 176))(*a2 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" direction=", 11);
  *(_BYTE *)(v13 + 17) = 0;
  ims::toString<ms::MediaServiceDirection>(&v69, (std::string *)&v67);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v13 + 32))(v13, &v67);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  if (SBYTE7(v68) < 0)
    operator delete((void *)v67);
  if (SHIBYTE(v78) < 0)
    operator delete(aBlock[0]);
  if (SHIBYTE(v71) < 0)
    operator delete(__p[0]);
  v67 = 0u;
  v68 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v67);
  v16 = (void *)MEMORY[0x1E0C809B0];
  v62[0] = MEMORY[0x1E0C809B0];
  v62[1] = 1174405120;
  v63 = ___ZN19QMIRTPCommandDriver28sessionSetStreamDirectionReqENSt3__110shared_ptrI13QMIRTPSessionEEN2ms21MediaServiceDirectionEb_block_invoke;
  v64 = &__block_descriptor_tmp_89;
  v17 = (std::__shared_weak_count *)a2[1];
  v65 = *a2;
  v66 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v20 = qmi::MutableMessageBase::getTLV<ms::tlv::RTPSessionIdentifier>(&v67, 1);
  v63((uint64_t)v62, (_BYTE *)v20);
  v57[0] = v16;
  v57[1] = 0x40000000;
  v58 = ___ZN19QMIRTPCommandDriver28sessionSetStreamDirectionReqENSt3__110shared_ptrI13QMIRTPSessionEEN2ms21MediaServiceDirectionEb_block_invoke_90;
  v59 = &__block_descriptor_tmp_92;
  v61 = a4;
  v60 = v5;
  v21 = (const void **)*((_QWORD *)&v67 + 1);
  if (*((_QWORD *)&v67 + 1) != (_QWORD)v68)
  {
    while (*((_BYTE *)*v21 + 8) != 2)
    {
      if (++v21 == (const void **)v68)
        goto LABEL_24;
    }
  }
  if (v21 == (const void **)v68)
  {
LABEL_24:
    v23 = operator new();
    v24 = v23;
    *(_BYTE *)(v23 + 8) = 2;
    *(_QWORD *)v23 = &off_1E78D5940;
    *(_DWORD *)(v23 + 12) = 0;
    v25 = (_DWORD *)(v23 + 12);
    v26 = v68;
    if ((unint64_t)v68 >= *((_QWORD *)&v68 + 1))
    {
      v28 = (uint64_t)(v68 - *((_QWORD *)&v67 + 1)) >> 3;
      if ((unint64_t)(v28 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v29 = (uint64_t)(*((_QWORD *)&v68 + 1) - *((_QWORD *)&v67 + 1)) >> 2;
      if (v29 <= v28 + 1)
        v29 = v28 + 1;
      if (*((_QWORD *)&v68 + 1) - *((_QWORD *)&v67 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v29;
      if (v30)
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v68 + 8, v30);
      else
        v31 = 0;
      v32 = (uint64_t *)&v31[8 * v28];
      v33 = &v31[8 * v30];
      *v32 = v24;
      v27 = v32 + 1;
      v35 = (char *)*((_QWORD *)&v67 + 1);
      v34 = (char *)v68;
      if ((_QWORD)v68 != *((_QWORD *)&v67 + 1))
      {
        do
        {
          v36 = *((_QWORD *)v34 - 1);
          v34 -= 8;
          *--v32 = v36;
        }
        while (v34 != v35);
        v34 = (char *)*((_QWORD *)&v67 + 1);
      }
      *((_QWORD *)&v67 + 1) = v32;
      *(_QWORD *)&v68 = v27;
      *((_QWORD *)&v68 + 1) = v33;
      if (v34)
        operator delete(v34);
    }
    else
    {
      *(_QWORD *)v68 = v23;
      v27 = (_QWORD *)(v26 + 8);
    }
    *(_QWORD *)&v68 = v27;
    v58((uint64_t)v57, v25);
  }
  else
  {
    if (!v22)
      __cxa_bad_cast();
    ___ZN19QMIRTPCommandDriver28sessionSetStreamDirectionReqENSt3__110shared_ptrI13QMIRTPSessionEEN2ms21MediaServiceDirectionEb_block_invoke_90((uint64_t)v57, v22 + 3);
  }
  if (QMIRTPCommandDriver::getInstanceType(a1, (void **)(*a2 + 80)))
  {
    v37 = qmi::ClientRouter::get();
    v38 = operator new();
    *(_QWORD *)v38 = v37;
    *(_QWORD *)(v38 + 8) = QMIServiceMsg::create();
    *(_DWORD *)(v38 + 16) = 25000;
    *(_QWORD *)(v38 + 24) = 0;
    *(_QWORD *)(v38 + 32) = 0;
    v56 = v38;
    v39 = *a2;
    v40 = a2[1];
    if (v40)
    {
      v41 = (unint64_t *)(v40 + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v43 = operator new(0x38uLL);
    v43[1] = 0;
    v44 = v43 + 1;
    v43[2] = 0;
    *v43 = &off_1E78D59A8;
    v43[3] = a1;
    v43[4] = v39;
    v43[5] = v40;
    *((_DWORD *)v43 + 12) = v5;
    v75 = (char *)(v43 + 3);
    v76 = (std::__shared_weak_count *)v43;
    __p[0] = v16;
    __p[1] = (void *)1174405120;
    v71 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver28sessionSetStreamDirectionReqENSt3__110shared_ptrI13QMIRTPSessionEEN2ms21MediaServiceDirectionEbE3__0EEOS1_OT__block_invoke;
    v72 = &__block_descriptor_tmp_281;
    v73 = (char *)(v43 + 3);
    v74 = (std::__shared_weak_count *)v43;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    aBlock[0] = v16;
    aBlock[1] = (void *)0x40000000;
    v78 = ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms25SessionSetStreamDirection8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    v79 = &unk_1E78D59F0;
    v80 = __p;
    *(_QWORD *)(v38 + 32) = _Block_copy(aBlock);
    v46 = v74;
    if (v74)
    {
      v47 = (unint64_t *)&v74->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = v76;
    if (v76)
    {
      v50 = (unint64_t *)&v76->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = v56;
    v56 = 0;
    if (v52)
      std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v56, v52);
    v5 = v69;
  }
  if (v5 <= 3)
    QMIRTPCommandDriver::sendAudioCallEvent((uint64_t)a1, *(_BYTE *)(*a2 + 482), (void **)(*a2 + 80), (v5 + 16), *(unsigned __int8 *)(*a2 + 488));
  v53 = v66;
  if (v66)
  {
    v54 = (unint64_t *)&v66->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v67);
}

void sub_1BF03F3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN19QMIRTPCommandDriver28sessionSetStreamDirectionReqENSt3__110shared_ptrI13QMIRTPSessionEEN2ms21MediaServiceDirectionEb_block_invoke(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(*(_QWORD *)(result + 32) + 482);
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver28sessionSetStreamDirectionReqENSt3__110shared_ptrI13QMIRTPSessionEEN2ms21MediaServiceDirectionEb_block_invoke_90(uint64_t result, _DWORD *a2)
{
  int v3;

  if (*(_DWORD *)(result + 32) != 2 || *(_BYTE *)(result + 36) == 0)
    v3 = *(_DWORD *)(result + 32);
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void QMIRTPCommandDriver::sendAudioCallEvent(uint64_t a1, char a2, void **a3, unsigned int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  const char *v14;
  size_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  void *ProfileByStackId;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  const void **v24;
  const void **v25;
  const void **v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  const void **v38;
  char *v39;
  char *v40;
  char *v41;
  const void *v42;
  char v43;
  char *v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  _QWORD v62[5];
  void *__p;
  uint64_t v64;
  int v65;
  char v66;
  uint64_t v67;
  void *v68;
  void *v69[2];
  __int128 v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  void *aBlock[2];
  void (*v74)(uint64_t, QMIServiceMsg *);
  void *v75;
  _QWORD *v76;

  std::string::basic_string[abi:ne180100]<0>(aBlock, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::debug(ims::_logger, (uint64_t)aBlock, (uint64_t)&__p);
  if (!a1)
    __cxa_bad_typeid();
  v11 = v10;
  v12 = *(_QWORD **)(v10 + 8);
  v13 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v13);
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"sendAudioCallEvent", 18);
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" [event=", 8);
  *(_BYTE *)(v11 + 17) = 0;
  v14 = audio::asString(a4);
  v15 = strlen(v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)v14, v15);
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  if (v66 < 0)
    operator delete(__p);
  if (SHIBYTE(v74) < 0)
    operator delete(aBlock[0]);
  if (*(_BYTE *)(a1 + 24))
  {
    v71 = 0;
    v72 = 0;
    v16 = *(std::__shared_weak_count **)(a1 + 136);
    if (v16)
    {
      v17 = std::__shared_weak_count::lock(v16);
      v72 = v17;
      if (v17)
      {
        v18 = *(_QWORD *)(a1 + 128);
        v71 = v18;
        if (v18)
        {
          ProfileByStackId = QMIRTPStackController::getProfileByStackId(v18, a3);
          if ((v20 & 0xFF00000000) == 0)
          {
            std::string::basic_string[abi:ne180100]<0>(aBlock, "rtp.qmidriver");
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v31 = ImsLogger::error(ims::_logger, (uint64_t)aBlock, (uint64_t)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)"No profile associated with stack ", 33);
            *(_BYTE *)(v31 + 17) = 0;
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v31 + 32))(v31, a3);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v31 + 17) = 0;
            if (v66 < 0)
              operator delete(__p);
            if (SHIBYTE(v74) < 0)
              operator delete(aBlock[0]);
            goto LABEL_87;
          }
          v21 = (unint64_t)ProfileByStackId;
          std::string::basic_string[abi:ne180100]<0>(aBlock, "rtp.qmidriver");
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v22 = ImsLogger::debug(ims::_logger, (uint64_t)aBlock, (uint64_t)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"Using VoiceSystemId ", 20);
          v23 = HIDWORD(v21);
          *(_BYTE *)(v22 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v22 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)" for stack ", 11);
          *(_BYTE *)(v22 + 17) = 0;
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v22 + 32))(v22, a3);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v22 + 17) = 0;
          if (v66 < 0)
            operator delete(__p);
          if (SHIBYTE(v74) < 0)
            operator delete(aBlock[0]);
          *(_OWORD *)v69 = 0u;
          v70 = 0u;
          qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v69);
          v25 = (const void **)v69[1];
          v24 = (const void **)v70;
          v26 = (const void **)v69[1];
          if (v69[1] != (void *)v70)
          {
            v26 = (const void **)v69[1];
            while (*((_BYTE *)*v26 + 8) != 1)
            {
              if (++v26 == (const void **)v70)
                goto LABEL_38;
            }
          }
          if (v26 == (const void **)v70)
          {
LABEL_38:
            v32 = operator new();
            v30 = (_BYTE *)v32;
            *(_QWORD *)v32 = &off_1E78D6290;
            *(_DWORD *)(v32 + 8) = 1;
            v33 = v70;
            if ((unint64_t)v70 >= *((_QWORD *)&v70 + 1))
            {
              v34 = (uint64_t)(v70 - (unint64_t)v69[1]) >> 3;
              if ((unint64_t)(v34 + 1) >> 61)
                goto LABEL_93;
              v35 = (uint64_t)(*((_QWORD *)&v70 + 1) - (unint64_t)v69[1]) >> 2;
              if (v35 <= v34 + 1)
                v35 = v34 + 1;
              if (*((_QWORD *)&v70 + 1) - (unint64_t)v69[1] >= 0x7FFFFFFFFFFFFFF8)
                v36 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v36 = v35;
              if (v36)
                v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v70 + 8, v36);
              else
                v37 = 0;
              v38 = (const void **)&v37[8 * v34];
              v39 = &v37[8 * v36];
              *v38 = v30;
              v24 = v38 + 1;
              v41 = (char *)v69[1];
              v40 = (char *)v70;
              if ((void *)v70 != v69[1])
              {
                do
                {
                  v42 = (const void *)*((_QWORD *)v40 - 1);
                  v40 -= 8;
                  *--v38 = v42;
                }
                while (v40 != v41);
                v40 = (char *)v69[1];
              }
              v69[1] = v38;
              *(_QWORD *)&v70 = v24;
              *((_QWORD *)&v70 + 1) = v39;
              if (v40)
                operator delete(v40);
            }
            else
            {
              *(_QWORD *)v70 = v32;
              v24 = (const void **)(v33 + 8);
            }
            *(_QWORD *)&v70 = v24;
            v25 = (const void **)v69[1];
          }
          else
          {
            if (!v29)
              goto LABEL_94;
            v30 = v29;
          }
          v30[9] = a4;
          if (a5)
            v43 = 9;
          else
            v43 = 2;
          v30[10] = v43;
          v30[11] = a2;
          while (1)
          {
            if (v25 == v24)
              goto LABEL_65;
            if (*((_BYTE *)*v25 + 8) == 16)
              break;
            ++v25;
          }
          if (v25 != v24)
          {
            if (v44)
            {
              v45 = v44 + 12;
LABEL_82:
              *v45 = v23;
              __p = (void *)(a1 + 48);
              v64 = QMIServiceMsg::create();
              v65 = 25000;
              v67 = 0;
              v68 = 0;
              v62[0] = MEMORY[0x1E0C809B0];
              v62[1] = 0x40000000;
              v62[2] = ___ZN19QMIRTPCommandDriver18sendAudioCallEventEhRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5audio5EventEb_block_invoke_3;
              v62[3] = &__block_descriptor_tmp_207;
              v62[4] = a1;
              aBlock[0] = (void *)MEMORY[0x1E0C809B0];
              aBlock[1] = (void *)0x40000000;
              v74 = ___ZNO3qmi6Client9SendProxy8callbackIRKN5audio13SendCallEvent8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
              v75 = &unk_1E78D6310;
              v76 = v62;
              v59 = _Block_copy(aBlock);
              v68 = v59;
              if (v64)
              {
                qmi::Client::send();
                v59 = v68;
              }
              if (v59)
                _Block_release(v59);
              qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v69);
LABEL_87:
              p_shared_owners = (unint64_t *)&v17->__shared_owners_;
              do
                v61 = __ldaxr(p_shared_owners);
              while (__stlxr(v61 - 1, p_shared_owners));
              if (!v61)
              {
                ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                std::__shared_weak_count::__release_weak(v17);
              }
              return;
            }
LABEL_94:
            __cxa_bad_cast();
          }
LABEL_65:
          v46 = operator new();
          v47 = v46;
          *(_BYTE *)(v46 + 8) = 16;
          *(_QWORD *)v46 = &off_1E78D62E0;
          *(_DWORD *)(v46 + 12) = 0;
          v45 = (_DWORD *)(v46 + 12);
          v48 = v70;
          if ((unint64_t)v70 < *((_QWORD *)&v70 + 1))
          {
            *(_QWORD *)v70 = v46;
            v49 = (_QWORD *)(v48 + 8);
LABEL_81:
            *(_QWORD *)&v70 = v49;
            goto LABEL_82;
          }
          v50 = (uint64_t)(v70 - (unint64_t)v69[1]) >> 3;
          if (!((unint64_t)(v50 + 1) >> 61))
          {
            v51 = (uint64_t)(*((_QWORD *)&v70 + 1) - (unint64_t)v69[1]) >> 2;
            if (v51 <= v50 + 1)
              v51 = v50 + 1;
            if (*((_QWORD *)&v70 + 1) - (unint64_t)v69[1] >= 0x7FFFFFFFFFFFFFF8)
              v52 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v52 = v51;
            if (v52)
              v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v70 + 8, v52);
            else
              v53 = 0;
            v54 = (uint64_t *)&v53[8 * v50];
            v55 = &v53[8 * v52];
            *v54 = v47;
            v49 = v54 + 1;
            v57 = (char *)v69[1];
            v56 = (char *)v70;
            if ((void *)v70 != v69[1])
            {
              do
              {
                v58 = *((_QWORD *)v56 - 1);
                v56 -= 8;
                *--v54 = v58;
              }
              while (v56 != v57);
              v56 = (char *)v69[1];
            }
            v69[1] = v54;
            *(_QWORD *)&v70 = v49;
            *((_QWORD *)&v70 + 1) = v55;
            if (v56)
              operator delete(v56);
            goto LABEL_81;
          }
LABEL_93:
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        }
      }
    }
    else
    {
      v17 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(aBlock, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v28 = ImsLogger::error(ims::_logger, (uint64_t)aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"No controller associated with this command driver!", 50);
    *(_BYTE *)(v28 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v28 + 17) = 0;
    if (v66 < 0)
      operator delete(__p);
    if (SHIBYTE(v74) < 0)
      operator delete(aBlock[0]);
    if (v17)
      goto LABEL_87;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(aBlock, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v27 = ImsLogger::error(ims::_logger, (uint64_t)aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"SVC_AUDIO service is not initialized.", 37);
    *(_BYTE *)(v27 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v27 + 17) = 0;
    if (v66 < 0)
      operator delete(__p);
    if (SHIBYTE(v74) < 0)
      operator delete(aBlock[0]);
  }
}

void sub_1BF03FD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void ___ZN19QMIRTPCommandDriver35handleSessionSetStreamDirectionRespERKN2ms25SessionSetStreamDirection8ResponseENSt3__110shared_ptrI13QMIRTPSessionEENS0_21MediaServiceDirectionE_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::string::size_type v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  uint64_t v60;
  const char *v61;
  size_t v62;
  std::__shared_weak_count *size;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  uint64_t v83;
  const char *v84;
  size_t v85;
  unint64_t *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::string __p;
  void *v102[2];
  char v103;
  void *v104;
  std::__shared_weak_count *v105;
  char v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  _QWORD *v109;
  std::__shared_weak_count *v110;

  v2 = *(_QWORD **)(a1 + 32);
  if (*(_DWORD *)(a1 + 56))
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    v3 = (std::__shared_weak_count *)v2[17];
    if (v3)
    {
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v3);
      if (__p.__r_.__value_.__l.__size_)
      {
        v4 = v2[16];
        __p.__r_.__value_.__r.__words[0] = v4;
        if (v4)
        {
          switch(*(_DWORD *)(a1 + 60))
          {
            case 0:
              v5 = *(_QWORD **)(v4 + 48);
              v6 = *(std::__shared_weak_count **)(v4 + 56);
              v104 = v5;
              v105 = v6;
              if (v6)
              {
                p_shared_owners = (unint64_t *)&v6->__shared_owners_;
                do
                  v8 = __ldxr(p_shared_owners);
                while (__stxr(v8 + 1, p_shared_owners));
              }
              v9 = v5[37];
              if (v9)
                AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v9 + 120), 8);
              if (v6)
              {
                v10 = (unint64_t *)&v6->__shared_owners_;
                do
                  v11 = __ldaxr(v10);
                while (__stlxr(v11 - 1, v10));
                if (!v11)
                {
                  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                  std::__shared_weak_count::__release_weak(v6);
                }
              }
              v12 = *(std::__shared_weak_count **)(a1 + 48);
              v93 = *(_QWORD *)(a1 + 40);
              v94 = v12;
              if (v12)
              {
                v13 = (unint64_t *)&v12->__shared_owners_;
                do
                  v14 = __ldxr(v13);
                while (__stxr(v14 + 1, v13));
              }
              QMIRTPStackController::sessionDidStop(__p.__r_.__value_.__l.__data_, &v93, 4);
              v15 = v94;
              if (v94)
              {
                v16 = (unint64_t *)&v94->__shared_owners_;
                do
                  v17 = __ldaxr(v16);
                while (__stlxr(v17 - 1, v16));
                goto LABEL_84;
              }
              break;
            case 1:
              v27 = *(_QWORD **)(v4 + 48);
              v28 = *(std::__shared_weak_count **)(v4 + 56);
              v104 = v27;
              v105 = v28;
              if (v28)
              {
                v29 = (unint64_t *)&v28->__shared_owners_;
                do
                  v30 = __ldxr(v29);
                while (__stxr(v30 + 1, v29));
              }
              v31 = v27[37];
              if (v31)
                AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v31 + 120), 10);
              if (v28)
              {
                v32 = (unint64_t *)&v28->__shared_owners_;
                do
                  v33 = __ldaxr(v32);
                while (__stlxr(v33 - 1, v32));
                if (!v33)
                {
                  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                  std::__shared_weak_count::__release_weak(v28);
                }
              }
              v34 = *(std::__shared_weak_count **)(a1 + 48);
              v91 = *(_QWORD *)(a1 + 40);
              v92 = v34;
              if (v34)
              {
                v35 = (unint64_t *)&v34->__shared_owners_;
                do
                  v36 = __ldxr(v35);
                while (__stxr(v36 + 1, v35));
              }
              QMIRTPStackController::sessionDirectionChangeFailed(__p.__r_.__value_.__l.__data_, &v91);
              v15 = v92;
              if (v92)
              {
                v37 = (unint64_t *)&v92->__shared_owners_;
                do
                  v17 = __ldaxr(v37);
                while (__stlxr(v17 - 1, v37));
                goto LABEL_84;
              }
              break;
            case 2:
              v38 = *(_QWORD **)(v4 + 48);
              v39 = *(std::__shared_weak_count **)(v4 + 56);
              v104 = v38;
              v105 = v39;
              if (v39)
              {
                v40 = (unint64_t *)&v39->__shared_owners_;
                do
                  v41 = __ldxr(v40);
                while (__stxr(v41 + 1, v40));
              }
              v42 = v38[37];
              if (v42)
                AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v42 + 120), 9);
              if (v39)
              {
                v43 = (unint64_t *)&v39->__shared_owners_;
                do
                  v44 = __ldaxr(v43);
                while (__stlxr(v44 - 1, v43));
                if (!v44)
                {
                  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                  std::__shared_weak_count::__release_weak(v39);
                }
              }
              v45 = *(std::__shared_weak_count **)(a1 + 48);
              v89 = *(_QWORD *)(a1 + 40);
              v90 = v45;
              if (v45)
              {
                v46 = (unint64_t *)&v45->__shared_owners_;
                do
                  v47 = __ldxr(v46);
                while (__stxr(v47 + 1, v46));
              }
              QMIRTPStackController::sessionDirectionChangeFailed(__p.__r_.__value_.__l.__data_, &v89);
              v15 = v90;
              if (v90)
              {
                v48 = (unint64_t *)&v90->__shared_owners_;
                do
                  v17 = __ldaxr(v48);
                while (__stlxr(v17 - 1, v48));
                goto LABEL_84;
              }
              break;
            case 3:
              v49 = *(_QWORD **)(v4 + 48);
              v50 = *(std::__shared_weak_count **)(v4 + 56);
              v104 = v49;
              v105 = v50;
              if (v50)
              {
                v51 = (unint64_t *)&v50->__shared_owners_;
                do
                  v52 = __ldxr(v51);
                while (__stxr(v52 + 1, v51));
              }
              v53 = v49[37];
              if (v53)
                AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v53 + 120), 7);
              if (v50)
              {
                v54 = (unint64_t *)&v50->__shared_owners_;
                do
                  v55 = __ldaxr(v54);
                while (__stlxr(v55 - 1, v54));
                if (!v55)
                {
                  ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                  std::__shared_weak_count::__release_weak(v50);
                }
              }
              v56 = *(std::__shared_weak_count **)(a1 + 48);
              v87 = *(_QWORD *)(a1 + 40);
              v88 = v56;
              if (v56)
              {
                v57 = (unint64_t *)&v56->__shared_owners_;
                do
                  v58 = __ldxr(v57);
                while (__stxr(v58 + 1, v57));
              }
              QMIRTPStackController::sessionDidStart(__p.__r_.__value_.__l.__data_, &v87, 4);
              v15 = v88;
              if (v88)
              {
                v59 = (unint64_t *)&v88->__shared_owners_;
                do
                  v17 = __ldaxr(v59);
                while (__stlxr(v17 - 1, v59));
LABEL_84:
                if (!v17)
                {
                  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                  std::__shared_weak_count::__release_weak(v15);
                }
              }
              break;
            default:
              std::string::basic_string[abi:ne180100]<0>(&v104, "rtp.qmidriver");
              std::string::basic_string[abi:ne180100]<0>(v102, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v60 = ImsLogger::error(ims::_logger, (uint64_t)&v104, (uint64_t)v102);
              v61 = (const char *)(*(_QWORD *)(*(_QWORD *)(*v2 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
              v62 = strlen(v61);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v60 + 8), (uint64_t)v61, v62);
              *(_BYTE *)(v60 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v60 + 8), (uint64_t)"::", 2);
              *(_BYTE *)(v60 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v60 + 8), (uint64_t)"handleSessionSetStreamDirectionResp_block_invoke", 48);
              *(_BYTE *)(v60 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v60 + 8), (uint64_t)" [direction=", 12);
              *(_BYTE *)(v60 + 17) = 0;
              std::ostream::operator<<();
              *(_BYTE *)(v60 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v60 + 8), (uint64_t)"]", 1);
              *(_BYTE *)(v60 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v60 + 64))(v60, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v60 + 17) = 0;
              if (v103 < 0)
                operator delete(v102[0]);
              if (v106 < 0)
                operator delete(v104);
              break;
          }
        }
      }
    }
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v64 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
LABEL_135:
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  else
  {
    v109 = 0;
    v110 = 0;
    v18 = (std::__shared_weak_count *)v2[17];
    if (v18)
    {
      v110 = std::__shared_weak_count::lock(v18);
      if (v110)
      {
        v19 = (_QWORD *)v2[16];
        v109 = v19;
        if (v19)
        {
          switch(*(_DWORD *)(a1 + 60))
          {
            case 0:
              v20 = *(_QWORD *)(a1 + 40);
              *(_BYTE *)(v20 + 553) = 1;
              v21 = *(std::__shared_weak_count **)(a1 + 48);
              v107 = v20;
              v108 = v21;
              if (v21)
              {
                v22 = (unint64_t *)&v21->__shared_owners_;
                do
                  v23 = __ldxr(v22);
                while (__stxr(v23 + 1, v22));
              }
              QMIRTPStackController::sessionDidStop(v19, &v107, *(_DWORD *)(a1 + 56));
              v24 = v108;
              if (v108)
              {
                v25 = (unint64_t *)&v108->__shared_owners_;
                do
                  v26 = __ldaxr(v25);
                while (__stlxr(v26 - 1, v25));
                goto LABEL_126;
              }
              break;
            case 1:
              std::string::basic_string[abi:ne180100]<0>(&v104, "rtp.qmidriver");
              std::string::basic_string[abi:ne180100]<0>(v102, "");
              v66 = ims::debug((uint64_t)&v104, (uint64_t)v102);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v66 + 8), (uint64_t)" [session=", 10);
              *(_BYTE *)(v66 + 17) = 0;
              (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 176))(*(_QWORD *)(a1 + 40) + 24);
              std::ostream::operator<<();
              *(_BYTE *)(v66 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v66 + 8), (uint64_t)" direction=", 11);
              *(_BYTE *)(v66 + 17) = 0;
              ims::toString<ms::MediaServiceDirection>((unsigned int *)(a1 + 60), &__p);
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v66 + 32))(v66, &__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v66 + 8), (uint64_t)"]", 1);
              *(_BYTE *)(v66 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v66 + 64))(v66, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v66 + 17) = 0;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v103 < 0)
                operator delete(v102[0]);
              if (v106 < 0)
                operator delete(v104);
              v67 = *(_QWORD *)(a1 + 40);
              *(_BYTE *)(v67 + 553) = 1;
              v68 = *(std::__shared_weak_count **)(a1 + 48);
              v99 = v67;
              v100 = v68;
              if (v68)
              {
                v69 = (unint64_t *)&v68->__shared_owners_;
                do
                  v70 = __ldxr(v69);
                while (__stxr(v70 + 1, v69));
              }
              QMIRTPStackController::sessionDidStart(v19, &v99, *(_DWORD *)(a1 + 56));
              v24 = v100;
              if (v100)
              {
                v71 = (unint64_t *)&v100->__shared_owners_;
                do
                  v26 = __ldaxr(v71);
                while (__stlxr(v26 - 1, v71));
                goto LABEL_126;
              }
              break;
            case 2:
              std::string::basic_string[abi:ne180100]<0>(&v104, "rtp.qmidriver");
              std::string::basic_string[abi:ne180100]<0>(v102, "");
              v72 = ims::debug((uint64_t)&v104, (uint64_t)v102);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v72 + 8), (uint64_t)" [session=", 10);
              *(_BYTE *)(v72 + 17) = 0;
              (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 176))(*(_QWORD *)(a1 + 40) + 24);
              std::ostream::operator<<();
              *(_BYTE *)(v72 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v72 + 8), (uint64_t)" direction=", 11);
              *(_BYTE *)(v72 + 17) = 0;
              ims::toString<ms::MediaServiceDirection>((unsigned int *)(a1 + 60), &__p);
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v72 + 32))(v72, &__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v72 + 8), (uint64_t)"]", 1);
              *(_BYTE *)(v72 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v72 + 64))(v72, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v72 + 17) = 0;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v103 < 0)
                operator delete(v102[0]);
              if (v106 < 0)
                operator delete(v104);
              v73 = *(_QWORD *)(a1 + 40);
              *(_BYTE *)(v73 + 553) = 1;
              v74 = *(std::__shared_weak_count **)(a1 + 48);
              v97 = v73;
              v98 = v74;
              if (v74)
              {
                v75 = (unint64_t *)&v74->__shared_owners_;
                do
                  v76 = __ldxr(v75);
                while (__stxr(v76 + 1, v75));
              }
              QMIRTPStackController::sessionDidStart(v19, &v97, *(_DWORD *)(a1 + 56));
              v24 = v98;
              if (v98)
              {
                v77 = (unint64_t *)&v98->__shared_owners_;
                do
                  v26 = __ldaxr(v77);
                while (__stlxr(v26 - 1, v77));
                goto LABEL_126;
              }
              break;
            case 3:
              v78 = *(_QWORD *)(a1 + 40);
              *(_BYTE *)(v78 + 553) = 0;
              v79 = *(std::__shared_weak_count **)(a1 + 48);
              v95 = v78;
              v96 = v79;
              if (v79)
              {
                v80 = (unint64_t *)&v79->__shared_owners_;
                do
                  v81 = __ldxr(v80);
                while (__stxr(v81 + 1, v80));
              }
              QMIRTPStackController::sessionDidStart(v19, &v95, *(_DWORD *)(a1 + 56));
              v24 = v96;
              if (v96)
              {
                v82 = (unint64_t *)&v96->__shared_owners_;
                do
                  v26 = __ldaxr(v82);
                while (__stlxr(v26 - 1, v82));
LABEL_126:
                if (!v26)
                {
                  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                  std::__shared_weak_count::__release_weak(v24);
                }
              }
              break;
            default:
              std::string::basic_string[abi:ne180100]<0>(&v104, "rtp.qmidriver");
              std::string::basic_string[abi:ne180100]<0>(v102, "");
              v83 = ims::error((uint64_t)&v104, (uint64_t)v102);
              v84 = (const char *)(*(_QWORD *)(*(_QWORD *)(*v2 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
              v85 = strlen(v84);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v83 + 8), (uint64_t)v84, v85);
              *(_BYTE *)(v83 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v83 + 8), (uint64_t)"::", 2);
              *(_BYTE *)(v83 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v83 + 8), (uint64_t)"handleSessionSetStreamDirectionResp_block_invoke", 48);
              *(_BYTE *)(v83 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v83 + 8), (uint64_t)" [direction=", 12);
              *(_BYTE *)(v83 + 17) = 0;
              std::ostream::operator<<();
              *(_BYTE *)(v83 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v83 + 8), (uint64_t)"]", 1);
              *(_BYTE *)(v83 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v83 + 64))(v83, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v83 + 17) = 0;
              if (v103 < 0)
                operator delete(v102[0]);
              if (v106 < 0)
                operator delete(v104);
              break;
          }
        }
      }
    }
    size = v110;
    if (v110)
    {
      v86 = (unint64_t *)&v110->__shared_owners_;
      do
        v65 = __ldaxr(v86);
      while (__stlxr(v65 - 1, v86));
      goto LABEL_135;
    }
  }
}

void sub_1BF0407E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (*(char *)(v29 - 81) < 0)
    operator delete(*(void **)(v29 - 104));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v29 - 64);
  _Unwind_Resume(a1);
}

void QMIRTPCommandDriver::configureRTCPReportsReq(std::__shared_weak_count_vtbl *a1, uint64_t *a2, int a3, char a4, uint64_t a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  size_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  const void **v27;
  char *v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  const void **v43;
  _WORD *v44;
  uint64_t v45;
  uint64_t v46;
  _WORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  const void **v62;
  char *v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD v104[2];
  void (*v105)(uint64_t, int *);
  void *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  char v109;
  char v110;
  _QWORD v111[2];
  void (*v112)(uint64_t, _WORD *);
  void *v113;
  __int16 v114;
  _QWORD v115[2];
  void (*v116)(uint64_t, _WORD *);
  void *v117;
  uint64_t *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  char v121;
  char v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  int v126;
  _QWORD v127[2];
  uint64_t (*v128)(uint64_t, _BYTE *);
  void *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  __int128 v132;
  __int128 v133;
  void *v134[2];
  void (*v135)(uint64_t, unsigned __int16 *);
  void *v136;
  _QWORD *v137;
  std::__shared_weak_count *v138;
  _QWORD *v139;
  std::__shared_weak_count *v140;
  void *aBlock[2];
  void (*v142)(uint64_t, QMIServiceMsg *);
  void *v143;
  void **v144;

  if (!*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v134, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(aBlock, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::error(ims::_logger, (uint64_t)v134, (uint64_t)aBlock);
    if (!a1)
      __cxa_bad_typeid();
    v12 = v11;
    v13 = *(_QWORD **)(v11 + 8);
    v14 = strlen((const char *)(*(_QWORD *)(*((_QWORD *)a1->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, *(_QWORD *)(*((_QWORD *)a1->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL, v14);
    *(_BYTE *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"configureRTCPReportsReq", 23);
    *(_BYTE *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)" session is null", 16);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    if (SHIBYTE(v142) < 0)
      operator delete(aBlock[0]);
    if (SHIBYTE(v135) < 0)
      operator delete(v134[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v134, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(aBlock, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v15 = ImsLogger::debug(ims::_logger, (uint64_t)v134, (uint64_t)aBlock);
  if (!a1)
    __cxa_bad_typeid();
  v16 = v15;
  v17 = *(_QWORD **)(v15 + 8);
  v18 = strlen((const char *)(*(_QWORD *)(*((_QWORD *)a1->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, *(_QWORD *)(*((_QWORD *)a1->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL, v18);
  *(_BYTE *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"configureRTCPReportsReq", 23);
  *(_BYTE *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v16 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(*a2 + 24) + 176))(*a2 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" enable=", 8);
  *(_BYTE *)(v16 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" local=", 7);
  *(_BYTE *)(v16 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" interval=", 10);
  *(_BYTE *)(v16 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" xrInterval=", 12);
  *(_BYTE *)(v16 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" rtcpInterval()=", 16);
  *(_BYTE *)(v16 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" localRTCPReportInterval()=", 27);
  *(_BYTE *)(v16 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v16 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v16 + 17) = 0;
  if (SHIBYTE(v142) < 0)
    operator delete(aBlock[0]);
  if (SHIBYTE(v135) < 0)
    operator delete(v134[0]);
  v132 = 0u;
  v133 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v132);
  v19 = (void *)MEMORY[0x1E0C809B0];
  v127[0] = MEMORY[0x1E0C809B0];
  v127[1] = 1174405120;
  v128 = ___ZN19QMIRTPCommandDriver23configureRTCPReportsReqENSt3__110shared_ptrI13QMIRTPSessionEEbbtt_block_invoke;
  v129 = &__block_descriptor_tmp_102_0;
  v20 = (std::__shared_weak_count *)a2[1];
  v130 = *a2;
  v131 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  v23 = qmi::MutableMessageBase::getTLV<ms::tlv::RTPSessionIdentifier>(&v132, 1);
  v128((uint64_t)v127, (_BYTE *)v23);
  v123 = 0;
  v124 = &v123;
  v125 = 0x2000000000;
  v126 = 0;
  v115[0] = v19;
  v115[1] = 1174405120;
  v116 = ___ZN19QMIRTPCommandDriver23configureRTCPReportsReqENSt3__110shared_ptrI13QMIRTPSessionEEbbtt_block_invoke_103;
  v117 = &unk_1E78D4418;
  v121 = a3;
  v122 = a4;
  v24 = (std::__shared_weak_count *)a2[1];
  v119 = *a2;
  v120 = v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v118 = &v123;
  v27 = (const void **)*((_QWORD *)&v132 + 1);
  if (*((_QWORD *)&v132 + 1) != (_QWORD)v133)
  {
    while (*((_BYTE *)*v27 + 8) != 16)
    {
      if (++v27 == (const void **)v133)
        goto LABEL_25;
    }
  }
  if (v27 == (const void **)v133)
  {
LABEL_25:
    v30 = operator new();
    v31 = v30;
    *(_BYTE *)(v30 + 8) = 16;
    *(_QWORD *)v30 = &off_1E78D5A38;
    *(_WORD *)(v30 + 10) = 0;
    v29 = (_WORD *)(v30 + 10);
    v32 = v133;
    if ((unint64_t)v133 >= *((_QWORD *)&v133 + 1))
    {
      v34 = (uint64_t)(v133 - *((_QWORD *)&v132 + 1)) >> 3;
      if ((unint64_t)(v34 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v35 = (uint64_t)(*((_QWORD *)&v133 + 1) - *((_QWORD *)&v132 + 1)) >> 2;
      if (v35 <= v34 + 1)
        v35 = v34 + 1;
      if (*((_QWORD *)&v133 + 1) - *((_QWORD *)&v132 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
        v36 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v36 = v35;
      if (v36)
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v133 + 8, v36);
      else
        v37 = 0;
      v38 = (uint64_t *)&v37[8 * v34];
      v39 = &v37[8 * v36];
      *v38 = v31;
      v33 = v38 + 1;
      v41 = (char *)*((_QWORD *)&v132 + 1);
      v40 = (char *)v133;
      if ((_QWORD)v133 != *((_QWORD *)&v132 + 1))
      {
        do
        {
          v42 = *((_QWORD *)v40 - 1);
          v40 -= 8;
          *--v38 = v42;
        }
        while (v40 != v41);
        v40 = (char *)*((_QWORD *)&v132 + 1);
      }
      *((_QWORD *)&v132 + 1) = v38;
      *(_QWORD *)&v133 = v33;
      *((_QWORD *)&v133 + 1) = v39;
      if (v40)
        operator delete(v40);
    }
    else
    {
      *(_QWORD *)v133 = v30;
      v33 = (_QWORD *)(v32 + 8);
    }
    *(_QWORD *)&v133 = v33;
  }
  else
  {
    if (!v28)
      __cxa_bad_cast();
    v29 = v28 + 10;
  }
  v116((uint64_t)v115, v29);
  if (a6 && a3 && *((_DWORD *)v124 + 6))
  {
    v111[0] = v19;
    v111[1] = 0x40000000;
    v112 = ___ZN19QMIRTPCommandDriver23configureRTCPReportsReqENSt3__110shared_ptrI13QMIRTPSessionEEbbtt_block_invoke_107;
    v113 = &__block_descriptor_tmp_110;
    v114 = a6;
    v43 = (const void **)*((_QWORD *)&v132 + 1);
    if (*((_QWORD *)&v132 + 1) != (_QWORD)v133)
    {
      while (*((_BYTE *)*v43 + 8) != 17)
      {
        if (++v43 == (const void **)v133)
          goto LABEL_52;
      }
    }
    if (v43 == (const void **)v133)
    {
LABEL_52:
      v45 = operator new();
      v46 = v45;
      *(_BYTE *)(v45 + 8) = 17;
      *(_QWORD *)v45 = &off_1E78D5A88;
      *(_WORD *)(v45 + 10) = 0;
      v47 = (_WORD *)(v45 + 10);
      v48 = v133;
      if ((unint64_t)v133 >= *((_QWORD *)&v133 + 1))
      {
        v50 = (uint64_t)(v133 - *((_QWORD *)&v132 + 1)) >> 3;
        if ((unint64_t)(v50 + 1) >> 61)
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        v51 = (uint64_t)(*((_QWORD *)&v133 + 1) - *((_QWORD *)&v132 + 1)) >> 2;
        if (v51 <= v50 + 1)
          v51 = v50 + 1;
        if (*((_QWORD *)&v133 + 1) - *((_QWORD *)&v132 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
          v52 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v52 = v51;
        if (v52)
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v133 + 8, v52);
        else
          v53 = 0;
        v54 = (uint64_t *)&v53[8 * v50];
        v55 = &v53[8 * v52];
        *v54 = v46;
        v49 = v54 + 1;
        v57 = (char *)*((_QWORD *)&v132 + 1);
        v56 = (char *)v133;
        if ((_QWORD)v133 != *((_QWORD *)&v132 + 1))
        {
          do
          {
            v58 = *((_QWORD *)v56 - 1);
            v56 -= 8;
            *--v54 = v58;
          }
          while (v56 != v57);
          v56 = (char *)*((_QWORD *)&v132 + 1);
        }
        *((_QWORD *)&v132 + 1) = v54;
        *(_QWORD *)&v133 = v49;
        *((_QWORD *)&v133 + 1) = v55;
        if (v56)
          operator delete(v56);
      }
      else
      {
        *(_QWORD *)v133 = v45;
        v49 = (_QWORD *)(v48 + 8);
      }
      *(_QWORD *)&v133 = v49;
      v112((uint64_t)v111, v47);
    }
    else
    {
      if (!v44)
        __cxa_bad_cast();
      ___ZN19QMIRTPCommandDriver23configureRTCPReportsReqENSt3__110shared_ptrI13QMIRTPSessionEEbbtt_block_invoke_107((uint64_t)v111, v44 + 5);
    }
  }
  v104[0] = v19;
  v104[1] = 1174405120;
  v105 = ___ZN19QMIRTPCommandDriver23configureRTCPReportsReqENSt3__110shared_ptrI13QMIRTPSessionEEbbtt_block_invoke_2;
  v106 = &__block_descriptor_tmp_113;
  v109 = a3;
  v110 = a4;
  v59 = (std::__shared_weak_count *)a2[1];
  v107 = *a2;
  v108 = v59;
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  v62 = (const void **)*((_QWORD *)&v132 + 1);
  if (*((_QWORD *)&v132 + 1) != (_QWORD)v133)
  {
    while (*((_BYTE *)*v62 + 8) != 18)
    {
      if (++v62 == (const void **)v133)
        goto LABEL_79;
    }
  }
  if (v62 == (const void **)v133)
  {
LABEL_79:
    v65 = operator new();
    v66 = v65;
    *(_BYTE *)(v65 + 8) = 18;
    *(_QWORD *)v65 = &off_1E78D5AD8;
    *(_DWORD *)(v65 + 12) = 0;
    v64 = (int *)(v65 + 12);
    v67 = v133;
    if ((unint64_t)v133 >= *((_QWORD *)&v133 + 1))
    {
      v69 = (uint64_t)(v133 - *((_QWORD *)&v132 + 1)) >> 3;
      if ((unint64_t)(v69 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v70 = (uint64_t)(*((_QWORD *)&v133 + 1) - *((_QWORD *)&v132 + 1)) >> 2;
      if (v70 <= v69 + 1)
        v70 = v69 + 1;
      if (*((_QWORD *)&v133 + 1) - *((_QWORD *)&v132 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
        v71 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v71 = v70;
      if (v71)
        v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v133 + 8, v71);
      else
        v72 = 0;
      v73 = (uint64_t *)&v72[8 * v69];
      v74 = &v72[8 * v71];
      *v73 = v66;
      v68 = v73 + 1;
      v76 = (char *)*((_QWORD *)&v132 + 1);
      v75 = (char *)v133;
      if ((_QWORD)v133 != *((_QWORD *)&v132 + 1))
      {
        do
        {
          v77 = *((_QWORD *)v75 - 1);
          v75 -= 8;
          *--v73 = v77;
        }
        while (v75 != v76);
        v75 = (char *)*((_QWORD *)&v132 + 1);
      }
      *((_QWORD *)&v132 + 1) = v73;
      *(_QWORD *)&v133 = v68;
      *((_QWORD *)&v133 + 1) = v74;
      if (v75)
        operator delete(v75);
    }
    else
    {
      *(_QWORD *)v133 = v65;
      v68 = (_QWORD *)(v67 + 8);
    }
    *(_QWORD *)&v133 = v68;
  }
  else
  {
    if (!v63)
      __cxa_bad_cast();
    v64 = (int *)(v63 + 12);
  }
  v105((uint64_t)v104, v64);
  if (QMIRTPCommandDriver::getInstanceType(a1, (void **)(*a2 + 80)))
  {
    v78 = qmi::ClientRouter::get();
    v79 = operator new();
    *(_QWORD *)v79 = v78;
    *(_QWORD *)(v79 + 8) = QMIServiceMsg::create();
    *(_DWORD *)(v79 + 16) = 25000;
    *(_QWORD *)(v79 + 24) = 0;
    *(_QWORD *)(v79 + 32) = 0;
    v103 = v79;
    v80 = *a2;
    v81 = a2[1];
    if (v81)
    {
      v82 = (unint64_t *)(v81 + 8);
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
    }
    v84 = (std::__shared_weak_count *)operator new(0x30uLL);
    v84->__shared_owners_ = 0;
    v85 = (unint64_t *)&v84->__shared_owners_;
    v84->__shared_weak_owners_ = 0;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D5B40;
    v84[1].__vftable = a1;
    v84[1].__shared_owners_ = v80;
    v84[1].__shared_weak_owners_ = v81;
    v139 = &v84[1].__vftable;
    v140 = v84;
    v134[0] = v19;
    v134[1] = (void *)1174405120;
    v135 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver23configureRTCPReportsReqENSt3__110shared_ptrI13QMIRTPSessionEEbbttE3__0EEOS1_OT__block_invoke;
    v136 = &__block_descriptor_tmp_283;
    v137 = &v84[1].__vftable;
    v138 = v84;
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
    aBlock[0] = v19;
    aBlock[1] = (void *)0x40000000;
    v142 = ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms27SessionConfigureRtcpReports8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    v143 = &unk_1E78D5B88;
    v144 = v134;
    *(_QWORD *)(v103 + 32) = _Block_copy(aBlock);
    v87 = v138;
    if (v138)
    {
      v88 = (unint64_t *)&v138->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    v90 = v140;
    if (v140)
    {
      v91 = (unint64_t *)&v140->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
    v93 = v103;
    v103 = 0;
    if (v93)
      std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v103, v93);
  }
  v94 = v108;
  if (v108)
  {
    v95 = (unint64_t *)&v108->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = v120;
  if (v120)
  {
    v98 = (unint64_t *)&v120->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  _Block_object_dispose(&v123, 8);
  v100 = v131;
  if (v131)
  {
    v101 = (unint64_t *)&v131->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v132);
}

void sub_1BF041524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  if (*(char *)(v39 - 193) < 0)
    operator delete(*(void **)(v39 - 216));
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN19QMIRTPCommandDriver23configureRTCPReportsReqENSt3__110shared_ptrI13QMIRTPSessionEEbbtt_block_invoke(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(*(_QWORD *)(result + 32) + 482);
  return result;
}

void ___ZN19QMIRTPCommandDriver23configureRTCPReportsReqENSt3__110shared_ptrI13QMIRTPSessionEEbbtt_block_invoke_103(uint64_t a1, _WORD *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  LOWORD(v4) = *(unsigned __int8 *)(a1 + 56);
  if (*(_BYTE *)(a1 + 56))
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (*(_BYTE *)(a1 + 57))
    {
      v4 = *(_DWORD *)(v5 + 424);
      if (!v4)
        goto LABEL_10;
      v6 = 424;
    }
    else
    {
      v4 = *(_DWORD *)(v5 + 432);
      if (!v4)
        goto LABEL_10;
      v6 = 432;
    }
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 24) + 96))(v5 + 24);
    v8 = 428;
    if (v7 == 1)
      v8 = v6;
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + v8);
  }
LABEL_10:
  *a2 = v4;
  std::string::basic_string[abi:ne180100]<0>(v12, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v9 = ImsLogger::debug(ims::_logger, (uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"tlv.fRtcpReportingInterval=", 27);
  *(_BYTE *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (unsigned __int16)*a2;
}

void sub_1BF041768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver23configureRTCPReportsReqENSt3__110shared_ptrI13QMIRTPSessionEEbbtt_block_invoke_107(uint64_t a1, _WORD *a2)
{
  uint64_t v2;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;

  *a2 = *(_WORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(v5, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"tlv.fRtcpXrReportingInterval=", 29);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
}

void sub_1BF041878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver23configureRTCPReportsReqENSt3__110shared_ptrI13QMIRTPSessionEEbbtt_block_invoke_2(uint64_t a1, int *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;

  v2 = *(unsigned __int8 *)(a1 + 48);
  if (*(_BYTE *)(a1 + 48))
  {
    v3 = 424;
    if (*(_BYTE *)(a1 + 49))
    {
      v4 = 2;
    }
    else
    {
      v3 = 432;
      v4 = 1;
    }
    if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + v3))
      v2 = 3;
    else
      v2 = v4;
  }
  *a2 = v2;
  std::string::basic_string[abi:ne180100]<0>(v8, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"tlv.fRtcpReportTypes=", 21);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_1BF0419BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver30handleConfigureRTCPReportsRespERKN2ms27SessionConfigureRtcpReports8ResponseENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  if (!*(_DWORD *)(a1 + 40))
    return;
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 136);
  if (!v2)
    return;
  v3 = std::__shared_weak_count::lock(v2);
  v15 = v3;
  if (!v3)
    return;
  v4 = *(_QWORD *)(v1 + 128);
  if (!v4)
  {
    v12 = v3;
LABEL_18:
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    return;
  }
  v5 = *(_QWORD *)(v4 + 48);
  v6 = *(std::__shared_weak_count **)(v4 + 56);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(v5 + 296);
  if (v9)
    AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v9 + 120), 11);
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v12 = v15;
  if (v15)
    goto LABEL_18;
}

void sub_1BF041AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void QMIRTPCommandDriver::configureRTPLinkMonitorReq(std::__shared_weak_count_vtbl *a1, uint64_t *a2, __int16 a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  const void **v19;
  _WORD *v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int InstanceType;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  char v55[8];
  uint64_t v56;
  _QWORD v57[2];
  uint64_t (*v58)(uint64_t, _WORD *);
  void *v59;
  __int16 v60;
  _QWORD v61[2];
  uint64_t (*v62)(uint64_t, _BYTE *);
  void *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  void *v66[2];
  __int128 v67;
  void *__p[2];
  void (*v69)(uint64_t, unsigned __int16 *);
  void *v70;
  _QWORD *v71;
  std::__shared_weak_count *v72;
  _QWORD *v73;
  std::__shared_weak_count *v74;
  void *aBlock[2];
  void (*v76)(uint64_t, QMIServiceMsg *);
  void *v77;
  void **v78;

  if (!*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(aBlock, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)aBlock);
    if (!a1)
      __cxa_bad_typeid();
    v7 = v6;
    v8 = *(_QWORD **)(v6 + 8);
    v9 = strlen((const char *)(*(_QWORD *)(*((_QWORD *)a1->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)(*((_QWORD *)a1->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"configureRTPLinkMonitorReq", 26);
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" session is null", 16);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (SHIBYTE(v76) < 0)
      operator delete(aBlock[0]);
    if (SHIBYTE(v69) < 0)
      operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(aBlock, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)aBlock);
  if (!a1)
    __cxa_bad_typeid();
  v11 = v10;
  v12 = *(_QWORD **)(v10 + 8);
  v13 = strlen((const char *)(*(_QWORD *)(*((_QWORD *)a1->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, *(_QWORD *)(*((_QWORD *)a1->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL, v13);
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"configureRTPLinkMonitorReq", 26);
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(*a2 + 24) + 176))(*a2 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  if (SHIBYTE(v76) < 0)
    operator delete(aBlock[0]);
  if (SHIBYTE(v69) < 0)
    operator delete(__p[0]);
  *(_OWORD *)v66 = 0u;
  v67 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v66);
  v14 = (void *)MEMORY[0x1E0C809B0];
  v61[0] = MEMORY[0x1E0C809B0];
  v61[1] = 1174405120;
  v62 = ___ZN19QMIRTPCommandDriver26configureRTPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEt_block_invoke;
  v63 = &__block_descriptor_tmp_115;
  v15 = (std::__shared_weak_count *)a2[1];
  v64 = *a2;
  v65 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = qmi::MutableMessageBase::getTLV<ms::tlv::RTPSessionIdentifier>(v66, 1);
  v62((uint64_t)v61, (_BYTE *)v18);
  v57[0] = v14;
  v57[1] = 0x40000000;
  v58 = ___ZN19QMIRTPCommandDriver26configureRTPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEt_block_invoke_116;
  v59 = &__block_descriptor_tmp_118;
  v60 = a3;
  v19 = (const void **)v66[1];
  if (v66[1] != (void *)v67)
  {
    while (*((_BYTE *)*v19 + 8) != 16)
    {
      if (++v19 == (const void **)v67)
        goto LABEL_22;
    }
  }
  if (v19 == (const void **)v67)
  {
LABEL_22:
    v21 = operator new();
    v22 = v21;
    *(_BYTE *)(v21 + 8) = 16;
    *(_QWORD *)v21 = &off_1E78D5BD0;
    *(_WORD *)(v21 + 10) = 0;
    v23 = (_WORD *)(v21 + 10);
    v24 = v67;
    if ((unint64_t)v67 >= *((_QWORD *)&v67 + 1))
    {
      v26 = (uint64_t)(v67 - (unint64_t)v66[1]) >> 3;
      if ((unint64_t)(v26 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v27 = (uint64_t)(*((_QWORD *)&v67 + 1) - (unint64_t)v66[1]) >> 2;
      if (v27 <= v26 + 1)
        v27 = v26 + 1;
      if (*((_QWORD *)&v67 + 1) - (unint64_t)v66[1] >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      if (v28)
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v67 + 8, v28);
      else
        v29 = 0;
      v30 = (uint64_t *)&v29[8 * v26];
      v31 = &v29[8 * v28];
      *v30 = v22;
      v25 = v30 + 1;
      v33 = (char *)v66[1];
      v32 = (char *)v67;
      if ((void *)v67 != v66[1])
      {
        do
        {
          v34 = *((_QWORD *)v32 - 1);
          v32 -= 8;
          *--v30 = v34;
        }
        while (v32 != v33);
        v32 = (char *)v66[1];
      }
      v66[1] = v30;
      *(_QWORD *)&v67 = v25;
      *((_QWORD *)&v67 + 1) = v31;
      if (v32)
        operator delete(v32);
    }
    else
    {
      *(_QWORD *)v67 = v21;
      v25 = (_QWORD *)(v24 + 8);
    }
    *(_QWORD *)&v67 = v25;
    v58((uint64_t)v57, v23);
  }
  else
  {
    if (!v20)
      __cxa_bad_cast();
    ___ZN19QMIRTPCommandDriver26configureRTPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEt_block_invoke_116((uint64_t)v57, v20 + 5);
  }
  InstanceType = QMIRTPCommandDriver::getInstanceType(a1, (void **)(*a2 + 80));
  if (InstanceType)
  {
    v36 = qmi::ClientRouter::get();
    qmi::ClientRouter::SendProxy::SendProxy<ms::SessionConfigureLinkMonitor::Request>((uint64_t)v55, InstanceType, v36);
    v37 = *a2;
    v38 = a2[1];
    if (v38)
    {
      v39 = (unint64_t *)(v38 + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v41 = (std::__shared_weak_count *)operator new(0x30uLL);
    v41->__shared_owners_ = 0;
    v42 = (unint64_t *)&v41->__shared_owners_;
    v41->__shared_weak_owners_ = 0;
    v41->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D5C38;
    v41[1].__vftable = a1;
    v41[1].__shared_owners_ = v37;
    v41[1].__shared_weak_owners_ = v38;
    v73 = &v41[1].__vftable;
    v74 = v41;
    v43 = v56;
    __p[0] = v14;
    __p[1] = (void *)1174405120;
    v69 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver26configureRTPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEtE3__0EEOS1_OT__block_invoke;
    v70 = &__block_descriptor_tmp_285;
    v71 = &v41[1].__vftable;
    v72 = v41;
    do
      v44 = __ldxr(v42);
    while (__stxr(v44 + 1, v42));
    aBlock[0] = v14;
    aBlock[1] = (void *)0x40000000;
    v76 = ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms27SessionConfigureLinkMonitor8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    v77 = &unk_1E78D5C80;
    v78 = __p;
    *(_QWORD *)(v43 + 32) = _Block_copy(aBlock);
    v45 = v72;
    if (v72)
    {
      v46 = (unint64_t *)&v72->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = v74;
    if (v74)
    {
      v49 = (unint64_t *)&v74->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = v56;
    v56 = 0;
    if (v51)
      std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v56, v51);
  }
  v52 = v65;
  if (v65)
  {
    v53 = (unint64_t *)&v65->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v66);
}

void sub_1BF0421B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN19QMIRTPCommandDriver26configureRTPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEt_block_invoke(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(*(_QWORD *)(result + 32) + 482);
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver26configureRTPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEt_block_invoke_116(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(result + 32);
  return result;
}

void QMIRTPCommandDriver::configureRTCPLinkMonitorReq(std::__shared_weak_count_vtbl *a1, uint64_t *a2, __int16 a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  const void **v19;
  _WORD *v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int InstanceType;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  char v55[8];
  uint64_t v56;
  _QWORD v57[2];
  uint64_t (*v58)(uint64_t, _WORD *);
  void *v59;
  __int16 v60;
  _QWORD v61[2];
  uint64_t (*v62)(uint64_t, _BYTE *);
  void *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  void *v66[2];
  __int128 v67;
  void *__p[2];
  void (*v69)(uint64_t, unsigned __int16 *);
  void *v70;
  _QWORD *v71;
  std::__shared_weak_count *v72;
  _QWORD *v73;
  std::__shared_weak_count *v74;
  void *aBlock[2];
  void (*v76)(uint64_t, QMIServiceMsg *);
  void *v77;
  void **v78;

  if (!*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(aBlock, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)aBlock);
    if (!a1)
      __cxa_bad_typeid();
    v7 = v6;
    v8 = *(_QWORD **)(v6 + 8);
    v9 = strlen((const char *)(*(_QWORD *)(*((_QWORD *)a1->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)(*((_QWORD *)a1->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"configureRTCPLinkMonitorReq", 27);
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" session is null", 16);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (SHIBYTE(v76) < 0)
      operator delete(aBlock[0]);
    if (SHIBYTE(v69) < 0)
      operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(aBlock, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)aBlock);
  if (!a1)
    __cxa_bad_typeid();
  v11 = v10;
  v12 = *(_QWORD **)(v10 + 8);
  v13 = strlen((const char *)(*(_QWORD *)(*((_QWORD *)a1->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, *(_QWORD *)(*((_QWORD *)a1->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL, v13);
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"configureRTCPLinkMonitorReq", 27);
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(*a2 + 24) + 176))(*a2 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  if (SHIBYTE(v76) < 0)
    operator delete(aBlock[0]);
  if (SHIBYTE(v69) < 0)
    operator delete(__p[0]);
  *(_OWORD *)v66 = 0u;
  v67 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v66);
  v14 = (void *)MEMORY[0x1E0C809B0];
  v61[0] = MEMORY[0x1E0C809B0];
  v61[1] = 1174405120;
  v62 = ___ZN19QMIRTPCommandDriver27configureRTCPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEt_block_invoke;
  v63 = &__block_descriptor_tmp_119_0;
  v15 = (std::__shared_weak_count *)a2[1];
  v64 = *a2;
  v65 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = qmi::MutableMessageBase::getTLV<ms::tlv::RTPSessionIdentifier>(v66, 1);
  v62((uint64_t)v61, (_BYTE *)v18);
  v57[0] = v14;
  v57[1] = 0x40000000;
  v58 = ___ZN19QMIRTPCommandDriver27configureRTCPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEt_block_invoke_120;
  v59 = &__block_descriptor_tmp_122;
  v60 = a3;
  v19 = (const void **)v66[1];
  if (v66[1] != (void *)v67)
  {
    while (*((_BYTE *)*v19 + 8) != 17)
    {
      if (++v19 == (const void **)v67)
        goto LABEL_22;
    }
  }
  if (v19 == (const void **)v67)
  {
LABEL_22:
    v21 = operator new();
    v22 = v21;
    *(_BYTE *)(v21 + 8) = 17;
    *(_QWORD *)v21 = &off_1E78D5CC8;
    *(_WORD *)(v21 + 10) = 0;
    v23 = (_WORD *)(v21 + 10);
    v24 = v67;
    if ((unint64_t)v67 >= *((_QWORD *)&v67 + 1))
    {
      v26 = (uint64_t)(v67 - (unint64_t)v66[1]) >> 3;
      if ((unint64_t)(v26 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v27 = (uint64_t)(*((_QWORD *)&v67 + 1) - (unint64_t)v66[1]) >> 2;
      if (v27 <= v26 + 1)
        v27 = v26 + 1;
      if (*((_QWORD *)&v67 + 1) - (unint64_t)v66[1] >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      if (v28)
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v67 + 8, v28);
      else
        v29 = 0;
      v30 = (uint64_t *)&v29[8 * v26];
      v31 = &v29[8 * v28];
      *v30 = v22;
      v25 = v30 + 1;
      v33 = (char *)v66[1];
      v32 = (char *)v67;
      if ((void *)v67 != v66[1])
      {
        do
        {
          v34 = *((_QWORD *)v32 - 1);
          v32 -= 8;
          *--v30 = v34;
        }
        while (v32 != v33);
        v32 = (char *)v66[1];
      }
      v66[1] = v30;
      *(_QWORD *)&v67 = v25;
      *((_QWORD *)&v67 + 1) = v31;
      if (v32)
        operator delete(v32);
    }
    else
    {
      *(_QWORD *)v67 = v21;
      v25 = (_QWORD *)(v24 + 8);
    }
    *(_QWORD *)&v67 = v25;
    v58((uint64_t)v57, v23);
  }
  else
  {
    if (!v20)
      __cxa_bad_cast();
    ___ZN19QMIRTPCommandDriver27configureRTCPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEt_block_invoke_120((uint64_t)v57, v20 + 5);
  }
  InstanceType = QMIRTPCommandDriver::getInstanceType(a1, (void **)(*a2 + 80));
  if (InstanceType)
  {
    v36 = qmi::ClientRouter::get();
    qmi::ClientRouter::SendProxy::SendProxy<ms::SessionConfigureLinkMonitor::Request>((uint64_t)v55, InstanceType, v36);
    v37 = *a2;
    v38 = a2[1];
    if (v38)
    {
      v39 = (unint64_t *)(v38 + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v41 = (std::__shared_weak_count *)operator new(0x30uLL);
    v41->__shared_owners_ = 0;
    v42 = (unint64_t *)&v41->__shared_owners_;
    v41->__shared_weak_owners_ = 0;
    v41->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D5D30;
    v41[1].__vftable = a1;
    v41[1].__shared_owners_ = v37;
    v41[1].__shared_weak_owners_ = v38;
    v73 = &v41[1].__vftable;
    v74 = v41;
    v43 = v56;
    __p[0] = v14;
    __p[1] = (void *)1174405120;
    v69 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver27configureRTCPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEtE3__0EEOS1_OT__block_invoke;
    v70 = &__block_descriptor_tmp_287;
    v71 = &v41[1].__vftable;
    v72 = v41;
    do
      v44 = __ldxr(v42);
    while (__stxr(v44 + 1, v42));
    aBlock[0] = v14;
    aBlock[1] = (void *)0x40000000;
    v76 = ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms27SessionConfigureLinkMonitor8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    v77 = &unk_1E78D5C80;
    v78 = __p;
    *(_QWORD *)(v43 + 32) = _Block_copy(aBlock);
    v45 = v72;
    if (v72)
    {
      v46 = (unint64_t *)&v72->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = v74;
    if (v74)
    {
      v49 = (unint64_t *)&v74->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = v56;
    v56 = 0;
    if (v51)
      std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v56, v51);
  }
  v52 = v65;
  if (v65)
  {
    v53 = (unint64_t *)&v65->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v66);
}

void sub_1BF042930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN19QMIRTPCommandDriver27configureRTCPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEt_block_invoke(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(*(_QWORD *)(result + 32) + 482);
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver27configureRTCPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEt_block_invoke_120(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(result + 32);
  return result;
}

void QMIRTPCommandDriver::handleConfigureLinkMonitorResp(_QWORD *a1, unsigned __int16 *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  int v14;
  uint64_t v15;
  __n128 v16;
  const char *v17;
  size_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[6];
  std::__shared_weak_count *v27;
  int v28;
  void *v29[2];
  char v30;
  void *__p[2];
  char v32;
  void *v33[2];
  char v34;

  if (!*a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::error(ims::_logger, (uint64_t)v33, (uint64_t)__p);
    if (!a1)
      __cxa_bad_typeid();
    v7 = v6;
    v8 = *(_QWORD **)(v6 + 8);
    v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"handleConfigureLinkMonitorResp", 30);
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" session is null", 16);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v32 < 0)
      operator delete(__p[0]);
    if (v34 < 0)
      operator delete(v33[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::debug(ims::_logger, (uint64_t)v33, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v11 = v10;
  v12 = *(_QWORD **)(v10 + 8);
  v13 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v13);
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"handleConfigureLinkMonitorResp", 30);
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(*a3 + 24) + 176))(*a3 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  if (v32 < 0)
    operator delete(__p[0]);
  if (v34 < 0)
    operator delete(v33[0]);
  v14 = *((_DWORD *)a2 + 1);
  if (v14)
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v15 = ImsLogger::error(ims::_logger, (uint64_t)v33, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Error response for request: ", 28);
    *(_BYTE *)(v15 + 17) = 0;
    v16 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v29, *a2);
    (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v15 + 32))(v15, v29, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" error:", 7);
    *(_BYTE *)(v15 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" reason: ", 9);
    *(_BYTE *)(v15 + 17) = 0;
    v17 = (const char *)qmi::asString();
    v18 = strlen(v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)v17, v18);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
    if (v30 < 0)
      operator delete(v29[0]);
    if (v32 < 0)
      operator delete(__p[0]);
    if (v34 < 0)
      operator delete(v33[0]);
    v14 = 4;
  }
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 1174405120;
  v26[2] = ___ZN19QMIRTPCommandDriver30handleConfigureLinkMonitorRespERKN2ms27SessionConfigureLinkMonitor8ResponseENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke;
  v26[3] = &__block_descriptor_tmp_123;
  v28 = v14;
  v20 = *a3;
  v19 = (std::__shared_weak_count *)a3[1];
  v26[4] = a1;
  v26[5] = v20;
  v27 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  ims::performBlock((IMSClientManager *)v26);
  v23 = v27;
  if (v27)
  {
    v24 = (unint64_t *)&v27->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1BF042E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (*(char *)(v29 - 65) < 0)
    operator delete(*(void **)(v29 - 88));
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver30handleConfigureLinkMonitorRespERKN2ms27SessionConfigureLinkMonitor8ResponseENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;

  if (*(_DWORD *)(a1 + 56))
  {
    v2 = *(_QWORD *)(a1 + 32);
    v25 = 0;
    v26 = 0;
    v3 = *(std::__shared_weak_count **)(v2 + 136);
    if (v3)
    {
      v26 = std::__shared_weak_count::lock(v3);
      if (v26)
      {
        v4 = *(_QWORD **)(v2 + 128);
        v25 = v4;
        if (v4)
        {
          v5 = v4[6];
          v6 = (std::__shared_weak_count *)v4[7];
          v23 = v5;
          v24 = v6;
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldxr(p_shared_owners);
            while (__stxr(v8 + 1, p_shared_owners));
          }
          v9 = *(_QWORD *)(v5 + 296);
          if (v9)
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v9 + 120), 12);
          if (v6)
          {
            v10 = (unint64_t *)&v6->__shared_owners_;
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v12 = *(std::__shared_weak_count **)(a1 + 48);
          v21 = *(_QWORD *)(a1 + 40);
          v22 = v12;
          if (v12)
          {
            v13 = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldxr(v13);
            while (__stxr(v14 + 1, v13));
          }
          QMIRTPStackController::sessionMediaError(v25, &v21, 5);
          v15 = v22;
          if (v22)
          {
            v16 = (unint64_t *)&v22->__shared_owners_;
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
        }
      }
    }
    v18 = v26;
    if (v26)
    {
      v19 = (unint64_t *)&v26->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
}

void sub_1BF043030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void ___ZN19QMIRTPCommandDriver33handleSessionInactivityIndicationERKN2ms17SessionInactivity10IndicationE_block_invoke(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *a2;
  std::string::basic_string[abi:ne180100]<0>(v5, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"[inactivityType=", 16);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
}

void sub_1BF043158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver33handleSessionInactivityIndicationERKN2ms17SessionInactivity10IndicationE_block_invoke_2(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  QMIRTPStackController *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;
  QMIRTPStackController *v20;
  std::__shared_weak_count *v21;

  v2 = *(_QWORD **)(a1 + 40);
  v3 = (std::__shared_weak_count *)v2[17];
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    v21 = v4;
    if (v4)
    {
      v5 = v4;
      v6 = (QMIRTPStackController *)v2[16];
      v20 = v6;
      if (v6)
      {
        v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        if (v7 == 1)
        {
          std::string::basic_string[abi:ne180100]<0>(v18, "rtp.qmidriver");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v10 = ImsLogger::error(ims::_logger, (uint64_t)v18, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Baseband declared RTCP timeout", 30);
          *(_BYTE *)(v10 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v10 + 17) = 0;
          if (v17 < 0)
            operator delete(__p[0]);
          if (v19 < 0)
            operator delete(v18[0]);
          v9 = 6;
        }
        else
        {
          if (v7)
          {
            std::string::basic_string[abi:ne180100]<0>(v18, "rtp.qmidriver");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v11 = ImsLogger::error(ims::_logger, (uint64_t)v18, (uint64_t)__p);
            v12 = (const char *)(*(_QWORD *)(*(_QWORD *)(*v2 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
            v13 = strlen(v12);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)v12, v13);
            *(_BYTE *)(v11 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"::", 2);
            *(_BYTE *)(v11 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"handleSessionInactivityIndication_block_invoke_2", 48);
            *(_BYTE *)(v11 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" unknown inactivty type [qmisessionId=", 38);
            *(_BYTE *)(v11 + 17) = 0;
            std::ostream::operator<<();
            *(_BYTE *)(v11 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" inactivityType=", 16);
            *(_BYTE *)(v11 + 17) = 0;
            std::ostream::operator<<();
            *(_BYTE *)(v11 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"]", 1);
            *(_BYTE *)(v11 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v11 + 17) = 0;
            if (v17 < 0)
              operator delete(__p[0]);
            if (v19 < 0)
              operator delete(v18[0]);
            goto LABEL_21;
          }
          std::string::basic_string[abi:ne180100]<0>(v18, "rtp.qmidriver");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v8 = ImsLogger::error(ims::_logger, (uint64_t)v18, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Baseband declared RTP timeout", 29);
          *(_BYTE *)(v8 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v8 + 17) = 0;
          if (v17 < 0)
            operator delete(__p[0]);
          if (v19 < 0)
            operator delete(v18[0]);
          v9 = 5;
        }
        QMIRTPStackController::sessionMediaError(v6, *(unsigned __int8 *)(a1 + 48), v9);
      }
LABEL_21:
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF0434E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void ___ZN19QMIRTPCommandDriver28handleServiceErrorIndicationERKN2ms12ServiceError10IndicationE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  QMIRTPStackController *v6;
  const ImsResult *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[2];
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[72];
  QMIRTPStackController *v16;
  std::__shared_weak_count *v17;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(v2 + 136);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    v17 = v4;
    if (v4)
    {
      v5 = v4;
      v6 = *(QMIRTPStackController **)(v2 + 128);
      v16 = v6;
      if (v6)
      {
        if (*(_DWORD *)(a1 + 40) == 4)
        {
          v12 = 0u;
          v13 = 0u;
          v14 = 0u;
          v10[0] = &off_1E78B7238;
          v10[1] = &_bambiDomain;
          v11 = 1073741846;
          v7 = (const ImsResult *)ImsResult::operator<<<char [28]>((uint64_t)v10, "Fatal baseband driver error");
          ImsResult::ImsResult((ImsResult *)v15, v7);
          (*(void (**)(QMIRTPStackController *, _BYTE *))(*(_QWORD *)v6 + 48))(v6, v15);
          ImsResult::~ImsResult((ImsResult *)v15);
          ImsResult::~ImsResult((ImsResult *)v10);
        }
        else
        {
          QMIRTPStackController::sessionMediaError(v6, *(unsigned __int8 *)(a1 + 44), 9);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF043658(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

uint64_t ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke(uint64_t result, int a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2 == 1;
  return result;
}

void ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_2(uint64_t a1, __int128 *a2)
{
  _QWORD v2[4];
  __int128 v3;
  void (**v4)(RTCPSRPacket *__hidden);
  char v5;
  __int16 v6;
  char v7;
  uint64_t v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  void *__p;
  void *v13;
  uint64_t v14;

  v7 = 0;
  v6 = 0;
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 1174405120;
  v2[2] = ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_3;
  v2[3] = &unk_1E78D4628;
  v3 = *(_OWORD *)(a1 + 32);
  v5 = 0;
  v8 = 0;
  v9 = 0;
  v4 = &off_1E78E7800;
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v13 = 0;
  v14 = 0;
  __p = 0;
  std::vector<RTCPReceiverReport>::__init_with_size[abi:ne180100]<RTCPReceiverReport*,RTCPReceiverReport*>(&__p, 0, 0, 0);
  ims::performBlock((IMSClientManager *)v2);
  v4 = &off_1E78E7800;
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_1BF043764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_3(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  const RTCPSRPacket *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *__p[2];
  char v24;
  void *v25;
  std::__shared_weak_count *v26;
  char v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v2 = a1[5];
  v28 = 0;
  v29 = 0;
  v3 = *(std::__shared_weak_count **)(v2 + 136);
  if (v3)
  {
    v29 = std::__shared_weak_count::lock(v3);
    if (v29)
    {
      v4 = *(_QWORD *)(v2 + 128);
      v28 = v4;
      if (v4)
      {
        if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
        {
          v5 = *(void **)(v4 + 48);
          v6 = *(std::__shared_weak_count **)(v4 + 56);
          v25 = v5;
          v26 = v6;
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldxr(p_shared_owners);
            while (__stxr(v8 + 1, p_shared_owners));
          }
          RTPManager::logLocalRTCPSRPacket((uint64_t)v5, (const RTCPSRPacket *)(a1 + 6));
          if (v6)
          {
            v9 = (unint64_t *)&v6->__shared_owners_;
            do
              v10 = __ldaxr(v9);
            while (__stlxr(v10 - 1, v9));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
        }
        else
        {
          v11 = *(_QWORD **)(v4 + 48);
          v12 = *(std::__shared_weak_count **)(v4 + 56);
          v25 = v11;
          v26 = v12;
          if (v12)
          {
            v13 = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldxr(v13);
            while (__stxr(v14 + 1, v13));
          }
          v15 = (const RTCPSRPacket *)(a1 + 6);
          v16 = v11[37];
          if (v16)
            AnalyticsLogger::logRemoteRTCPSRPacket(*(AnalyticsLogger **)(v16 + 120), v15);
          if (v12)
          {
            v17 = (unint64_t *)&v12->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          std::string::basic_string[abi:ne180100]<0>(&v25, "rtp.qmidriver");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v19 = ImsLogger::spam(ims::_logger, (uint64_t)&v25, (uint64_t)__p);
          (*(void (**)(const RTCPSRPacket *, uint64_t))(*(_QWORD *)v15 + 24))(v15, v19);
          if (v24 < 0)
            operator delete(__p[0]);
          if (v27 < 0)
            operator delete(v25);
        }
      }
    }
  }
  v20 = v29;
  if (v29)
  {
    v21 = (unint64_t *)&v29->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1BF043964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v20 - 32);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_48c18_ZTS12RTCPSRPacket(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  _QWORD *v5;

  a1[6] = off_1E78D63E0;
  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)((char *)a1 + 62) = *(_QWORD *)(a2 + 62);
  a1[6] = &off_1E78E7800;
  a1[7] = v2;
  v3 = *(_OWORD *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 88);
  a1[12] = 0;
  v5 = a1 + 12;
  *(v5 - 1) = v4;
  *(_OWORD *)(v5 - 3) = v3;
  v5[1] = 0;
  v5[2] = 0;
  return std::vector<RTCPReceiverReport>::__init_with_size[abi:ne180100]<RTCPReceiverReport*,RTCPReceiverReport*>(v5, *(const void **)(a2 + 96), *(_QWORD *)(a2 + 104), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 2));
}

void __destroy_helper_block_e8_48c18_ZTS12RTCPSRPacket(_QWORD *a1)
{
  void *v1;

  a1[6] = &off_1E78E7800;
  v1 = (void *)a1[12];
  if (v1)
  {
    a1[13] = v1;
    operator delete(v1);
  }
}

void ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_142(uint64_t a1, int *a2)
{
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  int v8;
  __int128 v9;
  _QWORD v10[6];
  void (**v11)(RTCPRRPacket *__hidden);
  _QWORD v12[2];
  int v13;
  void *__p;
  void *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  int v19;
  void (**v20)(RTCPRRPacket *__hidden);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  char v28;
  __int16 v29;
  char v30;
  __int128 v31;
  int v32;

  v4 = *(_QWORD *)(a1 + 40);
  v30 = 0;
  v29 = 0;
  v5 = *((_BYTE *)a2 + 8);
  v6 = a2[7];
  v22 = 0;
  v23 = 0;
  v8 = *a2;
  v7 = a2[1];
  v20 = &off_1E78EA878;
  v21 = 0;
  LODWORD(v23) = v8;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v27 = v7;
  v28 = v5;
  v31 = *(_OWORD *)(a2 + 3);
  v32 = v6;
  RTCPReceiverReports::addReport(&v24, (__int128 *)&v27);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1174405120;
  v10[2] = ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_2_143;
  v10[3] = &unk_1E78D4688;
  v10[4] = *(_QWORD *)(a1 + 32);
  v10[5] = v4;
  v11 = &off_1E78EA878;
  v12[0] = 0;
  *(_QWORD *)((char *)v12 + 6) = 0;
  v13 = v23;
  v15 = 0;
  v16 = 0;
  __p = 0;
  std::vector<RTCPReceiverReport>::__init_with_size[abi:ne180100]<RTCPReceiverReport*,RTCPReceiverReport*>(&__p, v24, (uint64_t)v25, 0x6DB6DB6DB6DB6DB7 * ((v25 - (_BYTE *)v24) >> 2));
  v9 = *((_OWORD *)a2 + 1);
  v17 = *(_OWORD *)a2;
  v18 = v9;
  v19 = a2[8];
  ims::performBlock((IMSClientManager *)v10);
  v11 = &off_1E78EA878;
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  v20 = &off_1E78EA878;
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
}

void sub_1BF043B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  void *v24;

  if (__p)
    operator delete(__p);
  *(_QWORD *)(v22 - 136) = v21;
  v24 = *(void **)(v22 - 104);
  if (v24)
  {
    *(_QWORD *)(v22 - 96) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_2_143(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *__p[2];
  char v26;
  void *v27;
  std::__shared_weak_count *v28;
  char v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  v2 = *(_QWORD *)(a1 + 40);
  v30 = 0;
  v31 = 0;
  v3 = *(std::__shared_weak_count **)(v2 + 136);
  if (v3)
  {
    v31 = std::__shared_weak_count::lock(v3);
    if (v31)
    {
      v4 = *(_QWORD *)(v2 + 128);
      v30 = v4;
      if (v4)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
        {
          v5 = *(_QWORD **)(v4 + 48);
          v6 = *(std::__shared_weak_count **)(v4 + 56);
          v27 = v5;
          v28 = v6;
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldxr(p_shared_owners);
            while (__stxr(v8 + 1, p_shared_owners));
          }
          v9 = v5[37];
          if (v9)
            AnalyticsLogger::logLocalRTCPRRPacket(*(AnalyticsLogger **)(v9 + 120), (const RTCPRRPacket *)(a1 + 48), *(_DWORD *)(a1 + 136));
          if (v6)
          {
            v10 = (unint64_t *)&v6->__shared_owners_;
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
        }
        else
        {
          v12 = *(_QWORD **)(v4 + 48);
          v13 = *(std::__shared_weak_count **)(v4 + 56);
          v27 = v12;
          v28 = v13;
          if (v13)
          {
            v14 = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldxr(v14);
            while (__stxr(v15 + 1, v14));
          }
          v16 = v12[37];
          if (v16)
            AnalyticsLogger::logRemoteRTCPRRPacket(*(AnalyticsLogger **)(v16 + 120), (const RTCPRRPacket *)(a1 + 48), *(_DWORD *)(a1 + 136));
          if (v13)
          {
            v17 = (unint64_t *)&v13->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          std::string::basic_string[abi:ne180100]<0>(&v27, "rtp.qmidriver");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v19 = ImsLogger::spam(ims::_logger, (uint64_t)&v27, (uint64_t)__p);
          v20 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 48) + 24))(a1 + 48, v19);
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v20[17] = 0;
          if (v26 < 0)
            operator delete(__p[0]);
          if (v29 < 0)
            operator delete(v27);
          std::string::basic_string[abi:ne180100]<0>(&v27, "rtp.qmidriver");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v21 = ImsLogger::spam(ims::_logger, (uint64_t)&v27, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"RoundTripTime: ", 15);
          *(_BYTE *)(v21 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v21 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v21 + 17) = 0;
          if (v26 < 0)
            operator delete(__p[0]);
          if (v29 < 0)
            operator delete(v27);
        }
      }
    }
  }
  v22 = v31;
  if (v31)
  {
    v23 = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1BF043E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_48c18_ZTS12RTCPRRPacket(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  a1[6] = off_1E78D63E0;
  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)((char *)a1 + 62) = *(_QWORD *)(a2 + 62);
  a1[6] = &off_1E78EA878;
  a1[7] = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 72);
  a1[10] = 0;
  v3 = a1 + 10;
  *((_DWORD *)v3 - 2) = v2;
  v3[1] = 0;
  v3[2] = 0;
  return std::vector<RTCPReceiverReport>::__init_with_size[abi:ne180100]<RTCPReceiverReport*,RTCPReceiverReport*>(v3, *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2));
}

void __destroy_helper_block_e8_48c18_ZTS12RTCPRRPacket(_QWORD *a1)
{
  void *v1;

  a1[6] = &off_1E78EA878;
  v1 = (void *)a1[10];
  if (v1)
  {
    a1[11] = v1;
    operator delete(v1);
  }
}

void ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_148(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD v9[6];
  void (**v10)(RTCPSDesPacket *__hidden);
  _QWORD v11[2];
  _QWORD v12[3];
  int v13;
  _QWORD v14[3];
  void **v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  std::string __p;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string __str;
  _OWORD v28[2];
  std::string v29;
  void **v30;

  v4 = *(_QWORD *)(a1 + 40);
  memset(&v29, 0, sizeof(v29));
  std::string::basic_string[abi:ne180100]<0>(&v29, "");
  v5 = *(unsigned __int16 *)(a2 + 8);
  if (*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16) < v5)
    LOWORD(v5) = *(_WORD *)(a2 + 24) - *(_WORD *)(a2 + 16);
  if ((_WORD)v5)
  {
    v6 = 0;
    v7 = (unsigned __int16)v5;
    do
      std::string::append(&v29, 1uLL, *(_BYTE *)(*(_QWORD *)(a2 + 16) + v6++));
    while (v7 != v6);
  }
  memset(v28, 0, sizeof(v28));
  v8 = *(_DWORD *)(a2 + 4);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__str, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  else
    __str = v29;
  RTCPSDesItem::RTCPSDesItem((uint64_t)v28, v8, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v23 = 0;
  v24 = 0;
  LODWORD(v23) = *(_DWORD *)a2;
  v25 = 0;
  v26 = 0;
  v20 = v28[0];
  v21 = BYTE4(v28[0]);
  if (SHIBYTE(v28[1]) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)&v28[0] + 1), *(std::string::size_type *)&v28[1]);
  else
    __p = *(std::string *)((char *)v28 + 8);
  RTCPSDesInfo::addSDesItem((uint64_t)&v23, &v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v15 = (void **)off_1E78EC310;
  v16 = 0uLL;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v13 = v23;
  memset(v14, 0, sizeof(v14));
  std::vector<RTCPSDesItem>::__init_with_size[abi:ne180100]<RTCPSDesItem*,RTCPSDesItem*>(v14, v24, v25, (v25 - v24) >> 5);
  RTCPSDesPacket::addSDesInfo((uint64_t *)&v15, (uint64_t)&v13);
  v30 = (void **)v14;
  std::vector<RTCPSDesItem>::__destroy_vector::operator()[abi:ne180100](&v30);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1174405120;
  v9[2] = ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_2_149;
  v9[3] = &unk_1E78D46E8;
  v9[4] = *(_QWORD *)(a1 + 32);
  v9[5] = v4;
  v10 = off_1E78EC310;
  v11[0] = v16;
  *(_QWORD *)((char *)v11 + 6) = *(_QWORD *)((char *)&v16 + 6);
  memset(v12, 0, sizeof(v12));
  std::vector<RTCPSDesInfo>::__init_with_size[abi:ne180100]<RTCPSDesInfo*,RTCPSDesInfo*>((uint64_t)v12, v17, v18, (v18 - v17) >> 5);
  ims::performBlock((IMSClientManager *)v9);
  v10 = off_1E78EC310;
  v30 = (void **)v12;
  std::vector<RTCPSDesInfo>::__destroy_vector::operator()[abi:ne180100](&v30);
  v15 = (void **)off_1E78EC310;
  v30 = (void **)&v17;
  std::vector<RTCPSDesInfo>::__destroy_vector::operator()[abi:ne180100](&v30);
  v15 = (void **)&v24;
  std::vector<RTCPSDesItem>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SHIBYTE(v28[1]) < 0)
    operator delete(*((void **)&v28[0] + 1));
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_1BF0441FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  std::vector<RTCPSDesItem>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  if (*(char *)(v37 - 97) < 0)
    operator delete(*(void **)(v37 - 120));
  if (*(char *)(v37 - 73) < 0)
    operator delete(*(void **)(v37 - 96));
  _Unwind_Resume(a1);
}

void ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_2_149(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
    return;
  v2 = a1[5];
  v3 = *(std::__shared_weak_count **)(v2 + 136);
  if (!v3)
    return;
  v4 = std::__shared_weak_count::lock(v3);
  v24 = v4;
  if (!v4)
    return;
  v5 = *(_QWORD *)(v2 + 128);
  v23 = v5;
  if (!v5)
  {
    v16 = v4;
LABEL_23:
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v21, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::spam(ims::_logger, (uint64_t)v21, (uint64_t)__p);
  v7 = (_BYTE *)(*(uint64_t (**)(_QWORD *, uint64_t))(a1[6] + 24))(a1 + 6, v6);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v7[17] = 0;
  if (v20 < 0)
    operator delete(__p[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  v8 = *(_QWORD **)(v5 + 48);
  v9 = *(std::__shared_weak_count **)(v5 + 56);
  v21[0] = v8;
  v21[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = v8[37];
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 120);
    *(_QWORD *)(v13 + 536) = time(0);
  }
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v16 = v24;
  if (v24)
    goto LABEL_23;
}

void sub_1BF044458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_48c20_ZTS14RTCPSDesPacket(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(a1 + 48) = off_1E78D63E0;
  v2 = a2[7];
  v3 = *(_QWORD *)((char *)a2 + 62);
  *(_QWORD *)(a1 + 48) = off_1E78EC310;
  *(_QWORD *)(a1 + 72) = 0;
  v4 = a1 + 72;
  *(_QWORD *)(v4 - 10) = v3;
  *(_QWORD *)(v4 - 16) = v2;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  return std::vector<RTCPSDesInfo>::__init_with_size[abi:ne180100]<RTCPSDesInfo*,RTCPSDesInfo*>(v4, a2[9], a2[10], (uint64_t)(a2[10] - a2[9]) >> 5);
}

void __destroy_helper_block_e8_48c20_ZTS14RTCPSDesPacket(uint64_t a1)
{
  void **v1;

  *(_QWORD *)(a1 + 48) = off_1E78EC310;
  v1 = (void **)(a1 + 72);
  std::vector<RTCPSDesInfo>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_2_154(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v2 = ImsLogger::spam(ims::_logger, (uint64_t)v5, (uint64_t)__p);
    (**(void (***)(uint64_t, uint64_t))(a1 + 40))(a1 + 40, v2);
    if (v4 < 0)
      operator delete(__p[0]);
    if (v6 < 0)
      operator delete(v5[0]);
  }
}

void sub_1BF0445D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c39_ZTS33RTCPXRReceiverReferenceTimeReport(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = &off_1E78CE0A0;
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  return result;
}

void ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_2_162(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::spam(ims::_logger, (uint64_t)v6, (uint64_t)__p);
  (**(void (***)(uint64_t, uint64_t))(a1 + 32))(a1 + 32, v2);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v3 = ImsLogger::spam(ims::_logger, (uint64_t)v6, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"RoundTripTime: ", 15);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1BF044778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c22_ZTS16RTCPXRDLRRReport(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = &off_1E78C43C0;
  v2 = *(_QWORD *)(a2 + 44);
  *(_DWORD *)(result + 52) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(result + 44) = v2;
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEcht_block_invoke(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(*(_QWORD *)(result + 32) + 482);
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEcht_block_invoke_165(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(result + 32);
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEcht_block_invoke_2(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(result + 32);
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEcht_block_invoke_3(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(result + 32);
  return result;
}

void ___ZN19QMIRTPCommandDriver18handleSendDTMFRespERKN2ms15SessionSendDTMF8ResponseENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  _QWORD *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v14;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  uint64_t v16;
  uint64_t v17;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *p_shared_weak_owners;
  unint64_t v32;
  uint64_t v33;
  dispatch_time_t v34;
  NSObject *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD v47[5];
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  _QWORD v51[2];
  void *__p[2];
  char v53;
  void *v54;
  std::__shared_weak_count *v55;
  char v56;
  uint64_t v57;
  std::__shared_weak_count *v58;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(a1 + 56))
  {
    v2 = *(std::__shared_weak_count **)(v1 + 136);
    if (v2)
    {
      v3 = std::__shared_weak_count::lock(v2);
      v55 = v3;
      if (v3)
      {
        v4 = *(_QWORD **)(v1 + 128);
        v54 = v4;
        if (v4)
        {
          v5 = (_QWORD *)v4[6];
          v6 = (std::__shared_weak_count *)v4[7];
          __p[0] = v5;
          __p[1] = v6;
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldxr(p_shared_owners);
            while (__stxr(v8 + 1, p_shared_owners));
          }
          v9 = v5[37];
          if (v9)
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v9 + 120), 14);
          if (v6)
          {
            v10 = (unint64_t *)&v6->__shared_owners_;
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v12 = v55;
          if (!v55)
            goto LABEL_39;
        }
        else
        {
          v12 = v3;
        }
        v28 = (unint64_t *)&v12->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
LABEL_39:
    std::__list_imp<unsigned long long>::clear((_QWORD *)(v1 + 80));
    return;
  }
  v57 = 0;
  v58 = 0;
  v14 = *(std::__shared_weak_count **)(v1 + 136);
  if (v14)
  {
    v58 = std::__shared_weak_count::lock(v14);
    if (v58)
    {
      v57 = *(_QWORD *)(v1 + 128);
      if (v57)
      {
        if (!*(_BYTE *)(v1 + 104))
        {
          *(_BYTE *)(v1 + 104) = 1;
          rep = std::chrono::system_clock::now().__d_.__rep_;
          v16 = *(_QWORD *)(v1 + 144);
          std::string::basic_string[abi:ne180100]<0>(&v54, "rtp.qmidriver");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v17 = ImsLogger::debug(ims::_logger, (uint64_t)&v54, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"QMIRTPCommandDriver::handleSendDTMFResp DispatchInFlight DTMF digit queue size: ", 80);
          *(_BYTE *)(v17 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v17 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)" elapsed (ms): ", 15);
          v18 = rep / 1000 - v16;
          *(_BYTE *)(v17 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v17 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v17 + 17) = 0;
          if (v53 < 0)
            operator delete(__p[0]);
          if (v56 < 0)
            operator delete(v54);
          v20 = *(_QWORD *)(a1 + 40);
          v21 = *(unsigned __int8 *)(v20 + 465);
          v22 = *(_DWORD *)(v20 + 468);
          if (v22 + v21 >= v18)
          {
            v30 = *(_QWORD *)(v1 + 128);
            v23 = *(std::__shared_weak_count **)(v1 + 136);
            if (v23)
            {
              p_shared_weak_owners = (unint64_t *)&v23->__shared_weak_owners_;
              do
                v32 = __ldxr(p_shared_weak_owners);
              while (__stxr(v32 + 1, p_shared_weak_owners));
              v33 = *(_QWORD *)(a1 + 40);
              v21 = *(unsigned __int8 *)(v33 + 465);
              v22 = *(_DWORD *)(v33 + 468);
            }
            v34 = dispatch_time(0, 1000000 * (v21 - v18 + v22));
            v35 = *(NSObject **)(v1 + 112);
            v47[0] = MEMORY[0x1E0C809B0];
            v47[1] = 1174405120;
            v47[2] = ___ZN19QMIRTPCommandDriver18handleSendDTMFRespERKN2ms15SessionSendDTMF8ResponseENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke_2;
            v47[3] = &__block_descriptor_tmp_174;
            v47[4] = v30;
            v48 = v23;
            if (v23)
            {
              v36 = (unint64_t *)&v23->__shared_weak_owners_;
              do
                v37 = __ldxr(v36);
              while (__stxr(v37 + 1, v36));
            }
            v38 = *(std::__shared_weak_count **)(a1 + 48);
            v49 = *(_QWORD *)(a1 + 40);
            v50 = v38;
            if (v38)
            {
              v39 = (unint64_t *)&v38->__shared_owners_;
              do
                v40 = __ldxr(v39);
              while (__stxr(v40 + 1, v39));
            }
            dispatch_after(v34, v35, v47);
            v41 = v50;
            if (v50)
            {
              v42 = (unint64_t *)&v50->__shared_owners_;
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
            if (v48)
              std::__shared_weak_count::__release_weak(v48);
            if (!v23)
              goto LABEL_59;
          }
          else
          {
            v23 = *(std::__shared_weak_count **)(a1 + 48);
            v51[0] = *(_QWORD *)(a1 + 40);
            v51[1] = v23;
            if (v23)
            {
              v24 = (unint64_t *)&v23->__shared_owners_;
              do
                v25 = __ldxr(v24);
              while (__stxr(v25 + 1, v24));
            }
            QMIRTPCommandDriver::processDTMFDigitQueue(v1, v51, v19);
            if (!v23)
              goto LABEL_59;
            v26 = (unint64_t *)&v23->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (v27)
              goto LABEL_59;
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          }
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
  }
LABEL_59:
  v44 = v58;
  if (v58)
  {
    v45 = (unint64_t *)&v58->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_1BF044C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v24 - 64);
  _Unwind_Resume(a1);
}

void QMIRTPCommandDriver::processDTMFDigitQueue(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  char v8;
  uint64_t v9;
  size_t v10;
  uint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char v18;
  __int16 v19;
  uint64_t v20;
  size_t v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  const void **v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  _QWORD *v30;
  size_t v31;
  const char *v32;
  size_t v33;
  _BYTE *v34;
  uint64_t v35;
  const char *v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  const void **v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  const void **v66;
  _WORD *v67;
  uint64_t v68;
  uint64_t v69;
  _WORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[2];
  uint64_t (*v104)(uint64_t, _WORD *);
  void *v105;
  __int16 v106;
  _QWORD v107[2];
  uint64_t (*v108)(uint64_t, _BYTE *);
  void *v109;
  char v110;
  _QWORD v111[2];
  uint64_t (*v112)(uint64_t, _BYTE *);
  void *v113;
  char v114;
  void *__p[2];
  uint64_t (*v116)(uint64_t, _BYTE *);
  void *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *v120[2];
  __int128 v121;
  void *v122[2];
  void (*v123)(uint64_t, unsigned __int16 *);
  void *v124;
  _QWORD *v125;
  std::__shared_weak_count *v126;
  _QWORD *v127;
  std::__shared_weak_count *v128;
  _QWORD aBlock[6];

  if (*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v122, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::debug(ims::_logger, (uint64_t)v122, (uint64_t)__p);
    if (!a1)
      __cxa_bad_typeid();
    v5 = v4;
    v6 = *(_QWORD **)(v4 + 8);
    v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"processDTMFDigitQueue", 21);
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [sessionId=", 12);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)(*a2 + 24) + 176))(*a2 + 24);
    std::ostream::operator<<();
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (SHIBYTE(v116) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v123) < 0)
      operator delete(v122[0]);
    *(_BYTE *)(a1 + 104) = 0;
    if (*(_QWORD *)(a1 + 96))
    {
      v8 = *(_BYTE *)(*(_QWORD *)(a1 + 88) + 16);
      std::string::basic_string[abi:ne180100]<0>(v122, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v9 = ImsLogger::debug(ims::_logger, (uint64_t)v122, (uint64_t)__p);
      v10 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v10);
      *(_BYTE *)(v9 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"::", 2);
      *(_BYTE *)(v9 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"processDTMFDigitQueue", 21);
      *(_BYTE *)(v9 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" [size=", 7);
      *(_BYTE *)(v9 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v9 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" digit=", 7);
      *(_BYTE *)(v9 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v9 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"]", 1);
      *(_BYTE *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v9 + 17) = 0;
      if (SHIBYTE(v116) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v123) < 0)
        operator delete(v122[0]);
      v11 = *(uint64_t **)(a1 + 88);
      v12 = *v11;
      *(_QWORD *)(v12 + 8) = v11[1];
      *(_QWORD *)v11[1] = v12;
      --*(_QWORD *)(a1 + 96);
      operator delete(v11);
      v14 = *a2;
      v13 = (std::__shared_weak_count *)a2[1];
      v101 = *a2;
      v15 = *a2;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
        v15 = *a2;
      }
      if (!v14)
      {
        std::string::basic_string[abi:ne180100]<0>(v122, "rtp.qmidriver");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v35 = ImsLogger::error(ims::_logger, (uint64_t)v122, (uint64_t)__p);
        v36 = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        v37 = strlen(v36);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)v36, v37);
        *(_BYTE *)(v35 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"::", 2);
        *(_BYTE *)(v35 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"sendDTMFReq", 11);
        *(_BYTE *)(v35 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)" session is null", 16);
        *(_BYTE *)(v35 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v35 + 17) = 0;
        if (SHIBYTE(v116) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v123) < 0)
          operator delete(v122[0]);
        goto LABEL_131;
      }
      v18 = *(_BYTE *)(v15 + 464);
      v19 = *(unsigned __int8 *)(v15 + 465);
      std::string::basic_string[abi:ne180100]<0>(v122, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v20 = ImsLogger::debug(ims::_logger, (uint64_t)v122, (uint64_t)__p);
      v21 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v21);
      *(_BYTE *)(v20 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"::", 2);
      *(_BYTE *)(v20 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"sendDTMFReq", 11);
      *(_BYTE *)(v20 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)" [sessionId=", 12);
      *(_BYTE *)(v20 + 17) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)(v14 + 24) + 176))(v14 + 24);
      std::ostream::operator<<();
      *(_BYTE *)(v20 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"]", 1);
      *(_BYTE *)(v20 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v20 + 17) = 0;
      if (SHIBYTE(v116) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v123) < 0)
        operator delete(v122[0]);
      *(_OWORD *)v120 = 0u;
      v121 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v120);
      v22 = (void *)MEMORY[0x1E0C809B0];
      __p[0] = (void *)MEMORY[0x1E0C809B0];
      __p[1] = (void *)1174405120;
      v116 = ___ZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEcht_block_invoke;
      v117 = &__block_descriptor_tmp_164;
      v118 = v14;
      v119 = v13;
      if (v13)
      {
        v23 = (unint64_t *)&v13->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v25 = qmi::MutableMessageBase::getTLV<ms::tlv::RTPSessionIdentifier>(v120, 1);
      v116((uint64_t)__p, (_BYTE *)v25);
      v111[0] = v22;
      v111[1] = 0x40000000;
      v112 = ___ZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEcht_block_invoke_165;
      v113 = &__block_descriptor_tmp_167;
      v114 = v8;
      v26 = (const void **)v120[1];
      if (v120[1] != (void *)v121)
      {
        while (*((_BYTE *)*v26 + 8) != 2)
        {
          if (++v26 == (const void **)v121)
            goto LABEL_42;
        }
      }
      if (v26 == (const void **)v121)
      {
LABEL_42:
        v38 = operator new();
        v39 = v38;
        *(_WORD *)(v38 + 8) = 2;
        *(_QWORD *)v38 = &off_1E78D5F58;
        v40 = v121;
        if ((unint64_t)v121 >= *((_QWORD *)&v121 + 1))
        {
          v42 = (uint64_t)(v121 - (unint64_t)v120[1]) >> 3;
          if ((unint64_t)(v42 + 1) >> 61)
            goto LABEL_140;
          v43 = (uint64_t)(*((_QWORD *)&v121 + 1) - (unint64_t)v120[1]) >> 2;
          if (v43 <= v42 + 1)
            v43 = v42 + 1;
          if (*((_QWORD *)&v121 + 1) - (unint64_t)v120[1] >= 0x7FFFFFFFFFFFFFF8)
            v44 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          if (v44)
            v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v121 + 8, v44);
          else
            v45 = 0;
          v46 = (uint64_t *)&v45[8 * v42];
          v47 = &v45[8 * v44];
          *v46 = v39;
          v41 = v46 + 1;
          v49 = (char *)v120[1];
          v48 = (char *)v121;
          if ((void *)v121 != v120[1])
          {
            do
            {
              v50 = *((_QWORD *)v48 - 1);
              v48 -= 8;
              *--v46 = v50;
            }
            while (v48 != v49);
            v48 = (char *)v120[1];
          }
          v120[1] = v46;
          *(_QWORD *)&v121 = v41;
          *((_QWORD *)&v121 + 1) = v47;
          if (v48)
            operator delete(v48);
        }
        else
        {
          *(_QWORD *)v121 = v38;
          v41 = (_QWORD *)(v40 + 8);
        }
        *(_QWORD *)&v121 = v41;
        v112((uint64_t)v111, (_BYTE *)(v39 + 9));
      }
      else
      {
        if (!v34)
          goto LABEL_139;
        ___ZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEcht_block_invoke_165((uint64_t)v111, v34 + 9);
      }
      v107[0] = v22;
      v107[1] = 0x40000000;
      v108 = ___ZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEcht_block_invoke_2;
      v109 = &__block_descriptor_tmp_169;
      v110 = v18;
      v51 = (const void **)v120[1];
      if (v120[1] != (void *)v121)
      {
        while (*((_BYTE *)*v51 + 8) != 3)
        {
          if (++v51 == (const void **)v121)
            goto LABEL_66;
        }
      }
      if (v51 == (const void **)v121)
      {
LABEL_66:
        v53 = operator new();
        v54 = v53;
        *(_WORD *)(v53 + 8) = 3;
        *(_QWORD *)v53 = &off_1E78D5FA8;
        v55 = v121;
        if ((unint64_t)v121 >= *((_QWORD *)&v121 + 1))
        {
          v57 = (uint64_t)(v121 - (unint64_t)v120[1]) >> 3;
          if ((unint64_t)(v57 + 1) >> 61)
            goto LABEL_140;
          v58 = (uint64_t)(*((_QWORD *)&v121 + 1) - (unint64_t)v120[1]) >> 2;
          if (v58 <= v57 + 1)
            v58 = v57 + 1;
          if (*((_QWORD *)&v121 + 1) - (unint64_t)v120[1] >= 0x7FFFFFFFFFFFFFF8)
            v59 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v59 = v58;
          if (v59)
            v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v121 + 8, v59);
          else
            v60 = 0;
          v61 = (uint64_t *)&v60[8 * v57];
          v62 = &v60[8 * v59];
          *v61 = v54;
          v56 = v61 + 1;
          v64 = (char *)v120[1];
          v63 = (char *)v121;
          if ((void *)v121 != v120[1])
          {
            do
            {
              v65 = *((_QWORD *)v63 - 1);
              v63 -= 8;
              *--v61 = v65;
            }
            while (v63 != v64);
            v63 = (char *)v120[1];
          }
          v120[1] = v61;
          *(_QWORD *)&v121 = v56;
          *((_QWORD *)&v121 + 1) = v62;
          if (v63)
            operator delete(v63);
        }
        else
        {
          *(_QWORD *)v121 = v53;
          v56 = (_QWORD *)(v55 + 8);
        }
        *(_QWORD *)&v121 = v56;
        v108((uint64_t)v107, (_BYTE *)(v54 + 9));
      }
      else
      {
        if (!v52)
          goto LABEL_139;
        ___ZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEcht_block_invoke_2((uint64_t)v107, v52 + 9);
      }
      v103[0] = v22;
      v103[1] = 0x40000000;
      v104 = ___ZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEcht_block_invoke_3;
      v105 = &__block_descriptor_tmp_171;
      v106 = v19;
      v66 = (const void **)v120[1];
      if (v120[1] != (void *)v121)
      {
        while (*((_BYTE *)*v66 + 8) != 4)
        {
          if (++v66 == (const void **)v121)
            goto LABEL_90;
        }
      }
      if (v66 != (const void **)v121)
      {
        if (v67)
        {
          ___ZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEcht_block_invoke_3((uint64_t)v103, v67 + 5);
LABEL_107:
          *(_QWORD *)(a1 + 144) = std::chrono::system_clock::now().__d_.__rep_ / 1000;
          if (QMIRTPCommandDriver::getInstanceType((_QWORD *)a1, (void **)(v101 + 80)))
          {
            v82 = qmi::ClientRouter::get();
            v83 = operator new();
            *(_QWORD *)v83 = v82;
            *(_QWORD *)(v83 + 8) = QMIServiceMsg::create();
            *(_DWORD *)(v83 + 16) = 25000;
            *(_QWORD *)(v83 + 24) = 0;
            *(_QWORD *)(v83 + 32) = 0;
            v102 = v83;
            if (v13)
            {
              v84 = (unint64_t *)&v13->__shared_owners_;
              do
                v85 = __ldxr(v84);
              while (__stxr(v85 + 1, v84));
            }
            v86 = (std::__shared_weak_count *)operator new(0x30uLL);
            v86->__shared_owners_ = 0;
            v87 = (unint64_t *)&v86->__shared_owners_;
            v86->__shared_weak_owners_ = 0;
            v86->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D6060;
            v86[1].__vftable = (std::__shared_weak_count_vtbl *)a1;
            v86[1].__shared_owners_ = v101;
            v86[1].__shared_weak_owners_ = (uint64_t)v13;
            v127 = &v86[1].__vftable;
            v128 = v86;
            v122[0] = v22;
            v122[1] = (void *)1174405120;
            v123 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEchtE3__0EEOS1_OT__block_invoke;
            v124 = &__block_descriptor_tmp_295;
            v125 = &v86[1].__vftable;
            v126 = v86;
            do
              v88 = __ldxr(v87);
            while (__stxr(v88 + 1, v87));
            aBlock[0] = v22;
            aBlock[1] = 0x40000000;
            aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms15SessionSendDTMF8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
            aBlock[3] = &unk_1E78D60A8;
            aBlock[4] = v122;
            *(_QWORD *)(v83 + 32) = _Block_copy(aBlock);
            v89 = v126;
            if (v126)
            {
              v90 = (unint64_t *)&v126->__shared_owners_;
              do
                v91 = __ldaxr(v90);
              while (__stlxr(v91 - 1, v90));
              if (!v91)
              {
                ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                std::__shared_weak_count::__release_weak(v89);
              }
            }
            v92 = v128;
            if (v128)
            {
              v93 = (unint64_t *)&v128->__shared_owners_;
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 - 1, v93));
              if (!v94)
              {
                ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                std::__shared_weak_count::__release_weak(v92);
              }
            }
            v95 = v102;
            v102 = 0;
            if (v95)
              std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v102, v95);
          }
          v96 = v119;
          if (v119)
          {
            v97 = (unint64_t *)&v119->__shared_owners_;
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
          }
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v120);
LABEL_131:
          if (v13)
          {
            v99 = (unint64_t *)&v13->__shared_owners_;
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          return;
        }
LABEL_139:
        __cxa_bad_cast();
      }
LABEL_90:
      v68 = operator new();
      v69 = v68;
      *(_BYTE *)(v68 + 8) = 4;
      *(_QWORD *)v68 = &off_1E78D5FF8;
      *(_WORD *)(v68 + 10) = 0;
      v70 = (_WORD *)(v68 + 10);
      v71 = v121;
      if ((unint64_t)v121 < *((_QWORD *)&v121 + 1))
      {
        *(_QWORD *)v121 = v68;
        v72 = (_QWORD *)(v71 + 8);
LABEL_106:
        *(_QWORD *)&v121 = v72;
        v104((uint64_t)v103, v70);
        goto LABEL_107;
      }
      v73 = (uint64_t)(v121 - (unint64_t)v120[1]) >> 3;
      if (!((unint64_t)(v73 + 1) >> 61))
      {
        v74 = (uint64_t)(*((_QWORD *)&v121 + 1) - (unint64_t)v120[1]) >> 2;
        if (v74 <= v73 + 1)
          v74 = v73 + 1;
        if (*((_QWORD *)&v121 + 1) - (unint64_t)v120[1] >= 0x7FFFFFFFFFFFFFF8)
          v75 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v75 = v74;
        if (v75)
          v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v121 + 8, v75);
        else
          v76 = 0;
        v77 = (uint64_t *)&v76[8 * v73];
        v78 = &v76[8 * v75];
        *v77 = v69;
        v72 = v77 + 1;
        v80 = (char *)v120[1];
        v79 = (char *)v121;
        if ((void *)v121 != v120[1])
        {
          do
          {
            v81 = *((_QWORD *)v79 - 1);
            v79 -= 8;
            *--v77 = v81;
          }
          while (v79 != v80);
          v79 = (char *)v120[1];
        }
        v120[1] = v77;
        *(_QWORD *)&v121 = v72;
        *((_QWORD *)&v121 + 1) = v78;
        if (v79)
          operator delete(v79);
        goto LABEL_106;
      }
LABEL_140:
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    std::string::basic_string[abi:ne180100]<0>(v122, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v28 = ImsLogger::debug(ims::_logger, (uint64_t)v122, (uint64_t)__p);
    v32 = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v33 = strlen(v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)v32, v33);
    *(_BYTE *)(v28 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v28 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"processDTMFDigitQueue", 21);
    *(_BYTE *)(v28 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)" doesn't have any digits in the queue", 37);
    *(_BYTE *)(v28 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v122, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v27 = ImsLogger::error(ims::_logger, (uint64_t)v122, (uint64_t)__p);
    if (!a1)
      __cxa_bad_typeid();
    v28 = v27;
    v29 = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v30 = *(_QWORD **)(v27 + 8);
    v31 = strlen(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v29, v31);
    *(_BYTE *)(v28 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v28 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"processDTMFDigitQueue", 21);
    *(_BYTE *)(v28 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)" session is null", 16);
    *(_BYTE *)(v28 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(_BYTE *)(v28 + 17) = 0;
  if (SHIBYTE(v116) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v123) < 0)
    operator delete(v122[0]);
}

void sub_1BF045B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  if (*(char *)(v40 - 185) < 0)
    operator delete(*(void **)(v40 - 208));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN19QMIRTPCommandDriver18handleSendDTMFRespERKN2ms15SessionSendDTMF8ResponseENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke_2(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD v22[3];
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    return;
  v3 = std::__shared_weak_count::lock(v2);
  v25 = v3;
  if (!v3)
    return;
  v5 = a1[4];
  v24 = v5;
  if (!v5)
  {
    v19 = v3;
LABEL_23:
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    return;
  }
  v6 = *(_QWORD *)(v5 + 336);
  v7 = *(std::__shared_weak_count **)(v5 + 344);
  v22[2] = v6;
  v23 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  v11 = (std::__shared_weak_count *)a1[7];
  v22[0] = v10;
  v22[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  QMIRTPCommandDriver::processDTMFDigitQueue(v6, v22, v4);
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v25;
  if (v25)
    goto LABEL_23;
}

void sub_1BF045DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_32c46_ZTSNSt3__18weak_ptrI21QMIRTPStackControllerEE48c41_ZTSNSt3__110shared_ptrI13QMIRTPSessionEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  result[6] = a2[6];
  result[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_e8_32c46_ZTSNSt3__18weak_ptrI21QMIRTPStackControllerEE48c41_ZTSNSt3__110shared_ptrI13QMIRTPSessionEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 48);
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void QMIRTPCommandDriver::sendDTMFDigit(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  dispatch_time_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  _QWORD *v25;
  size_t v26;
  _QWORD block[6];
  std::__shared_weak_count *v28;
  void *__p[2];
  char v30;
  void *v31[2];
  char v32;

  if (*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v31, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, (uint64_t)v31, (uint64_t)__p);
    if (!a1)
      __cxa_bad_typeid();
    v7 = v6;
    v8 = *(_QWORD **)(v6 + 8);
    v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"sendDTMFDigit", 13);
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [sessionId=", 12);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)(*a2 + 24) + 176))(*a2 + 24);
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" digit=", 7);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v30 < 0)
      operator delete(__p[0]);
    if (v32 < 0)
      operator delete(v31[0]);
    v10 = operator new(0x18uLL);
    v10[16] = a3;
    v11 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)v10 = v11;
    *((_QWORD *)v10 + 1) = a1 + 80;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(a1 + 80) = v10;
    ++*(_QWORD *)(a1 + 96);
    if (!*(_BYTE *)(a1 + 104))
    {
      std::string::basic_string[abi:ne180100]<0>(v31, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v12 = ImsLogger::debug(ims::_logger, (uint64_t)v31, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"LegacyQMIRTPCommandDriver::sendDTMFDigit DispatchInFlight DTMF digit queue size: ", 81);
      *(_BYTE *)(v12 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v12 + 17) = 0;
      if (v30 < 0)
        operator delete(__p[0]);
      if (v32 < 0)
        operator delete(v31[0]);
      *(_BYTE *)(a1 + 104) = 1;
      v13 = dispatch_time(0, 1000000 * (*(_DWORD *)(*a2 + 468) + *(unsigned __int8 *)(*a2 + 465)));
      v14 = *(NSObject **)(a1 + 112);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 1174405120;
      block[2] = ___ZN19QMIRTPCommandDriver13sendDTMFDigitENSt3__110shared_ptrI13QMIRTPSessionEEh_block_invoke;
      block[3] = &__block_descriptor_tmp_178;
      v16 = *a2;
      v15 = (std::__shared_weak_count *)a2[1];
      block[4] = a1;
      block[5] = v16;
      v28 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
      }
      dispatch_after(v13, v14, block);
      v19 = v28;
      if (v28)
      {
        v20 = (unint64_t *)&v28->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v31, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v22 = ImsLogger::error(ims::_logger, (uint64_t)v31, (uint64_t)__p);
    if (!a1)
      __cxa_bad_typeid();
    v23 = v22;
    v24 = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v25 = *(_QWORD **)(v22 + 8);
    v26 = strlen(v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v24, v26);
    *(_BYTE *)(v23 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v23 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"sendDTMFDigit", 13);
    *(_BYTE *)(v23 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)" session is null", 16);
    *(_BYTE *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v23 + 17) = 0;
    if (v30 < 0)
      operator delete(__p[0]);
    if (v32 < 0)
      operator delete(v31[0]);
  }
}

void sub_1BF0462D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver13sendDTMFDigitENSt3__110shared_ptrI13QMIRTPSessionEEh_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8[2];

  v2 = a1[4];
  v3 = (std::__shared_weak_count *)a1[6];
  v8[0] = a1[5];
  v8[1] = (uint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  QMIRTPCommandDriver::processDTMFDigitQueue(v2, v8);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF0463AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMIRTPCommandDriver::uninitializeAllSessionsReq(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  const void **v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  size_t v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned int v41;
  BOOL v42;
  uint64_t *v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t *v46;
  std::__shared_weak_count *v47;
  void *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  size_t v61;
  int v62;
  uint64_t v63;
  _QWORD *v64;
  unsigned int v65;
  BOOL v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  char v82[8];
  uint64_t v83;
  _BYTE v84[32];
  uint64_t v85;
  _QWORD *v86;
  std::__shared_weak_count *v87;
  _QWORD v88[2];
  uint64_t (*v89)(uint64_t, _DWORD *);
  void *v90;
  int v91;
  void *v92[2];
  __int128 v93;
  char *v94;
  std::__shared_weak_count *v95;
  void *__p;
  uint64_t v97;
  void (*v98)(uint64_t, unsigned __int16 *);
  void *v99;
  char *v100;
  std::__shared_weak_count *v101;
  void *aBlock;
  uint64_t v103;
  void (*v104)(uint64_t, QMIServiceMsg *);
  void *v105;
  void **p_p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&aBlock);
  if (!a1)
    __cxa_bad_typeid();
  v7 = v6;
  v8 = *(_QWORD **)(v6 + 8);
  v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"uninitializeAllSessionsReq", 26);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [stackId=", 10);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" apnType=", 9);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (SHIBYTE(v104) < 0)
    operator delete(aBlock);
  if (SHIBYTE(v98) < 0)
    operator delete(__p);
  *(_OWORD *)v92 = 0u;
  v93 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v92);
  if (a3 != 255)
  {
    v88[0] = MEMORY[0x1E0C809B0];
    v88[1] = 0x40000000;
    v89 = ___ZN19QMIRTPCommandDriver26uninitializeAllSessionsReqERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN2ms7ApnTypeE_block_invoke;
    v90 = &__block_descriptor_tmp_190;
    v91 = a3;
    v10 = (const void **)v92[1];
    if (v92[1] != (void *)v93)
    {
      while (*((_BYTE *)*v10 + 8) != 16)
      {
        if (++v10 == (const void **)v93)
          goto LABEL_14;
      }
    }
    if (v10 == (const void **)v93)
    {
LABEL_14:
      v12 = operator new();
      v13 = v12;
      *(_BYTE *)(v12 + 8) = 16;
      *(_QWORD *)v12 = &off_1E78D60F0;
      *(_DWORD *)(v12 + 12) = 0;
      v14 = (_DWORD *)(v12 + 12);
      v15 = v93;
      if ((unint64_t)v93 >= *((_QWORD *)&v93 + 1))
      {
        v17 = (uint64_t)(v93 - (unint64_t)v92[1]) >> 3;
        if ((unint64_t)(v17 + 1) >> 61)
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        v18 = (uint64_t)(*((_QWORD *)&v93 + 1) - (unint64_t)v92[1]) >> 2;
        if (v18 <= v17 + 1)
          v18 = v17 + 1;
        if (*((_QWORD *)&v93 + 1) - (unint64_t)v92[1] >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v93 + 8, v19);
        else
          v20 = 0;
        v21 = (uint64_t *)&v20[8 * v17];
        v22 = &v20[8 * v19];
        *v21 = v13;
        v16 = v21 + 1;
        v24 = (char *)v92[1];
        v23 = (char *)v93;
        if ((void *)v93 != v92[1])
        {
          do
          {
            v25 = *((_QWORD *)v23 - 1);
            v23 -= 8;
            *--v21 = v25;
          }
          while (v23 != v24);
          v23 = (char *)v92[1];
        }
        v92[1] = v21;
        *(_QWORD *)&v93 = v16;
        *((_QWORD *)&v93 + 1) = v22;
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_QWORD *)v93 = v12;
        v16 = (_QWORD *)(v15 + 8);
      }
      *(_QWORD *)&v93 = v16;
      v89((uint64_t)v88, v14);
    }
    else
    {
      if (!v11)
        __cxa_bad_cast();
      ___ZN19QMIRTPCommandDriver26uninitializeAllSessionsReqERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN2ms7ApnTypeE_block_invoke((uint64_t)v88, v11 + 3);
    }
  }
  v86 = 0;
  v87 = 0;
  v26 = (std::__shared_weak_count *)a1[17];
  if (v26)
  {
    v87 = std::__shared_weak_count::lock(v26);
    if (v87)
    {
      v27 = (_QWORD *)a1[16];
      v86 = v27;
      if (v27)
      {
        v28 = *(unsigned __int8 *)(a2 + 23);
        v29 = (char)v28;
        if ((v28 & 0x80u) != 0)
          v28 = *(_QWORD *)(a2 + 8);
        if (v28 == 15
          && (v29 >= 0 ? (v30 = (uint64_t *)a2) : (v30 = *(uint64_t **)a2),
              (v31 = *v30, v32 = *(uint64_t *)((char *)v30 + 7), v31 == 0x536C6C41494D516BLL)
            ? (v33 = v32 == 0x736E6F6973736553)
            : (v33 = 0),
              v33))
        {
          v59 = (_QWORD *)v27[15];
          if (v59 != v27 + 16)
          {
            do
            {
              v85 = 0;
              memset(v84, 0, sizeof(v84));
              if (*((char *)v59 + 55) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v84, (const std::string::value_type *)v59[4], v59[5]);
              }
              else
              {
                *(_OWORD *)v84 = *((_OWORD *)v59 + 2);
                *(_QWORD *)&v84[16] = v59[6];
              }
              *(_QWORD *)&v84[24] = v59[7];
              LODWORD(v85) = *((_DWORD *)v59 + 16);
              std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
              std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v60 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&aBlock);
              v61 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v60 + 8), *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v61);
              *(_BYTE *)(v60 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v60 + 8), (uint64_t)"::", 2);
              *(_BYTE *)(v60 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v60 + 8), (uint64_t)"uninitializeAllSessionsReq", 26);
              *(_BYTE *)(v60 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v60 + 8), (uint64_t)" [instance=", 11);
              *(_BYTE *)(v60 + 17) = 0;
              std::ostream::operator<<();
              *(_BYTE *)(v60 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v60 + 8), (uint64_t)"]", 1);
              *(_BYTE *)(v60 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v60 + 64))(v60, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v60 + 17) = 0;
              if (SHIBYTE(v104) < 0)
                operator delete(aBlock);
              if (SHIBYTE(v98) < 0)
                operator delete(__p);
              if ((_DWORD)v85)
                v62 = 2 * ((_DWORD)v85 == 1);
              else
                v62 = 1;
              if (!v62)
                goto LABEL_124;
              v63 = v86[19];
              if (!v63)
                goto LABEL_124;
              v64 = v86 + 19;
              do
              {
                v65 = *(_DWORD *)(v63 + 28);
                v66 = v65 >= v85;
                if (v65 >= v85)
                  v67 = (uint64_t *)v63;
                else
                  v67 = (uint64_t *)(v63 + 8);
                if (v66)
                  v64 = (_QWORD *)v63;
                v63 = *v67;
              }
              while (*v67);
              if (v64 != v86 + 19 && *((_DWORD *)v64 + 7) <= v85 && *((_DWORD *)v64 + 8) == 2)
              {
                v68 = qmi::ClientRouter::get();
                qmi::ClientRouter::SendProxy::SendProxy<ms::ServiceUninitializeAllSessions::Request>((uint64_t)v82, v62, v68);
                v69 = operator new(0x28uLL);
                v69[1] = 0;
                v70 = v69 + 1;
                v69[2] = 0;
                *v69 = &off_1E78D6158;
                v69[3] = a1;
                *((_DWORD *)v69 + 8) = a3;
                v94 = (char *)(v69 + 3);
                v95 = (std::__shared_weak_count *)v69;
                v71 = v83;
                __p = (void *)MEMORY[0x1E0C809B0];
                v97 = 1174405120;
                v98 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver26uninitializeAllSessionsReqERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN2ms7ApnTypeEE3__0EEOS1_OT__block_invoke;
                v99 = &__block_descriptor_tmp_301;
                v100 = (char *)(v69 + 3);
                v101 = (std::__shared_weak_count *)v69;
                do
                  v72 = __ldxr(v70);
                while (__stxr(v72 + 1, v70));
                aBlock = (void *)MEMORY[0x1E0C809B0];
                v103 = 0x40000000;
                v104 = ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms30ServiceUninitializeAllSessions8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
                v105 = &unk_1E78D61A0;
                p_p = &__p;
                *(_QWORD *)(v71 + 32) = _Block_copy(&aBlock);
                v73 = v101;
                if (v101)
                {
                  p_shared_owners = (unint64_t *)&v101->__shared_owners_;
                  do
                    v75 = __ldaxr(p_shared_owners);
                  while (__stlxr(v75 - 1, p_shared_owners));
                  if (!v75)
                  {
                    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                    std::__shared_weak_count::__release_weak(v73);
                  }
                }
                v76 = v95;
                if (v95)
                {
                  v77 = (unint64_t *)&v95->__shared_owners_;
                  do
                    v78 = __ldaxr(v77);
                  while (__stlxr(v78 - 1, v77));
                  if (!v78)
                  {
                    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                    std::__shared_weak_count::__release_weak(v76);
                  }
                }
                v79 = v83;
                v83 = 0;
                if (v79)
                  std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v83, v79);
              }
              else
              {
LABEL_124:
                QMIRTPStackController::handleStackUninitializeAllSessions(v86, a2, a3);
              }
              if ((v84[23] & 0x80000000) != 0)
                operator delete(*(void **)v84);
              v80 = (_QWORD *)v59[1];
              if (v80)
              {
                do
                {
                  v81 = v80;
                  v80 = (_QWORD *)*v80;
                }
                while (v80);
              }
              else
              {
                do
                {
                  v81 = (_QWORD *)v59[2];
                  v33 = *v81 == (_QWORD)v59;
                  v59 = v81;
                }
                while (!v33);
              }
              v59 = v81;
            }
            while (v81 != v27 + 16);
          }
        }
        else
        {
          QMIRTPStackController::getProfileByStackId((uint64_t)v27, (void **)a2);
          v35 = v34;
          if ((v34 & 0xFF00000000) == 0)
            goto LABEL_79;
          std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
          std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v36 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&aBlock);
          v37 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v37);
          *(_BYTE *)(v36 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"::", 2);
          *(_BYTE *)(v36 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"uninitializeAllSessionsReq", 26);
          *(_BYTE *)(v36 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)" [instance=", 11);
          *(_BYTE *)(v36 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v36 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"]", 1);
          *(_BYTE *)(v36 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v36 + 17) = 0;
          if (SHIBYTE(v104) < 0)
            operator delete(aBlock);
          if (SHIBYTE(v98) < 0)
            operator delete(__p);
          v38 = v35 ? 2 * (v35 == 1) : 1;
          if (!v38)
            goto LABEL_79;
          v39 = v27[19];
          if (!v39)
            goto LABEL_79;
          v40 = v27 + 19;
          do
          {
            v41 = *(_DWORD *)(v39 + 28);
            v42 = v41 >= v35;
            if (v41 >= v35)
              v43 = (uint64_t *)v39;
            else
              v43 = (uint64_t *)(v39 + 8);
            if (v42)
              v40 = (_QWORD *)v39;
            v39 = *v43;
          }
          while (*v43);
          if (v40 != v27 + 19 && *((_DWORD *)v40 + 7) <= v35 && *((_DWORD *)v40 + 8) == 2)
          {
            v44 = qmi::ClientRouter::get();
            qmi::ClientRouter::SendProxy::SendProxy<ms::ServiceUninitializeAllSessions::Request>((uint64_t)&v94, v38, v44);
            v45 = operator new(0x28uLL);
            v45[1] = 0;
            v46 = v45 + 1;
            v45[2] = 0;
            *v45 = &off_1E78D6200;
            v45[3] = a1;
            *((_DWORD *)v45 + 8) = a3;
            *(_QWORD *)v84 = v45 + 3;
            *(_QWORD *)&v84[8] = v45;
            v47 = v95;
            v48 = (void *)MEMORY[0x1E0C809B0];
            __p = (void *)MEMORY[0x1E0C809B0];
            v97 = 1174405120;
            v98 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver26uninitializeAllSessionsReqERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN2ms7ApnTypeEE3__1EEOS1_OT__block_invoke;
            v99 = &__block_descriptor_tmp_303;
            v100 = (char *)(v45 + 3);
            v101 = (std::__shared_weak_count *)v45;
            do
              v49 = __ldxr(v46);
            while (__stxr(v49 + 1, v46));
            aBlock = v48;
            v103 = 0x40000000;
            v104 = ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms30ServiceUninitializeAllSessions8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
            v105 = &unk_1E78D61A0;
            p_p = &__p;
            v47[1].__shared_owners_ = (uint64_t)_Block_copy(&aBlock);
            v50 = v101;
            if (v101)
            {
              v51 = (unint64_t *)&v101->__shared_owners_;
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            if (*(_QWORD *)&v84[8])
            {
              v53 = (unint64_t *)(*(_QWORD *)&v84[8] + 8);
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)&v84[8] + 16))(*(_QWORD *)&v84[8]);
                std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v84[8]);
              }
            }
            v55 = (uint64_t)v95;
            v95 = 0;
            if (v55)
              std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v95, v55);
          }
          else
          {
LABEL_79:
            QMIRTPStackController::handleStackUninitializeAllSessions(v27, a2, a3);
          }
        }
      }
    }
  }
  v56 = v87;
  if (v87)
  {
    v57 = (unint64_t *)&v87->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v92);
}

void sub_1BF046EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;
  uint64_t v43;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v41);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  v43 = a35;
  a35 = 0;
  if (v43)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a35, v43);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a30);
  _Unwind_Resume(a1);
}

uint64_t ___ZN19QMIRTPCommandDriver26uninitializeAllSessionsReqERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN2ms7ApnTypeE_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t QMIRTPCommandDriver::getResultFromResponse<ms::ServiceUninitializeAllSessions::Response>(unsigned __int16 *a1)
{
  uint64_t v2;
  __n128 v3;
  const char *v4;
  size_t v5;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;

  if (!*((_DWORD *)a1 + 1))
    return 0;
  std::string::basic_string[abi:ne180100]<0>(v11, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(v9, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::error(ims::_logger, (uint64_t)v11, (uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Error response for request: ", 28);
  *(_BYTE *)(v2 + 17) = 0;
  v3 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)__p, *a1);
  (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v2 + 32))(v2, __p, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" error:", 7);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" reason: ", 9);
  *(_BYTE *)(v2 + 17) = 0;
  v4 = (const char *)qmi::asString();
  v5 = strlen(v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)v4, v5);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v8 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  return 4;
}

void sub_1BF047190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver33handleUninitializeAllSessionsRespERKN2ms30ServiceUninitializeAllSessions8ResponseEh_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  QMIRTPStackController *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  QMIRTPStackController *v10;
  unint64_t *v11;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(a1 + 40))
  {
    v2 = *(std::__shared_weak_count **)(v1 + 136);
    if (v2)
    {
      v3 = std::__shared_weak_count::lock(v2);
      if (v3)
      {
        v4 = v3;
        v5 = *(QMIRTPStackController **)(v1 + 128);
        if (v5)
          QMIRTPStackController::handleUninitializeAllSessionsRequestReceipt(v5, 1);
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
LABEL_15:
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
  else
  {
    v8 = *(std::__shared_weak_count **)(v1 + 136);
    if (v8)
    {
      v9 = std::__shared_weak_count::lock(v8);
      if (v9)
      {
        v4 = v9;
        v10 = *(QMIRTPStackController **)(v1 + 128);
        if (v10)
          QMIRTPStackController::handleUninitializeAllSessionsRequestReceipt(v10, 0);
        v11 = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldaxr(v11);
        while (__stlxr(v7 - 1, v11));
        goto LABEL_15;
      }
    }
  }
}

void sub_1BF0472AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN19QMIRTPCommandDriver39handleUninitializeAllSessionsIndicationERKN2ms30ServiceUninitializeAllSessions10IndicationE_block_invoke(uint64_t result, _DWORD *a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void ___ZN19QMIRTPCommandDriver39handleUninitializeAllSessionsIndicationERKN2ms30ServiceUninitializeAllSessions10IndicationE_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  char v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(std::__shared_weak_count **)(v2 + 136);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    v12 = v4;
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD **)(v2 + 128);
      v11 = v6;
      if (v6)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "kQMIAllSessionsOnAPN");
        QMIRTPStackController::handleStackUninitializeAllSessions(v6, (uint64_t)__p, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
        if (v10 < 0)
          operator delete(__p[0]);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF047394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ___ZN19QMIRTPCommandDriver18sendAudioCallEventEhRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN5audio5EventEb_block_invoke_3(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  BOOL v8;
  char *v9;
  void *v10[2];
  void (*v11)(uint64_t);
  void *v12;
  _QWORD *v13;
  std::string v14;
  BOOL v15;
  std::string __p;

  v3 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v10, (uint64_t)&__p);
  if (!v3)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v3 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*v3 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"handleSendAudioCallEventResp", 28);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11) < 0)
    operator delete(v10[0]);
  v8 = *(_DWORD *)(a2 + 4) != 0;
  memset(&__p, 0, sizeof(__p));
  v9 = (char *)qmi::asString();
  std::string::basic_string[abi:ne180100]<0>(&__p, v9);
  v10[0] = (void *)MEMORY[0x1E0C809B0];
  v10[1] = (void *)1174405120;
  v11 = ___ZN19QMIRTPCommandDriver28handleSendAudioCallEventRespERKN5audio13SendCallEvent8ResponseE_block_invoke;
  v12 = &__block_descriptor_tmp_209;
  v13 = v3;
  v15 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v14 = __p;
  ims::performBlock((IMSClientManager *)v10);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF047598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver28handleSendAudioCallEventRespERKN5audio13SendCallEvent8ResponseE_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  size_t v21;
  unint64_t *v22;
  unint64_t v23;
  void *__p[2];
  char v25;
  void *v26;
  std::__shared_weak_count *v27;
  char v28;

  v1 = *(_QWORD **)(a1 + 32);
  if (*(_BYTE *)(a1 + 64))
  {
    std::string::basic_string[abi:ne180100]<0>(&v26, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::error(ims::_logger, (uint64_t)&v26, (uint64_t)__p);
    if (!v1)
      __cxa_bad_typeid();
    v4 = v3;
    v5 = *(_QWORD **)(v3 + 8);
    v6 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, *(_QWORD *)(*(_QWORD *)(*v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v6);
    *(_BYTE *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"handleSendAudioCallEventResp_block_invoke", 41);
    *(_BYTE *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" Error  ", 8);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, a1 + 40);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if (v25 < 0)
      operator delete(__p[0]);
    if (v28 < 0)
      operator delete(v26);
    v7 = (std::__shared_weak_count *)v1[17];
    if (v7)
    {
      v8 = std::__shared_weak_count::lock(v7);
      v27 = v8;
      if (v8)
      {
        v9 = (_QWORD *)v1[16];
        v26 = v9;
        if (v9)
        {
          v10 = (_QWORD *)v9[6];
          v11 = (std::__shared_weak_count *)v9[7];
          __p[0] = v10;
          __p[1] = v11;
          if (v11)
          {
            p_shared_owners = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(p_shared_owners);
            while (__stxr(v13 + 1, p_shared_owners));
          }
          v14 = v10[37];
          if (v14)
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v14 + 120), 19);
          if (v11)
          {
            v15 = (unint64_t *)&v11->__shared_owners_;
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 - 1, v15));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v17 = v27;
          if (!v27)
            return;
        }
        else
        {
          v17 = v8;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v26, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v18 = ImsLogger::debug(ims::_logger, (uint64_t)&v26, (uint64_t)__p);
    if (!v1)
      __cxa_bad_typeid();
    v19 = v18;
    v20 = *(_QWORD **)(v18 + 8);
    v21 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, *(_QWORD *)(*(_QWORD *)(*v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v21);
    *(_BYTE *)(v19 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v19 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"handleSendAudioCallEventResp_block_invoke", 41);
    *(_BYTE *)(v19 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)" Success", 8);
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v19 + 17) = 0;
    if (v25 < 0)
      operator delete(__p[0]);
    if (v28 < 0)
      operator delete(v26);
  }
}

void sub_1BF047930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

__n128 QMIRTPCommandDriver::nameForRequestId(QMIRTPCommandDriver *this, int a2)
{
  QMIRTPCommandDriver *v3;
  __n128 result;
  const std::string::value_type *v5;
  std::string::size_type v6;
  uint64_t v7;
  __n128 *v8;
  __n128 *v9;
  __n128 *v10;
  unsigned int v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  v3 = this;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::string::basic_string[abi:ne180100]<0>(this, "Unknown");
  v5 = "ServiceSubscribeNotifications";
  v6 = 29;
  switch(a2)
  {
    case '>':
      if (*((char *)v3 + 23) < 0)
      {
        *((_QWORD *)v3 + 1) = 11;
        v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((_BYTE *)v3 + 23) = 11;
      }
      strcpy((char *)v3, "ServiceBind");
      return result;
    case '?':
      if (*((char *)v3 + 23) < 0)
      {
        *((_QWORD *)v3 + 1) = 17;
        v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((_BYTE *)v3 + 23) = 17;
      }
      *((_WORD *)v3 + 8) = 101;
      v8 = (__n128 *)"ServiceInitialize";
      goto LABEL_66;
    case '@':
      if (*((char *)v3 + 23) < 0)
      {
        *((_QWORD *)v3 + 1) = 19;
        v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((_BYTE *)v3 + 23) = 19;
      }
      *(_DWORD *)((char *)v3 + 15) = 1702521196;
      v9 = (__n128 *)"ServiceUninitialize";
      goto LABEL_47;
    case 'A':
      if (*((char *)v3 + 23) < 0)
      {
        *((_QWORD *)v3 + 1) = 17;
        v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((_BYTE *)v3 + 23) = 17;
      }
      *((_WORD *)v3 + 8) = 101;
      v8 = (__n128 *)"SessionInitialize";
      goto LABEL_66;
    case 'B':
      if (*((char *)v3 + 23) < 0)
      {
        *((_QWORD *)v3 + 1) = 19;
        v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((_BYTE *)v3 + 23) = 19;
      }
      *(_DWORD *)((char *)v3 + 15) = 1702521196;
      v9 = (__n128 *)"SessionUninitialize";
LABEL_47:
      result = *v9;
      *(__n128 *)v3 = *v9;
      *((_BYTE *)v3 + 19) = 0;
      return result;
    case 'C':
      if (*((char *)v3 + 23) < 0)
      {
        *((_QWORD *)v3 + 1) = 16;
        v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((_BYTE *)v3 + 23) = 16;
      }
      v10 = (__n128 *)"SessionConfigure";
      goto LABEL_52;
    case 'D':
      v5 = "SessionSetStreamDirection";
      v6 = 25;
      goto LABEL_36;
    case 'E':
      if (*((char *)v3 + 23) < 0)
      {
        *((_QWORD *)v3 + 1) = 17;
        v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((_BYTE *)v3 + 23) = 17;
      }
      *((_WORD *)v3 + 8) = 99;
      v8 = (__n128 *)"ServiceStartCodec";
LABEL_66:
      result = *v8;
      *(__n128 *)v3 = *v8;
      return result;
    case 'F':
      if (*((char *)v3 + 23) < 0)
      {
        *((_QWORD *)v3 + 1) = 16;
        v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((_BYTE *)v3 + 23) = 16;
      }
      v10 = (__n128 *)"ServiceStopCodec";
LABEL_52:
      result = *v10;
      *(__n128 *)v3 = *v10;
      *((_BYTE *)v3 + 16) = 0;
      return result;
    case 'G':
      v5 = "SessionConfigureRTCPReports";
      v6 = 27;
      goto LABEL_36;
    case 'H':
      if (*((char *)v3 + 23) < 0)
      {
        *((_QWORD *)v3 + 1) = 20;
        v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((_BYTE *)v3 + 23) = 20;
      }
      result.n128_u64[0] = *(_QWORD *)"ConfigureLinkMonitor";
      strcpy((char *)v3, "ConfigureLinkMonitor");
      return result;
    case 'I':
      goto LABEL_36;
    case 'J':
      if (*((char *)v3 + 23) < 0)
      {
        *((_QWORD *)v3 + 1) = 22;
        v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((_BYTE *)v3 + 23) = 22;
      }
      result.n128_u64[0] = *(_QWORD *)"ServiceErrorIndication";
      strcpy((char *)v3, "ServiceErrorIndication");
      return result;
    case 'K':
      v5 = "ServiceRTCPreportsIndication";
      v6 = 28;
      goto LABEL_36;
    case 'L':
      if (*((char *)v3 + 23) < 0)
      {
        *((_QWORD *)v3 + 1) = 8;
        v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((_BYTE *)v3 + 23) = 8;
      }
      v11 = 1684956499;
      goto LABEL_63;
    case 'M':
      if (*((char *)v3 + 23) < 0)
      {
        *((_QWORD *)v3 + 1) = 9;
        v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((_BYTE *)v3 + 23) = 9;
      }
      strcpy((char *)v3, "StartDTMF");
      return result;
    case 'N':
      if (*((char *)v3 + 23) < 0)
      {
        *((_QWORD *)v3 + 1) = 8;
        v3 = *(QMIRTPCommandDriver **)v3;
      }
      else
      {
        *((_BYTE *)v3 + 23) = 8;
      }
      v11 = 1886352467;
LABEL_63:
      *(_QWORD *)v3 = v11 | 0x464D544400000000;
      *((_BYTE *)v3 + 8) = 0;
      break;
    case 'O':
      v5 = "ServiceUninitializeAllSessions";
      v6 = 30;
LABEL_36:
      std::string::__assign_external((std::string *)v3, v5, v6);
      break;
    default:
      std::string::basic_string[abi:ne180100]<0>(v14, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v7 = ImsLogger::error(ims::_logger, (uint64_t)v14, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Couldn't find a QMI MS_EXT request with id: ", 44);
      *(_BYTE *)(v7 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v7 + 17) = 0;
      if (v13 < 0)
        operator delete(__p[0]);
      if (v15 < 0)
        operator delete(v14[0]);
      break;
  }
  return result;
}

void sub_1BF047DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver26registerAudioCodecChangeCbEj_block_invoke_2(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  uint64_t v10;

  if (*(_DWORD *)(a2 + 4))
  {
    v9[0] = 0;
    v9[1] = 0;
    v10 = 0;
    v2 = (char *)qmi::asString();
    std::string::basic_string[abi:ne180100]<0>(v9, v2);
    std::string::basic_string[abi:ne180100]<0>(v7, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::error(ims::_logger, (uint64_t)v7, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Failed to register audio codec change callback. Error ", 54);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 32))(v3, v9);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    if (v6 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(v7, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::debug(ims::_logger, (uint64_t)v9, (uint64_t)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Succesfully registered audio codec change callback", 50);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
  }
  if (v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
}

void sub_1BF047FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIRTPCommandDriver25setDownlinkDtmfIndicationEv_block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  tlv *v3;
  tlv *TlvValue;
  int v5;
  tlv *v6;
  int v7;
  __int16 v8;
  tlv *v9[7];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;

  v3 = *(tlv **)(a1 + 32);
  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(this);
  v6 = TlvValue;
  if (TlvValue)
  {
    v7 = v5;
    v9[0] = TlvValue;
    v8 = tlv::parseV<audio::tlv::DtmfEvent>(v9, v5);
    if (v9[0])
    {
      *((_BYTE *)v15 + 24) = v8;
      *((_BYTE *)v11 + 24) = HIBYTE(v8);
    }
    else
    {
      ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)this, 1, v6, v7);
    }
  }
  v9[0] = (tlv *)MEMORY[0x1E0C809B0];
  v9[1] = (tlv *)0x40000000;
  v9[2] = (tlv *)___ZN19QMIRTPCommandDriver28handleDownlinkDtmfIndicationERKN5audio12DownlinkDtmf10IndicationE_block_invoke_2;
  v9[3] = (tlv *)&unk_1E78D4A10;
  v9[4] = (tlv *)&v10;
  v9[5] = (tlv *)&v14;
  v9[6] = v3;
  ims::performBlock((IMSClientManager *)v9);
  _Block_object_dispose(&v10, 8);
  _Block_object_dispose(&v14, 8);
}

void sub_1BF048124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void ___ZN19QMIRTPCommandDriver28handleDownlinkDtmfIndicationERKN5audio12DownlinkDtmf10IndicationE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  RTPManager **v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = a1[6];
  v3 = *(std::__shared_weak_count **)(v2 + 136);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = *(RTPManager ***)(v2 + 128);
      if (v6)
        QMIRTPStackController::handleDownlinkDtmf(v6, *(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 24), *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24));
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF0481F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<RTCPReceiverReport>::__init_with_size[abi:ne180100]<RTCPReceiverReport*,RTCPReceiverReport*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<RTCPReceiverReport>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BF048270(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<RTCPReceiverReport>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x924924924924925)
    std::vector<RTCPReceiverReport>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RTCPReceiverReport>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[28 * v4];
  return result;
}

_QWORD *std::vector<RTCPSDesItem>::__init_with_size[abi:ne180100]<RTCPSDesItem*,RTCPSDesItem*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<RTCPSDesItem>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<RTCPSDesItem>,RTCPSDesItem*,RTCPSDesItem*,RTCPSDesItem*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BF048344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<RTCPSDesItem>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<RTCPSDesItem>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<RTCPSDesItem>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RTCPSDesItem>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void std::vector<RTCPSDesItem>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<RTCPSDesItem>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<RTCPSDesItem>,RTCPSDesItem*,RTCPSDesItem*,RTCPSDesItem*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  int v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a4;
  v14 = a4;
  v15 = a4;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a2 != a3)
  {
    v6 = (__int128 *)(a2 + 8);
    do
    {
      v8 = (uint64_t)v6 - 8;
      v7 = *((_DWORD *)v6 - 2);
      *(_BYTE *)(v4 + 4) = *((_BYTE *)v6 - 4);
      *(_DWORD *)v4 = v7;
      v9 = (std::string *)(v4 + 8);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v15;
      }
      else
      {
        v10 = *v6;
        *(_QWORD *)(v4 + 24) = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
      }
      v4 += 32;
      v15 = v4;
      v6 += 2;
    }
    while (v8 + 32 != a3);
  }
  LOBYTE(v13) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RTCPSDesItem>,RTCPSDesItem*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_1BF0484A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RTCPSDesItem>,RTCPSDesItem*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RTCPSDesItem>,RTCPSDesItem*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<RTCPSDesItem>,RTCPSDesItem*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<RTCPSDesItem>,RTCPSDesItem*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 32;
  }
}

void std::vector<RTCPSDesItem>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<RTCPSDesItem>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<RTCPSDesItem>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

uint64_t std::vector<RTCPSDesInfo>::__init_with_size[abi:ne180100]<RTCPSDesInfo*,RTCPSDesInfo*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  if (a4)
  {
    v4 = (_QWORD *)result;
    if (a4 >> 59)
      std::vector<RTCPSDesItem>::__throw_length_error[abi:ne180100]();
    v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<RTCPSDesItem>>(result + 16, a4);
    v8 = v7;
    *v4 = v7;
    v4[1] = v7;
    v4[2] = &v7[4 * v9];
    v12 = v7;
    v13 = v7;
    v10[0] = v4 + 2;
    v10[1] = &v12;
    v10[2] = &v13;
    v11 = 0;
    if (a2 != a3)
    {
      do
      {
        *(_DWORD *)v7 = *(_DWORD *)a2;
        v7[2] = 0;
        v7[3] = 0;
        v7[1] = 0;
        std::vector<RTCPSDesItem>::__init_with_size[abi:ne180100]<RTCPSDesItem*,RTCPSDesItem*>(v7 + 1, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 5);
        v7 = v13 + 4;
        v13 += 4;
        a2 += 32;
      }
      while (a2 != a3);
      v8 = v7;
    }
    LOBYTE(v11) = 1;
    result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RTCPSDesInfo>,RTCPSDesInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
    v4[1] = v8;
  }
  return result;
}

void sub_1BF0486AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<RTCPSDesInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RTCPSDesInfo>,RTCPSDesInfo*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 8);
    v3 = **(_QWORD **)(a1 + 16);
    if (v3 != v2)
    {
      do
      {
        v4 = v3 - 32;
        v6 = (void **)(v3 - 24);
        std::vector<RTCPSDesItem>::__destroy_vector::operator()[abi:ne180100](&v6);
        v3 = v4;
      }
      while (v4 != v2);
    }
  }
  return a1;
}

void std::vector<RTCPSDesInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 32;
        v7 = (void **)(v4 - 24);
        std::vector<RTCPSDesItem>::__destroy_vector::operator()[abi:ne180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::DownlinkDtmfIndEnable>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::DownlinkDtmfIndEnable>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::DownlinkDtmfIndEnable>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::DownlinkDtmfIndEnable>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78D4AB0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5audio12DownlinkDtmf8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1BF04890C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_0,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_0>,void ()(qmi::SubscriptionType)>::~__func()
{
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_0,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E78D4B10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_0,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E78D4B10;
  a2[1] = v2;
  return result;
}

void std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_0,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_0>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, _DWORD *a2)
{
  std::__shared_weak_count_vtbl *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  std::__shared_weak_count *on_zero_shared;
  std::__shared_weak_count *v9;
  void (__cdecl *v10)(std::__shared_weak_count *__hidden);
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  int v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  size_t v20;
  const void **v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  void *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52[2];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  void *__p[2];
  void (*v59)(uint64_t, QMIServiceMsg *);
  void *v60;
  __int128 *v61;

  v2 = *(std::__shared_weak_count_vtbl **)(a1 + 8);
  v3 = *a2 == 2;
  std::string::basic_string[abi:ne180100]<0>(&v54, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v54, (uint64_t)__p);
  if (!v2)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*((_QWORD *)v2->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*((_QWORD *)v2->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"started", 7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [instance=", 11);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (SHIBYTE(v59) < 0)
    operator delete(__p[0]);
  if (SBYTE7(v55) < 0)
    operator delete((void *)v54);
  on_zero_shared = (std::__shared_weak_count *)v2[3].__on_zero_shared;
  if (!on_zero_shared)
  {
    v9 = 0;
LABEL_35:
    std::string::basic_string[abi:ne180100]<0>(&v54, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v22 = ImsLogger::error(ims::_logger, (uint64_t)&v54, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"No controller associated with this command driver!", 50);
    *(_BYTE *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_36;
  }
  v9 = std::__shared_weak_count::lock(on_zero_shared);
  if (!v9)
    goto LABEL_35;
  v10 = v2[3].~__shared_weak_count_0;
  if (!v10)
    goto LABEL_35;
  v11 = (_QWORD *)*((_QWORD *)v10 + 15);
  v12 = (_QWORD *)((char *)v10 + 128);
  if (v11 != (_QWORD *)((char *)v10 + 128))
  {
    v13 = 0;
    while (1)
    {
      v56 = 0;
      v54 = 0u;
      v55 = 0u;
      if (*((char *)v11 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v54, (const std::string::value_type *)v11[4], v11[5]);
      }
      else
      {
        v54 = *((_OWORD *)v11 + 2);
        *(_QWORD *)&v55 = v11[6];
      }
      LODWORD(v56) = *((_DWORD *)v11 + 16);
      *((_QWORD *)&v55 + 1) = v11[7];
      v15 = HIDWORD(v55);
      v14 = (int)v56;
      if ((_DWORD)v56 == v3)
        v13 = HIDWORD(v55);
      if (SBYTE7(v55) < 0)
        operator delete((void *)v54);
      if (v14 == v3)
        break;
      v16 = (_QWORD *)v11[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v11[2];
          v18 = *v17 == (_QWORD)v11;
          v11 = v17;
        }
        while (!v18);
      }
      v11 = v17;
      if (v17 == v12)
      {
        if (!v13)
          goto LABEL_47;
        goto LABEL_26;
      }
    }
    if (!v15)
      goto LABEL_47;
LABEL_26:
    std::string::basic_string[abi:ne180100]<0>(&v54, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v19 = ImsLogger::debug(ims::_logger, (uint64_t)&v54, (uint64_t)__p);
    v20 = strlen((const char *)(*(_QWORD *)(*((_QWORD *)v2->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), *(_QWORD *)(*((_QWORD *)v2->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL, v20);
    *(_BYTE *)(v19 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v19 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"serviceBindReq", 14);
    *(_BYTE *)(v19 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)" [instance=", 11);
    *(_BYTE *)(v19 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v19 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v19 + 17) = 0;
    if (SHIBYTE(v59) < 0)
      operator delete(__p[0]);
    if (SBYTE7(v55) < 0)
      operator delete((void *)v54);
    *(_OWORD *)v52 = 0u;
    v53 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v52);
    v21 = (const void **)v52[1];
    if (v52[1] != (void *)v53)
    {
      while (*((_BYTE *)*v21 + 8) != 1)
      {
        if (++v21 == (const void **)v53)
          goto LABEL_51;
      }
    }
    if (v21 == (const void **)v53)
    {
LABEL_51:
      v27 = operator new();
      v28 = v27;
      *(_BYTE *)(v27 + 8) = 1;
      *(_QWORD *)v27 = &off_1E78D5148;
      *(_DWORD *)(v27 + 12) = 0;
      v26 = (_DWORD *)(v27 + 12);
      v29 = v53;
      if ((unint64_t)v53 >= *((_QWORD *)&v53 + 1))
      {
        v31 = (uint64_t)(v53 - (unint64_t)v52[1]) >> 3;
        if ((unint64_t)(v31 + 1) >> 61)
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        v32 = (uint64_t)(*((_QWORD *)&v53 + 1) - (unint64_t)v52[1]) >> 2;
        if (v32 <= v31 + 1)
          v32 = v31 + 1;
        if (*((_QWORD *)&v53 + 1) - (unint64_t)v52[1] >= 0x7FFFFFFFFFFFFFF8)
          v33 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v33 = v32;
        if (v33)
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v53 + 8, v33);
        else
          v34 = 0;
        v35 = (uint64_t *)&v34[8 * v31];
        v36 = &v34[8 * v33];
        *v35 = v28;
        v30 = v35 + 1;
        v38 = (char *)v52[1];
        v37 = (char *)v53;
        if ((void *)v53 != v52[1])
        {
          do
          {
            v39 = *((_QWORD *)v37 - 1);
            v37 -= 8;
            *--v35 = v39;
          }
          while (v37 != v38);
          v37 = (char *)v52[1];
        }
        v52[1] = v35;
        *(_QWORD *)&v53 = v30;
        *((_QWORD *)&v53 + 1) = v36;
        if (v37)
          operator delete(v37);
      }
      else
      {
        *(_QWORD *)v53 = v27;
        v30 = (_QWORD *)(v29 + 8);
      }
      *(_QWORD *)&v53 = v30;
    }
    else
    {
      if (!v25)
        __cxa_bad_cast();
      v26 = v25 + 12;
    }
    *v26 = v3;
    v40 = qmi::ClientRouter::get();
    v41 = operator new();
    *(_QWORD *)v41 = v40;
    *(_QWORD *)(v41 + 8) = QMIServiceMsg::create();
    *(_DWORD *)(v41 + 16) = 25000;
    *(_QWORD *)(v41 + 24) = 0;
    *(_QWORD *)(v41 + 32) = 0;
    v51 = v41;
    v42 = (std::__shared_weak_count *)operator new(0x28uLL);
    v42->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    v42->__shared_weak_owners_ = 0;
    v42->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D51B0;
    v42[1].__vftable = v2;
    LODWORD(v42[1].__shared_owners_) = v3;
    v44 = (void *)MEMORY[0x1E0C809B0];
    *(_QWORD *)&v54 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&v54 + 1) = 1174405120;
    *(_QWORD *)&v55 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver14serviceBindReqEjE3__0EEOS1_OT__block_invoke;
    *((_QWORD *)&v55 + 1) = &__block_descriptor_tmp_251;
    v56 = v42 + 1;
    v57 = v42;
    do
      v45 = __ldxr(p_shared_owners);
    while (__stxr(v45 + 1, p_shared_owners));
    __p[0] = v44;
    __p[1] = (void *)0x40000000;
    v59 = ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms11ServiceBind8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    v60 = &unk_1E78D51F8;
    v61 = &v54;
    *(_QWORD *)(v41 + 32) = _Block_copy(__p);
    v46 = v57;
    if (v57)
    {
      v47 = (unint64_t *)&v57->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
    v50 = v51;
    v51 = 0;
    if (v50)
      std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v51, v50);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v52);
    goto LABEL_41;
  }
LABEL_47:
  std::string::basic_string[abi:ne180100]<0>(&v54, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v22 = ImsLogger::error(ims::_logger, (uint64_t)&v54, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"QMI client is supposed to start only after VSID is retrieved. Do not proceed with Service Bind request.", 103);
  *(_BYTE *)(v22 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_36:
  *(_BYTE *)(v22 + 17) = 0;
  if (SHIBYTE(v59) < 0)
    operator delete(__p[0]);
  if (SBYTE7(v55) < 0)
    operator delete((void *)v54);
  if (v9)
  {
LABEL_41:
    v23 = (unint64_t *)&v9->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BF04919C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;

  v36 = a25;
  if (a25)
  {
    p_shared_owners = (unint64_t *)&a25->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  do
    v39 = __ldaxr(v34);
  while (__stlxr(v39 - 1, v34));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  if (a12)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v32, a12);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a13);
  if (v31)
  {
    v40 = (unint64_t *)&v31->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_0,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_0>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_0,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_0>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_1,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_1>,void ()(qmi::SubscriptionType)>::~__func()
{
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_1,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_1>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E78D4BA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_1,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_1>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E78D4BA0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_1,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_1>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  const ImsResult *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  int v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void *v20[2];
  char v21;

  v1 = *(_QWORD **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(v20, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v20, (uint64_t)__p);
  if (!v1)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"stopped", 7);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v16 < 0)
    operator delete(__p[0]);
  if (v21 < 0)
    operator delete(v20[0]);
  std::string::basic_string[abi:ne180100]<0>(v20, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::error(ims::_logger, (uint64_t)v20, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"driver on instance", 18);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" has stopped!", 13);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v16 < 0)
    operator delete(__p[0]);
  if (v21 < 0)
    operator delete(v20[0]);
  v7 = (std::__shared_weak_count *)v1[17];
  if (v7)
  {
    v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      v9 = v8;
      v10 = v1[16];
      if (v10)
      {
        std::__list_imp<unsigned long long>::clear(v1 + 10);
        v17 = 0u;
        v18 = 0u;
        v19 = 0u;
        __p[0] = &off_1E78B7238;
        __p[1] = &_bambiDomain;
        v15 = 1073741846;
        v11 = (const ImsResult *)ImsResult::operator<<<char [56]>((uint64_t)__p, "Baseband driver stopped, the baseband probably crashed.");
        ImsResult::ImsResult((ImsResult *)v20, v11);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 48))(v10, v20);
        ImsResult::~ImsResult((ImsResult *)v20);
        ImsResult::~ImsResult((ImsResult *)__p);
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BF049688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v29;

  ImsResult::~ImsResult((ImsResult *)&__p);
  ImsResult::~ImsResult((ImsResult *)&a9);
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  do
    v29 = __ldaxr(p_shared_owners);
  while (__stlxr(v29 - 1, p_shared_owners));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_1,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_1>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_1,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_1>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_2,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_2>,void ()(qmi::SubscriptionType)>::~__func()
{
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_2,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_2>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E78D4C20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_2,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_2>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E78D4C20;
  a2[1] = v2;
  return result;
}

void std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_2,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_2>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19[2];
  int v20;
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *__p[2];
  char v26;

  v1 = *(_QWORD **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(v19, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::error(ims::_logger, (uint64_t)v19, (uint64_t)__p);
  if (!v1)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"serverError", 11);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [instance=", 11);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v26 < 0)
    operator delete(__p[0]);
  if (v21 < 0)
    operator delete(v19[0]);
  v6 = (std::__shared_weak_count *)v1[17];
  if (v6)
  {
    v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      v8 = v7;
      v9 = (_QWORD *)v1[16];
      if (v9)
      {
        v10 = v9[6];
        v11 = (std::__shared_weak_count *)v9[7];
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldxr(p_shared_owners);
          while (__stxr(v13 + 1, p_shared_owners));
        }
        v14 = *(_QWORD *)(v10 + 296);
        if (v14)
          AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v14 + 120), 3);
        if (v11)
        {
          v15 = (unint64_t *)&v11->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        std::__list_imp<unsigned long long>::clear(v1 + 10);
        v22 = 0u;
        v24 = 0u;
        v23 = 0u;
        v19[0] = &off_1E78B7238;
        v19[1] = &_bambiDomain;
        v20 = 0x40000000;
        (*(void (**)(_QWORD *, void **))(*v9 + 48))(v9, v19);
        ImsResult::~ImsResult((ImsResult *)v19);
      }
      v17 = (unint64_t *)&v8->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1BF049A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;

  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v31 = (unint64_t *)&v26->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_2,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_2>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_2,std::allocator<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_2>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3 &&,QMIServiceMsg const)>::~__func()
{
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E78D4CA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3 &&,QMIServiceMsg const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E78D4CA0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int *a2, QMIServiceMsg *this)
{
  int v4;
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  uint64_t v12;
  __n128 v13;
  const char *v14;
  size_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  __n128 v28;
  __n128 v29;
  int v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int v39;
  BOOL v40;
  uint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  unsigned __int16 v44[2];
  int v45;
  void *v46[2];
  char v47;
  void *v48[2];
  char v49;
  void *__p;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, int);
  void *v53;
  void **v54;
  void *v55;
  void **v56;
  uint64_t v57;
  int v58;
  void *v59[2];
  char v60;

  v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v51 = 0;
    v52 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v44, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v44);
    if (__p)
    {
      v51 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v44);
  }
  v6 = *(_QWORD **)(a1 + 8);
  v7 = v4 == 2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&v55, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v55);
  if (!v6)
    __cxa_bad_typeid();
  v9 = v8;
  v10 = *(_QWORD **)(v8 + 8);
  v11 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v6 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, *(_QWORD *)(*(_QWORD *)(*v6 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"handleServiceInitializeIndication", 33);
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" [instance=", 11);
  *(_BYTE *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (SHIBYTE(v57) < 0)
    operator delete(v55);
  if (SHIBYTE(v52) < 0)
    operator delete(__p);
  if (v45)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&v55, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v12 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Error indication for request: ", 30);
    *(_BYTE *)(v12 + 17) = 0;
    v13 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v59, v44[0]);
    (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v12 + 32))(v12, v59, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)" error:", 7);
    *(_BYTE *)(v12 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)" reason: ", 9);
    *(_BYTE *)(v12 + 17) = 0;
    v14 = (const char *)qmi::asString();
    v15 = strlen(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)v14, v15);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    if (v60 < 0)
      operator delete(v59[0]);
    if (SHIBYTE(v57) < 0)
      operator delete(v55);
    if (SHIBYTE(v52) < 0)
      operator delete(__p);
    v16 = (std::__shared_weak_count *)v6[17];
    if (!v16)
      goto LABEL_50;
    v17 = std::__shared_weak_count::lock(v16);
    v51 = (uint64_t)v17;
    if (!v17)
      goto LABEL_50;
    v18 = (_QWORD *)v6[16];
    __p = v18;
    if (v18)
    {
      v19 = (_QWORD *)v18[6];
      v20 = (std::__shared_weak_count *)v18[7];
      v55 = v19;
      v56 = (void **)&v20->__vftable;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
      }
      v23 = v19[37];
      if (v23)
        AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v23 + 120), 24);
      if (v20)
      {
        v24 = (unint64_t *)&v20->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v26 = (std::__shared_weak_count *)v51;
      if (!v51)
        goto LABEL_50;
    }
    else
    {
      v26 = v17;
    }
    v31 = (unint64_t *)&v26->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
LABEL_50:
    v30 = 4;
    goto LABEL_51;
  }
  v55 = 0;
  v56 = &v55;
  v57 = 0x2000000000;
  v58 = 0;
  __p = (void *)MEMORY[0x1E0C809B0];
  v51 = 0x40000000;
  v52 = ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms17ServiceInitialize10IndicationEEENS1_9RTPStatusERKT__block_invoke;
  v53 = &unk_1E78D5368;
  v54 = &v55;
  v59[0] = &__p;
  qmi::MessageBase::applyTlv<ms::tlv::IndicationStatus,void({block_pointer})(ms::tlv::IndicationStatus)>((qmi::MessageBase *)v44, v59);
  if (*((_DWORD *)v56 + 6))
  {
    std::string::basic_string[abi:ne180100]<0>(v59, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(v48, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v27 = ImsLogger::error(ims::_logger, (uint64_t)v59, (uint64_t)v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"Error indication for request: ", 30);
    *(_BYTE *)(v27 + 17) = 0;
    v28 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v46, v44[0]);
    (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v27 + 32))(v27, v46, v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)" [error=", 8);
    *(_BYTE *)(v27 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v27 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v27 + 17) = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v59, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(v48, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v27 = ImsLogger::spam(ims::_logger, (uint64_t)v59, (uint64_t)v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"Success indication for request: ", 32);
    *(_BYTE *)(v27 + 17) = 0;
    v29 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v46, v44[0]);
    (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v27 + 32))(v27, v46, v29);
  }
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v27 + 17) = 0;
  if (v47 < 0)
    operator delete(v46[0]);
  if (v49 < 0)
    operator delete(v48[0]);
  if (v60 < 0)
    operator delete(v59[0]);
  v30 = *((_DWORD *)v56 + 6);
  _Block_object_dispose(&v55, 8);
LABEL_51:
  v33 = (std::__shared_weak_count *)v6[17];
  if (v33)
  {
    v34 = std::__shared_weak_count::lock(v33);
    v51 = (uint64_t)v34;
    if (v34)
    {
      v35 = v34;
      v36 = (_QWORD *)v6[16];
      __p = v36;
      if (v36)
      {
        v37 = v36[19];
        if (v37)
        {
          v38 = v36 + 19;
          do
          {
            v39 = *(_DWORD *)(v37 + 28);
            v40 = v39 >= v7;
            if (v39 >= v7)
              v41 = (uint64_t *)v37;
            else
              v41 = (uint64_t *)(v37 + 8);
            if (v40)
              v38 = (_QWORD *)v37;
            v37 = *v41;
          }
          while (*v41);
          if (v38 != v36 + 19 && *((_DWORD *)v38 + 7) <= v7 && *((_DWORD *)v38 + 8) == 1)
            QMIRTPStackController::handleStackInitializeResponse((uint64_t **)v36, v7, v30 == 0);
        }
      }
      v42 = (unint64_t *)&v35->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v44);
}

void sub_1BF04A27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_3 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4 &&,QMIServiceMsg const)>::~__func()
{
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E78D4D30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4 &&,QMIServiceMsg const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E78D4D30;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int a2, QMIServiceMsg *this)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint64_t v10;
  __n128 v11;
  const char *v12;
  size_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  __n128 v26;
  __n128 v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int16 v30[2];
  int v31;
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  void *__p;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, int);
  void *v39;
  void **v40;
  void *v41;
  void **v42;
  uint64_t v43;
  int v44;
  void *v45[2];
  char v46;

  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v37 = 0;
    v38 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v30, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v30);
    if (__p)
    {
      v37 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v30);
  }
  v5 = *(_QWORD **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&v41, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v41);
  if (!v5)
    __cxa_bad_typeid();
  v7 = v6;
  v8 = *(_QWORD **)(v6 + 8);
  v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)(*(_QWORD *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"handleServiceUninitializeIndication", 35);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (SHIBYTE(v43) < 0)
    operator delete(v41);
  if (SHIBYTE(v38) < 0)
    operator delete(__p);
  if (v31)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&v41, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Error indication for request: ", 30);
    *(_BYTE *)(v10 + 17) = 0;
    v11 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v45, v30[0]);
    (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v10 + 32))(v10, v45, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" error:", 7);
    *(_BYTE *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" reason: ", 9);
    *(_BYTE *)(v10 + 17) = 0;
    v12 = (const char *)qmi::asString();
    v13 = strlen(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)v12, v13);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (v46 < 0)
      operator delete(v45[0]);
    if (SHIBYTE(v43) < 0)
      operator delete(v41);
    if (SHIBYTE(v38) < 0)
      operator delete(__p);
    v14 = (std::__shared_weak_count *)v5[17];
    if (v14)
    {
      v15 = std::__shared_weak_count::lock(v14);
      v37 = (uint64_t)v15;
      if (v15)
      {
        v16 = (_QWORD *)v5[16];
        __p = v16;
        if (v16)
        {
          v17 = (_QWORD *)v16[6];
          v18 = (std::__shared_weak_count *)v16[7];
          v41 = v17;
          v42 = (void **)&v18->__vftable;
          if (v18)
          {
            p_shared_owners = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldxr(p_shared_owners);
            while (__stxr(v20 + 1, p_shared_owners));
          }
          v21 = v17[37];
          if (v21)
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v21 + 120), 24);
          if (v18)
          {
            v22 = (unint64_t *)&v18->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
          v24 = (std::__shared_weak_count *)v37;
          if (!v37)
            goto LABEL_50;
        }
        else
        {
          v24 = v15;
        }
        v28 = (unint64_t *)&v24->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
  }
  else
  {
    v41 = 0;
    v42 = &v41;
    v43 = 0x2000000000;
    v44 = 0;
    __p = (void *)MEMORY[0x1E0C809B0];
    v37 = 0x40000000;
    v38 = ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms19ServiceUninitialize10IndicationEEENS1_9RTPStatusERKT__block_invoke;
    v39 = &unk_1E78D5390;
    v40 = &v41;
    v45[0] = &__p;
    qmi::MessageBase::applyTlv<ms::tlv::IndicationStatus,void({block_pointer})(ms::tlv::IndicationStatus)>((qmi::MessageBase *)v30, v45);
    if (*((_DWORD *)v42 + 6))
    {
      std::string::basic_string[abi:ne180100]<0>(v45, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(v34, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v25 = ImsLogger::error(ims::_logger, (uint64_t)v45, (uint64_t)v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"Error indication for request: ", 30);
      *(_BYTE *)(v25 + 17) = 0;
      v26 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v32, v30[0]);
      (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v25 + 32))(v25, v32, v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)" [error=", 8);
      *(_BYTE *)(v25 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v25 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"]", 1);
      *(_BYTE *)(v25 + 17) = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v45, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(v34, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v25 = ImsLogger::spam(ims::_logger, (uint64_t)v45, (uint64_t)v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"Success indication for request: ", 32);
      *(_BYTE *)(v25 + 17) = 0;
      v27 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v32, v30[0]);
      (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v25 + 32))(v25, v32, v27);
    }
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v25 + 17) = 0;
    if (v33 < 0)
      operator delete(v32[0]);
    if (v35 < 0)
      operator delete(v34[0]);
    if (v46 < 0)
      operator delete(v45[0]);
    _Block_object_dispose(&v41, 8);
  }
LABEL_50:
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v30);
}

void sub_1BF04AA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v30 - 104);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_4 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5 &&,QMIServiceMsg const)>::~__func()
{
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E78D4DB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5 &&,QMIServiceMsg const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E78D4DB0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int a2, QMIServiceMsg *this)
{
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  __n128 v8;
  const char *v9;
  size_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  _QWORD *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  __n128 v23;
  __n128 v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  void *TlvValue;
  int v29;
  void *v30;
  int v31;
  uint64_t v32;
  __n128 v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  size_t v38;
  unsigned __int16 v39[2];
  int v40;
  void *__p;
  uint64_t v42;
  void *v43;
  void *v44;
  void **v45;
  uint64_t *v46;
  _QWORD *v47;
  int v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  char v57;
  _QWORD v58[4];
  void *v59[2];
  char v60;
  void *v61[2];
  char v62;
  void *v63[2];
  char v64;
  void **p_p;
  void ***p_p_p;
  uint64_t v67;
  char v68;

  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v42 = 0;
    v43 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v39, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v39);
    if (__p)
    {
      v42 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v39);
  }
  v5 = *(_QWORD **)(a1 + 8);
  v58[0] = 0;
  v58[1] = v58;
  v58[2] = 0x2000000000;
  v58[3] = 0;
  v54 = 0;
  v55 = &v54;
  v56 = 0x2000000000;
  v57 = 0;
  v6 = (void *)MEMORY[0x1E0C809B0];
  if (v40)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&v49, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Error indication for request: ", 30);
    *(_BYTE *)(v7 + 17) = 0;
    v8 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)&p_p, v39[0]);
    (*(void (**)(uint64_t, void ***, __n128))(*(_QWORD *)v7 + 32))(v7, &p_p, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" error:", 7);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" reason: ", 9);
    *(_BYTE *)(v7 + 17) = 0;
    v9 = (const char *)qmi::asString();
    v10 = strlen(v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)v9, v10);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (SHIBYTE(v67) < 0)
      operator delete(p_p);
    if (SHIBYTE(v51) < 0)
      operator delete(v49);
    if (SHIBYTE(v43) < 0)
      operator delete(__p);
    v11 = (std::__shared_weak_count *)v5[17];
    if (!v11)
      goto LABEL_45;
    v12 = std::__shared_weak_count::lock(v11);
    v42 = (uint64_t)v12;
    if (!v12)
      goto LABEL_45;
    v13 = (_QWORD *)v5[16];
    __p = v13;
    if (v13)
    {
      v14 = (_QWORD *)v13[6];
      v15 = (std::__shared_weak_count *)v13[7];
      v49 = v14;
      v50 = (uint64_t)v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      v18 = v14[37];
      if (v18)
        AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v18 + 120), 24);
      if (v15)
      {
        v19 = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v21 = (std::__shared_weak_count *)v42;
      if (!v42)
        goto LABEL_45;
    }
    else
    {
      v21 = v12;
    }
    v26 = (unint64_t *)&v21->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
LABEL_45:
    v25 = 4;
    goto LABEL_46;
  }
  v49 = 0;
  v50 = (uint64_t)&v49;
  v51 = 0x2000000000;
  LODWORD(v52) = 0;
  __p = (void *)MEMORY[0x1E0C809B0];
  v42 = 0x40000000;
  v43 = ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms17SessionInitialize10IndicationEEENS1_9RTPStatusERKT__block_invoke;
  v44 = &unk_1E78D5690;
  v45 = &v49;
  p_p = &__p;
  qmi::MessageBase::applyTlv<ms::tlv::IndicationStatus,void({block_pointer})(ms::tlv::IndicationStatus)>((qmi::MessageBase *)v39, &p_p);
  if (*(_DWORD *)(v50 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(&p_p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(v63, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v22 = ImsLogger::error(ims::_logger, (uint64_t)&p_p, (uint64_t)v63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"Error indication for request: ", 30);
    *(_BYTE *)(v22 + 17) = 0;
    v23 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v61, v39[0]);
    (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v22 + 32))(v22, v61, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)" [error=", 8);
    *(_BYTE *)(v22 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v22 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v22 + 17) = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&p_p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(v63, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v22 = ImsLogger::spam(ims::_logger, (uint64_t)&p_p, (uint64_t)v63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"Success indication for request: ", 32);
    *(_BYTE *)(v22 + 17) = 0;
    v24 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v61, v39[0]);
    (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v22 + 32))(v22, v61, v24);
  }
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v22 + 17) = 0;
  if (v62 < 0)
    operator delete(v61[0]);
  if (v64 < 0)
    operator delete(v63[0]);
  if (SHIBYTE(v67) < 0)
    operator delete(p_p);
  v25 = *(_DWORD *)(v50 + 24);
  _Block_object_dispose(&v49, 8);
LABEL_46:
  v49 = v6;
  v50 = 0x40000000;
  v51 = (uint64_t)___ZN19QMIRTPCommandDriver33handleSessionInitializeIndicationERKN2ms17SessionInitialize10IndicationE_block_invoke;
  v52 = &unk_1E78D4218;
  v53 = v58;
  TlvValue = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v39);
  v30 = TlvValue;
  if (TlvValue)
  {
    v31 = v29;
    __p = TlvValue;
    LODWORD(p_p) = tlv::parseV<ms::tlv::ServiceAppData>((tlv **)&__p, v29);
    if (__p)
      ((void (*)(void **, void ***))v51)(&v49, &p_p);
    else
      ((void (*)(_QWORD, uint64_t, void *, _QWORD))*MEMORY[0x1E0DE2D28])(v39[0], 17, v30, v31);
  }
  p_p = 0;
  p_p_p = &p_p;
  v67 = 0x2000000000;
  v68 = 0;
  __p = v6;
  v42 = 0x40000000;
  v43 = ___ZN19QMIRTPCommandDriver26getSessionIdFromIndicationIN2ms17SessionInitialize10IndicationEEEhRKT__block_invoke;
  v44 = &unk_1E78D56B8;
  v45 = (void **)&p_p;
  v63[0] = &__p;
  qmi::MessageBase::applyTlv<ms::tlv::RTPSessionIdentifier,void({block_pointer})(ms::tlv::RTPSessionIdentifier)>((qmi::MessageBase *)v39, 16, v63);
  std::string::basic_string[abi:ne180100]<0>(v63, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(v61, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v32 = ImsLogger::spam(ims::_logger, (uint64_t)v63, (uint64_t)v61);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"Indication: ", 12);
  *(_BYTE *)(v32 + 17) = 0;
  v33 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v59, v39[0]);
  (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v32 + 32))(v32, v59, v33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)", with qmiSession Id: ", 22);
  *(_BYTE *)(v32 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v32 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v32 + 17) = 0;
  if (v60 < 0)
    operator delete(v59[0]);
  if (v62 < 0)
    operator delete(v61[0]);
  if (v64 < 0)
    operator delete(v63[0]);
  v34 = *((_BYTE *)p_p_p + 24);
  _Block_object_dispose(&p_p, 8);
  *((_BYTE *)v55 + 24) = v34;
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&p_p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v35 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&p_p);
  if (!v5)
    __cxa_bad_typeid();
  v36 = v35;
  v37 = *(_QWORD **)(v35 + 8);
  v38 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, *(_QWORD *)(*(_QWORD *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v38);
  *(_BYTE *)(v36 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v36 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"handleSessionInitializeIndication", 33);
  *(_BYTE *)(v36 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v36 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v36 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)" qmiSessionId=", 14);
  *(_BYTE *)(v36 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v36 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v36 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v36 + 17) = 0;
  if (SHIBYTE(v67) < 0)
    operator delete(p_p);
  if (SHIBYTE(v43) < 0)
    operator delete(__p);
  __p = v6;
  v42 = 0x40000000;
  v43 = ___ZN19QMIRTPCommandDriver33handleSessionInitializeIndicationERKN2ms17SessionInitialize10IndicationE_block_invoke_2;
  v44 = &unk_1E78D4240;
  v45 = (void **)v58;
  v46 = &v54;
  v47 = v5;
  v48 = v25;
  ims::performBlock((IMSClientManager *)&__p);
  _Block_object_dispose(&v54, 8);
  _Block_object_dispose(v58, 8);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v39);
}

void sub_1BF04B4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a36, 8);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_5 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6 &&,QMIServiceMsg const)>::~__func()
{
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E78D4E30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6 &&,QMIServiceMsg const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E78D4E30;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int a2, QMIServiceMsg *this)
{
  void **v5;
  void *v6;
  uint64_t v7;
  __n128 v8;
  const char *v9;
  size_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  _QWORD *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  __n128 v23;
  __n128 v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  __n128 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  size_t v34;
  unsigned __int16 v35[2];
  int v36;
  void *__p;
  uint64_t v38;
  void *v39;
  void *v40;
  void **v41;
  int v42;
  char v43;
  void *v44[2];
  char v45;
  void *v46[2];
  char v47;
  void *v48[2];
  char v49;
  void *v50;
  void **v51;
  uint64_t v52;
  int v53;

  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v38 = 0;
    v39 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v35, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v35);
    if (__p)
    {
      v38 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v35);
  }
  v5 = *(void ***)(a1 + 8);
  v6 = (void *)MEMORY[0x1E0C809B0];
  if (v36)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&v50, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Error indication for request: ", 30);
    *(_BYTE *)(v7 + 17) = 0;
    v8 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v48, v35[0]);
    (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v7 + 32))(v7, v48, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" error:", 7);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" reason: ", 9);
    *(_BYTE *)(v7 + 17) = 0;
    v9 = (const char *)qmi::asString();
    v10 = strlen(v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)v9, v10);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v49 < 0)
      operator delete(v48[0]);
    if (SHIBYTE(v52) < 0)
      operator delete(v50);
    if (SHIBYTE(v39) < 0)
      operator delete(__p);
    v11 = (std::__shared_weak_count *)v5[17];
    if (!v11)
      goto LABEL_45;
    v12 = std::__shared_weak_count::lock(v11);
    v38 = (uint64_t)v12;
    if (!v12)
      goto LABEL_45;
    v13 = v5[16];
    __p = v13;
    if (v13)
    {
      v14 = (_QWORD *)v13[6];
      v15 = (std::__shared_weak_count *)v13[7];
      v50 = v14;
      v51 = (void **)&v15->__vftable;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      v18 = v14[37];
      if (v18)
        AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v18 + 120), 24);
      if (v15)
      {
        v19 = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v21 = (std::__shared_weak_count *)v38;
      if (!v38)
        goto LABEL_45;
    }
    else
    {
      v21 = v12;
    }
    v26 = (unint64_t *)&v21->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
LABEL_45:
    v25 = 4;
    goto LABEL_46;
  }
  v50 = 0;
  v51 = &v50;
  v52 = 0x2000000000;
  v53 = 0;
  __p = (void *)MEMORY[0x1E0C809B0];
  v38 = 0x40000000;
  v39 = ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms19SessionUninitialize10IndicationEEENS1_9RTPStatusERKT__block_invoke;
  v40 = &unk_1E78D57D8;
  v41 = &v50;
  v48[0] = &__p;
  qmi::MessageBase::applyTlv<ms::tlv::IndicationStatus,void({block_pointer})(ms::tlv::IndicationStatus)>((qmi::MessageBase *)v35, v48);
  if (*((_DWORD *)v51 + 6))
  {
    std::string::basic_string[abi:ne180100]<0>(v48, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(v46, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v22 = ImsLogger::error(ims::_logger, (uint64_t)v48, (uint64_t)v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"Error indication for request: ", 30);
    *(_BYTE *)(v22 + 17) = 0;
    v23 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v44, v35[0]);
    (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v22 + 32))(v22, v44, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)" [error=", 8);
    *(_BYTE *)(v22 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v22 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v22 + 17) = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v48, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(v46, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v22 = ImsLogger::spam(ims::_logger, (uint64_t)v48, (uint64_t)v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"Success indication for request: ", 32);
    *(_BYTE *)(v22 + 17) = 0;
    v24 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v44, v35[0]);
    (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v22 + 32))(v22, v44, v24);
  }
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v22 + 17) = 0;
  if (v45 < 0)
    operator delete(v44[0]);
  if (v47 < 0)
    operator delete(v46[0]);
  if (v49 < 0)
    operator delete(v48[0]);
  v25 = *((_DWORD *)v51 + 6);
  _Block_object_dispose(&v50, 8);
LABEL_46:
  v50 = 0;
  v51 = &v50;
  v52 = 0x2000000000;
  LOBYTE(v53) = 0;
  __p = v6;
  v38 = 0x40000000;
  v39 = ___ZN19QMIRTPCommandDriver26getSessionIdFromIndicationIN2ms19SessionUninitialize10IndicationEEEhRKT__block_invoke;
  v40 = &unk_1E78D5800;
  v41 = &v50;
  v48[0] = &__p;
  qmi::MessageBase::applyTlv<ms::tlv::RTPSessionIdentifier,void({block_pointer})(ms::tlv::RTPSessionIdentifier)>((qmi::MessageBase *)v35, 2, v48);
  std::string::basic_string[abi:ne180100]<0>(v48, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(v46, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v28 = ImsLogger::spam(ims::_logger, (uint64_t)v48, (uint64_t)v46);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"Indication: ", 12);
  *(_BYTE *)(v28 + 17) = 0;
  v29 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v44, v35[0]);
  (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v28 + 32))(v28, v44, v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)", with qmiSession Id: ", 22);
  *(_BYTE *)(v28 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v28 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v28 + 17) = 0;
  if (v45 < 0)
    operator delete(v44[0]);
  if (v47 < 0)
    operator delete(v46[0]);
  if (v49 < 0)
    operator delete(v48[0]);
  v30 = *((_BYTE *)v51 + 24);
  _Block_object_dispose(&v50, 8);
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&v50, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v31 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v50);
  if (!v5)
    __cxa_bad_typeid();
  v32 = v31;
  v33 = *(_QWORD **)(v31 + 8);
  v34 = strlen((const char *)(*(_QWORD *)(*((_QWORD *)*v5 - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, *(_QWORD *)(*((_QWORD *)*v5 - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL, v34);
  *(_BYTE *)(v32 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v32 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"handleSessionUninitializeIndication", 35);
  *(_BYTE *)(v32 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)" [qmiSessionId=", 15);
  *(_BYTE *)(v32 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v32 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v32 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v32 + 17) = 0;
  if (SHIBYTE(v52) < 0)
    operator delete(v50);
  if (SHIBYTE(v39) < 0)
    operator delete(__p);
  __p = v6;
  v38 = 0x40000000;
  v39 = ___ZN19QMIRTPCommandDriver35handleSessionUninitializeIndicationERKN2ms19SessionUninitialize10IndicationE_block_invoke;
  v40 = &__block_descriptor_tmp_83;
  v41 = v5;
  v43 = v30;
  v42 = v25;
  ims::performBlock((IMSClientManager *)&__p);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v35);
}

void sub_1BF04BF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v38 - 128);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_6 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7 &&,QMIServiceMsg const)>::~__func()
{
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E78D4EB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7 &&,QMIServiceMsg const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E78D4EB0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int a2, QMIServiceMsg *this)
{
  void **v5;
  void *v6;
  uint64_t v7;
  __n128 v8;
  const char *v9;
  size_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  _QWORD *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  __n128 v23;
  __n128 v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  __n128 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  size_t v34;
  unsigned __int16 v35[2];
  int v36;
  void *__p;
  uint64_t v38;
  void *v39;
  void *v40;
  void **v41;
  int v42;
  char v43;
  void *v44[2];
  char v45;
  void *v46[2];
  char v47;
  void *v48[2];
  char v49;
  void *v50;
  void **v51;
  uint64_t v52;
  int v53;

  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v38 = 0;
    v39 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v35, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v35);
    if (__p)
    {
      v38 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v35);
  }
  v5 = *(void ***)(a1 + 8);
  v6 = (void *)MEMORY[0x1E0C809B0];
  if (v36)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&v50, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Error indication for request: ", 30);
    *(_BYTE *)(v7 + 17) = 0;
    v8 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v48, v35[0]);
    (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v7 + 32))(v7, v48, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" error:", 7);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" reason: ", 9);
    *(_BYTE *)(v7 + 17) = 0;
    v9 = (const char *)qmi::asString();
    v10 = strlen(v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)v9, v10);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v49 < 0)
      operator delete(v48[0]);
    if (SHIBYTE(v52) < 0)
      operator delete(v50);
    if (SHIBYTE(v39) < 0)
      operator delete(__p);
    v11 = (std::__shared_weak_count *)v5[17];
    if (!v11)
      goto LABEL_45;
    v12 = std::__shared_weak_count::lock(v11);
    v38 = (uint64_t)v12;
    if (!v12)
      goto LABEL_45;
    v13 = v5[16];
    __p = v13;
    if (v13)
    {
      v14 = (_QWORD *)v13[6];
      v15 = (std::__shared_weak_count *)v13[7];
      v50 = v14;
      v51 = (void **)&v15->__vftable;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      v18 = v14[37];
      if (v18)
        AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v18 + 120), 24);
      if (v15)
      {
        v19 = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v21 = (std::__shared_weak_count *)v38;
      if (!v38)
        goto LABEL_45;
    }
    else
    {
      v21 = v12;
    }
    v26 = (unint64_t *)&v21->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
LABEL_45:
    v25 = 4;
    goto LABEL_46;
  }
  v50 = 0;
  v51 = &v50;
  v52 = 0x2000000000;
  v53 = 0;
  __p = (void *)MEMORY[0x1E0C809B0];
  v38 = 0x40000000;
  v39 = ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms16SessionConfigure10IndicationEEENS1_9RTPStatusERKT__block_invoke;
  v40 = &unk_1E78D58D0;
  v41 = &v50;
  v48[0] = &__p;
  qmi::MessageBase::applyTlv<ms::tlv::IndicationStatus,void({block_pointer})(ms::tlv::IndicationStatus)>((qmi::MessageBase *)v35, v48);
  if (*((_DWORD *)v51 + 6))
  {
    std::string::basic_string[abi:ne180100]<0>(v48, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(v46, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v22 = ImsLogger::error(ims::_logger, (uint64_t)v48, (uint64_t)v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"Error indication for request: ", 30);
    *(_BYTE *)(v22 + 17) = 0;
    v23 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v44, v35[0]);
    (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v22 + 32))(v22, v44, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)" [error=", 8);
    *(_BYTE *)(v22 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v22 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v22 + 17) = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v48, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(v46, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v22 = ImsLogger::spam(ims::_logger, (uint64_t)v48, (uint64_t)v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"Success indication for request: ", 32);
    *(_BYTE *)(v22 + 17) = 0;
    v24 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v44, v35[0]);
    (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v22 + 32))(v22, v44, v24);
  }
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v22 + 17) = 0;
  if (v45 < 0)
    operator delete(v44[0]);
  if (v47 < 0)
    operator delete(v46[0]);
  if (v49 < 0)
    operator delete(v48[0]);
  v25 = *((_DWORD *)v51 + 6);
  _Block_object_dispose(&v50, 8);
LABEL_46:
  v50 = 0;
  v51 = &v50;
  v52 = 0x2000000000;
  LOBYTE(v53) = 0;
  __p = v6;
  v38 = 0x40000000;
  v39 = ___ZN19QMIRTPCommandDriver26getSessionIdFromIndicationIN2ms16SessionConfigure10IndicationEEEhRKT__block_invoke;
  v40 = &unk_1E78D58F8;
  v41 = &v50;
  v48[0] = &__p;
  qmi::MessageBase::applyTlv<ms::tlv::RTPSessionIdentifier,void({block_pointer})(ms::tlv::RTPSessionIdentifier)>((qmi::MessageBase *)v35, 2, v48);
  std::string::basic_string[abi:ne180100]<0>(v48, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(v46, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v28 = ImsLogger::spam(ims::_logger, (uint64_t)v48, (uint64_t)v46);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"Indication: ", 12);
  *(_BYTE *)(v28 + 17) = 0;
  v29 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v44, v35[0]);
  (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v28 + 32))(v28, v44, v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)", with qmiSession Id: ", 22);
  *(_BYTE *)(v28 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v28 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v28 + 17) = 0;
  if (v45 < 0)
    operator delete(v44[0]);
  if (v47 < 0)
    operator delete(v46[0]);
  if (v49 < 0)
    operator delete(v48[0]);
  v30 = *((_BYTE *)v51 + 24);
  _Block_object_dispose(&v50, 8);
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&v50, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v31 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v50);
  if (!v5)
    __cxa_bad_typeid();
  v32 = v31;
  v33 = *(_QWORD **)(v31 + 8);
  v34 = strlen((const char *)(*(_QWORD *)(*((_QWORD *)*v5 - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, *(_QWORD *)(*((_QWORD *)*v5 - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL, v34);
  *(_BYTE *)(v32 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v32 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"handleSessionConfigureIndication", 32);
  *(_BYTE *)(v32 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)" [qmiSessionId=", 15);
  *(_BYTE *)(v32 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v32 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v32 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v32 + 17) = 0;
  if (SHIBYTE(v52) < 0)
    operator delete(v50);
  if (SHIBYTE(v39) < 0)
    operator delete(__p);
  __p = v6;
  v38 = 0x40000000;
  v39 = ___ZN19QMIRTPCommandDriver32handleSessionConfigureIndicationERKN2ms16SessionConfigure10IndicationE_block_invoke;
  v40 = &__block_descriptor_tmp_87_0;
  v41 = v5;
  v43 = v30;
  v42 = v25;
  ims::performBlock((IMSClientManager *)&__p);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v35);
}

void sub_1BF04C8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v38 - 128);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_7 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8 &&,QMIServiceMsg const)>::~__func()
{
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E78D4F30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8 &&,QMIServiceMsg const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E78D4F30;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int a2, QMIServiceMsg *this)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  __n128 v8;
  char v9;
  void *TlvValue;
  int v11;
  void *v12;
  int v13;
  unsigned __int16 v14[12];
  void *__p;
  uint64_t v16;
  void *v17;
  void *v18;
  void **v19;
  uint64_t v20;
  char v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void **v26;
  void *v27[2];
  uint64_t v28;
  int v29;
  void *v30[2];
  char v31;
  void *v32[2];
  char v33;

  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v16 = 0;
    v17 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v14, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v14);
    if (__p)
    {
      v16 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v14);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v22 = 0;
  v23 = (uint64_t)&v22;
  v24 = 0x2000000000;
  LOBYTE(v25) = 0;
  v6 = (void *)MEMORY[0x1E0C809B0];
  __p = (void *)MEMORY[0x1E0C809B0];
  v16 = 0x40000000;
  v17 = ___ZN19QMIRTPCommandDriver26getSessionIdFromIndicationIN2ms17SessionInactivity10IndicationEEEhRKT__block_invoke;
  v18 = &unk_1E78D5D78;
  v19 = &v22;
  v27[0] = &__p;
  qmi::MessageBase::applyTlv<ms::tlv::RTPSessionIdentifier,void({block_pointer})(ms::tlv::RTPSessionIdentifier)>((qmi::MessageBase *)v14, 1, v27);
  std::string::basic_string[abi:ne180100]<0>(v27, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(v32, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::spam(ims::_logger, (uint64_t)v27, (uint64_t)v32);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Indication: ", 12);
  *(_BYTE *)(v7 + 17) = 0;
  v8 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v30, v14[0]);
  (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v7 + 32))(v7, v30, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)", with qmiSession Id: ", 22);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v31 < 0)
    operator delete(v30[0]);
  if (v33 < 0)
    operator delete(v32[0]);
  if (SHIBYTE(v28) < 0)
    operator delete(v27[0]);
  v9 = *(_BYTE *)(v23 + 24);
  _Block_object_dispose(&v22, 8);
  v27[0] = 0;
  v27[1] = v27;
  v28 = 0x2000000000;
  v29 = 255;
  v22 = v6;
  v23 = 0x40000000;
  v24 = (uint64_t)___ZN19QMIRTPCommandDriver33handleSessionInactivityIndicationERKN2ms17SessionInactivity10IndicationE_block_invoke;
  v25 = &unk_1E78D4590;
  v26 = v27;
  TlvValue = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v14);
  v12 = TlvValue;
  if (TlvValue)
  {
    v13 = v11;
    __p = TlvValue;
    LODWORD(v32[0]) = tlv::parseV<ms::tlv::SessionInactivityType>((tlv **)&__p, v11);
    if (__p)
      ___ZN19QMIRTPCommandDriver33handleSessionInactivityIndicationERKN2ms17SessionInactivity10IndicationE_block_invoke((uint64_t)&v22, v32);
    else
      ((void (*)(_QWORD, uint64_t, void *, _QWORD))*MEMORY[0x1E0DE2D28])(v14[0], 2, v12, v13);
  }
  __p = v6;
  v16 = 0x40000000;
  v17 = ___ZN19QMIRTPCommandDriver33handleSessionInactivityIndicationERKN2ms17SessionInactivity10IndicationE_block_invoke_2;
  v18 = &unk_1E78D45B8;
  v19 = v27;
  v20 = v5;
  v21 = v9;
  ims::performBlock((IMSClientManager *)&__p);
  _Block_object_dispose(v27, 8);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v14);
}

void sub_1BF04CDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_8 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9 &&,QMIServiceMsg const)>::~__func()
{
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E78D4FB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9 &&,QMIServiceMsg const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E78D4FB0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int a2, QMIServiceMsg *this)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  __n128 v8;
  const char *v9;
  size_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  __n128 v26;
  __n128 v27;
  uint64_t v28;
  __n128 v29;
  char v30;
  unsigned __int16 v31[2];
  int v32;
  void *__p;
  uint64_t v34;
  void *v35;
  void *v36;
  void **v37;
  int v38;
  char v39;
  void *v40[2];
  char v41;
  void *v42[2];
  char v43;
  void *v44[2];
  char v45;
  void *v46;
  void **v47;
  uint64_t v48;
  int v49;

  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v34 = 0;
    v35 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v31, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v31);
    if (__p)
    {
      v34 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v31);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (void *)MEMORY[0x1E0C809B0];
  if (v32)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&v46, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Error indication for request: ", 30);
    *(_BYTE *)(v7 + 17) = 0;
    v8 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v44, v31[0]);
    (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v7 + 32))(v7, v44, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" error:", 7);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" reason: ", 9);
    *(_BYTE *)(v7 + 17) = 0;
    v9 = (const char *)qmi::asString();
    v10 = strlen(v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)v9, v10);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v45 < 0)
      operator delete(v44[0]);
    if (SHIBYTE(v48) < 0)
      operator delete(v46);
    if (SHIBYTE(v35) < 0)
      operator delete(__p);
    v11 = *(std::__shared_weak_count **)(v5 + 136);
    if (v11)
    {
      v12 = std::__shared_weak_count::lock(v11);
      if (v12)
      {
        v13 = v12;
        v14 = *(_QWORD *)(v5 + 128);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 48);
          v16 = *(std::__shared_weak_count **)(v14 + 56);
          if (v16)
          {
            p_shared_owners = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldxr(p_shared_owners);
            while (__stxr(v18 + 1, p_shared_owners));
          }
          v19 = *(_QWORD *)(v15 + 296);
          if (v19)
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v19 + 120), 24);
          if (v16)
          {
            v20 = (unint64_t *)&v16->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
        v22 = (unint64_t *)&v13->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    v24 = 4;
  }
  else
  {
    v46 = 0;
    v47 = &v46;
    v48 = 0x2000000000;
    v49 = 0;
    __p = (void *)MEMORY[0x1E0C809B0];
    v34 = 0x40000000;
    v35 = ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms12ServiceError10IndicationEEENS1_9RTPStatusERKT__block_invoke;
    v36 = &unk_1E78D5E98;
    v37 = &v46;
    v44[0] = &__p;
    qmi::MessageBase::applyTlv<ms::tlv::IndicationStatus,void({block_pointer})(ms::tlv::IndicationStatus)>((qmi::MessageBase *)v31, v44);
    if (*((_DWORD *)v47 + 6))
    {
      std::string::basic_string[abi:ne180100]<0>(v44, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(v42, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v25 = ImsLogger::error(ims::_logger, (uint64_t)v44, (uint64_t)v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"Error indication for request: ", 30);
      *(_BYTE *)(v25 + 17) = 0;
      v26 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v40, v31[0]);
      (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v25 + 32))(v25, v40, v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)" [error=", 8);
      *(_BYTE *)(v25 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v25 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"]", 1);
      *(_BYTE *)(v25 + 17) = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v44, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(v42, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v25 = ImsLogger::spam(ims::_logger, (uint64_t)v44, (uint64_t)v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"Success indication for request: ", 32);
      *(_BYTE *)(v25 + 17) = 0;
      v27 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v40, v31[0]);
      (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v25 + 32))(v25, v40, v27);
    }
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v25 + 17) = 0;
    if (v41 < 0)
      operator delete(v40[0]);
    if (v43 < 0)
      operator delete(v42[0]);
    if (v45 < 0)
      operator delete(v44[0]);
    v24 = *((_DWORD *)v47 + 6);
    _Block_object_dispose(&v46, 8);
  }
  v46 = 0;
  v47 = &v46;
  v48 = 0x2000000000;
  LOBYTE(v49) = 0;
  __p = v6;
  v34 = 0x40000000;
  v35 = ___ZN19QMIRTPCommandDriver26getSessionIdFromIndicationIN2ms12ServiceError10IndicationEEEhRKT__block_invoke;
  v36 = &unk_1E78D5EC0;
  v37 = &v46;
  v44[0] = &__p;
  qmi::MessageBase::applyTlv<ms::tlv::RTPSessionIdentifier,void({block_pointer})(ms::tlv::RTPSessionIdentifier)>((qmi::MessageBase *)v31, 16, v44);
  std::string::basic_string[abi:ne180100]<0>(v44, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(v42, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v28 = ImsLogger::spam(ims::_logger, (uint64_t)v44, (uint64_t)v42);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"Indication: ", 12);
  *(_BYTE *)(v28 + 17) = 0;
  v29 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v40, v31[0]);
  (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v28 + 32))(v28, v40, v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)", with qmiSession Id: ", 22);
  *(_BYTE *)(v28 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v28 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v28 + 17) = 0;
  if (v41 < 0)
    operator delete(v40[0]);
  if (v43 < 0)
    operator delete(v42[0]);
  if (v45 < 0)
    operator delete(v44[0]);
  v30 = *((_BYTE *)v47 + 24);
  _Block_object_dispose(&v46, 8);
  __p = v6;
  v34 = 0x40000000;
  v35 = ___ZN19QMIRTPCommandDriver28handleServiceErrorIndicationERKN2ms12ServiceError10IndicationE_block_invoke;
  v36 = &__block_descriptor_tmp_136;
  v37 = (void **)v5;
  v38 = v24;
  v39 = v30;
  ims::performBlock((IMSClientManager *)&__p);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v31);
}

void sub_1BF04D590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;

  v40 = v38;
  if (v40)
  {
    v42 = v40;
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (unint64_t *)&v39->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF04D6E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a29 < 0)
    operator delete(__p);
  if (*(char *)(v29 - 105) < 0)
    operator delete(*(void **)(v29 - 128));
  if (SHIBYTE(a14) < 0)
    operator delete(a12);
  JUMPOUT(0x1BF04D6D8);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_9 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10 &&,QMIServiceMsg const)>::~__func()
{
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E78D5030;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10 &&,QMIServiceMsg const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E78D5030;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int a2, QMIServiceMsg *this)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  __n128 v8;
  const char *v9;
  size_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  __n128 v23;
  __n128 v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t TlvValue;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  void *v35;
  int v36;
  void *v37;
  int v38;
  tlv *v39;
  int v40;
  tlv *v41;
  int v42;
  char *v43;
  int v44;
  char *v45;
  int v46;
  char *v47;
  tlv *v48;
  int v49;
  tlv *v50;
  int v51;
  uint64_t v52;
  tlv *v53;
  int v54;
  tlv *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int16 v59[2];
  int v60;
  void *v61[2];
  __int128 v62;
  _QWORD *v63;
  uint64_t v64;
  void *__p[2];
  void (*v66)(uint64_t, int *);
  void *v67;
  _QWORD *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD v76[2];
  uint64_t (*v77)(uint64_t, int);
  void *v78;
  _QWORD *v79;
  _QWORD v80[3];
  char v81;
  tlv *v82;
  __int16 v83;
  void *v84;
  void *v85;
  uint64_t v86;
  char *v87;
  __int128 v88;
  __int128 v89;
  void **v90;
  _BYTE v91[12];
  int v92;
  uint64_t v93;
  uint64_t v94;

  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    v88 = 0uLL;
    *(_QWORD *)&v89 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v59, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v59);
    if ((_QWORD)v88)
    {
      *((_QWORD *)&v88 + 1) = v88;
      operator delete((void *)v88);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v59);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (void *)MEMORY[0x1E0C809B0];
  if (v60)
  {
    std::string::basic_string[abi:ne180100]<0>(&v88, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&v70, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)&v88, (uint64_t)&v70);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Error indication for request: ", 30);
    *(_BYTE *)(v7 + 17) = 0;
    v8 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)__p, v59[0]);
    (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v7 + 32))(v7, __p, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" error:", 7);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" reason: ", 9);
    *(_BYTE *)(v7 + 17) = 0;
    v9 = (const char *)qmi::asString();
    v10 = strlen(v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)v9, v10);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (SHIBYTE(v66) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v72) < 0)
      operator delete(v70);
    if (SBYTE7(v89) < 0)
      operator delete((void *)v88);
    v11 = *(std::__shared_weak_count **)(v5 + 136);
    if (!v11)
      goto LABEL_45;
    v12 = std::__shared_weak_count::lock(v11);
    *((_QWORD *)&v88 + 1) = v12;
    if (!v12)
      goto LABEL_45;
    v13 = *(_QWORD *)(v5 + 128);
    *(_QWORD *)&v88 = v13;
    if (v13)
    {
      v14 = *(_QWORD **)(v13 + 48);
      v15 = *(std::__shared_weak_count **)(v13 + 56);
      v70 = v14;
      v71 = (uint64_t)v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      v18 = v14[37];
      if (v18)
        AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v18 + 120), 24);
      if (v15)
      {
        v19 = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
      if (!*((_QWORD *)&v88 + 1))
        goto LABEL_45;
    }
    else
    {
      v21 = v12;
    }
    v26 = (unint64_t *)&v21->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
LABEL_45:
    v25 = 4;
    goto LABEL_46;
  }
  v70 = 0;
  v71 = (uint64_t)&v70;
  v72 = 0x2000000000;
  LODWORD(v73) = 0;
  *(_QWORD *)&v88 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v88 + 1) = 0x40000000;
  *(_QWORD *)&v89 = ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms18ServiceRtcpReports10IndicationEEENS1_9RTPStatusERKT__block_invoke;
  *((_QWORD *)&v89 + 1) = &unk_1E78D5EE8;
  v90 = &v70;
  __p[0] = &v88;
  qmi::MessageBase::applyTlv<ms::tlv::IndicationStatus,void({block_pointer})(ms::tlv::IndicationStatus)>((qmi::MessageBase *)v59, __p);
  if (*(_DWORD *)(v71 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(v61, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v22 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"Error indication for request: ", 30);
    *(_BYTE *)(v22 + 17) = 0;
    v23 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)&v82, v59[0]);
    (*(void (**)(uint64_t, tlv **, __n128))(*(_QWORD *)v22 + 32))(v22, &v82, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)" [error=", 8);
    *(_BYTE *)(v22 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v22 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v22 + 17) = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(v61, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v22 = ImsLogger::spam(ims::_logger, (uint64_t)__p, (uint64_t)v61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"Success indication for request: ", 32);
    *(_BYTE *)(v22 + 17) = 0;
    v24 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)&v82, v59[0]);
    (*(void (**)(uint64_t, tlv **, __n128))(*(_QWORD *)v22 + 32))(v22, &v82, v24);
  }
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v22 + 17) = 0;
  if (SHIBYTE(v84) < 0)
    operator delete(v82);
  if (SBYTE7(v62) < 0)
    operator delete(v61[0]);
  if (SHIBYTE(v66) < 0)
    operator delete(__p[0]);
  v25 = *(_DWORD *)(v71 + 24);
  _Block_object_dispose(&v70, 8);
LABEL_46:
  v70 = 0;
  v71 = (uint64_t)&v70;
  v72 = 0x2000000000;
  LOBYTE(v73) = 0;
  *(_QWORD *)&v88 = v6;
  *((_QWORD *)&v88 + 1) = 0x40000000;
  *(_QWORD *)&v89 = ___ZN19QMIRTPCommandDriver26getSessionIdFromIndicationIN2ms18ServiceRtcpReports10IndicationEEEhRKT__block_invoke;
  *((_QWORD *)&v89 + 1) = &unk_1E78D5F10;
  v90 = &v70;
  __p[0] = &v88;
  qmi::MessageBase::applyTlv<ms::tlv::RTPSessionIdentifier,void({block_pointer})(ms::tlv::RTPSessionIdentifier)>((qmi::MessageBase *)v59, 2, __p);
  std::string::basic_string[abi:ne180100]<0>(__p, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(v61, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v28 = ImsLogger::spam(ims::_logger, (uint64_t)__p, (uint64_t)v61);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"Indication: ", 12);
  *(_BYTE *)(v28 + 17) = 0;
  v29 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)&v82, v59[0]);
  (*(void (**)(uint64_t, tlv **, __n128))(*(_QWORD *)v28 + 32))(v28, &v82, v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)", with qmiSession Id: ", 22);
  *(_BYTE *)(v28 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v28 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v28 + 17) = 0;
  if (SHIBYTE(v84) < 0)
    operator delete(v82);
  if (SBYTE7(v62) < 0)
    operator delete(v61[0]);
  if (SHIBYTE(v66) < 0)
    operator delete(__p[0]);
  _Block_object_dispose(&v70, 8);
  if (!v25)
  {
    v80[0] = 0;
    v80[1] = v80;
    v80[2] = 0x2000000000;
    v81 = 0;
    v76[0] = v6;
    v76[1] = 0x40000000;
    v77 = ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke;
    v78 = &unk_1E78D4600;
    v79 = v80;
    TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v59);
    v32 = TlvValue;
    if (TlvValue)
    {
      v33 = v31;
      *(_QWORD *)&v88 = TlvValue;
      v34 = tlv::parseV<ms::tlv::RTCPReportTypeInfoIncoming>((tlv **)&v88, v31);
      if ((_QWORD)v88)
        v77((uint64_t)v76, v34);
      else
        ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x1E0DE2D28])(v59[0], 23, v32, v33);
    }
    v70 = v6;
    v71 = 0x40000000;
    v72 = (uint64_t)___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_2;
    v73 = &unk_1E78D4660;
    v74 = v80;
    v75 = v5;
    v35 = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v59);
    v37 = v35;
    if (v35)
    {
      v38 = v36;
      v61[0] = v35;
      v88 = 0uLL;
      *(_QWORD *)&v89 = 0;
      tlv::parseV<ms::tlv::SenderReportInfo>((uint64_t *)v61, v36, (uint64_t)&v88);
      if (v61[0])
      {
        *(_OWORD *)__p = v88;
        v66 = (void (*)(uint64_t, int *))v89;
        ((void (*)(void **, void **))v72)(&v70, __p);
      }
      else
      {
        ((void (*)(_QWORD, uint64_t, void *, _QWORD))*MEMORY[0x1E0DE2D28])(v59[0], 16, v37, v38);
      }
    }
    __p[0] = v6;
    __p[1] = (void *)0x40000000;
    v66 = ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_142;
    v67 = &unk_1E78D46C0;
    v68 = v80;
    v69 = v5;
    v39 = (tlv *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v59);
    v41 = v39;
    if (v39)
    {
      v42 = v40;
      v82 = v39;
      LODWORD(v90) = 0;
      v88 = 0u;
      v89 = 0u;
      tlv::parseV<ms::tlv::ReceiverReportInfo>((uint64_t *)&v82, v40, (uint64_t)&v88);
      if (v82)
      {
        *(_OWORD *)v61 = v88;
        v62 = v89;
        LODWORD(v63) = (_DWORD)v90;
        v66((uint64_t)__p, (int *)v61);
      }
      else
      {
        ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(v59[0], 17, v41, v42);
      }
    }
    v61[0] = v6;
    v61[1] = (void *)0x40000000;
    *(_QWORD *)&v62 = ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_148;
    *((_QWORD *)&v62 + 1) = &unk_1E78D4720;
    v63 = v80;
    v64 = v5;
    v43 = (char *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v59);
    v45 = v43;
    if (v43)
    {
      v46 = v44;
      v87 = v43;
      v90 = 0;
      v88 = 0u;
      v89 = 0u;
      tlv::parseV<ms::tlv::SDESInfo>(&v87, v44, (uint64_t)&v88);
      v47 = v87;
      if (v87)
      {
        v82 = (tlv *)v88;
        v83 = WORD4(v88);
        v85 = 0;
        v86 = 0;
        v84 = 0;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v84, (const void *)v89, *((uint64_t *)&v89 + 1), *((_QWORD *)&v89 + 1) - v89);
        ((void (*)(void **, tlv **))v62)(v61, &v82);
        if (v84)
        {
          v85 = v84;
          operator delete(v84);
        }
      }
      if ((_QWORD)v89)
      {
        *((_QWORD *)&v89 + 1) = v89;
        operator delete((void *)v89);
      }
      if (!v47)
        ((void (*)(_QWORD, uint64_t, char *, _QWORD))*MEMORY[0x1E0DE2D28])(v59[0], 18, v45, v46);
    }
    v48 = (tlv *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v59);
    v50 = v48;
    if (v48)
    {
      v51 = v49;
      v82 = v48;
      v52 = tlv::parseV<ms::tlv::XRReceiverRefTime>(&v82, v49);
      if (v82)
      {
        *(_QWORD *)&v88 = v6;
        *((_QWORD *)&v88 + 1) = 1174405120;
        *(_QWORD *)&v89 = ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_2_154;
        *((_QWORD *)&v89 + 1) = &unk_1E78D4748;
        *(_DWORD *)&v91[8] = 4;
        v90 = (void **)v80;
        *(_QWORD *)v91 = &off_1E78CE0A0;
        v93 = v52;
        ims::performBlock((IMSClientManager *)&v88);
      }
      else
      {
        ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(v59[0], 19, v50, v51);
      }
    }
    v53 = (tlv *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v59);
    v55 = v53;
    if (v53)
    {
      v56 = v54;
      v82 = v53;
      v57 = tlv::parseV<ms::tlv::XRDLRRReportInfo>((uint64_t *)&v82, v54);
      if (v82)
      {
        *(_QWORD *)&v88 = v6;
        *((_QWORD *)&v88 + 1) = 1174405120;
        *(_QWORD *)&v89 = ___ZN19QMIRTPCommandDriver34handleServiceRtcpReportsIndicationERKN2ms18ServiceRtcpReports10IndicationE_block_invoke_2_162;
        *((_QWORD *)&v89 + 1) = &__block_descriptor_tmp_163;
        v90 = (void **)&off_1E78C43C0;
        *(_DWORD *)v91 = 5;
        *(_QWORD *)&v91[4] = v57;
        v92 = v58;
        v93 = v57;
        v94 = v58;
        ims::performBlock((IMSClientManager *)&v88);
      }
      else
      {
        ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(v59[0], 21, v55, v56);
      }
    }
    _Block_object_dispose(v80, 8);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v59);
}

void sub_1BF04E230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  uint64_t v46;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v46 - 176);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a10);
  _Unwind_Resume(a1);
}

void sub_1BF04E37C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a24 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  if (*(char *)(v34 - 153) < 0)
    operator delete(*(void **)(v34 - 176));
  JUMPOUT(0x1BF04E36CLL);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_10 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11 &&,QMIServiceMsg const)>::~__func()
{
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E78D50B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11 &&,QMIServiceMsg const)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E78D50B0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int a2, QMIServiceMsg *this)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  __n128 v12;
  const char *v13;
  size_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  __n128 v27;
  __n128 v28;
  int v29;
  unint64_t *v30;
  unint64_t v31;
  void *TlvValue;
  int v33;
  void *v34;
  int v35;
  uint64_t v36;
  unsigned __int16 v37[2];
  int v38;
  void *__p;
  uint64_t v40;
  void *v41;
  void *v42;
  void **v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void **v49;
  void *v50[2];
  uint64_t v51;
  char v52;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;

  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v40 = 0;
    v41 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v37, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v37);
    if (__p)
    {
      v40 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v37);
  }
  v5 = *(_QWORD **)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&v45, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v45);
  if (!v5)
    __cxa_bad_typeid();
  v7 = v6;
  v8 = *(_QWORD **)(v6 + 8);
  v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)(*(_QWORD *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"handleUninitializeAllSessionsIndication", 39);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (SHIBYTE(v47) < 0)
    operator delete(v45);
  if (SHIBYTE(v41) < 0)
    operator delete(__p);
  v10 = (void *)MEMORY[0x1E0C809B0];
  if (v38)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&v45, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Error indication for request: ", 30);
    *(_BYTE *)(v11 + 17) = 0;
    v12 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v50, v37[0]);
    (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v11 + 32))(v11, v50, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" error:", 7);
    *(_BYTE *)(v11 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" reason: ", 9);
    *(_BYTE *)(v11 + 17) = 0;
    v13 = (const char *)qmi::asString();
    v14 = strlen(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)v13, v14);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (SHIBYTE(v51) < 0)
      operator delete(v50[0]);
    if (SHIBYTE(v47) < 0)
      operator delete(v45);
    if (SHIBYTE(v41) < 0)
      operator delete(__p);
    v15 = (std::__shared_weak_count *)v5[17];
    if (!v15)
      goto LABEL_50;
    v16 = std::__shared_weak_count::lock(v15);
    v40 = (uint64_t)v16;
    if (!v16)
      goto LABEL_50;
    v17 = (_QWORD *)v5[16];
    __p = v17;
    if (v17)
    {
      v18 = (_QWORD *)v17[6];
      v19 = (std::__shared_weak_count *)v17[7];
      v45 = v18;
      v46 = (uint64_t)v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
      }
      v22 = v18[37];
      if (v22)
        AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v22 + 120), 24);
      if (v19)
      {
        v23 = (unint64_t *)&v19->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v25 = (std::__shared_weak_count *)v40;
      if (!v40)
        goto LABEL_50;
    }
    else
    {
      v25 = v16;
    }
    v30 = (unint64_t *)&v25->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
LABEL_50:
    v29 = 4;
    goto LABEL_51;
  }
  v45 = 0;
  v46 = (uint64_t)&v45;
  v47 = 0x2000000000;
  LODWORD(v48) = 0;
  __p = (void *)MEMORY[0x1E0C809B0];
  v40 = 0x40000000;
  v41 = ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms30ServiceUninitializeAllSessions10IndicationEEENS1_9RTPStatusERKT__block_invoke;
  v42 = &unk_1E78D6248;
  v43 = &v45;
  v50[0] = &__p;
  qmi::MessageBase::applyTlv<ms::tlv::IndicationStatus,void({block_pointer})(ms::tlv::IndicationStatus)>((qmi::MessageBase *)v37, v50);
  if (*(_DWORD *)(v46 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(v50, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(v55, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v26 = ImsLogger::error(ims::_logger, (uint64_t)v50, (uint64_t)v55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"Error indication for request: ", 30);
    *(_BYTE *)(v26 + 17) = 0;
    v27 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v53, v37[0]);
    (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v26 + 32))(v26, v53, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)" [error=", 8);
    *(_BYTE *)(v26 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v26 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v26 + 17) = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v50, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(v55, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v26 = ImsLogger::spam(ims::_logger, (uint64_t)v50, (uint64_t)v55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"Success indication for request: ", 32);
    *(_BYTE *)(v26 + 17) = 0;
    v28 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v53, v37[0]);
    (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v26 + 32))(v26, v53, v28);
  }
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v26 + 17) = 0;
  if (v54 < 0)
    operator delete(v53[0]);
  if (v56 < 0)
    operator delete(v55[0]);
  if (SHIBYTE(v51) < 0)
    operator delete(v50[0]);
  v29 = *(_DWORD *)(v46 + 24);
  _Block_object_dispose(&v45, 8);
LABEL_51:
  v50[0] = 0;
  v50[1] = v50;
  v51 = 0x2000000000;
  v52 = -1;
  v45 = v10;
  v46 = 0x40000000;
  v47 = (uint64_t)___ZN19QMIRTPCommandDriver39handleUninitializeAllSessionsIndicationERKN2ms30ServiceUninitializeAllSessions10IndicationE_block_invoke;
  v48 = &unk_1E78D4910;
  v49 = v50;
  TlvValue = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v37);
  v34 = TlvValue;
  if (TlvValue)
  {
    v35 = v33;
    __p = TlvValue;
    LODWORD(v55[0]) = tlv::parseV<ms::tlv::ApnType>((tlv **)&__p, v33);
    if (__p)
      ((void (*)(void **, void **))v47)(&v45, v55);
    else
      ((void (*)(_QWORD, uint64_t, void *, _QWORD))*MEMORY[0x1E0DE2D28])(v37[0], 16, v34, v35);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(v55, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  if (v29)
  {
    v36 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)v55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"Failed to uninitialize all sessions for [apnType=", 49);
  }
  else
  {
    v36 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"Uninitialized all sessions for [apnType=", 40);
  }
  *(_BYTE *)(v36 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v36 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v36 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v36 + 17) = 0;
  if (v56 < 0)
    operator delete(v55[0]);
  if (SHIBYTE(v41) < 0)
    operator delete(__p);
  __p = v10;
  v40 = 0x40000000;
  v41 = ___ZN19QMIRTPCommandDriver39handleUninitializeAllSessionsIndicationERKN2ms30ServiceUninitializeAllSessions10IndicationE_block_invoke_2;
  v42 = &unk_1E78D4938;
  v43 = v50;
  v44 = v5;
  ims::performBlock((IMSClientManager *)&__p);
  _Block_object_dispose(v50, 8);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v37);
}

void sub_1BF04ECB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11>(unsigned short,QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIRTPCommandDriver::setMediaServiceIndications(void)::$_11 &&,QMIServiceMsg const)>::target_type()
{
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::ServiceSubscriptionType>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::ServiceSubscriptionType>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::ServiceSubscriptionType>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::ServiceSubscriptionType>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78D5148;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver14serviceBindReqEjE3__0EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3;
  std::__shared_weak_count_vtbl *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint64_t v10;
  __n128 v11;
  const char *v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  void (__cdecl *v19)(std::__shared_weak_count *__hidden);
  const ImsResult *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  size_t v24;
  std::__shared_weak_count *on_zero_shared;
  void (__cdecl *v26)(std::__shared_weak_count *__hidden);
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  BOOL v39;
  uint64_t v40;
  size_t v41;
  const void **v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  void (__cdecl *v65)(std::__shared_weak_count *__hidden);
  unint64_t *p_shared_owners;
  unint64_t v67;
  const void **v68;
  char *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  size_t v101;
  const void **v102;
  char *v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t *v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  __int128 *v118;
  uint64_t v119;
  size_t v120;
  const void **v121;
  char *v122;
  _DWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t *v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  void *__p;
  uint64_t v148;
  uint64_t (*v149)(uint64_t, _BYTE *);
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  std::__shared_weak_count *v155;
  std::__shared_weak_count *v156;
  _QWORD v157[2];
  uint64_t (*v158)(uint64_t, _DWORD *);
  void *v159;
  int v160;
  __int128 v161;
  __int128 v162;
  int v163;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  void (__cdecl **aBlock)(std::__shared_weak_count *__hidden);
  uint64_t v168;
  void (*v169)(uint64_t, QMIServiceMsg *);
  void *v170;
  __int128 *v171;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(std::__shared_weak_count_vtbl **)v3;
  v5 = *(_DWORD *)(v3 + 8);
  std::string::basic_string[abi:ne180100]<0>(&v153, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v153, (uint64_t)&__p);
  if (!v4)
    __cxa_bad_typeid();
  v7 = v6;
  v8 = *(_QWORD **)(v6 + 8);
  v9 = strlen((const char *)(*(_QWORD *)(*((_QWORD *)v4->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)(*((_QWORD *)v4->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"handleServiceBindResp", 21);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [instance=", 11);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (SHIBYTE(v149) < 0)
    operator delete(__p);
  if (SBYTE7(v154) < 0)
    operator delete((void *)v153);
  if (!*((_DWORD *)a2 + 1))
  {
    std::string::basic_string[abi:ne180100]<0>(&v153, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v23 = ImsLogger::debug(ims::_logger, (uint64_t)&v153, (uint64_t)&__p);
    v24 = strlen((const char *)(*(_QWORD *)(*((_QWORD *)v4->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), *(_QWORD *)(*((_QWORD *)v4->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL, v24);
    *(_BYTE *)(v23 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v23 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"handleServiceBindResp", 21);
    *(_BYTE *)(v23 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)" Success", 8);
    *(_BYTE *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v23 + 17) = 0;
    if (SHIBYTE(v149) < 0)
      operator delete(__p);
    if (SBYTE7(v154) < 0)
      operator delete((void *)v153);
    on_zero_shared = (std::__shared_weak_count *)v4[3].__on_zero_shared;
    if (on_zero_shared)
    {
      v18 = std::__shared_weak_count::lock(on_zero_shared);
      if (v18)
      {
        v26 = v4[3].~__shared_weak_count_0;
        if (v26)
        {
          v27 = *((_QWORD *)v26 + 19);
          if (!v27)
            goto LABEL_80;
          v28 = (uint64_t)v26 + 152;
          do
          {
            v29 = *(_DWORD *)(v27 + 28);
            v30 = v29 >= v5;
            if (v29 >= v5)
              v31 = (uint64_t *)v27;
            else
              v31 = (uint64_t *)(v27 + 8);
            if (v30)
              v28 = v27;
            v27 = *v31;
          }
          while (*v31);
          if ((void (__cdecl *)(std::__shared_weak_count *__hidden))v28 == (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)v26 + 152)
            || *(_DWORD *)(v28 + 28) > v5
            || !*(_DWORD *)(v28 + 32))
          {
LABEL_80:
            std::string::basic_string[abi:ne180100]<0>(&v153, "rtp.qmidriver");
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v44 = ImsLogger::error(ims::_logger, (uint64_t)&v153, (uint64_t)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"Controller has been deinitialized while waiting for Service Bind response", 73);
            *(_BYTE *)(v44 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v44 + 17) = 0;
            if (SHIBYTE(v149) < 0)
              operator delete(__p);
            if (SBYTE7(v154) < 0)
              operator delete((void *)v153);
            goto LABEL_84;
          }
          v32 = (_QWORD *)*((_QWORD *)v26 + 15);
          v33 = (_QWORD *)((char *)v26 + 128);
          if (v32 != (_QWORD *)((char *)v26 + 128))
          {
            v34 = 0;
            do
            {
              v155 = 0;
              v153 = 0u;
              v154 = 0u;
              if (*((char *)v32 + 55) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v153, (const std::string::value_type *)v32[4], v32[5]);
              }
              else
              {
                v153 = *((_OWORD *)v32 + 2);
                *(_QWORD *)&v154 = v32[6];
              }
              LODWORD(v155) = *((_DWORD *)v32 + 16);
              *((_QWORD *)&v154 + 1) = v32[7];
              v35 = (int)v155;
              if ((_DWORD)v155 == v5)
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmidriver");
                std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
                pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
                v36 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&aBlock);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"Using voice system Id ", 22);
                *(_BYTE *)(v36 + 17) = 0;
                std::ostream::operator<<();
                *(_BYTE *)(v36 + 17) = 0;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)" from ", 6);
                *(_BYTE *)(v36 + 17) = 0;
                (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v36 + 32))(v36, &v153);
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(_BYTE *)(v36 + 17) = 0;
                if (SHIBYTE(v169) < 0)
                  operator delete(aBlock);
                if (SHIBYTE(v149) < 0)
                  operator delete(__p);
                v34 = HIDWORD(v154);
              }
              if (SBYTE7(v154) < 0)
                operator delete((void *)v153);
              if (v35 == v5)
                break;
              v37 = (_QWORD *)v32[1];
              if (v37)
              {
                do
                {
                  v38 = v37;
                  v37 = (_QWORD *)*v37;
                }
                while (v37);
              }
              else
              {
                do
                {
                  v38 = (_QWORD *)v32[2];
                  v39 = *v38 == (_QWORD)v32;
                  v32 = v38;
                }
                while (!v39);
              }
              v32 = v38;
            }
            while (v38 != v33);
            if (v34)
            {
              std::string::basic_string[abi:ne180100]<0>(&v153, "rtp.qmidriver");
              std::string::basic_string[abi:ne180100]<0>(&__p, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v40 = ImsLogger::debug(ims::_logger, (uint64_t)&v153, (uint64_t)&__p);
              v41 = strlen((const char *)(*(_QWORD *)(*((_QWORD *)v4->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL));
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), *(_QWORD *)(*((_QWORD *)v4->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL, v41);
              *(_BYTE *)(v40 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)"::", 2);
              *(_BYTE *)(v40 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)"serviceInitializeReq", 20);
              *(_BYTE *)(v40 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)" [voiceSystemId=", 16);
              *(_BYTE *)(v40 + 17) = 0;
              std::ostream::operator<<();
              *(_BYTE *)(v40 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)", instance=", 11);
              *(_BYTE *)(v40 + 17) = 0;
              std::ostream::operator<<();
              *(_BYTE *)(v40 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)"]", 1);
              *(_BYTE *)(v40 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v40 + 17) = 0;
              if (SHIBYTE(v149) < 0)
                operator delete(__p);
              if (SBYTE7(v154) < 0)
                operator delete((void *)v153);
              v161 = 0u;
              v162 = 0u;
              qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v161);
              v157[0] = MEMORY[0x1E0C809B0];
              v157[1] = 0x40000000;
              v158 = ___ZN19QMIRTPCommandDriver20serviceInitializeReqEjj_block_invoke;
              v159 = &__block_descriptor_tmp_47_1;
              v160 = v34;
              v42 = (const void **)*((_QWORD *)&v161 + 1);
              if (*((_QWORD *)&v161 + 1) != (_QWORD)v162)
              {
                while (*((_BYTE *)*v42 + 8) != 1)
                {
                  if (++v42 == (const void **)v162)
                    goto LABEL_93;
                }
              }
              if (v42 == (const void **)v162)
              {
LABEL_93:
                v48 = operator new();
                v49 = v48;
                *(_BYTE *)(v48 + 8) = 1;
                *(_QWORD *)v48 = &off_1E78D5240;
                *(_DWORD *)(v48 + 12) = 0;
                v50 = (_DWORD *)(v48 + 12);
                v51 = v162;
                if ((unint64_t)v162 >= *((_QWORD *)&v162 + 1))
                {
                  v53 = (uint64_t)(v162 - *((_QWORD *)&v161 + 1)) >> 3;
                  if ((unint64_t)(v53 + 1) >> 61)
                    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
                  v54 = (uint64_t)(*((_QWORD *)&v162 + 1) - *((_QWORD *)&v161 + 1)) >> 2;
                  if (v54 <= v53 + 1)
                    v54 = v53 + 1;
                  if (*((_QWORD *)&v162 + 1) - *((_QWORD *)&v161 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
                    v55 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v55 = v54;
                  if (v55)
                    v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v162 + 8, v55);
                  else
                    v56 = 0;
                  v57 = (uint64_t *)&v56[8 * v53];
                  v58 = &v56[8 * v55];
                  *v57 = v49;
                  v52 = v57 + 1;
                  v60 = (char *)*((_QWORD *)&v161 + 1);
                  v59 = (char *)v162;
                  if ((_QWORD)v162 != *((_QWORD *)&v161 + 1))
                  {
                    do
                    {
                      v61 = *((_QWORD *)v59 - 1);
                      v59 -= 8;
                      *--v57 = v61;
                    }
                    while (v59 != v60);
                    v59 = (char *)*((_QWORD *)&v161 + 1);
                  }
                  *((_QWORD *)&v161 + 1) = v57;
                  *(_QWORD *)&v162 = v52;
                  *((_QWORD *)&v162 + 1) = v58;
                  if (v59)
                    operator delete(v59);
                }
                else
                {
                  *(_QWORD *)v162 = v48;
                  v52 = (_QWORD *)(v51 + 8);
                }
                *(_QWORD *)&v162 = v52;
                v158((uint64_t)v157, v50);
              }
              else
              {
                if (!v47)
                  __cxa_bad_cast();
                ___ZN19QMIRTPCommandDriver20serviceInitializeReqEjj_block_invoke((uint64_t)v157, v47 + 3);
              }
              v62 = (std::__shared_weak_count *)v4[3].__on_zero_shared;
              if (v62)
              {
                v63 = std::__shared_weak_count::lock(v62);
                if (v63)
                {
                  v64 = v63;
                  v65 = v4[3].~__shared_weak_count_0;
                  if (v65)
                  {
                    __p = (void *)MEMORY[0x1E0C809B0];
                    v148 = 1174405120;
                    v149 = ___ZN19QMIRTPCommandDriver20serviceInitializeReqEjj_block_invoke_2;
                    *(_QWORD *)&v150 = &__block_descriptor_tmp_49_1;
                    *((_QWORD *)&v150 + 1) = v65;
                    *(_QWORD *)&v151 = v63;
                    p_shared_owners = (unint64_t *)&v63->__shared_owners_;
                    do
                      v67 = __ldxr(p_shared_owners);
                    while (__stxr(v67 + 1, p_shared_owners));
                    v68 = (const void **)*((_QWORD *)&v161 + 1);
                    if (*((_QWORD *)&v161 + 1) != (_QWORD)v162)
                    {
                      while (*((_BYTE *)*v68 + 8) != 17)
                      {
                        if (++v68 == (const void **)v162)
                          goto LABEL_122;
                      }
                    }
                    if (v68 == (const void **)v162)
                    {
LABEL_122:
                      v71 = operator new();
                      v72 = v71;
                      *(_WORD *)(v71 + 8) = 17;
                      *(_QWORD *)v71 = &off_1E78D5290;
                      v73 = v162;
                      if ((unint64_t)v162 >= *((_QWORD *)&v162 + 1))
                      {
                        v75 = (uint64_t)(v162 - *((_QWORD *)&v161 + 1)) >> 3;
                        if ((unint64_t)(v75 + 1) >> 61)
                          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
                        v76 = (uint64_t)(*((_QWORD *)&v162 + 1) - *((_QWORD *)&v161 + 1)) >> 2;
                        if (v76 <= v75 + 1)
                          v76 = v75 + 1;
                        if (*((_QWORD *)&v162 + 1) - *((_QWORD *)&v161 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
                          v77 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v77 = v76;
                        if (v77)
                          v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v162 + 8, v77);
                        else
                          v78 = 0;
                        v79 = (uint64_t *)&v78[8 * v75];
                        v80 = &v78[8 * v77];
                        *v79 = v72;
                        v74 = v79 + 1;
                        v82 = (char *)*((_QWORD *)&v161 + 1);
                        v81 = (char *)v162;
                        if ((_QWORD)v162 != *((_QWORD *)&v161 + 1))
                        {
                          do
                          {
                            v83 = *((_QWORD *)v81 - 1);
                            v81 -= 8;
                            *--v79 = v83;
                          }
                          while (v81 != v82);
                          v81 = (char *)*((_QWORD *)&v161 + 1);
                        }
                        *((_QWORD *)&v161 + 1) = v79;
                        *(_QWORD *)&v162 = v74;
                        *((_QWORD *)&v162 + 1) = v80;
                        if (v81)
                          operator delete(v81);
                      }
                      else
                      {
                        *(_QWORD *)v162 = v71;
                        v74 = (_QWORD *)(v73 + 8);
                      }
                      v70 = (_BYTE *)(v72 + 9);
                      *(_QWORD *)&v162 = v74;
                    }
                    else
                    {
                      if (!v69)
                        __cxa_bad_cast();
                      v70 = v69 + 9;
                    }
                    v149((uint64_t)&__p, v70);
                    v84 = (std::__shared_weak_count *)v151;
                    if ((_QWORD)v151)
                    {
                      v85 = (unint64_t *)(v151 + 8);
                      do
                        v86 = __ldaxr(v85);
                      while (__stlxr(v86 - 1, v85));
                      if (!v86)
                      {
                        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                        std::__shared_weak_count::__release_weak(v84);
                      }
                    }
                  }
                  v87 = (unint64_t *)&v64->__shared_owners_;
                  do
                    v88 = __ldaxr(v87);
                  while (__stlxr(v88 - 1, v87));
                  if (!v88)
                  {
                    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                    std::__shared_weak_count::__release_weak(v64);
                  }
                }
              }
              if (v5)
                v89 = 2 * (v5 == 1);
              else
                v89 = 1;
              v90 = qmi::ClientRouter::get();
              LODWORD(v165) = v89;
              v91 = operator new();
              *(_QWORD *)v91 = v90;
              *(_QWORD *)(v91 + 8) = QMIServiceMsg::create();
              *(_DWORD *)(v91 + 16) = 25000;
              *(_QWORD *)(v91 + 24) = 0;
              *(_QWORD *)(v91 + 32) = 0;
              *((_QWORD *)&v165 + 1) = v91;
              v92 = (std::__shared_weak_count *)operator new(0x20uLL);
              v92->__shared_owners_ = 0;
              v93 = (unint64_t *)&v92->__shared_owners_;
              v92->__shared_weak_owners_ = 0;
              v92[1].__vftable = v4;
              v92->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D52F8;
              *(_QWORD *)&v153 = MEMORY[0x1E0C809B0];
              *((_QWORD *)&v153 + 1) = 1174405120;
              *(_QWORD *)&v154 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver20serviceInitializeReqEjjE3__0EEOS1_OT__block_invoke;
              *((_QWORD *)&v154 + 1) = &__block_descriptor_tmp_256;
              v155 = v92 + 1;
              v156 = v92;
              do
                v94 = __ldxr(v93);
              while (__stxr(v94 + 1, v93));
              aBlock = (void (__cdecl **)(std::__shared_weak_count *__hidden))MEMORY[0x1E0C809B0];
              v168 = 0x40000000;
              v169 = ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms17ServiceInitialize8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
              v170 = &unk_1E78D5340;
              v171 = &v153;
              *(_QWORD *)(v91 + 32) = _Block_copy(&aBlock);
              v95 = v156;
              if (v156)
              {
                v96 = (unint64_t *)&v156->__shared_owners_;
                do
                  v97 = __ldaxr(v96);
                while (__stlxr(v97 - 1, v96));
                if (!v97)
                {
                  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                  std::__shared_weak_count::__release_weak(v95);
                }
              }
              do
                v98 = __ldaxr(v93);
              while (__stlxr(v98 - 1, v93));
              if (!v98)
              {
                ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                std::__shared_weak_count::__release_weak(v92);
              }
              v99 = *((_QWORD *)&v165 + 1);
              *((_QWORD *)&v165 + 1) = 0;
              if (v99)
                std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v165 + 8, v99);
              std::string::basic_string[abi:ne180100]<0>(&v153, "rtp.qmidriver");
              std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v100 = ImsLogger::debug(ims::_logger, (uint64_t)&v153, (uint64_t)&aBlock);
              v101 = strlen((const char *)(*(_QWORD *)(*((_QWORD *)v4->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL));
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v100 + 8), *(_QWORD *)(*((_QWORD *)v4->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL, v101);
              *(_BYTE *)(v100 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v100 + 8), (uint64_t)"::", 2);
              *(_BYTE *)(v100 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v100 + 8), (uint64_t)"registerAudioCodecChangeCb", 26);
              *(_BYTE *)(v100 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v100 + 8), (uint64_t)" [instance=", 11);
              *(_BYTE *)(v100 + 17) = 0;
              std::ostream::operator<<();
              *(_BYTE *)(v100 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v100 + 8), (uint64_t)"]", 1);
              *(_BYTE *)(v100 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v100 + 64))(v100, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v100 + 17) = 0;
              if (SHIBYTE(v169) < 0)
                operator delete(aBlock);
              if (SBYTE7(v154) < 0)
                operator delete((void *)v153);
              v165 = 0u;
              v166 = 0u;
              qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v165);
              v102 = (const void **)*((_QWORD *)&v165 + 1);
              if (*((_QWORD *)&v165 + 1) != (_QWORD)v166)
              {
                while (*((_BYTE *)*v102 + 8) != 1)
                {
                  if (++v102 == (const void **)v166)
                    goto LABEL_174;
                }
              }
              if (v102 == (const void **)v166)
              {
LABEL_174:
                v105 = operator new();
                v106 = v105;
                *(_WORD *)(v105 + 8) = 1;
                *(_QWORD *)v105 = &off_1E78D6358;
                v107 = v166;
                if ((unint64_t)v166 >= *((_QWORD *)&v166 + 1))
                {
                  v109 = (uint64_t)(v166 - *((_QWORD *)&v165 + 1)) >> 3;
                  if ((unint64_t)(v109 + 1) >> 61)
                    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
                  v110 = (uint64_t)(*((_QWORD *)&v166 + 1) - *((_QWORD *)&v165 + 1)) >> 2;
                  if (v110 <= v109 + 1)
                    v110 = v109 + 1;
                  if (*((_QWORD *)&v166 + 1) - *((_QWORD *)&v165 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
                    v111 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v111 = v110;
                  if (v111)
                    v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v166 + 8, v111);
                  else
                    v112 = 0;
                  v113 = (uint64_t *)&v112[8 * v109];
                  v114 = &v112[8 * v111];
                  *v113 = v106;
                  v108 = v113 + 1;
                  v116 = (char *)*((_QWORD *)&v165 + 1);
                  v115 = (char *)v166;
                  if ((_QWORD)v166 != *((_QWORD *)&v165 + 1))
                  {
                    do
                    {
                      v117 = *((_QWORD *)v115 - 1);
                      v115 -= 8;
                      *--v113 = v117;
                    }
                    while (v115 != v116);
                    v115 = (char *)*((_QWORD *)&v165 + 1);
                  }
                  *((_QWORD *)&v165 + 1) = v113;
                  *(_QWORD *)&v166 = v108;
                  *((_QWORD *)&v166 + 1) = v114;
                  if (v115)
                    operator delete(v115);
                }
                else
                {
                  *(_QWORD *)v166 = v105;
                  v108 = (_QWORD *)(v107 + 8);
                }
                v104 = (_BYTE *)(v106 + 9);
                *(_QWORD *)&v166 = v108;
              }
              else
              {
                if (!v103)
                  __cxa_bad_cast();
                v104 = v103 + 9;
              }
              *v104 = v5;
              aBlock = &v4[1].~__shared_weak_count_0;
              v168 = QMIServiceMsg::create();
              LODWORD(v169) = 25000;
              v170 = 0;
              v171 = 0;
              *(_QWORD *)&v153 = MEMORY[0x1E0C809B0];
              *((_QWORD *)&v153 + 1) = 0x40000000;
              *(_QWORD *)&v154 = ___ZNO3qmi6Client9SendProxy8callbackIRKN5audio21CodecChangeCbRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
              *((_QWORD *)&v154 + 1) = &unk_1E78D6388;
              v155 = (std::__shared_weak_count *)&__block_literal_global_241;
              v118 = (__int128 *)_Block_copy(&v153);
              v171 = v118;
              if (v168)
              {
                qmi::Client::send();
                v118 = v171;
              }
              if (v118)
                _Block_release(v118);
              qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v165);
              std::string::basic_string[abi:ne180100]<0>(&v153, "rtp.qmidriver");
              std::string::basic_string[abi:ne180100]<0>(&aBlock, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v119 = ImsLogger::debug(ims::_logger, (uint64_t)&v153, (uint64_t)&aBlock);
              v120 = strlen((const char *)(*(_QWORD *)(*((_QWORD *)v4->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL));
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v119 + 8), *(_QWORD *)(*((_QWORD *)v4->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL, v120);
              *(_BYTE *)(v119 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v119 + 8), (uint64_t)"::", 2);
              *(_BYTE *)(v119 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v119 + 8), (uint64_t)"subscribeNotificationsReq", 25);
              *(_BYTE *)(v119 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v119 + 8), (uint64_t)" [instance=", 11);
              *(_BYTE *)(v119 + 17) = 0;
              std::ostream::operator<<();
              *(_BYTE *)(v119 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v119 + 8), (uint64_t)"]", 1);
              *(_BYTE *)(v119 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v119 + 64))(v119, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v119 + 17) = 0;
              if (SHIBYTE(v169) < 0)
                operator delete(aBlock);
              if (SBYTE7(v154) < 0)
                operator delete((void *)v153);
              v165 = 0u;
              v166 = 0u;
              qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v165);
              v121 = (const void **)*((_QWORD *)&v165 + 1);
              if (*((_QWORD *)&v165 + 1) != (_QWORD)v166)
              {
                while (*((_BYTE *)*v121 + 8) != 1)
                {
                  if (++v121 == (const void **)v166)
                    goto LABEL_206;
                }
              }
              if (v121 == (const void **)v166)
              {
LABEL_206:
                v124 = operator new();
                v125 = v124;
                *(_BYTE *)(v124 + 8) = 1;
                *(_QWORD *)v124 = &off_1E78D5DC0;
                *(_DWORD *)(v124 + 12) = 0;
                v123 = (_DWORD *)(v124 + 12);
                v126 = v166;
                if ((unint64_t)v166 >= *((_QWORD *)&v166 + 1))
                {
                  v128 = (uint64_t)(v166 - *((_QWORD *)&v165 + 1)) >> 3;
                  if ((unint64_t)(v128 + 1) >> 61)
                    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
                  v129 = (uint64_t)(*((_QWORD *)&v166 + 1) - *((_QWORD *)&v165 + 1)) >> 2;
                  if (v129 <= v128 + 1)
                    v129 = v128 + 1;
                  if (*((_QWORD *)&v166 + 1) - *((_QWORD *)&v165 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
                    v130 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v130 = v129;
                  if (v130)
                    v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v166 + 8, v130);
                  else
                    v131 = 0;
                  v132 = (uint64_t *)&v131[8 * v128];
                  v133 = &v131[8 * v130];
                  *v132 = v125;
                  v127 = v132 + 1;
                  v135 = (char *)*((_QWORD *)&v165 + 1);
                  v134 = (char *)v166;
                  if ((_QWORD)v166 != *((_QWORD *)&v165 + 1))
                  {
                    do
                    {
                      v136 = *((_QWORD *)v134 - 1);
                      v134 -= 8;
                      *--v132 = v136;
                    }
                    while (v134 != v135);
                    v134 = (char *)*((_QWORD *)&v165 + 1);
                  }
                  *((_QWORD *)&v165 + 1) = v132;
                  *(_QWORD *)&v166 = v127;
                  *((_QWORD *)&v166 + 1) = v133;
                  if (v134)
                    operator delete(v134);
                }
                else
                {
                  *(_QWORD *)v166 = v124;
                  v127 = (_QWORD *)(v126 + 8);
                }
                *(_QWORD *)&v166 = v127;
              }
              else
              {
                if (!v122)
                  __cxa_bad_cast();
                v123 = v122 + 12;
              }
              *v123 = 1;
              v137 = qmi::ClientRouter::get();
              v163 = v89;
              v138 = operator new();
              *(_QWORD *)v138 = v137;
              *(_QWORD *)(v138 + 8) = QMIServiceMsg::create();
              *(_DWORD *)(v138 + 16) = 25000;
              *(_QWORD *)(v138 + 24) = 0;
              *(_QWORD *)(v138 + 32) = 0;
              v164 = v138;
              v139 = (std::__shared_weak_count *)operator new(0x20uLL);
              v139->__shared_owners_ = 0;
              v140 = (unint64_t *)&v139->__shared_owners_;
              v139->__shared_weak_owners_ = 0;
              v139->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D5E28;
              v139[1].__vftable = v4;
              *(_QWORD *)&v153 = MEMORY[0x1E0C809B0];
              *((_QWORD *)&v153 + 1) = 1174405120;
              *(_QWORD *)&v154 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver25subscribeNotificationsReqEjE3__0EEOS1_OT__block_invoke;
              *((_QWORD *)&v154 + 1) = &__block_descriptor_tmp_289;
              v155 = v139 + 1;
              v156 = v139;
              do
                v141 = __ldxr(v140);
              while (__stxr(v141 + 1, v140));
              aBlock = (void (__cdecl **)(std::__shared_weak_count *__hidden))MEMORY[0x1E0C809B0];
              v168 = 0x40000000;
              v169 = ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms29ServiceSubscribeNotifications8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
              v170 = &unk_1E78D5E70;
              v171 = &v153;
              *(_QWORD *)(v138 + 32) = _Block_copy(&aBlock);
              v142 = v156;
              if (v156)
              {
                v143 = (unint64_t *)&v156->__shared_owners_;
                do
                  v144 = __ldaxr(v143);
                while (__stlxr(v144 - 1, v143));
                if (!v144)
                {
                  ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                  std::__shared_weak_count::__release_weak(v142);
                }
              }
              do
                v145 = __ldaxr(v140);
              while (__stlxr(v145 - 1, v140));
              if (!v145)
              {
                ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                std::__shared_weak_count::__release_weak(v139);
              }
              v146 = v164;
              v164 = 0;
              if (v146)
                std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v164, v146);
              qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v165);
              qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v161);
              goto LABEL_84;
            }
          }
          std::string::basic_string[abi:ne180100]<0>(&v153, "rtp.qmidriver");
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v46 = ImsLogger::warn(ims::_logger, (uint64_t)&v153, (uint64_t)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v46 + 8), (uint64_t)"Drop ServiceBindResponse [instance=", 35);
          *(_BYTE *)(v46 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v46 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v46 + 8), (uint64_t)" voiceSystemId=0]", 17);
          *(_BYTE *)(v46 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v46 + 17) = 0;
LABEL_74:
          if (SHIBYTE(v149) < 0)
            operator delete(__p);
          if (SBYTE7(v154) < 0)
            operator delete((void *)v153);
          if (!v18)
            return;
LABEL_84:
          v45 = (unint64_t *)&v18->__shared_owners_;
          do
            v22 = __ldaxr(v45);
          while (__stlxr(v22 - 1, v45));
LABEL_86:
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
          return;
        }
      }
    }
    else
    {
      v18 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(&v153, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v43 = ImsLogger::error(ims::_logger, (uint64_t)&v153, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v43 + 8), (uint64_t)"No controller associated with this command driver!", 50);
    *(_BYTE *)(v43 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v43 + 17) = 0;
    goto LABEL_74;
  }
  std::string::basic_string[abi:ne180100]<0>(&v153, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::error(ims::_logger, (uint64_t)&v153, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Error response for request: ", 28);
  *(_BYTE *)(v10 + 17) = 0;
  v11 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)&aBlock, *a2);
  (*(void (**)(uint64_t, void (__cdecl ***)(std::__shared_weak_count *__hidden), __n128))(*(_QWORD *)v10 + 32))(v10, &aBlock, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" error:", 7);
  *(_BYTE *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" reason: ", 9);
  *(_BYTE *)(v10 + 17) = 0;
  v12 = (const char *)qmi::asString();
  v13 = strlen(v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)v12, v13);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (SHIBYTE(v169) < 0)
    operator delete(aBlock);
  if (SHIBYTE(v149) < 0)
    operator delete(__p);
  if (SBYTE7(v154) < 0)
    operator delete((void *)v153);
  std::string::basic_string[abi:ne180100]<0>(&v153, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v14 = ImsLogger::error(ims::_logger, (uint64_t)&v153, (uint64_t)&__p);
  v15 = strlen((const char *)(*(_QWORD *)(*((_QWORD *)v4->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), *(_QWORD *)(*((_QWORD *)v4->~__shared_weak_count - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL, v15);
  *(_BYTE *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"handleServiceBindResp", 21);
  *(_BYTE *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" Error", 6);
  *(_BYTE *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v14 + 17) = 0;
  if (SHIBYTE(v149) < 0)
    operator delete(__p);
  if (SBYTE7(v154) < 0)
    operator delete((void *)v153);
  v16 = (std::__shared_weak_count *)v4[3].__on_zero_shared;
  if (v16)
  {
    v17 = std::__shared_weak_count::lock(v16);
    if (v17)
    {
      v18 = v17;
      v19 = v4[3].~__shared_weak_count_0;
      if (v19)
      {
        v150 = 0u;
        v151 = 0u;
        v152 = 0u;
        __p = &off_1E78B7238;
        v148 = (uint64_t)&_bambiDomain;
        LODWORD(v149) = 1073741846;
        v20 = (const ImsResult *)ImsResult::operator<<<char [28]>((uint64_t)&__p, "Fatal baseband driver error");
        ImsResult::ImsResult((ImsResult *)&v153, v20);
        (*(void (**)(void (__cdecl *)(std::__shared_weak_count *__hidden), __int128 *))(*(_QWORD *)v19 + 48))(v19, &v153);
        ImsResult::~ImsResult((ImsResult *)&v153);
        ImsResult::~ImsResult((ImsResult *)&__p);
      }
      v21 = (unint64_t *)&v18->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      goto LABEL_86;
    }
  }
}

void sub_1BF050664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t *p_shared_owners;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;

  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  do
    v45 = __ldaxr(v41);
  while (__stlxr(v45 - 1, v41));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a39);
  if (v39)
  {
    v46 = (unint64_t *)&v39->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c72_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver14serviceBindReqEjE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c72_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver14serviceBindReqEjE3__0EE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::serviceBindReq(unsigned int)::$_0,std::allocator<QMIRTPCommandDriver::serviceBindReq(unsigned int)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D51B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::serviceBindReq(unsigned int)::$_0,std::allocator<QMIRTPCommandDriver::serviceBindReq(unsigned int)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D51B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms11ServiceBind8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1BF050B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::VoiceSystemIdentifier>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::VoiceSystemIdentifier>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::VoiceSystemIdentifier>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::VoiceSystemIdentifier>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78D5240;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::EnableAssert>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::EnableAssert>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::EnableAssert>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::EnableAssert>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E78D5290;
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver20serviceInitializeReqEjjE3__0EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  _QWORD *v7;
  size_t v8;
  uint64_t v9;
  __n128 v10;
  const char *v11;
  size_t v12;
  void *v13[2];
  char v14;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;

  v3 = **(_QWORD ***)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(v17, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v17, (uint64_t)__p);
  if (!v3)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = (const char *)(*(_QWORD *)(*(_QWORD *)(*v3 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
  v7 = *(_QWORD **)(v4 + 8);
  v8 = strlen(v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v6, v8);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"handleServiceInitializeResp", 27);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v16 < 0)
    operator delete(__p[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  if (*((_DWORD *)a2 + 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::error(ims::_logger, (uint64_t)v17, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Error response for request: ", 28);
    *(_BYTE *)(v9 + 17) = 0;
    v10 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v13, *a2);
    (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v9 + 32))(v9, v13, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" error:", 7);
    *(_BYTE *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" reason: ", 9);
    *(_BYTE *)(v9 + 17) = 0;
    v11 = (const char *)qmi::asString();
    v12 = strlen(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)v11, v12);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (v14 < 0)
      operator delete(v13[0]);
    if (v16 < 0)
      operator delete(__p[0]);
    if (v18 < 0)
      operator delete(v17[0]);
  }
}

void sub_1BF050F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c79_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver20serviceInitializeReqEjjE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c79_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver20serviceInitializeReqEjjE3__0EE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::serviceInitializeReq(unsigned int,unsigned int)::$_0,std::allocator<QMIRTPCommandDriver::serviceInitializeReq(unsigned int,unsigned int)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D52F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::serviceInitializeReq(unsigned int,unsigned int)::$_0,std::allocator<QMIRTPCommandDriver::serviceInitializeReq(unsigned int,unsigned int)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D52F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms17ServiceInitialize8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1BF0510A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms17ServiceInitialize10IndicationEEENS1_9RTPStatusERKT__block_invoke(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

tlv *qmi::MessageBase::applyTlv<ms::tlv::IndicationStatus,void({block_pointer})(ms::tlv::IndicationStatus)>(qmi::MessageBase *a1, _QWORD *a2)
{
  tlv *result;
  int v5;
  tlv *v6;
  int v7;
  unsigned int v8;
  tlv *v9;

  result = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v6 = result;
    v7 = v5;
    v9 = result;
    v8 = tlv::parseV<ms::tlv::IndicationStatus>(&v9, v5);
    if (v9)
      return (tlv *)(*(uint64_t (**)(_QWORD, _QWORD))(*a2 + 16))(*a2, v8);
    else
      return (tlv *)((uint64_t (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a1, 1, v6, v7);
  }
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms19ServiceUninitialize10IndicationEEENS1_9RTPStatusERKT__block_invoke(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::ProfileId>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::ProfileId>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::ProfileId>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::ProfileId>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78D53D8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<ms::tlv::LocalTransportIpAddr>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E78D5428;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::LocalTransportIpAddr>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E78D5428;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::LocalTransportIpAddr>::getSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24) + 8;
}

void *qmi::MutableMessageBase::TlvWrapper<ms::tlv::LocalTransportIpAddr>::write(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  __int16 v6;
  void *result;
  uint64_t v8;

  v4 = *(_BYTE *)(a1 + 8);
  v5 = *a2;
  v6 = *a2 + 3;
  *a2 += 3;
  *(_DWORD *)(v5 + 3) = *(_DWORD *)(a1 + 16);
  *(_BYTE *)(v5 + 7) = *(_BYTE *)(a1 + 20);
  result = memcpy((void *)(v5 + 8), *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24));
  v8 = v5 + 8 + *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24);
  *a2 = v8;
  *(_BYTE *)v5 = v4;
  *(_WORD *)(v5 + 1) = v8 - v6;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::LocalTransportIpAddr>::clone(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_1E78D5428;
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(a1 + 16);
  *(_BYTE *)(v2 + 20) = *(_BYTE *)(a1 + 20);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  v3 = *(const void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 24), v3, v4, v4 - (_QWORD)v3);
  return v2;
}

void sub_1BF0513CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1091C40111C7D32);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<ms::tlv::ApnInfo>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E78D5478;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::ApnInfo>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E78D5478;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::ApnInfo>::getSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24) + 8;
}

void *qmi::MutableMessageBase::TlvWrapper<ms::tlv::ApnInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  _DWORD *v8;

  v4 = *(_BYTE *)(a1 + 8);
  v5 = *a2;
  v6 = *a2 + 3;
  *a2 = v6;
  *(_BYTE *)(v5 + 3) = *(_BYTE *)(a1 + 16);
  result = memcpy((void *)(v5 + 4), *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24));
  v8 = (_DWORD *)(v5 + 4 + *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24));
  *v8++ = *(_DWORD *)(a1 + 48);
  *a2 = (uint64_t)v8;
  *(_BYTE *)v5 = v4;
  *(_WORD *)(v5 + 1) = (_WORD)v8 - v6;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::ApnInfo>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_1E78D5478;
  *(_BYTE *)(v2 + 16) = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 24), *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24));
  *(_DWORD *)(v2 + 48) = *(_DWORD *)(a1 + 48);
  return v2;
}

void sub_1BF051584(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1091C40FF14D69FLL);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::LocalPort>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::LocalPort>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::LocalPort>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::LocalPort>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78D54C8;
  *(_WORD *)(result + 10) = *(_WORD *)(a1 + 10);
  return result;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<ms::tlv::RtcpInitParams>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E78D5518;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RtcpInitParams>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E78D5518;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RtcpInitParams>::getSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24) + 8;
}

void *qmi::MutableMessageBase::TlvWrapper<ms::tlv::RtcpInitParams>::write(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  __int16 v6;
  void *result;
  uint64_t v8;

  v4 = *(_BYTE *)(a1 + 8);
  v5 = *a2;
  v6 = *a2 + 3;
  *a2 += 3;
  *(_WORD *)(v5 + 3) = *(_WORD *)(a1 + 16);
  result = memcpy((void *)(v5 + 5), *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24));
  v8 = v5 + 5 + *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24);
  *(_WORD *)v8 = *(_WORD *)(a1 + 48);
  *(_BYTE *)(v8 + 2) = *(_BYTE *)(a1 + 50);
  *a2 = v8 + 3;
  *(_BYTE *)v5 = v4;
  *(_WORD *)(v5 + 1) = v8 + 3 - v6;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RtcpInitParams>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_1E78D5518;
  *(_WORD *)(v2 + 16) = *(_WORD *)(a1 + 16);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 24), *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24));
  *(_WORD *)(v2 + 48) = *(_WORD *)(a1 + 48);
  *(_BYTE *)(v2 + 50) = *(_BYTE *)(a1 + 50);
  return v2;
}

void sub_1BF0517E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1091C40D69D9EE6);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::ServiceAppData>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::ServiceAppData>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::ServiceAppData>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::ServiceAppData>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78D5568;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::WallClockMs>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::WallClockMs>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::WallClockMs>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_QWORD *)(v3 + 3) = *(_QWORD *)(result + 16);
  *a2 = v3 + 11;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 8;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::WallClockMs>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78D55B8;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a1 + 16);
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver20sessionInitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEhRKNS5_I9IpAddressEEN8SDPMedia9MediaTypeENS4_8weak_ptrI10SDPSessionEEE3__0EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  int v13;
  uint64_t v14;
  __n128 v15;
  const char *v16;
  size_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  size_t v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29[2];
  void (*v30)(uint64_t);
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  int v35;
  void *v36[2];
  char v37;
  void *__p[2];
  char v39;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(std::__shared_weak_count **)(v3 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!v5)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v23 = ImsLogger::error(ims::_logger, (uint64_t)v29, (uint64_t)__p);
    if (!v4)
      __cxa_bad_typeid();
    v24 = v23;
    v25 = *(_QWORD **)(v23 + 8);
    v26 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, *(_QWORD *)(*(_QWORD *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v26);
    *(_BYTE *)(v24 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v24 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"handleSessionInitializeResp", 27);
    *(_BYTE *)(v24 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)" session is null", 16);
    *(_BYTE *)(v24 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v24 + 17) = 0;
    if (v39 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v30) < 0)
    {
      operator delete(v29[0]);
      if (!v6)
        return;
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  std::string::basic_string[abi:ne180100]<0>(v29, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v9 = ImsLogger::debug(ims::_logger, (uint64_t)v29, (uint64_t)__p);
  if (!v4)
    __cxa_bad_typeid();
  v10 = v9;
  v11 = *(_QWORD **)(v9 + 8);
  v12 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, *(_QWORD *)(*(_QWORD *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v12);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"handleSessionInitializeResp", 27);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 24) + 176))(v5 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" appId=", 7);
  *(_BYTE *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (v39 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
  v13 = *((_DWORD *)a2 + 1);
  if (v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v14 = ImsLogger::error(ims::_logger, (uint64_t)v29, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Error response for request: ", 28);
    *(_BYTE *)(v14 + 17) = 0;
    v15 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v36, *a2);
    (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v14 + 32))(v14, v36, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" error:", 7);
    *(_BYTE *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" reason: ", 9);
    *(_BYTE *)(v14 + 17) = 0;
    v16 = (const char *)qmi::asString();
    v17 = strlen(v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)v16, v17);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    if (v37 < 0)
      operator delete(v36[0]);
    if (v39 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v30) < 0)
      operator delete(v29[0]);
    v13 = 4;
  }
  v29[0] = (void *)MEMORY[0x1E0C809B0];
  v29[1] = (void *)1174405120;
  v30 = ___ZN19QMIRTPCommandDriver27handleSessionInitializeRespERKN2ms17SessionInitialize8ResponseENSt3__110shared_ptrI13QMIRTPSessionEEh_block_invoke;
  v31 = &__block_descriptor_tmp_73_0;
  v35 = v13;
  v32 = v4;
  v33 = v5;
  v34 = v6;
  if (v6)
  {
    v18 = (unint64_t *)&v6->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  ims::performBlock((IMSClientManager *)v29);
  v20 = v34;
  if (!v34)
    goto LABEL_31;
  v21 = (unint64_t *)&v34->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
  {
LABEL_31:
    if (!v6)
      return;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (!v6)
    return;
LABEL_32:
  v27 = (unint64_t *)&v6->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1BF051E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v34;

  if (a14 < 0)
    operator delete(__p);
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c167_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver20sessionInitializeReqENS0_I13QMIRTPSessionEEhRKNS0_I9IpAddressEEN8SDPMedia9MediaTypeENS_8weak_ptrI10SDPSessionEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c167_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver20sessionInitializeReqENS0_I13QMIRTPSessionEEhRKNS0_I9IpAddressEEN8SDPMedia9MediaTypeENS_8weak_ptrI10SDPSessionEEE3__0EE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sessionInitializeReq(std::shared_ptr<QMIRTPSession>,unsigned char,std::shared_ptr<IpAddress> const&,SDPMedia::MediaType,std::weak_ptr<SDPSession>)::$_0,std::allocator<QMIRTPCommandDriver::sessionInitializeReq(std::shared_ptr<QMIRTPSession>,unsigned char,std::shared_ptr<IpAddress> const&,SDPMedia::MediaType,std::weak_ptr<SDPSession>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D5620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sessionInitializeReq(std::shared_ptr<QMIRTPSession>,unsigned char,std::shared_ptr<IpAddress> const&,SDPMedia::MediaType,std::weak_ptr<SDPSession>)::$_0,std::allocator<QMIRTPCommandDriver::sessionInitializeReq(std::shared_ptr<QMIRTPSession>,unsigned char,std::shared_ptr<IpAddress> const&,SDPMedia::MediaType,std::weak_ptr<SDPSession>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D5620;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<QMIRTPCommandDriver::sessionInitializeReq(std::shared_ptr<QMIRTPSession>,unsigned char,std::shared_ptr<IpAddress> const&,SDPMedia::MediaType,std::weak_ptr<SDPSession>)::$_0,std::allocator<QMIRTPCommandDriver::sessionInitializeReq(std::shared_ptr<QMIRTPSession>,unsigned char,std::shared_ptr<IpAddress> const&,SDPMedia::MediaType,std::weak_ptr<SDPSession>)::$_0>>::__on_zero_shared(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms17SessionInitialize8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1BF05203C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms17SessionInitialize10IndicationEEENS1_9RTPStatusERKT__block_invoke(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver26getSessionIdFromIndicationIN2ms17SessionInitialize10IndicationEEEhRKT__block_invoke(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

tlv *qmi::MessageBase::applyTlv<ms::tlv::RTPSessionIdentifier,void({block_pointer})(ms::tlv::RTPSessionIdentifier)>(qmi::MessageBase *a1, uint64_t a2, _QWORD *a3)
{
  tlv *result;
  int v7;
  tlv *v8;
  int v9;
  unsigned __int8 v10;
  tlv *v11;

  result = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v8 = result;
    v9 = v7;
    v11 = result;
    v10 = tlv::parseV<ms::tlv::RTPSessionIdentifier>(&v11, v7);
    if (v11)
      return (tlv *)(*(uint64_t (**)(_QWORD, _QWORD))(*a3 + 16))(*a3, v10);
    else
      return (tlv *)((uint64_t (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a1, a2, v8, v9);
  }
  return result;
}

uint64_t qmi::MutableMessageBase::getTLV<ms::tlv::RTPSessionIdentifier>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<ms::tlv::RTPSessionIdentifier>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<ms::tlv::RTPSessionIdentifier>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 9;
}

uint64_t qmi::MutableMessageBase::createTLV<ms::tlv::RTPSessionIdentifier>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_BYTE *)(v4 + 9) = 0;
  *(_QWORD *)v4 = &off_1E78D5700;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTPSessionIdentifier>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTPSessionIdentifier>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTPSessionIdentifier>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTPSessionIdentifier>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E78D5700;
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver22sessionUninitializeReqENSt3__110shared_ptrI13QMIRTPSessionEEE3__0EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  std::__shared_weak_count *v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  __n128 v25;
  const char *v26;
  size_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  size_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  size_t v40;
  void *v41;
  uint64_t v42;
  void (*v43)(uint64_t);
  void *v44;
  _QWORD *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  int v48;
  void *v49;
  std::__shared_weak_count *v50;
  char v51;
  void *__p[2];
  char v53;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(std::__shared_weak_count **)(v3 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v41, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::debug(ims::_logger, (uint64_t)&v41, (uint64_t)__p);
    if (!v4)
      __cxa_bad_typeid();
    v10 = v9;
    v11 = *(_QWORD **)(v9 + 8);
    v12 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, *(_QWORD *)(*(_QWORD *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v12);
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"handleSessionUninitializeResp", 29);
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" [sessionId=", 12);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 24) + 176))(v5 + 24);
    std::ostream::operator<<();
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" qmiSessionId=", 14);
    *(_BYTE *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (v53 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v43) < 0)
      operator delete(v41);
    v49 = 0;
    v50 = 0;
    v13 = (std::__shared_weak_count *)v4[17];
    if (!v13)
      goto LABEL_19;
    v50 = std::__shared_weak_count::lock(v13);
    if (!v50)
      goto LABEL_19;
    v14 = (void *)v4[16];
    v49 = v14;
    if (!v14)
      goto LABEL_19;
    QMIRTPStackController::getSessionByQMIid((QMIRTPStackController *)v14, *(unsigned __int8 *)(v5 + 482), (uint64_t *)&v41);
    v16 = v41;
    v15 = (std::__shared_weak_count *)v42;
    if (v42)
    {
      v17 = (unint64_t *)(v42 + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (!v16)
    {
      std::string::basic_string[abi:ne180100]<0>(&v41, "rtp.qmistackcontroller");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v39 = ImsLogger::error(ims::_logger, (uint64_t)&v41, (uint64_t)__p);
      v40 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), *(_QWORD *)(*(_QWORD *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v40);
      *(_BYTE *)(v39 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)"::", 2);
      *(_BYTE *)(v39 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)"handleSessionUninitializeResp", 29);
      *(_BYTE *)(v39 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)" session is null", 16);
      *(_BYTE *)(v39 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v39 + 17) = 0;
      if (v53 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v43) < 0)
        operator delete(v41);
      v19 = 0;
    }
    else
    {
LABEL_19:
      v19 = 1;
    }
    v20 = v50;
    if (!v50)
      goto LABEL_24;
    v21 = (unint64_t *)&v50->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      if (!v19)
        goto LABEL_47;
    }
    else
    {
LABEL_24:
      if (!v19)
        goto LABEL_47;
    }
    v23 = *((_DWORD *)a2 + 1);
    if (v23)
    {
      std::string::basic_string[abi:ne180100]<0>(&v41, "rtp.qmidriver");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v24 = ImsLogger::error(ims::_logger, (uint64_t)&v41, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"Error response for request: ", 28);
      *(_BYTE *)(v24 + 17) = 0;
      v25 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)&v49, *a2);
      (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v24 + 32))(v24, &v49, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)" error:", 7);
      *(_BYTE *)(v24 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v24 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)" reason: ", 9);
      *(_BYTE *)(v24 + 17) = 0;
      v26 = (const char *)qmi::asString();
      v27 = strlen(v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)v26, v27);
      *(_BYTE *)(v24 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v24 + 17) = 0;
      if (v51 < 0)
        operator delete(v49);
      if (v53 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v43) < 0)
        operator delete(v41);
      v23 = 4;
    }
    v41 = (void *)MEMORY[0x1E0C809B0];
    v42 = 1174405120;
    v43 = ___ZN19QMIRTPCommandDriver29handleSessionUninitializeRespERKN2ms19SessionUninitialize8ResponseENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke;
    v44 = &__block_descriptor_tmp_81;
    v48 = v23;
    v45 = v4;
    v46 = v5;
    v47 = v6;
    if (v6)
    {
      v28 = (unint64_t *)&v6->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    ims::performBlock((IMSClientManager *)&v41);
    v30 = v47;
    if (v47)
    {
      v31 = (unint64_t *)&v47->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v41, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v33 = ImsLogger::error(ims::_logger, (uint64_t)&v41, (uint64_t)__p);
    if (!v4)
      __cxa_bad_typeid();
    v34 = v33;
    v35 = *(_QWORD **)(v33 + 8);
    v36 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, *(_QWORD *)(*(_QWORD *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v36);
    *(_BYTE *)(v34 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v34 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v34 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v34 + 8), (uint64_t)"handleSessionUninitializeResp", 29);
    *(_BYTE *)(v34 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v34 + 8), (uint64_t)" session is null", 16);
    *(_BYTE *)(v34 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v34 + 17) = 0;
    if (v53 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v43) < 0)
      operator delete(v41);
  }
LABEL_47:
  if (v6)
  {
    v37 = (unint64_t *)&v6->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BF052A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v34;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c101_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver22sessionUninitializeReqENS0_I13QMIRTPSessionEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c101_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver22sessionUninitializeReqENS0_I13QMIRTPSessionEEE3__0EE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sessionUninitializeReq(std::shared_ptr<QMIRTPSession>)::$_0,std::allocator<QMIRTPCommandDriver::sessionUninitializeReq(std::shared_ptr<QMIRTPSession>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D5768;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sessionUninitializeReq(std::shared_ptr<QMIRTPSession>)::$_0,std::allocator<QMIRTPCommandDriver::sessionUninitializeReq(std::shared_ptr<QMIRTPSession>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D5768;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<QMIRTPCommandDriver::sessionUninitializeReq(std::shared_ptr<QMIRTPSession>)::$_0,std::allocator<QMIRTPCommandDriver::sessionUninitializeReq(std::shared_ptr<QMIRTPSession>)::$_0>>::__on_zero_shared(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms19SessionUninitialize8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1BF052C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms19SessionUninitialize10IndicationEEENS1_9RTPStatusERKT__block_invoke(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver26getSessionIdFromIndicationIN2ms19SessionUninitialize10IndicationEEEhRKT__block_invoke(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver19sessionConfigureReqENSt3__110shared_ptrI13QMIRTPSessionEEE3__0EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  int v13;
  uint64_t v14;
  __n128 v15;
  const char *v16;
  size_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  size_t v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29[2];
  void (*v30)(uint64_t);
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  int v35;
  void *v36[2];
  char v37;
  void *__p[2];
  char v39;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(std::__shared_weak_count **)(v3 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!v5)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v23 = ImsLogger::error(ims::_logger, (uint64_t)v29, (uint64_t)__p);
    if (!v4)
      __cxa_bad_typeid();
    v24 = v23;
    v25 = *(_QWORD **)(v23 + 8);
    v26 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, *(_QWORD *)(*(_QWORD *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v26);
    *(_BYTE *)(v24 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v24 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"handleSessionConfigureResp", 26);
    *(_BYTE *)(v24 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)" session is null", 16);
    *(_BYTE *)(v24 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v24 + 17) = 0;
    if (v39 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v30) < 0)
    {
      operator delete(v29[0]);
      if (!v6)
        return;
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  std::string::basic_string[abi:ne180100]<0>(v29, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v9 = ImsLogger::debug(ims::_logger, (uint64_t)v29, (uint64_t)__p);
  if (!v4)
    __cxa_bad_typeid();
  v10 = v9;
  v11 = *(_QWORD **)(v9 + 8);
  v12 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, *(_QWORD *)(*(_QWORD *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v12);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"handleSessionConfigureResp", 26);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 24) + 176))(v5 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (v39 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
  v13 = *((_DWORD *)a2 + 1);
  if (v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v14 = ImsLogger::error(ims::_logger, (uint64_t)v29, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Error response for request: ", 28);
    *(_BYTE *)(v14 + 17) = 0;
    v15 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v36, *a2);
    (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v14 + 32))(v14, v36, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" error:", 7);
    *(_BYTE *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" reason: ", 9);
    *(_BYTE *)(v14 + 17) = 0;
    v16 = (const char *)qmi::asString();
    v17 = strlen(v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)v16, v17);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    if (v37 < 0)
      operator delete(v36[0]);
    if (v39 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v30) < 0)
      operator delete(v29[0]);
    v13 = 4;
  }
  v29[0] = (void *)MEMORY[0x1E0C809B0];
  v29[1] = (void *)1174405120;
  v30 = ___ZN19QMIRTPCommandDriver26handleSessionConfigureRespERKN2ms16SessionConfigure8ResponseENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke;
  v31 = &__block_descriptor_tmp_86;
  v35 = v13;
  v32 = v4;
  v33 = v5;
  v34 = v6;
  if (v6)
  {
    v18 = (unint64_t *)&v6->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  ims::performBlock((IMSClientManager *)v29);
  v20 = v34;
  if (!v34)
    goto LABEL_31;
  v21 = (unint64_t *)&v34->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
  {
LABEL_31:
    if (!v6)
      return;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (!v6)
    return;
LABEL_32:
  v27 = (unint64_t *)&v6->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1BF05318C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v34;

  if (a14 < 0)
    operator delete(__p);
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c98_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver19sessionConfigureReqENS0_I13QMIRTPSessionEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c98_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver19sessionConfigureReqENS0_I13QMIRTPSessionEEE3__0EE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sessionConfigureReq(std::shared_ptr<QMIRTPSession>)::$_0,std::allocator<QMIRTPCommandDriver::sessionConfigureReq(std::shared_ptr<QMIRTPSession>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D5860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sessionConfigureReq(std::shared_ptr<QMIRTPSession>)::$_0,std::allocator<QMIRTPCommandDriver::sessionConfigureReq(std::shared_ptr<QMIRTPSession>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D5860;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<QMIRTPCommandDriver::sessionConfigureReq(std::shared_ptr<QMIRTPSession>)::$_0,std::allocator<QMIRTPCommandDriver::sessionConfigureReq(std::shared_ptr<QMIRTPSession>)::$_0>>::__on_zero_shared(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms16SessionConfigure8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1BF05336C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms16SessionConfigure10IndicationEEENS1_9RTPStatusERKT__block_invoke(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver26getSessionIdFromIndicationIN2ms16SessionConfigure10IndicationEEEhRKT__block_invoke(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::MediaServiceDirection>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::MediaServiceDirection>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::MediaServiceDirection>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::MediaServiceDirection>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78D5940;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver28sessionSetStreamDirectionReqENSt3__110shared_ptrI13QMIRTPSessionEEN2ms21MediaServiceDirectionEbE3__0EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  int v14;
  uint64_t v15;
  __n128 v16;
  const char *v17;
  size_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  size_t v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30[2];
  void (*v31)(uint64_t);
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  std::string __p;
  void *v40[2];
  char v41;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(std::__shared_weak_count **)(v3 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(_DWORD *)(v3 + 24);
  v38 = v9;
  if (!v5)
  {
    std::string::basic_string[abi:ne180100]<0>(v30, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(v40, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v24 = ImsLogger::error(ims::_logger, (uint64_t)v30, (uint64_t)v40);
    if (!v4)
      __cxa_bad_typeid();
    v25 = v24;
    v26 = *(_QWORD **)(v24 + 8);
    v27 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, *(_QWORD *)(*(_QWORD *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v27);
    *(_BYTE *)(v25 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v25 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"handleSessionSetStreamDirectionResp", 35);
    *(_BYTE *)(v25 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)" session is null", 16);
    *(_BYTE *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v25 + 17) = 0;
    if (v41 < 0)
      operator delete(v40[0]);
    if (SHIBYTE(v31) < 0)
    {
      operator delete(v30[0]);
      if (!v6)
        return;
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  std::string::basic_string[abi:ne180100]<0>(v30, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(v40, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::debug(ims::_logger, (uint64_t)v30, (uint64_t)v40);
  if (!v4)
    __cxa_bad_typeid();
  v11 = v10;
  v12 = *(_QWORD **)(v10 + 8);
  v13 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, *(_QWORD *)(*(_QWORD *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v13);
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"handleSessionSetStreamDirectionResp", 35);
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 24) + 176))(v5 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" direction=", 11);
  *(_BYTE *)(v11 + 17) = 0;
  ims::toString<ms::MediaServiceDirection>(&v38, &__p);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 32))(v11, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v41 < 0)
    operator delete(v40[0]);
  if (SHIBYTE(v31) < 0)
    operator delete(v30[0]);
  v14 = *((_DWORD *)a2 + 1);
  if (v14)
  {
    std::string::basic_string[abi:ne180100]<0>(v30, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(v40, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v15 = ImsLogger::error(ims::_logger, (uint64_t)v30, (uint64_t)v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Error response for request: ", 28);
    *(_BYTE *)(v15 + 17) = 0;
    v16 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)&__p, *a2);
    (*(void (**)(uint64_t, std::string *, __n128))(*(_QWORD *)v15 + 32))(v15, &__p, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" error:", 7);
    *(_BYTE *)(v15 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" reason: ", 9);
    *(_BYTE *)(v15 + 17) = 0;
    v17 = (const char *)qmi::asString();
    v18 = strlen(v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)v17, v18);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v41 < 0)
      operator delete(v40[0]);
    if (SHIBYTE(v31) < 0)
      operator delete(v30[0]);
    v14 = 4;
  }
  v30[0] = (void *)MEMORY[0x1E0C809B0];
  v30[1] = (void *)1174405120;
  v31 = ___ZN19QMIRTPCommandDriver35handleSessionSetStreamDirectionRespERKN2ms25SessionSetStreamDirection8ResponseENSt3__110shared_ptrI13QMIRTPSessionEENS0_21MediaServiceDirectionE_block_invoke;
  v32 = &__block_descriptor_tmp_95;
  v36 = v14;
  v37 = v9;
  v33 = v4;
  v34 = v5;
  v35 = v6;
  if (v6)
  {
    v19 = (unint64_t *)&v6->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  ims::performBlock((IMSClientManager *)v30);
  v21 = v35;
  if (!v35)
    goto LABEL_33;
  v22 = (unint64_t *)&v35->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_33:
    if (!v6)
      return;
    goto LABEL_34;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (!v6)
    return;
LABEL_34:
  v28 = (unint64_t *)&v6->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1BF0539A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v36;

  if (a15 < 0)
    operator delete(__p);
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c136_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver28sessionSetStreamDirectionReqENS0_I13QMIRTPSessionEEN2ms21MediaServiceDirectionEbE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c136_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver28sessionSetStreamDirectionReqENS0_I13QMIRTPSessionEEN2ms21MediaServiceDirectionEbE3__0EE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sessionSetStreamDirectionReq(std::shared_ptr<QMIRTPSession>,ms::MediaServiceDirection,BOOL)::$_0,std::allocator<QMIRTPCommandDriver::sessionSetStreamDirectionReq(std::shared_ptr<QMIRTPSession>,ms::MediaServiceDirection,BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D59A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sessionSetStreamDirectionReq(std::shared_ptr<QMIRTPSession>,ms::MediaServiceDirection,BOOL)::$_0,std::allocator<QMIRTPCommandDriver::sessionSetStreamDirectionReq(std::shared_ptr<QMIRTPSession>,ms::MediaServiceDirection,BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D59A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<QMIRTPCommandDriver::sessionSetStreamDirectionReq(std::shared_ptr<QMIRTPSession>,ms::MediaServiceDirection,BOOL)::$_0,std::allocator<QMIRTPCommandDriver::sessionSetStreamDirectionReq(std::shared_ptr<QMIRTPSession>,ms::MediaServiceDirection,BOOL)::$_0>>::__on_zero_shared(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms25SessionSetStreamDirection8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1BF053B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPReportingInterval>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPReportingInterval>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPReportingInterval>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPReportingInterval>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78D5A38;
  *(_WORD *)(result + 10) = *(_WORD *)(a1 + 10);
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPXRReportingInterval>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPXRReportingInterval>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPXRReportingInterval>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPXRReportingInterval>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78D5A88;
  *(_WORD *)(result + 10) = *(_WORD *)(a1 + 10);
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPReportTypes>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPReportTypes>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPReportTypes>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_QWORD *)(v3 + 3) = *(unsigned int *)(result + 12);
  *a2 = v3 + 11;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 8;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPReportTypes>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78D5AD8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver23configureRTCPReportsReqENSt3__110shared_ptrI13QMIRTPSessionEEbbttE3__0EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  int v17;
  uint64_t v18;
  __n128 v19;
  const char *v20;
  size_t v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24[2];
  void (*v25)(uint64_t);
  void *v26;
  _QWORD *v27;
  int v28;
  void *v29[2];
  char v30;
  void *__p[2];
  char v32;

  v3 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD **)v3;
  v4 = *(_QWORD *)(v3 + 8);
  v6 = *(std::__shared_weak_count **)(v3 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!v4)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::error(ims::_logger, (uint64_t)v24, (uint64_t)__p);
    if (!v5)
      __cxa_bad_typeid();
    v10 = v9;
    v11 = *(_QWORD **)(v9 + 8);
    v12 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, *(_QWORD *)(*(_QWORD *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v12);
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"handleConfigureRTCPReportsResp", 30);
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" session is null", 16);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (v32 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v25) < 0)
      operator delete(v24[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v24, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v13 = ImsLogger::debug(ims::_logger, (uint64_t)v24, (uint64_t)__p);
  if (!v5)
    __cxa_bad_typeid();
  v14 = v13;
  v15 = *(_QWORD **)(v13 + 8);
  v16 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, *(_QWORD *)(*(_QWORD *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v16);
  *(_BYTE *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"handleConfigureRTCPReportsResp", 30);
  *(_BYTE *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v14 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 24) + 176))(v4 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v14 + 17) = 0;
  if (v32 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v25) < 0)
    operator delete(v24[0]);
  v17 = *((_DWORD *)a2 + 1);
  if (v17)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v18 = ImsLogger::error(ims::_logger, (uint64_t)v24, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"Error response for request: ", 28);
    *(_BYTE *)(v18 + 17) = 0;
    v19 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v29, *a2);
    (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v18 + 32))(v18, v29, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)" error:", 7);
    *(_BYTE *)(v18 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v18 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)" reason: ", 9);
    *(_BYTE *)(v18 + 17) = 0;
    v20 = (const char *)qmi::asString();
    v21 = strlen(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)v20, v21);
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v18 + 17) = 0;
    if (v30 < 0)
      operator delete(v29[0]);
    if (v32 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v25) < 0)
      operator delete(v24[0]);
    v17 = 4;
  }
  v24[0] = (void *)MEMORY[0x1E0C809B0];
  v24[1] = (void *)0x40000000;
  v25 = ___ZN19QMIRTPCommandDriver30handleConfigureRTCPReportsRespERKN2ms27SessionConfigureRtcpReports8ResponseENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke;
  v26 = &__block_descriptor_tmp_114;
  v27 = v5;
  v28 = v17;
  ims::performBlock((IMSClientManager *)v24);
  if (v6)
  {
    v22 = (unint64_t *)&v6->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BF054210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v32;

  if (a14 < 0)
    operator delete(__p);
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c106_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver23configureRTCPReportsReqENS0_I13QMIRTPSessionEEbbttE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c106_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver23configureRTCPReportsReqENS0_I13QMIRTPSessionEEbbttE3__0EE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::configureRTCPReportsReq(std::shared_ptr<QMIRTPSession>,BOOL,BOOL,unsigned short,unsigned short)::$_0,std::allocator<QMIRTPCommandDriver::configureRTCPReportsReq(std::shared_ptr<QMIRTPSession>,BOOL,BOOL,unsigned short,unsigned short)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D5B40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::configureRTCPReportsReq(std::shared_ptr<QMIRTPSession>,BOOL,BOOL,unsigned short,unsigned short)::$_0,std::allocator<QMIRTPCommandDriver::configureRTCPReportsReq(std::shared_ptr<QMIRTPSession>,BOOL,BOOL,unsigned short,unsigned short)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D5B40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<QMIRTPCommandDriver::configureRTCPReportsReq(std::shared_ptr<QMIRTPSession>,BOOL,BOOL,unsigned short,unsigned short)::$_0,std::allocator<QMIRTPCommandDriver::configureRTCPReportsReq(std::shared_ptr<QMIRTPSession>,BOOL,BOOL,unsigned short,unsigned short)::$_0>>::__on_zero_shared(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms27SessionConfigureRtcpReports8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1BF0543E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTPMonitorInterval>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTPMonitorInterval>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTPMonitorInterval>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTPMonitorInterval>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78D5BD0;
  *(_WORD *)(result + 10) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::ClientRouter::SendProxy::SendProxy<ms::SessionConfigureLinkMonitor::Request>(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;

  *(_DWORD *)a1 = a2;
  v5 = operator new();
  *(_QWORD *)v5 = a3;
  *(_QWORD *)(v5 + 8) = QMIServiceMsg::create();
  *(_DWORD *)(v5 + 16) = 25000;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

void sub_1BF054528(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10F0C401BA14CC5);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver26configureRTPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEtE3__0EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v9[2];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)v2;
  v4 = *(std::__shared_weak_count **)(v2 + 16);
  v9[0] = *(_QWORD *)(v2 + 8);
  v9[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  QMIRTPCommandDriver::handleConfigureLinkMonitorResp(v3, a2, v9);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF0545DC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c106_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver26configureRTPLinkMonitorReqENS0_I13QMIRTPSessionEEtE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c106_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver26configureRTPLinkMonitorReqENS0_I13QMIRTPSessionEEtE3__0EE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::configureRTPLinkMonitorReq(std::shared_ptr<QMIRTPSession>,unsigned short)::$_0,std::allocator<QMIRTPCommandDriver::configureRTPLinkMonitorReq(std::shared_ptr<QMIRTPSession>,unsigned short)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D5C38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::configureRTPLinkMonitorReq(std::shared_ptr<QMIRTPSession>,unsigned short)::$_0,std::allocator<QMIRTPCommandDriver::configureRTPLinkMonitorReq(std::shared_ptr<QMIRTPSession>,unsigned short)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D5C38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<QMIRTPCommandDriver::configureRTPLinkMonitorReq(std::shared_ptr<QMIRTPSession>,unsigned short)::$_0,std::allocator<QMIRTPCommandDriver::configureRTPLinkMonitorReq(std::shared_ptr<QMIRTPSession>,unsigned short)::$_0>>::__on_zero_shared(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms27SessionConfigureLinkMonitor8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1BF054750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPMonitorInterval>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPMonitorInterval>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPMonitorInterval>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RTCPMonitorInterval>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78D5CC8;
  *(_WORD *)(result + 10) = *(_WORD *)(a1 + 10);
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver27configureRTCPLinkMonitorReqENSt3__110shared_ptrI13QMIRTPSessionEEtE3__0EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v9[2];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)v2;
  v4 = *(std::__shared_weak_count **)(v2 + 16);
  v9[0] = *(_QWORD *)(v2 + 8);
  v9[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  QMIRTPCommandDriver::handleConfigureLinkMonitorResp(v3, a2, v9);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF0548B8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c107_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver27configureRTCPLinkMonitorReqENS0_I13QMIRTPSessionEEtE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c107_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver27configureRTCPLinkMonitorReqENS0_I13QMIRTPSessionEEtE3__0EE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::configureRTCPLinkMonitorReq(std::shared_ptr<QMIRTPSession>,unsigned short)::$_0,std::allocator<QMIRTPCommandDriver::configureRTCPLinkMonitorReq(std::shared_ptr<QMIRTPSession>,unsigned short)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D5D30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::configureRTCPLinkMonitorReq(std::shared_ptr<QMIRTPSession>,unsigned short)::$_0,std::allocator<QMIRTPCommandDriver::configureRTCPLinkMonitorReq(std::shared_ptr<QMIRTPSession>,unsigned short)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D5D30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<QMIRTPCommandDriver::configureRTCPLinkMonitorReq(std::shared_ptr<QMIRTPSession>,unsigned short)::$_0,std::allocator<QMIRTPCommandDriver::configureRTCPLinkMonitorReq(std::shared_ptr<QMIRTPSession>,unsigned short)::$_0>>::__on_zero_shared(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

uint64_t ___ZN19QMIRTPCommandDriver26getSessionIdFromIndicationIN2ms17SessionInactivity10IndicationEEEhRKT__block_invoke(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::MediaServiceNotificationSubscription>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::MediaServiceNotificationSubscription>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::MediaServiceNotificationSubscription>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_QWORD *)(v3 + 3) = *(unsigned int *)(result + 12);
  *a2 = v3 + 11;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 8;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::MediaServiceNotificationSubscription>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78D5DC0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver25subscribeNotificationsReqEjE3__0EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  _QWORD *v7;
  size_t v8;
  uint64_t v9;
  __n128 v10;
  const char *v11;
  size_t v12;
  uint64_t v13;
  void *v14[2];
  char v15;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;

  v3 = **(_QWORD ***)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(v18, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v18, (uint64_t)__p);
  if (!v3)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = (const char *)(*(_QWORD *)(*(_QWORD *)(*v3 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
  v7 = *(_QWORD **)(v4 + 8);
  v8 = strlen(v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v6, v8);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"handleSubscribeNotificationsResp", 32);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  if (*((_DWORD *)a2 + 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::error(ims::_logger, (uint64_t)v18, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Error response for request: ", 28);
    *(_BYTE *)(v9 + 17) = 0;
    v10 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v14, *a2);
    (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v9 + 32))(v9, v14, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" error:", 7);
    *(_BYTE *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" reason: ", 9);
    *(_BYTE *)(v9 + 17) = 0;
    v11 = (const char *)qmi::asString();
    v12 = strlen(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)v11, v12);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (v15 < 0)
      operator delete(v14[0]);
    if (v17 < 0)
      operator delete(__p[0]);
    if (v19 < 0)
      operator delete(v18[0]);
    std::string::basic_string[abi:ne180100]<0>(v18, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v13 = ImsLogger::error(ims::_logger, (uint64_t)v18, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"subscribeNotificationsReq failed", 32);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    if (v17 < 0)
      operator delete(__p[0]);
    if (v19 < 0)
      operator delete(v18[0]);
  }
}

void sub_1BF054D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c83_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver25subscribeNotificationsReqEjE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c83_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver25subscribeNotificationsReqEjE3__0EE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::subscribeNotificationsReq(unsigned int)::$_0,std::allocator<QMIRTPCommandDriver::subscribeNotificationsReq(unsigned int)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D5E28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::subscribeNotificationsReq(unsigned int)::$_0,std::allocator<QMIRTPCommandDriver::subscribeNotificationsReq(unsigned int)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D5E28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms29ServiceSubscribeNotifications8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1BF054EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms12ServiceError10IndicationEEENS1_9RTPStatusERKT__block_invoke(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver26getSessionIdFromIndicationIN2ms12ServiceError10IndicationEEEhRKT__block_invoke(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms18ServiceRtcpReports10IndicationEEENS1_9RTPStatusERKT__block_invoke(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

uint64_t ___ZN19QMIRTPCommandDriver26getSessionIdFromIndicationIN2ms18ServiceRtcpReports10IndicationEEEhRKT__block_invoke(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::DTMFDigit>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::DTMFDigit>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::DTMFDigit>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::DTMFDigit>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E78D5F58;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::DTMFVolume>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::DTMFVolume>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::DTMFVolume>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::DTMFVolume>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E78D5FA8;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::DTMFDuration>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::DTMFDuration>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::DTMFDuration>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::DTMFDuration>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78D5FF8;
  *(_WORD *)(result + 10) = *(_WORD *)(a1 + 10);
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver11sendDTMFReqENSt3__110shared_ptrI13QMIRTPSessionEEchtE3__0EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  int v13;
  uint64_t v14;
  __n128 v15;
  const char *v16;
  size_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  size_t v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29[2];
  void (*v30)(uint64_t);
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  int v35;
  void *v36[2];
  char v37;
  void *__p[2];
  char v39;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(std::__shared_weak_count **)(v3 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!v5)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v23 = ImsLogger::error(ims::_logger, (uint64_t)v29, (uint64_t)__p);
    if (!v4)
      __cxa_bad_typeid();
    v24 = v23;
    v25 = *(_QWORD **)(v23 + 8);
    v26 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, *(_QWORD *)(*(_QWORD *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v26);
    *(_BYTE *)(v24 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v24 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"handleSendDTMFResp", 18);
    *(_BYTE *)(v24 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)" session is null", 16);
    *(_BYTE *)(v24 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v24 + 17) = 0;
    if (v39 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v30) < 0)
    {
      operator delete(v29[0]);
      if (!v6)
        return;
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  std::string::basic_string[abi:ne180100]<0>(v29, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v9 = ImsLogger::debug(ims::_logger, (uint64_t)v29, (uint64_t)__p);
  if (!v4)
    __cxa_bad_typeid();
  v10 = v9;
  v11 = *(_QWORD **)(v9 + 8);
  v12 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, *(_QWORD *)(*(_QWORD *)(*v4 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v12);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"handleSendDTMFResp", 18);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 24) + 176))(v5 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (v39 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
  v13 = *((_DWORD *)a2 + 1);
  if (v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v14 = ImsLogger::error(ims::_logger, (uint64_t)v29, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Error response for request: ", 28);
    *(_BYTE *)(v14 + 17) = 0;
    v15 = QMIRTPCommandDriver::nameForRequestId((QMIRTPCommandDriver *)v36, *a2);
    (*(void (**)(uint64_t, void **, __n128))(*(_QWORD *)v14 + 32))(v14, v36, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" error:", 7);
    *(_BYTE *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" reason: ", 9);
    *(_BYTE *)(v14 + 17) = 0;
    v16 = (const char *)qmi::asString();
    v17 = strlen(v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)v16, v17);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    if (v37 < 0)
      operator delete(v36[0]);
    if (v39 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v30) < 0)
      operator delete(v29[0]);
    v13 = 4;
  }
  v29[0] = (void *)MEMORY[0x1E0C809B0];
  v29[1] = (void *)1174405120;
  v30 = ___ZN19QMIRTPCommandDriver18handleSendDTMFRespERKN2ms15SessionSendDTMF8ResponseENSt3__110shared_ptrI13QMIRTPSessionEE_block_invoke;
  v31 = &__block_descriptor_tmp_175;
  v35 = v13;
  v32 = v4;
  v33 = v5;
  v34 = v6;
  if (v6)
  {
    v18 = (unint64_t *)&v6->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  ims::performBlock((IMSClientManager *)v29);
  v20 = v34;
  if (!v34)
    goto LABEL_31;
  v21 = (unint64_t *)&v34->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
  {
LABEL_31:
    if (!v6)
      return;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (!v6)
    return;
LABEL_32:
  v27 = (unint64_t *)&v6->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1BF0555D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v34;

  if (a14 < 0)
    operator delete(__p);
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c93_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver11sendDTMFReqENS0_I13QMIRTPSessionEEchtE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c93_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver11sendDTMFReqENS0_I13QMIRTPSessionEEchtE3__0EE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sendDTMFReq(std::shared_ptr<QMIRTPSession>,char,unsigned char,unsigned short)::$_0,std::allocator<QMIRTPCommandDriver::sendDTMFReq(std::shared_ptr<QMIRTPSession>,char,unsigned char,unsigned short)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D6060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::sendDTMFReq(std::shared_ptr<QMIRTPSession>,char,unsigned char,unsigned short)::$_0,std::allocator<QMIRTPCommandDriver::sendDTMFReq(std::shared_ptr<QMIRTPSession>,char,unsigned char,unsigned short)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D6060;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<QMIRTPCommandDriver::sendDTMFReq(std::shared_ptr<QMIRTPSession>,char,unsigned char,unsigned short)::$_0,std::allocator<QMIRTPCommandDriver::sendDTMFReq(std::shared_ptr<QMIRTPSession>,char,unsigned char,unsigned short)::$_0>>::__on_zero_shared(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms15SessionSendDTMF8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1BF0557B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::ApnType>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::ApnType>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::ApnType>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::ApnType>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78D60F0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::ClientRouter::SendProxy::SendProxy<ms::ServiceUninitializeAllSessions::Request>(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;

  *(_DWORD *)a1 = a2;
  v5 = operator new();
  *(_QWORD *)v5 = a3;
  *(_QWORD *)(v5 + 8) = QMIServiceMsg::create();
  *(_DWORD *)(v5 + 16) = 25000;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

void sub_1BF0558F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10F0C401BA14CC5);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver26uninitializeAllSessionsReqERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN2ms7ApnTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  int v3;
  _QWORD v4[5];
  int v5;

  v2 = **(_QWORD **)(a1 + 32);
  v3 = QMIRTPCommandDriver::getResultFromResponse<ms::ServiceUninitializeAllSessions::Response>(a2);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN19QMIRTPCommandDriver33handleUninitializeAllSessionsRespERKN2ms30ServiceUninitializeAllSessions8ResponseEh_block_invoke;
  v4[3] = &__block_descriptor_tmp_192;
  v4[4] = v2;
  v5 = v3;
  ims::performBlock((IMSClientManager *)v4);
}

uint64_t __copy_helper_block_e8_32c156_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver26uninitializeAllSessionsReqERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN2ms7ApnTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c156_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver26uninitializeAllSessionsReqERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN2ms7ApnTypeEE3__0EE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::uninitializeAllSessionsReq(std::string const&,ms::ApnType)::$_0,std::allocator<QMIRTPCommandDriver::uninitializeAllSessionsReq(std::string const&,ms::ApnType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D6158;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::uninitializeAllSessionsReq(std::string const&,ms::ApnType)::$_0,std::allocator<QMIRTPCommandDriver::uninitializeAllSessionsReq(std::string const&,ms::ApnType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D6158;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN2ms30ServiceUninitializeAllSessions8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1BF055AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN19QMIRTPCommandDriver26uninitializeAllSessionsReqERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN2ms7ApnTypeEE3__1EEOS1_OT__block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  int v3;
  _QWORD v4[5];
  int v5;

  v2 = **(_QWORD **)(a1 + 32);
  v3 = QMIRTPCommandDriver::getResultFromResponse<ms::ServiceUninitializeAllSessions::Response>(a2);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN19QMIRTPCommandDriver33handleUninitializeAllSessionsRespERKN2ms30ServiceUninitializeAllSessions8ResponseEh_block_invoke;
  v4[3] = &__block_descriptor_tmp_192;
  v4[4] = v2;
  v5 = v3;
  ims::performBlock((IMSClientManager *)v4);
}

uint64_t __copy_helper_block_e8_32c156_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver26uninitializeAllSessionsReqERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN2ms7ApnTypeEE3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c156_ZTSNSt3__110shared_ptrIZN19QMIRTPCommandDriver26uninitializeAllSessionsReqERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN2ms7ApnTypeEE3__1EE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::uninitializeAllSessionsReq(std::string const&,ms::ApnType)::$_1,std::allocator<QMIRTPCommandDriver::uninitializeAllSessionsReq(std::string const&,ms::ApnType)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D6200;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPCommandDriver::uninitializeAllSessionsReq(std::string const&,ms::ApnType)::$_1,std::allocator<QMIRTPCommandDriver::uninitializeAllSessionsReq(std::string const&,ms::ApnType)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D6200;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t ___ZN19QMIRTPCommandDriver23getStatusFromIndicationIN2ms30ServiceUninitializeAllSessions10IndicationEEENS1_9RTPStatusERKT__block_invoke(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::CallEvent>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::CallEvent>::getSize()
{
  return 6;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<audio::tlv::CallEvent>::write(_BYTE *result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = result[8];
  v3 = *a2;
  *(_BYTE *)(v3 + 3) = result[9];
  *(_BYTE *)(v3 + 4) = result[10];
  *(_BYTE *)(v3 + 5) = result[11];
  *a2 = v3 + 6;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 3;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::CallEvent>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78D6290;
  *(_WORD *)(result + 9) = *(_WORD *)(a1 + 9);
  *(_BYTE *)(result + 11) = *(_BYTE *)(a1 + 11);
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::VoiceSystemId>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::VoiceSystemId>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::VoiceSystemId>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::VoiceSystemId>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78D62E0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5audio13SendCallEvent8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1BF055DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::SubscriptionId>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::SubscriptionId>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::SubscriptionId>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::SubscriptionId>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E78D6358;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5audio21CodecChangeCbRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1BF055F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN5audio12DownlinkDtmf10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1BF056074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

__CFString *KAStringFromDate(NSDate *a1)
{
  NSDate *v1;
  __CFString *v2;

  v1 = a1;
  if (v1)
  {
    if (qword_1ED70ECC0 != -1)
      dispatch_once(&qword_1ED70ECC0, &__block_literal_global_5);
    objc_msgSend((id)_MergedGlobals_12, "stringFromDate:", v1);
    v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = CFSTR("(null)");
  }

  return v2;
}

void sub_1BF05612C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___Z16KAStringFromDateP6NSDate_block_invoke()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  v1 = (void *)_MergedGlobals_12;
  _MergedGlobals_12 = (uint64_t)v0;

  return objc_msgSend((id)_MergedGlobals_12, "setDateFormat:", CFSTR("HH:mm:ss"));
}

void sub_1BF0564DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;

  if (a22 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BF056668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 - 17) < 0)
    operator delete(*(void **)(v17 - 40));
  a9.super_class = (Class)KeepAliveManager;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BF056874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BF056A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BF056B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BF056C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BF056E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  void *v34;
  uint64_t v35;

  if (*(char *)(v35 - 49) < 0)
    operator delete(*(void **)(v35 - 72));

  if (a21 < 0)
    operator delete(__p);

  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(a1);
}

void sub_1BF0571A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v20);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v21 - 56);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c49_ZTSKNSt3__110shared_ptrI20ImsKeepAliveDelegateEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_32c49_ZTSKNSt3__110shared_ptrI20ImsKeepAliveDelegateEE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

SipHeader *SipPolymorphicVectorHeader<SipSecurityMechanism>::SipPolymorphicVectorHeader(SipHeader *a1, const SipHeader *a2)
{
  _QWORD *v4;
  char **v5;
  char *v6;
  char *v7;
  int64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *i;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  uint64_t v26;

  SipHeader::SipHeader(a1, a2);
  v4[8] = 0;
  v5 = (char **)(v4 + 8);
  *v4 = off_1E78D6530;
  v4[9] = 0;
  v4[10] = 0;
  v7 = (char *)*((_QWORD *)a2 + 8);
  v6 = (char *)*((_QWORD *)a2 + 9);
  v8 = v6 - v7;
  if (v6 == v7)
  {
    v11 = 0;
  }
  else
  {
    if (v8 < 0)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)a1 + 80, v8 >> 3);
    *((_QWORD *)a1 + 8) = v9;
    *((_QWORD *)a1 + 9) = v9;
    *((_QWORD *)a1 + 10) = &v9[8 * v10];
    memmove(v9, v7, v8);
    *((_QWORD *)a1 + 9) = &v9[8 * (v8 >> 3)];
    v11 = *((_QWORD *)a1 + 8);
    v7 = (char *)*((_QWORD *)a2 + 8);
  }
  *(_QWORD *)a1 = off_1E78D6498;
  *((_QWORD *)a1 + 9) = v11;
  for (i = (char *)*((_QWORD *)a2 + 9); v7 != i; v7 += 8)
  {
    v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v7 + 32))(*(_QWORD *)v7);
    v14 = v13;
    v16 = (uint64_t *)*((_QWORD *)a1 + 9);
    v15 = *((_QWORD *)a1 + 10);
    if ((unint64_t)v16 >= v15)
    {
      v18 = ((char *)v16 - *v5) >> 3;
      if ((unint64_t)(v18 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v19 = v15 - (_QWORD)*v5;
      v20 = v19 >> 2;
      if (v19 >> 2 <= (unint64_t)(v18 + 1))
        v20 = v18 + 1;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v20;
      if (v21)
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)a1 + 80, v21);
      else
        v22 = 0;
      v23 = (uint64_t *)&v22[8 * v18];
      *v23 = v14;
      v17 = v23 + 1;
      v25 = (char *)*((_QWORD *)a1 + 8);
      v24 = (char *)*((_QWORD *)a1 + 9);
      if (v24 != v25)
      {
        do
        {
          v26 = *((_QWORD *)v24 - 1);
          v24 -= 8;
          *--v23 = v26;
        }
        while (v24 != v25);
        v24 = *v5;
      }
      *((_QWORD *)a1 + 8) = v23;
      *((_QWORD *)a1 + 9) = v17;
      *((_QWORD *)a1 + 10) = &v22[8 * v21];
      if (v24)
        operator delete(v24);
    }
    else
    {
      *v16 = v13;
      v17 = v16 + 1;
    }
    *((_QWORD *)a1 + 9) = v17;
  }
  return a1;
}

void sub_1BF057450(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 72) = v4;
    operator delete(v4);
  }
  SipHeader::~SipHeader((void **)v1);
  _Unwind_Resume(a1);
}

void SipPolymorphicVectorHeader<SipSecurityMechanism>::~SipPolymorphicVectorHeader(SipHeader *this)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E78D6498;
  v4 = (char *)this + 64;
  v2 = (_QWORD *)*((_QWORD *)this + 8);
  v3 = (_QWORD *)*((_QWORD *)v4 + 1);
  if (v3 == v2)
  {
    v2 = v3;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = v2[v5];
      if (v6)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v6 + 8))(v2[v5]);
        v2 = (_QWORD *)*((_QWORD *)this + 8);
        v3 = (_QWORD *)*((_QWORD *)this + 9);
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  *(_QWORD *)this = off_1E78D6530;
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  SipHeader::~SipHeader((void **)this);
}

BOOL SipSecurityAgreementHeader::itemFromString(uint64_t a1, std::string *a2, _QWORD *a3)
{
  _QWORD *v4;

  v4 = SipSecurityMechanism::fromString(a2);
  if (v4)
    *a3 = v4;
  return v4 != 0;
}

ImsOutStream *SipPolymorphicVectorHeader<SipSecurityMechanism>::itemToStream(uint64_t a1, uint64_t *a2, ImsOutStream *a3)
{
  uint64_t v4;

  v4 = *a2;
  (*(void (**)(ImsOutStream *, uint64_t))(*(_QWORD *)a3 + 32))(a3, *a2 + 8);
  return SipParameterMap::toStream((SipParameterMap *)(v4 + 32), a3, 0, 0, 0, 0);
}

BOOL SipPolymorphicVectorHeader<SipSecurityMechanism>::itemFromString(uint64_t a1, std::string *a2, _QWORD *a3)
{
  _QWORD *v4;

  v4 = SipSecurityMechanism::fromString(a2);
  if (v4)
    *a3 = v4;
  return v4 != 0;
}

BOOL SipVectorHeader<SipSecurityMechanism *>::mergeHeader(_QWORD *a1, void *lpsrc)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v4 = v3;
  if (v3)
  {
    v5 = (_QWORD *)v3[8];
    v6 = (_QWORD *)v3[9];
    while (v5 != v6)
      SipVectorHeader<SipSecurityMechanism *>::addItem(a1, v5++);
  }
  return v4 != 0;
}

void SipVectorHeader<SipSecurityMechanism *>::~SipVectorHeader(SipHeader *this)
{
  void *v2;

  *(_QWORD *)this = off_1E78D6530;
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  SipHeader::~SipHeader((void **)this);
}

void ImsNetworkManager::createTransport(const void **a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, std::string *a5@<X5>, int a6@<W6>, _QWORD *a7@<X8>)
{
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  void *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;

  a7[2] = 0;
  a7[3] = 0;
  a7[8] = 0;
  a7[6] = 0;
  a7[7] = 0;
  *a7 = &off_1E78B7238;
  a7[1] = &_bambiDomain;
  a7[4] = 0;
  a7[5] = 0;
  v12 = *a2;
  v11 = (std::__shared_weak_count *)a2[1];
  if (a6)
  {
    v14 = (std::__shared_weak_count *)operator new(0x128uLL);
    v15 = v14;
    v14->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    v14->__shared_weak_owners_ = 0;
    v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D6810;
    v17 = v14 + 1;
    v62 = v12;
    v63 = v11;
    if (v11)
    {
      v18 = (unint64_t *)&v11->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    SipTlsTransportGroup::SipTlsTransportGroup((uint64_t)&v14[1], &v62);
    if (v11)
    {
      v20 = (unint64_t *)&v11->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    shared_weak_owners = (std::__shared_weak_count *)v15[8].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      if (shared_weak_owners->__shared_owners_ != -1)
        goto LABEL_23;
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
      do
        v25 = __ldxr(p_shared_weak_owners);
      while (__stxr(v25 + 1, p_shared_weak_owners));
      v15[8].__shared_owners_ = (uint64_t)v17;
      v15[8].__shared_weak_owners_ = (uint64_t)v15;
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
    else
    {
      do
        v26 = __ldxr(p_shared_owners);
      while (__stxr(v26 + 1, p_shared_owners));
      v27 = (unint64_t *)&v15->__shared_weak_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v15[8].__shared_owners_ = (uint64_t)v17;
      v15[8].__shared_weak_owners_ = (uint64_t)v15;
    }
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
LABEL_23:
    v30 = (std::__shared_weak_count *)a1[1];
    *a1 = v17;
    a1[1] = v15;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
      v17 = (std::__shared_weak_count *)*a1;
      if (!*a1)
        goto LABEL_66;
    }
    if (v33)
    {
      v34 = (std::__shared_weak_count *)a1[1];
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
    }
    else
    {
LABEL_66:
      v34 = 0;
      v33 = 0;
    }
    SipTlsTransportGroup::initialize((uint64_t)v33, a3, a4, (uint64_t)a5, (uint64_t)&v62);
    ImsResult::operator=((uint64_t)a7, (uint64_t)&v62);
    ImsResult::~ImsResult((ImsResult *)&v62);
    if (v34)
    {
      v59 = (unint64_t *)&v34->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
LABEL_75:
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
      return;
    }
    return;
  }
  v37 = (std::__shared_weak_count *)operator new(0x110uLL);
  v38 = v37;
  v37->__shared_owners_ = 0;
  v39 = (unint64_t *)&v37->__shared_owners_;
  v37->__shared_weak_owners_ = 0;
  v37->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D6860;
  v40 = v37 + 1;
  v62 = v12;
  v63 = v11;
  if (v11)
  {
    v41 = (unint64_t *)&v11->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  SipInsecureTransportGroup::SipInsecureTransportGroup((uint64_t)&v37[1], &v62);
  if (v11)
  {
    v43 = (unint64_t *)&v11->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v45 = (std::__shared_weak_count *)v38[8].__shared_weak_owners_;
  if (v45)
  {
    if (v45->__shared_owners_ != -1)
      goto LABEL_55;
    do
      v46 = __ldxr(v39);
    while (__stxr(v46 + 1, v39));
    v47 = (unint64_t *)&v38->__shared_weak_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
    v38[8].__shared_owners_ = (uint64_t)v40;
    v38[8].__shared_weak_owners_ = (uint64_t)v38;
    std::__shared_weak_count::__release_weak(v45);
  }
  else
  {
    do
      v49 = __ldxr(v39);
    while (__stxr(v49 + 1, v39));
    v50 = (unint64_t *)&v38->__shared_weak_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
    v38[8].__shared_owners_ = (uint64_t)v40;
    v38[8].__shared_weak_owners_ = (uint64_t)v38;
  }
  do
    v52 = __ldaxr(v39);
  while (__stlxr(v52 - 1, v39));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
LABEL_55:
  v53 = (std::__shared_weak_count *)a1[1];
  *a1 = v40;
  a1[1] = v38;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
    v40 = (std::__shared_weak_count *)*a1;
    if (!*a1)
      goto LABEL_71;
  }
  if (v56)
  {
    v34 = (std::__shared_weak_count *)a1[1];
    if (v34)
    {
      v57 = (unint64_t *)&v34->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
  }
  else
  {
LABEL_71:
    v34 = 0;
    v56 = 0;
  }
  SipInsecureTransportGroup::initialize((uint64_t)v56, a3, a5, (uint64_t)&v62);
  ImsResult::operator=((uint64_t)a7, (uint64_t)&v62);
  ImsResult::~ImsResult((ImsResult *)&v62);
  if (v34)
  {
    v61 = (unint64_t *)&v34->__shared_owners_;
    do
      v60 = __ldaxr(v61);
    while (__stlxr(v60 - 1, v61));
    goto LABEL_75;
  }
}

void sub_1BF057B00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  ImsResult *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  ImsResult::~ImsResult((ImsResult *)va1);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ImsResult::~ImsResult(v2);
  _Unwind_Resume(a1);
}

void SimpleNetworkManager::SimpleNetworkManager(SimpleNetworkManager *this)
{
  _QWORD *v2;

  *((_BYTE *)this + 12) = 1;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
  *((_DWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_QWORD *)this = &off_1E78D65E8;
  *((_QWORD *)this + 9) = 0;
  v2 = (_QWORD *)operator new();
  v2[3] = 0;
  v2[2] = 0;
  *v2 = &off_1E78D9DF8;
  v2[1] = v2 + 2;
  *((_QWORD *)this + 9) = v2;
}

void sub_1BF057C14(_Unwind_Exception *a1)
{
  SipLockable *v1;

  SipLockable::~SipLockable(v1, (uint64_t *)off_1E78D6688);
  _Unwind_Resume(a1);
}

void SimpleNetworkManager::~SimpleNetworkManager(SimpleNetworkManager *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E78D65E8;
  v2 = *((_QWORD *)this + 9);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  SipLockable::~SipLockable(this, (uint64_t *)off_1E78D6688);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E78D65E8;
  v2 = *((_QWORD *)this + 9);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  SipLockable::~SipLockable(this, (uint64_t *)off_1E78D6688);
  JUMPOUT(0x1C3B87100);
}

void SimpleNetworkManager::copyAllInterfaces(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL4 v4;
  int v5;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v4 = SimpleNetworkManager::copyInterfaces(a1, (const void **)__p);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)a2 = &off_1E78B7238;
  *(_QWORD *)(a2 + 8) = &_bambiDomain;
  if (v4)
    v5 = 0;
  else
    v5 = 0x40000000;
  *(_DWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1BF057D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SimpleNetworkManager::copyInterfaces(uint64_t **a1, const void **a2)
{
  ifaddrs *v5;
  uint64_t v6;
  int v7;
  size_t v8;
  const void *v9;
  sockaddr *ifa_addr;
  int sa_family;
  BOOL v12;
  int v13;
  sockaddr *v14;
  const char *ifa_name;
  sockaddr v16;
  char v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  _DWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  int v33;
  size_t v34;
  const void *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  ifaddrs *v55;
  __int128 v56;
  _DWORD *v57;
  uint64_t v58;
  __int128 lpsrc;
  void *__p[2];
  char v61;
  ifaddrs *v62;
  char __dst[8];
  _BYTE v64[40];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v62 = 0;
  if (getifaddrs(&v62))
    return 0;
  v5 = v62;
  if (v62)
  {
    v6 = 0;
    while (1)
    {
      v7 = *((char *)a2 + 23);
      v8 = v7 >= 0 ? *((unsigned __int8 *)a2 + 23) : (size_t)a2[1];
      if (!v8 || v8 == strlen(v5->ifa_name) && (v7 >= 0 ? (v9 = a2) : (v9 = *a2), !memcmp(v9, v5->ifa_name, v8)))
      {
        ifa_addr = v5->ifa_addr;
        if (ifa_addr)
        {
          sa_family = ifa_addr->sa_family;
          v12 = sa_family == 30 || sa_family == 2;
          if (v12 && (v5->ifa_flags & 9) == 1)
            break;
        }
      }
LABEL_117:
      v5 = v5->ifa_next;
      if (!v5)
      {
        v55 = v62;
        goto LABEL_120;
      }
    }
    if (sa_family == 30)
    {
      v13 = socket(30, 2, 0);
      if ((v13 & 0x80000000) == 0)
      {
        v14 = v5->ifa_addr;
        ifa_name = v5->ifa_name;
        v79 = 0;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        *(_OWORD *)&v64[24] = 0u;
        strncpy(__dst, ifa_name, 0x10uLL);
        v16 = *v14;
        *(sockaddr *)&v64[12] = *(sockaddr *)&v14->sa_data[10];
        *(sockaddr *)v64 = v16;
        if ((ioctl(v13, 0xC1206949uLL, __dst) & 0x80000000) == 0)
        {
          v17 = v64[0];
          if ((v64[0] & 0x80) != 0)
          {
            std::string::basic_string[abi:ne180100]<0>(__dst, "net");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v20 = ImsLogger::debug(ims::_logger, (uint64_t)__dst, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"flavorMask |= AddressFlavorTemporary", 36);
            *(_BYTE *)(v20 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v20 + 17) = 0;
            if (v61 < 0)
              operator delete(__p[0]);
            if ((v64[7] & 0x80000000) != 0)
              operator delete(*(void **)__dst);
            v18 = 4;
            if ((v17 & 0x10) == 0)
              goto LABEL_41;
          }
          else
          {
            v18 = 0;
            if ((v64[0] & 0x10) == 0)
            {
LABEL_41:
              if ((v17 & 6) != 0)
              {
                std::string::basic_string[abi:ne180100]<0>(__dst, "net");
                std::string::basic_string[abi:ne180100]<0>(__p, "");
                pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
                v22 = ImsLogger::debug(ims::_logger, (uint64_t)__dst, (uint64_t)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"flavorMask |= AddressFlavorNotReady", 35);
                *(_BYTE *)(v22 + 17) = 0;
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(_BYTE *)(v22 + 17) = 0;
                if (v61 < 0)
                  operator delete(__p[0]);
                if ((v64[7] & 0x80000000) != 0)
                  operator delete(*(void **)__dst);
                v18 |= 0x20u;
              }
              if ((v17 & 8) != 0)
              {
                std::string::basic_string[abi:ne180100]<0>(__dst, "net");
                std::string::basic_string[abi:ne180100]<0>(__p, "");
                pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
                v23 = ImsLogger::debug(ims::_logger, (uint64_t)__dst, (uint64_t)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"flavorMask |= AddressFlavorDetached", 35);
                *(_BYTE *)(v23 + 17) = 0;
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(_BYTE *)(v23 + 17) = 0;
                if (v61 < 0)
                  operator delete(__p[0]);
                if ((v64[7] & 0x80000000) != 0)
                  operator delete(*(void **)__dst);
                v18 |= 0x10u;
              }
              goto LABEL_53;
            }
          }
          std::string::basic_string[abi:ne180100]<0>(__dst, "net");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v21 = ImsLogger::debug(ims::_logger, (uint64_t)__dst, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"flavorMask |= AddressFlavorDeprecated", 37);
          *(_BYTE *)(v21 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v21 + 17) = 0;
          if (v61 < 0)
            operator delete(__p[0]);
          if ((v64[7] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          v18 |= 8u;
          goto LABEL_41;
        }
        close(v13);
        v18 = 0;
LABEL_53:
        v24 = v5->ifa_name;
        *(_QWORD *)v64 = 0;
        *(_QWORD *)&v64[8] = 0;
        strncpy(__dst, v24, 0x10uLL);
        if (ioctl(v13, 0xC0206933uLL, __dst) >= 0)
          v19 = *(_DWORD *)v64;
        else
          v19 = 0;
        close(v13);
        goto LABEL_57;
      }
      v18 = 0;
      v19 = 0;
    }
    else
    {
      v13 = socket(2, 2, 0);
      v18 = 0;
      v19 = 0;
      if ((v13 & 0x80000000) == 0)
        goto LABEL_53;
    }
LABEL_57:
    lpsrc = 0uLL;
    IpAddress::createAddress((IpAddress *)v5->ifa_addr, (uint64_t)&lpsrc);
    v25 = lpsrc;
    if ((_QWORD)lpsrc)
    {
      if (v18)
      {
        if (v26)
        {
          v27 = (std::__shared_weak_count *)*((_QWORD *)&lpsrc + 1);
          v57 = v26;
          v58 = *((_QWORD *)&lpsrc + 1);
          if (*((_QWORD *)&lpsrc + 1))
          {
            v28 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
            do
              v29 = __ldxr(v28);
            while (__stxr(v29 + 1, v28));
          }
          v26[6] = v18;
          std::string::basic_string[abi:ne180100]<0>(__dst, "net");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v30 = ImsLogger::debug(ims::_logger, (uint64_t)__dst, (uint64_t)__p);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 40))(v25, v30);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)": flavorMask=", 13);
          *(_BYTE *)(v30 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v30 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v30 + 17) = 0;
          if (v61 < 0)
            operator delete(__p[0]);
          if ((v64[7] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          if (v27)
          {
            p_shared_owners = (unint64_t *)&v27->__shared_owners_;
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
        }
      }
      if (!v6
        || ((v33 = *(char *)(v6 + 55), v33 >= 0) ? (v34 = *(unsigned __int8 *)(v6 + 55)) : (v34 = *(_QWORD *)(v6 + 40)),
            v34 != strlen(v5->ifa_name)
         || (v33 >= 0 ? (v35 = (const void *)(v6 + 32)) : (v35 = *(const void **)(v6 + 32)),
             memcmp(v35, v5->ifa_name, v34))))
      {
        v6 = operator new();
        std::string::basic_string[abi:ne180100]<0>(__dst, v5->ifa_name);
        NetworkInterface::NetworkInterface(v6, (const std::string *)__dst);
        if ((v64[7] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        v37 = a1[1];
        v36 = (unint64_t)a1[2];
        if ((unint64_t)v37 >= v36)
        {
          v39 = *a1;
          v40 = v37 - *a1;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61)
            std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
          v42 = v36 - (_QWORD)v39;
          if (v42 >> 2 > v41)
            v41 = v42 >> 2;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
            v43 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
          {
            if (v43 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v44 = (char *)operator new(8 * v43);
          }
          else
          {
            v44 = 0;
          }
          v45 = (uint64_t *)&v44[8 * v40];
          *v45 = v6;
          v38 = v45 + 1;
          if (v37 != v39)
          {
            do
            {
              v46 = *--v37;
              *--v45 = v46;
            }
            while (v37 != v39);
            v37 = *a1;
          }
          *a1 = v45;
          a1[1] = v38;
          a1[2] = (uint64_t *)&v44[8 * v43];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v37 = v6;
          v38 = v37 + 1;
        }
        a1[1] = v38;
      }
      v56 = lpsrc;
      if (*((_QWORD *)&lpsrc + 1))
      {
        v47 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      std::vector<std::shared_ptr<LazuliHeader>>::push_back[abi:ne180100]((char **)(v6 + 8), &v56);
      v49 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
      if (*((_QWORD *)&v56 + 1))
      {
        v50 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      if (v19 && *(_DWORD *)(v6 + 56) - 1 >= v19)
        *(_DWORD *)(v6 + 56) = v19;
    }
    v52 = (std::__shared_weak_count *)*((_QWORD *)&lpsrc + 1);
    if (*((_QWORD *)&lpsrc + 1))
    {
      v53 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    goto LABEL_117;
  }
  v55 = 0;
LABEL_120:
  MEMORY[0x1C3B87430](v55);
  return *a1 != a1[1];
}

void sub_1BF0585E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SimpleNetworkManager::copyInterfaceWithName(uint64_t a1, const void **a2)
{
  _BOOL4 v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  void *__p;
  uint64_t v10;
  uint64_t v11;

  __p = 0;
  v10 = 0;
  v11 = 0;
  v2 = SimpleNetworkManager::copyInterfaces((uint64_t **)&__p, a2);
  v3 = __p;
  if (v2)
  {
    v4 = *(_QWORD *)__p;
    if ((unint64_t)(v10 - (_QWORD)__p) >= 9)
    {
      v5 = (v10 - (uint64_t)__p) >> 3;
      if (v5 <= 2)
        v5 = 2;
      v6 = v5 - 1;
      v7 = (char *)__p + 8;
      do
      {
        if (*v7)
          (*(void (**)(_QWORD))(*(_QWORD *)*v7 + 8))(*v7);
        ++v7;
        --v6;
      }
      while (v6);
    }
    goto LABEL_11;
  }
  v4 = 0;
  if (__p)
LABEL_11:
    operator delete(v3);
  return v4;
}

void sub_1BF058778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const __SCNetworkReachability *SimpleNetworkManager::isReachable(uint64_t a1, NetworkInterface *a2, _QWORD *a3)
{
  int v5;
  const __SCNetworkReachability *Reachability;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;

  if (!a2)
    return 0;
  v11 = 0;
  v12 = 0;
  v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 136))(*a3);
  NetworkInterface::firstAddress(a2, v5, 1, &v11);
  if (v11)
    Reachability = ImsNetworkReachabilityMonitor::getReachability(&v11, a3);
  else
    Reachability = 0;
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return Reachability;
}

void sub_1BF058848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const __SCNetworkReachability *SimpleNetworkManager::isReachable(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return ImsNetworkReachabilityMonitor::getReachability(a2, a3);
}

void SimpleNetworkManager::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "SimpleNetworkManager");
}

void SimpleNetworkManager::createTcpSocket(uint64_t *a1@<X1>, int a2@<W3>, int a3@<W4>, int a4@<W5>, _QWORD *a5@<X8>)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  if (a4)
  {
    v9 = *a1;
    v8 = (std::__shared_weak_count *)a1[1];
    v10 = (std::__shared_weak_count *)operator new(0xF0uLL);
    v11 = v10;
    v10->__shared_owners_ = 0;
    v10->__shared_weak_owners_ = 0;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BEAA8;
    v12 = (uint64_t)&v10[1];
    v26 = v9;
    v27 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    ImsTlsSocket::ImsTlsSocket((uint64_t)&v10[1], &v26, a2, a3);
    if (v8)
    {
      v15 = (unint64_t *)&v8->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    v18 = *a1;
    v17 = (std::__shared_weak_count *)a1[1];
    v19 = (std::__shared_weak_count *)operator new(0xC8uLL);
    v11 = v19;
    v19->__shared_owners_ = 0;
    v19->__shared_weak_owners_ = 0;
    v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C9A18;
    v12 = (uint64_t)&v19[1];
    v26 = v18;
    v27 = v17;
    if (v17)
    {
      v20 = (unint64_t *)&v17->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    ImsTcpSocket::ImsTcpSocket((uint64_t)&v19[1], &v26, a2, a3);
    if (v17)
    {
      v22 = (unint64_t *)&v17->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  v26 = v12;
  v27 = v11;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v26, &v11[1].__shared_owners_, v12);
  v24 = v27;
  if (v26)
    v25 = v26 + 80;
  else
    v25 = 0;
  *a5 = v25;
  a5[1] = v24;
}

void sub_1BF058A14(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void SimpleNetworkManager::createUdpSocket(uint64_t *a1@<X1>, int a2@<W3>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v7 = (std::__shared_weak_count *)operator new(0x88uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C9BC8;
  v9 = (uint64_t)&v7[1];
  v16 = v6;
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  ImsUdpSocket::ImsUdpSocket((uint64_t)&v7[1], &v16, a2);
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v16 = v9;
  v17 = v8;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v16, &v8[1].__shared_owners_, v9);
  v14 = v17;
  if (v16)
    v15 = v16 + 80;
  else
    v15 = 0;
  *a3 = v15;
  a3[1] = v14;
}

void sub_1BF058B64(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void SimpleNetworkManager::createListenSocket(uint64_t *a1@<X1>, int a2@<W3>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v7 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BEA58;
  v9 = (uint64_t)&v7[1];
  v16 = v6;
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  ImsListenSocket::ImsListenSocket((uint64_t)&v7[1], &v16, a2);
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v16 = v9;
  v17 = v8;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v16, &v8[1].__shared_owners_, v9);
  v14 = v17;
  if (v16)
    v15 = v16 + 80;
  else
    v15 = 0;
  *a3 = v15;
  a3[1] = v14;
}

void sub_1BF058C94(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

uint64_t ImsNetworkManager::usingNullTransport(ImsNetworkManager *this)
{
  return 0;
}

uint64_t SimpleNetworkManager::dnsResolver(SimpleNetworkManager *this)
{
  return *((_QWORD *)this + 9);
}

{
  return *((_QWORD *)this + 9);
}

void std::__shared_ptr_emplace<SipTlsTransportGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D6810;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipTlsTransportGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D6810;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipTlsTransportGroup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<SipInsecureTransportGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D6860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipInsecureTransportGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D6860;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipInsecureTransportGroup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void XcapCDRule::XcapCDRule(XcapCDRule *this)
{
  char *v2;
  uint64_t **v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  unsigned __int8 v8;

  *(_QWORD *)this = &off_1E78CE278;
  v2 = (char *)this + 8;
  v8 = 1;
  *(_QWORD *)&v7 = &v8;
  v3 = std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v8, (uint64_t)&std::piecewise_construct, (char **)&v7);
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)v2, (__int128 *)"rule", (__int128 *)(v3 + 5));
  *(_QWORD *)this = off_1E78D68B0;
  *((_QWORD *)this + 1) = &unk_1E78D6928;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 14) = &off_1E78BFCE8;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 89) = 0u;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 15) = &off_1E78D08F8;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_WORD *)this + 76) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 22) = &off_1E78B82D8;
  *((_QWORD *)this + 23) = (char *)this + 192;
  *((_BYTE *)this + 209) = 1;
  *((_QWORD *)this + 53) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 55) = &off_1E78B82D8;
  *((_QWORD *)this + 56) = (char *)this + 456;
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 60) = &off_1E78B82D8;
  *((_QWORD *)this + 61) = (char *)this + 496;
  *((_BYTE *)this + 208) = 1;
  *((_WORD *)this + 236) = 257;
  *((_WORD *)this + 256) = 257;
  *((_BYTE *)this + 432) = 0;
  _ZNSt3__115allocate_sharedB8ne180100I15XcapCDConditionNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v7);
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 88, &v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF058F4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  SipUri *v4;
  void **v5;

  SipUri::~SipUri(v4);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3);
  if (*(char *)(v1 + 87) < 0)
    operator delete(*v5);
  bambi::XmlTreeItem::~XmlTreeItem(v2);
  _Unwind_Resume(a1);
}

uint64_t XcapCDRule::clone(XcapCDRule *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v2 = operator new();
  XcapCDRule::XcapCDRule((XcapCDRule *)v2);
  std::string::operator=((std::string *)(v2 + 64), (const std::string *)((char *)this + 64));
  *(_BYTE *)(v2 + 104) = *((_BYTE *)this + 104);
  SipUri::operator=((SipUri *)(v2 + 112), (uint64_t)this + 112);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  v10 = *((_QWORD *)this + 11);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v2 + 88), &v10);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v2;
}

void sub_1BF05904C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C405FE64821);
  _Unwind_Resume(a1);
}

void XcapCDRule::setAttribute(uint64_t a1, uint64_t a2, const std::string *a3)
{
  std::string::size_type size;
  uint64_t v6;
  int v7;
  int v8;
  void *v10;
  int v11;
  std::string __p;

  XcapNs::stripXcapNs(a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if (size == 2)
  {
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v10 = (void *)__p.__r_.__value_.__r.__words[0];
      v11 = memcmp(__p.__r_.__value_.__l.__data_, XcapCDRule::kId, __p.__r_.__value_.__l.__size_);
      operator delete(v10);
      if (v11)
        return;
    }
    else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
    {
      v6 = 0;
      do
      {
        v7 = __p.__r_.__value_.__s.__data_[v6];
        v8 = XcapCDRule::kId[v6];
      }
      while (v7 == v8 && HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 != v6++);
      if (v7 != v8)
        return;
    }
    std::string::operator=((std::string *)(a1 + 64), a3);
    return;
  }
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t XcapCDRule::createChild(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  size_t size;
  std::string::size_type v6;
  uint64_t v7;
  std::string *v8;
  const char *v9;
  uint64_t v10;
  std::string *p_s1;
  const char *v12;
  uint64_t v13;
  std::string *v14;
  const char *v15;
  void *v16;
  std::string __s1;

  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  v3 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  v4 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    v6 = __s1.__r_.__value_.__l.__size_;
  if (v6 == 10)
  {
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v16 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (!memcmp(__s1.__r_.__value_.__l.__data_, "forward-to", __s1.__r_.__value_.__l.__size_))
        goto LABEL_38;
LABEL_33:
      if (!memcmp(v16, "conditions", size))
      {
LABEL_35:
        v7 = *(_QWORD *)(a1 + 88);
        if ((v4 & 0x80) == 0)
          return v7;
LABEL_36:
        v16 = (void *)__s1.__r_.__value_.__r.__words[0];
        goto LABEL_37;
      }
      a1 = 0;
LABEL_38:
      operator delete(v16);
      return a1;
    }
    if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      v12 = "forward-to";
      v13 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v12)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v12;
        if (!--v13)
        {
LABEL_17:
          v7 = a1;
          if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
            return v7;
          goto LABEL_36;
        }
      }
      goto LABEL_19;
    }
  }
  else
  {
    v7 = 0;
    if (v6 != 7)
      goto LABEL_30;
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v16 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (memcmp(__s1.__r_.__value_.__l.__data_, "actions", __s1.__r_.__value_.__l.__size_))
      {
        v7 = 0;
LABEL_37:
        a1 = v7;
        goto LABEL_38;
      }
      goto LABEL_38;
    }
    if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    {
      v8 = &__s1;
      v9 = "actions";
      v10 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      while (v8->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v9)
      {
        v8 = (std::string *)((char *)v8 + 1);
        ++v9;
        if (!--v10)
          goto LABEL_17;
      }
LABEL_19:
      if (v6 != 10)
      {
LABEL_29:
        v7 = 0;
LABEL_30:
        if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
          return v7;
        goto LABEL_36;
      }
      if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        v14 = &__s1;
        v15 = "conditions";
        while (v14->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v15)
        {
          v14 = (std::string *)((char *)v14 + 1);
          ++v15;
          if (!--v3)
            goto LABEL_35;
        }
        goto LABEL_29;
      }
      v16 = (void *)__s1.__r_.__value_.__r.__words[0];
      goto LABEL_33;
    }
  }
  return a1;
}

void XcapCDRule::parseChild(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  size_t size;
  std::string::size_type v8;
  std::string *v9;
  const char *v10;
  uint64_t v11;
  std::string *p_s1;
  const char *v13;
  uint64_t v14;
  std::string *v15;
  const char *v16;
  std::string *v17;
  const char *v18;
  const void *v19;
  std::string __p;
  std::string __s1;

  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    v8 = __s1.__r_.__value_.__l.__size_;
  if (v8 != 6)
  {
    if (v8 == 10)
    {
      if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v19 = (const void *)__s1.__r_.__value_.__r.__words[0];
        if (!memcmp(__s1.__r_.__value_.__l.__data_, "forward-to", __s1.__r_.__value_.__l.__size_))
          goto LABEL_41;
        goto LABEL_38;
      }
      if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
        goto LABEL_41;
      p_s1 = &__s1;
      v13 = "forward-to";
      v14 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v13)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v13;
        if (!--v14)
          goto LABEL_41;
      }
    }
    else
    {
      if (v8 != 7)
        goto LABEL_42;
      if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(__s1.__r_.__value_.__l.__data_, "actions", __s1.__r_.__value_.__l.__size_))
          goto LABEL_42;
        goto LABEL_41;
      }
      if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
      {
LABEL_41:
        bambi::XmlParserItem::parseChild(a1, a2, a3);
        goto LABEL_42;
      }
      v9 = &__s1;
      v10 = "actions";
      v11 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      while (v9->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v10)
      {
        v9 = (std::string *)((char *)v9 + 1);
        ++v10;
        if (!--v11)
          goto LABEL_41;
      }
    }
    if (v8 != 10)
      goto LABEL_42;
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v15 = &__s1;
      v16 = "conditions";
      while (v15->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v16)
      {
        v15 = (std::string *)((char *)v15 + 1);
        ++v16;
        if (!--v6)
          goto LABEL_41;
      }
      goto LABEL_42;
    }
    v19 = (const void *)__s1.__r_.__value_.__r.__words[0];
LABEL_38:
    if (memcmp(v19, "conditions", size))
    {
      if (size != 6)
        goto LABEL_42;
      goto LABEL_32;
    }
    goto LABEL_41;
  }
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v19 = (const void *)__s1.__r_.__value_.__r.__words[0];
LABEL_32:
    if (memcmp(v19, "target", size))
      goto LABEL_42;
    goto LABEL_33;
  }
  if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
  {
LABEL_33:
    memset(&__p, 0, sizeof(__p));
    (*(void (**)(uint64_t, uint64_t, uint64_t *, std::string *))(*(_QWORD *)a1 + 72))(a1, a2, a3, &__p);
    SipUri::fromString(a1 + 112, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_42;
  }
  v17 = &__s1;
  v18 = "target";
  while (v17->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v18)
  {
    v17 = (std::string *)((char *)v17 + 1);
    ++v18;
    if (!--v6)
      goto LABEL_33;
  }
LABEL_42:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
}

void sub_1BF059560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void XcapCDRule::constructTree(XcapCDRule *this@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t **v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  SipUri *v41;
  uint64_t **v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  void *__p;
  std::__shared_weak_count *v56;
  char v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  void *v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  char *v78;

  *a2 = 0;
  a2[1] = 0;
  v4 = (char *)this + 8;
  bambi::XmlTreeItem::makeNode((XcapCDRule *)((char *)this + 8), a2);
  v5 = a2[1];
  v74 = *a2;
  v75 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  (*(void (**)(char *, uint64_t *, char *, char *))(*((_QWORD *)this + 1) + 48))(v4, &v74, XcapCDRule::kId, (char *)this + 64);
  v8 = v75;
  if (v75)
  {
    p_shared_owners = (unint64_t *)&v75->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *((_QWORD *)this + 11);
  if (v11)
  {
    __p = 0;
    v56 = 0;
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v11 + 96))(&__p);
    v12 = a2[1];
    v72 = *a2;
    v73 = (std::__shared_weak_count *)v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v70 = __p;
    v71 = v56;
    if (v56)
    {
      v15 = (unint64_t *)&v56->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    (*(void (**)(char *, uint64_t *, void **))(*(_QWORD *)v4 + 56))(v4, &v72, &v70);
    v17 = v71;
    if (v71)
    {
      v18 = (unint64_t *)&v71->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v73;
    if (v73)
    {
      v21 = (unint64_t *)&v73->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v56;
    if (v56)
    {
      v24 = (unint64_t *)&v56->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  if (!*((_BYTE *)this + 104))
  {
    v68 = 0;
    v69 = 0;
    v26 = a2[1];
    v66 = *a2;
    v67 = (std::__shared_weak_count *)v26;
    if (v26)
    {
      v27 = (unint64_t *)(v26 + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    LOBYTE(v78) = 1;
    __p = &v78;
    v29 = std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, (unsigned __int8 *)&v78, (uint64_t)&std::piecewise_construct, (char **)&__p);
    (*(void (**)(uint64_t *__return_ptr, char *, uint64_t *, const char *, uint64_t **))(*(_QWORD *)v4 + 64))(&v68, v4, &v66, "actions", v29 + 5);
    v30 = v67;
    if (v67)
    {
      v31 = (unint64_t *)&v67->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v64 = 0;
    v65 = 0;
    v62 = v68;
    v63 = v69;
    if (v69)
    {
      v33 = (unint64_t *)&v69->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v77 = 0;
    __p = &v77;
    v35 = std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v77, (uint64_t)&std::piecewise_construct, (char **)&__p);
    (*(void (**)(uint64_t *__return_ptr, char *, uint64_t *, const char *, uint64_t **))(*(_QWORD *)v4 + 64))(&v64, v4, &v62, "forward-to", v35 + 5);
    v36 = v63;
    if (v63)
    {
      v37 = (unint64_t *)&v63->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v58 = v64;
    v59 = v65;
    if (v65)
    {
      v39 = (unint64_t *)&v65->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v41 = (XcapCDRule *)((char *)this + 112);
    if (SipUri::isValidUri(v41))
      SipUri::asString((uint64_t)v41, 1, &__p);
    else
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v76 = 0;
    v78 = (char *)&v76;
    v42 = std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v76, (uint64_t)&std::piecewise_construct, &v78);
    (*(void (**)(uint64_t *__return_ptr, char *, uint64_t *, const char *, void **, uint64_t **))(*(_QWORD *)v4 + 80))(&v60, v4, &v58, "target", &__p, v42 + 5);
    v43 = v61;
    if (v61)
    {
      v44 = (unint64_t *)&v61->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    if (v57 < 0)
      operator delete(__p);
    v46 = v59;
    if (v59)
    {
      v47 = (unint64_t *)&v59->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = v65;
    if (v65)
    {
      v50 = (unint64_t *)&v65->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = v69;
    if (v69)
    {
      v53 = (unint64_t *)&v69->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
  }
}

void sub_1BF059A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v27 - 96);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v27 - 80);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v26);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'XcapCDRule::constructTree(XcapCDRule *this@<X0>, uint64_t *a2@<X8>)
{
  XcapCDRule::constructTree((XcapCDRule *)((char *)this - 8), a2);
}

void XcapCDRule::targetNumber(XcapCDRule *this@<X0>, std::string *a2@<X8>)
{
  char *v4;
  const std::string::value_type *v5;
  std::string::size_type v6;

  if (SipUri::isTelUri((XcapCDRule *)((char *)this + 112)))
  {
    if ((*((char *)this + 311) & 0x80000000) == 0)
    {
      v4 = (char *)this + 288;
LABEL_6:
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
      return;
    }
    v5 = (const std::string::value_type *)*((_QWORD *)this + 36);
    v6 = *((_QWORD *)this + 37);
  }
  else
  {
    if ((*((char *)this + 263) & 0x80000000) == 0)
    {
      v4 = (char *)this + 240;
      goto LABEL_6;
    }
    v5 = (const std::string::value_type *)*((_QWORD *)this + 30);
    v6 = *((_QWORD *)this + 31);
  }
  std::string::__init_copy_ctor_external(a2, v5, v6);
}

uint64_t XcapCDRule::asString@<X0>(XcapCDRule *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  int v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  XcapCDCondition *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v17;
  const std::locale::facet *v18;
  std::string __p;
  void *v21[2];
  unsigned __int8 v22;
  _OWORD v23[4];
  void *v24[2];
  __int128 v25;
  __int128 v26;
  _OWORD v27[9];
  uint64_t v28;
  std::locale v29;

  v28 = 0;
  v26 = 0u;
  memset(v27, 0, sizeof(v27));
  *(_OWORD *)v24 = 0u;
  v25 = 0u;
  memset(v23, 0, sizeof(v23));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Rule-Id: ", 9);
  v5 = *((char *)this + 87);
  if (v5 >= 0)
    v6 = (char *)this + 64;
  else
    v6 = (char *)*((_QWORD *)this + 8);
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)this + 87);
  else
    v7 = *((_QWORD *)this + 9);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)",  ", 3);
  v10 = (XcapCDCondition *)*((_QWORD *)this + 11);
  if (v10)
    XcapCDCondition::asString(v10, v21);
  else
    std::string::basic_string[abi:ne180100]<0>(v21, "");
  if ((v22 & 0x80u) == 0)
    v11 = v21;
  else
    v11 = (void **)v21[0];
  if ((v22 & 0x80u) == 0)
    v12 = v22;
  else
    v12 = (uint64_t)v21[1];
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", Target : ", 11);
  XcapCDRule::targetNumber(this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)p_p, size);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  v18 = std::locale::use_facet(&v29, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale(&v29);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v22 < 0)
    operator delete(v21[0]);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v23 + 8, a2);
  *(_QWORD *)&v23[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v23 + *(_QWORD *)(*(_QWORD *)&v23[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v23[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v25) < 0)
    operator delete(v24[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v27);
}

void sub_1BF059D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'XcapCDRule::~XcapCDRule(XcapCDRule *this)
{
  *((_QWORD *)this - 1) = off_1E78D68B0;
  *(_QWORD *)this = &unk_1E78D6928;
  SipUri::~SipUri((XcapCDRule *)((char *)this + 104));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 80);
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  bambi::XmlTreeItem::~XmlTreeItem((void **)this);
}

{
  *((_QWORD *)this - 1) = off_1E78D68B0;
  *(_QWORD *)this = &unk_1E78D6928;
  SipUri::~SipUri((XcapCDRule *)((char *)this + 104));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 80);
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  bambi::XmlTreeItem::~XmlTreeItem((void **)this);
  JUMPOUT(0x1C3B87100);
}

void XcapDocumentSelector::XcapDocumentSelector(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1BF059F9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t XcapDocumentSelector::asString@<X0>(XcapDocumentSelector *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  XcapDocumentSelector *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _OWORD v18[4];
  void *__p[2];
  __int128 v20;
  __int128 v21;
  _OWORD v22[9];
  uint64_t v23;

  v23 = 0;
  v21 = 0u;
  memset(v22, 0, sizeof(v22));
  *(_OWORD *)__p = 0u;
  v20 = 0u;
  memset(v18, 0, sizeof(v18));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  v4 = *((char *)this + 23);
  if (v4 >= 0)
    v5 = this;
  else
    v5 = *(XcapDocumentSelector **)this;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)this + 23);
  else
    v6 = *((_QWORD *)this + 1);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v5, v6);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/users/", 7);
  v11 = *((_QWORD *)this + 3);
  v10 = (char *)this + 24;
  v9 = v11;
  v12 = v10[23];
  if (v12 >= 0)
    v13 = (uint64_t)v10;
  else
    v13 = v9;
  if (v12 >= 0)
    v14 = v10[23];
  else
    v14 = *((_QWORD *)v10 + 1);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"/", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"simservs.xml", 12);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v18 + 8, a2);
  *(_QWORD *)&v18[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v18 + *(_QWORD *)(*(_QWORD *)&v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v18[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v20) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v22);
}

void sub_1BF05A0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *XcapDocumentSelector::clone(XcapDocumentSelector *this)
{
  std::string *v2;

  v2 = (std::string *)operator new();
  XcapDocumentSelector::XcapDocumentSelector(v2, (__int128 *)this, (__int128 *)((char *)this + 24));
  return v2;
}

void sub_1BF05A158(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

void XcapNafServerInfo::XcapNafServerInfo(XcapNafServerInfo *this, XcapSession *a2, const XcapConfig *a3, const SipAuthResponse *a4, uint64_t a5)
{
  uint64_t v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;

  *(_QWORD *)XcapServerInfo::XcapServerInfo((uint64_t)this, (uint64_t)a2, a3, a5, (uint64_t)&kNafServerId) = &off_1E78D69D8;
  std::string::basic_string[abi:ne180100]<0>(v10, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::debug(ims::_logger, (uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Creating NafServerInfo: ", 24);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
  {
    operator delete(v10[0]);
    if (!a4)
      return;
    goto LABEL_7;
  }
  if (a4)
LABEL_7:
    *((_QWORD *)this + 63) = (*(uint64_t (**)(const SipAuthResponse *))(*(_QWORD *)a4 + 16))(a4);
}

void sub_1BF05A2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  XcapServerInfo *v20;

  XcapServerInfo::~XcapServerInfo(v20);
  _Unwind_Resume(a1);
}

void XcapNafServerInfo::~XcapNafServerInfo(XcapNafServerInfo *this)
{
  uint64_t v2;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;

  *(_QWORD *)this = &off_1E78D69D8;
  std::string::basic_string[abi:ne180100]<0>(v5, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Deleting NafServerInfo: ", 24);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  XcapServerInfo::~XcapServerInfo(this);
}

{
  XcapNafServerInfo::~XcapNafServerInfo(this);
  JUMPOUT(0x1C3B87100);
}

void XcapNafServerInfo::nafId(XcapNafServerInfo *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  __int16 v6;
  __int16 v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char v18;
  char *v19;
  char *v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  void *v25;
  char *v26;
  char *v27;
  char v28;
  const void *v29;
  void *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  __int128 *v33;
  int v34;
  size_t size;
  std::string *p_str;
  _BYTE *v37;
  std::string *v38;
  std::string::size_type v39;
  uint64_t v40;
  std::string v41;
  void *__p;
  char *v43;
  unint64_t v44;
  std::string v45;
  std::string __str;
  std::string v47;
  char v48;

  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_13);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_13))
  {
    LODWORD(v47.__r_.__value_.__l.__data_) = 1;
    v47.__r_.__value_.__s.__data_[4] = 2;
    std::vector<unsigned char>::vector[abi:ne180100](qword_1ED70ECE0, &v47, 5uLL);
    __cxa_atexit((void (*)(void *))std::vector<unsigned char>::~vector[abi:ne180100], qword_1ED70ECE0, &dword_1BEDF4000);
    __cxa_guard_release(&_MergedGlobals_13);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_1ED70ECD0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ED70ECD0))
  {
    LOWORD(v47.__r_.__value_.__l.__data_) = 1;
    v47.__r_.__value_.__s.__data_[2] = 1;
    std::vector<unsigned char>::vector[abi:ne180100](qword_1ED70ECF8, &v47, 3uLL);
    __cxa_atexit((void (*)(void *))std::vector<unsigned char>::~vector[abi:ne180100], qword_1ED70ECF8, &dword_1BEDF4000);
    __cxa_guard_release(&qword_1ED70ECD0);
  }
  __p = 0;
  v43 = 0;
  v44 = 0;
  if (*((_BYTE *)this + 180))
  {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (char *)qword_1ED70ECF8[0], unk_1ED70ED00, unk_1ED70ED00 - qword_1ED70ECF8[0]);
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 61) + 32))(*((_QWORD *)this + 61));
    v7 = v6;
    v8 = v43;
    if ((unint64_t)v43 >= v44)
    {
      v10 = (char *)__p;
      v11 = v43 - (_BYTE *)__p;
      v12 = v43 - (_BYTE *)__p + 1;
      if (v12 < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v13 = v44 - (_QWORD)__p;
      if (2 * (v44 - (unint64_t)__p) > v12)
        v12 = 2 * v13;
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
        v15 = operator new(v14);
      else
        v15 = 0;
      v16 = (char *)v15 + v14;
      *((_BYTE *)v15 + v11) = HIBYTE(v7);
      v9 = (char *)v15 + v11 + 1;
      if (v8 == v10)
      {
        v15 = (char *)v15 + v11;
      }
      else
      {
        v17 = &v8[~(unint64_t)v10];
        do
        {
          v18 = *--v8;
          (v17--)[(_QWORD)v15] = v18;
        }
        while (v8 != v10);
        v8 = (char *)__p;
      }
      __p = v15;
      v43 = v9;
      v44 = (unint64_t)v16;
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v43 = HIBYTE(v6);
      v9 = v8 + 1;
    }
    v43 = v9;
    if ((unint64_t)v9 >= v44)
    {
      v20 = (char *)__p;
      v21 = v9 - (_BYTE *)__p;
      v22 = v9 - (_BYTE *)__p + 1;
      if (v22 < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v23 = v44 - (_QWORD)__p;
      if (2 * (v44 - (unint64_t)__p) > v22)
        v22 = 2 * v23;
      if (v23 >= 0x3FFFFFFFFFFFFFFFLL)
        v24 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      if (v24)
        v25 = operator new(v24);
      else
        v25 = 0;
      v26 = (char *)v25 + v24;
      *((_BYTE *)v25 + v21) = v7;
      v19 = (char *)v25 + v21 + 1;
      if (v9 == v20)
      {
        __p = (char *)v25 + v21;
        v43 = (char *)v25 + v21 + 1;
        v44 = (unint64_t)v26;
      }
      else
      {
        v27 = &v9[~(unint64_t)v20];
        do
        {
          v28 = *--v9;
          (v27--)[(_QWORD)v25] = v28;
        }
        while (v9 != v20);
        v9 = (char *)__p;
        __p = v25;
        v43 = (char *)v25 + v21 + 1;
        v44 = (unint64_t)v26;
        if (!v9)
          goto LABEL_41;
      }
      operator delete(v9);
    }
    else
    {
      *v9 = v7;
      v19 = v9 + 1;
    }
LABEL_41:
    v43 = v19;
    goto LABEL_42;
  }
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (char *)qword_1ED70ECE0[0], unk_1ED70ECE8, unk_1ED70ECE8 - qword_1ED70ECE0[0]);
LABEL_42:
  memset(&v41, 0, sizeof(v41));
  v29 = (const void *)*((_QWORD *)this + 62);
  if (!v29
  {
LABEL_66:
    (*(void (**)(std::string *__return_ptr, XcapNafServerInfo *))(*(_QWORD *)this + 80))(&v41, this);
    goto LABEL_67;
  }
  memset(&v47, 0, sizeof(v47));
  v31 = (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 24))(v30);
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(v31 + 8), "realm");
  v33 = (__int128 *)(v32 + 40);
  if (!v32)
    v33 = &ims::kEmptyString;
  if (*((char *)v33 + 23) < 0)
    std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)v33, *((_QWORD *)v33 + 1));
  else
    v47 = *(std::string *)v33;
  memset(&__str, 0, sizeof(__str));
  XcapNafServerInfo::_fetchMatchingRealm((uint64_t)&__str, this, &v47);
  memset(&v41, 0, sizeof(v41));
  v34 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  if (!size
    || ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (p_str = &__str)
      : (p_str = (std::string *)__str.__r_.__value_.__r.__words[0]),
        (v37 = memchr(p_str, 64, size)) == 0 || v37 - (_BYTE *)p_str == -1))
  {
    if (v34 < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    goto LABEL_66;
  }
  std::string::basic_string(&v45, &__str, v37 - (_BYTE *)p_str + 1, size, (std::allocator<char> *)&v48);
  v41 = v45;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
LABEL_67:
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = &v41;
  else
    v38 = (std::string *)v41.__r_.__value_.__r.__words[0];
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  else
    v39 = v41.__r_.__value_.__l.__size_;
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>((char **)a2, 0, (char *)v38, (char *)v38 + v39, v39);
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(a2, *(char **)(a2 + 8), (char *)__p, v43, v43 - (_BYTE *)__p);
  std::string::basic_string[abi:ne180100]<0>(&v47, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v40 = ImsLogger::debug(ims::_logger, (uint64_t)&v47, (uint64_t)&__str);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v40 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)"NAF_ID: ", 8);
  *(_BYTE *)(v40 + 17) = 0;
  logBytes((uint64_t *)a2, &v45);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v40 + 32))(v40, &v45);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v40 + 17) = 0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (__p)
  {
    v43 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1BF05A9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  __cxa_guard_abort(&qword_1ED70ECD0);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned char>::vector[abi:ne180100](_QWORD *a1, const void *a2, size_t __sz)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (__sz)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, __sz);
    v6 = (char *)a1[1];
    memmove(v6, a2, __sz);
    a1[1] = &v6[__sz];
  }
  return a1;
}

void sub_1BF05AB40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<unsigned char>::~vector[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void XcapNafServerInfo::host(XcapNafServerInfo *this@<X0>, std::string *a2@<X8>)
{
  const std::string::value_type **v4;
  std::string::size_type v5;
  char *v6;
  std::string *p_p;
  int64_t v8;
  int64_t v9;
  int64_t size;
  char *v11;
  int v12;
  std::string *v13;
  int64_t v14;
  char *v15;
  char *v16;
  size_t v17;
  std::string __p;
  std::string v19;

  v4 = (const std::string::value_type **)((char *)this + 152);
  if (*((char *)this + 175) < 0)
  {
    v5 = *((_QWORD *)this + 20);
    if (v5)
    {
      std::string::__init_copy_ctor_external(a2, *v4, v5);
      return;
    }
  }
  else if (*((_BYTE *)this + 175))
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 21);
    return;
  }
  memset(&v19, 0, sizeof(v19));
  std::string::basic_string[abi:ne180100]<0>(&v19, "xcap.");
  memset(&__p, 0, sizeof(__p));
  XcapServerInfo::_constructHostSuffix(this, &__p);
  v6 = XcapServerInfo::k3gppDomain;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v8 = strlen(XcapServerInfo::k3gppDomain);
  if (v8)
  {
    v9 = v8;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if (size >= v8)
    {
      v11 = (char *)p_p + size;
      v12 = *XcapServerInfo::k3gppDomain;
      v13 = p_p;
      do
      {
        v14 = size - v9;
        if (v14 == -1)
          break;
        v15 = (char *)memchr(v13, v12, v14 + 1);
        if (!v15)
          break;
        v16 = v15;
        if (!memcmp(v15, v6, v9))
        {
          if (v16 == v11 || v16 - (char *)p_p == -1)
            break;
          goto LABEL_22;
        }
        v13 = (std::string *)(v16 + 1);
        size = v11 - (v16 + 1);
      }
      while (size >= v9);
    }
  }
  else
  {
LABEL_22:
    v17 = strlen((const char *)XcapServerInfo::kImsPrefix);
    std::string::append(&v19, (const std::string::value_type *)XcapServerInfo::kImsPrefix, v17);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v19.__r_.__value_.__l.__data_, (const void **)&__p.__r_.__value_.__l.__data_, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void sub_1BF05AD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t XcapNafServerInfo::port(XcapNafServerInfo *this)
{
  return *((unsigned int *)this + 44);
}

void XcapNafServerInfo::_constructInitialHeaders(uint64_t **this)
{
  _OWORD *v2;
  char *v3;
  uint64_t *v4;
  uint64_t *v5;
  _OWORD *v6;
  char *v7;
  _OWORD *v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  int v12;
  int v13;
  uint64_t v14;
  _OWORD *v15;
  char *v16;
  void *v17[2];
  char v18;
  void *__p[2];
  __int128 v20;
  uint64_t v21;
  void *v22[2];
  uint64_t v23;
  void *v24[2];
  __int128 v25;
  uint64_t v26;
  void **v27;

  ((void (*)(void **__return_ptr))(*this)[10])(v24);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)XcapServerInfo::kHostHeaderName);
  v22[0] = __p;
  v2 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this + 55, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v22);
  v3 = (char *)v2 + 56;
  if (*((char *)v2 + 79) < 0)
    operator delete(*(void **)v3);
  *(_OWORD *)v3 = *(_OWORD *)v24;
  *((_QWORD *)v3 + 2) = v25;
  BYTE7(v25) = 0;
  LOBYTE(v24[0]) = 0;
  if (SBYTE7(v20) < 0)
  {
    operator delete(__p[0]);
    if (SBYTE7(v25) < 0)
      operator delete(v24[0]);
  }
  v26 = 0;
  *(_OWORD *)v24 = 0u;
  v25 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v24, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)v24[1], (uint64_t)"\"", 1);
  BYTE1(v25) = 0;
  v4 = this[5];
  if (*((char *)v4 + 423) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v4[50], v4[51]);
  }
  else
  {
    v5 = v4 + 50;
    *(_OWORD *)__p = *(_OWORD *)v5;
    *(_QWORD *)&v20 = v5[2];
  }
  (*((void (**)(void **, void **))v24[0] + 4))(v24, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)v24[1], (uint64_t)"\"", 1);
  BYTE1(v25) = 0;
  if (SBYTE7(v20) < 0)
    operator delete(__p[0]);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v25 + 1) + 8, __p);
  std::string::basic_string[abi:ne180100]<0>(v22, (char *)XcapServerInfo::k3gppIntendedIdHeaderName);
  v17[0] = v22;
  v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this + 55, (uint64_t)v22, (uint64_t)&std::piecewise_construct, (_OWORD **)v17);
  v7 = (char *)v6 + 56;
  if (*((char *)v6 + 79) < 0)
    operator delete(*(void **)v7);
  *(_OWORD *)v7 = *(_OWORD *)__p;
  *((_QWORD *)v7 + 2) = v20;
  BYTE7(v20) = 0;
  LOBYTE(__p[0]) = 0;
  if (SHIBYTE(v23) < 0)
  {
    operator delete(v22[0]);
    if (SBYTE7(v20) < 0)
      operator delete(__p[0]);
  }
  ((void (*)(void **__return_ptr, uint64_t **))(*this)[19])(__p, this);
  std::string::basic_string[abi:ne180100]<0>(v22, (char *)XcapServerInfo::kUserAgentHeaderName);
  v17[0] = v22;
  v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this + 55, (uint64_t)v22, (uint64_t)&std::piecewise_construct, (_OWORD **)v17);
  v9 = (char *)v8 + 56;
  if (*((char *)v8 + 79) < 0)
    operator delete(*(void **)v9);
  *(_OWORD *)v9 = *(_OWORD *)__p;
  *((_QWORD *)v9 + 2) = v20;
  BYTE7(v20) = 0;
  LOBYTE(__p[0]) = 0;
  if (SHIBYTE(v23) < 0)
  {
    operator delete(v22[0]);
    if (SBYTE7(v20) < 0)
      operator delete(__p[0]);
  }
  v10 = this[63];
  if (v10)
  {
    if (*((_DWORD *)this + 102))
      v11 = "PUT";
    else
      v11 = "GET";
    std::string::basic_string[abi:ne180100]<0>(__p, v11);
    v12 = (*(uint64_t (**)(uint64_t *, void **, char *, char *))(*v10 + 48))(v10, __p, (char *)this + 416, (char *)this + 464);
    v13 = v12;
    if (SBYTE7(v20) < 0)
    {
      operator delete(__p[0]);
      if (!v13)
        goto LABEL_37;
    }
    else if (!v12)
    {
      goto LABEL_37;
    }
    v21 = 0;
    *(_OWORD *)__p = 0u;
    v20 = 0u;
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)__p, 1);
    v14 = (*(uint64_t (**)(uint64_t *))(*this[63] + 24))(this[63]);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v14 + 48))(v14, __p, 1);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v20 + 1) + 8, v22);
    std::string::basic_string[abi:ne180100]<0>(v17, (char *)XcapServerInfo::kAuthHeaderName);
    v27 = v17;
    v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this + 55, (uint64_t)v17, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
    v16 = (char *)v15 + 56;
    if (*((char *)v15 + 79) < 0)
      operator delete(*(void **)v16);
    *(_OWORD *)v16 = *(_OWORD *)v22;
    *((_QWORD *)v16 + 2) = v23;
    HIBYTE(v23) = 0;
    LOBYTE(v22[0]) = 0;
    if (v18 < 0)
    {
      operator delete(v17[0]);
      if (SHIBYTE(v23) < 0)
        operator delete(v22[0]);
    }
    __p[0] = &off_1E78D7A10;
    if ((_BYTE)v20 && __p[1])
      (*(void (**)(void *))(*(_QWORD *)__p[1] + 8))(__p[1]);
  }
LABEL_37:
  v24[0] = &off_1E78D7A10;
  if ((_BYTE)v25)
  {
    if (v24[1])
      (*(void (**)(void *))(*(_QWORD *)v24[1] + 8))(v24[1]);
  }
}

void sub_1BF05B188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,uint64_t a22,void *a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,char a32,int a33,__int16 a34,char a35)
{
  if (a15 < 0)
    operator delete(__p);
  if (SHIBYTE(a25) < 0)
    operator delete(a23);
  if (a18 && a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  if ((_BYTE)a31)
  {
    if (a30)
      (*(void (**)(void *))(*(_QWORD *)a30 + 8))(a30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XcapNafServerInfo::setDigestCredentials(XcapNafServerInfo *this, const SipAuthResponse *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *((_QWORD *)this + 63);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  result = (*(uint64_t (**)(const SipAuthResponse *))(*(_QWORD *)a2 + 16))(a2);
  *((_QWORD *)this + 63) = result;
  return result;
}

void XcapNafServerInfo::setGbaNafCredentials(uint64_t a1, uint64_t *a2)
{
  const void *v3;
  const SipDigestAuthChallenge *v4;
  const SipDigestAuthChallenge *v5;
  uint64_t v6;
  SipDigestAuthResponse *v7;
  void *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  std::string *v15;
  unsigned __int8 *v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  XcapSession *v29;
  uint64_t v30;
  void *__p[2];
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38[2];
  char v39;
  void *v40[2];
  uint64_t v41;
  std::string __str;
  void **v43;

  memset(&__str, 0, sizeof(__str));
  base64Encode(*a2, a2[1] - *a2, &__str);
  v3 = *(const void **)(a1 + 496);
  if (!v3
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v40, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v28 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v28 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"Auth response is not Digest", 27);
    *(_BYTE *)(v28 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_31:
    *(_BYTE *)(v28 + 17) = 0;
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
    if (SBYTE7(v32) < 0)
      operator delete(__p[0]);
    goto LABEL_35;
  }
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 504);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (SipDigestAuthResponse *)operator new();
  SipDigestAuthResponse::SipDigestAuthResponse(v7, v5);
  *(_QWORD *)(a1 + 504) = v7;
  v9 = (*(uint64_t (**)(void *))(*(_QWORD *)v8 + 24))(v8);
  XcapBsfServerInfo::fetchBTid(*(XcapBsfServerInfo **)(*(_QWORD *)(a1 + 40) + 448), (std::string *)__p);
  v40[0] = "username";
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9 + 8, "username", (uint64_t)&std::piecewise_construct, (__int128 **)v40);
  std::string::operator=((std::string *)(v10 + 40), (const std::string *)__p);
  if (SBYTE7(v32) < 0)
    operator delete(__p[0]);
  v11 = (*(uint64_t (**)(void *))(*(_QWORD *)v8 + 24))(v8);
  std::string::operator=((std::string *)(v11 + 208), &__str);
  v12 = (*(uint64_t (**)(void *))(*(_QWORD *)v8 + 24))(v8);
  v13 = (*(uint64_t (**)(const SipDigestAuthChallenge *))(*(_QWORD *)v5 + 24))(v5);
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(v13 + 8), "realm");
  if (v14)
    v15 = (std::string *)(v14 + 40);
  else
    v15 = (std::string *)&ims::kEmptyString;
  XcapNafServerInfo::_fetchMatchingRealm((uint64_t)__p, (_DWORD *)a1, v15);
  v40[0] = "realm";
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12 + 8, "realm", (uint64_t)&std::piecewise_construct, (__int128 **)v40);
  std::string::operator=((std::string *)(v16 + 40), (const std::string *)__p);
  if (SBYTE7(v32) < 0)
    operator delete(__p[0]);
  if (*(_DWORD *)(a1 + 408))
    v17 = "PUT";
  else
    v17 = "GET";
  std::string::basic_string[abi:ne180100]<0>(__p, v17);
  v18 = (*(uint64_t (**)(void *, void **, uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(v8, __p, a1 + 416, a1 + 464);
  v19 = v18;
  if ((SBYTE7(v32) & 0x80000000) == 0)
  {
    if (v18)
      goto LABEL_17;
    goto LABEL_30;
  }
  operator delete(__p[0]);
  if (!v19)
  {
LABEL_30:
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v40, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v28 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v28 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"Failed to compute auth response for Standard Digest", 51);
    *(_BYTE *)(v28 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_31;
  }
LABEL_17:
  v33 = 0;
  *(_OWORD *)__p = 0u;
  v32 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)__p, 1);
  v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 504) + 24))(*(_QWORD *)(a1 + 504));
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v20 + 48))(v20, __p, 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v32 + 1) + 8, v40);
  std::string::basic_string[abi:ne180100]<0>(v38, (char *)XcapServerInfo::kAuthHeaderName);
  v43 = v38;
  v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 440), (uint64_t)v38, (uint64_t)&std::piecewise_construct, (_OWORD **)&v43);
  v22 = (char *)v21 + 56;
  if (*((char *)v21 + 79) < 0)
    operator delete(*(void **)v22);
  *(_OWORD *)v22 = *(_OWORD *)v40;
  *((_QWORD *)v22 + 2) = v41;
  HIBYTE(v41) = 0;
  LOBYTE(v40[0]) = 0;
  if (v39 < 0)
  {
    operator delete(v38[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
  v23 = *(_QWORD *)(a1 + 488);
  v24 = *(unsigned __int8 *)(a1 + 180);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(v40, a1);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v26 = (*(uint64_t (**)(uint64_t, BOOL, void **, uint64_t))(*(_QWORD *)v23 + 16))(v23, v24 != 0, v40, v25);
  v27 = v26;
  if ((SHIBYTE(v41) & 0x80000000) == 0)
  {
    if (v26)
      goto LABEL_24;
LABEL_40:
    std::string::basic_string[abi:ne180100]<0>(v40, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v38, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v30 = ImsLogger::error(ims::_logger, (uint64_t)v40, (uint64_t)v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v30 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"Failed to initialize NAF transport", 34);
    *(_BYTE *)(v30 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_42:
    *(_BYTE *)(v30 + 17) = 0;
    if (v39 < 0)
      operator delete(v38[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
    __p[0] = &off_1E78D7A10;
    if ((_BYTE)v32 && __p[1])
      (*(void (**)(void *))(*(_QWORD *)__p[1] + 8))(__p[1]);
LABEL_35:
    v29 = *(XcapSession **)(a1 + 40);
    v36 = 0;
    v37 = 0;
    __p[0] = &off_1E78B7238;
    __p[1] = &_bambiDomain;
    LODWORD(v32) = 0x40000000;
    v34 = 0;
    v35 = 0;
    *((_QWORD *)&v32 + 1) = 0;
    v33 = 0;
    XcapSession::operationFailure(v29, (const ImsResult *)__p);
    ImsResult::~ImsResult((ImsResult *)__p);
    goto LABEL_36;
  }
  operator delete(v40[0]);
  if (!v27)
    goto LABEL_40;
LABEL_24:
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v40, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v38, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v30 = ImsLogger::error(ims::_logger, (uint64_t)v40, (uint64_t)v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v30 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"Request to NAF with auth credentials failed", 43);
    *(_BYTE *)(v30 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_42;
  }
  __p[0] = &off_1E78D7A10;
  if ((_BYTE)v32 && __p[1])
    (*(void (**)(void *))(*(_QWORD *)__p[1] + 8))(__p[1]);
LABEL_36:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BF05B9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,void *__p,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (SHIBYTE(a25) < 0)
    operator delete(__p);
  if (a11 && a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (*(char *)(v29 - 49) < 0)
    operator delete(*(void **)(v29 - 72));
  _Unwind_Resume(exception_object);
}

void XcapNafServerInfo::_fetchMatchingRealm(uint64_t a1, _DWORD *a2, std::string *this)
{
  unsigned __int8 v6;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  char v20;
  size_t v21;
  std::string *v22;
  uint64_t *v23;
  uint64_t v25;
  __int128 v26;
  int v27;
  size_t v28;
  std::string *v29;
  int v30;
  uint64_t v32;
  int v33;
  const std::string::value_type **v34;
  char v35;
  uint64_t v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  std::string::size_type v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  std::string v44;
  std::string __p;
  std::string *v46;
  std::string *v47;
  unint64_t v48;
  _BYTE v49[15];
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v6 = atomic_load((unsigned __int8 *)&qword_1ED70ECD8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ED70ECD8))
  {
    std::string::basic_string[abi:ne180100]<0>(&qword_1ED70ED10, "3GPP-bootstrapping-uicc@");
    __cxa_atexit(MEMORY[0x1E0DE44D0], &qword_1ED70ED10, &dword_1BEDF4000);
    __cxa_guard_release(&qword_1ED70ECD8);
  }
  v46 = 0;
  v47 = 0;
  v48 = 0;
  memset(&__p, 0, sizeof(__p));
  v7 = std::string::find(this, 59, 0);
  if (v7 == -1)
  {
    v9 = 0;
  }
  else
  {
    v8 = v7;
    v9 = 0;
    do
    {
      std::string::basic_string(&v44, this, v9, v8 - v9, (std::allocator<char> *)v49);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v44;
      v10 = v47;
      if ((unint64_t)v47 >= v48)
      {
        v12 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v46, (__int128 *)&__p);
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v47, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          v11 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v47->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
        }
        v12 = v10 + 1;
      }
      v47 = v12;
      v9 = v8 + 1;
      v8 = std::string::find(this, 59, v8 + 1);
    }
    while (v8 != -1);
  }
  std::string::basic_string(&v44, this, v9, ~v9, (std::allocator<char> *)v49);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v44;
  v13 = v47;
  if ((unint64_t)v47 >= v48)
  {
    v15 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v46, (__int128 *)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v47, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v47->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    }
    v15 = v13 + 1;
  }
  v47 = v15;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v16 = a2[68];
  if (v16 == 1)
  {
    v25 = (uint64_t)v46;
    if (v46 == v15)
      goto LABEL_75;
    while (1)
    {
      memset(&v44, 0, sizeof(v44));
      if (*(char *)(v25 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)v25, *(_QWORD *)(v25 + 8));
      }
      else
      {
        v26 = *(_OWORD *)v25;
        v44.__r_.__value_.__r.__words[2] = *(_QWORD *)(v25 + 16);
        *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v26;
      }
      v27 = SHIBYTE(v44.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      {
        v29 = (std::string *)v44.__r_.__value_.__r.__words[0];
        v28 = v44.__r_.__value_.__l.__size_ >= 0x13 ? 19 : v44.__r_.__value_.__l.__size_;
      }
      else
      {
        v28 = HIBYTE(v44.__r_.__value_.__r.__words[2]) >= 0x13u ? 19 : HIBYTE(v44.__r_.__value_.__r.__words[2]);
        v29 = &v44;
      }
      v30 = memcmp(v29, "3GPP-bootstrapping@", v28);
      if (v28 >= 0x13 && v30 == 0)
        break;
      if (v27 < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      v25 += 24;
      if ((std::string *)v25 == v15)
        goto LABEL_75;
    }
  }
  else
  {
    if (v16)
      goto LABEL_75;
    v17 = (uint64_t)v46;
    if (v46 == v15)
      goto LABEL_75;
    while (1)
    {
      memset(&v44, 0, sizeof(v44));
      if (*(char *)(v17 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)v17, *(_QWORD *)(v17 + 8));
      }
      else
      {
        v18 = *(_OWORD *)v17;
        v44.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 16);
        *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v18;
      }
      v19 = byte_1ED70ED27 >= 0 ? byte_1ED70ED27 : qword_1ED70ED18;
      v20 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v19 == -1)
LABEL_105:
          std::string::__throw_out_of_range[abi:ne180100]();
        v22 = (std::string *)v44.__r_.__value_.__r.__words[0];
        v21 = v44.__r_.__value_.__l.__size_ >= v19 ? v19 : v44.__r_.__value_.__l.__size_;
      }
      else
      {
        if (v19 == -1)
          goto LABEL_105;
        v21 = HIBYTE(v44.__r_.__value_.__r.__words[2]) >= v19 ? v19 : HIBYTE(v44.__r_.__value_.__r.__words[2]);
        v22 = &v44;
      }
      v23 = byte_1ED70ED27 >= 0 ? &qword_1ED70ED10 : (uint64_t *)qword_1ED70ED10;
      if (!memcmp(v22, v23, v21) && v21 == v19)
        break;
      if (v20 < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      v17 += 24;
      if ((std::string *)v17 == v15)
        goto LABEL_75;
    }
  }
  std::string::operator=((std::string *)a1, &v44);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
LABEL_75:
  v32 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
    v32 = *(unsigned __int8 *)(a1 + 23);
  if (!v32)
  {
    v33 = a2[68];
    (*(void (**)(std::string *__return_ptr, _DWORD *))(*(_QWORD *)a2 + 80))(&v44, a2);
    v34 = (const std::string::value_type **)"3GPP-bootstrapping@";
    if (!v33)
      v34 = (const std::string::value_type **)&qword_1ED70ED10;
    v35 = byte_1ED70ED27;
    if (v33)
      v35 = 19;
    v36 = qword_1ED70ED18;
    if (v33)
      v36 = 0x6970706172747374;
    if (v35 >= 0)
      v37 = (const std::string::value_type *)v34;
    else
      v37 = *v34;
    if (v35 >= 0)
      v38 = v35;
    else
      v38 = v36;
    v39 = std::string::insert(&v44, 0, v37, v38);
    v40 = v39->__r_.__value_.__r.__words[0];
    *(_QWORD *)v49 = v39->__r_.__value_.__l.__size_;
    *(_QWORD *)&v49[7] = *(std::string::size_type *)((char *)&v39->__r_.__value_.__r.__words[1] + 7);
    v41 = HIBYTE(v39->__r_.__value_.__r.__words[2]);
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_QWORD *)a1 = v40;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)v49;
    *(_QWORD *)(a1 + 15) = *(_QWORD *)&v49[7];
    *(_BYTE *)(a1 + 23) = v41;
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v44, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(v49, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v42 = ImsLogger::debug(ims::_logger, (uint64_t)&v44, (uint64_t)v49);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v42 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)"Realm from NAF Response: ", 25);
  *(_BYTE *)(v42 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v42 + 32))(v42, this);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v42 + 17) = 0;
  if (v50 < 0)
    operator delete(*(void **)v49);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v44, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(v49, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v43 = ImsLogger::debug(ims::_logger, (uint64_t)&v44, (uint64_t)v49);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v43 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v43 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v43 + 8), (uint64_t)"Matching Realm: ", 16);
  *(_BYTE *)(v43 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 32))(v43, a1);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v43 + 17) = 0;
  if (v50 < 0)
    operator delete(*(void **)v49);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1BF05C16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  __cxa_guard_abort(&qword_1ED70ECD8);
  _Unwind_Resume(a1);
}

uint64_t XcapNafServerInfo::handleHttpResponseSuccess(uint64_t a1)
{
  return XcapSession::operationSuccess(*(_QWORD *)(a1 + 40));
}

void XcapNafServerInfo::handleHttpResponseRedirect(uint64_t a1)
{
  uint64_t v2;
  XcapSession *v3;
  void *__p[2];
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13[2];
  char v14;

  std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(v13, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::warn(ims::_logger, (uint64_t)__p, (uint64_t)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Not implemented", 15);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v14 < 0)
    operator delete(v13[0]);
  if (v6 < 0)
    operator delete(__p[0]);
  v3 = *(XcapSession **)(a1 + 40);
  v11 = 0;
  v12 = 0;
  __p[0] = &off_1E78B7238;
  __p[1] = &_bambiDomain;
  v5 = 0x40000000;
  v9 = 0;
  v10 = 0;
  v7 = 0;
  v8 = 0;
  XcapSession::operationFailure(v3, (const ImsResult *)__p);
  ImsResult::~ImsResult((ImsResult *)__p);
}

void sub_1BF05C360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  ImsResult::~ImsResult((ImsResult *)&__p);
  _Unwind_Resume(a1);
}

void XcapNafServerInfo::handleHttpResponseAuthChallenge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  XcapSession *v10;
  void *v11[2];
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;

  if (*(_QWORD *)(a1 + 496))
  {
    std::string::basic_string[abi:ne180100]<0>(v11, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v22, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::error(ims::_logger, (uint64_t)v11, (uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 32))(v5, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" server has challenged us twice. Probably didn't like our response to the 1st challenge. Failing request", 104);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (v21 < 0)
      operator delete(__p[0]);
    if (v23 < 0)
      operator delete(v22[0]);
    if (v13 < 0)
      operator delete(v11[0]);
  }
  else
  {
    XcapServerInfo::_saveCookie(a1, a4);
    v7 = SipAuthScheme::createFromString(a3);
    if (v7)
    {
      v8 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7);
      *(_QWORD *)(a1 + 496) = v8;
      if (v8
      {
        XcapSession::handleNafChallenge(*(XcapSession **)(a1 + 40));
        return;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 496) = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(v11, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v22, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::error(ims::_logger, (uint64_t)v11, (uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Cannot create challenge from ", 29);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v9 + 32))(v9, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" client. Challenge Header:", 26);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, a3);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (v21 < 0)
      operator delete(__p[0]);
    if (v23 < 0)
      operator delete(v22[0]);
    if (v13 < 0)
      operator delete(v11[0]);
  }
  v10 = *(XcapSession **)(a1 + 40);
  v18 = 0;
  v19 = 0;
  v11[0] = &off_1E78B7238;
  v11[1] = &_bambiDomain;
  v12 = 0x40000000;
  v16 = 0;
  v17 = 0;
  v14 = 0;
  v15 = 0;
  XcapSession::operationFailure(v10, (const ImsResult *)v11);
  ImsResult::~ImsResult((ImsResult *)v11);
}

void sub_1BF05C6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  ImsResult::~ImsResult((ImsResult *)&__p);
  _Unwind_Resume(a1);
}

uint64_t XcapNafServerInfo::handleHttpResponseFailure(uint64_t a1, int a2, ImsResult *a3)
{
  return XcapSession::operationFailure(*(XcapSession **)(a1 + 40), a3);
}

uint64_t XcapNafServerInfo::sendPutRequest(uint64_t a1, const std::string *a2, const std::string *a3)
{
  uint64_t **v6;
  _OWORD *v7;
  void *__p[2];
  char v10;
  void **v11;

  v6 = (uint64_t **)(a1 + 440);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)XcapServerInfo::kContentTypeHeaderName);
  v11 = __p;
  v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v11);
  std::string::operator=((std::string *)((char *)v7 + 56), (const std::string *)(a1 + 304));
  if (v10 < 0)
    operator delete(__p[0]);
  return XcapServerInfo::sendPutRequest(a1, a2, a3);
}

void sub_1BF05C7E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *XcapNafServerInfo::_userAgent@<X0>(XcapNafServerInfo *this@<X0>, _QWORD *a2@<X8>)
{
  char **v2;

  v2 = &XcapServerInfo::k3gppGbaUicc;
  if (*((_DWORD *)this + 68))
    v2 = &XcapServerInfo::k3gppGba;
  return std::string::basic_string[abi:ne180100]<0>(a2, *v2);
}

void XcapNafServerInfo::httpVersion(XcapNafServerInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 399) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 47), *((_QWORD *)this + 48));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 376);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 49);
  }
}

_QWORD *XcapNafServerInfo::id@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "NAF");
}

BOOL XcapServerInfo::challenged(XcapServerInfo *this)
{
  return *((_QWORD *)this + 63) != 0;
}

uint64_t XcapServerInfo::getDigestCredentials(XcapServerInfo *this)
{
  return *((_QWORD *)this + 63);
}

char *std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(char **a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char v25;
  char *v26;
  char *v27;
  char *v28;
  char v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char v36;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v6 = a5;
  v7 = __src;
  v10 = a1[1];
  v9 = a1[2];
  if (v9 - v10 >= a5)
  {
    v17 = v10 - __dst;
    if (v10 - __dst >= a5)
    {
      v18 = &__src[a5];
      v20 = a1[1];
    }
    else
    {
      v18 = &__src[v17];
      if (&__src[v17] == a4)
      {
        v20 = a1[1];
      }
      else
      {
        v19 = __src - __dst;
        v20 = a1[1];
        v21 = v20;
        do
          *v21++ = (v20++)[v19];
        while (&v20[v19] != a4);
      }
      a1[1] = v20;
      if (v17 < 1)
        return v5;
    }
    v32 = &__dst[a5];
    v33 = &v20[-a5];
    v34 = v20;
    if (&v20[-a5] < v10)
    {
      v35 = &v10[a5] - v20;
      v34 = v20;
      do
      {
        v36 = *v33++;
        *v34++ = v36;
        --v35;
      }
      while (v35);
    }
    a1[1] = v34;
    if (v20 != v32)
      memmove(&__dst[a5], __dst, v20 - v32);
    if (v18 != v7)
      memmove(v5, v7, v18 - v7);
  }
  else
  {
    v11 = *a1;
    v12 = v10 - *a1 + a5;
    if (v12 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v13 = (char *)(__dst - v11);
    v14 = v9 - v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      v16 = operator new(v15);
    else
      v16 = 0;
    v22 = &v13[(_QWORD)v16];
    v23 = &v13[(_QWORD)v16 + v6];
    v24 = v22;
    do
    {
      v25 = *v7++;
      *v24++ = v25;
      --v6;
    }
    while (v6);
    v26 = *a1;
    if (*a1 == v5)
    {
      v28 = v22;
    }
    else
    {
      v27 = v5;
      v28 = v22;
      do
      {
        v29 = *--v27;
        *--v28 = v29;
      }
      while (v27 != v26);
      v10 = a1[1];
    }
    v30 = (char *)v16 + v15;
    if (v10 != v5)
      memmove(v23, v5, v10 - v5);
    v31 = *a1;
    *a1 = v28;
    a1[1] = &v23[v10 - v5];
    a1[2] = v30;
    if (v31)
      operator delete(v31);
    return v22;
  }
  return v5;
}

char *std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int64_t v24;
  char v25;
  char *v26;
  char *v27;
  char *v28;
  char v29;
  char *v30;
  char *v31;
  char *v32;
  char v33;
  char *v34;
  char *v35;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v6 = a5;
  v7 = __src;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      v16 = operator new(v15);
    else
      v16 = 0;
    v26 = &v13[(_QWORD)v16];
    v27 = &v13[(_QWORD)v16 + v6];
    v28 = v26;
    do
    {
      v29 = *v7++;
      *v28++ = v29;
      --v6;
    }
    while (v6);
    v30 = *(char **)a1;
    if (*(char **)a1 == v5)
    {
      v32 = v26;
    }
    else
    {
      v31 = v5;
      v32 = v26;
      do
      {
        v33 = *--v31;
        *--v32 = v33;
      }
      while (v31 != v30);
      v10 = *(char **)(a1 + 8);
    }
    v34 = (char *)v16 + v15;
    if (v10 != v5)
      memmove(v27, v5, v10 - v5);
    v35 = *(char **)a1;
    *(_QWORD *)a1 = v32;
    *(_QWORD *)(a1 + 8) = &v27[v10 - v5];
    *(_QWORD *)(a1 + 16) = v34;
    if (v35)
      operator delete(v35);
    return v26;
  }
  v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v18 = &__src[a5];
    v20 = *(char **)(a1 + 8);
LABEL_17:
    v21 = &v5[v6];
    v22 = &v20[-v6];
    v23 = v20;
    if (&v20[-v6] < v10)
    {
      v24 = &v10[v6] - v20;
      v23 = v20;
      do
      {
        v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&v5[v6], v5, v20 - v21);
    if (v18 != v7)
      memmove(v5, v7, v18 - v7);
    return v5;
  }
  v18 = &__src[v17];
  v19 = a4 - &__src[v17];
  if (a4 != &__src[v17])
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  v20 = &v10[v19];
  *(_QWORD *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
    goto LABEL_17;
  return v5;
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;

  v13 = 0;
  v6 = (void **)std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,SDPParser::str_caseless_compare,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v12[2] = 1;
    v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    std::__tree<unsigned int>::__insert_node_at(a1, v13, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

uint64_t DeferredRegistration::name@<X0>(DeferredRegistration *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  int v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v15[2];
  char v16;
  void *__p[2];
  unsigned __int8 v18;
  _OWORD v19[4];
  void *v20[2];
  __int128 v21;
  __int128 v22;
  _OWORD v23[9];
  uint64_t v24;

  v24 = 0;
  v22 = 0u;
  memset(v23, 0, sizeof(v23));
  *(_OWORD *)v20 = 0u;
  v21 = 0u;
  memset(v19, 0, sizeof(v19));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"deferred registration (services=", 32);
  v5 = *((_DWORD *)this + 12);
  std::string::basic_string[abi:ne180100]<0>(v15, ",");
  BambiServices::namesForServiceMask(v5, (uint64_t)v15, __p);
  if ((v18 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v7 = v18;
  else
    v7 = (uint64_t)__p[1];
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" reason=", 8);
  v10 = *((char *)this + 1719);
  if (v10 >= 0)
    v11 = (char *)this + 1696;
  else
    v11 = (char *)*((_QWORD *)this + 212);
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)this + 1719);
  else
    v12 = *((_QWORD *)this + 213);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)")", 1);
  if ((char)v18 < 0)
    operator delete(__p[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v19 + 8, a2);
  *(_QWORD *)&v19[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v19 + *(_QWORD *)(*(_QWORD *)&v19[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v19[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v21) < 0)
    operator delete(v20[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v23);
}

void sub_1BF05CEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void DeferredRegistration::perform(DeferredRegistration *this, char a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *((_QWORD *)this + 1);
      if (v7)
        SipRegistrationClient::registerWithConfig(v7, (uint64_t)this + 24, (std::string *)((char *)this + 1696), a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1BF05CF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::registerWithConfig(uint64_t a1, uint64_t a2, std::string *a3, char a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  int v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  int v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  uint64_t **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t **v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  int v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *p_shared_weak_owners;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  void **v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  SipTimerContainer *v73;
  std::string::size_type v74;
  std::string *p_p;
  uint64_t v76;
  unsigned __int8 *v77;
  BOOL v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t);
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  const std::string *v88;
  uint64_t v89;
  _BYTE *v90;
  _DWORD *v91;
  int v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t **v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  capabilities::radio *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  char *v104;
  _BOOL4 isNR;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::string::size_type v115;
  uint64_t v116;
  _BYTE *v117;
  uint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  std::string v125;
  std::string __p;
  void *v127[2];
  _BYTE v128[56];
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 360);
  v9 = *(std::__shared_weak_count **)(v8 + 16);
  if (v9 && (v10 = std::__shared_weak_count::lock(v9)) != 0)
  {
    v11 = v10;
    v12 = *(_DWORD *)(*(_QWORD *)(v8 + 8) + 200);
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    if (v12 != 2)
      goto LABEL_8;
  }
  else if (MEMORY[0xC8] != 2)
  {
LABEL_8:
    memset(&v128[8], 0, 48);
    v127[0] = &off_1E78B7238;
    v127[1] = &_bambiDomain;
    *(_DWORD *)v128 = 1073741826;
    v15 = (uint64_t **)ImsResult::operator<<<char [45]>((uint64_t)v127, "registerWithConfig: stack is not initialized");
    SipRegistrationClient::handleRegistrationError((SipRegistrationClient *)a1, v15, -1, 1, 0);
LABEL_27:
    ImsResult::~ImsResult((ImsResult *)v127);
    return;
  }
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
  {
    memset(&v128[8], 0, 48);
    v127[0] = &off_1E78B7238;
    v127[1] = &_bambiDomain;
    *(_DWORD *)v128 = 1073741825;
    v21 = (uint64_t **)ImsResult::operator<<<char [41]>((uint64_t)v127, "registerWithConfig: no proxies specified");
    SipRegistrationClient::handleRegistrationError((SipRegistrationClient *)a1, v21, -1, 1, 0);
    goto LABEL_27;
  }
  SipUserAgent::transportLayer(*(SipUserAgent **)(a1 + 360), v127);
  if (*(_BYTE *)((*(uint64_t (**)(void *))(*(_QWORD *)v127[0] + 16))(v127[0]) + 438))
  {
    SipUserAgent::transportLayer(*(SipUserAgent **)(a1 + 360), &__p);
    v16 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 264);
    if (v16)
      LODWORD(v16) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, 1);
    v17 = v16 ^ 1;
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v19 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  else
  {
    v17 = 0;
  }
  v22 = (std::__shared_weak_count *)v127[1];
  if (!v127[1])
    goto LABEL_25;
  v23 = (unint64_t *)((char *)v127[1] + 8);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if (v17)
      goto LABEL_26;
  }
  else
  {
LABEL_25:
    if (v17)
    {
LABEL_26:
      memset(&v128[8], 0, 48);
      v127[0] = &off_1E78B7238;
      v127[1] = &_bambiDomain;
      *(_DWORD *)v128 = 1073741825;
      v25 = (uint64_t **)ImsResult::operator<<<char [55]>((uint64_t)v127, "registerWithConfig: IPSec is enabled but not available");
      SipRegistrationClient::handleRegistrationError((SipRegistrationClient *)a1, v25, -1, 1, 0);
      goto LABEL_27;
    }
  }
  if ((SipRegistrationClient::shouldDeferRegistration((SipRegistrationClient *)a1) & 1) == 0
    && (*(_DWORD *)(a1 + 520) | 4) == 5)
  {
    if ((a4 & 1) != 0 || !*(_DWORD *)(a1 + 2772))
      goto LABEL_96;
    v26 = *(_QWORD *)(a1 + 360);
    v27 = *(std::__shared_weak_count **)(v26 + 16);
    if (v27 && (v28 = std::__shared_weak_count::lock(v27)) != 0)
    {
      v29 = v28;
      v30 = *(unsigned __int8 *)(*(_QWORD *)(v26 + 8) + 2656);
      v31 = (unint64_t *)&v28->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v29);
      }
      if (!v30)
      {
LABEL_96:
        SipRegistrationConfig::operator=(a1 + 1112, a2);
        if (*(_DWORD *)(a1 + 520) == 5)
        {
          v70 = *(_QWORD *)(a1 + 16);
          v69 = a1 + 16;
          v71 = (*(uint64_t (**)(uint64_t))(v70 + 64))(v69);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v69 + 16))(v69, v71);
          v72 = (_BYTE *)ImsOutStream::operator<<(v71, "registerWithConfig: still waiting for transport initialization");
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v72 + 64))(v72, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v72[17] = 0;
          return;
        }
        v73 = *(SipTimerContainer **)(a1 + 3664);
        if (v73)
          SipTimerContainer::cancelTimer(v73, (std::string *)(a1 + 3680));
        *(_DWORD *)(a1 + 3672) = 0;
        *(_DWORD *)(a1 + 452) = 0;
        *(_BYTE *)(a1 + 3648) = 0;
        std::string::operator=((std::string *)(a1 + 3896), a3);
        memset(&__p, 0, sizeof(__p));
        if (*(char *)(a1 + 2415) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 2392), *(_QWORD *)(a1 + 2400));
        else
          __p = *(std::string *)(a1 + 2392);
        v74 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v74 = __p.__r_.__value_.__l.__size_;
        if (!v74)
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            __p.__r_.__value_.__l.__size_ = 7;
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
            p_p = &__p;
          }
          strcpy((char *)p_p, "default");
        }
        v76 = *(_QWORD *)(a1 + 3632);
        if (v76)
        {
          v77 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 384))(v76);
          v78 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__p, v77);
          v79 = a1 + 16;
          v80 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64);
          if (v78)
          {
            v81 = v80(a1 + 16);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v79 + 16))(a1 + 16, v81);
            v82 = ImsOutStream::operator<<(v81, "sticking with ");
            LoggableString::LoggableString((std::string *)v127, &__p);
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v82 + 40))(v82, v127);
            v83 = (_BYTE *)ImsOutStream::operator<<(v82, " registration policy");
            (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v83 + 64))(v83, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v83[17] = 0;
            if ((v128[7] & 0x80000000) != 0)
              operator delete(v127[0]);
LABEL_120:
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 3632) + 288))(*(_QWORD *)(a1 + 3632), a2);
            v91 = *(_DWORD **)(a1 + 3632);
            v92 = v91[106];
            if (v92 == SipRegistrationMode::kModeDisabled)
            {
              v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 48))(a1 + 16);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v93);
              v94 = (_BYTE *)ImsOutStream::operator<<(v93, "registerWithConfig: registration is disabled");
              (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v94 + 64))(v94, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v94[17] = 0;
              memset(&v128[8], 0, 48);
              v127[0] = &off_1E78B7238;
              v127[1] = &_bambiDomain;
              *(_DWORD *)v128 = 1073741826;
              v95 = (uint64_t **)ImsResult::operator<<<char [25]>((uint64_t)v127, "registration is disabled");
              SipRegistrationClient::handleRegistrationError((SipRegistrationClient *)a1, v95, -1, 1, 0);
              goto LABEL_122;
            }
            if (v92 == SipRegistrationMode::kModeDisabledCountry)
            {
              v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 48))(a1 + 16);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v96);
              v97 = (_BYTE *)ImsOutStream::operator<<(v96, "registerWithConfig: registration is in 'disabled country' mode, if the upper level insists on registration anyway - we are clearing that mode and setting it to 'normal'");
              (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v97 + 64))(v97, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v97[17] = 0;
              SipRegistrationPolicy::setRegistrationMode(*(unsigned int **)(a1 + 3632), (unsigned int *)&SipRegistrationMode::kModeNormal);
              v91 = *(_DWORD **)(a1 + 3632);
            }
            if (!(*(unsigned int (**)(_DWORD *))(*(_QWORD *)v91 + 368))(v91))
              goto LABEL_156;
            v98 = a1 + 16;
            v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v99);
            v100 = (_BYTE *)ImsOutStream::operator<<(v99, "registerWithConfig: setting to policy SipRegClientRegType::InitialReg");
            (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v100 + 64))(v100, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v100[17] = 0;
            *(_DWORD *)(*(_QWORD *)(a1 + 3632) + 2348) = 1;
            if (*(_BYTE *)(a2 + 1376))
              goto LABEL_137;
            v101 = (capabilities::radio *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1);
            if ((v101 & 1) != 0 || !capabilities::radio::supportsRel16(v101))
              goto LABEL_137;
            v102 = *(_QWORD *)(a1 + 360);
            v127[0] = 0;
            v127[1] = 0;
            v103 = *(std::__shared_weak_count **)(v102 + 16);
            if (v103)
            {
              v127[1] = std::__shared_weak_count::lock(v103);
              if (v127[1])
              {
                v104 = *(char **)(v102 + 8);
                v127[0] = v104;
              }
              else
              {
                v104 = (char *)v127[0];
              }
            }
            else
            {
              v104 = 0;
            }
            isNR = ims::AccessNetwork::isNR((ims::AccessNetwork *)(v104 + 3136));
            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v127);
            if (!isNR)
            {
LABEL_137:
              *(_OWORD *)v127 = 0u;
              memset(v128, 0, sizeof(v128));
              SipRegistrationClient::initializeTransport((SipRegistrationClient *)v127, a1);
              if (!(*(unsigned int (**)(void *, _QWORD))(*(_QWORD *)v127[1] + 24))(v127[1], *(unsigned int *)v128))goto LABEL_122;
            }
            else
            {
              v106 = *(_QWORD *)(a1 + 360);
              v127[0] = 0;
              v127[1] = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v106 + 16));
              if (v127[1])
              {
                v107 = *(_QWORD **)(v106 + 8);
                v127[0] = v107;
              }
              else
              {
                v107 = v127[0];
              }
              v108 = *(_QWORD *)(v107[17] + 240);
              std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v127);
              if (!v108)
              {
                memset(&v128[8], 0, 48);
                v127[0] = &off_1E78B7238;
                v127[1] = &_bambiDomain;
                *(_DWORD *)v128 = 1073741826;
                SipRegistrationClient::handleRegistrationError((SipRegistrationClient *)a1, (uint64_t **)v127, -1, 1, 0);
                goto LABEL_122;
              }
              if (*(_QWORD *)(v108 + 8) && *(_BYTE *)(v108 + 72))
              {
                v109 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 64))(a1 + 16);
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v98 + 16))(a1 + 16, v109);
                v110 = (_BYTE *)ImsOutStream::operator<<(v109, "InitialRegAccessCheck...");
                (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v110 + 64))(v110, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                v110[17] = 0;
                v111 = *(_QWORD *)(a1 + 360);
                v127[1] = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v111 + 16));
                v127[0] = *(void **)(v111 + 8);
                v112 = *((unsigned int *)v127[0] + 1019);
                v113 = *(_QWORD *)(a1 + 360);
                *(_OWORD *)&v125.__r_.__value_.__l.__data_ = 0uLL;
                v114 = *(std::__shared_weak_count **)(v113 + 16);
                if (v114
                  && (v125.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v114)) != 0)
                {
                  v115 = *(_QWORD *)(v113 + 8);
                  v125.__r_.__value_.__r.__words[0] = v115;
                }
                else
                {
                  v115 = 0;
                }
                IMSNasDeviceClient::reportCallStatus(v108, v112, 0, 64, v115 + 3136, 1, 0);
                std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v125);
                std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v127);
                SipRegistrationClient::setClientState((_QWORD *)a1, 2u);
                SipRegistrationClient::nasImsRegStart((SipRegistrationClient *)a1);
                v118 = *(_QWORD *)(a1 + 3632);
                if (v118)
                {
                  *(_QWORD *)(v118 + 400) = 0;
                  *(_QWORD *)(v118 + 408) = 0;
                }
                goto LABEL_156;
              }
              v116 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 64))(a1 + 16);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v98 + 16))(a1 + 16, v116);
              v117 = (_BYTE *)ImsOutStream::operator<<(v116, "No Baseband for architecture or Baseband is currently not available: go straight to initializeTransport");
              (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v117 + 64))(v117, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v117[17] = 0;
              *(_OWORD *)v127 = 0u;
              memset(v128, 0, sizeof(v128));
              SipRegistrationClient::initializeTransport((SipRegistrationClient *)v127, a1);
              if (!(*(unsigned int (**)(void *, _QWORD))(*(_QWORD *)v127[1] + 24))(v127[1], *(unsigned int *)v128))
              {
LABEL_122:
                ImsResult::~ImsResult((ImsResult *)v127);
LABEL_156:
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                return;
              }
            }
            SipRegistrationClient::handleRegistrationError((SipRegistrationClient *)a1, (uint64_t **)v127, -1, 1, 0);
            goto LABEL_122;
          }
          v86 = v80(a1 + 16);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v79 + 16))(a1 + 16, v86);
          v87 = ImsOutStream::operator<<(v86, "registration policy changed from ");
          v88 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 3632) + 384))(*(_QWORD *)(a1 + 3632));
          LoggableString::LoggableString((std::string *)v127, v88);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v87 + 40))(v87, v127);
          v89 = ImsOutStream::operator<<(v87, " to '");
          LoggableString::LoggableString(&v125, (const std::string *)(a2 + 1280));
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v89 + 40))(v89, &v125);
          v90 = (_BYTE *)ImsOutStream::operator<<(v89, "'");
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v90 + 64))(v90, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v90[17] = 0;
          if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v125.__r_.__value_.__l.__data_);
          if ((v128[7] & 0x80000000) != 0)
            operator delete(v127[0]);
        }
        else
        {
          v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v84);
          v85 = (_BYTE *)ImsOutStream::operator<<(v84, "no existing registration policy");
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v85 + 64))(v85, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v85[17] = 0;
        }
        SipRegistrationClient::setPolicy((_QWORD *)a1, (unsigned __int8 *)(a1 + 2392));
        goto LABEL_120;
      }
    }
    else if (!MEMORY[0xA60])
    {
      goto LABEL_96;
    }
    v37 = a1 + 16;
    v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"seeing if we need to start reg hysteresis timer", 47);
    *(_BYTE *)(v38 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v38 + 17) = 0;
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)"registered services = ", 22);
    *(_BYTE *)(v39 + 17) = 0;
    v40 = *(_DWORD *)(a1 + 1104);
    std::string::basic_string[abi:ne180100]<0>(v123, ",");
    BambiServices::namesForServiceMask(v40, (uint64_t)v123, &v125);
    LoggableString::LoggableString(&__p, &v125);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v39 + 40))(v39, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v39 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v125.__r_.__value_.__l.__data_);
    if (v124 < 0)
      operator delete(v123[0]);
    v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 64))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(a1 + 16, v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)"new services = ", 15);
    *(_BYTE *)(v41 + 17) = 0;
    v42 = *(_DWORD *)(a2 + 24);
    std::string::basic_string[abi:ne180100]<0>(v123, ",");
    BambiServices::namesForServiceMask(v42, (uint64_t)v123, &v125);
    LoggableString::LoggableString(&__p, &v125);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v41 + 40))(v41, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v41 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v125.__r_.__value_.__l.__data_);
    if (v124 < 0)
      operator delete(v123[0]);
    if ((*(_BYTE *)(a2 + 24) & 1) == 0)
    {
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 224), (unsigned __int8 *)&kRegHysteresisTimer))
      {
        v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v43 + 8), (uint64_t)"new registration is SMS-only. Canceling pending hysteresis timer and any deferred registration.", 95);
        *(_BYTE *)(v43 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v43 + 17) = 0;
        SipTimerContainer::cancelTimer((SipTimerContainer *)(a1 + 216), &kRegHysteresisTimer);
        SipRegistrationDeferralManager::cancel(a1 + 3976);
        return;
      }
      v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 64))(a1 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(a1 + 16, v68);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v68 + 8), (uint64_t)"new registration is SMS-only, but hysteresis timer isn't running. Continuing with normal registration.", 102);
      *(_BYTE *)(v68 + 17) = 0;
      v67 = (_BYTE *)(v68 + 17);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v68 + 64))(v68, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_95;
    }
    v44 = *(_QWORD *)(a1 + 360);
    v45 = *(std::__shared_weak_count **)(v44 + 16);
    if (v45 && (v46 = std::__shared_weak_count::lock(v45)) != 0)
    {
      v47 = v46;
      v48 = *(_QWORD *)(v44 + 8) + 3136;
      v49 = (unint64_t *)&v46->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    else
    {
      v48 = 3136;
    }
    if (!ims::AccessNetwork::isLTE((ims::AccessNetwork *)v48))
    {
      v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 64))(a1 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(a1 + 16, v65);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v65 + 8), (uint64_t)"don't need reg hysteresis on ", 29);
      *(_BYTE *)(v65 + 17) = 0;
      LoggableString::LoggableString(&__p, (const std::string *)v48);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v65 + 40))(v65, &__p);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v65 + 64))(v65, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v65 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_96;
    }
    if (*(_DWORD *)(a1 + 528) != 2
      || *(_DWORD *)(a1 + 1104) != 4
      || !ims::AccessNetwork::isLTE((ims::AccessNetwork *)(a1 + 536)))
    {
      v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 64))(a1 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(a1 + 16, v66);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v66 + 8), (uint64_t)"not registered SMS-only on LTE", 30);
      *(_BYTE *)(v66 + 17) = 0;
      v67 = (_BYTE *)(v66 + 17);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v66 + 64))(v66, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_95:
      *v67 = 0;
      goto LABEL_96;
    }
    v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v51 + 8), (uint64_t)"deferring new registration while registered SMS-only", 52);
    *(_BYTE *)(v51 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v51 + 17) = 0;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v121, (_QWORD *)(a1 + 200));
    SipRegistrationDeferralManager::deferAction((uint64_t *)(a1 + 3976), &v121, a2, (unsigned __int8 *)a3);
    v52 = v122;
    if (v122)
    {
      v53 = (unint64_t *)&v122->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v56 = *(_QWORD *)(a1 + 200);
    v55 = *(std::__shared_weak_count **)(a1 + 208);
    if (v55)
    {
      p_shared_weak_owners = (unint64_t *)&v55->__shared_weak_owners_;
      do
        v58 = __ldxr(p_shared_weak_owners);
      while (__stxr(v58 + 1, p_shared_weak_owners));
      do
        v59 = __ldxr(p_shared_weak_owners);
      while (__stxr(v59 + 1, p_shared_weak_owners));
    }
    if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 224), (unsigned __int8 *)&kRegHysteresisTimer))
    {
      goto LABEL_151;
    }
    if (v55)
    {
      v60 = (unint64_t *)&v55->__shared_weak_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    *(_QWORD *)&v128[8] = 0;
    v62 = operator new(0x20uLL);
    *v62 = &off_1E78D7758;
    v62[1] = a1;
    v62[2] = v56;
    v62[3] = v55;
    *(_QWORD *)&v128[8] = v62;
    SipTimerContainer::startTimer((_QWORD *)(a1 + 216), (uint64_t)&kRegHysteresisTimer, (uint64_t)v127, *(_DWORD *)(a1 + 2772), 0);
    v63 = *(void ***)&v128[8];
    if (*(void ***)&v128[8] == v127)
    {
      v64 = 4;
      v63 = v127;
    }
    else
    {
      if (!*(_QWORD *)&v128[8])
      {
LABEL_151:
        if (!v55)
          return;
        std::__shared_weak_count::__release_weak(v55);
        v36 = v55;
LABEL_47:
        std::__shared_weak_count::__release_weak(v36);
        return;
      }
      v64 = 5;
    }
    (*((void (**)(void))*v63 + v64))();
    goto LABEL_151;
  }
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v119, (_QWORD *)(a1 + 200));
  SipRegistrationDeferralManager::deferAction((uint64_t *)(a1 + 3976), &v119, a2, (unsigned __int8 *)a3);
  v33 = v120;
  if (v120)
  {
    v34 = (unint64_t *)&v120->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      v36 = v33;
      goto LABEL_47;
    }
  }
}

void sub_1BF05E188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void DeferredDeregistration::perform(DeferredDeregistration *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  SipRegistrationClient *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = (SipRegistrationClient *)*((_QWORD *)this + 1);
      if (v5)
        SipRegistrationClient::deregister(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF05E3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::deregister(SipRegistrationClient *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  _BOOL4 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  SipTimerContainer *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _BOOL4 v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  unint64_t *p_shared_weak_owners;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *size;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::string v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _BYTE v84[24];
  _BYTE *v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(SipRegistrationClient *))(*(_QWORD *)this + 248))(this))
  {
    v3 = *((_QWORD *)this + 2);
    v2 = (char *)this + 16;
    v4 = (*(uint64_t (**)(char *))(v3 + 64))(v2);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"skipping deregistration of emergency client", 43);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    return;
  }
  v5 = *((_QWORD *)this + 45);
  v6 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v5 + 16));
  if (*(_DWORD *)(*(_QWORD *)(v5 + 8) + 200) == 2)
  {
    v7 = 0;
  }
  else
  {
    v8 = *((_QWORD *)this + 45);
    v9 = *(std::__shared_weak_count **)(v8 + 16);
    if (v9 && (v10 = std::__shared_weak_count::lock(v9)) != 0)
    {
      v11 = v10;
      v7 = *(_DWORD *)(*(_QWORD *)(v8 + 8) + 200) != 3;
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v7 = MEMORY[0xC8] != 3;
    }
  }
  v14 = (unint64_t *)&v6->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
    if (v7)
    {
LABEL_16:
      v16 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"deregister called on uninitialized SIP stack", 44);
      *(_BYTE *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v16 + 17) = 0;
      v81 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
      v80.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(v80.__r_.__value_.__r.__words[2]) = 1073741826;
      v17 = (uint64_t **)ImsResult::operator<<<char [26]>((uint64_t)&v80, "SIP stack not initialized");
      SipRegistrationClient::handleRegistrationError(this, v17, -1, 1, 0);
      ImsResult::~ImsResult((ImsResult *)&v80);
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v7)
      goto LABEL_16;
  }
  SipTimerContainer::cancelTimer((SipRegistrationClient *)((char *)this + 216), &kRegHysteresisTimer);
  if (*((_DWORD *)this + 130) == 1)
  {
LABEL_19:
    if (SipRegistrationClient::shouldDeferRegistration(this))
    {
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v70, (_QWORD *)this + 25);
      SipRegistrationDeferralManager::deferAction((_DWORD *)this + 994, (uint64_t)&v70);
      v18 = v71;
      if (v71)
      {
        v19 = (unint64_t *)&v71->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v22 = *((_QWORD *)this + 2);
      v21 = (char *)this + 16;
      v23 = (*(uint64_t (**)(char *))(v22 + 64))(v21);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v21 + 16))(v21, v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"deferring deregistration while in limited connectivity", 54);
      *(_BYTE *)(v23 + 17) = 0;
      v24 = (_BYTE *)(v23 + 17);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_56:
      *v24 = 0;
      return;
    }
    SipRegistrationSubject::actionOnObservers((uint64_t)this + 152, (uint64_t)&__block_literal_global_262);
    v28 = (SipTimerContainer *)*((_QWORD *)this + 458);
    if (v28)
      SipTimerContainer::cancelTimer(v28, (std::string *)((char *)this + 3680));
    *((_DWORD *)this + 918) = 0;
    v29 = *((_DWORD *)this + 132);
    if (v29 == 3 || !v29)
    {
      v30 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"deregister: not registered", 26);
      *(_BYTE *)(v30 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v30 + 17) = 0;
      LODWORD(v80.__r_.__value_.__l.__data_) = 0;
      SipRegistrationClient::setRegistrationState((uint64_t)this, (int *)&v80, 0);
      (*(void (**)(SipRegistrationClient *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, 3, 0, 0);
      SipRegistrationClient::setClientState(this, 1u);
      return;
    }
    SipTimerContainer::cancelTimer((SipRegistrationClient *)((char *)this + 216), (std::string *)&_MergedGlobals_14);
    *((_QWORD *)this + 60) = 0;
    *((_QWORD *)this + 61) = 0;
    *((_BYTE *)this + 3648) = 1;
    if (*((char *)this + 3919) < 0)
    {
      **((_BYTE **)this + 487) = 0;
      *((_QWORD *)this + 488) = 0;
    }
    else
    {
      *((_BYTE *)this + 3896) = 0;
      *((_BYTE *)this + 3919) = 0;
    }
    *((_DWORD *)this + 284) = 0;
    *((_BYTE *)this + 608) = 0;
    if (!*((_BYTE *)this + 2488))
    {
      SipRegistrationClient::sendInitialRequest(this);
      return;
    }
    v59 = *((_QWORD *)this + 25);
    v58 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
    if (v58)
    {
      p_shared_weak_owners = (unint64_t *)&v58->__shared_weak_owners_;
      do
        v61 = __ldxr(p_shared_weak_owners);
      while (__stxr(v61 + 1, p_shared_weak_owners));
      do
        v62 = __ldxr(p_shared_weak_owners);
      while (__stxr(v62 + 1, p_shared_weak_owners));
      do
        v63 = __ldxr(p_shared_weak_owners);
      while (__stxr(v63 + 1, p_shared_weak_owners));
    }
    v85 = 0;
    v64 = operator new(0x20uLL);
    *v64 = &off_1E78D77D8;
    v64[1] = this;
    v64[2] = v59;
    v64[3] = v58;
    v85 = v64;
    SipTimerContainer::startTimer((_QWORD *)this + 27, (uint64_t)&qword_1ED70ED58, (uint64_t)v84, 0x64u, 0);
    v65 = v85;
    if (v85 == v84)
    {
      v66 = 4;
      v65 = v84;
    }
    else
    {
      if (!v85)
        goto LABEL_93;
      v66 = 5;
    }
    (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_93:
    if (v58)
    {
      std::__shared_weak_count::__release_weak(v58);
      v48 = v58;
      goto LABEL_95;
    }
    return;
  }
  if (!*((_BYTE *)this + 3648))
  {
    v32 = (char *)this + 16;
    v31 = *((_QWORD *)this + 2);
    if (!*((_QWORD *)this + 45))
    {
      v49 = (*(uint64_t (**)(char *))(v31 + 56))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v32 + 16))((char *)this + 16, v49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v49 + 8), (uint64_t)"cancelPendingRegistration: UA hasn't been initialized", 53);
      *(_BYTE *)(v49 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v49 + 17) = 0;
      goto LABEL_67;
    }
    v33 = (*(uint64_t (**)(char *))(v31 + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"canceling in-progress registration", 34);
    *(_BYTE *)(v33 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v33 + 17) = 0;
    v34 = *((_QWORD *)this + 454);
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 376))(v34);
    v35 = *((_DWORD *)this + 130);
    if ((v35 - 6) >= 2)
    {
      if (v35 == 5)
      {
        SipUserAgent::transportLayer(*((SipUserAgent **)this + 45), &v80);
        SipTransportLayer::cancelTransportInit((SipTransportLayer *)v80.__r_.__value_.__l.__data_);
        size = (std::__shared_weak_count *)v80.__r_.__value_.__l.__size_;
        if (v80.__r_.__value_.__l.__size_)
        {
          v68 = (unint64_t *)(v80.__r_.__value_.__l.__size_ + 8);
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
LABEL_67:
        if (*((_DWORD *)this + 130) == 5)
          goto LABEL_19;
LABEL_68:
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v72, (_QWORD *)this + 25);
        SipRegistrationDeferralManager::deferAction((_DWORD *)this + 994, (uint64_t)&v72);
        v50 = v73;
        if (v73)
        {
          v51 = (unint64_t *)&v73->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v53 = (*(uint64_t (**)(char *))(*(_QWORD *)v32 + 64))(v32);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v32 + 16))(v32, v53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v53 + 8), (uint64_t)"deferring deregistration request until current registration completes", 69);
        *(_BYTE *)(v53 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v53 + 64))(v53, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v53 + 17) = 0;
        return;
      }
      if (v35 != 9)
        goto LABEL_68;
    }
    if (*((_BYTE *)this + 2489))
      SipRegistrationClient::setClientState(this, 0xAu);
    goto LABEL_67;
  }
  v25 = *((_QWORD *)this + 45);
  v26 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v25 + 16));
  v79 = v26;
  v78 = *(_QWORD *)(v25 + 8);
  v27 = *(_QWORD *)(v78 + 136);
  if (*(char *)(v27 + 303) < 0)
    std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)(v27 + 280), *(_QWORD *)(v27 + 288));
  else
    v80 = *(std::string *)(v27 + 280);
  LOBYTE(v81) = *(_BYTE *)(v27 + 304);
  v36 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&v80, BambiClientStatus::kStatusDeinitializing);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  v37 = (unint64_t *)&v26->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  if (v36)
  {
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v76, (_QWORD *)this + 25);
    SipRegistrationDeferralManager::deferAction((_DWORD *)this + 994, (uint64_t)&v76);
    v39 = v77;
    if (v77)
    {
      v40 = (unint64_t *)&v77->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v43 = *((_QWORD *)this + 2);
    v42 = (char *)this + 16;
    v44 = (*(uint64_t (**)(char *))(v43 + 64))(v42);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v42 + 16))(v42, v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"deferring new deregistration request until current deinit/deregistration completes", 82);
    *(_BYTE *)(v44 + 17) = 0;
    v24 = (_BYTE *)(v44 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_56;
  }
  if (!*((_QWORD *)this + 497))
  {
    v55 = *((_QWORD *)this + 2);
    v54 = (char *)this + 16;
    v56 = (*(uint64_t (**)(char *))(v55 + 64))(v54);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v54 + 16))(v54, v56);
    v57 = (_BYTE *)ImsOutStream::operator<<(v56, "deregister: already have a deregistration in progress, don't need to do it wice");
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v57[17] = 0;
    return;
  }
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v74, (_QWORD *)this + 25);
  SipRegistrationDeferralManager::deferAction((_DWORD *)this + 994, (uint64_t)&v74);
  v45 = v75;
  if (v75)
  {
    v46 = (unint64_t *)&v75->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      v48 = v45;
LABEL_95:
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

void sub_1BF05ED50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void DeferredDropRegistration::perform(DeferredDropRegistration *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *((_QWORD *)this + 1);
      if (v5)
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v5 + 168))(v5, *((unsigned int *)this + 6), *((_QWORD *)this + 4), 0);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF05EEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void DeferredSubscription::perform(DeferredSubscription *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *((_QWORD *)this + 1);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 184))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF05EF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipRegistrationDeferralManager::deferAction(_DWORD *a1, uint64_t a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::string v21;
  std::string __p;
  void *v23[2];
  char v24;
  void *v25;
  std::__shared_weak_count *v26;
  char v27;

  v3 = *(const void **)a1;
  if (v3)
  {
    {
      std::string::basic_string[abi:ne180100]<0>(&v25, "sip.defer");
      std::string::basic_string[abi:ne180100]<0>(v23, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v25, (uint64_t)v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Canceling deferred action ", 26);
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(std::string *__return_ptr))(**(_QWORD **)a1 + 24))(&v21);
      LoggableString::LoggableString(&__p, &v21);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v4 + 40))(v4, &__p);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v4 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      if (v24 < 0)
        operator delete(v23[0]);
      if (v27 < 0)
        operator delete(v25);
      v5 = *(_QWORD *)a1;
      *(_QWORD *)a1 = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  else if (a1[2])
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "sip.defer");
    std::string::basic_string[abi:ne180100]<0>(v23, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::debug(ims::_logger, (uint64_t)&v25, (uint64_t)v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Deferring new deregistration", 28);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v24 < 0)
      operator delete(v23[0]);
    if (v27 < 0)
      operator delete(v25);
    v8 = (_QWORD *)operator new();
    v9 = v8;
    v10 = *(void **)a2;
    v11 = *(std::__shared_weak_count **)(a2 + 8);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v25 = v10;
      v26 = v11;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    else
    {
      v25 = v10;
      v26 = 0;
    }
    DeferredAction::DeferredAction(v8, (uint64_t *)&v25);
    v15 = v26;
    if (v26)
    {
      v16 = (unint64_t *)&v26->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    *v9 = &off_1E78D70A0;
    v18 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v9;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if (v11)
    {
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_1BF05F26C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 33) < 0)
    operator delete(*(void **)(v26 - 56));
  _Unwind_Resume(exception_object);
}

void SipRegistrationDeferralManager::deferAction(uint64_t *a1, uint64_t *a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  const void **v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  const void **v35;
  unsigned __int8 *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51[2];
  char v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  std::string v55;
  void *__p[2];
  char v57;
  void *v58[2];
  char v59;
  std::string v60;

  v8 = *a1;
  if (v8)
  {
    memset(&v60, 0, sizeof(v60));
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v8 + 24))(&v60);
    if (*(_DWORD *)(a3 + 24) == *((_DWORD *)a1 + 2))
    {
      v9 = a4[23];
      if ((v9 & 0x80u) == 0)
        v10 = a4[23];
      else
        v10 = *((_QWORD *)a4 + 1);
      if (v10 == 7)
      {
        if ((v9 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)a4, "Refresh", *((_QWORD *)a4 + 1)))
            goto LABEL_62;
        }
        else
        {
          if (!a4[23])
            goto LABEL_62;
          v11 = "Refresh";
          v12 = a4;
          while (*v12 == *(unsigned __int8 *)v11)
          {
            ++v12;
            ++v11;
            if (!--v9)
              goto LABEL_62;
          }
        }
      }
      v25 = *(unsigned __int8 *)(a3 + 1031);
      if ((v25 & 0x80u) == 0)
        v26 = *(unsigned __int8 *)(a3 + 1031);
      else
        v26 = *(_QWORD *)(a3 + 1016);
      v27 = *((unsigned __int8 *)a1 + 39);
      v28 = (char)v27;
      if ((v27 & 0x80u) != 0)
        v27 = a1[3];
      if (v26 != v27)
        goto LABEL_62;
      v29 = (const void **)(a3 + 1008);
      if (v28 >= 0)
        v30 = (unsigned __int8 *)(a1 + 2);
      else
        v30 = (unsigned __int8 *)a1[2];
      if ((v25 & 0x80) != 0)
      {
        if (memcmp(*v29, v30, *(_QWORD *)(a3 + 1016)))
          goto LABEL_62;
      }
      else if (*(_BYTE *)(a3 + 1031))
      {
        while (*(unsigned __int8 *)v29 == *v30)
        {
          v29 = (const void **)((char *)v29 + 1);
          ++v30;
          if (!--v25)
            goto LABEL_47;
        }
        goto LABEL_62;
      }
LABEL_47:
      v31 = *(unsigned __int8 *)(a3 + 1055);
      if ((v31 & 0x80u) == 0)
        v32 = *(unsigned __int8 *)(a3 + 1055);
      else
        v32 = *(_QWORD *)(a3 + 1040);
      v33 = *((unsigned __int8 *)a1 + 63);
      v34 = (char)v33;
      if ((v33 & 0x80u) != 0)
        v33 = a1[6];
      if (v32 == v33)
      {
        v35 = (const void **)(a3 + 1032);
        if (v34 >= 0)
          v36 = (unsigned __int8 *)(a1 + 5);
        else
          v36 = (unsigned __int8 *)a1[5];
        if ((v31 & 0x80) == 0)
        {
          if (*(_BYTE *)(a3 + 1055))
          {
            while (*(unsigned __int8 *)v35 == *v36)
            {
              v35 = (const void **)((char *)v35 + 1);
              ++v36;
              if (!--v31)
                goto LABEL_83;
            }
            goto LABEL_62;
          }
LABEL_83:
          std::string::basic_string[abi:ne180100]<0>(v58, "sip.defer");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          v49 = ims::debug((uint64_t)v58, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v49 + 8), (uint64_t)"Canceling deferred action ", 26);
          *(_BYTE *)(v49 + 17) = 0;
          LoggableString::LoggableString(&v55, &v60);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v49 + 40))(v49, &v55);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v49 + 17) = 0;
          if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v55.__r_.__value_.__l.__data_);
          if (v57 < 0)
            operator delete(__p[0]);
          if (v59 < 0)
            operator delete(v58[0]);
          v50 = *a1;
          *a1 = 0;
          if (v50)
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
          goto LABEL_80;
        }
        if (!memcmp(*v35, v36, *(_QWORD *)(a3 + 1040)))
          goto LABEL_83;
      }
    }
LABEL_62:
    std::string::basic_string[abi:ne180100]<0>(v58, "sip.defer");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v37 = ImsLogger::debug(ims::_logger, (uint64_t)v58, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"Updating state with new registration (", 38);
    *(_BYTE *)(v37 + 17) = 0;
    v38 = *(_DWORD *)(a3 + 24);
    std::string::basic_string[abi:ne180100]<0>(v51, ",");
    BambiServices::namesForServiceMask(v38, (uint64_t)v51, &v55);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v37 + 32))(v37, &v55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)", ", 2);
    *(_BYTE *)(v37 + 17) = 0;
    v39 = ims::operator<<(v37, a3 + 1008);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)") with reason ", 14);
    *(_BYTE *)(v39 + 17) = 0;
    (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v39 + 32))(v39, a4);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v39 + 17) = 0;
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if (v52 < 0)
      operator delete(v51[0]);
    if (v57 < 0)
      operator delete(__p[0]);
    if (v59 < 0)
      operator delete(v58[0]);
    v40 = (_QWORD *)operator new();
    v41 = v40;
    v42 = *a2;
    v43 = (std::__shared_weak_count *)a2[1];
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(p_shared_owners);
      while (__stxr(v45 + 1, p_shared_owners));
    }
    DeferredRegistration::DeferredRegistration(v40, v42, v43, (const SipRegistrationConfig *)a3, (__int128 *)a4);
    v46 = *a1;
    *a1 = (uint64_t)v41;
    if (v46)
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
    if (v43)
    {
      v47 = (unint64_t *)&v43->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
LABEL_80:
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v60, "sip.defer");
  std::string::basic_string[abi:ne180100]<0>(v58, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v13 = ImsLogger::debug(ims::_logger, (uint64_t)&v60, (uint64_t)v58);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Deferring new registration (", 28);
  *(_BYTE *)(v13 + 17) = 0;
  v14 = *(_DWORD *)(a3 + 24);
  std::string::basic_string[abi:ne180100]<0>(&v55, ",");
  BambiServices::namesForServiceMask(v14, (uint64_t)&v55, __p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 32))(v13, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)", ", 2);
  *(_BYTE *)(v13 + 17) = 0;
  v15 = ims::operator<<(v13, a3 + 1008);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)") with reason ", 14);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v15 + 32))(v15, a4);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
  if (v57 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (v59 < 0)
    operator delete(v58[0]);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  v16 = (_QWORD *)operator new();
  v17 = v16;
  v18 = *a2;
  v19 = (std::__shared_weak_count *)a2[1];
  v53 = v18;
  v54 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  DeferredRegistration::DeferredRegistration(v16, v18, v19, (const SipRegistrationConfig *)a3, (__int128 *)a4);
  v22 = *a1;
  *a1 = (uint64_t)v17;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if (v19)
  {
    v23 = (unint64_t *)&v19->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1BF05F960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  if (a31 < 0)
    operator delete(__p);
  if (*(char *)(v31 - 73) < 0)
    operator delete(*(void **)(v31 - 96));
  if (*(char *)(v31 - 49) < 0)
    operator delete(*(void **)(v31 - 72));
  _Unwind_Resume(exception_object);
}

void SipRegistrationDeferralManager::deferAction(const void **a1, uint64_t a2)
{
  const void *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const void *v16;
  unint64_t *v17;
  unint64_t v18;
  void *__p[2];
  char v20;
  void *v21;
  std::__shared_weak_count *v22;
  char v23;

  v4 = *a1;
  if (!v4
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "sip.defer");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::debug(ims::_logger, (uint64_t)&v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Deferring new registration subscription", 39);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (v20 < 0)
      operator delete(__p[0]);
    if (v23 < 0)
      operator delete(v21);
    v6 = (_QWORD *)operator new();
    v7 = v6;
    v8 = *(void **)a2;
    v9 = *(std::__shared_weak_count **)(a2 + 8);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v22 = v9;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v22 = 0;
    }
    v21 = v8;
    DeferredAction::DeferredAction(v6, (uint64_t *)&v21);
    v13 = v22;
    if (v22)
    {
      v14 = (unint64_t *)&v22->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    *v7 = &off_1E78D7140;
    v16 = *a1;
    *a1 = v7;
    if (v16)
      (*(void (**)(const void *))(*(_QWORD *)v16 + 8))(v16);
    if (v9)
    {
      v17 = (unint64_t *)&v9->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BF05FC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipRegistrationDeferralManager::cancel(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  std::string v3;
  std::string __p;
  void *v5[2];
  char v6;
  void *v7[2];
  char v8;

  if (*(_QWORD *)this)
  {
    v1 = this;
    std::string::basic_string[abi:ne180100]<0>(v7, "sip.defer");
    std::string::basic_string[abi:ne180100]<0>(v5, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v2 = ImsLogger::debug(ims::_logger, (uint64_t)v7, (uint64_t)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"canceling ", 10);
    *(_BYTE *)(v2 + 17) = 0;
    (*(void (**)(std::string *__return_ptr))(**(_QWORD **)v1 + 24))(&v3);
    LoggableString::LoggableString(&__p, &v3);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v2 + 40))(v2, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v2 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v3.__r_.__value_.__l.__data_);
    if (v6 < 0)
      operator delete(v5[0]);
    if (v8 < 0)
      operator delete(v7[0]);
    this = *(_QWORD *)v1;
    *(_QWORD *)v1 = 0;
    if (this)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

void sub_1BF05FDE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v26 - 17) < 0)
    operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(exception_object);
}

_QWORD *SipRegistrationDeferralManager::perform(_QWORD *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::string v6;
  std::string __p;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;

  if (*this)
  {
    v3 = (uint64_t)this;
    std::string::basic_string[abi:ne180100]<0>(v10, "sip.defer");
    std::string::basic_string[abi:ne180100]<0>(v8, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::debug(ims::_logger, (uint64_t)v10, (uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"performing deferred action ", 27);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(std::string *__return_ptr))(**(_QWORD **)v3 + 24))(&v6);
    LoggableString::LoggableString(&__p, &v6);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v4 + 40))(v4, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
    if (v9 < 0)
      operator delete(v8[0]);
    if (v11 < 0)
      operator delete(v10[0]);
    v5 = *(_QWORD *)v3;
    *(_QWORD *)v3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2);
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return this;
}

void sub_1BF05FFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v26 - 33) < 0)
    operator delete(*(void **)(v26 - 56));
  _Unwind_Resume(exception_object);
}

void SipRegistrationClient::SipRegistrationClient(SipRegistrationClient *this, SipUserAgent *a2)
{
  char *v4;
  std::__shared_weak_count *size;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::string __p;

  *(_QWORD *)this = &off_1E78B81C8;
  *((_QWORD *)this + 1) = off_1E78BD268;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.reg");
  ImsLogContainer::ImsLogContainer((uint64_t)this + 16, &__p, (const std::string *)((char *)a2 + 56));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 15) = &unk_1E78D6CA8;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 20) = (char *)this + 168;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *(_QWORD *)this = &off_1E78D6AF0;
  *((_QWORD *)this + 1) = &unk_1E78D6C20;
  *((_QWORD *)this + 2) = &unk_1E78D6C48;
  *((_QWORD *)this + 16) = &unk_1E78D6CD8;
  *((_QWORD *)this + 17) = &unk_1E78D6D00;
  *((_QWORD *)this + 18) = &unk_1E78D6D30;
  *((_QWORD *)this + 19) = &unk_1E78D6DD0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = &unk_1E78D6DF0;
  *((_QWORD *)this + 24) = &unk_1E78D6E10;
  SipTimerContainer::SipTimerContainer((SipRegistrationClient *)((char *)this + 216));
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  SipIdString::SipIdString((SipRegistrationClient *)((char *)this + 392));
  *((_QWORD *)this + 49) = off_1E78D72D8;
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_BYTE *)this + 524) = 0;
  v4 = (char *)this + 528;
  *((_QWORD *)this + 74) = 0;
  *((_BYTE *)this + 600) = 0;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *(_OWORD *)((char *)this + 569) = 0u;
  SipContactParam::SipContactParam((SipRegistrationClient *)((char *)this + 616));
  SipRegistrationConfig::SipRegistrationConfig((SipRegistrationClient *)((char *)this + 1112));
  *(_OWORD *)((char *)this + 2792) = 0u;
  *((_QWORD *)this + 352) = &off_1E78D08F8;
  *(_OWORD *)((char *)this + 2856) = 0u;
  *((_QWORD *)this + 353) = 0;
  *((_OWORD *)this + 177) = 0u;
  *((_WORD *)this + 1424) = 0;
  *(_OWORD *)((char *)this + 2888) = 0u;
  *((_QWORD *)this + 359) = &off_1E78B82D8;
  *((_QWORD *)this + 360) = (char *)this + 2888;
  *((_BYTE *)this + 2905) = 1;
  *((_QWORD *)this + 351) = &off_1E78BFCE8;
  *((_QWORD *)this + 390) = 0;
  *((_OWORD *)this + 194) = 0u;
  *((_OWORD *)this + 193) = 0u;
  *((_OWORD *)this + 192) = 0u;
  *((_OWORD *)this + 191) = 0u;
  *((_OWORD *)this + 190) = 0u;
  *((_OWORD *)this + 189) = 0u;
  *((_OWORD *)this + 188) = 0u;
  *((_OWORD *)this + 187) = 0u;
  *((_OWORD *)this + 186) = 0u;
  *((_OWORD *)this + 185) = 0u;
  *((_OWORD *)this + 184) = 0u;
  *((_OWORD *)this + 183) = 0u;
  *((_OWORD *)this + 182) = 0u;
  *((_QWORD *)this + 392) = &off_1E78B82D8;
  *((_OWORD *)this + 197) = 0u;
  *((_QWORD *)this + 393) = (char *)this + 3152;
  *((_QWORD *)this + 397) = &off_1E78B82D8;
  *(_OWORD *)((char *)this + 3192) = 0u;
  *((_QWORD *)this + 398) = (char *)this + 3192;
  *((_BYTE *)this + 2904) = 1;
  *((_WORD *)this + 1584) = 257;
  *((_WORD *)this + 1604) = 257;
  *((_BYTE *)this + 3128) = 0;
  *((_QWORD *)this + 403) = &off_1E78D08F8;
  *((_OWORD *)this + 204) = 0u;
  *((_OWORD *)this + 202) = 0u;
  *((_WORD *)this + 1628) = 0;
  *((_QWORD *)this + 406) = 0;
  *((_QWORD *)this + 410) = &off_1E78B82D8;
  *((_OWORD *)this + 206) = 0u;
  *((_QWORD *)this + 411) = (char *)this + 3296;
  *((_BYTE *)this + 3313) = 1;
  *((_QWORD *)this + 402) = &off_1E78BFCE8;
  *(_OWORD *)((char *)this + 3336) = 0u;
  *(_OWORD *)((char *)this + 3352) = 0u;
  *(_OWORD *)((char *)this + 3368) = 0u;
  *(_OWORD *)((char *)this + 3384) = 0u;
  *(_OWORD *)((char *)this + 3400) = 0u;
  *(_OWORD *)((char *)this + 3416) = 0u;
  *(_OWORD *)((char *)this + 3432) = 0u;
  *(_OWORD *)((char *)this + 3448) = 0u;
  *(_OWORD *)((char *)this + 3464) = 0u;
  *((_QWORD *)this + 441) = 0;
  *(_OWORD *)((char *)this + 3320) = 0u;
  *(_OWORD *)((char *)this + 3480) = 0u;
  *(_OWORD *)((char *)this + 3496) = 0u;
  *(_OWORD *)((char *)this + 3512) = 0u;
  *((_QWORD *)this + 443) = &off_1E78B82D8;
  *(_OWORD *)((char *)this + 3560) = 0u;
  *((_QWORD *)this + 444) = (char *)this + 3560;
  *((_QWORD *)this + 448) = &off_1E78B82D8;
  *((_OWORD *)this + 225) = 0u;
  *((_QWORD *)this + 449) = (char *)this + 3600;
  *((_BYTE *)this + 3312) = 1;
  *((_WORD *)this + 1788) = 257;
  *((_WORD *)this + 1808) = 257;
  *((_BYTE *)this + 3536) = 0;
  *((_OWORD *)this + 227) = 0u;
  *((_QWORD *)this + 458) = 0;
  *((_DWORD *)this + 918) = 0;
  *((_OWORD *)this + 230) = 0u;
  *((_OWORD *)this + 231) = 0u;
  *((_QWORD *)this + 464) = 0;
  *((_QWORD *)this + 457) = &off_1E78BCAE0;
  *((_QWORD *)this + 465) = 0;
  *((_QWORD *)this + 467) = 0;
  *((_DWORD *)this + 936) = 0;
  *((_QWORD *)this + 473) = 0;
  *(_OWORD *)((char *)this + 3768) = 0u;
  *(_OWORD *)((char *)this + 3752) = 0u;
  *((_QWORD *)this + 466) = &off_1E78BCAE0;
  *((_QWORD *)this + 476) = 0;
  *((_OWORD *)this + 237) = 0u;
  *((_QWORD *)this + 477) = &off_1E78B7238;
  *((_QWORD *)this + 485) = 0;
  *(_OWORD *)((char *)this + 3864) = 0u;
  *((_QWORD *)this + 478) = &_bambiDomain;
  *((_DWORD *)this + 958) = 0;
  *((_QWORD *)this + 482) = 0;
  *((_OWORD *)this + 240) = 0u;
  *((_WORD *)this + 1945) = 0;
  *((_BYTE *)this + 3892) = 0;
  *((_DWORD *)this + 981) = 0;
  *((_BYTE *)this + 3920) = 0;
  *((_QWORD *)this + 489) = 0;
  *(_OWORD *)((char *)this + 3896) = 0u;
  *((_QWORD *)this + 497) = 0;
  *((_DWORD *)this + 996) = 0;
  *((_QWORD *)this + 506) = 0;
  *((_BYTE *)this + 4056) = 0;
  *((_BYTE *)this + 4040) = 0;
  *(_OWORD *)((char *)this + 4008) = 0u;
  *(_OWORD *)((char *)this + 4024) = 0u;
  *(_OWORD *)((char *)this + 3992) = 0u;
  *((_DWORD *)this + 992) = 0;
  *(_OWORD *)((char *)this + 3944) = 0u;
  *((_QWORD *)this + 495) = 0;
  *((_QWORD *)this + 508) = off_1E78EFD80;
  *((_QWORD *)this + 511) = 0;
  *((_QWORD *)this + 510) = 0;
  *((_QWORD *)this + 509) = (char *)this + 4080;
  *((_QWORD *)this + 512) = dispatch_queue_create("com.apple.ipTelephony.eval", 0);
  *((_WORD *)this + 2052) = 0;
  *((_QWORD *)this + 45) = a2;
  *((_QWORD *)this + 56) = 1;
  *((_QWORD *)this + 57) = 0;
  std::string::operator=((std::string *)this + 11, (const std::string *)this + 1);
  std::string::operator=((std::string *)this + 12, (const std::string *)((char *)a2 + 56));
  *((_QWORD *)this + 40) = (char *)this + 120;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_QWORD *)this + 62) = 0;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 504, (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v6 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  *((_DWORD *)this + 130) = 0;
  if (v4 != (char *)&SipRegistrationState::kStateUnknown)
    *(_DWORD *)v4 = 0;
  *((_QWORD *)this + 348) = 0;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 2792, (__int128 *)&__p);
  v8 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v9 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *((_BYTE *)this + 3648) = 0;
  *((_DWORD *)this + 276) = 0;
  *(_OWORD *)((char *)this + 3928) = 0u;
  *((_DWORD *)this + 992) = SipRegistrationMode::kModeNormal;
}

void sub_1BF060508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, SipBackoffTimer *a11, uint64_t a12, SipRegistrationConfig *a13, SipContactParam *a14, void **a15, SipTimerContainer *a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  std::__shared_weak_count *v29;

  SipContactParam::~SipContactParam(a14);
  ims::AccessNetwork::~AccessNetwork((void **)(v27 + 536));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a21);
  SipSessionId::~SipSessionId(a15);
  if (*(char *)(v27 + 391) < 0)
    operator delete(*(void **)(v27 + 368));
  SipTimerContainer::~SipTimerContainer(a16);
  v29 = *(std::__shared_weak_count **)(v27 + 208);
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  *(_QWORD *)(v27 + 152) = &off_1E78D72B8;
  std::__tree<std::shared_ptr<SipRegistrationObserver>>::destroy(*(_QWORD **)(v27 + 168));
  ImsLogContainer::~ImsLogContainer(a17);
  _Unwind_Resume(a1);
}

void SipRegistrationMetrics::~SipRegistrationMetrics(void **this)
{
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  ImsResult::~ImsResult((ImsResult *)(this + 2));
}

void SipSessionId::~SipSessionId(void **this)
{
  *this = off_1E78CCB28;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78CCB28;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

void SipRegistrationClient::initTimers(SipRegistrationClient *this)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  std::string::size_type v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  std::__shared_weak_count *v13;
  std::string::size_type v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::string::size_type v20[2];
  uint64_t v21;
  std::string::size_type v22;
  std::string::size_type v23[2];

  v2 = (char *)this + 3728;
  v3 = (char *)this + 216;
  v4 = (_QWORD *)((char *)this + 200);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v21, (_QWORD *)this + 25);
  v5 = (std::__shared_weak_count *)v22;
  if (v21)
    v6 = v21 + 192;
  else
    v6 = 0;
  v23[0] = v6;
  v23[1] = v22;
  v21 = 0;
  v22 = 0;
  SipSimpleBackoffTimer::initialize((uint64_t)v2, (std::string::size_type)v3, v23, (std::string *)"IPSecFailureRetryTimer", 900, 0);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v9 = (std::__shared_weak_count *)v22;
  if (v22)
  {
    v10 = (unint64_t *)(v22 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (char *)this + 3656;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v21, v4);
  v13 = (std::__shared_weak_count *)v22;
  if (v21)
    v14 = v21 + 192;
  else
    v14 = 0;
  v20[0] = v14;
  v20[1] = v22;
  v21 = 0;
  v22 = 0;
  SipSimpleBackoffTimer::initialize((uint64_t)v12, (std::string::size_type)v3, v20, (std::string *)"TransportRetryTimer", 600, 0);
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v17 = (std::__shared_weak_count *)v22;
  if (v22)
  {
    v18 = (unint64_t *)(v22 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1BF060848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::create(SipRegistrationClient *this@<X0>, SipRegistrationClient **a2@<X8>)
{
  SipUserAgent *v4;

  v4 = this;
  *a2 = 0;
  a2[1] = 0;
  std::allocate_shared[abi:ne180100]<SipRegistrationClient,std::allocator<SipRegistrationClient>,SipUserAgent *&,void>(&v4, a2);
  SipRegistrationClient::initTimers(*a2);
}

void sub_1BF0608B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::~SipRegistrationClient(SipRegistrationClient *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  *(_QWORD *)this = &off_1E78D6AF0;
  *((_QWORD *)this + 1) = &unk_1E78D6C20;
  *((_QWORD *)this + 2) = &unk_1E78D6C48;
  *((_QWORD *)this + 15) = &unk_1E78D6CA8;
  *((_QWORD *)this + 16) = &unk_1E78D6CD8;
  *((_QWORD *)this + 17) = &unk_1E78D6D00;
  *((_QWORD *)this + 18) = &unk_1E78D6D30;
  *((_QWORD *)this + 19) = &unk_1E78D6DD0;
  *((_QWORD *)this + 23) = &unk_1E78D6DF0;
  *((_QWORD *)this + 24) = &unk_1E78D6E10;
  SipRegistrationClient::deinitialize(this);
  v2 = *((_QWORD *)this + 491);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = *((_QWORD *)this + 492);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  v4 = *((_QWORD *)this + 349);
  if (v4)
  {
    v9 = 0;
    v10 = 0;
    std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v4 + 344), &v9);
    v5 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  *((_QWORD *)this + 508) = off_1E78EFD80;
  dispatch_release(*((dispatch_object_t *)this + 512));
  std::__tree<std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>,std::__map_value_compare<ImsNetworkPathDelegate *,std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>,std::less<ImsNetworkPathDelegate *>,true>,std::allocator<std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>>>::destroy((uint64_t)this + 4072, *((_QWORD **)this + 510));
  SipRegistrationDeferralManager::~SipRegistrationDeferralManager((void **)this + 497);
  std::unique_ptr<ImsPowerAssertion>::reset[abi:ne180100]((void ***)this + 495, 0);
  std::unique_ptr<ImsPowerAssertion>::reset[abi:ne180100]((void ***)this + 494, 0);
  if (*((char *)this + 3919) < 0)
    operator delete(*((void **)this + 487));
  ImsResult::~ImsResult((SipRegistrationClient *)((char *)this + 3816));
  SipBackoffTimer::~SipBackoffTimer((SipRegistrationClient *)((char *)this + 3728));
  SipBackoffTimer::~SipBackoffTimer((SipRegistrationClient *)((char *)this + 3656));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 3632);
  SipUri::~SipUri((SipRegistrationClient *)((char *)this + 3216));
  SipUri::~SipUri((SipRegistrationClient *)((char *)this + 2808));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 2792);
  SipRegistrationConfig::~SipRegistrationConfig((void **)this + 139);
  *((_QWORD *)this + 77) = &off_1E78C8C40;
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)this + 1080, *((_QWORD **)this + 136));
  *((_QWORD *)this + 129) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1040, *((_QWORD **)this + 131));
  SipUri::~SipUri((SipRegistrationClient *)((char *)this + 624));
  if (*((char *)this + 583) < 0)
    operator delete(*((void **)this + 70));
  if (*((char *)this + 559) < 0)
    operator delete(*((void **)this + 67));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 504);
  *((_QWORD *)this + 49) = off_1E78CCB28;
  if (*((char *)this + 447) < 0)
    operator delete(*((void **)this + 53));
  if (*((char *)this + 423) < 0)
    operator delete(*((void **)this + 50));
  if (*((char *)this + 391) < 0)
    operator delete(*((void **)this + 46));
  SipTimerContainer::~SipTimerContainer((SipRegistrationClient *)((char *)this + 216));
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  *((_QWORD *)this + 19) = &off_1E78D72B8;
  std::__tree<std::shared_ptr<SipRegistrationObserver>>::destroy(*((_QWORD **)this + 21));
  *((_QWORD *)this + 2) = off_1E78CFE68;
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

{
  SipRegistrationClient::~SipRegistrationClient(this);
  JUMPOUT(0x1C3B87100);
}

_QWORD *SipRegistrationClient::deinitialize(SipRegistrationClient *this)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  int v5;

  SipRegistrationClient::cleanUpRegistrationArtifacts(this);
  SipTimerContainer::cancelAllTimers((SipRegistrationClient *)((char *)this + 216));
  v2 = *((_QWORD *)this + 454);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 280))(v2);
  SipRegistrationDeferralManager::cancel((uint64_t)this + 3976);
  v5 = 0;
  SipRegistrationClient::setRegistrationState((uint64_t)this, &v5, 0);
  SipRegistrationClient::setClientState(this, 1u);
  if ((_UNKNOWN *)((char *)this + 528) != &SipRegistrationState::kStateUnknown)
    *((_DWORD *)this + 132) = 0;
  *((_DWORD *)this + 276) = 0;
  SipRegistrationClient::clearDeferredNotifications(this);
  result = SipRegistrationClient::clearDeferredDrop(this);
  if (*((_BYTE *)this + 2456))
  {
    v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"clearing Call-ID on deinitialize", 32);
    *(_BYTE *)(v4 + 17) = 0;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if (*((char *)this + 391) < 0)
    {
      **((_BYTE **)this + 46) = 0;
      *((_QWORD *)this + 47) = 0;
    }
    else
    {
      *((_BYTE *)this + 368) = 0;
      *((_BYTE *)this + 391) = 0;
    }
  }
  return result;
}

void `non-virtual thunk to'SipRegistrationClient::~SipRegistrationClient(SipRegistrationClient *this)
{
  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 8));
}

{
  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 16));
}

{
  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 120));
}

{
  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 128));
}

{
  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 136));
}

{
  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 144));
}

{
  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 152));
}

{
  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

{
  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 16));
  JUMPOUT(0x1C3B87100);
}

{
  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 120));
  JUMPOUT(0x1C3B87100);
}

{
  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 128));
  JUMPOUT(0x1C3B87100);
}

{
  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 136));
  JUMPOUT(0x1C3B87100);
}

{
  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 144));
  JUMPOUT(0x1C3B87100);
}

{
  SipRegistrationClient::~SipRegistrationClient((SipRegistrationClient *)((char *)this - 152));
  JUMPOUT(0x1C3B87100);
}

void SipRegistrationClient::setClientState(_QWORD *a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  ImsPowerAssertion **v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  int v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char *v18;
  std::string *v19;
  std::string *v20;
  int v21;
  size_t v22;
  std::string *v23;
  void **v24;
  void **v25;
  std::string *v26;
  void **v27;
  void **v28;
  ImsPowerAssertion *v29;
  char v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  unint64_t *p_shared_weak_owners;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  void *__p[2];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _OWORD v59[5];
  void *v60[2];
  __int128 v61;
  _QWORD v62[6];
  std::__shared_weak_count *v63;
  std::string v64;

  v2 = *((_DWORD *)a1 + 130);
  if (v2 == a2)
    return;
  v6 = a1 + 2;
  v5 = a1[2];
  *((_DWORD *)a1 + 130) = a2;
  v7 = (*(uint64_t (**)(_QWORD *))(v5 + 64))(a1 + 2);
  (*(void (**)(_QWORD *, uint64_t))(*v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"state transition [", 18);
  *(_BYTE *)(v7 + 17) = 0;
  LoggableString::LoggableString((std::string *)__p, (const std::string *)&clientStateNames + v2);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 40))(v7, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" --> ", 5);
  *(_BYTE *)(v7 + 17) = 0;
  LoggableString::LoggableString(&v64, (const std::string *)&clientStateNames + a2);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v7 + 40))(v7, &v64);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (SBYTE7(v56) < 0)
    operator delete(__p[0]);
  v8 = *((_DWORD *)a1 + 130);
  if (v8 > 1)
  {
    v10 = (ImsPowerAssertion **)(a1 + 495);
    if (a1[495] || a1[494])
      goto LABEL_51;
    v11 = a1[45];
    v12 = *(std::__shared_weak_count **)(v11 + 16);
    if (v12 && (v13 = std::__shared_weak_count::lock(v12)) != 0)
    {
      v14 = v13;
      v15 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 8) + 2657);
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v14);
      }
      if (!v15)
        goto LABEL_22;
    }
    else if (!MEMORY[0xA61])
    {
LABEL_22:
      v18 = ".ims";
LABEL_25:
      v19 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v64, v18);
      v20 = std::string::insert(v19, 0, "com.apple.ipTelephony.registration", 0x22uLL);
      *(_OWORD *)__p = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      *(_QWORD *)&v56 = *((_QWORD *)&v20->__r_.__value_.__l + 2);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      v21 = SBYTE7(v56);
      if ((SBYTE7(v56) & 0x80u) == 0)
        v22 = BYTE7(v56);
      else
        v22 = (size_t)__p[1];
      memset(&v64, 0, sizeof(v64));
      v23 = &v64;
      std::string::basic_string[abi:ne180100]((uint64_t)&v64, v22 + 5);
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v23 = (std::string *)v64.__r_.__value_.__r.__words[0];
      if (v22)
      {
        if (v21 >= 0)
          v24 = __p;
        else
          v24 = (void **)__p[0];
        memmove(v23, v24, v22);
      }
      strcpy((char *)v23 + v22, ".wifi");
      v25 = (void **)operator new();
      ImsPowerAssertion::ImsPowerAssertion((uint64_t)v25, &v64);
      std::unique_ptr<ImsPowerAssertion>::reset[abi:ne180100]((void ***)a1 + 494, v25);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      memset(&v64, 0, sizeof(v64));
      std::string::basic_string[abi:ne180100]((uint64_t)&v64, v22 + 5);
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &v64;
      else
        v26 = (std::string *)v64.__r_.__value_.__r.__words[0];
      if (v22)
      {
        if (v21 >= 0)
          v27 = __p;
        else
          v27 = (void **)__p[0];
        memmove(v26, v27, v22);
      }
      strcpy((char *)v26 + v22, ".cell");
      v28 = (void **)operator new();
      ImsPowerAssertion::ImsPowerAssertion((uint64_t)v28, &v64);
      std::unique_ptr<ImsPowerAssertion>::reset[abi:ne180100]((void ***)a1 + 495, v28);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if (v21 < 0)
        operator delete(__p[0]);
LABEL_51:
      if ((*(unsigned int (**)(_QWORD *))(*a1 + 64))(a1))
      {
        v29 = (ImsPowerAssertion *)a1[494];
        if (*((_DWORD *)v29 + 6))
          goto LABEL_57;
        v30 = 0;
      }
      else
      {
        v29 = *v10;
        if (*((_DWORD *)*v10 + 6))
          goto LABEL_57;
        v30 = 1;
      }
      ImsPowerAssertion::initialize(v29, 300.0, v30, (uint64_t)__p);
      ImsResult::~ImsResult((ImsResult *)__p);
      goto LABEL_57;
    }
    v18 = ".rcs";
    goto LABEL_25;
  }
  if (v2 - 2 < 3)
    goto LABEL_58;
  v9 = a1[494];
  if (v9 && *(_DWORD *)(v9 + 24) || (v9 = a1[495]) != 0 && *(_DWORD *)(v9 + 24))
    ImsPowerAssertion::deinitialize(v9);
LABEL_57:
  v8 = *((_DWORD *)a1 + 130);
LABEL_58:
  if (v8 != 1)
    return;
  SipRegistrationClient::cleanUpRegistrationArtifacts((SipRegistrationClient *)a1);
  if (!a1[497])
  {
    if (v2 != 10 || !a1[57])
      return;
    *(_OWORD *)v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    memset(v59, 0, sizeof(v59));
    v56 = 0u;
    v57 = 0u;
    *(_OWORD *)__p = 0u;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v53, a1 + 25);
    SipRegistrationErrorNotification::SipRegistrationErrorNotification((uint64_t)__p, &v53, -1, (uint64_t)(a1 + 475));
    v43 = v54;
    if (v54)
    {
      v44 = (unint64_t *)&v54->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = a1[57];
    v47 = a1[45];
    v48 = *(std::__shared_weak_count **)(v47 + 16);
    if (v48)
    {
      v49 = std::__shared_weak_count::lock(v48);
      if (v49)
      {
        v50 = *(_QWORD *)(v47 + 8);
        goto LABEL_89;
      }
    }
    else
    {
      v49 = 0;
    }
    v50 = 0;
LABEL_89:
    if (*(char *)(v50 + 4159) < 0)
      std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)(v50 + 4136), *(_QWORD *)(v50 + 4144));
    else
      v64 = *(std::string *)(v50 + 4136);
    (*(void (**)(uint64_t, std::string *, void **, _QWORD))(*(_QWORD *)v46 + 40))(v46, &v64, __p, 0);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    if (v49)
    {
      v51 = (unint64_t *)&v49->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    __p[0] = &off_1E78EFFC8;
    if (SBYTE7(v61) < 0)
      operator delete(v60[0]);
    ImsResult::~ImsResult((ImsResult *)v59);
    __p[0] = &unk_1E78F0000;
    v42 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
    if (*((_QWORD *)&v57 + 1))
      goto LABEL_76;
    return;
  }
  v32 = a1[25];
  v31 = (std::__shared_weak_count *)a1[26];
  if (v31)
  {
    p_shared_weak_owners = (unint64_t *)&v31->__shared_weak_owners_;
    do
      v34 = __ldxr(p_shared_weak_owners);
    while (__stxr(v34 + 1, p_shared_weak_owners));
  }
  v35 = a1[45];
  v36 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v35 + 16));
  v64.__r_.__value_.__l.__size_ = (std::string::size_type)v36;
  v64.__r_.__value_.__r.__words[0] = *(_QWORD *)(v35 + 8);
  v37 = *(_QWORD *)(v64.__r_.__value_.__r.__words[0] + 136);
  LoggableString::LoggableString((LoggableString *)__p, "deferredRegistrationAction");
  v62[0] = MEMORY[0x1E0C809B0];
  v62[1] = 1174405120;
  v62[2] = ___ZN21SipRegistrationClient14setClientStateENS_11ClientStateE_block_invoke;
  v62[3] = &__block_descriptor_tmp_30;
  v62[4] = a1;
  v62[5] = v32;
  v63 = v31;
  if (v31)
  {
    v38 = (unint64_t *)&v31->__shared_weak_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  (*(void (**)(uint64_t, void **, _QWORD *))(*(_QWORD *)v37 + 208))(v37, __p, v62);
  if (SBYTE7(v56) < 0)
    operator delete(__p[0]);
  v40 = (unint64_t *)&v36->__shared_owners_;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  if (v63)
    std::__shared_weak_count::__release_weak(v63);
  if (v31)
  {
    v42 = v31;
LABEL_76:
    std::__shared_weak_count::__release_weak(v42);
  }
}

void sub_1BF0614C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  SipRegistrationErrorNotification::~SipRegistrationErrorNotification(&__p);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::cleanUpRegistrationArtifacts(SipRegistrationClient *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v2 = *((_QWORD *)this + 63);
  if (v2)
  {
    v3 = (_QWORD *)((char *)this + 504);
    if (*(SipRegistrationClient **)(v2 + 480) == (SipRegistrationClient *)((char *)this + 128))
      *(_QWORD *)(v2 + 480) = 0;
    std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100](v3);
  }
  v4 = *((_QWORD *)this + 348);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 348) = 0;
  v5 = *((_QWORD *)this + 349);
  if (v5)
  {
    v6 = (char *)this + 2792;
    v14 = 0;
    v15 = 0;
    std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v5 + 344), &v14);
    v7 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v13 = 0uLL;
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)v6, &v13);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void ___ZN21SipRegistrationClient14setClientStateENS_11ClientStateE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  SipRegistrationClient *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (SipRegistrationClient *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
        SipRegistrationClient::performDeferredAction(v3);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF06177C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::performDeferredAction(SipRegistrationClient *this)
{
  SipRegistrationClient *v1;
  _QWORD *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  std::string v7;
  std::string __p;

  if (*((_QWORD *)this + 497))
  {
    v1 = this;
    v2 = (_QWORD *)((char *)this + 3976);
    v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)this + 28, "RegHysteresisTimer");
    v4 = *((_QWORD *)v1 + 2);
    v1 = (SipRegistrationClient *)((char *)v1 + 16);
    v5 = (*(uint64_t (**)(SipRegistrationClient *))(v4 + 64))(v1);
    (*(void (**)(SipRegistrationClient *, uint64_t))(*(_QWORD *)v1 + 16))(v1, v5);
    v6 = *(_QWORD **)(v5 + 8);
    if (v3)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"delaying deferred action during reg hysteresis: ", 48);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v2 + 24))(&v7);
      LoggableString::LoggableString(&__p, &v7);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 40))(v5, &__p);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v7.__r_.__value_.__l.__data_);
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"performing ", 11);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v2 + 24))(&v7);
      LoggableString::LoggableString(&__p, &v7);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 40))(v5, &__p);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v7.__r_.__value_.__l.__data_);
      SipRegistrationDeferralManager::perform(v2, 0);
    }
  }
}

void sub_1BF061924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrI21SipRegistrationClientEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrI21SipRegistrationClientEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void SipRegistrationErrorNotification::~SipRegistrationErrorNotification(void **this)
{
  std::__shared_weak_count *v2;

  *this = &off_1E78EFFC8;
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  ImsResult::~ImsResult((ImsResult *)(this + 8));
  *this = &unk_1E78F0000;
  v2 = (std::__shared_weak_count *)this[5];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

{
  std::__shared_weak_count *v2;

  *this = &off_1E78EFFC8;
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  ImsResult::~ImsResult((ImsResult *)(this + 8));
  *this = &unk_1E78F0000;
  v2 = (std::__shared_weak_count *)this[5];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x1C3B87100);
}

void SipRegistrationClient::setRegistrationState(uint64_t a1, int *a2, int a3)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  char *v12;
  unsigned int v13;
  char *v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  std::string::size_type v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string __p;

  v6 = *a2;
  v7 = a1 + 16;
  v8 = *(_DWORD *)(a1 + 532);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v9);
  v10 = *(_QWORD **)(v9 + 8);
  if (v6 != v8)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"IMS registration state changed from ", 36);
    *(_BYTE *)(v9 + 17) = 0;
    v13 = *(_DWORD *)(a1 + 532) - 1;
    if (v13 > 2)
      v14 = "Deregistered (Idle)";
    else
      v14 = off_1E78D7958[v13];
    std::string::basic_string[abi:ne180100]<0>(&v29, v14);
    LoggableString::LoggableString(&__p, &v29);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v9 + 40))(v9, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" to ", 4);
    *(_BYTE *)(v9 + 17) = 0;
    v15 = *a2 - 1;
    if (v15 > 2)
      v16 = "Deregistered (Idle)";
    else
      v16 = off_1E78D7958[v15];
    std::string::basic_string[abi:ne180100]<0>(&v27, v16);
    LoggableString::LoggableString(&v28, &v27);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v9 + 40))(v9, &v28);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 456))
      goto LABEL_45;
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(v7);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(v7, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Will", 4);
    *(_BYTE *)(v17 + 17) = 0;
    if (a3)
      v18 = " not";
    else
      v18 = "";
    if (a3)
      v19 = 4;
    else
      v19 = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)v18, v19);
    *(_BYTE *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)" notify baseband during handleRegistrationStateChanged", 54);
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    v20 = *(_QWORD *)(a1 + 456);
    v21 = *(_QWORD *)(a1 + 360);
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = 0uLL;
    v22 = *(std::__shared_weak_count **)(v21 + 16);
    if (v22)
    {
      v23 = std::__shared_weak_count::lock(v22);
      v29.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
      if (v23)
      {
        v24 = *(_QWORD *)(v21 + 8);
        v29.__r_.__value_.__r.__words[0] = v24;
LABEL_35:
        if (*(char *)(v24 + 4159) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v24 + 4136), *(_QWORD *)(v24 + 4144));
        else
          __p = *(std::string *)(v24 + 4136);
        (*(void (**)(uint64_t, std::string *, int *, _QWORD))(*(_QWORD *)v20 + 64))(v20, &__p, a2, a3 ^ 1u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
LABEL_45:
        *(_DWORD *)(a1 + 532) = *a2;
        return;
      }
    }
    else
    {
      v23 = 0;
    }
    v24 = 0;
    goto LABEL_35;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"IMS registration state not changed: ", 36);
  *(_BYTE *)(v9 + 17) = 0;
  v11 = *(_DWORD *)(a1 + 532) - 1;
  if (v11 > 2)
    v12 = "Deregistered (Idle)";
  else
    v12 = off_1E78D7958[v11];
  std::string::basic_string[abi:ne180100]<0>(&v29, v12);
  LoggableString::LoggableString(&__p, &v29);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v9 + 40))(v9, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_1BF061DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

BOOL SipRegistrationClient::isWifiAccessNetwork(SipRegistrationClient *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  _BOOL8 isWifi;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v1 = *((_QWORD *)this + 45);
  v2 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v2)
    return ims::AccessNetwork::isWifi((ims::AccessNetwork *)0xC40);
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return ims::AccessNetwork::isWifi((ims::AccessNetwork *)0xC40);
  v4 = v3;
  isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(*(_QWORD *)(v1 + 8) + 3136));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return isWifi;
}

BOOL `non-virtual thunk to'SipRegistrationClient::isWifiAccessNetwork(SipRegistrationClient *this)
{
  return SipRegistrationClient::isWifiAccessNetwork((SipRegistrationClient *)((char *)this - 144));
}

void SipRegistrationClient::resetCallIdAndCseq(SipRegistrationClient *this, int a2)
{
  uint64_t v3;
  std::string *v4;
  BOOL v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  std::string v12;
  void *__p;
  char v14;

  if (*((char *)this + 391) < 0)
    v3 = *((_QWORD *)this + 47);
  else
    v3 = *((unsigned __int8 *)this + 391);
  v4 = (std::string *)((char *)this + 368);
  if (v3)
    v5 = a2 == 0;
  else
    v5 = 0;
  if (v5)
  {
    v10 = (char *)this + 16;
    v11 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v10 + 16))((char *)this + 16, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"keeping Call-ID ", 16);
    *(_BYTE *)(v11 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&v12, (const std::string *)((char *)this + 368));
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 56))(v11, &v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" and CSeq ", 10);
    *(_BYTE *)(v11 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (v14 < 0)
      operator delete(__p);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    ImsRandomStringGenerator::randomString((ImsRandomStringGenerator *)(*((_QWORD *)this + 45) + 592), 24, &v12);
    if (*((char *)this + 391) < 0)
      operator delete(v4->__r_.__value_.__l.__data_);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 48) = *((_QWORD *)&v12.__r_.__value_.__l + 2);
    SipSessionId::generateFromCallId((_QWORD *)this + 49, (const void **)this + 46);
    v7 = *((_QWORD *)this + 2);
    v6 = (_DWORD *)((char *)this + 16);
    v6[108] = 1;
    v8 = (*(uint64_t (**)(_DWORD *))(v7 + 64))(v6);
    (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v6 + 16))(v6, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"initialized registration Call-ID to ", 36);
    *(_BYTE *)(v8 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&v12, v4);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v8 + 56))(v8, &v12);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v14 < 0)
      operator delete(__p);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    v9 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 64))(v6);
    (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v6 + 16))(v6, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"reset registration CSeq to 1", 28);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
  }
}

void sub_1BF062140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  ims::AccessNetwork::~AccessNetwork(&a9);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::initialize(SipRegistrationClient *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (char *)this + 16;
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"SipRegistrationClient::initialize()", 35);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  SipRegistrationClient::resetCallIdAndCseq(this, 0);
  *((_BYTE *)this + 3889) = (*(uint64_t (**)(SipRegistrationClient *))(*(_QWORD *)this + 248))(this);
  v4 = *((_QWORD *)this + 454);
  if (v4)
    *((_DWORD *)this + 992) = *(_DWORD *)(v4 + 424);
  SipRegistrationClient::setClientState(this, 1u);
}

uint64_t SipRegistrationClient::setPolicy(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  char *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  const char *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  const void *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::string::size_type v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  const void *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  std::string::size_type v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  std::string::size_type v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  const char *v62;
  unsigned __int8 *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  std::string::size_type v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  const char *v79;
  unsigned __int8 *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t *v101;
  std::__shared_weak_count *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t *v110;
  std::__shared_weak_count *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t *v119;
  char *v120;
  unsigned __int8 *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count *v133;
  std::string::size_type v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  const char *v154;
  unsigned __int8 *v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  uint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  std::__shared_weak_count *v165;
  std::string::size_type v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  char *v171;
  std::__shared_weak_count *v172;
  uint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  uint64_t *v178;
  std::__shared_weak_count *v179;
  std::__shared_weak_count *v180;
  std::string::size_type v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  std::__shared_weak_count *v188;
  int v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  uint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  std::__shared_weak_count *v200;
  std::string::size_type v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  _QWORD *v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count *v212;
  std::string::size_type v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t *v226;
  std::__shared_weak_count *v227;
  unint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t *v235;
  std::__shared_weak_count *v236;
  unint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t *v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  std::__shared_weak_count *v249;
  BambiPrefsManager *v250;
  uint64_t **v251;
  uint64_t *v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  std::__shared_weak_count *v257;
  unint64_t v258;
  unint64_t *v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t *v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t *v265;
  std::string __p;
  std::__shared_weak_count *v267;
  std::__shared_weak_count *v268;
  std::string *p_p;

  v4 = a1[454];
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(v4 + 376);
    *(_QWORD *)(v4 + 368) = 0;
    *(_QWORD *)(v4 + 376) = 0;
    if (v5)
      std::__shared_weak_count::__release_weak(v5);
    v6 = (std::__shared_weak_count *)a1[455];
    *((_OWORD *)a1 + 227) = 0u;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  v9 = a2[23];
  v10 = *((_QWORD *)a2 + 1);
  if ((v9 & 0x80u) == 0)
    v11 = a2[23];
  else
    v11 = *((_QWORD *)a2 + 1);
  switch(v11)
  {
    case 3:
      if ((v9 & 0x80) != 0)
      {
        v18 = *(const void **)a2;
        if (memcmp(v18, &ATTRegistrationPolicy::kPolicyName, v10))
          goto LABEL_189;
      }
      else if (a2[23])
      {
        v12 = &ATTRegistrationPolicy::kPolicyName;
        v13 = a2;
        v14 = a2[23];
        do
        {
          if (*v13 != *v12)
            goto LABEL_183;
          ++v13;
          ++v12;
          --v14;
        }
        while (v14);
      }
      v20 = a1[25];
      v19 = (std::__shared_weak_count *)a1[26];
      if (v19)
      {
        p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
        do
          v22 = __ldxr(p_shared_weak_owners);
        while (__stxr(v22 + 1, p_shared_weak_owners));
      }
      v23 = (std::__shared_weak_count *)operator new(0x950uLL);
      v23->__shared_owners_ = 0;
      v24 = (unint64_t *)&v23->__shared_owners_;
      v23->__shared_weak_owners_ = 0;
      v23->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D7370;
      v25 = (uint64_t)&v23[1];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      if (!v19)
        goto LABEL_119;
      v26 = std::__shared_weak_count::lock(v19);
      if (v26)
      {
        v27 = v26;
        v28 = v20 + 144;
        if (!v20)
          v28 = 0;
        v29 = (unint64_t *)&v26->__shared_weak_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
        __p.__r_.__value_.__r.__words[0] = v28;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
        std::__shared_weak_count::__release_weak(v19);
        v31 = (unint64_t *)&v27->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (v32)
        {
LABEL_119:
          ATTRegistrationPolicy::ATTRegistrationPolicy(v25, (std::__shared_weak_count **)&__p);
          if (__p.__r_.__value_.__l.__size_)
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          v93 = (std::__shared_weak_count *)v23[9].__vftable;
          if (v93)
          {
            if (v93->__shared_owners_ != -1)
              goto LABEL_134;
            do
              v94 = __ldxr(v24);
            while (__stxr(v94 + 1, v24));
            v95 = (unint64_t *)&v23->__shared_weak_owners_;
            do
              v96 = __ldxr(v95);
            while (__stxr(v96 + 1, v95));
            v23[8].__shared_weak_owners_ = v25;
            v23[9].__vftable = (std::__shared_weak_count_vtbl *)v23;
            std::__shared_weak_count::__release_weak(v93);
          }
          else
          {
            do
              v97 = __ldxr(v24);
            while (__stxr(v97 + 1, v24));
            v98 = (unint64_t *)&v23->__shared_weak_owners_;
            do
              v99 = __ldxr(v98);
            while (__stxr(v99 + 1, v98));
            v23[8].__shared_weak_owners_ = v25;
            v23[9].__vftable = (std::__shared_weak_count_vtbl *)v23;
          }
          do
            v100 = __ldaxr(v24);
          while (__stlxr(v100 - 1, v24));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
LABEL_134:
          a1[454] = v25;
          v90 = (std::__shared_weak_count *)a1[455];
          a1[455] = v23;
          if (v90)
          {
            v101 = (unint64_t *)&v90->__shared_owners_;
            do
              v92 = __ldaxr(v101);
            while (__stlxr(v92 - 1, v101));
            goto LABEL_365;
          }
          goto LABEL_368;
        }
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        v19 = v27;
      }
      else
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      }
      std::__shared_weak_count::__release_weak(v19);
      goto LABEL_119;
    case 4:
      if ((v9 & 0x80) != 0)
      {
        v33 = *(const void **)a2;
        if (memcmp(v33, "KDDI", v10))
          goto LABEL_40;
      }
      else if (a2[23])
      {
        v15 = "KDDI";
        v16 = a2;
        v17 = a2[23];
        do
        {
          if (*v16 != *(unsigned __int8 *)v15)
          {
            switch(v11)
            {
              case 3:
                goto LABEL_183;
              case 4:
                goto LABEL_91;
              case 7:
                goto LABEL_68;
              case 8:
                goto LABEL_234;
              default:
                goto LABEL_272;
            }
          }
          ++v16;
          ++v15;
          --v17;
        }
        while (v17);
      }
      v49 = a1[25];
      v48 = (std::__shared_weak_count *)a1[26];
      if (v48)
      {
        v50 = (unint64_t *)&v48->__shared_weak_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
      v52 = (std::__shared_weak_count *)operator new(0x9A8uLL);
      v52->__shared_owners_ = 0;
      v53 = (unint64_t *)&v52->__shared_owners_;
      v52->__shared_weak_owners_ = 0;
      v52->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D73C0;
      v54 = (uint64_t)&v52[1];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      if (!v48)
        goto LABEL_140;
      v55 = std::__shared_weak_count::lock(v48);
      if (!v55)
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        goto LABEL_139;
      }
      v56 = v55;
      v57 = v49 + 144;
      if (!v49)
        v57 = 0;
      v58 = (unint64_t *)&v55->__shared_weak_owners_;
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
      __p.__r_.__value_.__r.__words[0] = v57;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v55;
      std::__shared_weak_count::__release_weak(v48);
      v60 = (unint64_t *)&v56->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        v48 = v56;
LABEL_139:
        std::__shared_weak_count::__release_weak(v48);
      }
LABEL_140:
      KDDIRegistrationPolicy::KDDIRegistrationPolicy(v54, (std::__shared_weak_count **)&__p);
      if (__p.__r_.__value_.__l.__size_)
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      v102 = (std::__shared_weak_count *)v52[9].__vftable;
      if (v102)
      {
        if (v102->__shared_owners_ != -1)
          goto LABEL_155;
        do
          v103 = __ldxr(v53);
        while (__stxr(v103 + 1, v53));
        v104 = (unint64_t *)&v52->__shared_weak_owners_;
        do
          v105 = __ldxr(v104);
        while (__stxr(v105 + 1, v104));
        v52[8].__shared_weak_owners_ = v54;
        v52[9].__vftable = (std::__shared_weak_count_vtbl *)v52;
        std::__shared_weak_count::__release_weak(v102);
      }
      else
      {
        do
          v106 = __ldxr(v53);
        while (__stxr(v106 + 1, v53));
        v107 = (unint64_t *)&v52->__shared_weak_owners_;
        do
          v108 = __ldxr(v107);
        while (__stxr(v108 + 1, v107));
        v52[8].__shared_weak_owners_ = v54;
        v52[9].__vftable = (std::__shared_weak_count_vtbl *)v52;
      }
      do
        v109 = __ldaxr(v53);
      while (__stlxr(v109 - 1, v53));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
LABEL_155:
      a1[454] = v54;
      v90 = (std::__shared_weak_count *)a1[455];
      a1[455] = v52;
      if (v90)
      {
        v110 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldaxr(v110);
        while (__stlxr(v92 - 1, v110));
        goto LABEL_365;
      }
      goto LABEL_368;
    case 7:
LABEL_68:
      if ((v9 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a2, "RFC5626", *((_QWORD *)a2 + 1)))
          goto LABEL_272;
      }
      else if (a2[23])
      {
        v62 = "RFC5626";
        v63 = a2;
        v64 = a2[23];
        while (*v63 == *(unsigned __int8 *)v62)
        {
          ++v63;
          ++v62;
          if (!--v64)
            goto LABEL_75;
        }
        if (v11 == 3)
        {
LABEL_183:
          if ((v9 & 0x80) != 0)
          {
            v18 = *(const void **)a2;
LABEL_189:
            if (memcmp(v18, &TMORegistrationPolicy::kPolicyName, v10))
              goto LABEL_190;
          }
          else
          {
            v120 = &TMORegistrationPolicy::kPolicyName;
            v121 = a2;
            v122 = a2[23];
            do
            {
              if (*v121 != *v120)
              {
                if (v11 == 3)
                  goto LABEL_255;
                if (v11 != 8)
                  goto LABEL_272;
                goto LABEL_234;
              }
              ++v121;
              ++v120;
              --v122;
            }
            while (v122);
          }
          v124 = a1[25];
          v123 = (std::__shared_weak_count *)a1[26];
          if (v123)
          {
            v125 = (unint64_t *)&v123->__shared_weak_owners_;
            do
              v126 = __ldxr(v125);
            while (__stxr(v126 + 1, v125));
          }
          v127 = a1[45];
          v268 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v127 + 16));
          v267 = *(std::__shared_weak_count **)(v127 + 8);
          v128 = BYTE4(v267[153].__shared_owners_);
          v129 = (std::__shared_weak_count *)operator new(0x9B8uLL);
          v129->__shared_owners_ = 0;
          v130 = (unint64_t *)&v129->__shared_owners_;
          v129->__shared_weak_owners_ = 0;
          v129->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D74B0;
          v131 = (uint64_t)&v129[1];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
          if (v123)
          {
            v132 = std::__shared_weak_count::lock(v123);
            if (!v132)
            {
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
              goto LABEL_206;
            }
            v133 = v132;
            v134 = v124 + 144;
            if (!v124)
              v134 = 0;
            v135 = (unint64_t *)&v132->__shared_weak_owners_;
            do
              v136 = __ldxr(v135);
            while (__stxr(v136 + 1, v135));
            __p.__r_.__value_.__r.__words[0] = v134;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v132;
            std::__shared_weak_count::__release_weak(v123);
            v137 = (unint64_t *)&v133->__shared_owners_;
            do
              v138 = __ldaxr(v137);
            while (__stlxr(v138 - 1, v137));
            if (!v138)
            {
              ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
              v123 = v133;
LABEL_206:
              std::__shared_weak_count::__release_weak(v123);
            }
          }
          TMORegistrationPolicy::TMORegistrationPolicy(v131, (std::__shared_weak_count **)&__p, v128 == 0);
          if (__p.__r_.__value_.__l.__size_)
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          v139 = (std::__shared_weak_count *)v129[9].__vftable;
          if (v139)
          {
            if (v139->__shared_owners_ != -1)
              goto LABEL_222;
            do
              v140 = __ldxr(v130);
            while (__stxr(v140 + 1, v130));
            v141 = (unint64_t *)&v129->__shared_weak_owners_;
            do
              v142 = __ldxr(v141);
            while (__stxr(v142 + 1, v141));
            v129[8].__shared_weak_owners_ = v131;
            v129[9].__vftable = (std::__shared_weak_count_vtbl *)v129;
            std::__shared_weak_count::__release_weak(v139);
          }
          else
          {
            do
              v143 = __ldxr(v130);
            while (__stxr(v143 + 1, v130));
            v144 = (unint64_t *)&v129->__shared_weak_owners_;
            do
              v145 = __ldxr(v144);
            while (__stxr(v145 + 1, v144));
            v129[8].__shared_weak_owners_ = v131;
            v129[9].__vftable = (std::__shared_weak_count_vtbl *)v129;
          }
          do
            v146 = __ldaxr(v130);
          while (__stlxr(v146 - 1, v130));
          if (!v146)
          {
            ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
            std::__shared_weak_count::__release_weak(v129);
          }
LABEL_222:
          a1[454] = v131;
          v147 = (std::__shared_weak_count *)a1[455];
          a1[455] = v129;
          if (v147)
          {
            v148 = (unint64_t *)&v147->__shared_owners_;
            do
              v149 = __ldaxr(v148);
            while (__stlxr(v149 - 1, v148));
            if (!v149)
            {
              ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
              std::__shared_weak_count::__release_weak(v147);
            }
          }
          v150 = v268;
          if (v268)
          {
            v151 = (unint64_t *)&v268->__shared_owners_;
            do
              v152 = __ldaxr(v151);
            while (__stlxr(v152 - 1, v151));
            if (!v152)
            {
              ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
              v153 = v150;
              goto LABEL_367;
            }
          }
          goto LABEL_368;
        }
        if (v11 == 8)
          goto LABEL_234;
        if (v11 != 4)
          goto LABEL_272;
LABEL_91:
        if ((v9 & 0x80) == 0)
        {
          v79 = "TTAK";
          v80 = a2;
          v81 = a2[23];
          while (*v80 == *(unsigned __int8 *)v79)
          {
            ++v80;
            ++v79;
            if (!--v81)
              goto LABEL_41;
          }
          if (v11 == 8)
            goto LABEL_234;
          if (v11 != 3)
            goto LABEL_272;
          goto LABEL_183;
        }
        v33 = *(const void **)a2;
LABEL_40:
        if (memcmp(v33, "TTAK", v10))
          goto LABEL_272;
LABEL_41:
        v35 = a1[25];
        v34 = (std::__shared_weak_count *)a1[26];
        if (v34)
        {
          v36 = (unint64_t *)&v34->__shared_weak_owners_;
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        v38 = (std::__shared_weak_count *)operator new(0x950uLL);
        v38->__shared_owners_ = 0;
        v39 = (unint64_t *)&v38->__shared_owners_;
        v38->__shared_weak_owners_ = 0;
        v38->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D7460;
        v40 = (uint64_t)&v38[1];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        if (v34)
        {
          v41 = std::__shared_weak_count::lock(v34);
          if (!v41)
          {
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
            goto LABEL_161;
          }
          v42 = v41;
          v43 = v35 + 144;
          if (!v35)
            v43 = 0;
          v44 = (unint64_t *)&v41->__shared_weak_owners_;
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
          __p.__r_.__value_.__r.__words[0] = v43;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v41;
          std::__shared_weak_count::__release_weak(v34);
          v46 = (unint64_t *)&v42->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            v34 = v42;
LABEL_161:
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        TTAKRegistrationPolicy::TTAKRegistrationPolicy(v40, (std::__shared_weak_count **)&__p);
        if (__p.__r_.__value_.__l.__size_)
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        v111 = (std::__shared_weak_count *)v38[9].__vftable;
        if (v111)
        {
          if (v111->__shared_owners_ != -1)
            goto LABEL_177;
          do
            v112 = __ldxr(v39);
          while (__stxr(v112 + 1, v39));
          v113 = (unint64_t *)&v38->__shared_weak_owners_;
          do
            v114 = __ldxr(v113);
          while (__stxr(v114 + 1, v113));
          v38[8].__shared_weak_owners_ = v40;
          v38[9].__vftable = (std::__shared_weak_count_vtbl *)v38;
          std::__shared_weak_count::__release_weak(v111);
        }
        else
        {
          do
            v115 = __ldxr(v39);
          while (__stxr(v115 + 1, v39));
          v116 = (unint64_t *)&v38->__shared_weak_owners_;
          do
            v117 = __ldxr(v116);
          while (__stxr(v117 + 1, v116));
          v38[8].__shared_weak_owners_ = v40;
          v38[9].__vftable = (std::__shared_weak_count_vtbl *)v38;
        }
        do
          v118 = __ldaxr(v39);
        while (__stlxr(v118 - 1, v39));
        if (!v118)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
LABEL_177:
        a1[454] = v40;
        v90 = (std::__shared_weak_count *)a1[455];
        a1[455] = v38;
        if (v90)
        {
          v119 = (unint64_t *)&v90->__shared_owners_;
          do
            v92 = __ldaxr(v119);
          while (__stlxr(v92 - 1, v119));
          goto LABEL_365;
        }
        goto LABEL_368;
      }
LABEL_75:
      v66 = a1[25];
      v65 = (std::__shared_weak_count *)a1[26];
      if (v65)
      {
        v67 = (unint64_t *)&v65->__shared_weak_owners_;
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      v69 = (std::__shared_weak_count *)operator new(0x950uLL);
      v69->__shared_owners_ = 0;
      v70 = (unint64_t *)&v69->__shared_owners_;
      v69->__shared_weak_owners_ = 0;
      v69->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D7410;
      v71 = (uint64_t)&v69[1];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      if (!v65)
        goto LABEL_98;
      v72 = std::__shared_weak_count::lock(v65);
      if (!v72)
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        goto LABEL_97;
      }
      v73 = v72;
      v74 = v66 + 144;
      if (!v66)
        v74 = 0;
      v75 = (unint64_t *)&v72->__shared_weak_owners_;
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
      __p.__r_.__value_.__r.__words[0] = v74;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v72;
      std::__shared_weak_count::__release_weak(v65);
      v77 = (unint64_t *)&v73->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        v65 = v73;
LABEL_97:
        std::__shared_weak_count::__release_weak(v65);
      }
LABEL_98:
      Rfc5626RegistrationPolicy::Rfc5626RegistrationPolicy(v71, (std::__shared_weak_count **)&__p);
      if (__p.__r_.__value_.__l.__size_)
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      v82 = (std::__shared_weak_count *)v69[9].__vftable;
      if (v82)
      {
        if (v82->__shared_owners_ != -1)
          goto LABEL_113;
        do
          v83 = __ldxr(v70);
        while (__stxr(v83 + 1, v70));
        v84 = (unint64_t *)&v69->__shared_weak_owners_;
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
        v69[8].__shared_weak_owners_ = v71;
        v69[9].__vftable = (std::__shared_weak_count_vtbl *)v69;
        std::__shared_weak_count::__release_weak(v82);
      }
      else
      {
        do
          v86 = __ldxr(v70);
        while (__stxr(v86 + 1, v70));
        v87 = (unint64_t *)&v69->__shared_weak_owners_;
        do
          v88 = __ldxr(v87);
        while (__stxr(v88 + 1, v87));
        v69[8].__shared_weak_owners_ = v71;
        v69[9].__vftable = (std::__shared_weak_count_vtbl *)v69;
      }
      do
        v89 = __ldaxr(v70);
      while (__stlxr(v89 - 1, v70));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
LABEL_113:
      a1[454] = v71;
      v90 = (std::__shared_weak_count *)a1[455];
      a1[455] = v69;
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        goto LABEL_365;
      }
      goto LABEL_368;
    case 8:
LABEL_234:
      if ((v9 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a2, "Softbank", *((_QWORD *)a2 + 1)))
          goto LABEL_272;
      }
      else if (a2[23])
      {
        v154 = "Softbank";
        v155 = a2;
        v156 = a2[23];
        while (*v155 == *(unsigned __int8 *)v154)
        {
          ++v155;
          ++v154;
          if (!--v156)
            goto LABEL_241;
        }
        if (v11 != 3)
          goto LABEL_272;
LABEL_255:
        if ((v9 & 0x80) != 0)
        {
          v18 = *(const void **)a2;
LABEL_190:
          if (memcmp(v18, &VZWRegistrationPolicy::kPolicyName, v10))
            goto LABEL_272;
        }
        else
        {
          v171 = &VZWRegistrationPolicy::kPolicyName;
          do
          {
            if (*a2 != *v171)
              goto LABEL_272;
            ++a2;
            ++v171;
            --v9;
          }
          while (v9);
        }
        v173 = a1[25];
        v172 = (std::__shared_weak_count *)a1[26];
        if (v172)
        {
          v174 = (unint64_t *)&v172->__shared_weak_owners_;
          do
            v175 = __ldxr(v174);
          while (__stxr(v175 + 1, v174));
        }
        v176 = (std::__shared_weak_count *)operator new(0x960uLL);
        v176->__shared_owners_ = 0;
        v177 = (unint64_t *)&v176->__shared_owners_;
        v176->__shared_weak_owners_ = 0;
        v176->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D7550;
        v178 = (uint64_t *)&v176[1];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        if (v172)
        {
          v179 = std::__shared_weak_count::lock(v172);
          if (!v179)
          {
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
            goto LABEL_385;
          }
          v180 = v179;
          v181 = v173 + 144;
          if (!v173)
            v181 = 0;
          v182 = (unint64_t *)&v179->__shared_weak_owners_;
          do
            v183 = __ldxr(v182);
          while (__stxr(v183 + 1, v182));
          __p.__r_.__value_.__r.__words[0] = v181;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v179;
          std::__shared_weak_count::__release_weak(v172);
          v184 = (unint64_t *)&v180->__shared_owners_;
          do
            v185 = __ldaxr(v184);
          while (__stlxr(v185 - 1, v184));
          if (!v185)
          {
            ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
            v172 = v180;
LABEL_385:
            std::__shared_weak_count::__release_weak(v172);
          }
        }
        VZWRegistrationPolicy::VZWRegistrationPolicy(v178, (std::__shared_weak_count **)&__p);
        if (__p.__r_.__value_.__l.__size_)
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        v257 = (std::__shared_weak_count *)v176[9].__vftable;
        if (v257)
        {
          if (v257->__shared_owners_ != -1)
            goto LABEL_401;
          do
            v258 = __ldxr(v177);
          while (__stxr(v258 + 1, v177));
          v259 = (unint64_t *)&v176->__shared_weak_owners_;
          do
            v260 = __ldxr(v259);
          while (__stxr(v260 + 1, v259));
          v176[8].__shared_weak_owners_ = (uint64_t)v178;
          v176[9].__vftable = (std::__shared_weak_count_vtbl *)v176;
          std::__shared_weak_count::__release_weak(v257);
        }
        else
        {
          do
            v261 = __ldxr(v177);
          while (__stxr(v261 + 1, v177));
          v262 = (unint64_t *)&v176->__shared_weak_owners_;
          do
            v263 = __ldxr(v262);
          while (__stxr(v263 + 1, v262));
          v176[8].__shared_weak_owners_ = (uint64_t)v178;
          v176[9].__vftable = (std::__shared_weak_count_vtbl *)v176;
        }
        do
          v264 = __ldaxr(v177);
        while (__stlxr(v264 - 1, v177));
        if (!v264)
        {
          ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
          std::__shared_weak_count::__release_weak(v176);
        }
LABEL_401:
        a1[454] = v178;
        v90 = (std::__shared_weak_count *)a1[455];
        a1[455] = v176;
        if (v90)
        {
          v265 = (unint64_t *)&v90->__shared_owners_;
          do
            v92 = __ldaxr(v265);
          while (__stlxr(v92 - 1, v265));
          goto LABEL_365;
        }
        goto LABEL_368;
      }
LABEL_241:
      v158 = a1[25];
      v157 = (std::__shared_weak_count *)a1[26];
      if (v157)
      {
        v159 = (unint64_t *)&v157->__shared_weak_owners_;
        do
          v160 = __ldxr(v159);
        while (__stxr(v160 + 1, v159));
      }
      v161 = (std::__shared_weak_count *)operator new(0x968uLL);
      v161->__shared_owners_ = 0;
      v162 = (unint64_t *)&v161->__shared_owners_;
      v161->__shared_weak_owners_ = 0;
      v161->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D7500;
      v163 = (uint64_t)&v161[1];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      if (!v157)
        goto LABEL_347;
      v164 = std::__shared_weak_count::lock(v157);
      if (v164)
      {
        v165 = v164;
        v166 = v158 + 144;
        if (!v158)
          v166 = 0;
        v167 = (unint64_t *)&v164->__shared_weak_owners_;
        do
          v168 = __ldxr(v167);
        while (__stxr(v168 + 1, v167));
        __p.__r_.__value_.__r.__words[0] = v166;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v164;
        std::__shared_weak_count::__release_weak(v157);
        v169 = (unint64_t *)&v165->__shared_owners_;
        do
          v170 = __ldaxr(v169);
        while (__stlxr(v170 - 1, v169));
        if (v170)
        {
LABEL_347:
          SoftbankRegistrationPolicy::SoftbankRegistrationPolicy(v163, (std::__shared_weak_count **)&__p);
          if (__p.__r_.__value_.__l.__size_)
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          v236 = (std::__shared_weak_count *)v161[9].__vftable;
          if (v236)
          {
            if (v236->__shared_owners_ != -1)
              goto LABEL_362;
            do
              v237 = __ldxr(v162);
            while (__stxr(v237 + 1, v162));
            v238 = (unint64_t *)&v161->__shared_weak_owners_;
            do
              v239 = __ldxr(v238);
            while (__stxr(v239 + 1, v238));
            v161[8].__shared_weak_owners_ = v163;
            v161[9].__vftable = (std::__shared_weak_count_vtbl *)v161;
            std::__shared_weak_count::__release_weak(v236);
          }
          else
          {
            do
              v240 = __ldxr(v162);
            while (__stxr(v240 + 1, v162));
            v241 = (unint64_t *)&v161->__shared_weak_owners_;
            do
              v242 = __ldxr(v241);
            while (__stxr(v242 + 1, v241));
            v161[8].__shared_weak_owners_ = v163;
            v161[9].__vftable = (std::__shared_weak_count_vtbl *)v161;
          }
          do
            v243 = __ldaxr(v162);
          while (__stlxr(v243 - 1, v162));
          if (!v243)
          {
            ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
            std::__shared_weak_count::__release_weak(v161);
          }
LABEL_362:
          a1[454] = v163;
          v90 = (std::__shared_weak_count *)a1[455];
          a1[455] = v161;
          if (v90)
          {
            v244 = (unint64_t *)&v90->__shared_owners_;
            do
              v92 = __ldaxr(v244);
            while (__stlxr(v92 - 1, v244));
            goto LABEL_365;
          }
          goto LABEL_368;
        }
        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
        v157 = v165;
      }
      else
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      }
      std::__shared_weak_count::__release_weak(v157);
      goto LABEL_347;
    default:
LABEL_272:
      v186 = a1[45];
      v187 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v186 + 16));
      v188 = v187;
      v189 = *(unsigned __int8 *)(*(_QWORD *)(v186 + 8) + 2657);
      v190 = (unint64_t *)&v187->__shared_owners_;
      do
        v191 = __ldaxr(v190);
      while (__stlxr(v191 - 1, v190));
      if (!v191)
      {
        ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
        std::__shared_weak_count::__release_weak(v188);
      }
      v193 = a1[25];
      v192 = (std::__shared_weak_count *)a1[26];
      if (v189)
      {
        if (v192)
        {
          v194 = (unint64_t *)&v192->__shared_weak_owners_;
          do
            v195 = __ldxr(v194);
          while (__stxr(v195 + 1, v194));
        }
        v196 = (std::__shared_weak_count *)operator new(0x968uLL);
        v196->__shared_owners_ = 0;
        v197 = (unint64_t *)&v196->__shared_owners_;
        v196->__shared_weak_owners_ = 0;
        v196->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D75A0;
        v198 = (uint64_t)&v196[1];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        if (v192)
        {
          v199 = std::__shared_weak_count::lock(v192);
          if (!v199)
          {
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
            goto LABEL_304;
          }
          v200 = v199;
          v201 = v193 + 144;
          if (!v193)
            v201 = 0;
          v202 = (unint64_t *)&v199->__shared_weak_owners_;
          do
            v203 = __ldxr(v202);
          while (__stxr(v203 + 1, v202));
          __p.__r_.__value_.__r.__words[0] = v201;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v199;
          std::__shared_weak_count::__release_weak(v192);
          v204 = (unint64_t *)&v200->__shared_owners_;
          do
            v205 = __ldaxr(v204);
          while (__stlxr(v205 - 1, v204));
          if (!v205)
          {
            ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
            v192 = v200;
LABEL_304:
            std::__shared_weak_count::__release_weak(v192);
          }
        }
        LazuliRegistrationPolicy::LazuliRegistrationPolicy(v198, (std::__shared_weak_count **)&__p);
        if (__p.__r_.__value_.__l.__size_)
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        v218 = (std::__shared_weak_count *)v196[9].__vftable;
        if (v218)
        {
          if (v218->__shared_owners_ != -1)
          {
LABEL_320:
            a1[454] = v198;
            v90 = (std::__shared_weak_count *)a1[455];
            a1[455] = v196;
            if (!v90)
              goto LABEL_368;
            v226 = (unint64_t *)&v90->__shared_owners_;
            do
              v92 = __ldaxr(v226);
            while (__stlxr(v92 - 1, v226));
            goto LABEL_365;
          }
          do
            v219 = __ldxr(v197);
          while (__stxr(v219 + 1, v197));
          v220 = (unint64_t *)&v196->__shared_weak_owners_;
          do
            v221 = __ldxr(v220);
          while (__stxr(v221 + 1, v220));
          v196[8].__shared_weak_owners_ = v198;
          v196[9].__vftable = (std::__shared_weak_count_vtbl *)v196;
          std::__shared_weak_count::__release_weak(v218);
        }
        else
        {
          do
            v222 = __ldxr(v197);
          while (__stxr(v222 + 1, v197));
          v223 = (unint64_t *)&v196->__shared_weak_owners_;
          do
            v224 = __ldxr(v223);
          while (__stxr(v224 + 1, v223));
          v196[8].__shared_weak_owners_ = v198;
          v196[9].__vftable = (std::__shared_weak_count_vtbl *)v196;
        }
        do
          v225 = __ldaxr(v197);
        while (__stlxr(v225 - 1, v197));
        if (!v225)
        {
          ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
          std::__shared_weak_count::__release_weak(v196);
        }
        goto LABEL_320;
      }
      if (v192)
      {
        v206 = (unint64_t *)&v192->__shared_weak_owners_;
        do
          v207 = __ldxr(v206);
        while (__stxr(v207 + 1, v206));
      }
      v208 = (std::__shared_weak_count *)operator new(0x960uLL);
      v208->__shared_owners_ = 0;
      v209 = (unint64_t *)&v208->__shared_owners_;
      v208->__shared_weak_owners_ = 0;
      v208->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D75F0;
      v210 = &v208[1].__vftable;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      if (!v192)
        goto LABEL_326;
      v211 = std::__shared_weak_count::lock(v192);
      if (!v211)
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        goto LABEL_325;
      }
      v212 = v211;
      v213 = v193 + 144;
      if (!v193)
        v213 = 0;
      v214 = (unint64_t *)&v211->__shared_weak_owners_;
      do
        v215 = __ldxr(v214);
      while (__stxr(v215 + 1, v214));
      __p.__r_.__value_.__r.__words[0] = v213;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v211;
      std::__shared_weak_count::__release_weak(v192);
      v216 = (unint64_t *)&v212->__shared_owners_;
      do
        v217 = __ldaxr(v216);
      while (__stlxr(v217 - 1, v216));
      if (!v217)
      {
        ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
        v192 = v212;
LABEL_325:
        std::__shared_weak_count::__release_weak(v192);
      }
LABEL_326:
      DefaultRegistrationPolicy::DefaultRegistrationPolicy(v210, (std::__shared_weak_count **)&__p);
      if (__p.__r_.__value_.__l.__size_)
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      v227 = (std::__shared_weak_count *)v208[9].__vftable;
      if (v227)
      {
        if (v227->__shared_owners_ != -1)
          goto LABEL_341;
        do
          v228 = __ldxr(v209);
        while (__stxr(v228 + 1, v209));
        v229 = (unint64_t *)&v208->__shared_weak_owners_;
        do
          v230 = __ldxr(v229);
        while (__stxr(v230 + 1, v229));
        v208[8].__shared_weak_owners_ = (uint64_t)v210;
        v208[9].__vftable = (std::__shared_weak_count_vtbl *)v208;
        std::__shared_weak_count::__release_weak(v227);
      }
      else
      {
        do
          v231 = __ldxr(v209);
        while (__stxr(v231 + 1, v209));
        v232 = (unint64_t *)&v208->__shared_weak_owners_;
        do
          v233 = __ldxr(v232);
        while (__stxr(v233 + 1, v232));
        v208[8].__shared_weak_owners_ = (uint64_t)v210;
        v208[9].__vftable = (std::__shared_weak_count_vtbl *)v208;
      }
      do
        v234 = __ldaxr(v209);
      while (__stlxr(v234 - 1, v209));
      if (!v234)
      {
        ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
        std::__shared_weak_count::__release_weak(v208);
      }
LABEL_341:
      a1[454] = v210;
      v90 = (std::__shared_weak_count *)a1[455];
      a1[455] = v208;
      if (!v90)
        goto LABEL_368;
      v235 = (unint64_t *)&v90->__shared_owners_;
      do
        v92 = __ldaxr(v235);
      while (__stlxr(v92 - 1, v235));
LABEL_365:
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        v153 = v90;
LABEL_367:
        std::__shared_weak_count::__release_weak(v153);
      }
LABEL_368:
      if ((*(unsigned int (**)(_QWORD *))(*a1 + 248))(a1))
      {
        v245 = a1[454];
        v246 = (_QWORD *)operator new();
        v247 = a1[45];
        v267 = 0;
        v268 = 0;
        v248 = *(std::__shared_weak_count **)(v247 + 16);
        if (v248)
        {
          v248 = std::__shared_weak_count::lock(v248);
          v249 = v248;
          v268 = v248;
          if (v248)
          {
            v248 = *(std::__shared_weak_count **)(v247 + 8);
            v267 = v248;
          }
        }
        else
        {
          v249 = 0;
        }
        SipStack::carrierIdentifier((SipStack *)v248, &__p);
        v251 = (uint64_t **)BambiPrefsManager::instance(v250);
        p_p = &__p;
        v252 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v251, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
        *v246 = &off_1E78DB2B0;
        BambiEmergencyPrefs::BambiEmergencyPrefs((BambiEmergencyPrefs *)(v246 + 1), (const BambiEmergencyPrefs *)(v252 + 12));
        *(_QWORD *)(v245 + 2232) = v246;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v249)
        {
          v253 = (unint64_t *)&v249->__shared_owners_;
          do
            v254 = __ldaxr(v253);
          while (__stlxr(v254 - 1, v253));
          if (!v254)
          {
            ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
            std::__shared_weak_count::__release_weak(v249);
          }
        }
      }
      v255 = (*(uint64_t (**)(_QWORD *))(a1[2] + 64))(a1 + 2);
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 16))(a1 + 2, v255);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v255 + 8), (uint64_t)"initializing ", 13);
      *(_BYTE *)(v255 + 17) = 0;
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1[454] + 480))(&__p);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v255 + 40))(v255, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v255 + 8), (uint64_t)" registration policy", 20);
      *(_BYTE *)(v255 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v255 + 64))(v255, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v255 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[454] + 272))(a1[454]);
  }
}

void sub_1BF0636A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, std::__shared_weak_count *a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::__shared_weak_count *v16;
  void *v18;

  if (a11)
    std::__shared_weak_count::__release_weak(a11);
  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v18);
  _Unwind_Resume(a1);
}

_QWORD *SipRegistrationClient::clearDeferredNotifications(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = this;
  if (this[491])
  {
    v2 = this + 2;
    v3 = (*(uint64_t (**)(_QWORD *))(this[2] + 64))(this + 2);
    (*(void (**)(_QWORD *, uint64_t))(*v2 + 16))(v1 + 2, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"clearing deferred termination notification", 42);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    this = (_QWORD *)v1[491];
    if (this)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 16))(this);
    v1[491] = 0;
  }
  if (v1[492])
  {
    v4 = (*(uint64_t (**)(_QWORD *))(v1[2] + 64))(v1 + 2);
    (*(void (**)(_QWORD *, uint64_t))(v1[2] + 16))(v1 + 2, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"clearing deferred error notification ", 37);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1[492] + 64) + 16))(v1[492] + 64, v4);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    this = (_QWORD *)v1[492];
    if (this)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 16))(this);
    v1[492] = 0;
  }
  return this;
}

_QWORD *SipRegistrationClient::clearDeferredDrop(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = this;
  if (this[493])
  {
    v2 = this + 2;
    v3 = (*(uint64_t (**)(_QWORD *))(this[2] + 64))(this + 2);
    (*(void (**)(_QWORD *, uint64_t))(*v2 + 16))(v1 + 2, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"clearing deferred drop registration", 35);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    this = (_QWORD *)v1[493];
    if (this)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  v1[493] = 0;
  return this;
}

void SipRegistrationClient::registrationError(SipRegistrationClient *this, uint64_t **a2)
{
  SipRegistrationClient::handleRegistrationError(this, a2, -1, 1, 0);
}

void SipRegistrationClient::handleRegistrationError(SipRegistrationClient *this, uint64_t **a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  int v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  _BOOL4 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const void **v47;
  const char *v48;
  int v49;
  uint64_t v50;
  SipRegistrationPolicy *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  int *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  __int128 v75;
  __int128 v76;
  std::__shared_weak_count *v77[2];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  void *__p[2];
  __int128 v85;
  uint64_t v86;
  std::__shared_weak_count *v87;

  if (capabilities::radio::supportsRel16(this)
    && SipRegistrationClient::nasImsRegInProgress(this))
  {
    v10 = *((_QWORD *)this + 45);
    v11 = *(std::__shared_weak_count **)(v10 + 16);
    if (v11 && (v12 = std::__shared_weak_count::lock(v11)) != 0)
    {
      v13 = v12;
      v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 136) + 240);
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    else
    {
      v14 = *(_QWORD *)(MEMORY[0x88] + 240);
    }
    if (!v14 || !*(_QWORD *)(v14 + 8) || !*(_BYTE *)(v14 + 72))
      goto LABEL_28;
    v17 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"handleRegistrationError: RegAccessCheck done", 44);
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    v18 = *((_QWORD *)this + 45);
    *((_QWORD *)&v75 + 1) = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v18 + 16));
    *(_QWORD *)&v75 = *(_QWORD *)(v18 + 8);
    v19 = *(unsigned int *)(v75 + 4076);
    v20 = *((_QWORD *)this + 45);
    v86 = 0;
    v87 = 0;
    v21 = *(std::__shared_weak_count **)(v20 + 16);
    if (v21)
    {
      v22 = std::__shared_weak_count::lock(v21);
      v87 = v22;
      if (v22)
      {
        v23 = *(_QWORD *)(v20 + 8);
        v86 = v23;
        goto LABEL_18;
      }
    }
    else
    {
      v22 = 0;
    }
    v23 = 0;
LABEL_18:
    IMSNasDeviceClient::reportCallStatus(v14, v19, 2, 64, v23 + 3136, 1, 0);
    if (v22)
    {
      v24 = (unint64_t *)&v22->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (*((_QWORD *)&v75 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v75 + 1) + 16))(*((_QWORD *)&v75 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v75 + 1));
      }
    }
LABEL_28:
    SipRegistrationClient::nasImsRegStop(this);
  }
  SipRegistrationMetrics::registrationAttemptCompleted((SipRegistrationClient *)((char *)this + 3800), (const ImsResult *)a2, 0);
  v28 = *((_QWORD *)this + 45);
  v29 = *(std::__shared_weak_count **)(v28 + 16);
  if (v29)
  {
    v30 = std::__shared_weak_count::lock(v29);
    if (v30)
    {
      v31 = v30;
      v32 = *(_DWORD *)(*(_QWORD *)(v28 + 8) + 200);
      v33 = (unint64_t *)&v30->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v31);
      }
      if (v32 != 2)
        goto LABEL_36;
LABEL_46:
      if (!*((_BYTE *)this + 3648))
      {
        SipUserAgent::transportLayer(*((SipUserAgent **)this + 45), &v75);
        v38 = *(_QWORD *)(v75 + 1040);
        if (v38 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 224))(v38))
        {
          v39 = *((_DWORD *)a2 + 4);
          v40 = a2[1];
          v41 = v39 == 60 && v40 == &_posixDomain || v39 == 408 && v40 == &SipResultDomain::_domain;
        }
        else
        {
          v41 = 0;
        }
        v42 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
        if (!*((_QWORD *)&v75 + 1))
          goto LABEL_57;
        v43 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
          if (v41)
          {
LABEL_58:
            v45 = *((unsigned __int8 *)this + 3919);
            if ((v45 & 0x80u) == 0)
              v46 = *((unsigned __int8 *)this + 3919);
            else
              v46 = *((_QWORD *)this + 488);
            if (v46 != 8)
              goto LABEL_118;
            v47 = (const void **)((char *)this + 3896);
            if ((v45 & 0x80) != 0)
            {
              if (memcmp(*v47, "Handover", *((_QWORD *)this + 488)))
                goto LABEL_118;
            }
            else if (*((_BYTE *)this + 3919))
            {
              v48 = "Handover";
              while (*(unsigned __int8 *)v47 == *(unsigned __int8 *)v48)
              {
                v47 = (const void **)((char *)v47 + 1);
                ++v48;
                if (!--v45)
                  goto LABEL_117;
              }
              goto LABEL_118;
            }
LABEL_117:
            if (!*((_BYTE *)this + 2458))
            {
              v70 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 48))((char *)this + 16);
              (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v70);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v70 + 8), (uint64_t)"registration timed out on WiFi handover. NOT terminating registration just yet.", 79);
              *(_BYTE *)(v70 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v70 + 64))(v70, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v49 = 0;
              *(_BYTE *)(v70 + 17) = 0;
LABEL_70:
              v50 = *((_QWORD *)this + 454);
              if (v50)
              {
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 528))(v50))
                {
                  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 454) + 416))(*((_QWORD *)this + 454), 0))
                  {
                    v51 = (SipRegistrationPolicy *)*((_QWORD *)this + 454);
                    if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)v51 + 55) - *((_QWORD *)v51 + 54)) >> 5) != SipRegistrationPolicy::countOfProxiesWithErrors(v51))
                    {
                      v52 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
                      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v52);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v52 + 8), (uint64_t)"registration policy will retry on emergency stack, not reporting registration error: ", 85);
                      *(_BYTE *)(v52 + 17) = 0;
                      ((void (*)(uint64_t **, uint64_t))(*a2)[2])(a2, v52);
                      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                      a4 = 0;
                      *(_BYTE *)(v52 + 17) = 0;
                    }
                  }
                }
                v53 = *((_QWORD *)this + 454);
                if (v53 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 536))(v53) & 1) == 0)
                {
                  v54 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
                  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v54);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)"Suppressing error based on recommendation from policy.", 54);
                  *(_BYTE *)(v54 + 17) = 0;
                  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  a4 = 0;
                  *(_BYTE *)(v54 + 17) = 0;
                }
              }
              if (v49)
              {
                v55 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 48))((char *)this + 16);
                (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v55);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v55 + 8), (uint64_t)"registration over IPSec timed out.  Terminating our existing registration and starting over.", 92);
                *(_BYTE *)(v55 + 17) = 0;
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(_BYTE *)(v55 + 17) = 0;
                (*(void (**)(SipRegistrationClient *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, 8, 0, 0);
                a4 = 0;
              }
              v56 = (int *)*((_QWORD *)this + 454);
              v57 = v56 + 106;
              if (!v56)
                v57 = &SipRegistrationMode::kModeNormal;
              if (*v57 == SipRegistrationMode::kModeLimitedAccess)
              {
                if ((a4 & (*(unsigned int (**)(int *))(*(_QWORD *)v56 + 552))(v56) & 1) != 0)
                {
                  v58 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
                  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v58);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v58 + 8), (uint64_t)"Allowing notification in ", 25);
                  *(_BYTE *)(v58 + 17) = 0;
                  v59 = *((_QWORD *)this + 454);
                  if (v59)
                    v60 = (unsigned int *)(v59 + 424);
                  else
                    v60 = (unsigned int *)&SipRegistrationMode::kModeNormal;
                  v61 = operator<<(v58, v60);
                  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v58 + 64))(v61, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  *(_BYTE *)(v58 + 17) = 0;
                  goto LABEL_92;
                }
                v56 = (int *)*((_QWORD *)this + 454);
              }
              v62 = v56 + 106;
              if (!v56)
                v62 = &SipRegistrationMode::kModeNormal;
              if (*v62 != SipRegistrationMode::kModeNormal)
              {
                v66 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
                (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v66);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v66 + 8), (uint64_t)"Registration mode is ", 21);
                *(_BYTE *)(v66 + 17) = 0;
                v67 = *((_QWORD *)this + 454);
                if (v67)
                  v68 = (unsigned int *)(v67 + 424);
                else
                  v68 = (unsigned int *)&SipRegistrationMode::kModeNormal;
                operator<<(v66, v68);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v66 + 8), (uint64_t)", skipping notification to delegate", 35);
                *(_BYTE *)(v66 + 17) = 0;
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v66 + 64))(v66, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(_BYTE *)(v66 + 17) = 0;
LABEL_106:
                SipRegistrationClient::setClientState(this, 1u);
                if (*((_BYTE *)this + 3648))
                {
                  LODWORD(v75) = 0;
                  SipRegistrationClient::setRegistrationState((uint64_t)this, (int *)&v75, 0);
                  (*(void (**)(SipRegistrationClient *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, 4, 0, 0);
                }
                else
                {
                  LODWORD(v75) = 1;
                  SipRegistrationClient::setRegistrationState((uint64_t)this, (int *)&v75, a5);
                }
                return;
              }
LABEL_92:
              if (a4)
              {
                *(_OWORD *)__p = 0u;
                v85 = 0u;
                v82 = 0u;
                v83 = 0u;
                v80 = 0u;
                v81 = 0u;
                v78 = 0u;
                v79 = 0u;
                v76 = 0u;
                *(_OWORD *)v77 = 0u;
                v75 = 0u;
                std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v71, (_QWORD *)this + 25);
                SipRegistrationErrorNotification::SipRegistrationErrorNotification((uint64_t)&v75, &v71, a3, (uint64_t)this + 3800);
                v63 = v72;
                if (v72)
                {
                  v64 = (unint64_t *)&v72->__shared_owners_;
                  do
                    v65 = __ldaxr(v64);
                  while (__stlxr(v65 - 1, v64));
                  if (!v65)
                  {
                    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                    std::__shared_weak_count::__release_weak(v63);
                  }
                }
                SipRegistrationClient::notifyDelegateOfRegistrationError(this, (const SipRegistrationErrorNotification *)&v75, 0, a5);
                *(_QWORD *)&v75 = &off_1E78EFFC8;
                if (SBYTE7(v85) < 0)
                  operator delete(__p[0]);
                ImsResult::~ImsResult((ImsResult *)&v79);
                *(_QWORD *)&v75 = &unk_1E78F0000;
                if (v77[1])
                  std::__shared_weak_count::__release_weak(v77[1]);
              }
              goto LABEL_106;
            }
LABEL_118:
            v49 = 1;
            goto LABEL_70;
          }
        }
        else
        {
LABEL_57:
          if (v41)
            goto LABEL_58;
        }
      }
      v49 = 0;
      goto LABEL_70;
    }
  }
  if (MEMORY[0xC8] == 2)
    goto LABEL_46;
LABEL_36:
  *(_OWORD *)__p = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  *(_OWORD *)v77 = 0u;
  v75 = 0u;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v73, (_QWORD *)this + 25);
  SipRegistrationErrorNotification::SipRegistrationErrorNotification((uint64_t)&v75, &v73, -1, (uint64_t)this + 3800);
  v35 = v74;
  if (v74)
  {
    v36 = (unint64_t *)&v74->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  SipRegistrationClient::notifyDelegateOfRegistrationError(this, (const SipRegistrationErrorNotification *)&v75, 1, a5);
  LODWORD(v86) = 0;
  SipRegistrationClient::setRegistrationState((uint64_t)this, (int *)&v86, 0);
  *(_QWORD *)&v75 = &off_1E78EFFC8;
  if (SBYTE7(v85) < 0)
    operator delete(__p[0]);
  ImsResult::~ImsResult((ImsResult *)&v79);
  *(_QWORD *)&v75 = &unk_1E78F0000;
  if (v77[1])
    std::__shared_weak_count::__release_weak(v77[1]);
}

void sub_1BF064320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v5 - 96);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipRegistrationClient::registrationError(SipRegistrationClient *this, uint64_t **a2)
{
  SipRegistrationClient::handleRegistrationError((SipRegistrationClient *)((char *)this - 144), a2, -1, 1, 0);
}

void SipRegistrationClient::handleThumperAuthFailure(uint64_t a1, const std::string *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  uint64_t v13;
  std::string::size_type size;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v22;
  _BOOL8 v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  std::string __p;

  v4 = a1 + 16;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Received Thumper registration error: ", 37);
  *(_BYTE *)(v5 + 17) = 0;
  LoggableString::LoggableString(&__p, a2);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 40))(v5, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = *(_QWORD *)(a1 + 360);
  v29 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v6 + 16));
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 136);
  v9 = *(_QWORD *)(a1 + 360);
  v10 = *(std::__shared_weak_count **)(v9 + 16);
  if (v10)
  {
    v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      v12 = *(_QWORD *)(v9 + 8);
      goto LABEL_8;
    }
  }
  else
  {
    v11 = 0;
  }
  v12 = 0;
LABEL_8:
  if (*(char *)(v12 + 4159) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v12 + 4136), *(_QWORD *)(v12 + 4144));
  else
    __p = *(std::string *)(v12 + 4136);
  v13 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((v13 & 0x80u) == 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  v15 = qword_1ED70CBA0;
  if (byte_1ED70CBAF >= 0)
    v15 = byte_1ED70CBAF;
  if (size == v15)
  {
    if (byte_1ED70CBAF >= 0)
      v7 = &SipRegistrationPolicy::kThumperErrorUnauthorized;
    else
      v7 = (uint64_t *)SipRegistrationPolicy::kThumperErrorUnauthorized;
    if ((v13 & 0x80) != 0)
    {
      v23 = memcmp(a2->__r_.__value_.__l.__data_, v7, a2->__r_.__value_.__l.__size_) == 0;
    }
    else if (*((_BYTE *)&a2->__r_.__value_.__s + 23))
    {
      v16 = v13 - 1;
      do
      {
        v18 = a2->__r_.__value_.__s.__data_[0];
        a2 = (const std::string *)((char *)a2 + 1);
        v17 = v18;
        v20 = *(unsigned __int8 *)v7;
        v7 = (uint64_t *)((char *)v7 + 1);
        v19 = v20;
        v22 = v16-- != 0;
        v23 = v17 == v19;
      }
      while (v17 == v19 && v22);
    }
    else
    {
      v23 = 1;
    }
  }
  else
  {
    v23 = 0;
  }
  v24 = *(_QWORD *)(v8 + 248);
  if (v24)
    (*(void (**)(uint64_t, std::string *, _BOOL8))(*(_QWORD *)v24 + 120))(v24, &__p, v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *, uint64_t *, _BOOL8))v11->__on_zero_shared)(v11, v7, v23);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v29)
  {
    v27 = (unint64_t *)&v29->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *, uint64_t *, _BOOL8))v29->__on_zero_shared)(v29, v7, v23);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_1BF06460C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipRegistrationClient::handleThumperAuthFailure(uint64_t a1, const std::string *a2)
{
  SipRegistrationClient::handleThumperAuthFailure(a1 - 144, a2);
}

void SipRegistrationClient::stackId(SipRegistrationClient *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *((_QWORD *)this + 45);
  if (*(char *)(v2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 56), *(_QWORD *)(v2 + 64));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 56);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 72);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

void `non-virtual thunk to'SipRegistrationClient::stackId(SipRegistrationClient *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *((_QWORD *)this + 27);
  if (*(char *)(v2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 56), *(_QWORD *)(v2 + 64));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 56);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 72);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

uint64_t SipRegistrationClient::nasImsRegInProgress(SipRegistrationClient *this)
{
  char *v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;

  v1 = (char *)this + 16;
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"nasImsReg ", 10);
  *(_BYTE *)(v2 + 17) = 0;
  if (v1[508])
    v3 = "InProgress";
  else
    v3 = "NotInProgress";
  if (v1[508])
    v4 = 10;
  else
    v4 = 13;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)v3, v4);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  return v1[508];
}

uint64_t SipRegistrationClient::nasImsRegStop(SipRegistrationClient *this)
{
  char *v1;
  uint64_t v2;
  uint64_t result;

  v1 = (char *)this + 16;
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"nasImsReg Stop", 14);
  *(_BYTE *)(v2 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  v1[508] = 0;
  return result;
}

void SipRegistrationClient::notifyDelegateOfRegistrationError(SipRegistrationClient *this, const SipRegistrationErrorNotification *a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  const char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  SipRegistrationErrorNotification *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::string v33;

  v8 = *((_QWORD *)this + 454);
  if (v8
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 472))(v8)
    && SipRegistrationNotification::secondsUntilNextRetry(a2) != -1)
  {
    v9 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 32))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v9);
    v10 = *(_QWORD **)(v9 + 8);
    v11 = "dropping registration error notification while CSFB mode is enabled";
LABEL_20:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, 67);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    goto LABEL_37;
  }
  if ((a3 & 1) == 0 && ((*(uint64_t (**)(SipRegistrationClient *))(*(_QWORD *)this + 248))(this) & 1) == 0)
  {
    v12 = *((_QWORD *)this + 45);
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = 0uLL;
    v13 = *(std::__shared_weak_count **)(v12 + 16);
    if (v13)
    {
      v13 = std::__shared_weak_count::lock(v13);
      v14 = v13;
      v33.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
      if (v13)
      {
        v13 = *(std::__shared_weak_count **)(v12 + 8);
        v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
      }
    }
    else
    {
      v14 = 0;
    }
    v15 = SipStack::callCount((SipStack *)v13);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v15)
    {
      v18 = *((_QWORD *)this + 492);
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
      v19 = (SipRegistrationErrorNotification *)operator new();
      SipRegistrationErrorNotification::SipRegistrationErrorNotification(v19, a2);
      v20 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 492) = v19;
      v9 = (*(uint64_t (**)(char *))(v20 + 32))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v9);
      v10 = *(_QWORD **)(v9 + 8);
      v11 = "delaying registration error notification until all calls have ended";
      goto LABEL_20;
    }
  }
  v21 = *((_QWORD *)this + 57);
  if (v21)
  {
    v22 = *((_QWORD *)this + 45);
    v23 = *(std::__shared_weak_count **)(v22 + 16);
    if (v23)
    {
      v24 = std::__shared_weak_count::lock(v23);
      if (v24)
      {
        v25 = *(_QWORD *)(v22 + 8);
LABEL_27:
        if (*(char *)(v25 + 4159) < 0)
          std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(v25 + 4136), *(_QWORD *)(v25 + 4144));
        else
          v33 = *(std::string *)(v25 + 4136);
        (*(void (**)(uint64_t, std::string *, const SipRegistrationErrorNotification *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v33, a2, a4);
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v33.__r_.__value_.__l.__data_);
        if (v24)
        {
          v26 = (unint64_t *)&v24->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        goto LABEL_37;
      }
    }
    else
    {
      v24 = 0;
    }
    v25 = 0;
    goto LABEL_27;
  }
LABEL_37:
  if (((*(uint64_t (**)(SipRegistrationClient *))(*(_QWORD *)this + 248))(this) & 1) == 0)
  {
    v28 = *((_QWORD *)this + 45);
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = 0uLL;
    v29 = *(std::__shared_weak_count **)(v28 + 16);
    if (v29)
    {
      v29 = std::__shared_weak_count::lock(v29);
      v30 = v29;
      v33.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
      if (v29)
      {
        v29 = *(std::__shared_weak_count **)(v28 + 8);
        v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
      }
    }
    else
    {
      v30 = 0;
    }
    SipStack::handleRegistrationError((SipStack *)v29);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
}

void sub_1BF064B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  MEMORY[0x1C3B87100](v16, 0x10F3C40A28041C4);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::handleErrorResponse(SipRegistrationClient *this, const SipResponse *a2)
{
  _DWORD *v4;
  int v5;
  uint64_t v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  _OWORD v10[4];
  uint64_t v11;

  v4 = (_DWORD *)*((_QWORD *)this + 454);
  if (!v4)
    goto LABEL_4;
  if (*((_BYTE *)this + 3648))
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 376))(v4);
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    SipResultDomain::makeResult(a2, (uint64_t)v10);
    (*(void (**)(_QWORD, _OWORD *))(**((_QWORD **)this + 454) + 448))(*((_QWORD *)this + 454), v10);
    ImsResult::~ImsResult((ImsResult *)v10);
LABEL_4:
    v5 = 1;
    v6 = -1;
    goto LABEL_10;
  }
  v7 = v4[106];
  v6 = (*(uint64_t (**)(_DWORD *, const SipResponse *))(*(_QWORD *)v4 + 296))(v4, a2);
  if (v7 != SipRegistrationMode::kModeLimitedAccess
    && (v8 = (_DWORD *)*((_QWORD *)this + 454), v8[106] == SipRegistrationMode::kModeLimitedAccess)
    && (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v8 + 552))(v8))
  {
    v9 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Error response toggled limited access mode!", 43);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v5 = 0;
    *(_BYTE *)(v9 + 17) = 0;
  }
  else
  {
    v5 = 1;
  }
LABEL_10:
  SipResultDomain::makeResult(a2, (uint64_t)v10);
  SipRegistrationClient::handleRegistrationError(this, (uint64_t **)v10, v6, v5, 0);
  ImsResult::~ImsResult((ImsResult *)v10);
}

void sub_1BF064CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ImsResult::~ImsResult((ImsResult *)&a9);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::handleTransactionError(SipRegistrationClient *this, ImsResult *a2, _QWORD *a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (**v12)(SipResponse *__hidden);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  void *__p;
  uint64_t v20;
  uint64_t v21;

  if (*a3 != *((_QWORD *)this + 349))
  {
    v6 = (char *)this + 16;
    v7 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 48))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v6 + 16))((char *)this + 16, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"ignoring error from old transaction ", 36);
    *(_BYTE *)(v7 + 17) = 0;
    v8 = *a3 + *(_QWORD *)(*(_QWORD *)*a3 - 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v7);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
  }
  v9 = *((_QWORD *)this + 454);
  if (!v9)
    goto LABEL_6;
  if (*((_BYTE *)this + 3648))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 376))(v9);
    (*(void (**)(_QWORD, ImsResult *))(**((_QWORD **)this + 454) + 448))(*((_QWORD *)this + 454), a2);
LABEL_6:
    v10 = -1;
    goto LABEL_7;
  }
  if (*((uint64_t **)a2 + 1) == &SipResultDomain::_domain && *((_DWORD *)a2 + 4) == 408)
  {
    v17 = 0u;
    v18 = 0u;
    v11 = *((_QWORD *)this + 45) + 288;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    LODWORD(v17) = 1065353216;
    v16 = 0;
    v12 = off_1E78E40E8;
    *(_QWORD *)&v18 = v11;
    __p = 0;
    v20 = 0;
    v21 = 0;
    SipResponse::setStatusFromImsResult((SipResponse *)&v12, a2);
    v10 = (*(uint64_t (**)(_QWORD, void (***)(SipResponse *__hidden)))(**((_QWORD **)this + 454)
                                                                                          + 296))(*((_QWORD *)this + 454), &v12);
    v12 = off_1E78E40E8;
    if (SHIBYTE(v21) < 0)
      operator delete(__p);
    SipMessage::~SipMessage((SipMessage *)&v12);
  }
  else
  {
    v10 = (*(uint64_t (**)(uint64_t, ImsResult *, _QWORD))(*(_QWORD *)v9 + 304))(v9, a2, 0);
  }
LABEL_7:
  SipRegistrationClient::handleRegistrationError(this, (uint64_t **)a2, v10, 1, 0);
}

void sub_1BF064ECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  SipResponse::~SipResponse((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationClient::findContactInResponse(const SipUri *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int8 *v12;
  const void *v13;
  unint64_t v14;
  size_t v15;
  void *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  int v33;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  if (v3 == v4)
  {
    v6 = 0;
LABEL_46:
    v7 = v6;
LABEL_47:
    if (v7 - v6 == 8)
    {
      if (*(_QWORD *)(*(_QWORD *)v6 + 80) - *(_QWORD *)(*(_QWORD *)v6 + 72) == 488)
        v31 = a3;
      else
        v31 = 1;
      if (v31)
        v30 = 0;
      else
        v30 = *(_QWORD *)(*(_QWORD *)v6 + 72);
    }
    else
    {
      v30 = 0;
      if (!v6)
        return v30;
    }
LABEL_55:
    operator delete(v6);
    return v30;
  }
  v33 = a3;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  do
  {
    v12 = *(unsigned __int8 **)(v4 + 8 * v10);
    if ((char)v12[31] < 0)
    {
      v13 = (const void *)*((_QWORD *)v12 + 1);
      v14 = *((_QWORD *)v12 + 2);
    }
    else
    {
      v13 = v12 + 8;
      v14 = v12[31];
    }
    if (v14 >= 7)
      v15 = 7;
    else
      v15 = v14;
    if (!memcmp(v13, "Contact", v15) && v14 == 7)
    {
      v18 = v17;
      if (v9 >= v8)
      {
        v19 = (v9 - v6) >> 3;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 61)
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        if ((v8 - v6) >> 2 > v20)
          v20 = (v8 - v6) >> 2;
        if ((unint64_t)(v8 - v6) >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
        {
          if (v21 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = (char *)operator new(8 * v21);
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[8 * v19];
        *(_QWORD *)v23 = v18;
        v7 = v23 + 8;
        while (v9 != v6)
        {
          v24 = *((_QWORD *)v9 - 1);
          v9 -= 8;
          *((_QWORD *)v23 - 1) = v24;
          v23 -= 8;
        }
        v8 = &v22[8 * v21];
        if (v6)
          operator delete(v6);
        v6 = v23;
      }
      else
      {
        *(_QWORD *)v9 = v17;
        v7 = v9 + 8;
      }
      v4 = *(_QWORD *)(a2 + 8);
      v3 = *(_QWORD *)(a2 + 16);
      v9 = v7;
    }
    v10 = ++v11;
  }
  while (v11 < (unint64_t)((v3 - v4) >> 3));
  if (v7 == v6)
  {
    a3 = v33;
    goto LABEL_46;
  }
  v25 = 0;
  while (1)
  {
    v26 = *(_QWORD *)&v6[8 * v25];
    v27 = *(_QWORD *)(v26 + 72);
    if (*(_QWORD *)(v26 + 80) != v27)
      break;
LABEL_40:
    if (++v25 >= (unint64_t)((v7 - v6) >> 3))
    {
      a3 = v33;
      goto LABEL_47;
    }
  }
  v28 = 0;
  v29 = 0;
  while ((SipUri::equals((SipUri *)(v27 + v28 + 8), a1, 0) & 1) == 0)
  {
    ++v29;
    v27 = *(_QWORD *)(v26 + 72);
    v28 += 488;
    if (v29 >= 0x4FBCDA3AC10C9715 * ((*(_QWORD *)(v26 + 80) - v27) >> 3))
      goto LABEL_40;
  }
  v30 = v27 + v28;
  if (v6)
    goto LABEL_55;
  return v30;
}

void sub_1BF065158(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t SipRegistrationClient::updateServiceMaskForContact(SipRegistrationClient *this, SipContact *a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  void *v9[2];
  char v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;

  v4 = *((_DWORD *)a2 + 126);
  result = SipRegistrationClient::allowedServices(this);
  if (v4 != (_DWORD)result)
  {
    result = SipRegistrationClient::allowedServices(this);
    if ((_DWORD)result)
    {
      v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 32))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"ignoring reported feature tags (", 32);
      *(_BYTE *)(v6 + 17) = 0;
      v7 = *((_DWORD *)a2 + 126);
      std::string::basic_string[abi:ne180100]<0>(v13, ",");
      BambiServices::namesForServiceMask(v7, (uint64_t)v13, v15);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 32))(v6, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)") and reporting (", 17);
      *(_BYTE *)(v6 + 17) = 0;
      v8 = SipRegistrationClient::allowedServices(this);
      std::string::basic_string[abi:ne180100]<0>(v9, ",");
      BambiServices::namesForServiceMask(v8, (uint64_t)v9, __p);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 32))(v6, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)") instead", 9);
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v6 + 17) = 0;
      if (v12 < 0)
        operator delete(__p[0]);
      if (v10 < 0)
        operator delete(v9[0]);
      if (v16 < 0)
        operator delete(v15[0]);
      if (v14 < 0)
        operator delete(v13[0]);
      result = SipRegistrationClient::allowedServices(this);
      *((_DWORD *)a2 + 126) = result;
    }
  }
  return result;
}

void sub_1BF065318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 33) < 0)
    operator delete(*(void **)(v26 - 56));
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t SipRegistrationClient::allowedServices(SipRegistrationClient *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  ImsPrefs *v6;
  void **RegisterSmsWhenAccessBarringZeroKey;
  void *v8;
  int v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int isVoiceRegistrationBarred;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v22;

  v2 = *((unsigned int *)this + 284);
  v3 = *((_QWORD *)this + 45);
  v4 = *(std::__shared_weak_count **)(v3 + 16);
  if (v4)
  {
    v4 = std::__shared_weak_count::lock(v4);
    v5 = v4;
    if (v4)
      v4 = *(std::__shared_weak_count **)(v3 + 8);
  }
  else
  {
    v5 = 0;
  }
  v6 = (ImsPrefs *)SipStack::prefs((SipStack *)v4);
  RegisterSmsWhenAccessBarringZeroKey = (void **)ImsPrefs::getRegisterSmsWhenAccessBarringZeroKey(v6);
  v8 = ImsPrefs::prefWithKey(v6, RegisterSmsWhenAccessBarringZeroKey);
  if (v8)
  {
    v9 = (*(uint64_t (**)(void *))(*(_QWORD *)v8 + 40))(v8);
    if (!v5)
      goto LABEL_12;
  }
  else
  {
    v9 = *((_BYTE *)RegisterSmsWhenAccessBarringZeroKey + 57) != 0;
    if (!v5)
      goto LABEL_12;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
LABEL_12:
    if (!v9)
      return v2;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v9)
    return v2;
LABEL_13:
  v12 = *((_QWORD *)this + 45);
  v22 = 0;
  v13 = *(std::__shared_weak_count **)(v12 + 16);
  if (v13 && (v22 = std::__shared_weak_count::lock(v13)) != 0)
    v14 = *(_QWORD *)(v12 + 8);
  else
    v14 = 0;
  isVoiceRegistrationBarred = BambiAccessBarring::isVoiceRegistrationBarred((BambiAccessBarring *)(v14 + 2904));
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (isVoiceRegistrationBarred)
  {
    v19 = *((_QWORD *)this + 2);
    v18 = (char *)this + 16;
    v20 = (*(uint64_t (**)(char *))(v19 + 64))(v18);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v18 + 16))(v18, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"Voice service is barred ", 24);
    *(_BYTE *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v20 + 17) = 0;
    return v2 & 0xFFFFFFFE;
  }
  return v2;
}

void sub_1BF065548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationClient::updateRegistrationState(SipRegistrationClient *this, const SipRegistrationStateNotification *a2)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *size;
  unint64_t *v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _BOOL4 v13;
  _DWORD *v14;
  int v15;
  SipRegistrationClient *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  int v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::string::size_type v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  time_t Retry;
  uint64_t v30;
  SipAuthClient **v31;
  time_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  _QWORD *v36;
  time_t v37;
  time_t v38;
  void *v39[2];
  char v40;
  std::string v41;
  std::string v42;
  void *v43[2];
  char v44;
  std::string __p;
  std::string v46;
  unsigned int v47;
  uint64_t v48;
  std::__shared_weak_count *v49;

  v4 = *(_DWORD *)(*((_QWORD *)a2 + 6) + 504);
  if (*(_DWORD *)(*(uint64_t (**)(const SipRegistrationStateNotification *))(*(_QWORD *)a2 + 40))(a2) != 2)
  {
    SipUserAgent::transportLayer(*((SipUserAgent **)this + 45), &v46);
    v48 = 0;
    v49 = 0;
    SipTransportLayer::setIPSecTransport((uint64_t *)v46.__r_.__value_.__l.__data_, &v48);
    v5 = v49;
    if (v49)
    {
      p_shared_owners = (unint64_t *)&v49->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    size = (std::__shared_weak_count *)v46.__r_.__value_.__l.__size_;
    if (v46.__r_.__value_.__l.__size_)
    {
      v9 = (unint64_t *)(v46.__r_.__value_.__l.__size_ + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  if (((*(uint64_t (**)(const SipRegistrationStateNotification *))(*(_QWORD *)a2 + 48))(a2) & 1) != 0)
  {
    v11 = (unsigned int *)(*(uint64_t (**)(const SipRegistrationStateNotification *))(*(_QWORD *)a2 + 40))(a2);
    v12 = *v11;
    if (*v11 == *((_DWORD *)this + 132))
    {
      v13 = v4 == *((_DWORD *)this + 276) && *((_BYTE *)this + 2488) == 0;
    }
    else
    {
      v13 = 0;
      v12 = *((_DWORD *)this + 132);
    }
  }
  else
  {
    v13 = 0;
    v12 = *((_DWORD *)this + 132);
  }
  v14 = (_DWORD *)((char *)this + 528);
  v47 = v12;
  v15 = *((_DWORD *)this + 276);
  v16 = (SipRegistrationClient *)(*(uint64_t (**)(const SipRegistrationStateNotification *))(*(_QWORD *)a2 + 40))(a2);
  if ((SipRegistrationClient *)((char *)this + 528) != v16)
    *v14 = *(_DWORD *)v16;
  v18 = (char *)this + 16;
  v17 = *((_QWORD *)this + 2);
  *((_DWORD *)this + 276) = v4;
  v19 = (*(uint64_t (**)(char *))(v17 + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v19);
  v20 = *(_QWORD **)(v19 + 8);
  if (v13)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"received duplicate state change to ", 35);
    *(_BYTE *)(v19 + 17) = 0;
    operator<<((_anonymous_namespace_ *)v19, (unsigned int *)this + 132);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)" (", 2);
    *(_BYTE *)(v19 + 17) = 0;
    v21 = *((_DWORD *)this + 276);
    std::string::basic_string[abi:ne180100]<0>(v43, ",");
    BambiServices::namesForServiceMask(v21, (uint64_t)v43, &__p);
    LoggableString::LoggableString(&v46, &__p);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v19 + 40))(v19, &v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)")", 1);
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v19 + 17) = 0;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v44 < 0)
      operator delete(v43[0]);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"registration state changed from ", 32);
    *(_BYTE *)(v19 + 17) = 0;
    operator<<((_anonymous_namespace_ *)v19, &v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)" (", 2);
    *(_BYTE *)(v19 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(v43, ",");
    BambiServices::namesForServiceMask(v15, (uint64_t)v43, &__p);
    LoggableString::LoggableString(&v46, &__p);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v19 + 40))(v19, &v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)") to ", 5);
    *(_BYTE *)(v19 + 17) = 0;
    operator<<((_anonymous_namespace_ *)v19, (unsigned int *)this + 132);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)" (", 2);
    *(_BYTE *)(v19 + 17) = 0;
    v22 = *((_DWORD *)this + 276);
    std::string::basic_string[abi:ne180100]<0>(v39, ",");
    BambiServices::namesForServiceMask(v22, (uint64_t)v39, &v41);
    LoggableString::LoggableString(&v42, &v41);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v19 + 40))(v19, &v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)")", 1);
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v19 + 17) = 0;
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (v40 < 0)
      operator delete(v39[0]);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v44 < 0)
      operator delete(v43[0]);
    if (*((_DWORD *)this + 132) == 2)
    {
      v23 = *((_QWORD *)this + 45);
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = 0uLL;
      v24 = *(std::__shared_weak_count **)(v23 + 16);
      if (v24 && (v46.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v24)) != 0)
      {
        v25 = *(_QWORD *)(v23 + 8);
        v46.__r_.__value_.__r.__words[0] = v25;
      }
      else
      {
        v25 = 0;
      }
      ims::AccessNetwork::set((std::string *)((char *)this + 536), (const std::string *)(v25 + 3136), (const std::string *)(v25 + 3160));
      v26 = (std::__shared_weak_count *)v46.__r_.__value_.__l.__size_;
      if (v46.__r_.__value_.__l.__size_)
      {
        v27 = (unint64_t *)(v46.__r_.__value_.__l.__size_ + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    else
    {
      ims::AccessNetwork::clear((uint64_t)this + 536);
    }
  }
  Retry = SipRegistrationNotification::secondsUntilNextRetry(a2);
  v30 = *((_QWORD *)this + 454);
  if (v30)
    Retry = (*(uint64_t (**)(uint64_t, const SipRegistrationStateNotification *, unsigned int *))(*(_QWORD *)v30 + 312))(v30, a2, &v47);
  if (*v14 == 3)
  {
    SipRegistrationClient::terminateRegEvents(this);
    v31 = (SipAuthClient **)*((_QWORD *)this + 45);
    SipUserAgent::clearAssociatedUris((SipUserAgent *)v31);
    SipAuthClient::clear(v31[35]);
    if (v13 && SipRegistrationNotification::secondsUntilNextRetry(a2) <= 0)
      goto LABEL_63;
  }
  else if (*(_DWORD *)(*(uint64_t (**)(const SipRegistrationStateNotification *))(*(_QWORD *)a2 + 40))(a2) == 2)
  {
    SipRegistrationClient::clearDeferredNotifications(this);
    if (v13 || *((_BYTE *)this + 3648))
      goto LABEL_63;
  }
  if (!*((_BYTE *)a2 + 24))
  {
LABEL_63:
    v35 = (*(uint64_t (**)(char *))(*(_QWORD *)v18 + 64))(v18);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v18 + 16))(v18, v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"not notifying delegate of duplicate or surpressed state change", 62);
    *(_BYTE *)(v35 + 17) = 0;
    result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v35 + 17) = 0;
    return result;
  }
  v32 = SipRegistrationNotification::secondsUntilNextRetry(a2);
  v33 = *(_QWORD *)a2;
  if (Retry == v32)
    return (*(uint64_t (**)(const SipRegistrationStateNotification *, _QWORD))v33)(a2, 0);
  v36 = (_QWORD *)(*(uint64_t (**)(const SipRegistrationStateNotification *))(v33 + 24))(a2);
  v37 = time(0);
  if ((unint64_t)(Retry + 1) >= 2)
    v38 = v37;
  else
    v38 = 0;
  v36[1] = v37;
  v36[2] = v38 + Retry;
  (*(void (**)(_QWORD *, _QWORD))*v36)(v36, 0);
  return (*(uint64_t (**)(_QWORD *))(*v36 + 16))(v36);
}

void sub_1BF065B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v39 - 112);
  _Unwind_Resume(a1);
}

void SipRegistrationActiveNotification::~SipRegistrationActiveNotification(void **this)
{
  *this = &off_1E78F0038;
  if (*((char *)this + 175) < 0)
    operator delete(this[19]);
  ImsResult::~ImsResult((ImsResult *)(this + 9));
  SipRegistrationStateNotification::~SipRegistrationStateNotification((SipRegistrationStateNotification *)this);
}

{
  *this = &off_1E78F0038;
  if (*((char *)this + 175) < 0)
    operator delete(this[19]);
  ImsResult::~ImsResult((ImsResult *)(this + 9));
  SipRegistrationStateNotification::~SipRegistrationStateNotification((SipRegistrationStateNotification *)this);
  JUMPOUT(0x1C3B87100);
}

void SipRegistrationSubject::actionOnObservers(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = (_QWORD *)(a1 + 16);
  if (v2 != (_QWORD *)(a1 + 16))
  {
    do
    {
      v5 = v2[4];
      v6 = (std::__shared_weak_count *)v2[5];
      v21 = v5;
      v22 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        v20 = v6;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      else
      {
        v20 = 0;
      }
      v19 = v5;
      (*(void (**)(uint64_t, uint64_t *))(a2 + 16))(a2, &v19);
      v10 = v20;
      if (v20)
      {
        v11 = (unint64_t *)&v20->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = v22;
      if (v22)
      {
        v14 = (unint64_t *)&v22->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v16 = (_QWORD *)v2[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v2[2];
          v18 = *v17 == (_QWORD)v2;
          v2 = v17;
        }
        while (!v18);
      }
      v2 = v17;
    }
    while (v17 != v3);
  }
}

void sub_1BF065DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t ___ZN21SipRegistrationClient30updateRegistrationFromResponseERK11SipResponseb_block_invoke(uint64_t a1, _QWORD *a2)
{
  return (**(uint64_t (***)(_QWORD, _QWORD))*a2)(*a2, *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 1145));
}

uint64_t ___ZN21SipRegistrationClient30updateRegistrationFromResponseERK11SipResponseb_block_invoke_2(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 56))(*a2);
}

void SipRegistrationClient::updateExpirationTimer(SipRegistrationClient *this, const SipContact *a2)
{
  unsigned int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *size;
  _QWORD *v7;
  uint64_t v8;
  ImsPrefs *v9;
  void **EnforceMaximumEmergencyExpirationSecondsKey;
  void *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  _BOOL4 v15;
  ImsPrefs *v16;
  void **v17;
  void *v18;
  int v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  ImsPrefs *v27;
  void **v28;
  void *v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  int64_t v34;
  SipIPSecTransportGroup *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  time_t v42;
  uint64_t v43;
  BOOL v44;
  time_t v45;
  time_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  unint64_t *p_shared_weak_owners;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  tm *v54;
  uint64_t v55;
  tm *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  std::string v67;
  std::string __p;
  _BYTE v69[24];
  _BYTE *v70;
  _BYTE v71[24];
  _BYTE *v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a2)
  {
    v7 = (_QWORD *)((char *)this + 16);
    v8 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(_QWORD *, uint64_t))(*v7 + 16))(v7, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"expiration set to 0.  Clearing registration timers.", 51);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    v7[57] = 0;
    v7[58] = 0;
    v7[59] = 0;
    SipTimerContainer::cancelTimer((SipTimerContainer *)(v7 + 25), (std::string *)&_MergedGlobals_14);
    SipTimerContainer::cancelTimer((SipTimerContainer *)(v7 + 25), (std::string *)&qword_1ED70ED40);
    return;
  }
  v3 = a2;
  if ((*(unsigned int (**)(SipRegistrationClient *))(*(_QWORD *)this + 248))(this))
  {
    v4 = *((_QWORD *)this + 45);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    v5 = *(std::__shared_weak_count **)(v4 + 16);
    if (v5)
    {
      v5 = std::__shared_weak_count::lock(v5);
      size = v5;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      if (v5)
      {
        v5 = *(std::__shared_weak_count **)(v4 + 8);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
      }
    }
    else
    {
      size = 0;
    }
    v9 = (ImsPrefs *)SipStack::prefs((SipStack *)v5);
    EnforceMaximumEmergencyExpirationSecondsKey = (void **)ImsPrefs::getEnforceMaximumEmergencyExpirationSecondsKey(v9);
    v11 = ImsPrefs::prefWithKey(v9, EnforceMaximumEmergencyExpirationSecondsKey);
    if (v11)
    {
      if ((*(unsigned int (**)(void *))(*(_QWORD *)v11 + 56))(v11))
        goto LABEL_10;
    }
    else if (*((_DWORD *)EnforceMaximumEmergencyExpirationSecondsKey + 15))
    {
LABEL_10:
      v12 = *((_QWORD *)this + 45);
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = 0uLL;
      v13 = *(std::__shared_weak_count **)(v12 + 16);
      if (v13)
      {
        v13 = std::__shared_weak_count::lock(v13);
        v14 = v13;
        v67.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
        if (v13)
        {
          v13 = *(std::__shared_weak_count **)(v12 + 8);
          v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
        }
      }
      else
      {
        v14 = 0;
      }
      v16 = (ImsPrefs *)SipStack::prefs((SipStack *)v13);
      v17 = (void **)ImsPrefs::getEmergencyCallBackModeExpirationSecondsKey(v16);
      v18 = ImsPrefs::prefWithKey(v16, v17);
      if (v18)
        v19 = (*(uint64_t (**)(void *))(*(_QWORD *)v18 + 56))(v18);
      else
        v19 = *((_DWORD *)v17 + 15);
      v15 = v19 == 0;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_)
        goto LABEL_29;
      goto LABEL_26;
    }
    v15 = 0;
    if (!size)
      goto LABEL_29;
LABEL_26:
    v22 = (unint64_t *)&size->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
      if (!v15)
        goto LABEL_47;
      goto LABEL_30;
    }
LABEL_29:
    if (!v15)
      goto LABEL_47;
LABEL_30:
    v24 = *((_QWORD *)this + 45);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    v25 = *(std::__shared_weak_count **)(v24 + 16);
    if (v25)
    {
      v25 = std::__shared_weak_count::lock(v25);
      v26 = v25;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v25;
      if (v25)
      {
        v25 = *(std::__shared_weak_count **)(v24 + 8);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      }
    }
    else
    {
      v26 = 0;
    }
    v27 = (ImsPrefs *)SipStack::prefs((SipStack *)v25);
    v28 = (void **)ImsPrefs::getEnforceMaximumEmergencyExpirationSecondsKey(v27);
    v29 = ImsPrefs::prefWithKey(v27, v28);
    if (v29)
      v30 = (*(uint64_t (**)(void *))(*(_QWORD *)v29 + 56))(v29);
    else
      v30 = *((_DWORD *)v28 + 15);
    if (v30 < v3)
      v3 = v30;
    if (v26)
    {
      v31 = (unint64_t *)&v26->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v33 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"forcing emergency registration expiration to ", 45);
    *(_BYTE *)(v33 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v33 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v33 + 17) = 0;
  }
LABEL_47:
  *((_QWORD *)this + 59) = time(0) + v3;
  SipUserAgent::transportLayer(*((SipUserAgent **)this + 45), &__p);
  v34 = v3;
  v35 = *(SipIPSecTransportGroup **)(__p.__r_.__value_.__r.__words[0] + 1008);
  if (v35)
    SipIPSecTransportGroup::updateExpiration(v35, v3 + 30);
  v36 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v37 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if ((*(unsigned int (**)(SipRegistrationClient *))(*(_QWORD *)this + 248))(this))
  {
    v39 = v34 >> 1;
  }
  else
  {
    v40 = *((_DWORD *)this + 289);
    if (v34 > 2 * v40)
      v39 = v34 - v40;
    else
      v39 = v34 >> 1;
  }
  v41 = 0;
  v42 = time(0) + v39;
  *((_QWORD *)this + 60) = v42;
  *((_QWORD *)this + 61) = v42;
  v43 = *((_QWORD *)this + 62);
  if (v43 >= 1)
  {
    v44 = v42 <= v43;
    v45 = v42 - v43;
    if (!v44)
    {
      v46 = v45 * *((unsigned int *)this + 290);
      if (v46 / 100 >= *((unsigned int *)this + 292))
        v41 = *((unsigned int *)this + 292);
      else
        v41 = v46 / 100;
    }
  }
  if (!*((_BYTE *)this + 1180) && v41 + v39 < v34)
  {
    v47 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v47 + 8), (uint64_t)"moving actual refresh time forward by ", 38);
    *(_BYTE *)(v47 + 17) = 0;
    ims::formatTimeInterval((ims *)v41, &v67);
    LoggableString::LoggableString(&__p, &v67);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v47 + 40))(v47, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v47 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    *((_QWORD *)this + 61) += v41;
    v39 += v41;
  }
  v49 = *((_QWORD *)this + 25);
  v48 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v48)
  {
    p_shared_weak_owners = (unint64_t *)&v48->__shared_weak_owners_;
    do
      v51 = __ldxr(p_shared_weak_owners);
    while (__stxr(v51 + 1, p_shared_weak_owners));
    do
      v52 = __ldxr(p_shared_weak_owners);
    while (__stxr(v52 + 1, p_shared_weak_owners));
  }
  v53 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v53);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v53 + 8), (uint64_t)"current registration expires ", 29);
  *(_BYTE *)(v53 + 17) = 0;
  ims::formatTimeAndIntervalFromNow(*((ims **)this + 59), v53, v54);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v53 + 64))(v53, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v53 + 17) = 0;
  v55 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v55);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v55 + 8), (uint64_t)"will attempt re-registration ", 29);
  *(_BYTE *)(v55 + 17) = 0;
  ims::formatTimeAndIntervalFromNow(*((ims **)this + 61), v55, v56);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v55 + 8), (uint64_t)", give or take ", 15);
  *(_BYTE *)(v55 + 17) = 0;
  ims::formatTimeInterval((ims *)v41, &v67);
  LoggableString::LoggableString(&__p, &v67);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v55 + 40))(v55, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v55 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (v48)
  {
    v57 = (unint64_t *)&v48->__shared_weak_owners_;
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  v72 = 0;
  v59 = operator new(0x20uLL);
  *v59 = &off_1E78D7658;
  v59[1] = this;
  v59[2] = v49;
  v59[3] = v48;
  v72 = v59;
  SipTimerContainer::startTimer((_QWORD *)this + 27, (uint64_t)&qword_1ED70ED40, (uint64_t)v71, 1000 * v34, 1);
  v60 = v72;
  if (v72 == v71)
  {
    v61 = 4;
    v60 = v71;
  }
  else
  {
    if (!v72)
      goto LABEL_87;
    v61 = 5;
  }
  (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_87:
  if (v48)
  {
    v62 = (unint64_t *)&v48->__shared_weak_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v70 = 0;
  v64 = operator new(0x20uLL);
  *v64 = &off_1E78D7658;
  v64[1] = this;
  v64[2] = v49;
  v64[3] = v48;
  v70 = v64;
  SipTimerContainer::startTimer((_QWORD *)this + 27, (uint64_t)&_MergedGlobals_14, (uint64_t)v69, 1000 * v39, 1);
  v65 = v70;
  if (v70 == v69)
  {
    v66 = 4;
    v65 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_95;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_95:
  if (v48)
  {
    std::__shared_weak_count::__release_weak(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
}

void sub_1BF066618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipRegistrationClient::triggerRegistrationTermination(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  BOOL v8;
  uint64_t v9;
  const void *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  const void **v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  int v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  const void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  time_t v32;
  time_t v33;
  BOOL v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  __int128 v38;
  std::__shared_weak_count *v39[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;

  if (*(_DWORD *)(a1 + 528) == 2)
    goto LABEL_2;
  v16 = a1 + 16;
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(a1 + 16, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"triggerRegistrationTermination: not registered", 46);
  *(_BYTE *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v17 + 17) = 0;
  v18 = *(_QWORD *)(a1 + 360);
  v19 = *(std::__shared_weak_count **)(v18 + 16);
  if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
  {
    v21 = v20;
    v22 = *(unsigned __int8 *)(*(_QWORD *)(v18 + 8) + 2657);
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v21);
    }
    if (!v22)
      goto LABEL_2;
  }
  else if (!MEMORY[0xA61])
  {
    goto LABEL_2;
  }
  if (a2 != 24)
  {
    if (a2 == 23)
    {
      SipRegistrationClient::setClientState((_QWORD *)a1, 1u);
      *(_QWORD *)&v45 = 0;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      SipRegistrationPolicy::lastProxyResult(*(SipRegistrationPolicy **)(a1 + 3632), (uint64_t)&v41);
      v8 = (_DWORD)v42 != 403;
      if ((_DWORD)v42 == 403)
      {
        v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 64))(a1 + 16);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(a1 + 16, v25);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"Will NOT notify SD of connection termination following 403", 58);
        *(_BYTE *)(v25 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v25 + 17) = 0;
      }
      if (*(_DWORD *)(a1 + 3968) == SipRegistrationMode::kModeDisabled)
      {
        v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 64))(a1 + 16);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(a1 + 16, v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"Will NOT notify SD of connection termination due to Disabled registration mode", 78);
        *(_BYTE *)(v26 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v8 = 0;
        *(_BYTE *)(v26 + 17) = 0;
      }
      ImsResult::~ImsResult((ImsResult *)&v41);
LABEL_3:
      v9 = a1 + 3976;
      v10 = *(const void **)(a1 + 3976);
      if (!v10)
      {
        if ((a4 & 1) == 0)
          goto LABEL_44;
        goto LABEL_43;
      }
      if (!v11)
      {
        if (!a4)
          goto LABEL_44;
        goto LABEL_43;
      }
      goto LABEL_5;
    }
LABEL_2:
    v8 = 1;
    goto LABEL_3;
  }
  v9 = a1 + 3976;
  v28 = *(const void **)(a1 + 3976);
  if (!v28)
  {
    a3 = -1;
    v8 = 1;
    goto LABEL_43;
  }
  a3 = -1;
  a4 = 1;
  v8 = 1;
  if (!v11)
    goto LABEL_43;
LABEL_5:
  v12 = v11[1719];
  if ((v12 & 0x80u) == 0)
    v13 = v11[1719];
  else
    v13 = *((_QWORD *)v11 + 213);
  if (v13 != 7)
  {
LABEL_33:
    v27 = 0;
    goto LABEL_40;
  }
  v14 = (const void **)(v11 + 1696);
  if ((v12 & 0x80) != 0)
  {
    v27 = memcmp(*v14, &SipRegistrationMetrics::kReasonRefresh, *((_QWORD *)v11 + 213)) == 0;
LABEL_40:
    if (((a4 | v27) & 1) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
  if (v11[1719])
  {
    v15 = &SipRegistrationMetrics::kReasonRefresh;
    while (*(unsigned __int8 *)v14 == v15->__r_.__value_.__s.__data_[0])
    {
      v14 = (const void **)((char *)v14 + 1);
      v15 = (std::string *)((char *)v15 + 1);
      if (!--v12)
        goto LABEL_43;
    }
    goto LABEL_33;
  }
LABEL_43:
  SipRegistrationDeferralManager::cancel(v9);
LABEL_44:
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  SipContact::SipContact((uint64_t)&v41, 0);
  SipUri::operator=((SipUri *)((char *)&v43 + 8), a1 + 624);
  HIDWORD(v41) = 3;
  DWORD2(v69) = 0;
  DWORD2(v72) = 0;
  *(_OWORD *)v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v35, (_QWORD *)(a1 + 200));
  SipRegistrationTerminatedNotification::SipRegistrationTerminatedNotification((uint64_t)&v37, &v35, (uint64_t)&v41, a2);
  v29 = v36;
  if (v36)
  {
    v30 = (unint64_t *)&v36->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = time(0);
  if ((unint64_t)(a3 + 1) >= 2)
    v33 = v32;
  else
    v33 = 0;
  *((_QWORD *)&v37 + 1) = v32;
  *(_QWORD *)&v38 = v33 + a3;
  v34 = a2 != 20 && v8;
  BYTE8(v38) = v34;
  SipRegistrationClient::updateRegistrationState((SipRegistrationClient *)a1, (const SipRegistrationStateNotification *)&v37);
  *(_QWORD *)&v37 = &unk_1E78EFEC8;
  if ((_QWORD)v40)
    (*(void (**)(_QWORD))(*(_QWORD *)v40 + 8))(v40);
  *(_QWORD *)&v37 = &unk_1E78F0000;
  if (v39[1])
    std::__shared_weak_count::__release_weak(v39[1]);
  SipContact::~SipContact((SipContact *)&v41);
}

void sub_1BF066BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, char a19)
{
  ImsResult::~ImsResult((ImsResult *)&a19);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipRegistrationClient::triggerRegistrationTermination(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  SipRegistrationClient::triggerRegistrationTermination(a1 - 144, a2, a3, a4);
}

void SipRegistrationClient::terminateRegEvents(SipRegistrationClient *this)
{
  SipEventPackage *v2;

  SipRegistrationSubject::actionOnObservers((uint64_t)this + 152, (uint64_t)&__block_literal_global_182);
  *((_BYTE *)this + 608) = 0;
  v2 = (SipEventPackage *)*((_QWORD *)this + 58);
  if (v2)
    SipEventPackage::terminateWithoutUnsubscribing(v2);
}

void SipRegistrationClient::notifyDelegateOfRegistrationActive(SipRegistrationClient *this, const SipRegistrationActiveNotification *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  BOOL v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::string v22;
  char v23;

  if (((*(uint64_t (**)(SipRegistrationClient *))(*(_QWORD *)this + 248))(this) & 1) == 0)
  {
    v4 = *((_QWORD *)this + 45);
    v5 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v4 + 16));
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 136);
    if (*(char *)(v6 + 303) < 0)
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(v6 + 280), *(_QWORD *)(v6 + 288));
    else
      v22 = *(std::string *)(v6 + 280);
    v23 = *(_BYTE *)(v6 + 304);
    v7 = BambiClientStatus::operator!=((unsigned __int8 *)&v22, (unsigned __int8 *)&BambiClientStatus::kStatusInitialized);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (v9)
    {
      if (v7)
        return;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v7)
        return;
    }
  }
  v10 = *((_QWORD *)this + 57);
  v11 = *((_QWORD *)this + 45);
  v12 = *(std::__shared_weak_count **)(v11 + 16);
  if (!v12)
  {
    v13 = 0;
    goto LABEL_17;
  }
  v13 = std::__shared_weak_count::lock(v12);
  if (!v13)
  {
LABEL_17:
    v14 = 0;
    goto LABEL_18;
  }
  v14 = *(_QWORD *)(v11 + 8);
LABEL_18:
  if (*(char *)(v14 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(v14 + 4136), *(_QWORD *)(v14 + 4144));
  else
    v22 = *(std::string *)(v14 + 4136);
  (*(void (**)(uint64_t, std::string *, const SipRegistrationActiveNotification *))(*(_QWORD *)v10 + 16))(v10, &v22, a2);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (((*(uint64_t (**)(SipRegistrationClient *))(*(_QWORD *)this + 248))(this) & 1) == 0)
  {
    v17 = *((_QWORD *)this + 45);
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = 0uLL;
    v18 = *(std::__shared_weak_count **)(v17 + 16);
    if (v18)
    {
      v18 = std::__shared_weak_count::lock(v18);
      v19 = v18;
      v22.__r_.__value_.__l.__size_ = (std::string::size_type)v18;
      if (v18)
      {
        v18 = *(std::__shared_weak_count **)(v17 + 8);
        v22.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
      }
    }
    else
    {
      v19 = 0;
    }
    SipStack::handleRegistrationActive((SipStack *)v18);
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
}

void sub_1BF066ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL BambiClientStatus::operator!=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 1;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) != 0;
  if (a1[23])
  {
    v6 = v2 - 1;
    do
    {
      v8 = *a1++;
      v7 = v8;
      v9 = *a2++;
      v10 = v7 == v9;
      v2 = v7 != v9;
      v10 = !v10 || v6-- == 0;
    }
    while (!v10);
  }
  return v2;
}

void SipRegistrationClient::notifyDelegateOfRegistrationTermination(SipRegistrationClient *this, const SipRegistrationTerminatedNotification *a2, char a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::string v38;
  _BYTE v39[32];

  if (*((_QWORD *)this + 57))
  {
    memset(v39, 0, sizeof(v39));
    v6 = *((_QWORD *)this + 45);
    v7 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v6 + 16));
    v38.__r_.__value_.__l.__size_ = (std::string::size_type)v7;
    v38.__r_.__value_.__r.__words[0] = *(_QWORD *)(v6 + 8);
    v8 = *(_QWORD *)(v38.__r_.__value_.__r.__words[0] + 136);
    if (*(char *)(v8 + 303) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v39, *(const std::string::value_type **)(v8 + 280), *(_QWORD *)(v8 + 288));
    }
    else
    {
      *(_OWORD *)v39 = *(_OWORD *)(v8 + 280);
      *(_QWORD *)&v39[16] = *(_QWORD *)(v8 + 296);
    }
    v39[24] = *(_BYTE *)(v8 + 304);
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    if (((*(uint64_t (**)(SipRegistrationClient *))(*(_QWORD *)this + 248))(this) & 1) == 0)
    {
      v11 = *((_QWORD *)this + 45);
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = 0uLL;
      v12 = *(std::__shared_weak_count **)(v11 + 16);
      if (v12)
      {
        v12 = std::__shared_weak_count::lock(v12);
        v13 = v12;
        v38.__r_.__value_.__l.__size_ = (std::string::size_type)v12;
        if (v12)
        {
          v12 = *(std::__shared_weak_count **)(v11 + 8);
          v38.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
        }
      }
      else
      {
        v13 = 0;
      }
      SipStack::handleRegistrationTerminated((SipStack *)v12);
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    v16 = *((_QWORD *)this + 454);
    if (v16
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 472))(v16)
      && SipRegistrationNotification::secondsUntilNextRetry(a2) != -1)
    {
      v18 = *((_QWORD *)this + 2);
      v17 = (char *)this + 16;
      v19 = (*(uint64_t (**)(char *))(v18 + 32))(v17);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v17 + 16))(v17, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"dropping registration terminated notification while CSFB mode is enabled", 72);
      *(_BYTE *)(v19 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_36:
      *(_BYTE *)(v19 + 17) = 0;
LABEL_53:
      if ((v39[23] & 0x80000000) != 0)
        operator delete(*(void **)v39);
      return;
    }
    if ((a3 & 1) == 0)
    {
      v20 = *((_QWORD *)this + 45);
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = 0uLL;
      v21 = *(std::__shared_weak_count **)(v20 + 16);
      if (v21)
      {
        v21 = std::__shared_weak_count::lock(v21);
        v22 = v21;
        v38.__r_.__value_.__l.__size_ = (std::string::size_type)v21;
        if (v21)
        {
          v21 = *(std::__shared_weak_count **)(v20 + 8);
          v38.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
        }
      }
      else
      {
        v22 = 0;
      }
      v23 = SipStack::callCount((SipStack *)v21);
      v24 = v23;
      if (!v22)
        goto LABEL_32;
      v25 = (unint64_t *)&v22->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
        if (v24)
          goto LABEL_33;
      }
      else
      {
LABEL_32:
        if (v23)
        {
LABEL_33:
          v27 = *((_QWORD *)this + 491);
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
          v28 = operator new();
          SipRegistrationStateNotification::SipRegistrationStateNotification((SipRegistrationStateNotification *)v28, a2);
          *(_QWORD *)v28 = &off_1E78EFF10;
          *(_BYTE *)(v28 + 60) = 0;
          *(_DWORD *)(v28 + 56) = *((_DWORD *)a2 + 14);
          v30 = *((_QWORD *)this + 2);
          v29 = (_QWORD *)((char *)this + 16);
          v29[489] = v28;
          v19 = (*(uint64_t (**)(_QWORD *))(v30 + 32))(v29);
          (*(void (**)(_QWORD *, uint64_t))(*v29 + 16))(v29, v19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"delaying registration terminated notification until all calls have ended", 72);
          *(_BYTE *)(v19 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          goto LABEL_36;
        }
      }
    }
    v31 = *((_QWORD *)this + 57);
    v32 = *((_QWORD *)this + 45);
    v33 = *(std::__shared_weak_count **)(v32 + 16);
    if (v33)
    {
      v34 = std::__shared_weak_count::lock(v33);
      if (v34)
      {
        v35 = *(_QWORD *)(v32 + 8);
LABEL_43:
        if (*(char *)(v35 + 4159) < 0)
          std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(v35 + 4136), *(_QWORD *)(v35 + 4144));
        else
          v38 = *(std::string *)(v35 + 4136);
        (*(void (**)(uint64_t, std::string *, const SipRegistrationTerminatedNotification *, BOOL))(*(_QWORD *)v31 + 24))(v31, &v38, a2, *((_QWORD *)this + 497) != 0);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        if (v34)
        {
          v36 = (unint64_t *)&v34->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        goto LABEL_53;
      }
    }
    else
    {
      v34 = 0;
    }
    v35 = 0;
    goto LABEL_43;
  }
}

void sub_1BF06738C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL SipRegistrationClient::isImsOutageResponse(SipRegistrationClient *this, const SipResponse *a2)
{
  _BOOL8 v3;
  std::string __p;
  std::string v6;

  if (*((_DWORD *)this + 22) != 503)
    return 0;
  if (*((char *)this + 119) < 0)
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 12), *((_QWORD *)this + 13));
  else
    v6 = *(std::string *)((_BYTE *)this + 4);
  if (isImsOutageText((uint64_t)&v6))
  {
    v3 = 1;
  }
  else
  {
    SipMessage::reasonText(this, &__p);
    v3 = isImsOutageText((uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return v3;
}

void sub_1BF0674C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

BOOL isImsOutageText(uint64_t a1)
{
  const char *v2;
  char v3;
  void **v4;
  const char *v5;
  int v6;
  void *v7;
  const char *v8;
  _BOOL8 v9;
  _QWORD v11[2];
  char v12;
  void *__p[2];
  char v14;

  std::string::basic_string[abi:ne180100]<0>(__p, "IMS Outage");
  if (*(char *)(a1 + 23) >= 0)
    v2 = (const char *)a1;
  else
    v2 = *(const char **)a1;
  v3 = v14;
  if (v14 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (!strcasecmp(v2, (const char *)v4))
  {
    v9 = 1;
    if ((v3 & 0x80) == 0)
      return v9;
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(v11, "Service Unavailable: IMS Core Outage");
  if (*(char *)(a1 + 23) >= 0)
    v5 = (const char *)a1;
  else
    v5 = *(const char **)a1;
  v6 = v12;
  v7 = (void *)v11[0];
  if (v12 >= 0)
    v8 = (const char *)v11;
  else
    v8 = (const char *)v11[0];
  v9 = strcasecmp(v5, v8) == 0;
  if (v6 < 0)
    operator delete(v7);
  if (v14 < 0)
LABEL_17:
    operator delete(__p[0]);
  return v9;
}

void sub_1BF0675D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipRegistrationClient::handleResponse(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  int v13;
  capabilities::radio *ContactInResponse;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  const char *v25;
  uint64_t v26;
  _BOOL4 v27;
  _BOOL4 v28;
  int v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _BYTE *v33;
  ImsPrefs *v34;
  void **v35;
  _BOOL4 v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  SipRegistrationPolicy *v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  ImsPrefs *v59;
  void **DropRegistrationOn305ToAllProxiesKey;
  void *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  SipTransportLayer *v68;
  SipTransportLayer *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  unsigned __int8 *v75;
  const void *v76;
  const SipSecurityServerHeader *v77;
  int v78;
  int v79;
  _QWORD *v80;
  uint64_t v81;
  unsigned __int16 v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  void *HeaderWith;
  SipViaHop **v97;
  int v98;
  uint64_t v99;
  uint64_t *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  const SipUri *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  int v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  SipTransportLayer *v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  void *v124;
  SipViaHop **v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  std::string::size_type v132;
  _BOOL8 isWifi;
  unint64_t *v134;
  unint64_t v135;
  SipTransportLayer *v136;
  char *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  int v141;
  uint64_t v142;
  void **v143;
  uint64_t v144;
  void **v145;
  __int128 *v146;
  uint64_t v147;
  unsigned int v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  _WORD *v155;
  unsigned __int8 *v156;
  uint64_t v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  ImsPrefs *v165;
  const ImsPrefsKeyEnum *VerstatFeatureCapabilityKey;
  unint64_t *v167;
  unint64_t v168;
  std::string *v169;
  int v170;
  void *v171;
  std::string *v172;
  int v173;
  std::string *v174;
  int v175;
  void *v176;
  std::string *v177;
  int v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  std::__shared_weak_count *v181;
  ImsPrefs *v182;
  const ImsPrefsKeyEnum *SpamHeaderFeatureCapabilityKey;
  unint64_t *v184;
  unint64_t v185;
  std::string *v186;
  int v187;
  std::__shared_weak_count *v188;
  const char *v189;
  int v190;
  std::string *v191;
  int v192;
  std::__shared_weak_count *v193;
  const char *v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  std::__shared_weak_count *v205;
  std::__shared_weak_count *v206;
  int v207;
  unint64_t *v208;
  unint64_t v209;
  SipTransportLayer **v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  SipRegistrationEventPackage *v215;
  uint64_t v216;
  uint64_t v217;
  _BYTE *v218;
  uint64_t v219;
  _BYTE *v220;
  ImsPrefs *v221;
  void **v222;
  void *v223;
  int v224;
  unint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _BYTE *v233;
  SipIPSecTransportGroup *v234;
  uint64_t v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  SipTransportLayer *v240[2];
  __int128 v241;
  std::__shared_weak_count *v242[2];
  __int128 v243;
  _OWORD v244[5];
  void *v245[2];
  __int128 v246;
  __int128 v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  _BYTE __p[64];
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  SipContact *v275[2];
  __int128 v276;
  __int128 v277;
  __int128 v278;
  int v279;
  std::__shared_weak_count *v280;
  std::__shared_weak_count *v281;
  char v282;
  std::string v283;
  std::string v284;
  std::string __str;

  if (*a3 != *(_QWORD *)(a1 + 2792))
  {
    v5 = a1 + 16;
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 48))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"ignoring response from old transaction ", 39);
    *(_BYTE *)(v6 + 17) = 0;
    v7 = *a3 + *(_QWORD *)(*(_QWORD *)*a3 - 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v6);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    return 1;
  }
  v10 = *(_DWORD *)(a1 + 520);
  if (v10 == 6 || v10 == 9)
  {
    v13 = *(_DWORD *)(a2 + 88);
    if ((v13 - 200) <= 0x63)
    {
      ContactInResponse = (capabilities::radio *)SipRegistrationClient::findContactInResponse((const SipUri *)(a1 + 624), a2, 1);
      if (!ContactInResponse)
      {
        v15 = *(_QWORD *)(a1 + 360);
        *(_QWORD *)__p = 0;
        *(_QWORD *)&__p[8] = 0;
        v16 = *(std::__shared_weak_count **)(v15 + 16);
        if (v16)
        {
          v16 = std::__shared_weak_count::lock(v16);
          v17 = v16;
          *(_QWORD *)&__p[8] = v16;
          if (v16)
          {
            v16 = *(std::__shared_weak_count **)(v15 + 8);
            *(_QWORD *)__p = v16;
          }
        }
        else
        {
          v17 = 0;
        }
        v34 = (ImsPrefs *)SipStack::prefs((SipStack *)v16);
        v35 = (void **)ImsPrefs::getCheckContactHeaderOnRegisterResponseKey(v34);
        ContactInResponse = (capabilities::radio *)ImsPrefs::prefWithKey(v34, v35);
        if (ContactInResponse)
        {
          ContactInResponse = (capabilities::radio *)(*(uint64_t (**)(capabilities::radio *))(*(_QWORD *)ContactInResponse + 40))(ContactInResponse);
          v36 = (int)ContactInResponse;
        }
        else
        {
          v36 = *((_BYTE *)v35 + 57) != 0;
        }
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        if (v36)
        {
          v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 56))(a1 + 16);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v23);
          v24 = *(_QWORD **)(v23 + 8);
          v25 = "Incoming 200 response does not contain a recognized contact URI";
          v26 = 63;
          goto LABEL_50;
        }
      }
      if (!capabilities::radio::supportsRel16(ContactInResponse)
        || !SipRegistrationClient::nasImsRegInProgress((SipRegistrationClient *)a1))
      {
LABEL_112:
        HeaderWith = SipMessage::firstHeaderWithType<SipViaHeader>(a2);
        if (HeaderWith
          && (v97 = (SipViaHop **)*((_QWORD *)HeaderWith + 8), v97 != *((SipViaHop ***)HeaderWith + 9))
          && *v97)
        {
          v98 = SipViaHop::keep(*v97);
        }
        else
        {
          v98 = 0;
        }
        SipResultDomain::makeResult((_DWORD *)a2, (uint64_t)__p);
        SipRegistrationMetrics::registrationAttemptCompleted((SipRegistrationMetrics *)(a1 + 3800), (const ImsResult *)__p, v98);
        ImsResult::~ImsResult((ImsResult *)__p);
        if (*(_BYTE *)(a1 + 3648))
        {
          SipRegistrationClient::cleanUpRegistrationArtifacts((SipRegistrationClient *)a1);
        }
        else
        {
          SipUri::operator=((SipUri *)(a1 + 3216), a1 + 2808);
          v99 = *(_QWORD *)(a1 + 504);
          if (v99)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v99 + 176))(v99))
            {
              SipUserAgent::transportLayer(*(SipUserAgent **)(a1 + 360), __p);
              v100 = *(uint64_t **)__p;
              v101 = *(std::__shared_weak_count **)(a1 + 512);
              v238 = *(_QWORD *)(a1 + 504);
              v239 = v101;
              if (v101)
              {
                v102 = (unint64_t *)&v101->__shared_owners_;
                do
                  v103 = __ldxr(v102);
                while (__stxr(v103 + 1, v102));
              }
              SipTransportLayer::setIPSecTransport(v100, &v238);
              v104 = v239;
              if (v239)
              {
                v105 = (unint64_t *)&v239->__shared_owners_;
                do
                  v106 = __ldaxr(v105);
                while (__stlxr(v106 - 1, v105));
                if (!v106)
                {
                  ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                  std::__shared_weak_count::__release_weak(v104);
                }
              }
              v107 = *(std::__shared_weak_count **)&__p[8];
              if (*(_QWORD *)&__p[8])
              {
                v108 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
                do
                  v109 = __ldaxr(v108);
                while (__stlxr(v109 - 1, v108));
                if (!v109)
                {
                  ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                  std::__shared_weak_count::__release_weak(v107);
                }
              }
            }
            else
            {
              v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 32))(a1 + 16);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v110);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v110 + 8), (uint64_t)"received 200 response to REGISTER without a 401 challenge.  Unable to initialize new secure transport.", 102);
              *(_BYTE *)(v110 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v110 + 64))(v110, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v110 + 17) = 0;
            }
          }
          *(_QWORD *)__p = &off_1E78EC610;
          memset(&__p[8], 0, 48);
          SipResponse::associatedUris((SipResponse *)a2, (SipRouteSet *)__p);
          v111 = (const SipUri *)(*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 3632) + 344))(*(_QWORD *)(a1 + 3632), __p);
          SipUserAgent::setAssociatedUris(*(SipUserAgent **)(a1 + 360), (const SipRouteSet *)__p, v111);
          SipUserAgent::transportLayer(*(SipUserAgent **)(a1 + 360), v240);
          SipTransportLayer::setServiceRouteFromMessage(v240[0], (const SipMessage *)a2);
          v112 = (std::__shared_weak_count *)v240[1];
          if (v240[1])
          {
            v113 = (unint64_t *)((char *)v240[1] + 8);
            do
              v114 = __ldaxr(v113);
            while (__stlxr(v114 - 1, v113));
            if (!v114)
            {
              ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
              std::__shared_weak_count::__release_weak(v112);
            }
          }
          SipUserAgent::transportLayer(*(SipUserAgent **)(a1 + 360), v240);
          v115 = *(unsigned __int8 *)((*(uint64_t (**)(SipTransportLayer *))(*(_QWORD *)v240[0] + 16))(v240[0])
                                    + 442);
          v116 = (std::__shared_weak_count *)v240[1];
          if (v240[1])
          {
            v117 = (unint64_t *)((char *)v240[1] + 8);
            do
              v118 = __ldaxr(v117);
            while (__stlxr(v118 - 1, v117));
            if (!v118)
            {
              ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
              std::__shared_weak_count::__release_weak(v116);
            }
          }
          if (v115)
          {
            v119 = *(_QWORD *)(a1 + 360);
            v120 = *(std::__shared_weak_count **)(v119 + 16);
            if (v120)
            {
              v121 = (SipTransportLayer *)std::__shared_weak_count::lock(v120);
              v240[1] = v121;
              if (v121)
              {
                v122 = (std::__shared_weak_count *)v121;
                v123 = *(_QWORD *)(v119 + 8);
                v240[0] = (SipTransportLayer *)v123;
                if (v123)
                {
                  if (*(_BYTE *)(v123 + 2657))
                  {
                    v124 = SipMessage::firstHeaderWithType<SipViaHeader>(a2);
                    if (v124)
                    {
                      v125 = (SipViaHop **)*((_QWORD *)v124 + 8);
                      if (v125 != *((SipViaHop ***)v124 + 9))
                      {
                        if (*v125)
                        {
                          v126 = SipViaHop::keep(*v125);
                          if ((_DWORD)v126)
                          {
                            v127 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
                            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v127);
                            v128 = ImsOutStream::operator<<(v127, "Overriding CRLF-KeepAlive interval from REGISTER Via header to [");
                            std::ostream::operator<<();
                            *(_BYTE *)(v128 + 17) = 0;
                            v129 = *(_QWORD **)(v128 + 8);
                            __str.__r_.__value_.__s.__data_[0] = 44;
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)&__str, 1);
                            *(_BYTE *)(v128 + 17) = 0;
                            std::ostream::operator<<();
                            *(_BYTE *)(v128 + 17) = 0;
                            v130 = *(_QWORD **)(v128 + 8);
                            __str.__r_.__value_.__s.__data_[0] = 93;
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)&__str, 1);
                            *(_BYTE *)(v128 + 17) = 0;
                            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v128 + 64))(v128, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                            *(_BYTE *)(v128 + 17) = 0;
                            SipUserAgent::transportLayer(*(SipUserAgent **)(a1 + 360), &__str);
                            SipTransportLayer::updateCrlfKeepAliveInterval((SipTransportLayer *)__str.__r_.__value_.__l.__data_, (float)((float)((float)v126 * 80.0) / 100.0), v126);
                            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__str);
                            v131 = *(_QWORD *)(v123 + 136);
                            if (v131)
                            {
                              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
                              (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v131 + 104))(&__str);
                              v132 = __str.__r_.__value_.__r.__words[0];
                              if (__str.__r_.__value_.__r.__words[0])
                              {
                                isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v123 + 3136));
                                powerlog::PowerLogger::logLazuliSipRequest(*(_QWORD *)(v132 + 136), 1, isWifi, 4, v126);
                              }
                              std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__str);
                            }
                          }
                        }
                      }
                    }
                  }
                }
                v134 = (unint64_t *)&v122->__shared_owners_;
                do
                  v135 = __ldaxr(v134);
                while (__stlxr(v135 - 1, v134));
                if (!v135)
                {
                  ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                  std::__shared_weak_count::__release_weak(v122);
                }
              }
            }
          }
          SipRouteSet::~SipRouteSet((SipRouteSet *)__p);
        }
        *(_DWORD *)(a1 + 452) = 0;
        SipUserAgent::transportLayer(*(SipUserAgent **)(a1 + 360), v240);
        v136 = v240[0];
        if (*(_BYTE *)(a1 + 3648))
          v137 = "successful deregistration";
        else
          v137 = "successful registration";
        std::string::basic_string[abi:ne180100]<0>(__p, v137);
        SipTransportLayer::resetTransportErrors((uint64_t)v136, (const std::string *)__p);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        v138 = (std::__shared_weak_count *)v240[1];
        if (v240[1])
        {
          v139 = (unint64_t *)((char *)v240[1] + 8);
          do
            v140 = __ldaxr(v139);
          while (__stlxr(v140 - 1, v139));
          if (!v140)
          {
            ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
            std::__shared_weak_count::__release_weak(v138);
          }
        }
        *(_DWORD *)__p = 2 * (*(_BYTE *)(a1 + 3648) == 0);
        SipRegistrationClient::setRegistrationState(a1, (int *)__p, 0);
        SipRegistrationClient::setClientState((_QWORD *)a1, 1u);
        v141 = *(unsigned __int8 *)(a1 + 3648);
        v142 = SipRegistrationClient::findContactInResponse((const SipUri *)(a1 + 624), a2, 0);
        v279 = 0;
        v277 = 0u;
        v278 = 0u;
        *(_OWORD *)v275 = 0u;
        v276 = 0u;
        v273 = 0u;
        v274 = 0u;
        v271 = 0u;
        v272 = 0u;
        v269 = 0u;
        v270 = 0u;
        v267 = 0u;
        v268 = 0u;
        v265 = 0u;
        v266 = 0u;
        v263 = 0u;
        v264 = 0u;
        v261 = 0u;
        v262 = 0u;
        v259 = 0u;
        v260 = 0u;
        v257 = 0u;
        v258 = 0u;
        v255 = 0u;
        v256 = 0u;
        v253 = 0u;
        v254 = 0u;
        v251 = 0u;
        v252 = 0u;
        memset(__p, 0, sizeof(__p));
        SipContact::SipContact((uint64_t)__p, 0);
        SipMessage::headerValueAsUint32(a2, "Expires", &v279);
        if (v142)
        {
          v143 = (void **)(v142 + 432);
          if ((void **)(v142 + 432) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v142 + 424, (void **)"expires"))v279 = SipParameterMap::uintParameter(v142 + 416, (void **)"expires", 0);
          if (v143 != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v142 + 424, (void **)"pub-gruu"))
          {
            v144 = *(_QWORD *)(a1 + 360);
            v145 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v142 + 424, (void **)"pub-gruu");
            v146 = v143 == v145 ? &ims::kEmptyString : (__int128 *)(v145 + 7);
            ims::removeQuotes((uint64_t)v146, (std::string *)v240);
            SipUserAgent::setPublicGruu(v144, (std::string *)v240);
            if (SBYTE7(v241) < 0)
              operator delete(v240[0]);
          }
          SipUri::operator=((SipUri *)&__p[40], v142 + 8);
          DWORD2(v278) = *(_DWORD *)(v142 + 456);
          SipRegistrationClient::updateServiceMaskForContact((SipRegistrationClient *)a1, (SipContact *)__p);
        }
        else
        {
          if (!v141)
          {
            v163 = *(_QWORD *)(a1 + 16);
            v162 = a1 + 16;
            v164 = (*(uint64_t (**)(uint64_t))(v163 + 48))(v162);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v162 + 16))(v162, v164);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v164 + 8), (uint64_t)"couldn't find my contact in registration response", 49);
            *(_BYTE *)(v164 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v164 + 64))(v164, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v164 + 17) = 0;
LABEL_319:
            SipContact::~SipContact((SipContact *)__p);
            return 1;
          }
          SipUri::operator=((SipUri *)&__p[40], a1 + 624);
          DWORD2(v278) = 0;
        }
        if (v141 && v279)
        {
          v147 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v147);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v147 + 8), (uint64_t)"expected expiration of 0 but got ", 33);
          *(_BYTE *)(v147 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v147 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v147 + 64))(v147, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v147 + 17) = 0;
          v279 = 0;
          v148 = 3;
          LODWORD(v275[1]) = 0;
          *(_DWORD *)&__p[12] = 3;
        }
        else
        {
          LODWORD(v275[1]) = v279;
          if (v279)
          {
            *(_DWORD *)&__p[12] = 2;
            v246 = 0u;
            v247 = 0u;
            *(_OWORD *)v245 = 0u;
            memset(v244, 0, sizeof(v244));
            *(_OWORD *)v242 = 0u;
            v243 = 0u;
            *(_OWORD *)v240 = 0u;
            v241 = 0u;
            std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v248, (_QWORD *)(a1 + 200));
            SipRegistrationActiveNotification::SipRegistrationActiveNotification((uint64_t)v240, &v248, (uint64_t)__p, a1 + 3800, 0);
            v152 = v249;
            if (v249)
            {
              v153 = (unint64_t *)&v249->__shared_owners_;
              do
                v154 = __ldaxr(v153);
              while (__stlxr(v154 - 1, v153));
              if (!v154)
              {
                ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                std::__shared_weak_count::__release_weak(v152);
              }
            }
            SipRegistrationClient::updateRegistrationState((SipRegistrationClient *)a1, (const SipRegistrationStateNotification *)v240);
            *(_QWORD *)(a1 + 496) = time(0);
            v240[0] = (SipTransportLayer *)&off_1E78F0038;
            if (SHIBYTE(v246) < 0)
              operator delete(v245[1]);
            ImsResult::~ImsResult((ImsResult *)((char *)v244 + 8));
LABEL_203:
            v240[0] = (SipTransportLayer *)&unk_1E78EFEC8;
            if ((_QWORD)v243)
              (*(void (**)(_QWORD))(*(_QWORD *)v243 + 8))(v243);
            v240[0] = (SipTransportLayer *)&unk_1E78F0000;
            if (v242[1])
              std::__shared_weak_count::__release_weak(v242[1]);
            v155 = (_WORD *)(a1 + 4104);
            if (v141)
            {
              *v155 = 0;
            }
            else
            {
              memset(&__str, 0, sizeof(__str));
              v242[0] = (std::__shared_weak_count *)256;
              v240[1] = (SipTransportLayer *)&v241;
              v241 = 0uLL;
              v240[0] = (SipTransportLayer *)&off_1E78B82D8;
              std::string::basic_string[abi:ne180100]<0>(&v284, "Feature-Caps");
              v156 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a2 + 32), (unsigned __int8 *)&v284);
              if (v156)
              {
                v157 = *((_QWORD *)v156 + 5);
                if (v157)
                  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v157 + 40))(v157, &__str);
              }
              if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v284.__r_.__value_.__l.__data_);
              SipParameterMap::fromString((uint64_t)v240, &__str, 0, 0);
              memset(&v284, 0, sizeof(v284));
              v158 = *(_QWORD *)(a1 + 360);
              *(_OWORD *)&v283.__r_.__value_.__l.__data_ = 0uLL;
              v159 = *(std::__shared_weak_count **)(v158 + 16);
              if (v159)
              {
                v159 = std::__shared_weak_count::lock(v159);
                v160 = v159;
                v283.__r_.__value_.__l.__size_ = (std::string::size_type)v159;
                if (v159)
                {
                  v159 = *(std::__shared_weak_count **)(v158 + 8);
                  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v159;
                }
              }
              else
              {
                v160 = 0;
              }
              v165 = (ImsPrefs *)SipStack::prefs((SipStack *)v159);
              VerstatFeatureCapabilityKey = (const ImsPrefsKeyEnum *)ImsPrefs::getVerstatFeatureCapabilityKey(v165);
              ImsPrefs::stringValue(v165, VerstatFeatureCapabilityKey, &v284);
              if (v160)
              {
                v167 = (unint64_t *)&v160->__shared_owners_;
                do
                  v168 = __ldaxr(v167);
                while (__stlxr(v168 - 1, v167));
                if (!v168)
                {
                  ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                  std::__shared_weak_count::__release_weak(v160);
                }
              }
              std::string::basic_string[abi:ne180100]<0>(&v283, "Dynamic");
              if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v169 = &v284;
              else
                v169 = (std::string *)v284.__r_.__value_.__r.__words[0];
              v170 = SHIBYTE(v283.__r_.__value_.__r.__words[2]);
              v171 = (void *)v283.__r_.__value_.__r.__words[0];
              if ((v283.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v172 = &v283;
              else
                v172 = (std::string *)v283.__r_.__value_.__r.__words[0];
              v173 = strcasecmp((const char *)v169, (const char *)v172);
              if (v170 < 0)
                operator delete(v171);
              if (v173)
              {
                std::string::basic_string[abi:ne180100]<0>(&v283, "Enabled");
                if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v174 = &v284;
                else
                  v174 = (std::string *)v284.__r_.__value_.__r.__words[0];
                v175 = SHIBYTE(v283.__r_.__value_.__r.__words[2]);
                v176 = (void *)v283.__r_.__value_.__r.__words[0];
                if ((v283.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v177 = &v283;
                else
                  v177 = (std::string *)v283.__r_.__value_.__r.__words[0];
                v178 = strcasecmp((const char *)v174, (const char *)v177);
                if (v175 < 0)
                  operator delete(v176);
                if (v178)
                  *(_BYTE *)v155 = 0;
                else
                  *(_BYTE *)v155 = 1;
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(&v283, "+g.3gpp.verstat");
                *(_BYTE *)v155 = &v241 != (__int128 *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&v240[1], (void **)&v283.__r_.__value_.__l.__data_);
                if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v283.__r_.__value_.__l.__data_);
              }
              memset(&v283, 0, sizeof(v283));
              v179 = *(_QWORD *)(a1 + 360);
              v280 = 0;
              v281 = 0;
              v180 = *(std::__shared_weak_count **)(v179 + 16);
              if (v180)
              {
                v180 = std::__shared_weak_count::lock(v180);
                v181 = v180;
                v281 = v180;
                if (v180)
                {
                  v180 = *(std::__shared_weak_count **)(v179 + 8);
                  v280 = v180;
                }
              }
              else
              {
                v181 = 0;
              }
              v182 = (ImsPrefs *)SipStack::prefs((SipStack *)v180);
              SpamHeaderFeatureCapabilityKey = (const ImsPrefsKeyEnum *)ImsPrefs::getSpamHeaderFeatureCapabilityKey(v182);
              ImsPrefs::stringValue(v182, SpamHeaderFeatureCapabilityKey, &v283);
              if (v181)
              {
                v184 = (unint64_t *)&v181->__shared_owners_;
                do
                  v185 = __ldaxr(v184);
                while (__stlxr(v185 - 1, v184));
                if (!v185)
                {
                  ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                  std::__shared_weak_count::__release_weak(v181);
                }
              }
              std::string::basic_string[abi:ne180100]<0>(&v280, "Dynamic");
              if ((v283.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v186 = &v283;
              else
                v186 = (std::string *)v283.__r_.__value_.__r.__words[0];
              v187 = v282;
              v188 = v280;
              if (v282 >= 0)
                v189 = (const char *)&v280;
              else
                v189 = (const char *)v280;
              v190 = strcasecmp((const char *)v186, v189);
              if (v187 < 0)
                operator delete(v188);
              if (v190)
              {
                std::string::basic_string[abi:ne180100]<0>(&v280, "Enabled");
                if ((v283.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v191 = &v283;
                else
                  v191 = (std::string *)v283.__r_.__value_.__r.__words[0];
                v192 = v282;
                v193 = v280;
                if (v282 >= 0)
                  v194 = (const char *)&v280;
                else
                  v194 = (const char *)v280;
                v195 = strcasecmp((const char *)v191, v194);
                if (v192 < 0)
                  operator delete(v193);
                if (v195)
                  *(_BYTE *)(a1 + 4105) = 0;
                else
                  *(_BYTE *)(a1 + 4105) = 1;
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(&v280, "+sip.call-info.spam");
                *(_BYTE *)(a1 + 4105) = &v241 != (__int128 *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&v240[1], (void **)&v280);
                if (v282 < 0)
                  operator delete(v280);
              }
              v196 = a1 + 16;
              v197 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v197);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v197 + 8), (uint64_t)"Carrier incoming call validations is ", 37);
              *(_BYTE *)(v197 + 17) = 0;
              if (*(_BYTE *)v155)
                v198 = "enabled";
              else
                v198 = "disabled";
              if (*(_BYTE *)v155)
                v199 = 7;
              else
                v199 = 8;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v197 + 8), (uint64_t)v198, v199);
              *(_BYTE *)(v197 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v197 + 8), (uint64_t)" for this registration", 22);
              *(_BYTE *)(v197 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v197 + 64))(v197, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v197 + 17) = 0;
              v200 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v196 + 64))(a1 + 16);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v196 + 16))(a1 + 16, v200);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v200 + 8), (uint64_t)"Carrier spam header reporting is ", 33);
              *(_BYTE *)(v200 + 17) = 0;
              if (*(_BYTE *)(a1 + 4105))
                v201 = "enabled";
              else
                v201 = "disabled";
              if (*(_BYTE *)(a1 + 4105))
                v202 = 7;
              else
                v202 = 8;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v200 + 8), (uint64_t)v201, v202);
              *(_BYTE *)(v200 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v200 + 8), (uint64_t)" for this registration", 22);
              *(_BYTE *)(v200 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v200 + 64))(v200, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v200 + 17) = 0;
              if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v283.__r_.__value_.__l.__data_);
              if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v284.__r_.__value_.__l.__data_);
              v240[0] = (SipTransportLayer *)&off_1E78B82D8;
              std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v240[1], (_QWORD *)v241);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
            }
            v203 = *(_QWORD *)(a1 + 360);
            v204 = *(std::__shared_weak_count **)(v203 + 16);
            if (v204 && (v205 = std::__shared_weak_count::lock(v204)) != 0)
            {
              v206 = v205;
              v207 = *(_DWORD *)(*(_QWORD *)(v203 + 8) + 200);
              v208 = (unint64_t *)&v205->__shared_owners_;
              do
                v209 = __ldaxr(v208);
              while (__stlxr(v209 - 1, v208));
              if (!v209)
              {
                ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                std::__shared_weak_count::__release_weak(v206);
              }
              if (v207 != 2)
                goto LABEL_311;
            }
            else if (MEMORY[0xC8] != 2)
            {
LABEL_311:
              *(_DWORD *)(a1 + 3984) = *(_DWORD *)(a1 + 1104);
              v211 = a1 + 3992;
              std::string::operator=((std::string *)(a1 + 3992), (const std::string *)(a1 + 536));
              std::string::operator=((std::string *)(a1 + 4016), (const std::string *)(a1 + 560));
              *(_BYTE *)(a1 + 4056) = *(_BYTE *)(a1 + 600);
              *(_OWORD *)(a1 + 4040) = *(_OWORD *)(a1 + 584);
              std::string::basic_string[abi:ne180100]<0>(&__str, "sip.defer");
              std::string::basic_string[abi:ne180100]<0>(&v284, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v212 = ImsLogger::debug(ims::_logger, (uint64_t)&__str, (uint64_t)&v284);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v212 + 8), (uint64_t)"Updating current state: (", 25);
              *(_BYTE *)(v212 + 17) = 0;
              v213 = *(_DWORD *)(a1 + 3984);
              std::string::basic_string[abi:ne180100]<0>(&v280, ",");
              BambiServices::namesForServiceMask(v213, (uint64_t)&v280, &v283);
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v212 + 32))(v212, &v283);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v212 + 8), (uint64_t)", ", 2);
              *(_BYTE *)(v212 + 17) = 0;
              v214 = ims::operator<<(v212, v211);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v214 + 8), (uint64_t)")", 1);
              *(_BYTE *)(v214 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v214 + 64))(v214, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v214 + 17) = 0;
              if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v283.__r_.__value_.__l.__data_);
              if (v282 < 0)
                operator delete(v280);
              if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v284.__r_.__value_.__l.__data_);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              goto LABEL_319;
            }
            if (v141)
            {
              v210 = (SipTransportLayer **)&__block_literal_global_6;
            }
            else
            {
              v240[0] = (SipTransportLayer *)MEMORY[0x1E0C809B0];
              v240[1] = (SipTransportLayer *)0x40000000;
              *(_QWORD *)&v241 = ___ZN21SipRegistrationClient30updateRegistrationFromResponseERK11SipResponseb_block_invoke;
              *((_QWORD *)&v241 + 1) = &__block_descriptor_tmp_89_0;
              v242[0] = (std::__shared_weak_count *)a1;
              v210 = v240;
            }
            SipRegistrationSubject::actionOnObservers(a1 + 152, (uint64_t)v210);
            SipRegistrationClient::updateExpirationTimer((SipRegistrationClient *)a1, (const SipContact *)LODWORD(v275[1]));
            if (LODWORD(v275[1]))
            {
              (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
              *(_BYTE *)(a1 + 608) = 1;
            }
            else if (*(_QWORD *)(a1 + 464))
            {
              SipRegistrationSubject::actionOnObservers(a1 + 152, (uint64_t)&__block_literal_global_180);
              v215 = *(SipRegistrationEventPackage **)(a1 + 464);
              if (v215)
              {
                SipRegistrationEventPackage::unsubscribe(v215);
                *(_QWORD *)(a1 + 464) = 0;
              }
            }
            goto LABEL_311;
          }
          v148 = 3;
          *(_DWORD *)&__p[12] = 3;
          if (!v141)
          {
            v161 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v161);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v161 + 8), (uint64_t)"got expires = 0 for a registration. Treating it as a terminated notification.", 77);
            *(_BYTE *)(v161 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v161 + 64))(v161, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v161 + 17) = 0;
            v148 = 1;
          }
        }
        *(_OWORD *)v242 = 0u;
        v243 = 0u;
        *(_OWORD *)v240 = 0u;
        v241 = 0u;
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v248, (_QWORD *)(a1 + 200));
        SipRegistrationTerminatedNotification::SipRegistrationTerminatedNotification((uint64_t)v240, &v248, (uint64_t)__p, v148);
        v149 = v249;
        if (v249)
        {
          v150 = (unint64_t *)&v249->__shared_owners_;
          do
            v151 = __ldaxr(v150);
          while (__stlxr(v151 - 1, v150));
          if (!v151)
          {
            ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
            std::__shared_weak_count::__release_weak(v149);
          }
        }
        SipRegistrationClient::updateRegistrationState((SipRegistrationClient *)a1, (const SipRegistrationStateNotification *)v240);
        *(_QWORD *)(a1 + 496) = 0;
        goto LABEL_203;
      }
      v45 = *(_QWORD *)(a1 + 360);
      v46 = *(std::__shared_weak_count **)(v45 + 16);
      if (v46 && (v47 = std::__shared_weak_count::lock(v46)) != 0)
      {
        v48 = v47;
        v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 8) + 136) + 240);
        v50 = (unint64_t *)&v47->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      else
      {
        v49 = *(_QWORD *)(MEMORY[0x88] + 240);
      }
      if (!v49 || !*(_QWORD *)(v49 + 8) || !*(_BYTE *)(v49 + 72))
      {
LABEL_111:
        SipRegistrationClient::nasImsRegStop((SipRegistrationClient *)a1);
        goto LABEL_112;
      }
      v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v63 + 8), (uint64_t)"handleSuccessResponse: RegAccessCheck done", 42);
      *(_BYTE *)(v63 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v63 + 64))(v63, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v63 + 17) = 0;
      v64 = *(_QWORD *)(a1 + 360);
      *(_QWORD *)&__p[8] = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v64 + 16));
      *(_QWORD *)__p = *(_QWORD *)(v64 + 8);
      v65 = *(unsigned int *)(*(_QWORD *)__p + 4076);
      v66 = *(_QWORD *)(a1 + 360);
      v240[0] = 0;
      v240[1] = 0;
      v67 = *(std::__shared_weak_count **)(v66 + 16);
      if (v67)
      {
        v68 = (SipTransportLayer *)std::__shared_weak_count::lock(v67);
        v240[1] = v68;
        if (v68)
        {
          v69 = *(SipTransportLayer **)(v66 + 8);
          v240[0] = v69;
          goto LABEL_101;
        }
      }
      else
      {
        v68 = 0;
      }
      v69 = 0;
LABEL_101:
      IMSNasDeviceClient::reportCallStatus(v49, v65, 2, 64, (uint64_t)v69 + 3136, 1, 0);
      if (v68)
      {
        v92 = (unint64_t *)((char *)v68 + 8);
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          (*(void (**)(SipTransportLayer *))(*(_QWORD *)v68 + 16))(v68);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v68);
        }
      }
      if (*(_QWORD *)&__p[8])
      {
        v94 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)&__p[8] + 16))(*(_QWORD *)&__p[8]);
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[8]);
        }
      }
      goto LABEL_111;
    }
    switch(v13)
    {
      case 494:
        goto LABEL_33;
      case 423:
        *(_DWORD *)__p = 0;
        if (SipMessage::headerValueAsUint32(a2, "Min-Expires", __p))
        {
          *(_DWORD *)(a1 + 1148) = *(_DWORD *)__p;
          SipRegistrationClient::retryRegistrationAfterProceduralError((SipRegistrationClient *)a1);
          return 1;
        }
        v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 48))(a1 + 16);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v52);
        v33 = (_BYTE *)ImsOutStream::operator<<(v52, "got a 423 response with no Min-Expires.  Will throttle and retry with expires = ");
        std::ostream::operator<<();
        v33[17] = 0;
        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        goto LABEL_60;
      case 401:
        v20 = a1 + 16;
        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(a1 + 16, v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"received 401 Unauthorized response to registration request.", 59);
        *(_BYTE *)(v21 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v21 + 17) = 0;
        if (*(_DWORD *)(a1 + 452) >= *(_DWORD *)(a1 + 2116))
        {
          v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 56))(a1 + 16);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v53);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v53 + 8), (uint64_t)"too many auth retries.  Giving up.", 34);
          *(_BYTE *)(v53 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v53 + 64))(v53, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v53 + 17) = 0;
          *(_DWORD *)(a1 + 452) = 0;
          SipAuthClient::clear(*(SipAuthClient **)(*(_QWORD *)(a1 + 360) + 280));
          goto LABEL_62;
        }
        v22 = *(_QWORD *)(a1 + 504);
        if (v22)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 176))(v22))
          {
            v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 56))(a1 + 16);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v23);
            v24 = *(_QWORD **)(v23 + 8);
            v25 = "can't handle multiple 401 responses for the same SAs";
            v26 = 52;
LABEL_50:
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
            *(_BYTE *)(v23 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v23 + 17) = 0;
LABEL_62:
            SipRegistrationClient::handleErrorResponse((SipRegistrationClient *)a1, (const SipResponse *)a2);
            return 1;
          }
          v75 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a2 + 32), "Security-Server");
          if (!v75
            || (v76 = (const void *)*((_QWORD *)v75 + 5)) == 0
          {
            v79 = 1;
LABEL_95:
            v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 56))(a1 + 16);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(a1 + 16, v88);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v88 + 8), (uint64_t)"unable to initialize IPSec SAs.  Failing registration.", 54);
            *(_BYTE *)(v88 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v88 + 64))(v88, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v88 + 17) = 0;
            if (v79)
            {
              v89 = *(_QWORD *)(a1 + 360);
              *(_QWORD *)__p = 0;
              *(_QWORD *)&__p[8] = 0;
              v90 = *(std::__shared_weak_count **)(v89 + 16);
              if (v90)
              {
                v90 = std::__shared_weak_count::lock(v90);
                v91 = v90;
                *(_QWORD *)&__p[8] = v90;
                if (v90)
                {
                  v90 = *(std::__shared_weak_count **)(v89 + 8);
                  *(_QWORD *)__p = v90;
                }
              }
              else
              {
                v91 = 0;
              }
              v221 = (ImsPrefs *)SipStack::prefs((SipStack *)v90);
              v222 = (void **)ImsPrefs::getResetCallIdOn401WithoutSecurityServerKey(v221);
              v223 = ImsPrefs::prefWithKey(v221, v222);
              if (v223)
                v224 = (*(uint64_t (**)(void *))(*(_QWORD *)v223 + 40))(v223);
              else
                v224 = *((_BYTE *)v222 + 57) != 0;
              if (v91)
              {
                v225 = (unint64_t *)&v91->__shared_owners_;
                do
                  v226 = __ldaxr(v225);
                while (__stlxr(v226 - 1, v225));
                if (!v226)
                {
                  ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                  std::__shared_weak_count::__release_weak(v91);
                }
              }
              if (v224)
                SipRegistrationClient::resetCallIdAndCseq((SipRegistrationClient *)a1, 1);
            }
            goto LABEL_62;
          }
          SipIPSecTransportGroup::updateFromSecurityServerHeader(*(SipIPSecTransportGroup **)(a1 + 504), v77, (uint64_t)__p);
          v78 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)&__p[8] + 24))(*(_QWORD *)&__p[8], *(unsigned int *)&__p[16]);
          ImsResult::~ImsResult((ImsResult *)__p);
          if (v78)
          {
            v79 = 0;
            goto LABEL_95;
          }
          v234 = *(SipIPSecTransportGroup **)(a1 + 504);
          v235 = SipUserAgent::config(*(SipUserAgent **)(a1 + 360));
          v236 = SipTimers::timerValue((SipTimers *)(v235 + 512), (const SipTimer *)&SipTimers::kTimerRegAwaitAuth, 0);
          SipIPSecTransportGroup::updateExpiration(v234, v236 / 0x3E8);
        }
        SipRegistrationClient::setClientState((_QWORD *)a1, 7u);
        if ((SipAuthClient::handleUnauthorizedResponse(*(SipAuthClient **)(*(_QWORD *)(a1 + 360) + 280), (const SipResponse *)a2, (SipAuthChallengeSource *)(a1 + 136)) & 1) == 0)SipRegistrationClient::handleErrorResponse((SipRegistrationClient *)a1, (const SipResponse *)a2);
        v237 = *(_QWORD *)(a1 + 3632);
        if (v237)
          (*(void (**)(uint64_t))(*(_QWORD *)v237 + 360))(v237);
        return 1;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "sec-agree");
    v27 = SipMessage::requiresOption(a2, (void **)__p);
    v28 = *(_DWORD *)(a2 + 88) == 421 && v27;
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (v28)
    {
LABEL_33:
      SipUserAgent::transportLayer(*(SipUserAgent **)(a1 + 360), __p);
      v29 = *(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)__p + 16))(*(_QWORD *)__p) + 438);
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      if (v29)
      {
        v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 56))(a1 + 16);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v30);
        v31 = "Received security agreement error, but IPSec is enabled";
        v32 = v30;
LABEL_35:
        v33 = (_BYTE *)ImsOutStream::operator<<(v32, v31);
        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_60:
        v33[17] = 0;
        goto LABEL_62;
      }
      SipUserAgent::transportLayer(*(SipUserAgent **)(a1 + 360), __p);
      v37 = *(_QWORD *)(*(_QWORD *)__p + 264);
      if (v37)
      {
        v38 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, 1);
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        v39 = a1 + 16;
        if ((v38 & 1) != 0)
        {
          v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v40);
          v41 = (_BYTE *)ImsOutStream::operator<<(v40, "Received security agreement error. Enabling IPSec and retrying");
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v41[17] = 0;
          v42 = *(_QWORD *)(a1 + 360);
          *(_QWORD *)&__p[8] = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v42 + 16));
          *(_QWORD *)__p = *(_QWORD *)(v42 + 8);
          v8 = 1;
          *(_BYTE *)(*(_QWORD *)__p + 2022) = 1;
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)__p);
          SipRegistrationClient::retryRegistrationAfterProceduralError((SipRegistrationClient *)a1);
          return v8;
        }
      }
      else
      {
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        v39 = a1 + 16;
      }
      v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 56))(v39);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(v39, v73);
      v74 = (_BYTE *)ImsOutStream::operator<<(v73, "Received security agreement error and IPSec is unavailable for use");
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v74 + 64))(v74, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v74[17] = 0;
      SipResultDomain::makeResult((_DWORD *)a2, (uint64_t)__p);
      SipRegistrationClient::handleRegistrationError((SipRegistrationClient *)a1, (uint64_t **)__p, -1, 1, 0);
LABEL_343:
      ImsResult::~ImsResult((ImsResult *)__p);
      return 1;
    }
    v54 = *(_DWORD *)(a2 + 88);
    if (v54 != 305)
    {
      if (v54 < 0x12C)
        return 1;
      v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 32))(a1 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v70);
      v71 = ImsOutStream::operator<<(v70, "got a non-success response (code = ");
      std::ostream::operator<<();
      *(_BYTE *)(v71 + 17) = 0;
      v72 = ImsOutStream::operator<<(v71, ", class = ");
      std::ostream::operator<<();
      *(_BYTE *)(v72 + 17) = 0;
      v31 = ")";
      v32 = v72;
      goto LABEL_35;
    }
    *(_QWORD *)&v251 = 0;
    memset(__p, 0, sizeof(__p));
    SipResultDomain::makeResult((_DWORD *)a2, (uint64_t)__p);
    v55 = *(SipRegistrationPolicy **)(a1 + 3632);
    v56 = *((_QWORD *)v55 + 54);
    if (v56 && v56 != *((_QWORD *)v55 + 55))
    {
      ImsResult::operator=(v56 + 480 * *((_QWORD *)v55 + 57) + 408, (uint64_t)__p);
      v55 = *(SipRegistrationPolicy **)(a1 + 3632);
    }
    if (SipRegistrationPolicy::allProxiesHaveError(v55, (const ImsResult *)__p))
    {
      v57 = *(_QWORD *)(a1 + 360);
      v240[0] = 0;
      v240[1] = 0;
      v58 = *(std::__shared_weak_count **)(v57 + 16);
      if (v58)
      {
        v58 = std::__shared_weak_count::lock(v58);
        v240[1] = (SipTransportLayer *)v58;
        if (v58)
        {
          v58 = *(std::__shared_weak_count **)(v57 + 8);
          v240[0] = (SipTransportLayer *)v58;
        }
      }
      v59 = (ImsPrefs *)SipStack::prefs((SipStack *)v58);
      DropRegistrationOn305ToAllProxiesKey = (void **)ImsPrefs::getDropRegistrationOn305ToAllProxiesKey(v59);
      v61 = ImsPrefs::prefWithKey(v59, DropRegistrationOn305ToAllProxiesKey);
      if (v61)
        v62 = (*(uint64_t (**)(void *))(*(_QWORD *)v61 + 40))(v61);
      else
        v62 = *((unsigned __int8 *)DropRegistrationOn305ToAllProxiesKey + 57);
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v240);
      v216 = a1 + 16;
      if (v62)
      {
        v217 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v216 + 48))(a1 + 16);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v216 + 16))(a1 + 16, v217);
        v218 = (_BYTE *)ImsOutStream::operator<<(v217, "received redirects from all proxies. Dropping registration.");
        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v218 + 64))(v218, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v218[17] = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 168))(a1, 19, -1, 0);
      }
      else
      {
        v219 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v216 + 48))(a1 + 16);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v216 + 16))(a1 + 16, v219);
        v220 = (_BYTE *)ImsOutStream::operator<<(v219, "received redirects from all proxies. Resetting PDN.");
        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v220 + 64))(v220, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v220[17] = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
      }
      goto LABEL_343;
    }
    v80 = SipMessage::header<SipContactHeader>(a2);
    if (v80)
    {
      v81 = v80[9];
      if (v81)
      {
        if (v81 != v80[10])
        {
          v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
          v83 = SipHost::equalsWithDefaultPort((SipHost *)(v81 + 16), (const SipHost *)(a1 + 2816), v82);
          v85 = a1 + 16;
          v84 = *(_QWORD *)(a1 + 16);
          if (v83)
          {
            v86 = (*(uint64_t (**)(uint64_t))(v84 + 56))(a1 + 16);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v85 + 16))(a1 + 16, v86);
            v87 = (_BYTE *)ImsOutStream::operator<<(v86, "received redirect to our current proxy. Let's just skip to the next one.");
            (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v87 + 64))(v87, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
          else
          {
            v227 = (*(uint64_t (**)(uint64_t))(v84 + 64))(a1 + 16);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v85 + 16))(a1 + 16, v227);
            v228 = ImsOutStream::operator<<(v227, "using proxy ");
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v81 + 8) + 40))(v81 + 8, v228);
            v229 = ImsOutStream::operator<<(v228, " from 305 response");
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v229 + 64))(v229, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v229 + 17) = 0;
            SipRegistrationPolicy::setProxy(*(SipRegistrationPolicy **)(a1 + 3632), (const SipUri *)(v81 + 8), (uint64_t)v240);
            LOBYTE(v229) = (*(uint64_t (**)(SipTransportLayer *, _QWORD))(*(_QWORD *)v240[1] + 24))(v240[1], v241);
            ImsResult::~ImsResult((ImsResult *)v240);
            if ((v229 & 1) == 0)
            {
LABEL_342:
              SipRegistrationClient::retryRegistrationAfterProceduralError((SipRegistrationClient *)a1);
              goto LABEL_343;
            }
            v230 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 56))(a1 + 16);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v85 + 16))(a1 + 16, v230);
            v231 = ImsOutStream::operator<<(v230, "unable to select proxy ");
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v81 + 8) + 40))(v81 + 8, v231);
            v87 = (_BYTE *)ImsOutStream::operator<<(v231, ". Let's just skip to the next one.");
            (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v87 + 64))(v87, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
          v87[17] = 0;
        }
      }
    }
    v232 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v232);
    v233 = (_BYTE *)ImsOutStream::operator<<(v232, "skipping to next proxy");
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v233 + 64))(v233, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v233[17] = 0;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 3632) + 504))(*(_QWORD *)(a1 + 3632));
    goto LABEL_342;
  }
  if (v10 != 10)
  {
    v18 = a1 + 16;
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 48))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(a1 + 16, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"received unexpected REGISTER response while in state ", 53);
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v19 + 32))(v19, &clientStateNames[24 * *(unsigned int *)(a1 + 520)]);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v19 + 17) = 0;
  }
  SipRegistrationClient::setClientState((_QWORD *)a1, 1u);
  return 0;
}

void sub_1BF069624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v42 - 104);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  SipRouteSet::~SipRouteSet((SipRouteSet *)&__p);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::retryRegistrationAfterProceduralError(SipRegistrationClient *a1)
{
  uint64_t v2;

  SipRegistrationClient::cleanUpRegistrationArtifacts(a1);
  v2 = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)a1 + 2) + 64))((_QWORD *)a1 + 2);
  (*(void (**)(_QWORD *, uint64_t))(*((_QWORD *)a1 + 2) + 16))((_QWORD *)a1 + 2, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"this is where I will cancel throttling", 38);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  SipRegistrationClient::internalRetryRegistration((uint64_t)a1);
}

void SipRegistrationClient::internalRetryRegistration(uint64_t a1)
{
  char v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  _BYTE v12[72];
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 3632) + 416))(*(_QWORD *)(a1 + 3632));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v3);
  v4 = *(_QWORD **)(v3 + 8);
  if ((v2 & 1) == 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"not retrying emergency registration", 35);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    return;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"retrying registration with proxy (", 34);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 2808) + 40))(a1 + 2808, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)")", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (*(_QWORD *)(a1 + 3632))
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"current policy info:", 20);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 3632) + 392))(*(_QWORD *)(a1 + 3632), v5);
  }
  if (SipRegistrationClient::shouldDeferRegistration((SipRegistrationClient *)a1))
  {
    v6 = (_QWORD *)(a1 + 200);
    if (*(_BYTE *)(a1 + 3648))
    {
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v15, v6);
      SipRegistrationDeferralManager::deferAction((_DWORD *)(a1 + 3976), (uint64_t)&v15);
      v7 = v16;
      if (!v16)
        return;
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
    }
    else
    {
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v13, v6);
      SipRegistrationDeferralManager::deferAction((uint64_t *)(a1 + 3976), &v13, a1 + 1112, (unsigned __int8 *)(a1 + 3896));
      v7 = v14;
      if (!v14)
        return;
      v11 = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(v11);
      while (__stlxr(v9 - 1, v11));
    }
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    if (*(_QWORD *)(a1 + 3632))
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"internalRetryRegistration: setting to policy SipRegClientRegType::RetryReg", 74);
      *(_BYTE *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v10 + 17) = 0;
      *(_DWORD *)(*(_QWORD *)(a1 + 3632) + 2348) = 3;
    }
    SipRegistrationClient::initializeTransport((SipRegistrationClient *)v12, a1);
    ImsResult::~ImsResult((ImsResult *)v12);
  }
}

void sub_1BF069C3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::forceRetry(SipRegistrationClient *this)
{
  _QWORD *v2;
  uint64_t v3;
  SipTransaction *v4;

  v2 = (_QWORD *)((char *)this + 16);
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(_QWORD *, uint64_t))(*v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"retry forced by policy", 22);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  v4 = (SipTransaction *)v2[347];
  if (v4)
    SipTransaction::abort(v4);
  SipRegistrationClient::cleanUpRegistrationArtifacts(this);
  SipRegistrationClient::internalRetryRegistration((uint64_t)this);
}

void `non-virtual thunk to'SipRegistrationClient::forceRetry(SipRegistrationClient *this)
{
  SipRegistrationClient::forceRetry((SipRegistrationClient *)((char *)this - 144));
}

uint64_t SipRegistrationClient::shouldDeferRegistration(SipRegistrationClient *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  _BOOL4 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  std::__shared_weak_count *v16;

  v2 = *((_QWORD *)this + 45);
  v3 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v2 + 16));
  v16 = v3;
  if (*(_BYTE *)(*(_QWORD *)(v2 + 8) + 4208))
  {
    v4 = v3;
    v5 = 0;
LABEL_13:
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    goto LABEL_17;
  }
  v6 = *((_QWORD *)this + 45);
  v7 = *(std::__shared_weak_count **)(v6 + 16);
  if (v7)
  {
    v7 = std::__shared_weak_count::lock(v7);
    v8 = v7;
    if (v7)
      v7 = *(std::__shared_weak_count **)(v6 + 8);
  }
  else
  {
    v8 = 0;
  }
  v5 = SipStack::requiresLimitedAvailability((SipStack *)v7);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v4 = v16;
  if (v16)
    goto LABEL_13;
LABEL_17:
  v13 = *((_QWORD *)this + 454);
  if (v13)
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 464))(v13);
  else
    v14 = 0;
  if (((*(uint64_t (**)(SipRegistrationClient *))(*(_QWORD *)this + 248))(this) & 1) != 0)
    return 0;
  else
    return v5 | v14;
}

void sub_1BF069E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::initializeTransport(SipRegistrationClient *this, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  ImsResult *v8;
  _QWORD v9[6];
  uint64_t v10;
  std::__shared_weak_count *v11;
  _QWORD v12[2];
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  SipRegistrationClient::setClientState((_QWORD *)a2, 5u);
  if (*(_QWORD *)(*(_QWORD *)(a2 + 3632) + 440) == *(_QWORD *)(*(_QWORD *)(a2 + 3632) + 432))
  {
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v12[0] = &off_1E78B7238;
    v12[1] = &_bambiDomain;
    v13 = 1073741826;
    v8 = (ImsResult *)ImsResult::operator<<<char [40]>((uint64_t)v12, "initializeTransport: no proxy available");
    ImsLogContainer::logResult((ImsLogContainer *)(a2 + 16), v8);
    ImsResult::ImsResult(this, v8);
    ImsResult::~ImsResult((ImsResult *)v12);
  }
  else
  {
    SipUserAgent::transportLayer(*(SipUserAgent **)(a2 + 360), &v10);
    v4 = v10;
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a2 + 3632) + 512))(v9);
    SipTransportLayer::initializeTransportToProxy(v4, (SipUri *)v9, 0, a2 + 8, (uint64_t)v12);
    ImsLogContainer::logResult(a2 + 16, (uint64_t)v12, (uint64_t)this);
    ImsResult::~ImsResult((ImsResult *)v12);
    std::deque<SipUri>::~deque[abi:ne180100](v9);
    v5 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF069FA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  ImsResult::~ImsResult((ImsResult *)va2);
  std::deque<SipUri>::~deque[abi:ne180100]((uint64_t *)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::retryRegistration(SipRegistrationClient *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _BOOL4 isNR;
  BOOL v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::string __p;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  std::__shared_weak_count *v37;

  if (*((_DWORD *)this + 130) == 1)
  {
    if (capabilities::radio::supportsRel16(this))
    {
      v2 = *((_QWORD *)this + 45);
      v3 = *(std::__shared_weak_count **)(v2 + 16);
      if (v3 && (v4 = std::__shared_weak_count::lock(v3)) != 0)
      {
        v5 = v4;
        isNR = ims::AccessNetwork::isNR((ims::AccessNetwork *)(*(_QWORD *)(v2 + 8) + 3136));
        v7 = isNR;
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (v9)
        {
          if (!isNR)
            goto LABEL_29;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v7)
            goto LABEL_29;
        }
      }
      else if (!ims::AccessNetwork::isNR((ims::AccessNetwork *)0xC40))
      {
        goto LABEL_29;
      }
      v12 = *((_QWORD *)this + 45);
      v13 = *(std::__shared_weak_count **)(v12 + 16);
      if (v13 && (v14 = std::__shared_weak_count::lock(v13)) != 0)
      {
        v15 = v14;
        v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 136) + 240);
        v17 = (unint64_t *)&v14->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        v16 = *(_QWORD *)(MEMORY[0x88] + 240);
      }
      if (!v16)
      {
        v33 = 0u;
        v34 = 0u;
        v35 = 0u;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
        LODWORD(__p.__r_.__value_.__r.__words[2]) = 1073741826;
        SipRegistrationClient::handleRegistrationError(this, (uint64_t **)&__p, -1, 1, 0);
        ImsResult::~ImsResult((ImsResult *)&__p);
        return;
      }
      if (*(_QWORD *)(v16 + 8) && *(_BYTE *)(v16 + 72))
      {
        v19 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
        (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"RetryRegAccessCheck...", 22);
        *(_BYTE *)(v19 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v19 + 17) = 0;
        v20 = *((_QWORD *)this + 45);
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v20 + 16));
        __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(v20 + 8);
        v21 = *(unsigned int *)(__p.__r_.__value_.__r.__words[0] + 4076);
        v22 = *((_QWORD *)this + 45);
        v36 = 0;
        v37 = 0;
        v23 = *(std::__shared_weak_count **)(v22 + 16);
        if (v23)
        {
          v24 = std::__shared_weak_count::lock(v23);
          v37 = v24;
          if (v24)
          {
            v25 = *(_QWORD *)(v22 + 8);
            v36 = v25;
            goto LABEL_32;
          }
        }
        else
        {
          v24 = 0;
        }
        v25 = 0;
LABEL_32:
        IMSNasDeviceClient::reportCallStatus(v16, v21, 0, 64, v25 + 3136, 1, 0);
        if (v24)
        {
          v27 = (unint64_t *)&v24->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        if (__p.__r_.__value_.__l.__size_)
        {
          v29 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__size_ + 16))(__p.__r_.__value_.__l.__size_);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
        }
        SipRegistrationClient::setClientState(this, 4u);
        SipRegistrationClient::nasImsRegStart(this);
        v31 = *((_QWORD *)this + 454);
        if (v31)
        {
          *(_QWORD *)(v31 + 400) = 0;
          *(_QWORD *)(v31 + 408) = 0;
        }
        return;
      }
      v26 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"No Baseband for architecture or Baseband is currently not available: go straight to internalRetryRegistration", 109);
      *(_BYTE *)(v26 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v26 + 17) = 0;
    }
LABEL_29:
    SipRegistrationClient::internalRetryRegistration((uint64_t)this);
    return;
  }
  v10 = (unsigned int *)((char *)this + 16);
  v11 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v10 + 16))(v10, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"ignoring retryRegistration request in state ", 44);
  *(_BYTE *)(v11 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)&clientStateNames[24 * v10[126]]);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 40))(v11, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF06A3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v15 - 64);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationClient::nasImsRegStart(SipRegistrationClient *this)
{
  char *v1;
  uint64_t v2;
  uint64_t result;

  v1 = (char *)this + 16;
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"nasImsReg Start", 15);
  *(_BYTE *)(v2 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  v1[508] = 1;
  return result;
}

void `non-virtual thunk to'SipRegistrationClient::retryRegistration(SipRegistrationClient *this)
{
  SipRegistrationClient::retryRegistration((SipRegistrationClient *)((char *)this - 144));
}

void SipRegistrationClient::setConnectivityAvailable(SipRegistrationClient *this, int a2, int a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  ImsPrefs *v8;
  void **DeferReRegOnConnectivityDisableKey;
  void *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  _BOOL4 v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;

  if (a3)
    SipRegistrationDeferralManager::cancel((uint64_t)this + 3976);
  if (!a2)
    return;
  v5 = *((_QWORD *)this + 45);
  v19 = 0;
  v6 = *(std::__shared_weak_count **)(v5 + 16);
  if (v6)
  {
    v6 = std::__shared_weak_count::lock(v6);
    v7 = v6;
    v19 = v6;
    if (v6)
      v6 = *(std::__shared_weak_count **)(v5 + 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = (ImsPrefs *)SipStack::prefs((SipStack *)v6);
  DeferReRegOnConnectivityDisableKey = (void **)ImsPrefs::getDeferReRegOnConnectivityDisableKey(v8);
  v10 = ImsPrefs::prefWithKey(v8, DeferReRegOnConnectivityDisableKey);
  if (v10)
  {
    if (((*(uint64_t (**)(void *))(*(_QWORD *)v10 + 40))(v10) & 1) == 0)
      goto LABEL_10;
  }
  else if (!*((_BYTE *)DeferReRegOnConnectivityDisableKey + 57))
  {
LABEL_10:
    v11 = *((_QWORD *)this + 45);
    v12 = *(std::__shared_weak_count **)(v11 + 16);
    if (v12)
    {
      v12 = std::__shared_weak_count::lock(v12);
      v13 = v12;
      if (v12)
        v12 = *(std::__shared_weak_count **)(v11 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = SipStack::requiresLimitedAvailability((SipStack *)v12);
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v7 = v19;
    if (!v19)
    {
LABEL_26:
      if (!v14)
        return;
      goto LABEL_27;
    }
    goto LABEL_23;
  }
  v14 = 1;
  if (!v7)
    goto LABEL_26;
LABEL_23:
  v17 = (unint64_t *)&v7->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
    goto LABEL_26;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (v14)
LABEL_27:
    SipRegistrationClient::performDeferredAction(this);
}

void sub_1BF06A62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::transactionTerminated(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;

  if (*a2 == *(_QWORD *)(a1 + 2792))
  {
    v5 = 0uLL;
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 2792, &v5);
    v2 = (std::__shared_weak_count *)*((_QWORD *)&v5 + 1);
    if (*((_QWORD *)&v5 + 1))
    {
      v3 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
}

uint64_t SipRegistrationClient::refreshRegistration(SipRegistrationClient *this)
{
  uint64_t v2;
  SipDialogManager *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  int active;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const char *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  int v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *size;
  std::string::size_type v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  int v30;
  unint64_t *v31;
  unint64_t v32;
  ImsPrefs *v33;
  void **RefreshRegistrationDuringECBMKey;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  int v42;
  char *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  ImsPrefs *v51;
  void **DeferReRegOnConnectivityDisableKey;
  void *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  std::string __p;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;

  if (*((_DWORD *)this + 130) != 1)
  {
    v15 = (unsigned int *)((char *)this + 16);
    v16 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v15 + 16))(v15, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"registration refresh triggered while we're in client state ", 59);
    *(_BYTE *)(v16 + 17) = 0;
    LoggableString::LoggableString(&__p, (const std::string *)&clientStateNames + v15[126]);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v16 + 40))(v16, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  if ((*(unsigned int (**)(SipRegistrationClient *))(*(_QWORD *)this + 248))(this))
  {
    v2 = *((_QWORD *)this + 45);
    v3 = *(SipDialogManager **)(v2 + 176);
    v4 = *(std::__shared_weak_count **)(v2 + 184);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v3;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    active = SipDialogManager::activeDialogCount(v3);
    v8 = active;
    if (!v4)
      goto LABEL_10;
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v8)
        goto LABEL_11;
    }
    else
    {
LABEL_10:
      if (active)
      {
LABEL_11:
        v11 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
        (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v11);
        v12 = *(_QWORD **)(v11 + 8);
        v13 = "found active emergency dialogs.  Renewing emergency registration.";
        v14 = 65;
LABEL_49:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
        *(_BYTE *)(v11 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v11 + 17) = 0;
        goto LABEL_50;
      }
    }
    v17 = *((_QWORD *)this + 45);
    v18 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v17 + 16));
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v18;
    __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(v17 + 8);
    v19 = SipTransactionLayer::activeTransactionCount(*(SipTransactionLayer **)(__p.__r_.__value_.__r.__words[0] + 152));
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    if (v19)
    {
      v11 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v11);
      v12 = *(_QWORD **)(v11 + 8);
      v13 = "found active emergency transactions. Renewing emergency registration.";
      v14 = 69;
      goto LABEL_49;
    }
    v22 = *((_QWORD *)this + 45);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    v23 = *(std::__shared_weak_count **)(v22 + 16);
    if (v23)
    {
      size = std::__shared_weak_count::lock(v23);
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)size;
      if (size)
      {
        v25 = *(_QWORD *)(v22 + 8);
        __p.__r_.__value_.__r.__words[0] = v25;
LABEL_26:
        if (*(_BYTE *)(v25 + 176)
          && (v26 = *(_QWORD *)(v25 + 4216), *(uint64_t *)(v26 + 4896) >= 1)
          && time(0) < *(_QWORD *)(v26 + 4896))
        {
          v27 = *((_QWORD *)this + 45);
          v68 = 0;
          v69 = 0;
          v28 = *(std::__shared_weak_count **)(v27 + 16);
          if (v28)
          {
            v28 = std::__shared_weak_count::lock(v28);
            v29 = v28;
            v69 = v28;
            if (v28)
            {
              v28 = *(std::__shared_weak_count **)(v27 + 8);
              v68 = v28;
            }
          }
          else
          {
            v29 = 0;
          }
          v33 = (ImsPrefs *)SipStack::prefs((SipStack *)v28);
          RefreshRegistrationDuringECBMKey = (void **)ImsPrefs::getRefreshRegistrationDuringECBMKey(v33);
          v35 = ImsPrefs::prefWithKey(v33, RefreshRegistrationDuringECBMKey);
          if (v35)
            v30 = (*(uint64_t (**)(void *))(*(_QWORD *)v35 + 40))(v35);
          else
            v30 = *((_BYTE *)RefreshRegistrationDuringECBMKey + 57) != 0;
          if (v29)
          {
            v36 = (unint64_t *)&v29->__shared_owners_;
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (!__p.__r_.__value_.__l.__size_)
            goto LABEL_47;
        }
        else
        {
          v30 = 0;
          if (!size)
          {
LABEL_47:
            v11 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
            (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v11);
            v12 = *(_QWORD **)(v11 + 8);
            if (!v30)
            {
              v45 = "no need to renew emergency registration";
              v46 = 39;
              goto LABEL_56;
            }
            v13 = "ECBM is active.  Renewing emergency registration.";
            v14 = 49;
            goto LABEL_49;
          }
        }
        v31 = (unint64_t *)&size->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
        goto LABEL_47;
      }
    }
    else
    {
      size = 0;
    }
    v25 = 0;
    goto LABEL_26;
  }
LABEL_50:
  v38 = *((_QWORD *)this + 454);
  if (v38 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 368))(v38) & 1) == 0)
  {
    v44 = *((_QWORD *)this + 2);
    v43 = (char *)this + 16;
    v11 = (*(uint64_t (**)(char *))(v44 + 64))(v43);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v43 + 16))(v43, v11);
    v12 = *(_QWORD **)(v11 + 8);
    v45 = "registration refresh triggered while we're being throttled by RegistrationPolicy";
    v46 = 80;
LABEL_56:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v45, v46);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    result = 0;
    *(_BYTE *)(v11 + 17) = 0;
    return result;
  }
  if ((SipRegistrationClient::shouldDeferRegistration(this) & 1) != 0)
    goto LABEL_74;
  v39 = *((_QWORD *)this + 45);
  v40 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v39 + 16));
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v40;
  __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(v39 + 8);
  if (*(_BYTE *)(__p.__r_.__value_.__r.__words[0] + 4208))
  {
    v41 = v40;
    v42 = 0;
    goto LABEL_70;
  }
  v48 = *((_QWORD *)this + 45);
  v68 = 0;
  v69 = 0;
  v49 = *(std::__shared_weak_count **)(v48 + 16);
  if (v49)
  {
    v49 = std::__shared_weak_count::lock(v49);
    v50 = v49;
    v69 = v49;
    if (v49)
    {
      v49 = *(std::__shared_weak_count **)(v48 + 8);
      v68 = v49;
    }
  }
  else
  {
    v50 = 0;
  }
  v51 = (ImsPrefs *)SipStack::prefs((SipStack *)v49);
  DeferReRegOnConnectivityDisableKey = (void **)ImsPrefs::getDeferReRegOnConnectivityDisableKey(v51);
  v53 = ImsPrefs::prefWithKey(v51, DeferReRegOnConnectivityDisableKey);
  if (v53)
  {
    v42 = (*(uint64_t (**)(void *))(*(_QWORD *)v53 + 40))(v53);
    if (!v50)
      goto LABEL_69;
  }
  else
  {
    v42 = *((_BYTE *)DeferReRegOnConnectivityDisableKey + 57) != 0;
    if (!v50)
      goto LABEL_69;
  }
  v54 = (unint64_t *)&v50->__shared_owners_;
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
LABEL_69:
  v41 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_73;
LABEL_70:
  v56 = (unint64_t *)&v41->__shared_owners_;
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 - 1, v56));
  if (v57)
  {
LABEL_73:
    if (v42)
      goto LABEL_74;
    goto LABEL_81;
  }
  ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
  std::__shared_weak_count::__release_weak(v41);
  if ((v42 & 1) != 0)
  {
LABEL_74:
    v59 = *((_QWORD *)this + 2);
    v58 = (uint64_t *)((char *)this + 16);
    v60 = (*(uint64_t (**)(uint64_t *))(v59 + 64))(v58);
    (*(void (**)(uint64_t *, uint64_t))(*v58 + 16))(v58, v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v60 + 8), (uint64_t)"registration refresh triggered while we have no data connectivity -- deferring.", 79);
    *(_BYTE *)(v60 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v60 + 64))(v60, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v60 + 17) = 0;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v65, v58 + 23);
    SipRegistrationDeferralManager::deferAction(v58 + 495, &v65, (uint64_t)(v58 + 137), (unsigned __int8 *)&SipRegistrationMetrics::kReasonRefresh);
    v61 = v66;
    if (v66)
    {
      v62 = (unint64_t *)&v66->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    return 0;
  }
LABEL_81:
  std::string::operator=((std::string *)((char *)this + 3896), &SipRegistrationMetrics::kReasonRefresh);
  if (*((_QWORD *)this + 454))
  {
    v64 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v64 + 8), (uint64_t)"refreshRegistration: setting to policy SipRegClientRegType::RefreshReg", 70);
    *(_BYTE *)(v64 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v64 + 64))(v64, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v64 + 17) = 0;
    *(_DWORD *)(*((_QWORD *)this + 454) + 2348) = 2;
  }
  SipRegistrationClient::sendInitialRequest(this);
  return 1;
}

void sub_1BF06ADAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::sendInitialRequest(SipRegistrationClient *this)
{
  int v2;
  uint64_t v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  tm *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  ImsPrefs *v35;
  void **v36;
  void *v37;
  char v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  SipAuthInfo *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL4 isWifi;
  SipRequest *RequestFromTemplate;
  unint64_t *v60;
  unint64_t v61;
  char *v62;
  char *v63;
  SipHeader *v64;
  SipHeader *v65;
  int v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  char v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  SipHeader *v76;
  std::__shared_weak_count *size;
  unint64_t *v78;
  unint64_t v79;
  SipHeader *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  ImsPrefs *v84;
  void **EnableRegistrationSessionIdKey;
  void *v86;
  int v87;
  unint64_t *v88;
  unint64_t v89;
  SipHeader *v90;
  SipUserAgentConfig *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;
  ImsPrefs *v97;
  void *PIDFConfidenceKey;
  void *v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  __n128 v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  time_t v127;
  uint64_t v128;
  tm *v129;
  SipTimerContainer *v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  char v134;
  uint64_t v135;
  int v136;
  void *__p[2];
  _OWORD v138[8];
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _BYTE v142[32];
  __int128 v143;
  __int128 v144;
  __int128 v145;
  _QWORD v146[32];
  __int128 v147;
  __int128 v148;
  __int128 v149;
  _QWORD v150[4];
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  _DWORD v158[16];
  std::string v159;
  std::__shared_weak_count *v160;
  std::__shared_weak_count *v161;
  char v162;

  if (*((_BYTE *)this + 3648))
    v2 = 0;
  else
    v2 = *((_DWORD *)this + 287);
  v136 = *((_DWORD *)this + 132);
  SipRegistrationMetrics::registrationAttemptStarted((uint64_t)this + 3800, &v136);
  if (*((_BYTE *)this + 2488))
  {
    v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"faking registration", 19);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    SipRegistrationClient::updateContact((SipRegistrationClient *)&v157, (uint64_t)this, 0);
    ImsResult::~ImsResult((ImsResult *)&v157);
    v155 = 0u;
    v156 = 0u;
    v153 = 0u;
    v154 = 0u;
    v151 = 0u;
    v152 = 0u;
    memset(v150, 0, sizeof(v150));
    v148 = 0u;
    v149 = 0u;
    v147 = 0u;
    v145 = 0u;
    memset(v146, 0, sizeof(v146));
    v143 = 0u;
    v144 = 0u;
    memset(v142, 0, sizeof(v142));
    SipContact::SipContact((uint64_t)v142, 0);
    SipUri::operator=((SipUri *)((char *)&v143 + 8), (uint64_t)this + 624);
    v4 = *((_DWORD *)this + 287);
    *(_DWORD *)&v142[12] = 2;
    DWORD2(v153) = v4;
    DWORD2(v156) = *((_DWORD *)this + 284);
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    *(_OWORD *)__p = 0u;
    memset(v138, 0, sizeof(v138));
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v160, (_QWORD *)this + 25);
    SipRegistrationActiveNotification::SipRegistrationActiveNotification((uint64_t)__p, (uint64_t *)&v160, (uint64_t)v142, (uint64_t)this + 3800, 1);
    v5 = v161;
    if (v161)
    {
      p_shared_owners = (unint64_t *)&v161->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    *((_QWORD *)this + 59) = time(0) + *((unsigned int *)this + 287);
    v8 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 32))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"fake registration expires ", 26);
    *(_BYTE *)(v8 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(*((ims **)this + 59), v8, v9);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    SipRegistrationClient::updateRegistrationState(this, (const SipRegistrationStateNotification *)__p);
    __p[0] = &off_1E78F0038;
    if (SHIBYTE(v140) < 0)
      operator delete(*((void **)&v139 + 1));
    ImsResult::~ImsResult((ImsResult *)((char *)&v138[3] + 8));
    __p[0] = &unk_1E78EFEC8;
    if (*(_QWORD *)&v138[2])
      (*(void (**)(_QWORD))(**(_QWORD **)&v138[2] + 8))(*(_QWORD *)&v138[2]);
    __p[0] = &unk_1E78F0000;
    if (*((_QWORD *)&v138[1] + 1))
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v138[1] + 1));
    SipContact::~SipContact((SipContact *)v142);
    SipRegistrationClient::setClientState(this, 1u);
    return;
  }
  SipRegistrationClient::setClientState(this, 6u);
  v10 = *((_QWORD *)this + 348);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *((_QWORD *)this + 348) = 0;
  v11 = *((_QWORD *)this + 454);
  if (v11 && *(_BYTE *)(v11 + 220))
  {
    v12 = *(_QWORD *)(*((_QWORD *)this + 45) + 280);
    v13 = *(_QWORD *)(v12 + 144);
    v14 = *(std::__shared_weak_count **)(v12 + 152);
    *(_QWORD *)&v157 = v13;
    *((_QWORD *)&v157 + 1) = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    if (v13)
    {
      v17 = *(_QWORD *)(v13 + 48);
      if (!v17)
        goto LABEL_29;
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v17 + 56))(v142);
      memset((char *)v138 + 8, 0, 48);
      __p[0] = &off_1E78B7238;
      __p[1] = &_bambiDomain;
      LODWORD(v138[0]) = 1073741832;
      v18 = *(uint64_t **)&v142[8];
      v19 = *(_DWORD *)&v142[16];
      ImsResult::~ImsResult((ImsResult *)__p);
      ImsResult::~ImsResult((ImsResult *)v142);
      if (v18 != &_bambiDomain)
        goto LABEL_29;
      if (v19 == 1073741832)
      {
        v20 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
        (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"keeping auth sync failure info in initial registration", 54);
        *(_BYTE *)(v20 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v20 + 17) = 0;
      }
      else
      {
LABEL_29:
        v21 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
        (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"clearing auth info for initial registration", 43);
        *(_BYTE *)(v21 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v21 + 17) = 0;
        SipAuthClient::clear(*(SipAuthClient **)(*((_QWORD *)this + 45) + 280));
      }
    }
    v22 = *((_QWORD *)this + 57);
    if (!v22)
      goto LABEL_47;
    v23 = *((_QWORD *)this + 45);
    __p[0] = 0;
    __p[1] = 0;
    v24 = *(std::__shared_weak_count **)(v23 + 16);
    if (v24)
    {
      v25 = std::__shared_weak_count::lock(v24);
      __p[1] = v25;
      if (v25)
      {
        v26 = *(_QWORD *)(v23 + 8);
        __p[0] = (void *)v26;
LABEL_36:
        if (*(char *)(v26 + 4159) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v142, *(const std::string::value_type **)(v26 + 4136), *(_QWORD *)(v26 + 4144));
        }
        else
        {
          v27 = v26 + 4136;
          *(_OWORD *)v142 = *(_OWORD *)v27;
          *(_QWORD *)&v142[16] = *(_QWORD *)(v27 + 16);
        }
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v22 + 80))(v22, v142);
        if ((v142[23] & 0x80000000) != 0)
          operator delete(*(void **)v142);
        if (v25)
        {
          v28 = (unint64_t *)&v25->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v14 = (std::__shared_weak_count *)*((_QWORD *)&v157 + 1);
LABEL_47:
        if (v14)
        {
          v30 = (unint64_t *)&v14->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        goto LABEL_52;
      }
    }
    else
    {
      v25 = 0;
    }
    v26 = 0;
    goto LABEL_36;
  }
LABEL_52:
  v32 = *((_QWORD *)this + 45);
  *(_OWORD *)v142 = 0uLL;
  v33 = *(std::__shared_weak_count **)(v32 + 16);
  if (v33)
  {
    v33 = std::__shared_weak_count::lock(v33);
    v34 = v33;
    *(_QWORD *)&v142[8] = v33;
    if (v33)
    {
      v33 = *(std::__shared_weak_count **)(v32 + 8);
      *(_QWORD *)v142 = v33;
    }
  }
  else
  {
    v34 = 0;
  }
  v35 = (ImsPrefs *)SipStack::prefs((SipStack *)v33);
  v36 = (void **)ImsPrefs::getResetCallIdOnInitialRegistrationKey(v35);
  v37 = ImsPrefs::prefWithKey(v35, v36);
  if (v37)
  {
    v38 = (*(uint64_t (**)(void *))(*(_QWORD *)v37 + 40))(v37);
    if (!v34)
      goto LABEL_63;
  }
  else
  {
    v38 = *((_BYTE *)v36 + 57) != 0;
    if (!v34)
      goto LABEL_63;
  }
  v39 = (unint64_t *)&v34->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    if ((v38 & 1) == 0)
      goto LABEL_88;
    goto LABEL_64;
  }
LABEL_63:
  if ((v38 & 1) == 0)
    goto LABEL_88;
LABEL_64:
  v41 = *(_QWORD *)(*((_QWORD *)this + 45) + 280);
  v42 = *(SipAuthInfo **)(v41 + 144);
  v43 = *(std::__shared_weak_count **)(v41 + 152);
  *(_QWORD *)v142 = v42;
  *(_QWORD *)&v142[8] = v43;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  if (!v42 || !SipAuthInfo::hasAuthSyncResponse(v42))
  {
    if (SipUri::isValidUri((SipRegistrationClient *)((char *)this + 3216))
      && (SipUri::equals((SipRegistrationClient *)((char *)this + 3216), (SipRegistrationClient *)((char *)this + 2808), 1) & 1) == 0)
    {
      v49 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v49 + 8), (uint64_t)"the current proxy has changed (", 31);
      *(_BYTE *)(v49 + 17) = 0;
      v47 = (_BYTE *)(v49 + 17);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 402) + 40))((char *)this + 3216, v49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v49 + 8), (uint64_t)" -> ", 4);
      *(_BYTE *)(v49 + 17) = 0;
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 351) + 40))((char *)this + 2808, v49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v49 + 8), (uint64_t)"). Resetting Call-ID", 20);
      *(_BYTE *)(v49 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      if (*((_DWORD *)this + 132) == 2 && !*(_BYTE *)(*((_QWORD *)this + 454) + 220))
      {
        v51 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
        (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v51);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v51 + 8), (uint64_t)"not an initial registration. Keeping Call-ID as is", 50);
        *(_BYTE *)(v51 + 17) = 0;
        v47 = (_BYTE *)(v51 + 17);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        goto LABEL_80;
      }
      v48 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v48 + 8), (uint64_t)"this is an initial registration. Resetting Call-ID", 50);
      *(_BYTE *)(v48 + 17) = 0;
      v47 = (_BYTE *)(v48 + 17);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    v50 = 1;
    goto LABEL_81;
  }
  v46 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v46);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v46 + 8), (uint64_t)"we have a pending Auth Sync response, not resetting Call-ID", 59);
  *(_BYTE *)(v46 + 17) = 0;
  v47 = (_BYTE *)(v46 + 17);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_80:
  v50 = 0;
LABEL_81:
  *v47 = 0;
  if (v43)
  {
    v52 = (unint64_t *)&v43->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v50)
    SipRegistrationClient::resetCallIdAndCseq(this, 1);
LABEL_88:
  v157 = 0u;
  memset(v158, 0, 56);
  v54 = *((_QWORD *)this + 45);
  v55 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v54 + 16));
  *(_QWORD *)&v142[8] = v55;
  v56 = *(_QWORD *)(v54 + 8);
  *(_QWORD *)v142 = v56;
  v57 = *(_QWORD *)(v56 + 144);
  isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v56 + 3136));
  RequestFromTemplate = SipMessageEncodingMap::createRequestFromTemplate((SipMessageEncodingMap *)(v57 + 288), (const std::string *)"REGISTER", isWifi, *(unsigned __int8 *)(v56 + 176));
  v60 = (unint64_t *)&v55->__shared_owners_;
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v61 - 1, v60));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
  *(_OWORD *)&v150[1] = 0u;
  *((_QWORD *)&v148 + 1) = 257;
  memset(&v146[1], 0, 240);
  v144 = 0uLL;
  v143 = 0uLL;
  *(_QWORD *)&v142[8] = &off_1E78D08F8;
  *(_OWORD *)&v142[16] = 0uLL;
  v146[0] = 0;
  v146[1] = 0;
  *(_QWORD *)&v145 = &off_1E78B82D8;
  *((_QWORD *)&v145 + 1) = v146;
  *(_QWORD *)v142 = &off_1E78BFCE8;
  v62 = (char *)&v146[3];
  *((_QWORD *)&v147 + 1) = 0;
  *(_QWORD *)&v148 = 0;
  v146[31] = &off_1E78B82D8;
  *(_QWORD *)&v147 = (char *)&v147 + 8;
  v150[0] = 0;
  v150[1] = 0;
  *(_QWORD *)&v149 = &off_1E78B82D8;
  *((_QWORD *)&v149 + 1) = v150;
  LOWORD(v146[2]) = 257;
  LOWORD(v150[2]) = 257;
  if ((*(unsigned int (**)(SipRegistrationClient *))(*(_QWORD *)this + 248))(this)
    && SipUri::isValidUri((SipRegistrationClient *)((char *)this + 1592)))
  {
    SipUri::operator=((SipUri *)v142, (uint64_t)this + 1592);
    goto LABEL_130;
  }
  if (*((char *)this + 2023) < 0)
  {
    if (*((_QWORD *)this + 251))
      goto LABEL_97;
  }
  else if (*((_BYTE *)this + 2023))
  {
LABEL_97:
    SipHost::SipHost((uint64_t)__p, (std::string *)((char *)this + 2000));
    if (SHIBYTE(v146[5]) < 0)
    {
      v146[4] = 3;
      v62 = (char *)v146[3];
    }
    else
    {
      HIBYTE(v146[5]) = 3;
    }
    strcpy(v62, "sip");
    if (SHIBYTE(v146[14]) < 0)
    {
      *(_BYTE *)v146[12] = 0;
      v146[13] = 0;
    }
    else
    {
      LOBYTE(v146[12]) = 0;
      HIBYTE(v146[14]) = 0;
    }
    if (SHIBYTE(v146[20]) < 0)
    {
      *(_BYTE *)v146[18] = 0;
      v146[19] = 0;
    }
    else
    {
      LOBYTE(v146[18]) = 0;
      HIBYTE(v146[20]) = 0;
    }
    if (SHIBYTE(v146[23]) < 0)
    {
      *(_BYTE *)v146[21] = 0;
      v146[22] = 0;
    }
    else
    {
      LOBYTE(v146[21]) = 0;
      HIBYTE(v146[23]) = 0;
    }
    if (SHIBYTE(v146[26]) < 0)
    {
      *(_BYTE *)v146[24] = 0;
      v146[25] = 0;
    }
    else
    {
      LOBYTE(v146[24]) = 0;
      HIBYTE(v146[26]) = 0;
    }
    SipHost::operator=((uint64_t)&v142[8], (uint64_t)__p);
    LOBYTE(v146[30]) = 0;
    SipHost::~SipHost(__p);
    goto LABEL_130;
  }
  if (SHIBYTE(v146[5]) < 0)
  {
    v146[4] = 3;
    v62 = (char *)v146[3];
  }
  else
  {
    HIBYTE(v146[5]) = 3;
  }
  strcpy(v62, "sip");
  if (SHIBYTE(v146[14]) < 0)
  {
    *(_BYTE *)v146[12] = 0;
    v146[13] = 0;
  }
  else
  {
    LOBYTE(v146[12]) = 0;
    HIBYTE(v146[14]) = 0;
  }
  if (SHIBYTE(v146[20]) < 0)
  {
    *(_BYTE *)v146[18] = 0;
    v146[19] = 0;
  }
  else
  {
    LOBYTE(v146[18]) = 0;
    HIBYTE(v146[20]) = 0;
  }
  if (SHIBYTE(v146[23]) < 0)
  {
    *(_BYTE *)v146[21] = 0;
    v146[22] = 0;
  }
  else
  {
    LOBYTE(v146[21]) = 0;
    HIBYTE(v146[23]) = 0;
  }
  if (SHIBYTE(v146[26]) < 0)
  {
    *(_BYTE *)v146[24] = 0;
    v146[25] = 0;
  }
  else
  {
    LOBYTE(v146[24]) = 0;
    HIBYTE(v146[26]) = 0;
  }
  SipHost::operator=((uint64_t)&v142[8], (uint64_t)this + 1192);
  LOBYTE(v146[30]) = 0;
LABEL_130:
  SipUri::operator=((SipRequest *)((char *)RequestFromTemplate + 112), (uint64_t)v142);
  if (!(*(unsigned int (**)(SipRegistrationClient *))(*(_QWORD *)this + 248))(this)
    || (v63 = (char *)this + 1592, !SipUri::isValidUri((SipRegistrationClient *)((char *)this + 1592))))
  {
    v63 = (char *)this + 1184;
  }
  v64 = SipMessage::header<SipToHeader>(RequestFromTemplate, 1);
  SipUri::operator=((SipHeader *)((char *)v64 + 104), (uint64_t)v63);
  v65 = SipMessage::header<SipFromHeader>(RequestFromTemplate, 1);
  SipUri::operator=((SipHeader *)((char *)v65 + 104), (uint64_t)this + 1184);
  SipMessage::addHeader(RequestFromTemplate, (uint64_t)"Expires", v2, 0);
  SipUserAgent::transportLayer(*((SipUserAgent **)this + 45), __p);
  v66 = *(unsigned __int8 *)((*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 16))(__p[0]) + 438);
  v67 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_137;
  v68 = (unint64_t *)((char *)__p[1] + 8);
  do
    v69 = __ldaxr(v68);
  while (__stlxr(v69 - 1, v68));
  if (!v69)
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v67);
    if (!v66)
    {
LABEL_163:
      v80 = SipMessage::header<SipCallIdHeader>(RequestFromTemplate, 1);
      std::string::operator=((std::string *)((char *)v80 + 64), (const std::string *)((char *)this + 368));
      v81 = *((_QWORD *)this + 45);
      __p[0] = 0;
      __p[1] = 0;
      v82 = *(std::__shared_weak_count **)(v81 + 16);
      if (v82)
      {
        v82 = std::__shared_weak_count::lock(v82);
        v83 = v82;
        __p[1] = v82;
        if (v82)
        {
          v82 = *(std::__shared_weak_count **)(v81 + 8);
          __p[0] = v82;
        }
      }
      else
      {
        v83 = 0;
      }
      v84 = (ImsPrefs *)SipStack::prefs((SipStack *)v82);
      EnableRegistrationSessionIdKey = (void **)ImsPrefs::getEnableRegistrationSessionIdKey(v84);
      v86 = ImsPrefs::prefWithKey(v84, EnableRegistrationSessionIdKey);
      if (v86)
      {
        v87 = (*(uint64_t (**)(void *))(*(_QWORD *)v86 + 40))(v86);
        if (!v83)
          goto LABEL_174;
      }
      else
      {
        v87 = *((_BYTE *)EnableRegistrationSessionIdKey + 57) != 0;
        if (!v83)
          goto LABEL_174;
      }
      v88 = (unint64_t *)&v83->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
        if (!v87)
          goto LABEL_176;
        goto LABEL_175;
      }
LABEL_174:
      if (!v87)
      {
LABEL_176:
        if (!(*(unsigned int (**)(SipRegistrationClient *))(*(_QWORD *)this + 64))(this))
          goto LABEL_232;
        v91 = (SipUserAgentConfig *)SipUserAgent::config(*((SipUserAgent **)this + 45));
        if (!SipUserAgentConfig::countryOfOriginationAllowedInBody(v91))
          goto LABEL_232;
        v135 = operator new();
        v92 = SipUserAgent::publicUri(*((SipUserAgent **)this + 45));
        SipUserAgent::publicDomain(*((SipUserAgent **)this + 45), (uint64_t)__p);
        v93 = SipUserAgent::config(*((SipUserAgent **)this + 45));
        v94 = *((_QWORD *)this + 45);
        v160 = 0;
        v161 = 0;
        v95 = *(std::__shared_weak_count **)(v94 + 16);
        if (v95)
        {
          v95 = std::__shared_weak_count::lock(v95);
          v96 = v95;
          v161 = v95;
          if (v95)
          {
            v95 = *(std::__shared_weak_count **)(v94 + 8);
            v160 = v95;
          }
        }
        else
        {
          v96 = 0;
        }
        v97 = (ImsPrefs *)SipStack::prefs((SipStack *)v95);
        PIDFConfidenceKey = ImsPrefs::getPIDFConfidenceKey(v97);
        v99 = ImsPrefs::prefWithKey(v97, (void **)PIDFConfidenceKey);
        if (v99)
          v100 = (*(uint64_t (**)(void *))(*(_QWORD *)v99 + 56))(v99);
        else
          v100 = *((_DWORD *)PIDFConfidenceKey + 15);
        v101 = *(unsigned __int8 *)(SipUserAgent::config(*((SipUserAgent **)this + 45)) + 919);
        v102 = *(unsigned __int8 *)(SipUserAgent::config(*((SipUserAgent **)this + 45)) + 920);
        v103 = SipUserAgent::config(*((SipUserAgent **)this + 45));
        SipGeoLocationBody::SipGeoLocationBody(v135, v92, (const std::string *)__p, (const std::string *)(v93 + 928), v100, v101 != 0, v102 != 0, *(_BYTE *)(v103 + 921));
        if (v96)
        {
          v104 = (unint64_t *)&v96->__shared_owners_;
          do
            v105 = __ldaxr(v104);
          while (__stlxr(v105 - 1, v104));
          if (!v105)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
        if (SBYTE7(v138[0]) < 0)
          operator delete(__p[0]);
        v106 = *((_QWORD *)this + 45);
        v107 = *(std::__shared_weak_count **)(v106 + 16);
        if (v107)
        {
          v108 = std::__shared_weak_count::lock(v107);
          if (v108)
            v109 = *(_QWORD *)(v106 + 8);
          else
            v109 = 0;
        }
        else
        {
          v109 = 0;
          v108 = 0;
        }
        if (*(char *)(v109 + 4111) < 0)
        {
          v110 = *(_QWORD *)(v109 + 4096);
          if (!v108)
          {
LABEL_207:
            v113 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
            (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v113);
            v114 = *(_QWORD **)(v113 + 8);
            if (v110)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)"Adding country of origination to REGISTER", 41);
              *(_BYTE *)(v113 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v113 + 64))(v113, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v113 + 17) = 0;
              v115 = *((_QWORD *)this + 45);
              __p[0] = 0;
              __p[1] = 0;
              v116 = *(std::__shared_weak_count **)(v115 + 16);
              if (v116 && (__p[1] = std::__shared_weak_count::lock(v116)) != 0)
              {
                v117 = *(_QWORD *)(v115 + 8);
                __p[0] = (void *)v117;
              }
              else
              {
                v117 = 0;
              }
              v118.n128_f64[0] = SipGeoLocationBody::setCountry(v135, (const std::string *)(v117 + 4088));
              v119 = (std::__shared_weak_count *)__p[1];
              if (__p[1])
              {
                v120 = (unint64_t *)((char *)__p[1] + 8);
                do
                  v121 = __ldaxr(v120);
                while (__stlxr(v121 - 1, v120));
                if (!v121)
                {
                  ((void (*)(std::__shared_weak_count *, __n128))v119->__on_zero_shared)(v119, v118);
                  std::__shared_weak_count::__release_weak(v119);
                }
              }
              SipMessage::addBody((uint64_t)RequestFromTemplate, v135);
              if (*(_BYTE *)(SipUserAgent::config(*((SipUserAgent **)this + 45)) + 919))
              {
                std::string::basic_string[abi:ne180100]<0>(__p, "Geolocation");
                v122 = SipUserAgent::publicUri(*((SipUserAgent **)this + 45));
                SipUserAgent::publicDomain(*((SipUserAgent **)this + 45), (uint64_t)&v159);
                SipUri::getContentIdString(v122, (uint64_t)&v159, 1, &v160);
                SipMessage::addHeader(RequestFromTemplate, (uint64_t)__p, (uint64_t)&v160, 0);
                if (v162 < 0)
                  operator delete(v160);
                if ((SHIBYTE(v159.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_226;
                v123 = (std::__shared_weak_count *)v159.__r_.__value_.__r.__words[0];
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(__p, "Geolocation");
                v124 = SipUserAgent::publicUri(*((SipUserAgent **)this + 45));
                SipUri::asString(v124, 0, &v160);
                SipMessage::addHeader(RequestFromTemplate, (uint64_t)__p, (uint64_t)&v160, 0);
                if ((v162 & 0x80000000) == 0)
                {
LABEL_226:
                  if (SBYTE7(v138[0]) < 0)
                    operator delete(__p[0]);
                  std::string::basic_string[abi:ne180100]<0>(__p, "Geolocation-Routing");
                  std::string::basic_string[abi:ne180100]<0>(&v160, "yes");
                  SipMessage::addHeader(RequestFromTemplate, (uint64_t)__p, (uint64_t)&v160, 0);
                  if (v162 < 0)
                    operator delete(v160);
                  if (SBYTE7(v138[0]) < 0)
                    operator delete(__p[0]);
                  goto LABEL_232;
                }
                v123 = v160;
              }
              operator delete(v123);
              goto LABEL_226;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)"Country of origination not available", 36);
            *(_BYTE *)(v113 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v113 + 64))(v113, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v113 + 17) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
LABEL_232:
            v125 = *((_QWORD *)this + 348);
            if (v125)
              (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
            *((_QWORD *)this + 348) = RequestFromTemplate;
            memset(&v158[2], 0, 48);
            *(_QWORD *)&v157 = &off_1E78B7238;
            *((_QWORD *)&v157 + 1) = &_bambiDomain;
            v158[0] = 0;
            goto LABEL_235;
          }
        }
        else
        {
          v110 = *(unsigned __int8 *)(v109 + 4111);
          if (!v108)
            goto LABEL_207;
        }
        v111 = (unint64_t *)&v108->__shared_owners_;
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
          std::__shared_weak_count::__release_weak(v108);
        }
        goto LABEL_207;
      }
LABEL_175:
      v90 = SipMessage::header<SipSessionIdHeader>(RequestFromTemplate, 1);
      std::string::operator=((std::string *)((char *)v90 + 64), (const std::string *)((char *)this + 424));
      goto LABEL_176;
    }
  }
  else
  {
LABEL_137:
    if (!v66)
      goto LABEL_163;
  }
  v157 = 0u;
  memset(v158, 0, 56);
  __p[0] = &off_1E78B7238;
  __p[1] = &_bambiDomain;
  memset((char *)v138 + 8, 0, 48);
  if (*((_BYTE *)this + 3648))
    v70 = *((_BYTE *)this + 2457) != 0;
  else
    v70 = 0;
  *(_QWORD *)&v138[0] = 0;
  *(_OWORD *)&v159.__r_.__value_.__l.__data_ = 0uLL;
  SipUserAgent::transportLayer(*((SipUserAgent **)this + 45), &v160);
  SipTransportLayer::createIPSecTransport((SipTransportLayer *)v160, (ImsResult *)__p, v70, (uint64_t *)&v159);
  v71 = v161;
  if (v161)
  {
    v72 = (unint64_t *)&v161->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (v159.__r_.__value_.__r.__words[0])
  {
    std::string::basic_string[abi:ne180100]<0>(&v160, "sec-agree");
    SipMessage::addRequiredOption(RequestFromTemplate, (void **)&v160);
    if (v162 < 0)
      operator delete(v160);
    std::string::basic_string[abi:ne180100]<0>(&v160, "sec-agree");
    SipMessage::addProxyRequiredOption(RequestFromTemplate, (void **)&v160);
    if (v162 < 0)
      operator delete(v160);
    std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)this + 63, (uint64_t *)&v159);
    v74 = *((_QWORD *)this + 2);
    *(_QWORD *)(*((_QWORD *)this + 63) + 480) = (char *)this + 128;
    v75 = (*(uint64_t (**)(char *))(v74 + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v75);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v75 + 8), (uint64_t)"created temporary SA pair ", 26);
    *(_BYTE *)(v75 + 17) = 0;
    (*(void (**)(std::string::size_type, uint64_t))(*(_QWORD *)v159.__r_.__value_.__l.__data_ + 104))(v159.__r_.__value_.__r.__words[0], v75);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v75 + 64))(v75, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v75 + 17) = 0;
    v76 = (SipHeader *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 63) + 312) + 32))(*(_QWORD *)(*((_QWORD *)this + 63) + 312));
    SipMessage::addHeader(RequestFromTemplate, v76, 0);
    *(_QWORD *)&v157 = &off_1E78B7238;
    memset(&v158[2], 0, 48);
    *((_QWORD *)&v157 + 1) = &_bambiDomain;
    v158[0] = 0;
  }
  else
  {
    ImsResult::ImsResult((uint64_t)&v157, (uint64_t)__p);
  }
  size = (std::__shared_weak_count *)v159.__r_.__value_.__l.__size_;
  if (v159.__r_.__value_.__l.__size_)
  {
    v78 = (unint64_t *)(v159.__r_.__value_.__l.__size_ + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  ImsResult::~ImsResult((ImsResult *)__p);
  if (!(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v157 + 1) + 24))(*((_QWORD *)&v157 + 1), v158[0]))
  {
    ImsResult::~ImsResult((ImsResult *)&v157);
    goto LABEL_163;
  }
  (*(void (**)(SipRequest *))(*(_QWORD *)RequestFromTemplate + 8))(RequestFromTemplate);
LABEL_235:
  SipUri::~SipUri((SipUri *)v142);
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v157 + 1) + 24))(*((_QWORD *)&v157 + 1), v158[0]))
  {
    v126 = SipSimpleBackoffTimer::scheduleRetry((SipRegistrationClient *)((char *)this + 3728));
    v127 = time(0);
    v128 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v128);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v128 + 8), (uint64_t)"unable to create REGISTER request: ", 35);
    *(_BYTE *)(v128 + 17) = 0;
    (*(void (**)(__int128 *, uint64_t))(v157 + 16))(&v157, v128);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v128 + 8), (uint64_t)" - will retry at ", 17);
    *(_BYTE *)(v128 + 17) = 0;
    ims::formatTimeAndIntervalFromNow((ims *)(v127 + v126), v128, v129);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v128 + 64))(v128, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v128 + 17) = 0;
    SipRegistrationClient::handleRegistrationError(this, (uint64_t **)&v157, v126, 1, 0);
  }
  else
  {
    v130 = (SipTimerContainer *)*((_QWORD *)this + 467);
    if (v130)
      SipTimerContainer::cancelTimer(v130, (std::string *)((char *)this + 3752));
    *((_DWORD *)this + 936) = 0;
    *((_BYTE *)this + 3920) = 0;
    if (*((_BYTE *)this + 3648))
    {
      *(_DWORD *)v142 = 3;
      SipRegistrationClient::setRegistrationState((uint64_t)this, (int *)v142, 0);
      v131 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v131);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v131 + 8), (uint64_t)"attempting deregistration", 25);
      *(_BYTE *)(v131 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v131 + 64))(v131, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v131 + 17) = 0;
    }
    else
    {
      *(_DWORD *)v142 = 1;
      SipRegistrationClient::setRegistrationState((uint64_t)this, (int *)v142, 0);
      v132 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v132);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v132 + 8), (uint64_t)"attempting registration for (", 29);
      *(_BYTE *)(v132 + 17) = 0;
      v133 = SipRegistrationClient::allowedServices(this);
      std::string::basic_string[abi:ne180100]<0>(&v160, ",");
      BambiServices::namesForServiceMask(v133, (uint64_t)&v160, __p);
      LoggableString::LoggableString((std::string *)v142, (const std::string *)__p);
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v132 + 40))(v132, v142);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v132 + 8), (uint64_t)") with reason ", 14);
      *(_BYTE *)(v132 + 17) = 0;
      LoggableString::LoggableString(&v159, (const std::string *)((char *)this + 3896));
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v132 + 40))(v132, &v159);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v132 + 64))(v132, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v132 + 17) = 0;
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v159.__r_.__value_.__l.__data_);
      if ((v142[23] & 0x80000000) != 0)
        operator delete(*(void **)v142);
      if (SBYTE7(v138[0]) < 0)
        operator delete(__p[0]);
      if (v162 < 0)
        operator delete(v160);
    }
    SipRegistrationClient::sendRequest((SipRegistrationClient *)v142, (uint64_t)this);
    v134 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)&v142[8] + 24))(*(_QWORD *)&v142[8], *(unsigned int *)&v142[16]);
    ImsResult::~ImsResult((ImsResult *)v142);
    if ((v134 & 1) == 0)
      (*(void (**)(_QWORD))(**((_QWORD **)this + 454) + 352))(*((_QWORD *)this + 454));
  }
  ImsResult::~ImsResult((ImsResult *)&v157);
}

void sub_1BF06C618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;
  uint64_t v44;

  if (*(char *)(v44 - 97) < 0)
    operator delete(*(void **)(v43 + 104));
  if (a16 < 0)
    operator delete(__p);
  SipUri::~SipUri((SipUri *)&a38);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::coalesceLazuliRegistrationRefresh(SipRegistrationClient *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  int v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  time_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  tm *v22;
  tm *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _BYTE v32[24];
  _BYTE *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 45);
  v3 = *(std::__shared_weak_count **)(v2 + 16);
  if (v3 && (v4 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v5 = v4;
    v6 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 8) + 2657);
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (v8)
    {
      if (!v6)
        return;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
      if (!v6)
        return;
    }
  }
  else if (!MEMORY[0xA61])
  {
    return;
  }
  v9 = time(0);
  v10 = *((_QWORD *)this + 62);
  if (v10 < 1
    || (v11 = *((_QWORD *)this + 60), v12 = __OFSUB__(v11, v10), v13 = v11 - v10, (v13 < 0) ^ v12 | (v13 == 0)))
  {
    v14 = 0;
  }
  else
  {
    v14 = v13 * *((unsigned int *)this + 291) / 100;
  }
  v16 = *((_QWORD *)this + 25);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v15)
  {
    p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
  }
  v20 = (char *)this + 16;
  v21 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"Registration refresh is due at ", 31);
  *(_BYTE *)(v21 + 17) = 0;
  ims::formatTimeAndIntervalFromNow(*((ims **)this + 61), v21, v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)", with cushion ", 15);
  *(_BYTE *)(v21 + 17) = 0;
  ims::formatTimeAndIntervalFromNow((ims *)(*((_QWORD *)this + 61) - v14), v21, v23);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v21 + 17) = 0;
  v24 = *((_QWORD *)this + 61);
  if (v24 >= 1 && v9 >= v24 - v14)
  {
    v25 = (*(uint64_t (**)(char *))(*(_QWORD *)v20 + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v20 + 16))((char *)this + 16, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"Coalescing Lazuli registration with IMS", 39);
    *(_BYTE *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v25 + 17) = 0;
    SipTimerContainer::cancelTimer((SipRegistrationClient *)((char *)this + 216), (std::string *)&qword_1ED70ED40);
    SipTimerContainer::cancelTimer((SipRegistrationClient *)((char *)this + 216), (std::string *)&_MergedGlobals_14);
    if ((SipRegistrationClient::refreshRegistration(this) & 1) == 0)
    {
      v26 = *((_QWORD *)this + 59);
      if (v15)
      {
        v27 = (unint64_t *)&v15->__shared_weak_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v29 = operator new(0x20uLL);
      *v29 = &off_1E78D76D8;
      v29[1] = this;
      v29[2] = v16;
      v29[3] = v15;
      v33 = v29;
      SipTimerContainer::startTimer((_QWORD *)this + 27, (uint64_t)&qword_1ED70ED40, (uint64_t)v32, 1000 * (v26 - v9), 1);
      v30 = v33;
      if (v33 == v32)
      {
        v31 = 4;
        v30 = v32;
      }
      else
      {
        if (!v33)
          goto LABEL_30;
        v31 = 5;
      }
      (*(void (**)(void))(*v30 + 8 * v31))();
    }
  }
LABEL_30:
  if (v15)
  {
    std::__shared_weak_count::__release_weak(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
}

void sub_1BF06CBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  std::__shared_weak_count *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  if (v13)
  {
    std::__shared_weak_count::__release_weak(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipRegistrationClient::handleHysteresisTimer(SipRegistrationClient *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const void *v9;
  _BYTE *v10;
  _BYTE *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  int isVoiceRegistrationBarred;
  uint64_t v31;
  std::string v33;
  std::string __p;

  if (*((_DWORD *)this + 132) != 2)
    return 0;
  v2 = *((_QWORD *)this + 45);
  v3 = *(std::__shared_weak_count **)(v2 + 16);
  if (v3 && (v4 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v5 = v4;
    v6 = *(_QWORD *)(v2 + 8) + 3136;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v6 = 3136;
  }
  if (!ims::AccessNetwork::isLTE((ims::AccessNetwork *)v6))
  {
    v21 = *((_QWORD *)this + 2);
    v20 = (char *)this + 16;
    v22 = (*(uint64_t (**)(char *))(v21 + 64))(v20);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v20 + 16))(v20, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"Hysteresis timer fired while not on LTE network, ignoring.", 58);
    *(_BYTE *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v19 = 0;
    *(_BYTE *)(v22 + 17) = 0;
    return v19;
  }
  v9 = (const void *)*((_QWORD *)this + 497);
  if (!v9)
    return 0;
  if (!v10)
    return 0;
  v11 = v10;
  v12 = (char *)this + 16;
  v13 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"hysteresis timer fired with deferred action: ", 45);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(std::string *__return_ptr, _BYTE *))(*(_QWORD *)v11 + 24))(&v33, v11);
  LoggableString::LoggableString(&__p, &v33);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v13 + 40))(v13, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v14 = (_QWORD *)((char *)this + 3976);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if ((v11[48] & 1) != 0)
  {
    v23 = *((_QWORD *)this + 45);
    v24 = *(std::__shared_weak_count **)(v23 + 16);
    if (v24 && (v25 = std::__shared_weak_count::lock(v24)) != 0)
    {
      v26 = v25;
      v27 = *(_QWORD *)(v23 + 8) + 2904;
      v28 = (unint64_t *)&v25->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    else
    {
      v27 = 2904;
    }
    isVoiceRegistrationBarred = BambiAccessBarring::isVoiceRegistrationBarred((BambiAccessBarring *)v27);
    v15 = (*(uint64_t (**)(char *))(*(_QWORD *)v12 + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 16))((char *)this + 16, v15);
    v16 = *(_QWORD **)(v15 + 8);
    if (!isVoiceRegistrationBarred)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"performing deferred registration on hysteresis timeout", 54);
      *(_BYTE *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v15 + 17) = 0;
      v19 = 1;
      SipRegistrationDeferralManager::perform(v14, 1);
      return v19;
    }
    v17 = "hysteresis timer fired while Access Barring is in effect";
    v18 = 56;
  }
  else
  {
    v15 = (*(uint64_t (**)(char *))(*(_QWORD *)v12 + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 16))((char *)this + 16, v15);
    v16 = *(_QWORD **)(v15 + 8);
    v17 = "new registration wasn't for voice";
    v18 = 33;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
  v31 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)"ignoring deferred registration action and telling delegate about our current registration", 89);
  *(_BYTE *)(v31 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v31 + 17) = 0;
  SipRegistrationClient::notifyDelegateOfCurrentRegistration(this);
  SipRegistrationDeferralManager::cancel((uint64_t)this + 3976);
  return 1;
}

void sub_1BF06D008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipRegistrationClient::notifyDelegateOfCurrentRegistration(SipRegistrationClient *this)
{
  int v2;
  time_t v3;
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  _OWORD v11[2];
  std::__shared_weak_count *v12[2];
  __int128 v13;
  _OWORD v14[5];
  void *__p[2];
  __int128 v16;
  __int128 v17;
  _OWORD v18[28];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  memset(v18, 0, sizeof(v18));
  SipContact::SipContact((uint64_t)v18, 0);
  SipUri::operator=((SipUri *)((char *)&v18[2] + 8), (uint64_t)this + 624);
  v2 = *((_DWORD *)this + 276);
  HIDWORD(v18[0]) = 2;
  DWORD2(v22) = v2;
  v3 = time(0);
  v4 = *((_QWORD *)this + 59);
  if (v4 >= v3)
    v5 = v4 - v3;
  else
    v5 = 0;
  DWORD2(v19) = v5;
  v16 = 0u;
  v17 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v14, 0, sizeof(v14));
  *(_OWORD *)v12 = 0u;
  v13 = 0u;
  memset(v11, 0, sizeof(v11));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v9, (_QWORD *)this + 25);
  SipRegistrationActiveNotification::SipRegistrationActiveNotification((uint64_t)v11, &v9, (uint64_t)v18, (uint64_t)this + 3800, 0);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  SipRegistrationActiveNotification::notifyDelegate((SipRegistrationActiveNotification *)v11);
  *(_QWORD *)&v11[0] = &off_1E78F0038;
  if (SHIBYTE(v16) < 0)
    operator delete(__p[1]);
  ImsResult::~ImsResult((ImsResult *)((char *)v14 + 8));
  *(_QWORD *)&v11[0] = &unk_1E78EFEC8;
  if ((_QWORD)v13)
    (*(void (**)(_QWORD))(*(_QWORD *)v13 + 8))(v13);
  *(_QWORD *)&v11[0] = &unk_1E78F0000;
  if (v12[1])
    std::__shared_weak_count::__release_weak(v12[1]);
  SipContact::~SipContact((SipContact *)v18);
}

void sub_1BF06D1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  SipRegistrationActiveNotification::~SipRegistrationActiveNotification(&a11);
  SipContact::~SipContact((SipContact *)&a35);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::handleTimer(SipRegistrationClient *this, uint64_t a2)
{
  const void **v2;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  const void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const void **v13;
  uint64_t v14;
  const char *v15;
  const void **v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  int v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BambiClient *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  capabilities::radio *shouldDeferRegistration;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  const char *v38;
  const void **v39;
  uint64_t v40;
  const void *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  uint64_t *v46;
  const void **v47;
  uint64_t v48;
  std::string *v49;
  const void **v50;
  uint64_t v51;
  ImsResult *v52;
  const void *v53;
  uint64_t v54;
  ImsPrefs *v55;
  void **LimitedConnectivityHysteresisFromRegistrationKey;
  _BOOL4 v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  ImsPrefs *v63;
  void **v64;
  void *v65;
  int v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  _BOOL4 isNR;
  BOOL v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  const ImsResult *v89;
  _BYTE *v90;
  NSObject *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count *v97;
  void (**v98)(ImsResult *__hidden);
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  void (**v108)(ImsResult *__hidden);
  uint64_t v109;
  _QWORD *(*v110)(uint64_t);
  __int128 v111;
  __int128 v112;
  __int128 v113;
  _BYTE v114[72];
  _OWORD v115[5];

  v2 = (const void **)a2;
  v4 = *(unsigned __int8 *)(a2 + 23);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v4 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = qword_1ED70ED30;
  if (byte_1ED70ED3F >= 0)
    v7 = byte_1ED70ED3F;
  if (v6 != v7)
    goto LABEL_17;
  if (byte_1ED70ED3F >= 0)
    v8 = &_MergedGlobals_14;
  else
    v8 = (uint64_t *)_MergedGlobals_14;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v2, v8, v5))
      goto LABEL_17;
LABEL_37:
    v18 = *((_QWORD *)this + 45);
    v19 = *(std::__shared_weak_count **)(v18 + 16);
    if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
    {
      v21 = v20;
      v22 = *(unsigned __int8 *)(*(_QWORD *)(v18 + 8) + 2657);
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v21);
      }
      if (v22)
      {
LABEL_55:
        shouldDeferRegistration = (capabilities::radio *)SipRegistrationClient::shouldDeferRegistration(this);
        if (!(_DWORD)shouldDeferRegistration)
          goto LABEL_147;
        v35 = *((_QWORD *)this + 45);
        v115[0] = 0uLL;
        v36 = *(std::__shared_weak_count **)(v35 + 16);
        if (v36)
        {
          v36 = std::__shared_weak_count::lock(v36);
          v37 = v36;
          *((_QWORD *)&v115[0] + 1) = v36;
          if (v36)
          {
            v36 = *(std::__shared_weak_count **)(v35 + 8);
            *(_QWORD *)&v115[0] = v36;
          }
        }
        else
        {
          v37 = 0;
        }
        v55 = (ImsPrefs *)SipStack::prefs((SipStack *)v36);
        LimitedConnectivityHysteresisFromRegistrationKey = (void **)ImsPrefs::getLimitedConnectivityHysteresisFromRegistrationKey(v55);
        shouldDeferRegistration = (capabilities::radio *)ImsPrefs::prefWithKey(v55, LimitedConnectivityHysteresisFromRegistrationKey);
        if (shouldDeferRegistration)
        {
          shouldDeferRegistration = (capabilities::radio *)(*(uint64_t (**)(capabilities::radio *))(*(_QWORD *)shouldDeferRegistration + 40))(shouldDeferRegistration);
          v57 = (int)shouldDeferRegistration;
          if (!v37)
            goto LABEL_111;
        }
        else
        {
          v57 = *((_BYTE *)LimitedConnectivityHysteresisFromRegistrationKey + 57) != 0;
          if (!v37)
            goto LABEL_111;
        }
        v58 = (unint64_t *)&v37->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
          if (v57)
            goto LABEL_112;
          goto LABEL_147;
        }
LABEL_111:
        if (v57)
        {
LABEL_112:
          v60 = *((_QWORD *)this + 45);
          v115[0] = 0uLL;
          v61 = *(std::__shared_weak_count **)(v60 + 16);
          if (v61)
          {
            v61 = std::__shared_weak_count::lock(v61);
            v62 = v61;
            *((_QWORD *)&v115[0] + 1) = v61;
            if (v61)
            {
              v61 = *(std::__shared_weak_count **)(v60 + 8);
              *(_QWORD *)&v115[0] = v61;
            }
          }
          else
          {
            v62 = 0;
          }
          SipStack::handleConnectivityHysteresisTimeout((SipStack *)v61);
          if (!v62)
            return;
          v99 = (unint64_t *)&v62->__shared_owners_;
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          goto LABEL_185;
        }
LABEL_147:
        if (capabilities::radio::supportsRel16(shouldDeferRegistration))
        {
          v74 = *((_QWORD *)this + 45);
          v75 = *(std::__shared_weak_count **)(v74 + 16);
          if (v75 && (v76 = std::__shared_weak_count::lock(v75)) != 0)
          {
            v77 = v76;
            isNR = ims::AccessNetwork::isNR((ims::AccessNetwork *)(*(_QWORD *)(v74 + 8) + 3136));
            v79 = isNR;
            v80 = (unint64_t *)&v77->__shared_owners_;
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (v81)
            {
              if (!isNR)
                goto LABEL_188;
            }
            else
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
              if (!v79)
                goto LABEL_188;
            }
          }
          else if (!ims::AccessNetwork::isNR((ims::AccessNetwork *)0xC40))
          {
            goto LABEL_188;
          }
          v82 = *((_QWORD *)this + 45);
          v83 = *(std::__shared_weak_count **)(v82 + 16);
          if (v83 && (v84 = std::__shared_weak_count::lock(v83)) != 0)
          {
            v85 = v84;
            v86 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v82 + 8) + 136) + 240);
            v87 = (unint64_t *)&v84->__shared_owners_;
            do
              v88 = __ldaxr(v87);
            while (__stlxr(v88 - 1, v87));
            if (!v88)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v85);
            }
          }
          else
          {
            v86 = *(_QWORD *)(MEMORY[0x88] + 240);
          }
          if (!v86)
          {
            memset((char *)&v115[1] + 8, 0, 48);
            *(_QWORD *)&v115[0] = &off_1E78B7238;
            *((_QWORD *)&v115[0] + 1) = &_bambiDomain;
            LODWORD(v115[1]) = 1073741826;
            SipRegistrationClient::handleRegistrationError(this, (uint64_t **)v115, -1, 1, 0);
LABEL_179:
            v52 = (ImsResult *)v115;
LABEL_180:
            ImsResult::~ImsResult(v52);
            return;
          }
          if (*(_QWORD *)(v86 + 8) && *(_BYTE *)(v86 + 72))
          {
            v92 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
            (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v92);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v92 + 8), (uint64_t)"RefreshRegAccessCheck...", 24);
            *(_BYTE *)(v92 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v92 + 64))(v92, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v92 + 17) = 0;
            v93 = *((_QWORD *)this + 45);
            *((_QWORD *)&v115[0] + 1) = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v93 + 16));
            *(_QWORD *)&v115[0] = *(_QWORD *)(v93 + 8);
            v94 = *(unsigned int *)(*(_QWORD *)&v115[0] + 4076);
            v95 = *((_QWORD *)this + 45);
            v108 = 0;
            v109 = 0;
            v96 = *(std::__shared_weak_count **)(v95 + 16);
            if (v96)
            {
              v97 = std::__shared_weak_count::lock(v96);
              v109 = (uint64_t)v97;
              if (v97)
              {
                v98 = *(void (***)(ImsResult *__hidden))(v95 + 8);
                v108 = v98;
                goto LABEL_191;
              }
            }
            else
            {
              v97 = 0;
            }
            v98 = 0;
LABEL_191:
            IMSNasDeviceClient::reportCallStatus(v86, v94, 0, 64, (uint64_t)(v98 + 392), 1, 0);
            if (v97)
            {
              v103 = (unint64_t *)&v97->__shared_owners_;
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 - 1, v103));
              if (!v104)
              {
                ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                std::__shared_weak_count::__release_weak(v97);
              }
            }
            if (*((_QWORD *)&v115[0] + 1))
            {
              v105 = (unint64_t *)(*((_QWORD *)&v115[0] + 1) + 8);
              do
                v106 = __ldaxr(v105);
              while (__stlxr(v106 - 1, v105));
              if (!v106)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v115[0] + 1) + 16))(*((_QWORD *)&v115[0] + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v115[0] + 1));
              }
            }
            SipRegistrationClient::setClientState(this, 3u);
            SipRegistrationClient::nasImsRegStart(this);
            v107 = *((_QWORD *)this + 454);
            if (v107)
            {
              *(_QWORD *)(v107 + 400) = 0;
              *(_QWORD *)(v107 + 408) = 0;
            }
            return;
          }
          v101 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
          (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v101);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v101 + 8), (uint64_t)"No Baseband for architecture or Baseband is currently not available: go straight to refreshRegistration", 103);
          *(_BYTE *)(v101 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v101 + 64))(v101, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v101 + 17) = 0;
        }
LABEL_188:
        SipRegistrationClient::refreshRegistration(this);
        return;
      }
    }
    else if (MEMORY[0xA61])
    {
      goto LABEL_55;
    }
    v25 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"Check if we need to coalesce registration refresh on other stacks", 65);
    *(_BYTE *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v25 + 17) = 0;
    v26 = *((_QWORD *)this + 45);
    *((_QWORD *)&v115[0] + 1) = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v26 + 16));
    *(_QWORD *)&v115[0] = *(_QWORD *)(v26 + 8);
    v27 = *(BambiClient **)(*(_QWORD *)&v115[0] + 136);
    v28 = *((_QWORD *)this + 45);
    v29 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v28 + 16));
    v109 = (uint64_t)v29;
    v108 = *(void (***)(ImsResult *__hidden))(v28 + 8);
    BambiClient::coalesceLazuliRegistrationRefresh(v27, *((_DWORD *)v108 + 1019));
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
    if (*((_QWORD *)&v115[0] + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v115[0] + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v115[0] + 1) + 16))(*((_QWORD *)&v115[0] + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v115[0] + 1));
      }
    }
    goto LABEL_55;
  }
  if (!(_DWORD)v4)
    goto LABEL_37;
  v9 = v2;
  v10 = v4;
  while (*(unsigned __int8 *)v9 == *(unsigned __int8 *)v8)
  {
    v9 = (const void **)((char *)v9 + 1);
    v8 = (uint64_t *)((char *)v8 + 1);
    if (!--v10)
      goto LABEL_37;
  }
LABEL_17:
  v11 = qword_1ED70ED48;
  if (byte_1ED70ED57 >= 0)
    v11 = byte_1ED70ED57;
  if (v6 != v11)
    goto LABEL_29;
  if (byte_1ED70ED57 >= 0)
    v12 = &qword_1ED70ED40;
  else
    v12 = (uint64_t *)qword_1ED70ED40;
  if ((v4 & 0x80) != 0)
  {
    v41 = *v2;
    if (memcmp(*v2, v12, v5))
    {
      if (v5 != 19)
      {
        if (v5 != 22)
          goto LABEL_78;
        goto LABEL_74;
      }
      goto LABEL_77;
    }
LABEL_69:
    LODWORD(v115[0]) = 0;
    SipRegistrationClient::setRegistrationState((uint64_t)this, (int *)v115, 0);
    if (!SipRegistrationClient::shouldDeferRegistration(this))
      goto LABEL_128;
    v42 = *((_QWORD *)this + 45);
    v115[0] = 0uLL;
    v43 = *(std::__shared_weak_count **)(v42 + 16);
    if (v43)
    {
      v43 = std::__shared_weak_count::lock(v43);
      v44 = v43;
      *((_QWORD *)&v115[0] + 1) = v43;
      if (v43)
      {
        v43 = *(std::__shared_weak_count **)(v42 + 8);
        *(_QWORD *)&v115[0] = v43;
      }
    }
    else
    {
      v44 = 0;
    }
    v63 = (ImsPrefs *)SipStack::prefs((SipStack *)v43);
    v64 = (void **)ImsPrefs::getLimitedConnectivityHysteresisFromRegistrationKey(v63);
    v65 = ImsPrefs::prefWithKey(v63, v64);
    if (v65)
    {
      v66 = (*(uint64_t (**)(void *))(*(_QWORD *)v65 + 40))(v65);
      if (!v44)
        goto LABEL_124;
    }
    else
    {
      v66 = *((_BYTE *)v64 + 57) != 0;
      if (!v44)
        goto LABEL_124;
    }
    v67 = (unint64_t *)&v44->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
LABEL_124:
    if (v66)
    {
      v69 = *((_QWORD *)this + 45);
      v115[0] = 0uLL;
      v70 = *(std::__shared_weak_count **)(v69 + 16);
      if (v70)
      {
        v70 = std::__shared_weak_count::lock(v70);
        v62 = v70;
        *((_QWORD *)&v115[0] + 1) = v70;
        if (v70)
        {
          v70 = *(std::__shared_weak_count **)(v69 + 8);
          *(_QWORD *)&v115[0] = v70;
        }
      }
      else
      {
        v62 = 0;
      }
      SipStack::handleConnectivityHysteresisTimeout((SipStack *)v70);
      if (!v62)
        return;
      v102 = (unint64_t *)&v62->__shared_owners_;
      do
        v100 = __ldaxr(v102);
      while (__stlxr(v100 - 1, v102));
LABEL_185:
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
      return;
    }
LABEL_128:
    v71 = *((_QWORD *)this + 454);
    if (v71 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v71 + 464))(v71))
      (*(void (**)(SipRegistrationClient *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 168))(this, 22, -1, 0);
    else
      (*(void (**)(SipRegistrationClient *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, 0, 0, 0);
    return;
  }
  if (!(_DWORD)v4)
    goto LABEL_69;
  v13 = v2;
  v14 = v4;
  while (*(unsigned __int8 *)v13 == *(unsigned __int8 *)v12)
  {
    v13 = (const void **)((char *)v13 + 1);
    v12 = (uint64_t *)((char *)v12 + 1);
    if (!--v14)
      goto LABEL_69;
  }
LABEL_29:
  if (v6 != 19)
  {
    if (v6 != 22)
      goto LABEL_78;
    if ((v4 & 0x80) == 0)
    {
      if ((_DWORD)v4)
      {
        v15 = "IPSecFailureRetryTimer";
        v16 = v2;
        v17 = v4;
        while (*(unsigned __int8 *)v16 == *(unsigned __int8 *)v15)
        {
          v16 = (const void **)((char *)v16 + 1);
          ++v15;
          if (!--v17)
            goto LABEL_75;
        }
        goto LABEL_78;
      }
LABEL_75:
      (*(void (**)(SipRegistrationClient *))(*(_QWORD *)this + 128))(this);
      return;
    }
    v41 = *v2;
LABEL_74:
    if (memcmp(v41, "IPSecFailureRetryTimer", v5))
      goto LABEL_78;
    goto LABEL_75;
  }
  if ((v4 & 0x80) != 0)
  {
    v41 = *v2;
LABEL_77:
    if (memcmp(v41, "TransportRetryTimer", v5))
      goto LABEL_78;
LABEL_97:
    if (*((_DWORD *)this + 130) != 1)
      return;
    SipRegistrationClient::initializeTransport((SipRegistrationClient *)v114, (uint64_t)this);
    v52 = (ImsResult *)v114;
    goto LABEL_180;
  }
  if (!(_DWORD)v4)
    goto LABEL_97;
  v38 = "TransportRetryTimer";
  v39 = v2;
  v40 = v4;
  while (*(unsigned __int8 *)v39 == *(unsigned __int8 *)v38)
  {
    v39 = (const void **)((char *)v39 + 1);
    ++v38;
    if (!--v40)
      goto LABEL_97;
  }
LABEL_78:
  v45 = qword_1ED70ED60;
  if (byte_1ED70ED6F >= 0)
    v45 = byte_1ED70ED6F;
  if (v6 != v45)
    goto LABEL_90;
  if (byte_1ED70ED6F >= 0)
    v46 = &qword_1ED70ED58;
  else
    v46 = (uint64_t *)qword_1ED70ED58;
  if ((v4 & 0x80) != 0)
  {
    v53 = *v2;
    if (memcmp(*v2, v46, v5))
    {
      if (v5 != 18)
        goto LABEL_134;
      goto LABEL_133;
    }
LABEL_102:
    v54 = (*(uint64_t (**)(char *, uint64_t *))(*((_QWORD *)this + 2) + 64))((char *)this + 16, v46);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)"faking registration termination", 31);
    *(_BYTE *)(v54 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v54 + 17) = 0;
    (*(void (**)(SipRegistrationClient *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, 3, 0, 0);
    return;
  }
  if (!(_DWORD)v4)
    goto LABEL_102;
  v47 = v2;
  v48 = v4;
  while (*(unsigned __int8 *)v47 == *(unsigned __int8 *)v46)
  {
    v47 = (const void **)((char *)v47 + 1);
    v46 = (uint64_t *)((char *)v46 + 1);
    if (!--v48)
      goto LABEL_102;
  }
LABEL_90:
  if (v6 != 18)
    goto LABEL_134;
  if ((v4 & 0x80) != 0)
  {
    v53 = *v2;
LABEL_133:
    if (memcmp(v53, &kRegHysteresisTimer, v5))
      goto LABEL_134;
LABEL_145:
    SipRegistrationClient::handleHysteresisTimer(this);
    return;
  }
  if (!(_DWORD)v4)
    goto LABEL_145;
  v49 = &kRegHysteresisTimer;
  v50 = v2;
  v51 = v4;
  while (*(unsigned __int8 *)v50 == v49->__r_.__value_.__s.__data_[0])
  {
    v50 = (const void **)((char *)v50 + 1);
    v49 = (std::string *)((char *)v49 + 1);
    if (!--v51)
      goto LABEL_145;
  }
LABEL_134:
  v72 = qword_1ED70ED78;
  if (byte_1ED70ED87 >= 0)
    v72 = byte_1ED70ED87;
  if (v6 != v72)
    return;
  if (byte_1ED70ED87 >= 0)
    v73 = &qword_1ED70ED70;
  else
    v73 = (uint64_t *)qword_1ED70ED70;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v2, v73, v5))
      return;
    goto LABEL_163;
  }
  if (!(_DWORD)v4)
  {
LABEL_163:
    if (*((_DWORD *)this + 130) != 8)
      return;
    memset(v115, 0, 72);
    v111 = 0u;
    v112 = 0u;
    v113 = 0u;
    v108 = &off_1E78B7238;
    v109 = (uint64_t)&_bambiDomain;
    LODWORD(v110) = 1073741830;
    v89 = (const ImsResult *)ImsResult::operator<<<char [41]>((uint64_t)&v108, "timed out waiting for nw path evaluation");
    ImsResult::ImsResult((ImsResult *)v115, v89);
    ImsResult::~ImsResult((ImsResult *)&v108);
    v90 = (_BYTE *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
    (*(void (**)(char *, _BYTE *))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v90);
    (*(void (**)(_OWORD *, _BYTE *))(*(_QWORD *)&v115[0] + 16))(v115, v90);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v90 + 64))(v90, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v90[17] = 0;
    v91 = *((_QWORD *)this + 512);
    v108 = (void (**)(ImsResult *__hidden))MEMORY[0x1E0C809B0];
    v109 = 0x40000000;
    v110 = ___ZN21ImsNetworkPathManager5abortEP22ImsNetworkPathDelegate_block_invoke;
    *(_QWORD *)&v111 = &__block_descriptor_tmp_14_4;
    *((_QWORD *)&v111 + 1) = (char *)this + 4064;
    *(_QWORD *)&v112 = (char *)this + 184;
    dispatch_async(v91, &v108);
    SipRegistrationClient::handleRegistrationError(this, (uint64_t **)v115, -1, 1, 0);
    SipRegistrationClient::setClientState(this, 1u);
    goto LABEL_179;
  }
  while (*(unsigned __int8 *)v2 == *(unsigned __int8 *)v73)
  {
    v2 = (const void **)((char *)v2 + 1);
    v73 = (uint64_t *)((char *)v73 + 1);
    if (!--v4)
      goto LABEL_163;
  }
}

void sub_1BF06DF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipRegistrationClient::handleTimer(uint64_t a1, uint64_t a2)
{
  SipRegistrationClient::handleTimer((SipRegistrationClient *)(a1 - 192), a2);
}

uint64_t SipRegistrationClient::subscribeToRegEvents(SipRegistrationClient *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  int v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  ImsPrefs *v17;
  void **NewSubscriptionOnReRegistrationKey;
  void *v19;
  int v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t result;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _BYTE *v31;
  char *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  time_t v38;
  time_t v39;
  uint64_t v40;
  _BYTE *v41;
  SipRegistrationEventPackage *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  int v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51[2];
  _QWORD v52[2];
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;

  if (!*((_BYTE *)this + 1145))
  {
    v21 = (char *)this + 16;
    v11 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v21 + 16))(v21, v11);
    v12 = *(_QWORD **)(v11 + 8);
    v13 = "registration subscription is disabled";
    v22 = 37;
LABEL_24:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v22);
    *(_BYTE *)(v11 + 17) = 0;
    result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    return result;
  }
  v2 = *((_QWORD *)this + 45);
  v3 = *(std::__shared_weak_count **)(v2 + 16);
  if (v3 && (v4 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v5 = v4;
    v6 = *(_DWORD *)(*(_QWORD *)(v2 + 8) + 200);
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
    }
    if (v6 != 2)
      goto LABEL_9;
  }
  else if (MEMORY[0xC8] != 2)
  {
LABEL_9:
    v10 = *((_QWORD *)this + 2);
    v9 = (char *)this + 16;
    v11 = (*(uint64_t (**)(char *))(v10 + 64))(v9);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v9 + 16))(v9, v11);
    v12 = *(_QWORD **)(v11 + 8);
    v13 = "stack is not initialized.  Skipping reg subscription.";
LABEL_23:
    v22 = 53;
    goto LABEL_24;
  }
  if (*((_DWORD *)this + 132) != 2)
  {
    v24 = *((_QWORD *)this + 2);
    v23 = (char *)this + 16;
    v11 = (*(uint64_t (**)(char *))(v24 + 64))(v23);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v23 + 16))(v23, v11);
    v12 = *(_QWORD **)(v11 + 8);
    v13 = "we aren't registered. Not auto-renewing subscription.";
    goto LABEL_23;
  }
  if (*((_DWORD *)this + 130) != 1)
  {
    v27 = *((_QWORD *)this + 2);
    v26 = (char *)this + 16;
    v11 = (*(uint64_t (**)(char *))(v27 + 64))(v26);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v26 + 16))(v26, v11);
    v12 = *(_QWORD **)(v11 + 8);
    v13 = "we're in the middle of a registration. Not auto-renewing subscription.";
    v22 = 70;
    goto LABEL_24;
  }
  v14 = *((_QWORD *)this + 58);
  if (v14)
  {
    if ((SipUri::equals((SipUri *)(v14 + 56), (SipRegistrationClient *)((char *)this + 2808), 1) & 1) == 0)
    {
      v28 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"proxy changed - terminating old reg subscription and starting a new one", 71);
      *(_BYTE *)(v28 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v28 + 17) = 0;
LABEL_33:
      SipRegistrationClient::terminateRegEvents(this);
      goto LABEL_34;
    }
    if (!*(_DWORD *)(*((_QWORD *)this + 454) + 216))
    {
      v29 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v29);
      v30 = "initial registration - terminating old reg subscription and starting a new one";
LABEL_32:
      v31 = (_BYTE *)ImsOutStream::operator<<(v29, v30);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v31[17] = 0;
      goto LABEL_33;
    }
    v15 = *((_QWORD *)this + 45);
    v53 = 0;
    v54 = 0;
    v16 = *(std::__shared_weak_count **)(v15 + 16);
    if (v16)
    {
      v16 = std::__shared_weak_count::lock(v16);
      v54 = v16;
      if (v16)
      {
        v16 = *(std::__shared_weak_count **)(v15 + 8);
        v53 = v16;
      }
    }
    v17 = (ImsPrefs *)SipStack::prefs((SipStack *)v16);
    NewSubscriptionOnReRegistrationKey = (void **)ImsPrefs::getNewSubscriptionOnReRegistrationKey(v17);
    v19 = ImsPrefs::prefWithKey(v17, NewSubscriptionOnReRegistrationKey);
    if (v19)
      v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v19 + 40))(v19);
    else
      v20 = *((unsigned __int8 *)NewSubscriptionOnReRegistrationKey + 57);
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v53);
    if (v20)
    {
      v29 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v29);
      v30 = "terminating old reg subscription and starting a new one";
      goto LABEL_32;
    }
    v46 = *((unsigned __int8 *)this + 2338);
    v47 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v47);
    if (!v46)
    {
      v50 = (_BYTE *)ImsOutStream::operator<<(v47, "subscribeToRegEvents: already have an active subscription");
      result = (*(uint64_t (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v50[17] = 0;
      return result;
    }
    v48 = (_BYTE *)ImsOutStream::operator<<(v47, "re-subscribe on re-registration enabled");
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v48[17] = 0;
  }
LABEL_34:
  if ((*(unsigned int (**)(SipRegistrationClient *))(*(_QWORD *)this + 248))(this))
  {
    v33 = *((_QWORD *)this + 2);
    v32 = (char *)this + 16;
    v11 = (*(uint64_t (**)(char *))(v33 + 64))(v32);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v32 + 16))(v32, v11);
    v12 = *(_QWORD **)(v11 + 8);
    v13 = "skipping reg event subscription for emergency registration";
    v22 = 58;
    goto LABEL_24;
  }
  if (SipRegistrationClient::shouldDeferRegistration(this))
  {
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(v52, (_QWORD *)this + 25);
    SipRegistrationDeferralManager::deferAction((const void **)this + 497, (uint64_t)v52);
    return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v52);
  }
  v34 = *((_DWORD *)this + 288);
  if (v34)
  {
    v35 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v35);
    v36 = ImsOutStream::operator<<(v35, "using subscription expiration ");
    std::ostream::operator<<();
    *(_BYTE *)(v36 + 17) = 0;
    v37 = " from config";
  }
  else
  {
    v38 = *((_QWORD *)this + 59);
    v39 = time(0);
    if (v38 <= v39 + 161)
    {
      v49 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v49);
      v41 = (_BYTE *)ImsOutStream::operator<<(v49, "using default subscription expiration");
      v34 = 0;
      goto LABEL_43;
    }
    v34 = v38 - v39 + 161;
    v40 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v40);
    v36 = ImsOutStream::operator<<(v40, "calculated subscription expiration ");
    std::ostream::operator<<();
    *(_BYTE *)(v36 + 17) = 0;
    v37 = " from registration expiration";
  }
  v41 = (_BYTE *)ImsOutStream::operator<<(v36, v37);
LABEL_43:
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v41[17] = 0;
  v42 = (SipRegistrationEventPackage *)*((_QWORD *)this + 58);
  if (!v42)
  {
    v43 = operator new();
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(v51, (_QWORD *)this + 25);
    SipRegistrationEventPackage::SipRegistrationEventPackage(v43, v51, (uint64_t)this + 2808);
    *((_QWORD *)this + 58) = v43;
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v51);
    v42 = (SipRegistrationEventPackage *)*((_QWORD *)this + 58);
  }
  result = SipRegistrationEventPackage::subscribe(v42, v34);
  if ((result & 1) == 0)
  {
    v44 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 48))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v44);
    v45 = (_BYTE *)ImsOutStream::operator<<(v44, "unable to subscribe to reg events");
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v45[17] = 0;
    result = *((_QWORD *)this + 58);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    *((_QWORD *)this + 58) = 0;
  }
  return result;
}

void sub_1BF06E5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1C3B87100](v9, 0x10B3C40CA5C5AE7);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'SipRegistrationClient::subscribeToRegEvents(SipRegistrationClient *this)
{
  return SipRegistrationClient::subscribeToRegEvents((SipRegistrationClient *)((char *)this - 144));
}

uint64_t ___ZN21SipRegistrationClient24unsubscribeFromRegEventsEv_block_invoke(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
}

uint64_t ___ZN21SipRegistrationClient18terminateRegEventsEv_block_invoke(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
}

uint64_t SipRegistrationClient::regEventSubscriptionFailed(SipRegistrationClient *this, SipRegistrationEventPackage *a2, uint64_t **a3, uint64_t a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*((SipRegistrationEventPackage **)this + 58) != a2)
  {
    v7 = (char *)this + 16;
    v8 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v7 + 16))((char *)this + 16, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"ignoring subscriptionFailed for unknown subscription", 52);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
  }
  v9 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"registration event subscription failed", 38);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  *((_QWORD *)this + 58) = 0;
  if (a3[1] == &SipResultDomain::_domain && *((_DWORD *)a3 + 4) == 489)
  {
    v10 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"received 489 response to SUBSCRIBE.  Disabling registration subscription.", 73);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    *((_BYTE *)this + 1145) = 0;
  }
  SipRegistrationSubject::actionOnObservers((uint64_t)this + 152, (uint64_t)&__block_literal_global_187);
  return (*(uint64_t (**)(_QWORD, uint64_t **, uint64_t))(**((_QWORD **)this + 454) + 400))(*((_QWORD *)this + 454), a3, a4);
}

uint64_t ___ZN21SipRegistrationClient26regEventSubscriptionFailedEP27SipRegistrationEventPackageR9ImsResultj_block_invoke(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
}

uint64_t ___ZN21SipRegistrationClient27regEventSubscriptionSuccessEP27SipRegistrationEventPackage_block_invoke(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 8))(*a2);
}

void SipRegistrationClient::regEventSubscriptionTerminated(SipRegistrationClient *this, SipRegistrationEventPackage *a2, int a3)
{
  char *v6;
  SipRegistrationEventPackage *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;

  v6 = (char *)this + 16;
  v7 = (SipRegistrationEventPackage *)*((_QWORD *)this + 58);
  v8 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v6 + 16))(v6, v8);
  v9 = *(_QWORD **)(v8 + 8);
  if (v7 == a2)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"registration event subscription terminated", 42);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    *((_QWORD *)this + 58) = 0;
    if (*((_DWORD *)this + 132) == 2)
    {
      if (*((_DWORD *)this + 130) == 1)
      {
        SipRegistrationSubject::actionOnObservers((uint64_t)this + 152, (uint64_t)&__block_literal_global_196);
        if (a3 && *((_BYTE *)this + 2337))
        {
          v10 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))(v6);
          (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))(v6, v10);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"assuming our registration was terminated as well", 48);
          *(_BYTE *)(v10 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v10 + 17) = 0;
          (*(void (**)(SipRegistrationClient *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, 1, 0, 0);
        }
        else if (*((_BYTE *)this + 608))
        {
          v14 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))(v6);
          (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))(v6, v14);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"auto-renewing registration event subscription", 45);
          *(_BYTE *)(v14 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v14 + 17) = 0;
          (*(void (**)(SipRegistrationClient *))(*(_QWORD *)this + 184))(this);
        }
      }
      else
      {
        v12 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))(v6);
        (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))(v6, v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"we're in the middle of a ", 25);
        *(_BYTE *)(v12 + 17) = 0;
        if (*((_BYTE *)this + 3648))
          v13 = "de";
        else
          v13 = "";
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)v13, 2 * *((unsigned __int8 *)this + 3648));
        *(_BYTE *)(v12 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"registration. Not auto-renewing subscription.", 45);
        *(_BYTE *)(v12 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v12 + 17) = 0;
      }
    }
    else
    {
      v11 = (*(uint64_t (**)(char *))(*(_QWORD *)v6 + 64))(v6);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v6 + 16))(v6, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"we aren't registered. Not auto-renewing subscription.", 53);
      *(_BYTE *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v11 + 17) = 0;
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ignoring subscriptionTerminated for unknown subscription", 56);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
  }
}

uint64_t ___ZN21SipRegistrationClient30regEventSubscriptionTerminatedEP27SipRegistrationEventPackageb_block_invoke(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
}

void SipRegistrationClient::updateServiceMask(uint64_t a1, int a2, int a3, std::string *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  time_t v16;
  uint64_t v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  void *v24[2];
  __int128 v25;
  std::__shared_weak_count *v26[2];
  __int128 v27;
  _OWORD v28[5];
  void *v29[2];
  __int128 v30;
  __int128 v31;
  void *v32[2];
  char v33;
  std::string v34;
  std::string v35;
  std::string v36;
  void *__p[2];
  __int128 v38;
  _OWORD v39[26];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  std::string v44;

  v10 = a1 + 16;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v11);
  v12 = *(_QWORD **)(v11 + 8);
  if (!a2 && (a3 & 1) == 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"updateServiceMask: new mask is 0. Resending current state to delegate.", 70);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    SipRegistrationClient::notifyDelegateOfCurrentRegistration((SipRegistrationClient *)a1);
    return;
  }
  if (a3)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"reregistering for services (", 28);
    *(_BYTE *)(v11 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v44, ",");
    BambiServices::namesForServiceMask(a2, (uint64_t)&v44, v24);
    LoggableString::LoggableString((std::string *)__p, (const std::string *)v24);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 40))(v11, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)")", 1);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (SBYTE7(v38) < 0)
      operator delete(__p[0]);
    if (SBYTE7(v25) < 0)
      operator delete(v24[0]);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v44.__r_.__value_.__l.__data_);
      if (a2)
        goto LABEL_11;
    }
    else if (a2)
    {
LABEL_11:
      bzero(__p, 0x688uLL);
      SipRegistrationConfig::SipRegistrationConfig((SipRegistrationConfig *)__p, (const SipRegistrationConfig *)(a1 + 1112));
      if (a5)
      {
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 64))(v10);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"updating configured services mask from (", 40);
        *(_BYTE *)(v13 + 17) = 0;
        v14 = *(_DWORD *)(a1 + 1136);
        std::string::basic_string[abi:ne180100]<0>(&v36, ",");
        BambiServices::namesForServiceMask(v14, (uint64_t)&v36, &v44);
        LoggableString::LoggableString((std::string *)v24, &v44);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 40))(v13, v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)") to (", 6);
        *(_BYTE *)(v13 + 17) = 0;
        std::string::basic_string[abi:ne180100]<0>(v32, ",");
        BambiServices::namesForServiceMask(a2, (uint64_t)v32, &v34);
        LoggableString::LoggableString(&v35, &v34);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v13 + 40))(v13, &v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)")", 1);
        *(_BYTE *)(v13 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v13 + 17) = 0;
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v34.__r_.__value_.__l.__data_);
        if (v33 < 0)
          operator delete(v32[0]);
        if (SBYTE7(v25) < 0)
          operator delete(v24[0]);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44.__r_.__value_.__l.__data_);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
        DWORD2(v38) = a2;
      }
      SipRegistrationClient::registerWithConfig(a1, (uint64_t)__p, a4, 0);
      SipRegistrationConfig::~SipRegistrationConfig(__p);
      return;
    }
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 168))(a1, 3, 0, 0);
    LODWORD(__p[0]) = 0;
    SipRegistrationClient::setRegistrationState(a1, (int *)__p, 0);
    return;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"not reregistering, but updating service mask from (", 51);
  *(_BYTE *)(v11 + 17) = 0;
  v15 = *(_DWORD *)(a1 + 1136);
  std::string::basic_string[abi:ne180100]<0>(&v44, ",");
  BambiServices::namesForServiceMask(v15, (uint64_t)&v44, v24);
  LoggableString::LoggableString((std::string *)__p, (const std::string *)v24);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 40))(v11, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)") to (", 6);
  *(_BYTE *)(v11 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v34, ",");
  BambiServices::namesForServiceMask(a2, (uint64_t)&v34, &v35);
  LoggableString::LoggableString(&v36, &v35);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 40))(v11, &v36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)")", 1);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SBYTE7(v38) < 0)
    operator delete(__p[0]);
  if (SBYTE7(v25) < 0)
    operator delete(v24[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  *(_DWORD *)(a1 + 1136) = a2;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  memset(v39, 0, sizeof(v39));
  *(_OWORD *)__p = 0u;
  v38 = 0u;
  SipContact::SipContact((uint64_t)__p, 0);
  SipUri::operator=((SipUri *)((char *)v39 + 8), a1 + 624);
  HIDWORD(__p[1]) = 2;
  DWORD2(v43) = a2;
  v16 = time(0);
  v17 = *(_QWORD *)(a1 + 472);
  if (v17 >= v16)
    v18 = v17 - v16;
  else
    v18 = 0;
  DWORD2(v40) = v18;
  v30 = 0u;
  v31 = 0u;
  *(_OWORD *)v29 = 0u;
  memset(v28, 0, sizeof(v28));
  *(_OWORD *)v26 = 0u;
  v27 = 0u;
  *(_OWORD *)v24 = 0u;
  v25 = 0u;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v22, (_QWORD *)(a1 + 200));
  SipRegistrationActiveNotification::SipRegistrationActiveNotification((uint64_t)v24, &v22, (uint64_t)__p, a1 + 3800, 0);
  v19 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  SipRegistrationClient::updateRegistrationState((SipRegistrationClient *)a1, (const SipRegistrationStateNotification *)v24);
  v24[0] = &off_1E78F0038;
  if (SHIBYTE(v30) < 0)
    operator delete(v29[1]);
  ImsResult::~ImsResult((ImsResult *)((char *)v28 + 8));
  v24[0] = &unk_1E78EFEC8;
  if ((_QWORD)v27)
    (*(void (**)(_QWORD))(*(_QWORD *)v27 + 8))(v27);
  v24[0] = &unk_1E78F0000;
  if (v26[1])
    std::__shared_weak_count::__release_weak(v26[1]);
  SipContact::~SipContact((SipContact *)__p);
}

void sub_1BF06F180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59)
{
  uint64_t v59;

  if (a49 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a16 < 0)
    operator delete(a11);
  if (*(char *)(v59 - 65) < 0)
    operator delete(*(void **)(v59 - 88));
  if (a58 < 0)
    operator delete(a53);
  SipRegistrationConfig::~SipRegistrationConfig(&a59);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::handleAccessCheck(SipRegistrationClient *this, const ImsResult *a2, uint64_t a3)
{
  _DWORD *v6;
  uint64_t v7;
  capabilities::radio *v8;
  int v9;
  uint64_t v10;
  time_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v6 = (_DWORD *)((char *)this + 16);
  v7 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"handleAccessCheck (barringDurationInSeconds=", 44);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)") ...", 5);
  *(_BYTE *)(v7 + 17) = 0;
  v8 = (capabilities::radio *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if ((v6[126] - 2) >= 3)
  {
    v14 = (*(uint64_t (**)(_DWORD *))(*((_QWORD *)this + 2) + 48))(v6);
    (*(void (**)(_DWORD *, uint64_t))(*((_QWORD *)this + 2) + 16))(v6, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"access check response triggered from unexpected state ", 54);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v14 + 32))(v14, &clientStateNames[24 * *((unsigned int *)this + 130)]);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
  }
  else
  {
    if (capabilities::radio::supportsRel16(v8)
      && (v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 1) + 24))(*((_QWORD *)a2 + 1), *((unsigned int *)a2 + 4)), a3)&& v9&& (v10 = *((_QWORD *)this + 454)) != 0)
    {
      v11 = time(0);
      *(_QWORD *)(v10 + 400) = a3;
      *(_QWORD *)(v10 + 408) = v11;
      v12 = (*(uint64_t (**)(_QWORD, const ImsResult *, uint64_t))(**((_QWORD **)this + 454) + 304))(*((_QWORD *)this + 454), a2, 1);
      v13 = (*(uint64_t (**)(_DWORD *))(*((_QWORD *)this + 2) + 64))(v6);
      (*(void (**)(_DWORD *, uint64_t))(*((_QWORD *)this + 2) + 16))(v6, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"MAV: updated secondsUntilNextRetry to ", 38);
    }
    else
    {
      v13 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 64))(v6);
      (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v6 + 16))(v6, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Neither r16MAV nor INT: set secondsUntilNextRetry to ", 53);
      v12 = -1;
    }
    *(_BYTE *)(v13 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 1) + 24))(*((_QWORD *)a2 + 1), *((unsigned int *)a2 + 4)))
    {
      SipRegistrationClient::handleRegistrationError(this, (uint64_t **)a2, v12, 1, 1);
    }
    else
    {
      v15 = *((_DWORD *)this + 130);
      switch(v15)
      {
        case 4:
          SipRegistrationClient::setClientState(this, 1u);
          SipRegistrationClient::internalRetryRegistration((uint64_t)this);
          break;
        case 3:
          SipRegistrationClient::setClientState(this, 1u);
          SipRegistrationClient::refreshRegistration(this);
          break;
        case 2:
          v20 = 0;
          v18 = 0u;
          v19 = 0u;
          v16 = 0u;
          v17 = 0u;
          SipRegistrationClient::initializeTransport((SipRegistrationClient *)&v16, (uint64_t)this);
          if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v16 + 1) + 24))(*((_QWORD *)&v16 + 1), v17))
          {
            SipRegistrationClient::handleRegistrationError(this, (uint64_t **)&v16, -1, 1, 0);
          }
          ImsResult::~ImsResult((ImsResult *)&v16);
          break;
      }
    }
  }
}

void sub_1BF06F668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ImsResult::~ImsResult((ImsResult *)&a9);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::handleAccessCongested(SipRegistrationClient *this, uint64_t a2)
{
  char *v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  time_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(ImsResult *__hidden);
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if ((capabilities::radio::supportsRel16(this) & 1) != 0)
  {
    v4 = (char *)this + 16;
    v5 = *((_DWORD *)this + 130) - 5;
    v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v6);
    v7 = *(_QWORD **)(v6 + 8);
    if (v5 >= 5)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"handleAccessCongested: current state is ", 40);
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v6 + 32))(v6, &clientStateNames[24 * *((unsigned int *)this + 130)]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)": Indication ignored.", 21);
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v6 + 17) = 0;
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"handleAccessCongested (congestionDurationInSeconds=", 51);
      *(_BYTE *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)") while in state ", 17);
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v6 + 32))(v6, &clientStateNames[24 * *((unsigned int *)this + 130)]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" ...", 4);
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 349) + 32))(*((_QWORD *)this + 349), 7);
      if (a2 && (v8 = *((_QWORD *)this + 454)) != 0)
      {
        v9 = time(0);
        *(_QWORD *)(v8 + 400) = a2;
        *(_QWORD *)(v8 + 408) = v9;
        v10 = *((_QWORD *)this + 454);
        v23 = 0;
        v24 = 0;
        v16 = &off_1E78B7238;
        v17 = &_bambiDomain;
        v18 = 0x40000000;
        v21 = 0;
        v22 = 0;
        v19 = 0;
        v20 = 0;
        v11 = (*(uint64_t (**)(uint64_t, void (***)(ImsResult *__hidden), _QWORD))(*(_QWORD *)v10 + 304))(v10, &v16, 0);
        ImsResult::~ImsResult((ImsResult *)&v16);
        v12 = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 64))((char *)this + 16);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))((char *)this + 16, v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"updated secondsUntilNextRetry to ", 33);
        *(_BYTE *)(v12 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v12 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v12 + 17) = 0;
      }
      else
      {
        v11 = -1;
      }
      v23 = 0;
      v24 = 0;
      v16 = &off_1E78B7238;
      v17 = &_bambiDomain;
      v18 = 0x40000000;
      v21 = 0;
      v22 = 0;
      v19 = 0;
      v20 = 0;
      SipRegistrationClient::handleRegistrationError(this, (uint64_t **)&v16, v11, 1, 0);
      ImsResult::~ImsResult((ImsResult *)&v16);
    }
  }
  else
  {
    v14 = *((_QWORD *)this + 2);
    v13 = (char *)this + 16;
    v15 = (*(uint64_t (**)(char *))(v14 + 64))(v13);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v13 + 16))(v13, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"handleAccessCongested: not a Rel16CapableMavRadio. Indication ignored.", 70);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
  }
}

void sub_1BF06F984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

SipRegistrationPolicy *SipRegistrationClient::handleBarringAccessAlleviated(SipRegistrationClient *this)
{
  char *v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  SipRegistrationPolicy *result;

  v2 = (char *)this + 16;
  v3 = *((_DWORD *)this + 130);
  v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v4);
  v5 = *(_QWORD **)(v4 + 8);
  if (v3 == 1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"handleBarringAccessAlleviated...", 32);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    result = (SipRegistrationPolicy *)*((_QWORD *)this + 454);
    if (result)
      return (SipRegistrationPolicy *)SipRegistrationPolicy::handleBarringAccessAlleviated(result);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"handleBarringAccessAlleviated: current state is ", 48);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 32))(v4, &clientStateNames[24 * *((unsigned int *)this + 130)]);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)": Indication ignored.", 21);
    *(_BYTE *)(v4 + 17) = 0;
    result = (SipRegistrationPolicy *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
  }
  return result;
}

void SipRegistrationClient::transportInitializedToProxy(SipRegistrationClient *this, const SipUri *a2, uint64_t **a3)
{
  uint64_t v6;
  SipTimerContainer *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  int v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  SipRegistrationClient *v19;
  uint64_t **v20;
  uint64_t v21;
  _QWORD v22[2];
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  if ((*(unsigned int (**)(uint64_t *, _QWORD))(*a3[1] + 24))(a3[1], *((unsigned int *)a3 + 4)))
  {
    v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"unable to initialize transport: ", 32);
    *(_BYTE *)(v6 + 17) = 0;
    ((void (*)(uint64_t **, uint64_t))(*a3)[2])(a3, v6);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v22[0] = &off_1E78B7238;
    v22[1] = &_bambiDomain;
    v23 = 1073741842;
    if (a3[1] != &_bambiDomain)
    {
      ImsResult::~ImsResult((ImsResult *)v22);
LABEL_18:
      v18 = SipSimpleBackoffTimer::scheduleRetry((SipRegistrationClient *)((char *)this + 3656));
      v19 = this;
      v20 = a3;
LABEL_19:
      SipRegistrationClient::handleRegistrationError(v19, v20, v18, 1, 0);
      return;
    }
    v9 = *((_DWORD *)a3 + 4);
    ImsResult::~ImsResult((ImsResult *)v22);
    if (v9 != 1073741842)
      goto LABEL_18;
    v10 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"A network error occured while trying to initialize transport layer.  We will not retry registration.", 100);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    v11 = *((_QWORD *)this + 45);
    v12 = *(std::__shared_weak_count **)(v11 + 16);
    if (v12 && (v13 = std::__shared_weak_count::lock(v12)) != 0)
    {
      v14 = v13;
      v15 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 8) + 2657);
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v14);
      }
      if (!v15)
        goto LABEL_22;
    }
    else if (!MEMORY[0xA61])
    {
LABEL_22:
      v19 = this;
      v20 = a3;
      v18 = -1;
      goto LABEL_19;
    }
    v21 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"Skipping to next proxy for lazuli stack.", 40);
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(_QWORD))(**((_QWORD **)this + 454) + 504))(*((_QWORD *)this + 454));
    goto LABEL_22;
  }
  (*(void (**)(_QWORD, const SipUri *))(**((_QWORD **)this + 454) + 488))(*((_QWORD *)this + 454), a2);
  SipUri::operator=((SipRegistrationClient *)((char *)this + 2808), (uint64_t)a2);
  v7 = (SipTimerContainer *)*((_QWORD *)this + 458);
  if (v7)
    SipTimerContainer::cancelTimer(v7, (std::string *)((char *)this + 3680));
  *((_DWORD *)this + 918) = 0;
  if (*((_DWORD *)this + 130) == 5)
  {
    SipRegistrationClient::sendInitialRequest(this);
  }
  else
  {
    v8 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 48))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"transport initialize callback triggered from unexpected state ", 62);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v8 + 32))(v8, &clientStateNames[24 * *((unsigned int *)this + 130)]);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    SipRegistrationClient::setClientState(this, 1u);
  }
}

void `non-virtual thunk to'SipRegistrationClient::transportInitializedToProxy(SipRegistrationClient *this, const SipUri *a2, uint64_t **a3)
{
  SipRegistrationClient::transportInitializedToProxy((SipRegistrationClient *)((char *)this - 8), a2, a3);
}

uint64_t ___ZN21SipRegistrationClient10deregisterEv_block_invoke(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
}

void SipRegistrationClient::sendRequest(SipRegistrationClient *this, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _BYTE *v6;
  ImsResult *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *size;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  SipRequest *v25;
  int v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  const SipMessage *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  std::string v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  _OWORD v80[5];

  if (!*(_QWORD *)(a2 + 2784))
  {
    memset((char *)&v80[1] + 8, 0, 48);
    *(_QWORD *)&v80[0] = &off_1E78B7238;
    *((_QWORD *)&v80[0] + 1) = &_bambiDomain;
    LODWORD(v80[1]) = 1073741826;
    v7 = (ImsResult *)ImsResult::operator<<<char [28]>((uint64_t)v80, "no REGISTER request to send");
    ImsLogContainer::logResult((ImsLogContainer *)(a2 + 16), v7);
    ImsResult::ImsResult(this, v7);
    goto LABEL_87;
  }
  if (*(_DWORD *)(a2 + 520) == 9 && (v4 = *(_QWORD *)(a2 + 504)) != 0)
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
  else
    v5 = 0;
  memset(v80, 0, 72);
  SipRegistrationClient::updateContact((SipRegistrationClient *)v80, a2, v5);
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v80[0] + 1) + 24))(*((_QWORD *)&v80[0] + 1), LODWORD(v80[1])))
  {
    v6 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 16) + 56))(a2 + 16);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(a2 + 16) + 16))(a2 + 16, v6);
    (*(void (**)(_OWORD *, _BYTE *))(*(_QWORD *)&v80[0] + 16))(v80, v6);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v6[17] = 0;
    SipRegistrationClient::handleRegistrationError((SipRegistrationClient *)a2, (uint64_t **)v80, -1, 1, 0);
    ImsResult::ImsResult((uint64_t)this, (uint64_t)v80);
    goto LABEL_87;
  }
  v78 = 0;
  v79 = 0;
  if (v5)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 16) + 64))(a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 16) + 16))(a2 + 16, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"sending request through pending SA", 34);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v78, (uint64_t *)(a2 + 504));
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 3632);
    if (v9 && *(_BYTE *)(v9 + 220))
    {
      v10 = a2 + 16;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 16) + 64))(a2 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 16) + 16))(a2 + 16, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"this is an initial registration. Sending request through default transport, and do not drop incoming message on default SIP port", 128);
      *(_BYTE *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v11 + 17) = 0;
      SipUserAgent::transportLayer(*(SipUserAgent **)(a2 + 360), &v77);
      v12 = *(_QWORD *)(v77.__r_.__value_.__r.__words[0] + 992);
      v13 = *(std::__shared_weak_count **)(v77.__r_.__value_.__r.__words[0] + 1000);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = v79;
      v78 = v12;
      v79 = v13;
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      size = (std::__shared_weak_count *)v77.__r_.__value_.__l.__size_;
      if (v77.__r_.__value_.__l.__size_)
      {
        v20 = (unint64_t *)(v77.__r_.__value_.__l.__size_ + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      SipUserAgent::transportLayer(*(SipUserAgent **)(a2 + 360), &v77);
      v22 = (std::__shared_weak_count *)v77.__r_.__value_.__l.__size_;
      *(_BYTE *)(v77.__r_.__value_.__r.__words[0] + 2017) = 0;
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if (!v78)
      {
        SipUserAgent::transportLayer(*(SipUserAgent **)(a2 + 360), &v77);
        v59 = *(_QWORD *)(v77.__r_.__value_.__r.__words[0] + 1040);
        v60 = *(std::__shared_weak_count **)(v77.__r_.__value_.__r.__words[0] + 1048);
        if (v60)
        {
          v61 = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldxr(v61);
          while (__stxr(v62 + 1, v61));
          do
            v63 = __ldaxr(v61);
          while (__stlxr(v63 - 1, v61));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        v64 = (std::__shared_weak_count *)v77.__r_.__value_.__l.__size_;
        if (v77.__r_.__value_.__l.__size_)
        {
          v65 = (unint64_t *)(v77.__r_.__value_.__l.__size_ + 8);
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        if (v59)
        {
          v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(a2 + 16);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(a2 + 16, v67);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v67 + 8), (uint64_t)"default transport has been removed, resetting transports and reinitializing", 75);
          *(_BYTE *)(v67 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v67 + 64))(v67, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v67 + 17) = 0;
          SipUserAgent::transportLayer(*(SipUserAgent **)(a2 + 360), &v77);
          SipTransportLayer::closeTransports((SipTransportLayer *)v77.__r_.__value_.__l.__data_);
          v68 = (std::__shared_weak_count *)v77.__r_.__value_.__l.__size_;
          if (v77.__r_.__value_.__l.__size_)
          {
            v69 = (unint64_t *)(v77.__r_.__value_.__l.__size_ + 8);
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
          SipRegistrationClient::initializeTransport(this, a2);
          goto LABEL_82;
        }
      }
    }
  }
  SipAuthClient::addAuthorizationToRequest(*(SipAuthClient **)(*(_QWORD *)(a2 + 360) + 280), *(SipRequest **)(a2 + 2784), 0, (uint64_t)&v77);
  ImsResult::operator=((uint64_t)v80, (uint64_t)&v77);
  ImsResult::~ImsResult((ImsResult *)&v77);
  if (!(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v80[0] + 1) + 24))(*((_QWORD *)&v80[0] + 1), LODWORD(v80[1])))
  {
    v25 = *(SipRequest **)(a2 + 2784);
    v26 = *(_DWORD *)(a2 + 448);
    *(_DWORD *)(a2 + 448) = v26 + 1;
    SipRequest::setCSeq(v25, v26);
    *(_WORD *)(a2 + 3890) = *(_DWORD *)(a2 + 452);
    v27 = *(_QWORD *)(a2 + 2792);
    if (v27)
    {
      v75 = 0;
      v76 = 0;
      std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v27 + 344), &v75);
      v28 = v76;
      if (v76)
      {
        v29 = (unint64_t *)&v76->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }
    v31 = SipUserAgent::transactionLayer(*(SipUserAgent **)(a2 + 360));
    v32 = *(const SipMessage **)(a2 + 2784);
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v73, (_QWORD *)(a2 + 200));
    v74 = v73;
    v73 = 0uLL;
    v71 = v78;
    v72 = v79;
    if (v79)
    {
      v33 = (unint64_t *)&v79->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    SipTransactionLayer::sendRequest(v31, v32, (uint64_t *)&v74, &v71, &v77);
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a2 + 2792, (__int128 *)&v77);
    v35 = (std::__shared_weak_count *)v77.__r_.__value_.__l.__size_;
    if (v77.__r_.__value_.__l.__size_)
    {
      v36 = (unint64_t *)(v77.__r_.__value_.__l.__size_ + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = v72;
    if (v72)
    {
      v39 = (unint64_t *)&v72->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
    if (*((_QWORD *)&v74 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
    if (*((_QWORD *)&v73 + 1))
    {
      v45 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = *(_QWORD *)(a2 + 3632);
    if (v47)
    {
      v48 = *(_QWORD *)(a2 + 2792);
      *(_BYTE *)(v48 + 360) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 424))(v47);
    }
    *(_BYTE *)(a2 + 3892) = *(_BYTE *)(a2 + 3648);
    v49 = *(_QWORD *)(a2 + 456);
    if (!v49)
      goto LABEL_81;
    v50 = *(_QWORD *)(a2 + 360);
    v73 = 0uLL;
    v51 = *(std::__shared_weak_count **)(v50 + 16);
    if (v51)
    {
      v52 = std::__shared_weak_count::lock(v51);
      *((_QWORD *)&v73 + 1) = v52;
      if (v52)
      {
        v53 = *(_QWORD *)(v50 + 8);
        *(_QWORD *)&v73 = v53;
LABEL_71:
        if (*(char *)(v53 + 4159) < 0)
          std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)(v53 + 4136), *(_QWORD *)(v53 + 4144));
        else
          v77 = *(std::string *)(v53 + 4136);
        (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v49 + 48))(v49, &v77, a2 + 3800);
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v77.__r_.__value_.__l.__data_);
        if (v52)
        {
          v54 = (unint64_t *)&v52->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
LABEL_81:
        *(_OWORD *)((char *)this + 24) = 0u;
        *(_OWORD *)((char *)this + 40) = 0u;
        *(_OWORD *)((char *)this + 56) = 0u;
        *(_QWORD *)this = &off_1E78B7238;
        *((_QWORD *)this + 1) = &_bambiDomain;
        *((_DWORD *)this + 4) = 0;
        goto LABEL_82;
      }
    }
    else
    {
      v52 = 0;
    }
    v53 = 0;
    goto LABEL_71;
  }
  SipRegistrationClient::handleRegistrationError((SipRegistrationClient *)a2, (uint64_t **)v80, -1, 1, 0);
  ImsResult::ImsResult((uint64_t)this, (uint64_t)v80);
LABEL_82:
  v56 = v79;
  if (v79)
  {
    v57 = (unint64_t *)&v79->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
LABEL_87:
  ImsResult::~ImsResult((ImsResult *)v80);
}

void sub_1BF070680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  ImsResult::~ImsResult((ImsResult *)(v30 - 128));
  _Unwind_Resume(a1);
}

void SipRegistrationClient::updateContact(SipRegistrationClient *this, uint64_t a2, int a3)
{
  SipContactParam *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  ImsPrefs *v10;
  void **AdditionalFeatureTagsKey;
  void *v12;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  const void *v16;
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  ImsPrefs *v21;
  void **TTYOverImsSupportedKey;
  void *v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  std::__shared_weak_count *size;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  int v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  SipMessage *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t (*v48)(_BYTE *);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52[2];
  char v53;
  std::string __str;
  void *__p[2];
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v6 = (SipContactParam *)(a2 + 616);
  SipContactParam::clear((SipContactParam *)(a2 + 616));
  v7 = *(_QWORD *)(a2 + 360);
  __p[0] = 0;
  __p[1] = 0;
  v8 = *(std::__shared_weak_count **)(v7 + 16);
  if (v8)
  {
    v8 = std::__shared_weak_count::lock(v8);
    v9 = v8;
    __p[1] = v8;
    if (v8)
    {
      v8 = *(std::__shared_weak_count **)(v7 + 8);
      __p[0] = v8;
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = (ImsPrefs *)SipStack::prefs((SipStack *)v8);
  AdditionalFeatureTagsKey = (void **)ImsPrefs::getAdditionalFeatureTagsKey(v10);
  v12 = (void *)ImsPrefs::typedPrefWithKey<ImsDictPref>(v10, AdditionalFeatureTagsKey);
  if (v12)
    v13 = v12;
  else
    v13 = AdditionalFeatureTagsKey[11];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v13)
  {
    v16 = (const void *)(*(uint64_t (**)(void *))(*(_QWORD *)v13 + 64))(v13);
    SipContactParam::setAdditionalFeatureTags(v6, v16);
  }
  v17 = SipRegistrationClient::allowedServices((SipRegistrationClient *)a2);
  v18 = *(_QWORD *)(a2 + 360);
  __p[0] = 0;
  __p[1] = 0;
  v19 = *(std::__shared_weak_count **)(v18 + 16);
  if (v19)
  {
    v19 = std::__shared_weak_count::lock(v19);
    v20 = v19;
    __p[1] = v19;
    if (v19)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 8);
      __p[0] = v19;
    }
  }
  else
  {
    v20 = 0;
  }
  v21 = (ImsPrefs *)SipStack::prefs((SipStack *)v19);
  TTYOverImsSupportedKey = (void **)ImsPrefs::getTTYOverImsSupportedKey(v21);
  v23 = ImsPrefs::prefWithKey(v21, TTYOverImsSupportedKey);
  if (v23)
  {
    v24 = (*(uint64_t (**)(void *))(*(_QWORD *)v23 + 40))(v23);
    if (!v20)
      goto LABEL_27;
  }
  else
  {
    v24 = *((_BYTE *)TTYOverImsSupportedKey + 57) != 0;
    if (!v20)
      goto LABEL_27;
  }
  v25 = (unint64_t *)&v20->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_27:
  v27 = v17 & 0xFFFFFFDF;
  if (v24)
    v28 = 32;
  else
    v28 = 0;
  v29 = v28 | v27;
  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  SipUserAgent::fillContactForServicesAndMethod(*(SipUserAgent **)(a2 + 360), (uint64_t)v6, v28 | v27, "REGISTER", 0, (uint64_t)this);
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), *((unsigned int *)this + 4)))
  {
    ImsResult::operator<<<char [33]>((uint64_t)this, "Contact Header generation failed");
    return;
  }
  if (a3 && *(_QWORD *)(a2 + 504))
  {
    v58 = 0;
    v56 = 0u;
    v57 = 0u;
    *(_OWORD *)__p = 0u;
    SipHost::SipHost((uint64_t)__p, a2 + 632);
    (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a2 + 504) + 192))(&__str);
    SipHost::setAddress((uint64_t)__p, &__str);
    size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v31 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)(a2 + 624) + 32))(a2 + 624, __p);
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 16) + 64))(a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 16) + 16))(a2 + 16, v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"using secure server port for contact", 36);
    *(_BYTE *)(v33 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v33 + 17) = 0;
    SipHost::~SipHost(__p);
  }
  SipUserAgent::transportLayer(*(SipUserAgent **)(a2 + 360), __p);
  v34 = *(unsigned __int8 *)((*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 16))(__p[0]) + 439);
  v35 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_44;
  v36 = (unint64_t *)((char *)__p[1] + 8);
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    if (!v34)
      goto LABEL_50;
  }
  else
  {
LABEL_44:
    if (!v34)
      goto LABEL_50;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "transport");
  std::string::basic_string[abi:ne180100]<0>(&__str, "tcp");
  v52[0] = __p;
  v38 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 696), __p, (uint64_t)&std::piecewise_construct, (__int128 **)v52);
  std::string::operator=((std::string *)(v38 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SBYTE7(v56) < 0)
    operator delete(__p[0]);
LABEL_50:
  SipUserAgent::transportLayer(*(SipUserAgent **)(a2 + 360), __p);
  v39 = *(unsigned __int8 *)((*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 16))(__p[0]) + 441);
  v40 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_54;
  v41 = (unint64_t *)((char *)__p[1] + 8);
  do
    v42 = __ldaxr(v41);
  while (__stlxr(v42 - 1, v41));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    if (!v39)
      goto LABEL_60;
  }
  else
  {
LABEL_54:
    if (!v39)
      goto LABEL_60;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "transport");
  std::string::basic_string[abi:ne180100]<0>(&__str, "tls");
  v52[0] = __p;
  v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 696), __p, (uint64_t)&std::piecewise_construct, (__int128 **)v52);
  std::string::operator=((std::string *)(v43 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SBYTE7(v56) < 0)
    operator delete(__p[0]);
LABEL_60:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 248))(a2))
  {
    if ((*(char *)(a2 + 2447) & 0x80000000) == 0)
    {
      if (!*(_BYTE *)(a2 + 2447))
        goto LABEL_67;
LABEL_65:
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      __str.__r_.__value_.__r.__words[0] = a2 + 2424;
      v44 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 696), (void **)(a2 + 2424), (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      std::string::operator=((std::string *)(v44 + 7), (const std::string *)__p);
      if (SBYTE7(v56) < 0)
        operator delete(__p[0]);
      goto LABEL_67;
    }
    if (*(_QWORD *)(a2 + 2432))
      goto LABEL_65;
  }
LABEL_67:
  v45 = *(SipMessage **)(a2 + 2784);
  if (v45)
    SipMessage::setContact(v45, v6);
  v47 = *(_QWORD *)(a2 + 16);
  v46 = (_BYTE *)(a2 + 16);
  v48 = *(uint64_t (**)(_BYTE *))(v47 + 64);
  if (v46[3632])
  {
    v49 = v48(v46);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v46 + 16))(v46, v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v49 + 8), (uint64_t)"deregistering contact: ", 23);
    *(_BYTE *)(v49 + 17) = 0;
    (*(void (**)(SipContactParam *, uint64_t))(*(_QWORD *)v6 + 16))(v6, v49);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v49 + 17) = 0;
  }
  else
  {
    v50 = v48(v46);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v46 + 16))(v46, v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v50 + 8), (uint64_t)"registering contact: ", 21);
    *(_BYTE *)(v50 + 17) = 0;
    (*(void (**)(SipContactParam *, uint64_t))(*(_QWORD *)v6 + 16))(v6, v50);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v50 + 17) = 0;
    v51 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v46 + 64))(v46);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v46 + 16))(v46, v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v51 + 8), (uint64_t)"based on services: ", 19);
    *(_BYTE *)(v51 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(v52, ",");
    BambiServices::namesForServiceMask(v29, (uint64_t)v52, &__str);
    LoggableString::LoggableString((std::string *)__p, &__str);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v51 + 40))(v51, __p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v51 + 17) = 0;
    if (SBYTE7(v56) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v53 < 0)
      operator delete(v52[0]);
  }
}

void sub_1BF070E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  ImsResult *v26;

  ImsResult::~ImsResult(v26);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::sendAuthorizedRequest(SipRegistrationClient *this)
{
  _BYTE v2[72];

  ++*((_DWORD *)this + 113);
  SipRegistrationClient::setClientState(this, 9u);
  *((_BYTE *)this + 3920) = 1;
  SipRegistrationClient::sendRequest((SipRegistrationClient *)v2, (uint64_t)this);
  ImsResult::~ImsResult((ImsResult *)v2);
}

void SipRegistrationClient::handleRegistrationNotification(SipRegistrationClient *this, const SipRegistrationInfo *a2)
{
  SipRegistrationClient *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const SipUri **v7;
  const SipUri **v8;
  char *v9;
  const SipUri *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  int64x2_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  char *v46;
  SipContact **v47;
  SipContact **v48;
  SipContact *v49;
  uint64_t v50;
  _BYTE *v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  SipContact **v55;
  SipContact **v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  unint64_t *p_shared_weak_owners;
  unint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  SipRegistrationClient *v103;
  _QWORD v104[6];
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::string v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  void *__p[2];
  __int128 v114;
  std::__shared_weak_count *v115[2];
  __int128 v116;
  _OWORD v117[5];
  void *v118[2];
  __int128 v119;
  __int128 v120;
  _BYTE v121[32];
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  SipContact *v148[2];
  __int128 v149;
  __int128 v150;
  __int128 v151;
  int64x2_t v152;
  _QWORD v153[2];

  v3 = this;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 454) + 408))(*((_QWORD *)this + 454));
  v5 = *((_QWORD *)a2 + 2);
  v4 = *((_QWORD *)a2 + 3);
  if (v4 == v5)
  {
    v16 = *((_QWORD *)v3 + 2);
    v15 = (char *)v3 + 16;
    v17 = (*(uint64_t (**)(char *))(v16 + 64))(v15);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v15 + 16))(v15, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"no registration info in notification", 36);
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    return;
  }
  v152 = 0uLL;
  v153[0] = 0;
  v6 = *((_QWORD *)v3 + 45);
  v7 = *(const SipUri ***)(v6 + 488);
  v8 = *(const SipUri ***)(v6 + 496);
  if (v7 == v8)
  {
    v13 = 0;
  }
  else
  {
    v103 = v3;
    v9 = (char *)v3 + 16;
    do
    {
      v10 = *v7;
      v12 = *((_QWORD *)a2 + 2);
      v11 = *((_QWORD *)a2 + 3);
      while (v12 != v11)
      {
        v13 = *(_QWORD **)v12;
        if (SipUri::equals((SipUri *)(*(_QWORD *)v12 + 8), v10, 1))
        {
          if (v13)
            goto LABEL_11;
          break;
        }
        v12 += 8;
      }
      v14 = (*(uint64_t (**)(char *))(*(_QWORD *)v9 + 64))(v9);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v9 + 16))(v9, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"NOTIFY doesn't have a registration entry for associated URI ", 60);
      *(_BYTE *)(v14 + 17) = 0;
      (*(void (**)(const SipUri *, uint64_t))(*(_QWORD *)v10 + 40))(v10, v14);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v14 + 17) = 0;
      ++v7;
    }
    while (v7 != v8);
    v13 = 0;
LABEL_11:
    v5 = *((_QWORD *)a2 + 2);
    v4 = *((_QWORD *)a2 + 3);
    v3 = v103;
  }
  if (v4 != v5)
  {
    v18 = 0;
    do
    {
      if (v18 >= (v4 - v5) >> 3)
        v19 = 0;
      else
        v19 = *(_QWORD *)(v5 + 8 * v18);
      SipUri::asString(v19 + 8, 2, __p);
      v20 = *(_DWORD *)(v19 + 440);
      if ((v20 - 1) >= 3)
        v20 = 4 * (v20 == 4);
      DWORD2(v114) = v20;
      v21 = v152.i64[1];
      if (v152.i64[1] >= v153[0])
      {
        v23 = (v152.i64[1] - v152.i64[0]) >> 5;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 59)
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        v25 = v153[0] - v152.i64[0];
        if ((v153[0] - v152.i64[0]) >> 4 > v24)
          v24 = v25 >> 4;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0)
          v26 = 0x7FFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        *(_QWORD *)&v122 = v153;
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RTCPSDesItem>>((uint64_t)v153, v26);
        v28 = &v27[32 * v23];
        *(_QWORD *)v121 = v27;
        *(_QWORD *)&v121[8] = v28;
        *(_QWORD *)&v121[24] = &v27[32 * v29];
        v30 = *(_OWORD *)__p;
        *((_QWORD *)v28 + 2) = v114;
        *(_OWORD *)v28 = v30;
        __p[1] = 0;
        *(_QWORD *)&v114 = 0;
        __p[0] = 0;
        *((_DWORD *)v28 + 6) = DWORD2(v114);
        v31 = v28 + 32;
        *(_QWORD *)&v121[16] = v28 + 32;
        v32 = v152.i64[1];
        v33 = v152.i64[0];
        v34 = *(_QWORD *)&v121[8];
        if (v152.i64[1] == v152.i64[0])
        {
          v36 = vdupq_n_s64(v152.u64[1]);
        }
        else
        {
          do
          {
            v35 = *(_OWORD *)(v32 - 32);
            *(_QWORD *)(v34 - 16) = *(_QWORD *)(v32 - 16);
            *(_OWORD *)(v34 - 32) = v35;
            *(_QWORD *)(v32 - 24) = 0;
            *(_QWORD *)(v32 - 16) = 0;
            *(_QWORD *)(v32 - 32) = 0;
            *(_DWORD *)(v34 - 8) = *(_DWORD *)(v32 - 8);
            v34 -= 32;
            v32 -= 32;
          }
          while (v32 != v33);
          v36 = v152;
          v31 = *(char **)&v121[16];
        }
        v152.i64[0] = v34;
        v152.i64[1] = (uint64_t)v31;
        *(int64x2_t *)&v121[8] = v36;
        v37 = v153[0];
        v153[0] = *(_QWORD *)&v121[24];
        *(_QWORD *)&v121[24] = v37;
        *(_QWORD *)v121 = v36.i64[0];
        std::__split_buffer<ims::RegistrationIdentity>::~__split_buffer((uint64_t)v121);
        v152.i64[1] = (uint64_t)v31;
        if (SBYTE7(v114) < 0)
          operator delete(__p[0]);
      }
      else
      {
        v22 = *(_OWORD *)__p;
        *(_QWORD *)(v152.i64[1] + 16) = v114;
        *(_OWORD *)v21 = v22;
        __p[1] = 0;
        *(_QWORD *)&v114 = 0;
        __p[0] = 0;
        *(_DWORD *)(v21 + 24) = DWORD2(v114);
        v152.i64[1] = v21 + 32;
      }
      ++v18;
      v5 = *((_QWORD *)a2 + 2);
      v4 = *((_QWORD *)a2 + 3);
    }
    while (v18 < (v4 - v5) >> 3);
  }
  if (v152.i64[0] == v152.i64[1])
    goto LABEL_53;
  v38 = *((_QWORD *)v3 + 57);
  if (!v38)
    goto LABEL_53;
  v39 = *((_QWORD *)v3 + 45);
  __p[0] = 0;
  __p[1] = 0;
  v40 = *(std::__shared_weak_count **)(v39 + 16);
  if (!v40)
  {
    v41 = 0;
    goto LABEL_42;
  }
  v41 = std::__shared_weak_count::lock(v40);
  __p[1] = v41;
  if (!v41)
  {
LABEL_42:
    v42 = 0;
    goto LABEL_43;
  }
  v42 = *(_QWORD *)(v39 + 8);
  __p[0] = (void *)v42;
LABEL_43:
  if (*(char *)(v42 + 4159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v121, *(const std::string::value_type **)(v42 + 4136), *(_QWORD *)(v42 + 4144));
  }
  else
  {
    v43 = v42 + 4136;
    *(_OWORD *)v121 = *(_OWORD *)v43;
    *(_QWORD *)&v121[16] = *(_QWORD *)(v43 + 16);
  }
  (*(void (**)(uint64_t, _BYTE *, int64x2_t *))(*(_QWORD *)v38 + 72))(v38, v121, &v152);
  if ((v121[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v121);
    if (!v41)
      goto LABEL_53;
  }
  else if (!v41)
  {
    goto LABEL_53;
  }
  p_shared_owners = (unint64_t *)&v41->__shared_owners_;
  do
    v45 = __ldaxr(p_shared_owners);
  while (__stlxr(v45 - 1, p_shared_owners));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
    if (v13)
      goto LABEL_54;
    goto LABEL_83;
  }
LABEL_53:
  if (v13)
    goto LABEL_54;
LABEL_83:
  v66 = (char *)v3 + 1184;
  v67 = *((_QWORD *)a2 + 2);
  v68 = *((_QWORD *)a2 + 3);
  while (1)
  {
    if (v67 == v68)
      goto LABEL_88;
    v13 = *(_QWORD **)v67;
    if (SipUri::equals((SipUri *)(*(_QWORD *)v67 + 8), (SipRegistrationClient *)((char *)v3 + 1184), 1))
      break;
    v67 += 8;
  }
  if (v13)
  {
LABEL_54:
    v46 = (char *)v3 + 624;
    v47 = (SipContact **)v13[56];
    v48 = (SipContact **)v13[57];
    while (1)
    {
      if (v47 == v48)
        goto LABEL_60;
      v49 = *v47;
      if (SipUri::equals((SipContact *)((char *)*v47 + 40), (SipRegistrationClient *)((char *)v3 + 624), 0))break;
      ++v47;
    }
    if (v49)
    {
      v50 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)v3 + 2) + 64))((uint64_t)v3 + 16);
      (*(void (**)(uint64_t, uint64_t))(*((_QWORD *)v3 + 2) + 16))((uint64_t)v3 + 16, v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v50 + 8), (uint64_t)"found matching URI in NOTIFY body", 33);
      *(_BYTE *)(v50 + 17) = 0;
      v51 = (_BYTE *)(v50 + 17);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_97:
      *v51 = 0;
      goto LABEL_98;
    }
LABEL_60:
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v114 = 0;
    SipUserAgent::makeSipInstance(*((SipUserAgent **)v3 + 45), (uint64_t)__p, (ImsResult *)v121);
    v52 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)&v121[8] + 24))(*(_QWORD *)&v121[8], *(unsigned int *)&v121[16]);
    ImsResult::~ImsResult((ImsResult *)v121);
    if ((v52 & 1) != 0)
    {
      v49 = 0;
      goto LABEL_67;
    }
    std::string::basic_string[abi:ne180100]<0>(v121, "+sip.instance");
    v53 = SipRegistration::contactForParam((uint64_t)v13, (void **)v121, (unsigned __int8 *)__p);
    v49 = (SipContact *)v53;
    if ((v121[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v121);
      if (!v49)
        goto LABEL_67;
    }
    else if (!v53)
    {
LABEL_67:
      if (SBYTE7(v114) < 0)
      {
        operator delete(__p[0]);
        if (!v49)
          goto LABEL_71;
      }
      else if (!v49)
      {
LABEL_71:
        v55 = (SipContact **)v13[56];
        v56 = (SipContact **)v13[57];
        if ((char *)v56 - (char *)v55 == 8 && *((_BYTE *)v3 + 2336))
        {
          if (v56 == v55)
            v49 = 0;
          else
            v49 = *v55;
          v78 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)v3 + 2) + 64))((uint64_t)v3 + 16);
          (*(void (**)(uint64_t, uint64_t))(*((_QWORD *)v3 + 2) + 16))((uint64_t)v3 + 16, v78);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v78 + 8), (uint64_t)"couldn't match my contact in notification.  Using the only contact for my AOR: ", 79);
          *(_BYTE *)(v78 + 17) = 0;
          v51 = (_BYTE *)(v78 + 17);
          SipContact::log(v49, (ImsOutStream *)v78);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v78 + 64))(v78, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          goto LABEL_97;
        }
        v58 = *((_QWORD *)v3 + 2);
        v57 = (char *)v3 + 16;
        v59 = (*(uint64_t (**)(char *))(v58 + 48))(v57);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v57 + 16))(v57, v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v59 + 8), (uint64_t)"registration ", 13);
        *(_BYTE *)(v59 + 17) = 0;
        (*(void (**)(_QWORD *, uint64_t))(v13[1] + 40))(v13 + 1, v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v59 + 8), (uint64_t)" does not have an entry for my contact (", 40);
        *(_BYTE *)(v59 + 17) = 0;
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v46 + 40))(v46, v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v59 + 8), (uint64_t)")", 1);
        *(_BYTE *)(v59 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v59 + 64))(v59, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v59 + 17) = 0;
        v60 = (*(uint64_t (**)(char *))(*(_QWORD *)v57 + 48))(v57);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v57 + 16))(v57, v60);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v60 + 8), (uint64_t)"existing contacts are:", 22);
        *(_BYTE *)(v60 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v60 + 64))(v60, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v60 + 17) = 0;
        v61 = v13[56];
        v62 = v13[57];
        if (v62 != v61)
        {
          v63 = 0;
          do
          {
            if (v63 >= (v62 - v61) >> 3)
              v64 = 0;
            else
              v64 = *(_QWORD *)(v61 + 8 * v63);
            v65 = (*(uint64_t (**)(char *))(*(_QWORD *)v57 + 48))(v57);
            (*(void (**)(char *, uint64_t))(*(_QWORD *)v57 + 16))(v57, v65);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v64 + 40) + 40))(v64 + 40, v65);
            ++v63;
            v61 = v13[56];
            v62 = v13[57];
          }
          while (v63 < (v62 - v61) >> 3);
        }
        goto LABEL_149;
      }
LABEL_98:
      v150 = 0u;
      v151 = 0u;
      *(_OWORD *)v148 = 0u;
      v149 = 0u;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v142 = 0u;
      v143 = 0u;
      v140 = 0u;
      v141 = 0u;
      v138 = 0u;
      v139 = 0u;
      v136 = 0u;
      v137 = 0u;
      v134 = 0u;
      v135 = 0u;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v128 = 0u;
      v129 = 0u;
      v126 = 0u;
      v127 = 0u;
      v124 = 0u;
      v125 = 0u;
      v122 = 0u;
      v123 = 0u;
      memset(v121, 0, sizeof(v121));
      SipContact::SipContact((uint64_t)v121, (uint64_t)v49, 0);
      v79 = (int)v148[1];
      if (!LODWORD(v148[1]))
      {
        if (*(_DWORD *)&v121[12] == 2 && !*(_BYTE *)(SipUserAgent::config(*((SipUserAgent **)v3 + 45)) + 859))
        {
          v80 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)v3 + 2) + 64))((uint64_t)v3 + 16);
          (*(void (**)(uint64_t, uint64_t))(*((_QWORD *)v3 + 2) + 16))((uint64_t)v3 + 16, v80);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v80 + 8), (uint64_t)"received reg NOTIFY with state = active and expires = 0.  Treating it as a termination.", 87);
          *(_BYTE *)(v80 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v80 + 64))(v80, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v80 + 17) = 0;
          *(_DWORD *)&v121[12] = 3;
        }
        v79 = (int)v148[1];
      }
      if (v79 == -1)
      {
        v81 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)v3 + 2) + 64))((uint64_t)v3 + 16);
        (*(void (**)(uint64_t, uint64_t))(*((_QWORD *)v3 + 2) + 16))((uint64_t)v3 + 16, v81);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v81 + 8), (uint64_t)"my contact in NOTIFY doesn't have an expires attribute. Not updating expiration timers.", 87);
        *(_BYTE *)(v81 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v81 + 64))(v81, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v81 + 17) = 0;
      }
      else if (!*(_BYTE *)(SipUserAgent::config(*((SipUserAgent **)v3 + 45)) + 859))
      {
        SipRegistrationClient::updateExpirationTimer(v3, (const SipContact *)LODWORD(v148[1]));
      }
      if (*(_DWORD *)&v121[12] == 2)
      {
        SipRegistrationClient::updateServiceMaskForContact(v3, (SipContact *)v121);
        v119 = 0u;
        v120 = 0u;
        *(_OWORD *)v118 = 0u;
        memset(v117, 0, sizeof(v117));
        *(_OWORD *)v115 = 0u;
        v116 = 0u;
        *(_OWORD *)__p = 0u;
        v114 = 0u;
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v111, (_QWORD *)v3 + 25);
        SipRegistrationActiveNotification::SipRegistrationActiveNotification((uint64_t)__p, &v111, (uint64_t)v121, (uint64_t)v3 + 3800, 1);
        v82 = v112;
        if (v112)
        {
          v83 = (unint64_t *)&v112->__shared_owners_;
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        SipRegistrationClient::updateRegistrationState(v3, (const SipRegistrationStateNotification *)__p);
        __p[0] = &off_1E78F0038;
        if (SHIBYTE(v119) < 0)
          operator delete(v118[1]);
        ImsResult::~ImsResult((ImsResult *)((char *)v117 + 8));
      }
      else
      {
        DWORD2(v151) = 0;
        *(_OWORD *)v115 = 0u;
        v116 = 0u;
        *(_OWORD *)__p = 0u;
        v114 = 0u;
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v109, (_QWORD *)v3 + 25);
        SipRegistrationTerminatedNotification::SipRegistrationTerminatedNotification((uint64_t)__p, &v109, (uint64_t)v121, 1u);
        v85 = v110;
        if (v110)
        {
          v86 = (unint64_t *)&v110->__shared_owners_;
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        SipRegistrationClient::updateRegistrationState(v3, (const SipRegistrationStateNotification *)__p);
        if (*((_QWORD *)v3 + 454))
        {
          v88 = BYTE7(v122);
          if (SBYTE7(v122) < 0)
            v88 = *(_QWORD *)&v121[24];
          if (v88)
          {
            v89 = *((_QWORD *)v3 + 343);
            v90 = *((_QWORD *)v3 + 344);
            v108.__r_.__value_.__s.__data_[0] = 0;
            if (std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v89, v90, (unsigned __int8 **)&v121[16]) != *((_QWORD *)v3 + 344))
            {
              v91 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)v3 + 2) + 64))((uint64_t)v3 + 16);
              (*(void (**)(uint64_t, uint64_t))(*((_QWORD *)v3 + 2) + 16))((uint64_t)v3 + 16, v91);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v91 + 8), (uint64_t)"received NOTIFY with event '", 28);
              *(_BYTE *)(v91 + 17) = 0;
              LoggableString::LoggableString(&v108, (const std::string *)&v121[16]);
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v91 + 40))(v91, &v108);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v91 + 8), (uint64_t)"'. Disabling IMS registration.", 30);
              *(_BYTE *)(v91 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v91 + 64))(v91, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v91 + 17) = 0;
              if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v108.__r_.__value_.__l.__data_);
              v93 = *((_QWORD *)v3 + 25);
              v92 = (std::__shared_weak_count *)*((_QWORD *)v3 + 26);
              if (v92)
              {
                p_shared_weak_owners = (unint64_t *)&v92->__shared_weak_owners_;
                do
                  v95 = __ldxr(p_shared_weak_owners);
                while (__stxr(v95 + 1, p_shared_weak_owners));
              }
              v96 = *((_QWORD *)v3 + 45);
              v97 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v96 + 16));
              v107 = v97;
              v106 = *(_QWORD *)(v96 + 8);
              v98 = *(_QWORD *)(v106 + 136);
              LoggableString::LoggableString((LoggableString *)&v108, "disableRegistration");
              v104[0] = MEMORY[0x1E0C809B0];
              v104[1] = 1174405120;
              v104[2] = ___ZN21SipRegistrationClient30handleRegistrationNotificationERK19SipRegistrationInfo_block_invoke;
              v104[3] = &__block_descriptor_tmp_310;
              v104[4] = v3;
              v104[5] = v93;
              v105 = v92;
              if (v92)
              {
                v99 = (unint64_t *)&v92->__shared_weak_owners_;
                do
                  v100 = __ldxr(v99);
                while (__stxr(v100 + 1, v99));
              }
              (*(void (**)(uint64_t, std::string *, _QWORD *))(*(_QWORD *)v98 + 208))(v98, &v108, v104);
              if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v108.__r_.__value_.__l.__data_);
              v101 = (unint64_t *)&v97->__shared_owners_;
              do
                v102 = __ldaxr(v101);
              while (__stlxr(v102 - 1, v101));
              if (!v102)
              {
                ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                std::__shared_weak_count::__release_weak(v97);
              }
              *((_BYTE *)v3 + 608) = 0;
              if (v105)
                std::__shared_weak_count::__release_weak(v105);
              if (v92)
                std::__shared_weak_count::__release_weak(v92);
            }
          }
        }
      }
      __p[0] = &unk_1E78EFEC8;
      if ((_QWORD)v116)
        (*(void (**)(_QWORD))(*(_QWORD *)v116 + 8))(v116);
      __p[0] = &unk_1E78F0000;
      if (v115[1])
        std::__shared_weak_count::__release_weak(v115[1]);
      SipContact::~SipContact((SipContact *)v121);
      goto LABEL_149;
    }
    v54 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)v3 + 2) + 64))((uint64_t)v3 + 16);
    (*(void (**)(uint64_t, uint64_t))(*((_QWORD *)v3 + 2) + 16))((uint64_t)v3 + 16, v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)"found matching sip.instance in NOTIFY body", 42);
    *(_BYTE *)(v54 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v54 + 17) = 0;
    goto LABEL_67;
  }
LABEL_88:
  v70 = *((_QWORD *)v3 + 2);
  v69 = (char *)v3 + 16;
  v71 = (*(uint64_t (**)(char *))(v70 + 48))(v69);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v69 + 16))(v69, v71);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v71 + 8), (uint64_t)"NOTIFY doesn't have a registration entry for my AOR ", 52);
  *(_BYTE *)(v71 + 17) = 0;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v66 + 40))(v66, v71);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v71 + 64))(v71, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v71 + 17) = 0;
  v72 = (*(uint64_t (**)(char *))(*(_QWORD *)v69 + 48))(v69);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v69 + 16))(v69, v72);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v72 + 8), (uint64_t)"existing registration entries are:", 34);
  *(_BYTE *)(v72 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v72 + 64))(v72, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v72 + 17) = 0;
  v73 = *((_QWORD *)a2 + 2);
  v74 = *((_QWORD *)a2 + 3);
  if (v74 != v73)
  {
    v75 = 0;
    do
    {
      if (v75 >= (v74 - v73) >> 3)
        v76 = 0;
      else
        v76 = *(_QWORD *)(v73 + 8 * v75);
      v77 = (_BYTE *)(*(uint64_t (**)(char *))(*(_QWORD *)v69 + 48))(v69);
      (*(void (**)(char *, _BYTE *))(*(_QWORD *)v69 + 16))(v69, v77);
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v76 + 8) + 40))(v76 + 8, v77);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v77 + 64))(v77, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v77[17] = 0;
      ++v75;
      v73 = *((_QWORD *)a2 + 2);
      v74 = *((_QWORD *)a2 + 3);
    }
    while (v75 < (v74 - v73) >> 3);
  }
LABEL_149:
  *(_QWORD *)v121 = &v152;
  std::vector<ims::RegistrationIdentity>::__destroy_vector::operator()[abi:ne180100]((void ***)v121);
}

void sub_1BF071E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  std::__shared_weak_count *v62;
  uint64_t v63;

  if (a17)
    std::__shared_weak_count::__release_weak(a17);
  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (v62)
    std::__shared_weak_count::__release_weak(v62);
  a30 = &unk_1E78EFEC8;
  if (a39)
    (*(void (**)(uint64_t))(*(_QWORD *)a39 + 8))(a39);
  a30 = &unk_1E78F0000;
  if (a38)
    std::__shared_weak_count::__release_weak(a38);
  SipContact::~SipContact((SipContact *)&a57);
  a30 = (void *)(v63 - 112);
  std::vector<ims::RegistrationIdentity>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  _Unwind_Resume(a1);
}

void ___ZN21SipRegistrationClient30handleRegistrationNotificationERK19SipRegistrationInfo_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
        SipRegistrationPolicy::setRegistrationMode(*(unsigned int **)(v3 + 3632), (unsigned int *)&SipRegistrationMode::kModeDisabled);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF072070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipRegistrationClient::handleAuthChallengeResponse(SipRegistrationClient *this, const SipAuthInfo *a2)
{
  int v3;
  uint64_t v6;
  SipIPSecTransportGroup *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  ImsPrefs *v21;
  void **IPSecBringupUseNetworkPathKey;
  void *v23;
  int v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  ImsPrefs *v38;
  void *IPSecBringupTimeoutMillisecondsKey;
  void *v40;
  unsigned int v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t i;
  std::string *v50;
  std::string *v51;
  __int128 *v52;
  void *__p[2];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  void **v58[2];
  _BYTE v59[24];
  _BYTE *v60;
  std::string v61;
  std::string v62[2];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)this + 130);
  if ((v3 - 7) < 2)
  {
    v57 = 0;
    v55 = 0u;
    v56 = 0u;
    *(_OWORD *)__p = 0u;
    v54 = 0u;
    (*(void (**)(void **__return_ptr))(**((_QWORD **)a2 + 6) + 56))(__p);
    if ((*(unsigned int (**)(void *, _QWORD))(*(_QWORD *)__p[1] + 24))(__p[1], v54))
    {
      ++*((_DWORD *)this + 113);
      SipRegistrationClient::setClientState(this, 1u);
      memset(v62, 0, sizeof(v62));
      v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
      v61.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(v61.__r_.__value_.__r.__words[2]) = 1073741832;
      if (__p[1] != &_bambiDomain)
      {
        ImsResult::~ImsResult((ImsResult *)&v61);
        goto LABEL_19;
      }
      v12 = v54;
      ImsResult::~ImsResult((ImsResult *)&v61);
      if (v12 != 1073741832)
      {
LABEL_19:
        v14 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
        (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"auth failure: ", 14);
        *(_BYTE *)(v14 + 17) = 0;
        (*((void (**)(void **, uint64_t))__p[0] + 2))(__p, v14);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v14 + 17) = 0;
        v15 = (*(uint64_t (**)(SipRegistrationClient *))(*(_QWORD *)this + 248))(this);
        v16 = **((_QWORD **)this + 454);
        if (v15)
        {
          v17 = (*(uint64_t (**)(void))(v16 + 304))();
          SipRegistrationClient::handleRegistrationError(this, (uint64_t **)__p, v17, 1, 0);
        }
        else if ((*(unsigned int (**)(void))(v16 + 320))())
        {
          SipRegistrationClient::internalRetryRegistration((uint64_t)this);
        }
        goto LABEL_45;
      }
      v13 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"auth sync failure.  Retrying initial registration.", 50);
      *(_BYTE *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v13 + 17) = 0;
      SipRegistrationClient::sendInitialRequest(this);
LABEL_45:
      ImsResult::~ImsResult((ImsResult *)__p);
      return;
    }
    v7 = (SipIPSecTransportGroup *)*((_QWORD *)this + 63);
    if (!v7)
      goto LABEL_44;
    SipIPSecTransportGroup::updateKeysFromAuthResponse(v7, *((const SipAuthResponse **)a2 + 6), (uint64_t)&v61);
    ImsResult::operator=((uint64_t)__p, (uint64_t)&v61);
    ImsResult::~ImsResult((ImsResult *)&v61);
    if ((*(unsigned int (**)(void *, _QWORD))(*(_QWORD *)__p[1] + 24))(__p[1], v54))
    {
      v8 = SipUserAgent::config(*((SipUserAgent **)this + 45));
      v9 = SipTimers::timerValue((SipTimers *)(v8 + 512), (const SipTimer *)&SipTimers::kTimerRegAwaitAuth, 0);
      v10 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"unable to update pending SA: ", 29);
      *(_BYTE *)(v10 + 17) = 0;
      (*((void (**)(void **, uint64_t))__p[0] + 2))(__p, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" - will retry in ", 17);
      v11 = v9 / 0x3E8uLL;
      *(_BYTE *)(v10 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"s", 1);
      *(_BYTE *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v10 + 17) = 0;
      SipAuthClient::clear(*(SipAuthClient **)(*((_QWORD *)this + 45) + 280));
      SipRegistrationPolicy::scheduleRetry(*((SipRegistrationPolicy **)this + 454), (const ImsResult *)__p, v11, 0);
      SipRegistrationClient::handleRegistrationError(this, (uint64_t **)__p, v11, 1, 0);
      goto LABEL_45;
    }
    v18 = *((_QWORD *)this + 45);
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = 0uLL;
    v19 = *(std::__shared_weak_count **)(v18 + 16);
    if (v19)
    {
      v19 = std::__shared_weak_count::lock(v19);
      v20 = v19;
      v61.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
      if (v19)
      {
        v19 = *(std::__shared_weak_count **)(v18 + 8);
        v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
      }
    }
    else
    {
      v20 = 0;
    }
    v21 = (ImsPrefs *)SipStack::prefs((SipStack *)v19);
    IPSecBringupUseNetworkPathKey = (void **)ImsPrefs::getIPSecBringupUseNetworkPathKey(v21);
    v23 = ImsPrefs::prefWithKey(v21, IPSecBringupUseNetworkPathKey);
    if (v23)
    {
      v24 = (*(uint64_t (**)(void *))(*(_QWORD *)v23 + 40))(v23);
      if (!v20)
        goto LABEL_35;
    }
    else
    {
      v24 = *((_BYTE *)IPSecBringupUseNetworkPathKey + 57) != 0;
      if (!v20)
        goto LABEL_35;
    }
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
LABEL_35:
    if (v24)
    {
      v27 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"Waiting for network paths to become available", 45);
      *(_BYTE *)(v27 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v27 + 17) = 0;
      SipRegistrationClient::setClientState(this, 8u);
      v29 = *((_QWORD *)this + 25);
      v28 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
      if (v28)
      {
        p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
        do
          v31 = __ldxr(p_shared_weak_owners);
        while (__stxr(v31 + 1, p_shared_weak_owners));
        do
          v32 = __ldxr(p_shared_weak_owners);
        while (__stxr(v32 + 1, p_shared_weak_owners));
        do
          v33 = __ldxr(p_shared_weak_owners);
        while (__stxr(v33 + 1, p_shared_weak_owners));
      }
      v60 = 0;
      v34 = operator new(0x20uLL);
      *v34 = &off_1E78D7858;
      v34[1] = this;
      v34[2] = v29;
      v34[3] = v28;
      v60 = v34;
      v35 = *((_QWORD *)this + 45);
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = 0uLL;
      v36 = *(std::__shared_weak_count **)(v35 + 16);
      if (v36)
      {
        v36 = std::__shared_weak_count::lock(v36);
        v37 = v36;
        v61.__r_.__value_.__l.__size_ = (std::string::size_type)v36;
        if (v36)
        {
          v36 = *(std::__shared_weak_count **)(v35 + 8);
          v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
        }
      }
      else
      {
        v37 = 0;
      }
      v38 = (ImsPrefs *)SipStack::prefs((SipStack *)v36);
      IPSecBringupTimeoutMillisecondsKey = ImsPrefs::getIPSecBringupTimeoutMillisecondsKey(v38);
      v40 = ImsPrefs::prefWithKey(v38, (void **)IPSecBringupTimeoutMillisecondsKey);
      if (v40)
        v41 = (*(uint64_t (**)(void *))(*(_QWORD *)v40 + 56))(v40);
      else
        v41 = *((_DWORD *)IPSecBringupTimeoutMillisecondsKey + 15);
      SipTimerContainer::startTimer((_QWORD *)this + 27, (uint64_t)&qword_1ED70ED70, (uint64_t)v59, v41, 0);
      if (v37)
      {
        v42 = (unint64_t *)&v37->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v44 = v60;
      if (v60 == v59)
      {
        v45 = 4;
        v44 = v59;
      }
      else
      {
        if (!v60)
          goto LABEL_60;
        v45 = 5;
      }
      (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_60:
      v46 = *((_QWORD *)this + 63);
      v47 = *(_QWORD *)(v46 + 288);
      if (*(char *)(v47 + 79) < 0)
      {
        std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)(v47 + 56), *(_QWORD *)(v47 + 64));
        v46 = *((_QWORD *)this + 63);
      }
      else
      {
        v61 = *(std::string *)(v47 + 56);
      }
      v48 = *(_QWORD *)(v46 + 296);
      if (*(char *)(v48 + 79) < 0)
        std::string::__init_copy_ctor_external(v62, *(const std::string::value_type **)(v48 + 56), *(_QWORD *)(v48 + 64));
      else
        v62[0] = *(std::string *)(v48 + 56);
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v58[0] = (void **)&v50;
      v58[1] = 0;
      v50 = (std::string *)operator new(0x30uLL);
      v51 = v50;
      v52 = (__int128 *)&v50[2];
      v51 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v52, (__int128 *)&v61, (__int128 *)&v62[1], v50);
      ImsNetworkPathManager::evaluateInterface((uint64_t)this + 4064, (uint64_t)this + 184, (__int128 **)&v50);
      v58[0] = (void **)&v50;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v58);
      for (i = 0; i != -6; i -= 3)
      {
        if (SHIBYTE(v62[0].__r_.__value_.__r.__words[i + 2]) < 0)
          operator delete(*(void **)((char *)&v61 + i * 8 + 24));
      }
      if (v28)
      {
        std::__shared_weak_count::__release_weak(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      goto LABEL_45;
    }
LABEL_44:
    SipRegistrationClient::sendAuthorizedRequest(this);
    goto LABEL_45;
  }
  if (v3 == 1 || v3 == 10)
  {
    v6 = (*(uint64_t (**)(char *, const SipAuthInfo *))(*((_QWORD *)this + 2) + 64))((char *)this + 16, a2);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"ignoring auth response in state ", 32);
  }
  else
  {
    v6 = (*(uint64_t (**)(char *, const SipAuthInfo *))(*((_QWORD *)this + 2) + 56))((char *)this + 16, a2);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"received auth response in unexpected state ", 43);
  }
  *(_BYTE *)(v6 + 17) = 0;
  LoggableString::LoggableString((std::string *)__p, (const std::string *)&clientStateNames[24 * *((unsigned int *)this + 130)]);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 40))(v6, __p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SBYTE7(v54) < 0)
    operator delete(__p[0]);
  SipRegistrationClient::setClientState(this, 1u);
}

void sub_1BF07291C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::__shared_weak_count *v31;
  uint64_t v32;

  if (*(char *)(v32 - 121) < 0)
    operator delete(*(void **)(v32 - 144));
  if (v31)
  {
    std::__shared_weak_count::__release_weak(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  ImsResult::~ImsResult((ImsResult *)&__p);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipRegistrationClient::handleAuthChallengeResponse(SipRegistrationClient *this, const SipAuthInfo *a2)
{
  SipRegistrationClient::handleAuthChallengeResponse((SipRegistrationClient *)((char *)this - 136), a2);
}

void SipRegistrationClient::handleAuthChallengeTimeout(SipRegistrationClient *this, const SipAuthInfo *a2)
{
  uint64_t v3;
  _BYTE *v4;
  _QWORD v5[2];
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[4];
  uint64_t v11;

  if (*((_DWORD *)this + 130) == 7)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    v7 = 0u;
    v8 = 0u;
    v9 = 0u;
    v5[0] = &off_1E78B7238;
    v5[1] = &_bambiDomain;
    v6 = 1073741830;
    v3 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v3, algn_1ED704220[24]);
    *(_QWORD *)&v7 = v3;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"timed out waiting for auth response from delegate", 49);
    *(_BYTE *)(v3 + 17) = 0;
    ImsResult::ImsResult((ImsResult *)v10, (const ImsResult *)v5);
    ImsResult::~ImsResult((ImsResult *)v5);
    v4 = (_BYTE *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
    (*(void (**)(char *, _BYTE *))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v4);
    (*(void (**)(_OWORD *, _BYTE *))(*(_QWORD *)&v10[0] + 16))(v10, v4);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v4[17] = 0;
    SipRegistrationClient::handleRegistrationError(this, (uint64_t **)v10, -1, 1, 0);
    SipRegistrationClient::setClientState(this, 1u);
    ImsResult::~ImsResult((ImsResult *)v10);
  }
}

void sub_1BF072BB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1C3B87100](v2, 0x10A1C4082A5C483);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipRegistrationClient::handleAuthChallengeTimeout(SipRegistrationClient *this, const SipAuthInfo *a2)
{
  SipRegistrationClient::handleAuthChallengeTimeout((SipRegistrationClient *)((char *)this - 136), a2);
}

void SipRegistrationClient::handlePathSatisfied(SipRegistrationClient *this)
{
  char *v2;
  uint64_t v3;

  if (*((_DWORD *)this + 130) == 8)
  {
    v2 = (char *)this + 16;
    v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Interface network paths satisfied", 33);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    SipTimerContainer::cancelTimer((SipRegistrationClient *)((char *)this + 216), (std::string *)&qword_1ED70ED70);
    SipRegistrationClient::sendAuthorizedRequest(this);
  }
}

void `non-virtual thunk to'SipRegistrationClient::handlePathSatisfied(SipRegistrationClient *this)
{
  SipRegistrationClient::handlePathSatisfied((SipRegistrationClient *)((char *)this - 184));
}

void SipRegistrationClient::handlePathFailed(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const void **v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  const void **v16;
  unsigned __int8 *v17;
  uint64_t v18;
  const ImsResult *v19;
  _BYTE *v20;
  _QWORD v21[2];
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[4];
  uint64_t v27;

  if (*(_DWORD *)(a1 + 520) != 8)
    return;
  v3 = *(_QWORD *)(a1 + 504);
  if (!v3)
    return;
  v4 = a2;
  v5 = *(_QWORD *)(v3 + 288);
  v6 = *(unsigned __int8 *)(v5 + 79);
  v7 = *(_QWORD *)(v5 + 64);
  if ((v6 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(v5 + 79);
  else
    v8 = *(_QWORD *)(v5 + 64);
  v9 = (char)a2[23];
  if (v9 >= 0)
    v10 = a2[23];
  else
    v10 = *((_QWORD *)a2 + 1);
  if (v8 == v10)
  {
    v11 = (const void **)(v5 + 56);
    if (v9 < 0)
      a2 = *(unsigned __int8 **)a2;
    if ((v6 & 0x80) != 0)
    {
      if (!memcmp(*v11, a2, v7))
        goto LABEL_31;
    }
    else
    {
      if (!(_DWORD)v6)
        goto LABEL_31;
      while (*(unsigned __int8 *)v11 == *a2)
      {
        v11 = (const void **)((char *)v11 + 1);
        ++a2;
        if (!--v6)
          goto LABEL_31;
      }
    }
  }
  v12 = *(_QWORD *)(v3 + 296);
  v13 = *(unsigned __int8 *)(v12 + 79);
  v14 = *(_QWORD *)(v12 + 64);
  if ((v13 & 0x80u) == 0)
    v15 = *(unsigned __int8 *)(v12 + 79);
  else
    v15 = *(_QWORD *)(v12 + 64);
  if (v15 != v10)
    return;
  v16 = (const void **)(v12 + 56);
  if (v9 >= 0)
    v17 = v4;
  else
    v17 = *(unsigned __int8 **)v4;
  if ((v13 & 0x80) != 0)
  {
    if (memcmp(*v16, v17, v14))
      return;
    goto LABEL_31;
  }
  if (!(_DWORD)v13)
  {
LABEL_31:
    v27 = 0;
    memset(v26, 0, sizeof(v26));
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v21[0] = &off_1E78B7238;
    v21[1] = &_bambiDomain;
    v22 = 1073741842;
    v18 = ImsResult::operator<<<char [46]>((uint64_t)v21, "Interface network path evaluation failed for ");
    v19 = (const ImsResult *)ImsResult::operator<<<std::string>(v18, (uint64_t)v4);
    ImsResult::ImsResult((ImsResult *)v26, v19);
    ImsResult::~ImsResult((ImsResult *)v21);
    SipTimerContainer::cancelTimer((SipTimerContainer *)(a1 + 216), (std::string *)&qword_1ED70ED70);
    v20 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 56))(a1 + 16);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v20);
    (*(void (**)(_OWORD *, _BYTE *))(*(_QWORD *)&v26[0] + 16))(v26, v20);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v20[17] = 0;
    SipRegistrationClient::handleRegistrationError((SipRegistrationClient *)a1, (uint64_t **)v26, -1, 1, 0);
    SipRegistrationClient::setClientState((_QWORD *)a1, 1u);
    ImsResult::~ImsResult((ImsResult *)v26);
    return;
  }
  while (*(unsigned __int8 *)v16 == *v17)
  {
    v16 = (const void **)((char *)v16 + 1);
    ++v17;
    if (!--v13)
      goto LABEL_31;
  }
}

void sub_1BF072EE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipRegistrationClient::handlePathFailed(uint64_t a1, unsigned __int8 *a2)
{
  SipRegistrationClient::handlePathFailed(a1 - 184, a2);
}

uint64_t SipRegistrationClient::printRegistrationInfo(SipRegistrationClient *this, ImsOutStream *a2)
{
  _anonymous_namespace_ *v4;
  tm *v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;
  void *v10[2];
  char v11;
  std::string v12;
  std::string __p;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"Registration:", 13);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    State:               ", 25);
  *((_BYTE *)a2 + 17) = 0;
  v4 = operator<<(a2, (unsigned int *)this + 132);
  (*(void (**)(_anonymous_namespace_ *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (*((_DWORD *)this + 132) == 2)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Expiration:          ", 25);
    *((_BYTE *)a2 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(*((ims **)this + 59), (uint64_t)a2, v5);
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Configured Services: ", 25);
    *((_BYTE *)a2 + 17) = 0;
    v6 = *((_DWORD *)this + 284);
    std::string::basic_string[abi:ne180100]<0>(v10, ",");
    BambiServices::namesForServiceMask(v6, (uint64_t)v10, &v12);
    LoggableString::LoggableString(&__p, &v12);
    (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    if (v11 < 0)
      operator delete(v10[0]);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Registered Services: ", 25);
    *((_BYTE *)a2 + 17) = 0;
    v7 = *((_DWORD *)this + 276);
    std::string::basic_string[abi:ne180100]<0>(v10, ",");
    BambiServices::namesForServiceMask(v7, (uint64_t)v10, &v12);
    LoggableString::LoggableString(&__p, &v12);
    (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    if (v11 < 0)
      operator delete(v10[0]);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"     Allowed   Services: ", 25);
    *((_BYTE *)a2 + 17) = 0;
    v8 = SipRegistrationClient::allowedServices(this);
    std::string::basic_string[abi:ne180100]<0>(v10, ",");
    BambiServices::namesForServiceMask(v8, (uint64_t)v10, &v12);
    LoggableString::LoggableString(&__p, &v12);
    (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    if (v11 < 0)
      operator delete(v10[0]);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Client state:        ", 25);
  *((_BYTE *)a2 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)&clientStateNames + *((unsigned int *)this + 130));
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*((_QWORD *)this + 63))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Pending SA:          ", 25);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(_QWORD, ImsOutStream *, _QWORD))(**((_QWORD **)this + 63) + 264))(*((_QWORD *)this + 63), a2, 0);
  }
  result = *((_QWORD *)this + 454);
  if (result)
    return (*(uint64_t (**)(uint64_t, ImsOutStream *))(*(_QWORD *)result + 392))(result, a2);
  return result;
}

void sub_1BF0732B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void SipRegistrationClient::registrationDomain(SipRegistrationClient *this@<X0>, std::string *a2@<X8>)
{
  const std::string::value_type **v3;
  std::string::size_type v4;

  v3 = (const std::string::value_type **)((char *)this + 2000);
  if (*((char *)this + 2023) < 0)
  {
    v4 = *((_QWORD *)this + 251);
    if (v4)
    {
      std::string::__init_copy_ctor_external(a2, *v3, v4);
      return;
    }
  }
  else if (*((_BYTE *)this + 2023))
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v3;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 252);
    return;
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  SipHost::asString((uint64_t)this + 1192, (uint64_t)a2);
}

void sub_1BF0733A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void SipRegistrationClient::loggableName(SipRegistrationClient *this@<X0>, LoggableString *a2@<X8>)
{
  const char *v3;

  if ((*(unsigned int (**)(SipRegistrationClient *))(*(_QWORD *)this + 248))(this))
    v3 = "RegistrationClient(EMERGENCY)";
  else
    v3 = "RegistrationClient";
  LoggableString::LoggableString(a2, v3);
}

void `non-virtual thunk to'SipRegistrationClient::loggableName(SipRegistrationClient *this@<X0>, LoggableString *a2@<X8>)
{
  const char *v3;

  if ((*(unsigned int (**)(char *))(*((_QWORD *)this - 15) + 248))((char *)this - 120))
    v3 = "RegistrationClient(EMERGENCY)";
  else
    v3 = "RegistrationClient";
  LoggableString::LoggableString(a2, v3);
}

void SipRegistrationClient::logPrefix(SipRegistrationClient *this, ImsOutStream *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *__p[2];
  char v16;

  v4 = *((_QWORD *)this + 45);
  if (!v4)
    goto LABEL_16;
  v5 = *(std::__shared_weak_count **)(v4 + 16);
  if (!v5)
    goto LABEL_16;
  v6 = std::__shared_weak_count::lock(v5);
  if (!v6)
    goto LABEL_16;
  v7 = v6;
  v8 = *(_QWORD *)(v4 + 8);
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
      goto LABEL_8;
LABEL_16:
    (*(void (**)(void **__return_ptr, SipRegistrationClient *))(*(_QWORD *)this + 80))(__p, this);
    (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
    goto LABEL_17;
  }
  if (!v8)
    goto LABEL_16;
LABEL_8:
  v11 = *((_QWORD *)this + 45);
  v12 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v11 + 16));
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(v11 + 8) + 104))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  if (v16 < 0)
    operator delete(__p[0]);
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" [", 2);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(void **__return_ptr, SipRegistrationClient *))(*(_QWORD *)this + 80))(__p, this);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"]: ", 3);
LABEL_17:
  *((_BYTE *)a2 + 17) = 0;
  if (v16 < 0)
    operator delete(__p[0]);
}

void sub_1BF0735F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipRegistrationClient::logPrefix(SipRegistrationClient *this, ImsOutStream *a2)
{
  SipRegistrationClient::logPrefix((SipRegistrationClient *)((char *)this - 16), a2);
}

BOOL SipRegistrationClient::isEmergency(SipRegistrationClient *this)
{
  BOOL v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *((_QWORD *)this + 45);
  if (!v2)
    return 0;
  v3 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v3)
    return 0;
  v4 = std::__shared_weak_count::lock(v3);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = *(_QWORD *)(v2 + 8);
  if (v6)
    v1 = *(_BYTE *)(v6 + 176) != 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    if (v6)
      return v1;
    return 0;
  }
  if (!v6)
    return 0;
  return v1;
}

uint64_t SipRegistrationClient::handleEmergencyStateExited(SipRegistrationClient *this)
{
  uint64_t result;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  if (((*(uint64_t (**)(SipRegistrationClient *))(*(_QWORD *)this + 248))(this) & 1) != 0)
  {
    result = *((_QWORD *)this + 454);
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 456))(result);
  }
  else
  {
    v4 = *((_QWORD *)this + 2);
    v3 = (char *)this + 16;
    v5 = (*(uint64_t (**)(char *))(v4 + 48))(v3);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Exit emergency state call on normal registration client, ignoring", 65);
    *(_BYTE *)(v5 + 17) = 0;
    result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
  }
  return result;
}

void SipRegistrationClient::ipsecTransportExpired(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)(a1 + 504);
  if (*a2 != *(_QWORD *)(a1 + 504))
  {
    v5 = a1 + 16;
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(a1 + 16, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"unknown secure transport ", 25);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 104))(*a2, v6);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
  }
  v8 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v9 = (*(uint64_t (**)(uint64_t))(v8 + 64))(v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"pending SA expired prior to successful registration", 51);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100](v3);
}

void `non-virtual thunk to'SipRegistrationClient::ipsecTransportExpired(uint64_t a1, _QWORD *a2)
{
  SipRegistrationClient::ipsecTransportExpired(a1 - 128, a2);
}

_QWORD *SipRegistrationClient::sendDeferredNotifications(SipRegistrationClient *this)
{
  uint64_t v2;
  uint64_t v3;
  void (***v4)(_QWORD, uint64_t);

  v2 = *((_QWORD *)this + 491);
  if (v2)
  {
    v3 = *((_QWORD *)this + 492);
    if (v3 && *(_QWORD *)(v3 + 8) < *(_QWORD *)(v2 + 8))
    {
      (**(void (***)(_QWORD, uint64_t))v3)(*((_QWORD *)this + 492), 1);
      v4 = (void (***)(_QWORD, uint64_t))*((_QWORD *)this + 491);
LABEL_7:
      (**v4)(v4, 1);
      return SipRegistrationClient::clearDeferredNotifications(this);
    }
    (**(void (***)(uint64_t, uint64_t))v2)(v2, 1);
  }
  v4 = (void (***)(_QWORD, uint64_t))*((_QWORD *)this + 492);
  if (v4)
    goto LABEL_7;
  return SipRegistrationClient::clearDeferredNotifications(this);
}

void SipRegistrationClient::dropRegistrationWhenCallsEnd(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v6 = a1 + 2;
  v7 = (*(uint64_t (**)(_QWORD *))(a1[2] + 64))(a1 + 2);
  (*(void (**)(_QWORD *, uint64_t))(*v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Deferring drop registration with reason ", 40);
  *(_BYTE *)(v7 + 17) = 0;
  if (0xAAAAAAAAAAAAAAABLL * ((qword_1ED704438 - _terminationReasonStrings) >> 3) <= a2)
    v8 = "Unknown";
  else
    v8 = (const char *)(_terminationReasonStrings + 24 * a2);
  (*(void (**)(uint64_t, const char *))(*(_QWORD *)v7 + 32))(v7, v8);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  SipRegistrationClient::clearDeferredDrop(a1);
  v9 = operator new();
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v13, a1 + 25);
  DeferredDropRegistration::DeferredDropRegistration(v9, &v13, a2, a3);
  a1[493] = v9;
  v10 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1BF073A88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C40835D64A5);
  _Unwind_Resume(a1);
}

_DWORD *SipRegistrationClient::allCallsEnded(SipRegistrationClient *this)
{
  uint64_t v2;
  _DWORD *result;
  uint64_t v4;
  uint64_t v5;

  SipRegistrationClient::sendDeferredNotifications(this);
  if (*((_QWORD *)this + 493))
  {
    v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Registration drop has been deferred, dropping registration now.", 63);
    *(_BYTE *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v2 + 17) = 0;
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 493) + 16))(*((_QWORD *)this + 493), 0);
  }
  SipRegistrationClient::clearDeferredDrop(this);
  result = (_DWORD *)*((_QWORD *)this + 454);
  if (result)
  {
    if (result[106] != *((_DWORD *)this + 992))
    {
      v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"while we were in a call, registration mode changed from ", 56);
      *(_BYTE *)(v4 + 17) = 0;
      operator<<(v4, (unsigned int *)this + 992);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" to ", 4);
      *(_BYTE *)(v4 + 17) = 0;
      v5 = operator<<(v4, (unsigned int *)(*((_QWORD *)this + 454) + 424));
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(SipRegistrationClient *, uint64_t))(*(_QWORD *)this + 136))(this, *((_QWORD *)this + 454) + 424);
      result = (_DWORD *)*((_QWORD *)this + 454);
    }
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 440))(result);
  }
  return result;
}

void SipRegistrationClient::checkTimers(SipRegistrationClient *this)
{
  ims *v2;
  SipRegistrationPolicy *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  tm *v27;
  uint64_t v28;
  tm *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  std::string v40;
  std::string __p;
  _BYTE v42[24];
  _BYTE *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v2 = (ims *)time(0);
  v3 = (SipRegistrationPolicy *)*((_QWORD *)this + 454);
  if (!v3
    || (SipRegistrationPolicy::checkTimers(v3, v2),
        v4 = *((_QWORD *)this + 454),
        !std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(v4 + 232), "ThrottleTimer"))|| *(uint64_t *)(v4 + 384) <= 0)
  {
    if (!SipTimerContainer::timerPastDue((uint64_t)this + 216, (unsigned __int8 *)&kRegHysteresisTimer)
      || (SipTimerContainer::cancelTimer((SipRegistrationClient *)((char *)this + 216), &kRegHysteresisTimer),
          (SipRegistrationClient::handleHysteresisTimer(this) & 1) == 0))
    {
      if (*((_DWORD *)this + 132) == 2)
      {
        SipTimerContainer::cancelTimer((SipRegistrationClient *)((char *)this + 216), (std::string *)&qword_1ED70ED40);
        SipTimerContainer::cancelTimer((SipRegistrationClient *)((char *)this + 216), (std::string *)&_MergedGlobals_14);
        v5 = *((_QWORD *)this + 62);
        if (v5 < 1 || (v6 = *((_QWORD *)this + 60), v7 = __OFSUB__(v6, v5), v8 = v6 - v5, (v8 < 0) ^ v7 | (v8 == 0)))
        {
          v10 = 0;
        }
        else
        {
          v9 = v8 * *((unsigned int *)this + 290);
          if (v9 / 100 >= *((unsigned int *)this + 292))
            v10 = *((unsigned int *)this + 292);
          else
            v10 = v9 / 100;
        }
        v11 = (char *)this + 16;
        v12 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
        (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"refresh cushion = ", 18);
        *(_BYTE *)(v12 + 17) = 0;
        ims::formatTimeInterval((ims *)v10, &v40);
        LoggableString::LoggableString(&__p, &v40);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v12 + 40))(v12, &__p);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v12 + 17) = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v40.__r_.__value_.__l.__data_);
        v14 = *((_QWORD *)this + 25);
        v13 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
        if (v13)
        {
          p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
          do
            v16 = __ldxr(p_shared_weak_owners);
          while (__stxr(v16 + 1, p_shared_weak_owners));
          do
            v17 = __ldxr(p_shared_weak_owners);
          while (__stxr(v17 + 1, p_shared_weak_owners));
        }
        v18 = *((_QWORD *)this + 59);
        if (v18 <= (uint64_t)v2)
        {
          v26 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 16);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 16, v26);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"oops, registration expired at ", 30);
          *(_BYTE *)(v26 + 17) = 0;
          ims::formatTimeAndIntervalFromNow(*((ims **)this + 59), v26, v27);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v26 + 17) = 0;
          LODWORD(__p.__r_.__value_.__l.__data_) = 0;
          SipRegistrationClient::setRegistrationState((uint64_t)this, (int *)&__p, 0);
          (*(void (**)(SipRegistrationClient *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, 0, 0, 0);
          goto LABEL_51;
        }
        v19 = *((_QWORD *)this + 61);
        if (v19 >= 1 && (uint64_t)v2 >= v19 - v10)
        {
          v28 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 16);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 16, v28);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"registration refresh is due at ", 31);
          *(_BYTE *)(v28 + 17) = 0;
          ims::formatTimeAndIntervalFromNow(*((ims **)this + 61), v28, v29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)", triggering it now", 19);
          *(_BYTE *)(v28 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v28 + 17) = 0;
          if ((SipRegistrationClient::refreshRegistration(this) & 1) != 0)
            goto LABEL_51;
          v30 = *((_QWORD *)this + 59);
          if (v13)
          {
            v31 = (unint64_t *)&v13->__shared_weak_owners_;
            do
              v32 = __ldxr(v31);
            while (__stxr(v32 + 1, v31));
          }
          v47 = 0;
          v33 = operator new(0x20uLL);
          *v33 = &off_1E78D78D8;
          v33[1] = this;
          v33[2] = v14;
          v33[3] = v13;
          v47 = v33;
          SipTimerContainer::startTimer((_QWORD *)this + 27, (uint64_t)&qword_1ED70ED40, (uint64_t)v46, 1000 * (v30 - (_DWORD)v2), 1);
          v34 = v47;
          if (v47 == v46)
          {
            v35 = 4;
            v34 = v46;
            goto LABEL_50;
          }
LABEL_47:
          if (!v34)
            goto LABEL_51;
          v35 = 5;
LABEL_50:
          (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
LABEL_51:
          if (v13)
          {
            std::__shared_weak_count::__release_weak(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
          return;
        }
        if (v13)
        {
          v21 = (unint64_t *)&v13->__shared_weak_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v45 = 0;
        v23 = operator new(0x20uLL);
        *v23 = &off_1E78D78D8;
        v23[1] = this;
        v23[2] = v14;
        v23[3] = v13;
        v45 = v23;
        SipTimerContainer::startTimer((_QWORD *)this + 27, (uint64_t)&qword_1ED70ED40, (uint64_t)v44, 1000 * (v18 - (_DWORD)v2), 1);
        v24 = v45;
        if (v45 == v44)
        {
          v25 = 4;
          v24 = v44;
        }
        else
        {
          if (!v45)
            goto LABEL_42;
          v25 = 5;
        }
        (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_42:
        v36 = *((_QWORD *)this + 61);
        if (v36 < 1)
          goto LABEL_51;
        if (v13)
        {
          v37 = (unint64_t *)&v13->__shared_weak_owners_;
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        v43 = 0;
        v39 = operator new(0x20uLL);
        *v39 = &off_1E78D78D8;
        v39[1] = this;
        v39[2] = v14;
        v39[3] = v13;
        v43 = v39;
        SipTimerContainer::startTimer((_QWORD *)this + 27, (uint64_t)&_MergedGlobals_14, (uint64_t)v42, 1000 * (v36 - (_DWORD)v2), 1);
        v34 = v43;
        if (v43 == v42)
        {
          v35 = 4;
          v34 = v42;
          goto LABEL_50;
        }
        goto LABEL_47;
      }
    }
  }
}

void sub_1BF074160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  std::__shared_weak_count *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v33;
  uint64_t v34;

  v33 = *(_QWORD **)(v31 - 80);
  if (v33 == v30)
  {
    v34 = 4;
    v33 = (_QWORD *)(v31 - 104);
  }
  else
  {
    if (!v33)
      goto LABEL_6;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_6:
  if (v29)
  {
    std::__shared_weak_count::__release_weak(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationClient::systemClockDidChange(SipRegistrationClient *this)
{
  SipRegistrationPolicy *v2;
  uint64_t v3;

  v2 = (SipRegistrationPolicy *)*((_QWORD *)this + 454);
  if (v2)
    SipRegistrationPolicy::systemClockDidChange(v2);
  if (*((_DWORD *)this + 132) == 2)
  {
    if (*((_QWORD *)this + 62) > time(0) && *((_DWORD *)this + 130) == 1)
    {
      v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"our last registration was from the future! Re-registering just to be safe.", 74);
      *(_BYTE *)(v3 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v3 + 17) = 0;
      SipRegistrationClient::refreshRegistration(this);
    }
    SipRegistrationClient::checkTimers(this);
  }
}

void SipRegistrationClient::handleDeviceEvents(SipRegistrationClient *this, uint64_t a2)
{
  uint64_t v3;
  int v5;

  v3 = *((_QWORD *)this + 454);
  if (v3)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 464))(v3);
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 454) + 496))(*((_QWORD *)this + 454), a2);
    if ((a2 & 0x200) != 0)
    {
      if (v5)
        SipRegistrationClient::performDeferredAction(this);
    }
  }
}

void SipRegistrationClient::handleRegistrationModeChange(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::string v24;

  if (*a2 == *(_DWORD *)(a1 + 3968))
  {
    v4 = a1 + 16;
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"ignoring duplicate registration mode change to ", 47);
    *(_BYTE *)(v5 + 17) = 0;
    v6 = operator<<(v5, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    return;
  }
  if (*a2 != SipRegistrationMode::kModeNormal)
  {
    v7 = *(_QWORD *)(a1 + 360);
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = 0uLL;
    v8 = *(std::__shared_weak_count **)(v7 + 16);
    if (v8)
    {
      v8 = std::__shared_weak_count::lock(v8);
      v9 = v8;
      v24.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
      if (v8)
      {
        v8 = *(std::__shared_weak_count **)(v7 + 8);
        v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
      }
    }
    else
    {
      v9 = 0;
    }
    v10 = SipStack::callCount((SipStack *)v8);
    v11 = v10;
    if (!v9)
      goto LABEL_12;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (v11)
        goto LABEL_13;
    }
    else
    {
LABEL_12:
      if (v10)
      {
LABEL_13:
        v15 = *(_QWORD *)(a1 + 16);
        v14 = a1 + 16;
        v16 = (*(uint64_t (**)(uint64_t))(v15 + 32))(v14);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"delaying registration mode change notification until all calls have ended", 73);
        *(_BYTE *)(v16 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v16 + 17) = 0;
        return;
      }
    }
  }
  SipTimerContainer::cancelTimer((SipTimerContainer *)(a1 + 216), &kRegHysteresisTimer);
  *(_DWORD *)(a1 + 3968) = *a2;
  v17 = *(_QWORD *)(a1 + 456);
  if (v17)
  {
    v18 = *(_QWORD *)(a1 + 360);
    v19 = *(std::__shared_weak_count **)(v18 + 16);
    if (v19)
    {
      v20 = std::__shared_weak_count::lock(v19);
      if (v20)
      {
        v21 = *(_QWORD *)(v18 + 8);
LABEL_21:
        if (*(char *)(v21 + 4159) < 0)
          std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(v21 + 4136), *(_QWORD *)(v21 + 4144));
        else
          v24 = *(std::string *)(v21 + 4136);
        (*(void (**)(uint64_t, std::string *, unsigned int *))(*(_QWORD *)v17 + 32))(v17, &v24, a2);
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v24.__r_.__value_.__l.__data_);
        if (v20)
        {
          v22 = (unint64_t *)&v20->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        return;
      }
    }
    else
    {
      v20 = 0;
    }
    v21 = 0;
    goto LABEL_21;
  }
}

void sub_1BF074608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipRegistrationClient::handleRegistrationModeChange(uint64_t a1, unsigned int *a2)
{
  SipRegistrationClient::handleRegistrationModeChange(a1 - 144, a2);
}

void SipRegistrationClient::handleProxyChange(SipRegistrationClient *this, const SipUri *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)((char *)this + 16);
  v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(_QWORD *, uint64_t))(*v3 + 16))(v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"proxy changed, clearing auth info", 33);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  SipUri::operator=((SipUri *)(v3 + 349), (uint64_t)a2);
  SipAuthClient::clear(*(SipAuthClient **)(v3[43] + 280));
}

void `non-virtual thunk to'SipRegistrationClient::handleProxyChange(SipRegistrationClient *this, const SipUri *a2)
{
  SipRegistrationClient::handleProxyChange((SipRegistrationClient *)((char *)this - 144), a2);
}

void SipRegistrationClient::requestNetworkReset(SipRegistrationClient *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::string v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v2 = *((_QWORD *)this + 45);
  v16 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v2 + 16));
  v15 = *(_QWORD *)(v2 + 8);
  v3 = *(_QWORD *)(v15 + 136);
  v4 = *((_QWORD *)this + 45);
  v5 = *(std::__shared_weak_count **)(v4 + 16);
  if (v5)
  {
    v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      v7 = *(_QWORD *)(v4 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = 0;
LABEL_6:
  if (*(char *)(v7 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(v7 + 4136), *(_QWORD *)(v7 + 4144));
  else
    v14 = *(std::string *)(v7 + 4136);
  v8 = *(_QWORD *)(v3 + 248);
  if (v8)
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v8 + 96))(v8, &v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF074830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipRegistrationClient::requestNetworkReset(SipRegistrationClient *this)
{
  SipRegistrationClient::requestNetworkReset((SipRegistrationClient *)((char *)this - 144));
}

void SipRegistrationClient::handleRegistrationThrottled(SipRegistrationClient *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::string v12;

  v3 = *((_QWORD *)this + 57);
  if (!v3)
    return;
  v6 = *((_QWORD *)this + 45);
  v7 = *(std::__shared_weak_count **)(v6 + 16);
  if (!v7)
  {
    v8 = 0;
    goto LABEL_6;
  }
  v8 = std::__shared_weak_count::lock(v7);
  if (!v8)
  {
LABEL_6:
    v9 = 0;
    goto LABEL_7;
  }
  v9 = *(_QWORD *)(v6 + 8);
LABEL_7:
  if (*(char *)(v9 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(v9 + 4136), *(_QWORD *)(v9 + 4144));
  else
    v12 = *(std::string *)(v9 + 4136);
  (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t))(*(_QWORD *)v3 + 56))(v3, &v12, a2, a3);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BF074978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipRegistrationClient::handleRegistrationThrottled(SipRegistrationClient *this, uint64_t a2, uint64_t a3)
{
  SipRegistrationClient::handleRegistrationThrottled((SipRegistrationClient *)((char *)this - 144), a2, a3);
}

uint64_t SipRegistrationClient::defaultProxyPort(SipUserAgent **this)
{
  __int16 v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  SipUserAgent::transportLayer(this[45], &v6);
  v1 = *(_WORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6) + 434);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1BF074A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'SipRegistrationClient::defaultProxyPort(SipUserAgent **this)
{
  return SipRegistrationClient::defaultProxyPort(this - 18);
}

BOOL SipRegistrationClient::hasActiveCalls(SipRegistrationClient *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  SipStack *v5;
  int v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *((_QWORD *)this + 45);
  v3 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v3)
  {
    v4 = 0;
    goto LABEL_5;
  }
  v4 = std::__shared_weak_count::lock(v3);
  if (!v4)
  {
LABEL_5:
    v5 = 0;
    goto LABEL_6;
  }
  v5 = *(SipStack **)(v2 + 8);
LABEL_6:
  v6 = (*(uint64_t (**)(SipRegistrationClient *))(*(_QWORD *)this + 248))(this);
  v7 = SipStack::activeCallCount(v5, v6);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v7 != 0;
}

void sub_1BF074B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL `non-virtual thunk to'SipRegistrationClient::hasActiveCalls(SipRegistrationClient *this)
{
  return SipRegistrationClient::hasActiveCalls((SipRegistrationClient *)((char *)this - 144));
}

uint64_t SipRegistrationClient::disableIfInWrongCountry(uint64_t a1, uint64_t a2, const std::string *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  std::string __p;

  v6 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 3632);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v8);
  v9 = *(_QWORD **)(v8 + 8);
  if (v7)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check if registration needs to be disabled due to : ", 52);
    *(_BYTE *)(v8 + 17) = 0;
    LoggableString::LoggableString(&__p, a3);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v8 + 40))(v8, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return (*(uint64_t (**)(_QWORD, uint64_t, const std::string *))(**(_QWORD **)(a1 + 3632) + 544))(*(_QWORD *)(a1 + 3632), a2, a3);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"No policy present, can't disable registration for wrong country.", 64);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    result = 0;
    *(_BYTE *)(v8 + 17) = 0;
  }
  return result;
}

void sub_1BF074C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipRegistrationClient::networkInterfaceChanged(SipUserAgent **this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  SipUserAgent *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  SipUserAgent *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  int v34;
  char *v35;
  SipUserAgent *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  char *v41;
  SipUserAgent *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _OWORD v48[25];
  uint64_t v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  std::string v52;

  SipUserAgent::transportLayer(this[45], v48);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v48[0] + 1);
  v3 = *(_QWORD *)(*(_QWORD *)&v48[0] + 1072);
  if (!*((_QWORD *)&v48[0] + 1))
    goto LABEL_5;
  v4 = (unint64_t *)(*((_QWORD *)&v48[0] + 1) + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
  {
LABEL_5:
    if (v3)
      goto LABEL_6;
LABEL_9:
    v8 = this[2];
    v7 = (char *)(this + 2);
    v9 = (*((uint64_t (**)(char *))v8 + 8))(v7);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v7 + 16))(v7, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"No old interface, assuming the interface changed", 48);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    return 1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (!v3)
    goto LABEL_9;
LABEL_6:
  memset(&v52, 0, sizeof(v52));
  SipUserAgent::transportLayer(this[45], v48);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v48[0] + 16))(*(_QWORD *)&v48[0]);
  if (*(char *)(v6 + 23) < 0)
    std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
  else
    v52 = *(std::string *)v6;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v48[0] + 1);
  if (*((_QWORD *)&v48[0] + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v48[0] + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = this[45];
  v51 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)v14 + 2));
  v50 = (_QWORD *)*((_QWORD *)v14 + 1);
  v15 = v50[17];
  v16 = *(_QWORD *)(v15 + 768);
  v17 = *(std::__shared_weak_count **)(v15 + 776);
  *(_QWORD *)&v48[0] = v16;
  *((_QWORD *)&v48[0] + 1) = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v20 = (_QWORD *)(*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v16 + 64))(v16, &v52);
  if (v17)
  {
    v21 = (unint64_t *)&v17->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v23 = v51;
  if (v51)
  {
    v24 = (unint64_t *)&v51->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if (v20)
        goto LABEL_29;
LABEL_43:
      v36 = this[2];
      v35 = (char *)(this + 2);
      v37 = (*((uint64_t (**)(char *))v36 + 8))(v35);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v35 + 16))(v35, v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"No interface named ", 19);
      *(_BYTE *)(v37 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v37 + 32))(v37, &v52);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v37 + 17) = 0;
      v10 = 1;
      goto LABEL_59;
    }
  }
  if (!v20)
    goto LABEL_43;
LABEL_29:
  v49 = 0;
  memset(v48, 0, sizeof(v48));
  SipUserAgent::transportLayer(this[45], &v50);
  SipUri::SipUri((SipUri *)v48, (const SipUri *)(v50 + 191));
  v26 = v51;
  if (v51)
  {
    v27 = (unint64_t *)&v51->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (!SipUri::isValidUri((SipUri *)v48))
    goto LABEL_52;
  SipHost::ipAddress((SipHost *)((char *)v48 + 8), &v50);
  v29 = v20[1];
  v30 = v20[2];
  if (v29 == v30)
  {
    v33 = 0;
  }
  else
  {
    v31 = v29 + 16;
    do
    {
      v32 = (*(uint64_t (**)(_QWORD, _QWORD **, _QWORD))(**(_QWORD **)(v31 - 16) + 104))(*(_QWORD *)(v31 - 16), &v50, 0);
      v33 = v32;
      if (v31 == v30)
        v34 = 1;
      else
        v34 = v32;
      v31 += 16;
    }
    while (v34 != 1);
  }
  v38 = v51;
  if (v51)
  {
    v39 = (unint64_t *)&v51->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
      if ((v33 & 1) != 0)
        goto LABEL_50;
LABEL_52:
      v42 = this[2];
      v41 = (char *)(this + 2);
      v43 = (*((uint64_t (**)(char *))v42 + 8))(v41);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v41 + 16))(v41, v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v43 + 8), (uint64_t)"New interface does not contain old local address ", 49);
      *(_BYTE *)(v43 + 17) = 0;
      SipHost::ipAddress((SipHost *)((char *)v48 + 8), &v50);
      (*(void (**)(_QWORD *, uint64_t))(*v50 + 40))(v50, v43);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v43 + 17) = 0;
      v44 = v51;
      if (v51)
      {
        v45 = (unint64_t *)&v51->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v10 = 1;
      goto LABEL_58;
    }
  }
  if ((v33 & 1) == 0)
    goto LABEL_52;
LABEL_50:
  v10 = 0;
LABEL_58:
  (*(void (**)(_QWORD *))(*v20 + 8))(v20);
  SipUri::~SipUri((SipUri *)v48);
LABEL_59:
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1BF07512C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  SipUri::~SipUri((SipUri *)&a9);
  if (*(char *)(v9 - 57) < 0)
    operator delete(*(void **)(v9 - 80));
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'SipRegistrationClient::networkInterfaceChanged(SipUserAgent **this)
{
  return SipRegistrationClient::networkInterfaceChanged(this - 18);
}

uint64_t SipRegistrationClient::handleImsOutageResponse(SipRegistrationClient *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 454);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 520))(v2);
  v3 = *((_QWORD *)this + 492);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  *((_QWORD *)this + 492) = 0;
  SipTimerContainer::cancelTimer((SipRegistrationClient *)((char *)this + 216), (std::string *)&_MergedGlobals_14);
  return (*(uint64_t (**)(SipRegistrationClient *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, 9, 0, 0);
}

void DeferredRegistration::~DeferredRegistration(void **this)
{
  std::__shared_weak_count *v2;

  *this = off_1E78D7068;
  if (*((char *)this + 1719) < 0)
    operator delete(this[212]);
  SipRegistrationConfig::~SipRegistrationConfig(this + 3);
  *this = off_1E78D7280;
  v2 = (std::__shared_weak_count *)this[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

{
  std::__shared_weak_count *v2;

  *this = off_1E78D7068;
  if (*((char *)this + 1719) < 0)
    operator delete(this[212]);
  SipRegistrationConfig::~SipRegistrationConfig(this + 3);
  *this = off_1E78D7280;
  v2 = (std::__shared_weak_count *)this[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x1C3B87100);
}

uint64_t DeferredRegistration::type(DeferredRegistration *this)
{
  return 1;
}

void DeferredDeregistration::~DeferredDeregistration(DeferredDeregistration *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = off_1E78D7280;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = off_1E78D7280;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

_QWORD *DeferredDeregistration::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "deferred deregistration");
}

uint64_t DeferredDeregistration::type(DeferredDeregistration *this)
{
  return 2;
}

void DeferredDropRegistration::~DeferredDropRegistration(DeferredDropRegistration *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = off_1E78D7280;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = off_1E78D7280;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

_QWORD *DeferredDropRegistration::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "deferred drop registration");
}

uint64_t DeferredAction::type(DeferredAction *this)
{
  return 0;
}

void DeferredSubscription::~DeferredSubscription(DeferredSubscription *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = off_1E78D7280;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = off_1E78D7280;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

_QWORD *DeferredSubscription::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "deferred subscription");
}

uint64_t DeferredSubscription::type(DeferredSubscription *this)
{
  return 3;
}

BOOL SipRegistrationClient::registrationInProgress(SipRegistrationClient *this)
{
  return *((_DWORD *)this + 130) != 1;
}

BOOL `non-virtual thunk to'SipRegistrationClient::registrationInProgress(SipRegistrationClient *this)
{
  return *((_DWORD *)this + 94) != 1;
}

_QWORD *DeferredAction::DeferredAction(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1E78D7280;
  v3 = *a2;
  v4 = a2[1];
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v7 = (std::__shared_weak_count *)a1[2];
    a1[1] = v3;
    a1[2] = v4;
    if (v7)
      std::__shared_weak_count::__release_weak(v7);
  }
  else
  {
    a1[1] = v3;
    a1[2] = 0;
  }
  return a1;
}

_QWORD *DeferredRegistration::DeferredRegistration(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, const SipRegistrationConfig *a4, __int128 *a5)
{
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::string *v13;
  __int128 v14;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v16 = a2;
  v17 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  DeferredAction::DeferredAction(a1, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *a1 = off_1E78D7068;
  SipRegistrationConfig::SipRegistrationConfig((SipRegistrationConfig *)(a1 + 3), a4);
  v13 = (std::string *)(a1 + 212);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v14 = *a5;
    a1[214] = *((_QWORD *)a5 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  return a1;
}

void sub_1BF075628(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  std::__shared_weak_count *v4;

  SipRegistrationConfig::~SipRegistrationConfig(v2);
  *v1 = off_1E78D7280;
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

void SipRegistrationSubject::~SipRegistrationSubject(SipRegistrationSubject *this)
{
  *(_QWORD *)this = &off_1E78D72B8;
  std::__tree<std::shared_ptr<SipRegistrationObserver>>::destroy(*((_QWORD **)this + 2));
}

{
  *(_QWORD *)this = &off_1E78D72B8;
  std::__tree<std::shared_ptr<SipRegistrationObserver>>::destroy(*((_QWORD **)this + 2));
  JUMPOUT(0x1C3B87100);
}

void SipRegistrationDeferralManager::~SipRegistrationDeferralManager(void **this)
{
  void *v2;

  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  v2 = *this;
  *this = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
}

void std::__tree<std::shared_ptr<SipRegistrationObserver>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::shared_ptr<SipRegistrationObserver>>::destroy(*a1);
    std::__tree<std::shared_ptr<SipRegistrationObserver>>::destroy(a1[1]);
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void SipContact::~SipContact(SipContact *this)
{
  *(_QWORD *)this = &off_1E78EED78;
  *((_QWORD *)this + 58) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 472, *((_QWORD **)this + 60));
  SipUri::~SipUri((SipContact *)((char *)this + 40));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

{
  SipContact::~SipContact(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__split_buffer<ims::RegistrationIdentity>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<ims::RegistrationIdentity>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<ims::RegistrationIdentity>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<ims::RegistrationIdentity>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

uint64_t DeferredDropRegistration::DeferredDropRegistration(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v7 = a2[1];
  v14 = *a2;
  v15 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  DeferredAction::DeferredAction((_QWORD *)a1, &v14);
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_QWORD *)a1 = &off_1E78D70F0;
  *(_DWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a4;
  return a1;
}

void std::allocate_shared[abi:ne180100]<SipRegistrationClient,std::allocator<SipRegistrationClient>,SipUserAgent *&,void>(SipUserAgent **a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1028uLL);
  std::__shared_ptr_emplace<SipRegistrationClient>::__shared_ptr_emplace[abi:ne180100]<SipUserAgent *&,std::allocator<SipRegistrationClient>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a2, v4 + 28, (uint64_t)(v4 + 3));
}

void sub_1BF075A0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<SipRegistrationClient>::__shared_ptr_emplace[abi:ne180100]<SipUserAgent *&,std::allocator<SipRegistrationClient>,0>(_QWORD *a1, SipUserAgent **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78D7320;
  SipRegistrationClient::SipRegistrationClient((SipRegistrationClient *)(a1 + 3), *a2);
  return a1;
}

void sub_1BF075A58(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipRegistrationClient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D7320;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipRegistrationClient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D7320;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipRegistrationClient>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ATTRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D7370;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ATTRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D7370;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<ATTRegistrationPolicy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<KDDIRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D73C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<KDDIRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D73C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<KDDIRegistrationPolicy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Rfc5626RegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D7410;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Rfc5626RegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D7410;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<Rfc5626RegistrationPolicy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<TTAKRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D7460;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TTAKRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D7460;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<TTAKRegistrationPolicy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<TMORegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D74B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TMORegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D74B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<TMORegistrationPolicy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<SoftbankRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D7500;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SoftbankRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D7500;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SoftbankRegistrationPolicy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<VZWRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D7550;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<VZWRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D7550;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<VZWRegistrationPolicy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<LazuliRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D75A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D75A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<LazuliRegistrationPolicy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<DefaultRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D75F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DefaultRegistrationPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D75F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<DefaultRegistrationPolicy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::__function::__func<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0,std::allocator<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78D7658;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0,std::allocator<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78D7658;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0,std::allocator<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78D7658;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0,std::allocator<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78D7658;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0,std::allocator<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0,std::allocator<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0,std::allocator<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 96))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF075F70(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0,std::allocator<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0,std::allocator<SipRegistrationClient::updateExpirationTimer(SipContact const&)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0,std::allocator<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78D76D8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0,std::allocator<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78D76D8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0,std::allocator<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78D76D8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0,std::allocator<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78D76D8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0,std::allocator<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0,std::allocator<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0,std::allocator<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 96))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF0761D8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0,std::allocator<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0,std::allocator<SipRegistrationClient::coalesceLazuliRegistrationRefresh(void)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0,std::allocator<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78D7758;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0,std::allocator<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78D7758;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0,std::allocator<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78D7758;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0,std::allocator<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78D7758;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0,std::allocator<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0,std::allocator<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0,std::allocator<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0>,void ()(std::string&)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 96))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF076440(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0,std::allocator<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0,std::allocator<SipRegistrationClient::checkForRegHysteresis(SipRegistrationConfig const&,std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

_QWORD *std::__function::__func<SipRegistrationClient::deregister(void)::$_0,std::allocator<SipRegistrationClient::deregister(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78D77D8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipRegistrationClient::deregister(void)::$_0,std::allocator<SipRegistrationClient::deregister(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78D77D8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipRegistrationClient::deregister(void)::$_0,std::allocator<SipRegistrationClient::deregister(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78D77D8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipRegistrationClient::deregister(void)::$_0,std::allocator<SipRegistrationClient::deregister(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78D77D8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipRegistrationClient::deregister(void)::$_0,std::allocator<SipRegistrationClient::deregister(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipRegistrationClient::deregister(void)::$_0,std::allocator<SipRegistrationClient::deregister(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipRegistrationClient::deregister(void)::$_0,std::allocator<SipRegistrationClient::deregister(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 96))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF0766A8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipRegistrationClient::deregister(void)::$_0,std::allocator<SipRegistrationClient::deregister(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipRegistrationClient::deregister(void)::$_0,std::allocator<SipRegistrationClient::deregister(void)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0,std::allocator<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78D7858;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0,std::allocator<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78D7858;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0,std::allocator<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78D7858;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0,std::allocator<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78D7858;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0,std::allocator<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0,std::allocator<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0,std::allocator<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 96))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF076910(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0,std::allocator<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0,std::allocator<SipRegistrationClient::handleAuthChallengeResponse(SipAuthInfo const&)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipRegistrationClient::checkTimers(void)::$_0,std::allocator<SipRegistrationClient::checkTimers(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78D78D8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipRegistrationClient::checkTimers(void)::$_0,std::allocator<SipRegistrationClient::checkTimers(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78D78D8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipRegistrationClient::checkTimers(void)::$_0,std::allocator<SipRegistrationClient::checkTimers(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78D78D8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipRegistrationClient::checkTimers(void)::$_0,std::allocator<SipRegistrationClient::checkTimers(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78D78D8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipRegistrationClient::checkTimers(void)::$_0,std::allocator<SipRegistrationClient::checkTimers(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipRegistrationClient::checkTimers(void)::$_0,std::allocator<SipRegistrationClient::checkTimers(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipRegistrationClient::checkTimers(void)::$_0,std::allocator<SipRegistrationClient::checkTimers(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 96))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF076B78(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipRegistrationClient::checkTimers(void)::$_0,std::allocator<SipRegistrationClient::checkTimers(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipRegistrationClient::checkTimers(void)::$_0,std::allocator<SipRegistrationClient::checkTimers(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void __cxx_global_array_dtor_3()
{
  uint64_t v0;

  v0 = 0x108u;
  do
  {
    if (clientStateNames[v0 - 1] < 0)
      operator delete(*(void **)&clientStateNames[v0 - 24]);
    v0 -= 24;
  }
  while (v0);
}

uint64_t _GLOBAL__sub_I_SipRegistrationClient_cpp()
{
  void (*v0)(void *);

  std::string::basic_string[abi:ne180100]<0>(&_MergedGlobals_14, "RegistrationRefreshTimer");
  v0 = (void (*)(void *))MEMORY[0x1E0DE44D0];
  __cxa_atexit(MEMORY[0x1E0DE44D0], &_MergedGlobals_14, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1ED70ED40, "RegistrationExpirationTimer");
  __cxa_atexit(v0, &qword_1ED70ED40, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1ED70ED58, "FakeDeregistrationTimer");
  __cxa_atexit(v0, &qword_1ED70ED58, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1ED70ED70, "IPSecInterfaceBringupTimer");
  __cxa_atexit(v0, &qword_1ED70ED70, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(clientStateNames, "Unknown");
  std::string::basic_string[abi:ne180100]<0>(&clientStateNames[24], "Idle");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED704340, "InitialRegAccessCheck");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED704358, "RefreshRegAccessCheck");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED704370, "RetryRegAccessCheck");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED704388, "InitializingTransport");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED7043A0, "SendingInitialRequest");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED7043B8, "WaitingForAuth");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED7043D0, "WaitingForInterface");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED7043E8, "SendingAuthorizedRequest");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED704400, "Cancel");
  return __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_3, 0, &dword_1BEDF4000);
}

void sub_1BF076E18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  while (1)
  {
    if (*(char *)(v2 - 1) < 0)
      operator delete(*(void **)(v2 - 24));
    v2 -= 24;
    if (v2 == v1)
      _Unwind_Resume(exception_object);
  }
}

void ImsOutStream::~ImsOutStream(ImsOutStream *this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_1E78D7A10;
  if (*((_BYTE *)this + 16))
  {
    v1 = *((_QWORD *)this + 1);
    if (v1)
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_1E78D7A10;
  if (*((_BYTE *)this + 16))
  {
    v1 = *((_QWORD *)this + 1);
    if (v1)
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1C3B87100);
}

uint64_t ObfuscatedString::ObfuscatedString(uint64_t a1, const std::string *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  std::string::operator=((std::string *)(a1 + 24), a2);
  return a1;
}

void sub_1BF076EC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

ObfuscatedString *ObfuscatedString::str(ObfuscatedString *this)
{
  std::string v3;

  if (*((char *)this + 23) < 0)
  {
    if (*((_QWORD *)this + 1))
      return this;
  }
  else if (*((_BYTE *)this + 23))
  {
    return this;
  }
  if (*((char *)this + 47) < 0)
  {
    if (!*((_QWORD *)this + 4))
      return this;
  }
  else if (!*((_BYTE *)this + 47))
  {
    return this;
  }
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  ImsLogger::obfuscate(ims::_logger, (const void **)this + 3, &v3);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
  *(std::string *)this = v3;
  return this;
}

_QWORD *ImsOutStream::putRedactedString(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = result;
  v3 = *(char *)(a2 + 23);
  if (v3 >= 0)
    v4 = *(unsigned __int8 *)(a2 + 23);
  else
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = (_QWORD *)result[1];
    if (v3 < 0)
      a2 = *(_QWORD *)a2;
    result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, a2, v4);
    *((_BYTE *)v2 + 17) = 0;
  }
  else
  {
    if (!*((_BYTE *)result + 17))
      result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)result[1], (uint64_t)"xXx", 3);
    *((_BYTE *)v2 + 17) = 1;
  }
  return result;
}

_QWORD *ImsOutStream::putPIIString(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  int v5;
  uint64_t v6;
  uint64_t v7;

  if (ImsOutStream::isRedacting((ImsOutStream *)a1))
    return ImsOutStream::putRedactedString((_QWORD *)a1, a2 + 24);
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 8), v6, v7);
  *(_BYTE *)(a1 + 17) = 0;
  return result;
}

_QWORD *ImsOutStream::putObfuscatedString(ImsOutStream *this, const ObfuscatedString *a2)
{
  _QWORD *v4;
  int v5;
  const ObfuscatedString *v6;
  uint64_t v7;
  const ObfuscatedString *v8;
  uint64_t *v9;
  const ObfuscatedString *v10;
  int v11;
  _QWORD *result;

  if (ImsOutStream::isRedacting(this))
  {
    ObfuscatedString::str(a2);
    v4 = (_QWORD *)*((_QWORD *)this + 1);
    v5 = *((char *)a2 + 23);
    if (v5 >= 0)
      v6 = a2;
    else
      v6 = *(const ObfuscatedString **)a2;
    if (v5 >= 0)
      v7 = *((unsigned __int8 *)a2 + 23);
    else
      v7 = *((_QWORD *)a2 + 1);
  }
  else
  {
    v4 = (_QWORD *)*((_QWORD *)this + 1);
    v10 = (const ObfuscatedString *)*((_QWORD *)a2 + 3);
    v9 = (uint64_t *)((char *)a2 + 24);
    v8 = v10;
    v11 = *((char *)v9 + 23);
    if (v11 >= 0)
      v6 = (const ObfuscatedString *)v9;
    else
      v6 = v8;
    if (v11 >= 0)
      v7 = *((unsigned __int8 *)v9 + 23);
    else
      v7 = v9[1];
  }
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
  *((_BYTE *)this + 17) = 0;
  return result;
}

void ImsOutStream::putStringStream(ImsOutStream *this, const ImsStringOutStream *a2)
{
  void **v4;
  uint64_t v5;
  void *v6[2];
  char v7;
  void *__p[2];
  unsigned __int8 v9;

  if (ImsOutStream::isRedacting(this) && !ImsOutStream::isRedacting(a2))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)a2 + 3) + 8, __p);
    std::string::basic_string[abi:ne180100]<0>(v6, "");
    ImsOutStream::putRedactedString(this, (uint64_t)v6);
    if (v7 < 0)
      operator delete(v6[0]);
  }
  else
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)a2 + 3) + 8, __p);
    if ((v9 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v9 & 0x80u) == 0)
      v5 = v9;
    else
      v5 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 1), (uint64_t)v4, v5);
    *((_BYTE *)this + 17) = 0;
  }
  if ((char)v9 < 0)
    operator delete(__p[0]);
}

void sub_1BF0771B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void ImsStringOutStream::ImsStringOutStream(ImsStringOutStream *this, const ImsOutStream *a2)
{
  uint64_t v4;

  v4 = operator new();
  std::ostringstream::basic_ostringstream[abi:ne180100](v4);
  *((_WORD *)this + 8) = 1;
  *(_QWORD *)this = &off_1E78D7980;
  *((_QWORD *)this + 1) = v4;
  *((_BYTE *)this + 32) = 1;
  *((_QWORD *)this + 3) = v4;
  *((_BYTE *)this + 32) = (*(uint64_t (**)(const ImsOutStream *))(*(_QWORD *)a2 + 24))(a2);
}

void sub_1BF077270(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)v1 = &off_1E78D7A10;
  if (*(_BYTE *)(v1 + 16))
  {
    v3 = *(_QWORD *)(v1 + 8);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void ImsStringOutStream::ImsStringOutStream(ImsStringOutStream *this, const ImsStringOutStream *a2)
{
  _QWORD *v4;
  void *__p[2];
  char v6;

  v4 = (_QWORD *)operator new();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)a2 + 3) + 8, __p);
  std::ostringstream::basic_ostringstream[abi:ne180100](v4, (__int128 *)__p, 16);
  *(_QWORD *)this = &off_1E78D7A10;
  *((_QWORD *)this + 1) = v4;
  *((_WORD *)this + 8) = 1;
  if (v6 < 0)
  {
    operator delete(__p[0]);
    v4 = (_QWORD *)*((_QWORD *)this + 1);
  }
  *(_QWORD *)this = &off_1E78D7980;
  *((_BYTE *)this + 32) = 1;
  *((_QWORD *)this + 3) = v4;
  *((_BYTE *)this + 32) = (*(uint64_t (**)(const ImsStringOutStream *))(*(_QWORD *)a2 + 24))(a2);
}

void sub_1BF077390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  *(_QWORD *)v14 = v15;
  if (*(_BYTE *)(v14 + 16))
  {
    v17 = *(_QWORD *)(v14 + 8);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::ostringstream::basic_ostringstream[abi:ne180100](_QWORD *a1, __int128 *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  a1[14] = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t)(a1 + 1);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *a1 = v9;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 1);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6 + 24;
  a1[14] = v7;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3 | 0x10);
  return a1;
}

void sub_1BF0774AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3B8707C](v1);
  _Unwind_Resume(a1);
}

uint64_t ImsOutStream::isLog(ImsOutStream *this)
{
  return 0;
}

uint64_t ImsOutStream::isDefaultPublic(ImsOutStream *this)
{
  return 1;
}

void ImsStringOutStream::~ImsStringOutStream(ImsStringOutStream *this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_1E78D7A10;
  if (*((_BYTE *)this + 16))
  {
    v1 = *((_QWORD *)this + 1);
    if (v1)
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_1E78D7A10;
  if (*((_BYTE *)this + 16))
  {
    v1 = *((_QWORD *)this + 1);
    if (v1)
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1C3B87100);
}

uint64_t _GLOBAL__sub_I_ImsStream_cpp()
{
  _MergedGlobals_15 = (uint64_t)&off_1E78D7A10;
  unk_1ED70ED90 = MEMORY[0x1E0DE4A60];
  word_1ED70ED98 = 0;
  __cxa_atexit((void (*)(void *))ImsOutStream::~ImsOutStream, &_MergedGlobals_15, &dword_1BEDF4000);
  qword_1ED70EDA0 = (uint64_t)&off_1E78D7A10;
  qword_1ED70EDA8 = MEMORY[0x1E0DE4A50];
  word_1ED70EDB0 = 0;
  return __cxa_atexit((void (*)(void *))ImsOutStream::~ImsOutStream, &qword_1ED70EDA0, &dword_1BEDF4000);
}

SipHeader *SipAuthenticateHeader::SipAuthenticateHeader(SipHeader *a1, const SipHeader *a2)
{
  _QWORD *v4;
  uint64_t v5;

  SipHeader::SipHeader(a1, a2);
  *v4 = off_1E78D7A78;
  v5 = *((_QWORD *)a2 + 8);
  if (v5)
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  *((_QWORD *)a1 + 8) = v5;
  return a1;
}

void sub_1BF0776A8(_Unwind_Exception *a1)
{
  void **v1;

  SipHeader::~SipHeader(v1);
  _Unwind_Resume(a1);
}

BOOL SipAuthenticateHeader::encodeValue(SipAuthenticateHeader *this, ImsOutStream *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 32))(*((_QWORD *)this + 8));
    (*(void (**)(uint64_t, ImsOutStream *, _QWORD))(*(_QWORD *)v4 + 48))(v4, a2, 0);
  }
  return v2 != 0;
}

BOOL SipAuthenticateHeader::setValueFromString(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = SipAuthScheme::createFromString(a2);
  if (v3)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
  *(_QWORD *)(a1 + 64) = v3;
  return v3 != 0;
}

const char *SipAuthenticateHeader::matchingAuthorizationHeaderName(SipAuthenticateHeader *this)
{
  return "Authorization";
}

void SipMessageDecoder::~SipMessageDecoder(SipMessageDecoder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 6);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t SipMessageDecoder::decode(std::string *this, const std::string::value_type *a2, std::string::pointer *a3, _BYTE *a4)
{
  int v6;
  std::string::size_type v7;
  SipMessage **v8;
  std::string::size_type v9;
  std::string::size_type v10;
  std::string::size_type v11;
  std::string::size_type v12;
  char v13;
  std::string::size_type v14;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string *v20;
  std::string *v21;
  char v22;
  int v23;
  size_t v24;
  std::string *p_str;
  _BYTE *v26;
  std::string::size_type v27;
  BOOL v28;
  size_t v29;
  std::string::value_type *v30;
  int64_t v31;
  std::string::size_type v32;
  int v33;
  const SipContentTypeHeader *v34;
  SipMessageEncodingMap *v35;
  SipStringBody *Body;
  std::string::size_type v37;
  uint64_t Header;
  SipStringBody *v39;
  uint64_t v40;
  const void **v41;
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  const char *v45;
  const char *v46;
  _DWORD *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  std::string::size_type v51;
  std::string::size_type v52;
  std::string::size_type size;
  std::string::size_type v54;
  std::string::size_type v55;
  std::string *v56;
  int data;
  int v58;
  std::string::size_type v60;
  std::string::size_type v61;
  std::string *v62;
  int v63;
  int v64;
  uint64_t v66;
  int64_t v67;
  std::string *v68;
  std::string::size_type v69;
  uint64_t v70;
  char *v71;
  std::string *v72;
  char *v73;
  int v74;
  std::string::size_type v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  SipMessage *v83;
  uint64_t v84;
  std::string::pointer v85;
  char v86;
  uint64_t v87;
  SipMessage *v88;
  uint64_t v89;
  uint64_t v90;
  std::string::pointer v91;
  std::string::size_type v92;
  uint64_t v93;
  SipMessage *v94;
  std::string::pointer v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  std::string::size_type v100;
  std::string *v101;
  int v102;
  uint64_t v104;
  std::string v105;
  void *v106[2];
  char v107;
  void *__p[2];
  char v109;
  std::string v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  void (**v115)(SipParameterMap *__hidden);
  uint64_t *v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  void (**v134)(SipParameterMap *__hidden);
  _QWORD *v135;
  _QWORD v136[5];
  _QWORD v137[3];
  std::string v138;
  std::string __str;
  std::string v140;

  *a3 = 0;
  if (a4)
    *a4 = 0;
  v6 = a2[23];
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = *((_QWORD *)a2 + 1);
  if (!v7)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      if (!this->__r_.__value_.__l.__size_)
        goto LABEL_236;
    }
    else if (!*((_BYTE *)&this->__r_.__value_.__s + 23))
    {
      goto LABEL_236;
    }
  }
  if (!this[2].__r_.__value_.__l.__size_)
  {
    std::string::basic_string[abi:ne180100]<0>(&v110, "sip.decode");
    std::string::basic_string[abi:ne180100]<0>(&v140, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v50 = ImsLogger::error(ims::_logger, (uint64_t)&v110, (uint64_t)&v140);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v50 + 8), (uint64_t)"No message encoding specified.", 30);
    *(_BYTE *)(v50 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v50 + 17) = 0;
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v140.__r_.__value_.__l.__data_);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v110.__r_.__value_.__l.__data_);
    goto LABEL_281;
  }
  if (v6 < 0)
    a2 = *(const std::string::value_type **)a2;
  std::string::append(this, a2, v7);
  v8 = (SipMessage **)&this[1];
  if (this[1].__r_.__value_.__r.__words[0])
    goto LABEL_11;
  v51 = std::string::find(this, 10, 0);
  if (v51 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v110, "sip.decode");
    std::string::basic_string[abi:ne180100]<0>(&v140, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v70 = ImsLogger::debug(ims::_logger, (uint64_t)&v110, (uint64_t)&v140);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v70 + 8), (uint64_t)"Not enough data in decodeStartLine", 34);
    *(_BYTE *)(v70 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v70 + 64))(v70, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_232;
  }
  v52 = v51;
  memset(&v105, 0, sizeof(v105));
  std::string::basic_string(&v105, this, 0, v51, (std::allocator<char> *)&v110);
  std::string::basic_string(&v110, this, v52 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v140);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    operator delete(this->__r_.__value_.__l.__data_);
  *this = v110;
  ims::chomp(&v105, "\r\n\t ", 3);
  size = HIBYTE(v105.__r_.__value_.__r.__words[2]);
  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v105.__r_.__value_.__l.__size_;
  if (!size)
  {
    v74 = 2;
    if ((*((_BYTE *)&v105.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_280;
    goto LABEL_279;
  }
  memset(&v140, 0, sizeof(v140));
  v54 = ims::nextToken(&v105, 0, &v140, 0x20u);
  if (v54 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v110, "sip.decode");
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v78 = ImsLogger::error(ims::_logger, (uint64_t)&v110, (uint64_t)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v78 + 8), (uint64_t)"SipMessageDecoder: no tokens in start line", 42);
    *(_BYTE *)(v78 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v78 + 64))(v78, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v78 + 17) = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v110.__r_.__value_.__l.__data_);
    goto LABEL_272;
  }
  v55 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
  if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v55 = v140.__r_.__value_.__l.__size_;
  if (v55 == 7)
  {
    v56 = &v140;
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v56 = (std::string *)v140.__r_.__value_.__r.__words[0];
    data = (int)v56->__r_.__value_.__l.__data_;
    v58 = *(_DWORD *)((char *)v56->__r_.__value_.__r.__words + 3);
    if (data == 793790803 && v58 == 808333871)
    {
      memset(&v110, 0, sizeof(v110));
      v100 = ims::nextToken(&v105, v54, &v110, 0x20u);
      if (v100 == -1)
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, "sip.decode");
        std::string::basic_string[abi:ne180100]<0>(&v138, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v104 = ImsLogger::error(ims::_logger, (uint64_t)&__str, (uint64_t)&v138);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v104 + 8), (uint64_t)"SipMessageDecoder: no status code in response: ", 47);
        *(_BYTE *)(v104 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v104 + 32))(v104, &v105);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v104 + 64))(v104, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v104 + 17) = 0;
        if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v138.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v97 = 0;
      }
      else
      {
        if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v101 = &v110;
        else
          v101 = (std::string *)v110.__r_.__value_.__r.__words[0];
        v102 = strtoul((const char *)v101, 0, 10);
        memset(&__str, 0, sizeof(__str));
        std::string::basic_string(&__str, &v105, v100, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v138);
        v97 = operator new();
        SipResponse::SipResponse(v97, v102, &__str, this[2].__r_.__value_.__l.__size_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v110.__r_.__value_.__l.__data_);
      if (v100 == -1)
        goto LABEL_272;
      goto LABEL_273;
    }
  }
  memset(&__str, 0, sizeof(__str));
  v60 = ims::nextToken(&v105, v54, &__str, 0x20u);
  if (v60 != -1)
  {
    v137[2] = 257;
    v136[2] = 257;
    v133 = 0;
    v118 = 0u;
    v113 = 0u;
    v114 = 0;
    v111 = 0;
    v112 = 0;
    v110.__r_.__value_.__l.__size_ = (std::string::size_type)&off_1E78D08F8;
    v110.__r_.__value_.__r.__words[2] = 0;
    LOWORD(v113) = 0;
    v117 = 0;
    *(_QWORD *)&v118 = 0;
    v115 = &off_1E78B82D8;
    v116 = &v117;
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BFCE8;
    v129 = 0u;
    v130 = 0u;
    v131 = 0u;
    v119 = 0u;
    v120 = 0u;
    v121 = 0u;
    v122 = 0u;
    v123 = 0u;
    v124 = 0u;
    v125 = 0u;
    v126 = 0u;
    v127 = 0u;
    v128 = 0u;
    v132 = 0;
    v136[0] = 0;
    v136[1] = 0;
    v134 = &off_1E78B82D8;
    v135 = v136;
    v137[0] = 0;
    v137[1] = 0;
    v136[3] = &off_1E78B82D8;
    v136[4] = v137;
    WORD4(v118) = 257;
    if ((SipUri::fromString((uint64_t)&v110, &__str) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v138, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v99 = ImsLogger::error(ims::_logger, (uint64_t)&v138, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v99 + 8), (uint64_t)"SipMessageDecoder: invalid Request-URI in start line: ", 54);
      *(_BYTE *)(v99 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v99 + 32))(v99, &v105);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v99 + 64))(v99, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v99 + 17) = 0;
      if (v109 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v138.__r_.__value_.__l.__data_);
      v97 = 0;
      v98 = 1;
      goto LABEL_268;
    }
    memset(&v138, 0, sizeof(v138));
    if (ims::nextToken(&v105, v60, &v138, 0x20u) == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(v106, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v66 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v106);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v66 + 8), (uint64_t)"SipMessageDecoder: no version in start line: ", 45);
      *(_BYTE *)(v66 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v66 + 32))(v66, &v105);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v66 + 64))(v66, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      v61 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
      if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v61 = v138.__r_.__value_.__l.__size_;
      if (v61 == 7)
      {
        v62 = &v138;
        if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v62 = (std::string *)v138.__r_.__value_.__r.__words[0];
        v63 = (int)v62->__r_.__value_.__l.__data_;
        v64 = *(_DWORD *)((char *)v62->__r_.__value_.__r.__words + 3);
        if (v63 == 793790803 && v64 == 808333871)
        {
          v97 = operator new();
          SipRequest::SipRequest(v97, &v140, this[2].__r_.__value_.__l.__size_);
          SipUri::operator=((SipUri *)(v97 + 112), (uint64_t)&v110);
          v98 = 0;
LABEL_266:
          if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v138.__r_.__value_.__l.__data_);
LABEL_268:
          SipUri::~SipUri((SipUri *)&v110);
          goto LABEL_269;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(v106, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v66 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v106);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v66 + 8), (uint64_t)"SipMessageDecoder: invalid SIP version in request start line: ", 62);
      *(_BYTE *)(v66 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v66 + 32))(v66, &v105);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v66 + 64))(v66, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    *(_BYTE *)(v66 + 17) = 0;
    if (v107 < 0)
      operator delete(v106[0]);
    if (v109 < 0)
      operator delete(__p[0]);
    v97 = 0;
    v98 = 1;
    goto LABEL_266;
  }
  std::string::basic_string[abi:ne180100]<0>(&v110, "sip.decode");
  std::string::basic_string[abi:ne180100]<0>(&v138, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v96 = ImsLogger::error(ims::_logger, (uint64_t)&v110, (uint64_t)&v138);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v96 + 8), (uint64_t)"SipMessageDecoder: no Request-URI in start line: ", 49);
  *(_BYTE *)(v96 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v96 + 32))(v96, &v105);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v96 + 64))(v96, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v96 + 17) = 0;
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v138.__r_.__value_.__l.__data_);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  v97 = 0;
  v98 = 1;
LABEL_269:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v98)
LABEL_272:
    v97 = 0;
LABEL_273:
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v140.__r_.__value_.__l.__data_);
  *v8 = (SipMessage *)v97;
  if (v97)
    v74 = 1;
  else
    v74 = 2;
  if ((*((_BYTE *)&v105.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_279:
    operator delete(v105.__r_.__value_.__l.__data_);
LABEL_280:
  if (v74 == 2)
  {
LABEL_281:
    v86 = 0;
    return v86 & 1;
  }
LABEL_11:
  if (this[1].__r_.__value_.__l.__size_)
    goto LABEL_12;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v68 = (std::string *)this->__r_.__value_.__r.__words[0];
    v67 = this->__r_.__value_.__l.__size_;
  }
  else
  {
    v67 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v68 = this;
  }
  if (v67 < 4)
    goto LABEL_188;
  v71 = (char *)v68 + v67;
  v72 = v68;
  while (1)
  {
    v73 = (char *)memchr(v72, 13, v67 - 3);
    if (!v73)
      goto LABEL_188;
    if (*(_DWORD *)v73 == 168626701)
      break;
    v72 = (std::string *)(v73 + 1);
    v67 = v71 - (char *)v72;
    if (v71 - (char *)v72 < 4)
      goto LABEL_188;
  }
  if (v73 == v71 || v73 - (char *)v68 == -1)
  {
LABEL_188:
    std::string::basic_string[abi:ne180100]<0>(&v110, "sip.decode");
    std::string::basic_string[abi:ne180100]<0>(&v140, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v70 = ImsLogger::debug(ims::_logger, (uint64_t)&v110, (uint64_t)&v140);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v70 + 8), (uint64_t)"still waiting for headers", 25);
    *(_BYTE *)(v70 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v70 + 64))(v70, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_232;
  }
LABEL_12:
  while (!this[1].__r_.__value_.__l.__size_)
  {
    v9 = 0;
    memset(&__str, 0, sizeof(__str));
    memset(&v140, 0, sizeof(v140));
LABEL_14:
    v140.__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&v140.__r_.__value_.__s + 23) = 0;
    while (1)
    {
      v10 = std::string::find(this, 10, v9);
      if (v10 == -1)
      {
LABEL_44:
        v22 = 1;
        goto LABEL_48;
      }
      v11 = v10;
      std::string::basic_string(&v110, this, v9, v10 - v9, (std::allocator<char> *)&v138);
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
      v140 = v110;
      ims::chomp(&v140, "\r\n\t ", 3);
      v9 = v11 + 1;
      v12 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
      v13 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
      v14 = v140.__r_.__value_.__l.__size_;
      if (!((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? HIBYTE(v140.__r_.__value_.__r.__words[2])
           : v140.__r_.__value_.__l.__size_))
        break;
      v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v16 = __str.__r_.__value_.__l.__size_;
      if (v16)
      {
        std::string::push_back(&__str, 32);
        v12 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
        v14 = v140.__r_.__value_.__l.__size_;
        v13 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
      }
      if (v13 >= 0)
        v17 = &v140;
      else
        v17 = (std::string *)v140.__r_.__value_.__r.__words[0];
      if (v13 >= 0)
        v18 = v12;
      else
        v18 = v14;
      std::string::append(&__str, (const std::string::value_type *)v17, v18);
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        v19 = this->__r_.__value_.__l.__size_;
      else
        v19 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if (v9 >= v19)
        goto LABEL_44;
      v20 = this;
      if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
        v20 = (std::string *)this->__r_.__value_.__r.__words[0];
      if (v20->__r_.__value_.__s.__data_[v9] != 32)
      {
        v21 = this;
        if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
          v21 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v21->__r_.__value_.__s.__data_[v9] != 9)
          break;
      }
      if ((*((_BYTE *)&v140.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_14;
      *v140.__r_.__value_.__l.__data_ = 0;
      v140.__r_.__value_.__l.__size_ = 0;
    }
    std::string::basic_string(&v110, this, v11 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v138);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      operator delete(this->__r_.__value_.__l.__data_);
    v22 = 0;
    *this = v110;
LABEL_48:
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v140.__r_.__value_.__l.__data_);
      if ((v22 & 1) != 0)
      {
LABEL_50:
        v23 = 0;
        goto LABEL_113;
      }
    }
    else if ((v22 & 1) != 0)
    {
      goto LABEL_50;
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v24 = __str.__r_.__value_.__l.__size_;
    if (v24)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      v26 = memchr(p_str, 58, v24);
      v27 = v26 - (_BYTE *)p_str;
      if (v26)
        v28 = v27 == -1;
      else
        v28 = 1;
      if (v28)
        goto LABEL_98;
      if (v24 <= v27 + 1)
        v29 = v27 + 1;
      else
        v29 = v24;
      v30 = &p_str->__r_.__value_.__s.__data_[1];
      v31 = v26 - (_BYTE *)p_str;
      while (1)
      {
        v32 = v31 + 1;
        if (v31 + 1 >= v24)
          break;
        v33 = v30[v31++];
        if (v33 != 32)
          goto LABEL_74;
      }
      v32 = v29;
LABEL_74:
      v37 = this[2].__r_.__value_.__l.__size_;
      std::string::basic_string(&v110, &__str, 0, v27, (std::allocator<char> *)&v140);
      std::string::basic_string(&v140, &__str, v32, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v138);
      Header = SipMessageEncodingMap::createHeader(v37, (uint64_t)&v110, (uint64_t)&v140);
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v110.__r_.__value_.__l.__data_);
        if (!Header)
          goto LABEL_98;
      }
      else if (!Header)
      {
        goto LABEL_98;
      }
      v41 = (const void **)(Header + 8);
      v42 = *(unsigned __int8 *)(Header + 31);
      v43 = *(_QWORD *)(Header + 16);
      if ((v42 & 0x80u) == 0)
        v44 = *(unsigned __int8 *)(Header + 31);
      else
        v44 = *(_QWORD *)(Header + 16);
      if (v44 == 12)
      {
        if ((v42 & 0x80) != 0)
        {
          if (memcmp(*v41, "Content-Type", v43))
            goto LABEL_111;
        }
        else if (*(_BYTE *)(Header + 31))
        {
          v46 = "Content-Type";
          while (*(unsigned __int8 *)v41 == *(unsigned __int8 *)v46)
          {
            v41 = (const void **)((char *)v41 + 1);
            ++v46;
            if (!--v42)
              goto LABEL_118;
          }
          goto LABEL_111;
        }
LABEL_118:
        if (!v48)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)Header + 8))(Header);
          std::string::basic_string[abi:ne180100]<0>(&v110, "sip.decode");
          std::string::basic_string[abi:ne180100]<0>(&v140, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v49 = ImsLogger::error(ims::_logger, (uint64_t)&v110, (uint64_t)&v140);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v49 + 8), (uint64_t)"Content-Type header isn't a parameter string", 44);
          *(_BYTE *)(v49 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_122:
          *(_BYTE *)(v49 + 17) = 0;
LABEL_82:
          if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v140.__r_.__value_.__l.__data_);
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v110.__r_.__value_.__l.__data_);
LABEL_98:
          v23 = 2;
          goto LABEL_113;
        }
        this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
      }
      else
      {
        if (v44 != 14)
          goto LABEL_111;
        if ((v42 & 0x80) != 0)
        {
          if (memcmp(*v41, "Content-Length", v43))
            goto LABEL_111;
        }
        else if (*(_BYTE *)(Header + 31))
        {
          v45 = "Content-Length";
          while (*(unsigned __int8 *)v41 == *(unsigned __int8 *)v45)
          {
            v41 = (const void **)((char *)v41 + 1);
            ++v45;
            if (!--v42)
              goto LABEL_108;
          }
LABEL_111:
          SipMessage::addHeader(*v8, (SipHeader *)Header, 0);
          goto LABEL_112;
        }
LABEL_108:
        if (!v47)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)Header + 8))(Header);
          std::string::basic_string[abi:ne180100]<0>(&v110, "sip.decode");
          std::string::basic_string[abi:ne180100]<0>(&v140, "");
          v49 = ims::error((uint64_t)&v110, (uint64_t)&v140);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v49 + 8), (uint64_t)"Content-Length header isn't a uint32", 36);
          *(_BYTE *)(v49 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          goto LABEL_122;
        }
        LODWORD(this[1].__r_.__value_.__r.__words[2]) = v47[15];
        (*(void (**)(uint64_t))(*(_QWORD *)Header + 8))(Header);
      }
    }
    else
    {
      v34 = (const SipContentTypeHeader *)this[2].__r_.__value_.__l.__data_;
      v35 = (SipMessageEncodingMap *)this[2].__r_.__value_.__l.__size_;
      if (v34)
      {
        Body = SipMessageEncodingMap::createBody((SipMessageEncodingMap *)this[2].__r_.__value_.__l.__size_, v34);
        this[1].__r_.__value_.__l.__size_ = (std::string::size_type)Body;
        if (!Body)
          goto LABEL_81;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v110, "");
        v39 = SipMessageEncodingMap::createBody(v35, &v110);
        this[1].__r_.__value_.__l.__size_ = (std::string::size_type)v39;
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v110.__r_.__value_.__l.__data_);
          if (!this[1].__r_.__value_.__l.__size_)
          {
LABEL_81:
            std::string::basic_string[abi:ne180100]<0>(&v110, "sip.decode");
            std::string::basic_string[abi:ne180100]<0>(&v140, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v40 = ImsLogger::error(ims::_logger, (uint64_t)&v110, (uint64_t)&v140);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)"Couldn't create message body of type: ", 38);
            *(_BYTE *)(v40 + 17) = 0;
            (*(void (**)(uint64_t, std::string::size_type))(*(_QWORD *)v40 + 32))(v40, this[2].__r_.__value_.__r.__words[0] + 104);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v40 + 17) = 0;
            goto LABEL_82;
          }
        }
        else if (!v39)
        {
          goto LABEL_81;
        }
      }
    }
LABEL_112:
    v23 = 1;
LABEL_113:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v23 == 2)
      goto LABEL_209;
    if (!v23)
    {
      std::string::basic_string[abi:ne180100]<0>(&v110, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(&v140, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v70 = ImsLogger::debug(ims::_logger, (uint64_t)&v110, (uint64_t)&v140);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v70 + 8), (uint64_t)"not enough data in decodeHeader", 31);
      *(_BYTE *)(v70 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v70 + 64))(v70, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_232;
    }
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v69 = this->__r_.__value_.__l.__size_;
  else
    v69 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v75 = LODWORD(this[1].__r_.__value_.__r.__words[2]);
  if (v69 >= v75)
  {
    memset(&v110, 0, sizeof(v110));
    std::string::basic_string(&v110, this, 0, v75, (std::allocator<char> *)&v140);
    std::string::basic_string(&v140, this, LODWORD(this[1].__r_.__value_.__r.__words[2]), 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__str);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      operator delete(this->__r_.__value_.__l.__data_);
    *this = v140;
    if (((*(uint64_t (**)(std::string::size_type, std::string *, std::string::size_type))(*(_QWORD *)this[1].__r_.__value_.__l.__size_ + 88))(this[1].__r_.__value_.__l.__size_, &v110, this[2].__r_.__value_.__l.__size_) & 1) != 0)
    {
      v77 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v140, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(&__str, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v79 = ImsLogger::warn(ims::_logger, (uint64_t)&v140, (uint64_t)&__str);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v79 + 8), (uint64_t)"failed to decode body of type ", 30);
      *(_BYTE *)(v79 + 17) = 0;
      v80 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)this[1].__r_.__value_.__l.__size_ + 40))(this[1].__r_.__value_.__l.__size_);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v79 + 32))(v79, v80);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v79 + 8), (uint64_t)":", 1);
      *(_BYTE *)(v79 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v79 + 64))(v79, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v79 + 17) = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v140, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(&__str, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v81 = (_BYTE *)ImsLogger::warn(ims::_logger, (uint64_t)&v140, (uint64_t)&__str);
      (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v81 + 32))(v81, &v110);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v81 + 64))(v81, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v81[17] = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v140, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(&__str, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v82 = ImsLogger::warn(ims::_logger, (uint64_t)&v140, (uint64_t)&__str);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v82 + 8), (uint64_t)"Message so far:", 15);
      *(_BYTE *)(v82 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v82 + 64))(v82, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v82 + 17) = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
      v83 = *v8;
      std::string::basic_string[abi:ne180100]<0>(&v140, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(&__str, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v84 = ImsLogger::warn(ims::_logger, (uint64_t)&v140, (uint64_t)&__str);
      (*(void (**)(SipMessage *, uint64_t))(*(_QWORD *)v83 + 16))(v83, v84);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
      v77 = 2;
    }
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v110.__r_.__value_.__l.__data_);
    if (v77 != 1)
    {
LABEL_209:
      if (*v8)
        (*(void (**)(SipMessage *))(*(_QWORD *)*v8 + 8))(*v8);
      *v8 = 0;
      this[1].__r_.__value_.__l.__size_ = 0;
      v85 = this[2].__r_.__value_.__l.__data_;
      if (v85)
        (*(void (**)(std::string::pointer))(*(_QWORD *)v85 + 8))(v85);
      v86 = 0;
      this[2].__r_.__value_.__r.__words[0] = 0;
      LODWORD(this[1].__r_.__value_.__r.__words[2]) = 0;
      return v86 & 1;
    }
    v91 = this[1].__r_.__value_.__l.__data_;
    v92 = this[1].__r_.__value_.__l.__size_;
    v93 = *((_QWORD *)v91 + 9);
    if (v93 != v92)
    {
      v94 = (SipMessage *)this[1].__r_.__value_.__l.__data_;
      if (v93)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
        v94 = *v8;
      }
      *((_QWORD *)v91 + 9) = v92;
      v91 = (std::string::pointer)v94;
    }
    *a3 = v91;
    *v8 = 0;
    this[1].__r_.__value_.__l.__size_ = 0;
    v95 = this[2].__r_.__value_.__l.__data_;
    if (v95)
      (*(void (**)(std::string::pointer))(*(_QWORD *)v95 + 8))(v95);
    this[2].__r_.__value_.__r.__words[0] = 0;
    LODWORD(this[1].__r_.__value_.__r.__words[2]) = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v110, "sip.decode");
    std::string::basic_string[abi:ne180100]<0>(&v140, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v76 = ImsLogger::debug(ims::_logger, (uint64_t)&v110, (uint64_t)&v140);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v76 + 8), (uint64_t)"Still waiting for ", 18);
    *(_BYTE *)(v76 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v76 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v76 + 8), (uint64_t)" body bytes", 11);
    *(_BYTE *)(v76 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v76 + 64))(v76, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v76 + 17) = 0;
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v140.__r_.__value_.__l.__data_);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v110.__r_.__value_.__l.__data_);
    if (*v8)
    {
      std::string::basic_string[abi:ne180100]<0>(&v110, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(&v140, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v87 = ImsLogger::spam(ims::_logger, (uint64_t)&v110, (uint64_t)&v140);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v87 + 8), (uint64_t)"Message so far:", 15);
      *(_BYTE *)(v87 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v87 + 64))(v87, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v87 + 17) = 0;
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v110.__r_.__value_.__l.__data_);
      v88 = *v8;
      std::string::basic_string[abi:ne180100]<0>(&v110, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(&v140, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v89 = ImsLogger::spam(ims::_logger, (uint64_t)&v110, (uint64_t)&v140);
      (*(void (**)(SipMessage *, uint64_t))(*(_QWORD *)v88 + 16))(v88, v89);
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v110.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v110, "sip.decode");
    std::string::basic_string[abi:ne180100]<0>(&v140, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v90 = ImsLogger::spam(ims::_logger, (uint64_t)&v110, (uint64_t)&v140);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v90 + 8), (uint64_t)"Current buf (", 13);
    *(_BYTE *)(v90 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v90 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v90 + 8), (uint64_t)" bytes): '", 10);
    *(_BYTE *)(v90 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v90 + 32))(v90, this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v90 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v90 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v90 + 64))(v90, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v90 + 17) = 0;
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v140.__r_.__value_.__l.__data_);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v110.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v110, "sip.decode");
    std::string::basic_string[abi:ne180100]<0>(&v140, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v70 = ImsLogger::debug(ims::_logger, (uint64_t)&v110, (uint64_t)&v140);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v70 + 8), (uint64_t)"Not enough data in decodeBody", 29);
    *(_BYTE *)(v70 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v70 + 64))(v70, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_232:
    *(_BYTE *)(v70 + 17) = 0;
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v140.__r_.__value_.__l.__data_);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v110.__r_.__value_.__l.__data_);
  }
LABEL_236:
  v86 = 1;
  return v86 & 1;
}

void sub_1BF079144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  MEMORY[0x1C3B87100](v32, 0x10F3C40979C6A35);
  if (*(char *)(v33 - 153) < 0)
    operator delete(*(void **)(v33 - 176));
  SipUri::~SipUri((SipUri *)&a27);
  if (*(char *)(v33 - 129) < 0)
    operator delete(*(void **)(v33 - 152));
  if (*(char *)(v33 - 105) < 0)
    operator delete(*(void **)(v33 - 128));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL SipMessageDecoder::decodeSipfrag(uint64_t a1, const std::string::value_type *a2, std::string::pointer *a3)
{
  char *v5;
  uint64_t v6;

  SipMessageDecoder::decode((std::string *)a1, a2, a3, 0);
  v5 = *(char **)(a1 + 24);
  if (v5)
  {
    *a3 = v5;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    v6 = *(_QWORD *)(a1 + 48);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 40) = 0;
  }
  return v5 != 0;
}

uint64_t KDDIRegistrationPolicy::KDDIRegistrationPolicy(uint64_t a1, std::__shared_weak_count **a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;

  *(_QWORD *)(a1 + 104) = &off_1E78B7B60;
  v3 = a2[1];
  v7 = *a2;
  v8 = v3;
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
  }
  SipRegistrationPolicy::SipRegistrationPolicy(a1, (uint64_t *)&off_1E78D7F60, &v7);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  *(_QWORD *)a1 = &off_1E78D7CA8;
  *(_QWORD *)(a1 + 104) = &unk_1E78D7F08;
  *(_QWORD *)(a1 + 176) = &unk_1E78D7F50;
  *(_QWORD *)(a1 + 2352) = 0;
  *(_BYTE *)(a1 + 2360) = 0;
  *(_QWORD *)(a1 + 2368) = &off_1E78B7238;
  *(_QWORD *)(a1 + 2416) = 0;
  *(_QWORD *)(a1 + 2432) = 0;
  *(_QWORD *)(a1 + 2424) = 0;
  *(_QWORD *)(a1 + 2376) = &_bambiDomain;
  *(_DWORD *)(a1 + 2384) = 0;
  *(_QWORD *)(a1 + 2392) = 0;
  *(_QWORD *)(a1 + 2408) = 0;
  *(_QWORD *)(a1 + 2400) = 0;
  *(_QWORD *)(a1 + 2440) = 10;
  return a1;
}

void sub_1BF07955C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(exception_object);
}

BOOL KDDIRegistrationPolicy::useNextProxy(KDDIRegistrationPolicy *this)
{
  unsigned int v1;

  v1 = *((_DWORD *)this + 460);
  return *((_DWORD *)this + 588) >= v1 || *((_DWORD *)this + 589) >= v1;
}

time_t KDDIRegistrationPolicy::handleGeneralErrorFromOneProxy(KDDIRegistrationPolicy *this, const ImsResult *a2)
{
  uint64_t v4;
  uint64_t v5;

  ++*((_DWORD *)this + 588);
  v4 = (*(uint64_t (**)(KDDIRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(KDDIRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"incrementing retry counter for error ", 37);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(const ImsResult *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v4);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  v5 = (*(uint64_t (**)(KDDIRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(KDDIRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"that's error ", 13);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" of ", 4);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  ImsResult::operator=((uint64_t)this + 2368, (uint64_t)a2);
  return SipRegistrationPolicy::handleGeneralErrorFromOneProxy(this, a2);
}

time_t KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(KDDIRegistrationPolicy *this, const ImsResult *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  ImsResult::operator=((uint64_t)this + 2368, (uint64_t)a2);
  ++*((_DWORD *)this + 588);
  v4 = (*(uint64_t (**)(KDDIRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(KDDIRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"incrementing retry counter for error ", 37);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(const ImsResult *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v4);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  v5 = (*(uint64_t (**)(KDDIRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(KDDIRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"that's error ", 13);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" of ", 4);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (*((_DWORD *)this + 588) < *((_DWORD *)this + 460))
    return SipRegistrationPolicy::handleGeneralErrorFromOneProxy(this, a2);
  SipRegistrationPolicy::setProxyOffset(this, 0);
  (*(void (**)(KDDIRegistrationPolicy *))(*(_QWORD *)this + 192))(this);
  *((_BYTE *)this + 2360) = 1;
  v8 = *((_QWORD *)this + 23);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
  }
  v13 = operator new(0x20uLL);
  *v13 = &off_1E78D82D8;
  v13[1] = this;
  v13[2] = v8;
  v13[3] = v7;
  v17 = v13;
  SipTimerContainer::startTimer((_QWORD *)this + 28, (uint64_t)"PdnBringupTimer", (uint64_t)v16, 1000 * *((_DWORD *)this + 461), 0);
  v14 = v17;
  if (v17 == v16)
  {
    v15 = 4;
    v14 = v16;
    goto LABEL_12;
  }
  if (v17)
  {
    v15 = 5;
LABEL_12:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return -1;
}

void sub_1BF079988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  std::__shared_weak_count *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  if (v13)
  {
    std::__shared_weak_count::__release_weak(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

BOOL KDDIRegistrationPolicy::shouldNotifyDelegate(KDDIRegistrationPolicy *this)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)this + 29, "PdnBringupTimer") == 0;
}

double KDDIRegistrationPolicy::clearFailureFlags(KDDIRegistrationPolicy *this)
{
  double result;
  _QWORD v3[2];
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  SipRegistrationPolicy::clearFailureFlags(this);
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v3[0] = &off_1E78B7238;
  v3[1] = &_bambiDomain;
  v4 = 0;
  ImsResult::operator=((uint64_t)this + 2368, (uint64_t)v3);
  ImsResult::~ImsResult((ImsResult *)v3);
  result = 0.0;
  *((_QWORD *)this + 294) = 0;
  return result;
}

void sub_1BF079A78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

uint64_t KDDIRegistrationPolicy::startingRegistration(KDDIRegistrationPolicy *this)
{
  uint64_t v2;

  if (!*((_BYTE *)this + 2360))
    return SipRegistrationPolicy::startingRegistration(this);
  v2 = (*(uint64_t (**)(KDDIRegistrationPolicy *))(*(_QWORD *)this + 32))(this);
  (*(void (**)(KDDIRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"registration is blocked until the PDN is reset", 46);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  return 0;
}

ImsBlockQueue *KDDIRegistrationPolicy::deinitialize(KDDIRegistrationPolicy *this)
{
  _QWORD v3[2];
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *((_BYTE *)this + 2360) = 0;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v3[0] = &off_1E78B7238;
  v3[1] = &_bambiDomain;
  v4 = 0;
  ImsResult::operator=((uint64_t)this + 2368, (uint64_t)v3);
  ImsResult::~ImsResult((ImsResult *)v3);
  return SipRegistrationPolicy::deinitialize(this);
}

void sub_1BF079B88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void KDDIRegistrationPolicy::handleTimer(SipRegistrationPolicy *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  unsigned __int8 *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  if (v5 != 15)
    goto LABEL_12;
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a2, "PdnBringupTimer", *((_QWORD *)a2 + 1)))
      goto LABEL_13;
LABEL_12:
    SipRegistrationPolicy::handleTimer(a1, a2);
    return;
  }
  if (a2[23])
  {
    v6 = "PdnBringupTimer";
    v7 = a2;
    while (*v7 == *(unsigned __int8 *)v6)
    {
      ++v7;
      ++v6;
      if (!--v4)
        goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_13:
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 47);
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      v10 = v9;
      v11 = *((_QWORD *)a1 + 46);
      if (v11)
      {
        v12 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)a1 + 64))(a1);
        (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"time to reset the PDN.", 22);
        *(_BYTE *)(v12 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v12 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v11 + 80))(v11, 3, -1, 0);
      }
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1BF079D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'KDDIRegistrationPolicy::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  KDDIRegistrationPolicy::handleTimer((SipRegistrationPolicy *)(a1 - 176), a2);
}

double KDDIRegistrationPolicy::handleProxyChange(KDDIRegistrationPolicy *this)
{
  double result;

  result = 0.0;
  *((_QWORD *)this + 294) = 0;
  return result;
}

time_t KDDIRegistrationPolicy::handleFatalError(ims **this, const ImsResult *a2)
{
  uint64_t v4;
  uint64_t v5;

  ImsResult::operator=((uint64_t)(this + 296), (uint64_t)a2);
  SipRegistrationPolicy::clearAllThrottling(this);
  ++*((_DWORD *)this + 588);
  v4 = (*((uint64_t (**)(ims **))*this + 8))(this);
  (*((void (**)(ims **, uint64_t))*this + 2))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"incrementing retry counter for error ", 37);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(const ImsResult *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v4);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  v5 = (*((uint64_t (**)(ims **))*this + 8))(this);
  (*((void (**)(ims **, uint64_t))*this + 2))(this, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"that's error ", 13);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" of ", 4);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  *((_BYTE *)this + 220) = 1;
  *((_DWORD *)this + 54) = 0;
  return SipRegistrationPolicy::scheduleRetry((SipRegistrationPolicy *)this, a2, 1, 0);
}

time_t KDDIRegistrationPolicy::handleForbiddenUser(ims **this, const SipResponse *a2)
{
  uint64_t v3;
  uint64_t v4;
  time_t v5;
  _OWORD v7[4];
  uint64_t v8;

  v8 = 0;
  memset(v7, 0, sizeof(v7));
  SipResultDomain::makeResult(a2, (uint64_t)v7);
  v3 = (*((uint64_t (**)(ims **))*this + 8))(this);
  (*((void (**)(ims **, uint64_t))*this + 2))(this, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"not incrementing retry counter for error ", 41);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)&v7[0] + 16))(v7, v3);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  ImsResult::operator=((uint64_t)(this + 296), (uint64_t)v7);
  SipRegistrationPolicy::clearAllThrottling(this);
  *((_BYTE *)this + 220) = 1;
  *((_DWORD *)this + 54) = 0;
  v4 = (*((uint64_t (**)(ims **))*this + 8))(this);
  (*((void (**)(ims **, uint64_t))*this + 2))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"scheduling retry with interval 1", 32);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  v5 = SipRegistrationPolicy::scheduleRetry((SipRegistrationPolicy *)this, (const ImsResult *)v7, 1, 0);
  ImsResult::~ImsResult((ImsResult *)v7);
  return v5;
}

void sub_1BF07A008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ImsResult::~ImsResult((ImsResult *)&a9);
  _Unwind_Resume(a1);
}

BOOL KDDIRegistrationPolicy::isFatalError(KDDIRegistrationPolicy *this, unsigned __int16 a2)
{
  return !*((_BYTE *)this + 220)
      && SipResponseCodeMap::containsResponseCodeForMethod((uint64_t)this + 2280, (void **)"REGISTER", a2, 0);
}

BOOL KDDIRegistrationPolicy::isForbiddenUserError(KDDIRegistrationPolicy *this, unsigned __int16 a2)
{
  return !*((_BYTE *)this + 220)
      && SipResponseCodeMap::containsResponseCodeForMethod((uint64_t)this + 2312, (void **)"REGISTER", a2, 0);
}

uint64_t KDDIRegistrationPolicy::generalErrorRetryInterval(KDDIRegistrationPolicy *this)
{
  BOOL v2;
  BOOL v3;
  void *__p[2];
  char v6;

  if (!*((_BYTE *)this + 220) && *((uint64_t **)this + 297) == &SipResultDomain::_domain)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "REGISTER");
    v2 = SipResponseCodeMap::containsResponseCodeForMethod((uint64_t)this + 2248, __p, *((_DWORD *)this + 596), 0);
    v3 = v2;
    if (v6 < 0)
    {
      operator delete(__p[0]);
      if (v3)
        return 1;
    }
    else if (v2)
    {
      return 1;
    }
  }
  return *((_QWORD *)this + 305);
}

void sub_1BF07A0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void KDDIRegistrationPolicy::updateConfig(KDDIRegistrationPolicy *this, const SipRegistrationConfig *a2)
{
  _QWORD *v3;
  SipResponseCodeMap *v4;
  std::string __p;
  void *v6[2];
  char v7;

  v3 = (_QWORD *)*((_QWORD *)a2 + 120);
  if (*((_QWORD *)a2 + 121) - (_QWORD)v3 == 16)
    *((_QWORD *)this + 305) = *v3;
  SipRegistrationPolicy::updateConfig(this, a2);
  if (SipResponseCodeMap::empty((KDDIRegistrationPolicy *)((char *)this + 2312)))
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "REGISTER");
    std::string::basic_string[abi:ne180100]<0>(&__p, "403,404");
    SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)this + 2312, (uint64_t)v6, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v7 < 0)
      operator delete(v6[0]);
  }
  if (SipResponseCodeMap::empty((KDDIRegistrationPolicy *)((char *)this + 2280)))
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "REGISTER");
    std::string::basic_string[abi:ne180100]<0>(&__p, "408,500,503,504");
    SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)this + 2280, (uint64_t)v6, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v7 < 0)
      operator delete(v6[0]);
  }
  v4 = (KDDIRegistrationPolicy *)((char *)this + 2248);
  if (SipResponseCodeMap::empty(v4))
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "REGISTER");
    std::string::basic_string[abi:ne180100]<0>(&__p, "403,404,408,500,503,504");
    SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)v4, (uint64_t)v6, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v7 < 0)
      operator delete(v6[0]);
  }
}

void sub_1BF07A280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void KDDIRegistrationPolicy::handleSubscriptionFailed(KDDIRegistrationPolicy *this, const ImsResult *a2, int a3)
{
  unsigned int v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 589) + 1;
  *((_DWORD *)this + 589) = v4;
  if (v4 < *((_DWORD *)this + 460))
  {
    v6 = (*(uint64_t (**)(KDDIRegistrationPolicy *, const ImsResult *))(*(_QWORD *)this + 64))(this, a2);
    (*(void (**)(KDDIRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"subscription attempt ", 21);
    *(_BYTE *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" of ", 4);
    *(_BYTE *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" failed", 7);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (!a3)
      a3 = *((_DWORD *)this + 610);
    v8 = *((_QWORD *)this + 23);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
    if (v7)
    {
      p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
      do
        v12 = __ldxr(p_shared_weak_owners);
      while (__stxr(v12 + 1, p_shared_weak_owners));
    }
    v13 = operator new(0x20uLL);
    *v13 = &off_1E78D8358;
    v13[1] = this;
    v13[2] = v8;
    v13[3] = v7;
    v24 = v13;
    SipTimerContainer::startTimer((_QWORD *)this + 28, (uint64_t)&SipRegistrationPolicy::kSubscriptionRetryTimerName, (uint64_t)v23, 1000 * a3, 0);
    v14 = v24;
    if (v24 == v23)
    {
      v15 = 4;
      v14 = v23;
    }
    else
    {
      if (!v24)
        goto LABEL_23;
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_23:
    if (v7)
    {
      std::__shared_weak_count::__release_weak(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
  if (v16)
  {
    v17 = std::__shared_weak_count::lock(v16);
    if (v17)
    {
      v18 = v17;
      v19 = *((_QWORD *)this + 46);
      if (v19)
      {
        v20 = (*(uint64_t (**)(KDDIRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
        (*(void (**)(KDDIRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"too many subscription failures. Terminating registration.", 57);
        *(_BYTE *)(v20 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v20 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v19 + 80))(v19, 5, 0, 0);
      }
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  (*(void (**)(KDDIRegistrationPolicy *))(*(_QWORD *)this + 504))(this);
}

void sub_1BF07A5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  std::__shared_weak_count *v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  if (v15)
  {
    std::__shared_weak_count::__release_weak(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t KDDIRegistrationPolicy::handleSubscriptionSucceeded(uint64_t this)
{
  *(_DWORD *)(this + 2356) = 0;
  return this;
}

BOOL KDDIRegistrationPolicy::isCSFBModeEnabled(KDDIRegistrationPolicy *this)
{
  return *((_BYTE *)this + 1858) == 0;
}

void KDDIRegistrationPolicy::~KDDIRegistrationPolicy(KDDIRegistrationPolicy *this)
{
  *(_QWORD *)this = &off_1E78D7CA8;
  *((_QWORD *)this + 13) = &unk_1E78D7F08;
  *((_QWORD *)this + 22) = &unk_1E78D7F50;
  ImsResult::~ImsResult((KDDIRegistrationPolicy *)((char *)this + 2368));
  SipRegistrationPolicy::~SipRegistrationPolicy(this, (uint64_t *)&off_1E78D7F60);
}

{
  *(_QWORD *)this = &off_1E78D7CA8;
  *((_QWORD *)this + 13) = &unk_1E78D7F08;
  *((_QWORD *)this + 22) = &unk_1E78D7F50;
  ImsResult::~ImsResult((KDDIRegistrationPolicy *)((char *)this + 2368));
  SipRegistrationPolicy::~SipRegistrationPolicy(this, (uint64_t *)&off_1E78D7F60);
  JUMPOUT(0x1C3B87100);
}

uint64_t KDDIRegistrationPolicy::maxRetryInterval(KDDIRegistrationPolicy *this)
{
  return 0;
}

uint64_t KDDIRegistrationPolicy::fatalErrorRetryInterval(KDDIRegistrationPolicy *this)
{
  return (*(uint64_t (**)(KDDIRegistrationPolicy *))(*(_QWORD *)this + 208))(this);
}

uint64_t KDDIRegistrationPolicy::forbiddenErrorRetryInterval(KDDIRegistrationPolicy *this)
{
  return 1;
}

const char *KDDIRegistrationPolicy::name(KDDIRegistrationPolicy *this)
{
  return "KDDI";
}

void `non-virtual thunk to'KDDIRegistrationPolicy::~KDDIRegistrationPolicy(KDDIRegistrationPolicy *this)
{
  *(_QWORD *)this = &unk_1E78D7F08;
  *((_QWORD *)this + 9) = &unk_1E78D7F50;
  *((_QWORD *)this - 13) = &off_1E78D7CA8;
  ImsResult::~ImsResult((KDDIRegistrationPolicy *)((char *)this + 2264));
  SipRegistrationPolicy::~SipRegistrationPolicy((KDDIRegistrationPolicy *)((char *)this - 104), (uint64_t *)&off_1E78D7F60);
}

{
  *(_QWORD *)this = &unk_1E78D7F08;
  *((_QWORD *)this + 9) = &unk_1E78D7F50;
  *((_QWORD *)this - 13) = &off_1E78D7CA8;
  ImsResult::~ImsResult((KDDIRegistrationPolicy *)((char *)this + 2264));
  SipRegistrationPolicy::~SipRegistrationPolicy((KDDIRegistrationPolicy *)((char *)this - 104), (uint64_t *)&off_1E78D7F60);
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0,std::allocator<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78D82D8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0,std::allocator<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78D82D8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0,std::allocator<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78D82D8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0,std::allocator<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78D82D8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0,std::allocator<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0,std::allocator<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0,std::allocator<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF07A99C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0,std::allocator<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0,std::allocator<KDDIRegistrationPolicy::handleGeneralErrorFromAllProxies(ImsResult const&)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78D8358;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78D8358;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78D8358;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78D8358;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF07AC04(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<KDDIRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void IMSWrapperDelegate::addCallDelegate(uint64_t a1, uint64_t a2, NSObject *a3, std::__shared_weak_count **a4)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD **v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  std::string *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  void *__p[2];
  char v30;
  _BYTE __str[32];
  std::__shared_weak_count *v32[2];
  void *v33[2];
  uint64_t v34;

  if (*a4)
  {
    *(_OWORD *)v32 = 0u;
    memset(__str, 0, sizeof(__str));
    std::string::operator=((std::string *)__str, (const std::string *)a2);
    if (a3)
    {
      dispatch_retain(a3);
      ims::Dispatch::reset((NSObject **)&__str[24], a3);
      dispatch_release(a3);
    }
    else
    {
      ims::Dispatch::reset((NSObject **)&__str[24], 0);
    }
    v9 = *a4;
    v8 = a4[1];
    if (v8)
    {
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
    }
    v12 = v32[1];
    v32[0] = v9;
    v32[1] = v8;
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
    v13 = (_QWORD **)(a1 + 136);
    v14 = (_QWORD *)(a1 + 144);
    if ((void **)(a1 + 144) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 136, (void **)a2))
    {
      std::string::basic_string[abi:ne180100]<0>(v33, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v15 = ImsLogger::debug(ims::_logger, (uint64_t)v33, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Replacing call delegate for ", 28);
      *(_BYTE *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 32))(v15, a2);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v15 + 17) = 0;
      if (v30 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v34) < 0)
        operator delete(v33[0]);
    }
    v16 = (_QWORD *)*v14;
    v17 = (_QWORD *)(a1 + 144);
    v18 = (_QWORD *)(a1 + 144);
    if (!*v14)
      goto LABEL_24;
    v17 = (_QWORD *)(a1 + 144);
    while (1)
    {
      while (1)
      {
        v18 = v16;
        v19 = v16 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a2, (void **)v16 + 4) & 0x80) == 0)break;
        v16 = (_QWORD *)*v18;
        v17 = v18;
        if (!*v18)
          goto LABEL_24;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v19, (void **)a2) & 0x80) == 0)
        break;
      v17 = v18 + 1;
      v16 = (_QWORD *)v18[1];
      if (!v16)
        goto LABEL_24;
    }
    v20 = (_QWORD *)*v17;
    if (!*v17)
    {
LABEL_24:
      v34 = 0;
      v21 = operator new(0x68uLL);
      v33[0] = v21;
      v33[1] = (void *)(a1 + 144);
      v22 = (std::string *)(v21 + 4);
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v21[6] = *(_QWORD *)(a2 + 16);
      }
      *(_OWORD *)(v21 + 11) = 0u;
      *(_OWORD *)(v21 + 9) = 0u;
      *(_OWORD *)(v21 + 7) = 0u;
      LOBYTE(v34) = 1;
      *v21 = 0;
      v21[1] = 0;
      v21[2] = v18;
      *v17 = v21;
      v23 = (_QWORD *)**v13;
      if (v23)
      {
        *v13 = v23;
        v21 = (_QWORD *)*v17;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 144), v21);
      ++*(_QWORD *)(a1 + 152);
      v20 = v33[0];
      v33[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v33);
    }
    std::string::operator=((std::string *)(v20 + 7), (const std::string *)__str);
    if (v20 + 10 != (_QWORD *)&__str[24])
      ims::Dispatch::reset((NSObject **)v20 + 10, *(dispatch_object_t *)&__str[24]);
    v25 = v32[0];
    v24 = v32[1];
    if (v32[1])
    {
      v26 = &v32[1]->__shared_weak_owners_;
      do
        v27 = __ldxr((unint64_t *)v26);
      while (__stxr(v27 + 1, (unint64_t *)v26));
    }
    v28 = (std::__shared_weak_count *)v20[12];
    v20[11] = v25;
    v20[12] = v24;
    if (v28)
      std::__shared_weak_count::__release_weak(v28);
    if (v32[1])
      std::__shared_weak_count::__release_weak(v32[1]);
    if (*(_QWORD *)&__str[24])
      dispatch_release(*(dispatch_object_t *)&__str[24]);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
  }
}

void sub_1BF07AF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
  DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>::~DelegateRecord((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>::~DelegateRecord(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(NSObject **)(a1 + 24);
  if (v3)
    dispatch_release(v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void IMSWrapperDelegate::addStackDelegate(uint64_t a1, uint64_t a2, NSObject *a3, std::__shared_weak_count **a4)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD **v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  std::string *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  void *__p[2];
  char v30;
  _BYTE __str[32];
  std::__shared_weak_count *v32[2];
  void *v33[2];
  uint64_t v34;

  if (*a4)
  {
    *(_OWORD *)v32 = 0u;
    memset(__str, 0, sizeof(__str));
    std::string::operator=((std::string *)__str, (const std::string *)a2);
    if (a3)
    {
      dispatch_retain(a3);
      ims::Dispatch::reset((NSObject **)&__str[24], a3);
      dispatch_release(a3);
    }
    else
    {
      ims::Dispatch::reset((NSObject **)&__str[24], 0);
    }
    v9 = *a4;
    v8 = a4[1];
    if (v8)
    {
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
    }
    v12 = v32[1];
    v32[0] = v9;
    v32[1] = v8;
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
    v13 = (_QWORD **)(a1 + 64);
    v14 = (_QWORD *)(a1 + 72);
    if ((void **)(a1 + 72) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 64, (void **)a2))
    {
      std::string::basic_string[abi:ne180100]<0>(v33, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v15 = ImsLogger::debug(ims::_logger, (uint64_t)v33, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Replacing stack delegate for ", 29);
      *(_BYTE *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 32))(v15, a2);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v15 + 17) = 0;
      if (v30 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v34) < 0)
        operator delete(v33[0]);
    }
    v16 = (_QWORD *)*v14;
    v17 = (_QWORD *)(a1 + 72);
    v18 = (_QWORD *)(a1 + 72);
    if (!*v14)
      goto LABEL_24;
    v17 = (_QWORD *)(a1 + 72);
    while (1)
    {
      while (1)
      {
        v18 = v16;
        v19 = v16 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a2, (void **)v16 + 4) & 0x80) == 0)break;
        v16 = (_QWORD *)*v18;
        v17 = v18;
        if (!*v18)
          goto LABEL_24;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v19, (void **)a2) & 0x80) == 0)
        break;
      v17 = v18 + 1;
      v16 = (_QWORD *)v18[1];
      if (!v16)
        goto LABEL_24;
    }
    v20 = (_QWORD *)*v17;
    if (!*v17)
    {
LABEL_24:
      v34 = 0;
      v21 = operator new(0x68uLL);
      v33[0] = v21;
      v33[1] = (void *)(a1 + 72);
      v22 = (std::string *)(v21 + 4);
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v21[6] = *(_QWORD *)(a2 + 16);
      }
      *(_OWORD *)(v21 + 11) = 0u;
      *(_OWORD *)(v21 + 9) = 0u;
      *(_OWORD *)(v21 + 7) = 0u;
      LOBYTE(v34) = 1;
      *v21 = 0;
      v21[1] = 0;
      v21[2] = v18;
      *v17 = v21;
      v23 = (_QWORD *)**v13;
      if (v23)
      {
        *v13 = v23;
        v21 = (_QWORD *)*v17;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 72), v21);
      ++*(_QWORD *)(a1 + 80);
      v20 = v33[0];
      v33[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v33);
    }
    std::string::operator=((std::string *)(v20 + 7), (const std::string *)__str);
    if (v20 + 10 != (_QWORD *)&__str[24])
      ims::Dispatch::reset((NSObject **)v20 + 10, *(dispatch_object_t *)&__str[24]);
    v25 = v32[0];
    v24 = v32[1];
    if (v32[1])
    {
      v26 = &v32[1]->__shared_weak_owners_;
      do
        v27 = __ldxr((unint64_t *)v26);
      while (__stxr(v27 + 1, (unint64_t *)v26));
    }
    v28 = (std::__shared_weak_count *)v20[12];
    v20[11] = v25;
    v20[12] = v24;
    if (v28)
      std::__shared_weak_count::__release_weak(v28);
    if (v32[1])
      std::__shared_weak_count::__release_weak(v32[1]);
    if (*(_QWORD *)&__str[24])
      dispatch_release(*(dispatch_object_t *)&__str[24]);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
  }
}

void sub_1BF07B344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
  DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>::~DelegateRecord((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::addCallManagerDelegate(uint64_t a1, uint64_t a2, NSObject *a3, std::__shared_weak_count **a4)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  _QWORD *v14;
  _QWORD **v15;
  std::string::size_type **v16;
  uint64_t v17;
  std::string::size_type *v18;
  std::string::size_type *v19;
  std::string::size_type *v20;
  _QWORD *v21;
  std::string::size_type v22;
  char *v23;
  std::string *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  uint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  void *__p[2];
  char v32;
  _BYTE v33[32];
  std::__shared_weak_count *v34[2];
  std::string __str;

  if (*a4)
  {
    *(_OWORD *)v34 = 0u;
    memset(v33, 0, sizeof(v33));
    std::string::operator=((std::string *)v33, (const std::string *)a2);
    if (a3)
    {
      dispatch_retain(a3);
      ims::Dispatch::reset((NSObject **)&v33[24], a3);
      dispatch_release(a3);
    }
    else
    {
      ims::Dispatch::reset((NSObject **)&v33[24], 0);
    }
    v9 = *a4;
    v8 = a4[1];
    if (v8)
    {
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
    }
    v12 = v34[1];
    v34[0] = v9;
    v34[1] = v8;
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
    v13 = *a4;
    if (v13)
    {
      if (v14)
        v13 = (std::__shared_weak_count *)v14[4];
      if (*(char *)(a1 + 47) < 0)
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
      else
        __str = *(std::string *)(a1 + 24);
      std::string::operator=((std::string *)&v13->__shared_owners_, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    v15 = (_QWORD **)(a1 + 88);
    v16 = (std::string::size_type **)(a1 + 96);
    if ((void **)(a1 + 96) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 88, (void **)a2))
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v17 = ImsLogger::debug(ims::_logger, (uint64_t)&__str, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Replacing manager delegate for ", 31);
      *(_BYTE *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 32))(v17, a2);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v17 + 17) = 0;
      if (v32 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    v18 = *v16;
    v19 = (std::string::size_type *)(a1 + 96);
    v20 = (std::string::size_type *)(a1 + 96);
    if (!*v16)
      goto LABEL_32;
    v19 = (std::string::size_type *)(a1 + 96);
    while (1)
    {
      while (1)
      {
        v20 = v18;
        v21 = v18 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a2, (void **)v18 + 4) & 0x80) == 0)break;
        v18 = (std::string::size_type *)*v20;
        v19 = v20;
        if (!*v20)
          goto LABEL_32;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v21, (void **)a2) & 0x80) == 0)
        break;
      v19 = v20 + 1;
      v18 = (std::string::size_type *)v20[1];
      if (!v18)
        goto LABEL_32;
    }
    v22 = *v19;
    if (!*v19)
    {
LABEL_32:
      __str.__r_.__value_.__r.__words[2] = 0;
      v23 = (char *)operator new(0x68uLL);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
      __str.__r_.__value_.__l.__size_ = a1 + 96;
      v24 = (std::string *)(v23 + 32);
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        *((_QWORD *)v23 + 6) = *(_QWORD *)(a2 + 16);
      }
      *(_OWORD *)(v23 + 88) = 0u;
      *(_OWORD *)(v23 + 72) = 0u;
      *(_OWORD *)(v23 + 56) = 0u;
      __str.__r_.__value_.__s.__data_[16] = 1;
      *(_QWORD *)v23 = 0;
      *((_QWORD *)v23 + 1) = 0;
      *((_QWORD *)v23 + 2) = v20;
      *v19 = (std::string::size_type)v23;
      v25 = (_QWORD *)**v15;
      if (v25)
      {
        *v15 = v25;
        v23 = (char *)*v19;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 96), (uint64_t *)v23);
      ++*(_QWORD *)(a1 + 104);
      v22 = __str.__r_.__value_.__r.__words[0];
      __str.__r_.__value_.__r.__words[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__str);
    }
    std::string::operator=((std::string *)(v22 + 56), (const std::string *)v33);
    if ((_BYTE *)(v22 + 80) != &v33[24])
      ims::Dispatch::reset((NSObject **)(v22 + 80), *(dispatch_object_t *)&v33[24]);
    v27 = v34[0];
    v26 = v34[1];
    if (v34[1])
    {
      v28 = &v34[1]->__shared_weak_owners_;
      do
        v29 = __ldxr((unint64_t *)v28);
      while (__stxr(v29 + 1, (unint64_t *)v28));
    }
    v30 = *(std::__shared_weak_count **)(v22 + 96);
    *(_QWORD *)(v22 + 88) = v27;
    *(_QWORD *)(v22 + 96) = v26;
    if (v30)
      std::__shared_weak_count::__release_weak(v30);
    if (v34[1])
      std::__shared_weak_count::__release_weak(v34[1]);
    if (*(_QWORD *)&v33[24])
      dispatch_release(*(dispatch_object_t *)&v33[24]);
    if ((v33[23] & 0x80000000) != 0)
      operator delete(*(void **)v33);
  }
}

void sub_1BF07B720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>::~DelegateRecord((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::addMessageDelegate(uint64_t a1, uint64_t a2, NSObject *a3, std::__shared_weak_count **a4)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD **v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  std::string *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  void *__p[2];
  char v30;
  _BYTE __str[32];
  std::__shared_weak_count *v32[2];
  void *v33[2];
  uint64_t v34;

  if (*a4)
  {
    *(_OWORD *)v32 = 0u;
    memset(__str, 0, sizeof(__str));
    std::string::operator=((std::string *)__str, (const std::string *)a2);
    if (a3)
    {
      dispatch_retain(a3);
      ims::Dispatch::reset((NSObject **)&__str[24], a3);
      dispatch_release(a3);
    }
    else
    {
      ims::Dispatch::reset((NSObject **)&__str[24], 0);
    }
    v9 = *a4;
    v8 = a4[1];
    if (v8)
    {
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
    }
    v12 = v32[1];
    v32[0] = v9;
    v32[1] = v8;
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
    v13 = (_QWORD **)(a1 + 112);
    v14 = (_QWORD *)(a1 + 120);
    if ((void **)(a1 + 120) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 112, (void **)a2))
    {
      std::string::basic_string[abi:ne180100]<0>(v33, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v15 = ImsLogger::debug(ims::_logger, (uint64_t)v33, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Replacing message delegate for ", 31);
      *(_BYTE *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 32))(v15, a2);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v15 + 17) = 0;
      if (v30 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v34) < 0)
        operator delete(v33[0]);
    }
    v16 = (_QWORD *)*v14;
    v17 = (_QWORD *)(a1 + 120);
    v18 = (_QWORD *)(a1 + 120);
    if (!*v14)
      goto LABEL_24;
    v17 = (_QWORD *)(a1 + 120);
    while (1)
    {
      while (1)
      {
        v18 = v16;
        v19 = v16 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a2, (void **)v16 + 4) & 0x80) == 0)break;
        v16 = (_QWORD *)*v18;
        v17 = v18;
        if (!*v18)
          goto LABEL_24;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v19, (void **)a2) & 0x80) == 0)
        break;
      v17 = v18 + 1;
      v16 = (_QWORD *)v18[1];
      if (!v16)
        goto LABEL_24;
    }
    v20 = (_QWORD *)*v17;
    if (!*v17)
    {
LABEL_24:
      v34 = 0;
      v21 = operator new(0x68uLL);
      v33[0] = v21;
      v33[1] = (void *)(a1 + 120);
      v22 = (std::string *)(v21 + 4);
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v21[6] = *(_QWORD *)(a2 + 16);
      }
      *(_OWORD *)(v21 + 11) = 0u;
      *(_OWORD *)(v21 + 9) = 0u;
      *(_OWORD *)(v21 + 7) = 0u;
      LOBYTE(v34) = 1;
      *v21 = 0;
      v21[1] = 0;
      v21[2] = v18;
      *v17 = v21;
      v23 = (_QWORD *)**v13;
      if (v23)
      {
        *v13 = v23;
        v21 = (_QWORD *)*v17;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 120), v21);
      ++*(_QWORD *)(a1 + 128);
      v20 = v33[0];
      v33[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v33);
    }
    std::string::operator=((std::string *)(v20 + 7), (const std::string *)__str);
    if (v20 + 10 != (_QWORD *)&__str[24])
      ims::Dispatch::reset((NSObject **)v20 + 10, *(dispatch_object_t *)&__str[24]);
    v25 = v32[0];
    v24 = v32[1];
    if (v32[1])
    {
      v26 = &v32[1]->__shared_weak_owners_;
      do
        v27 = __ldxr((unint64_t *)v26);
      while (__stxr(v27 + 1, (unint64_t *)v26));
    }
    v28 = (std::__shared_weak_count *)v20[12];
    v20[11] = v25;
    v20[12] = v24;
    if (v28)
      std::__shared_weak_count::__release_weak(v28);
    if (v32[1])
      std::__shared_weak_count::__release_weak(v32[1]);
    if (*(_QWORD *)&__str[24])
      dispatch_release(*(dispatch_object_t *)&__str[24]);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
  }
}

void sub_1BF07BA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
  DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>::~DelegateRecord((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::addXcapDelegate(uint64_t a1, uint64_t a2, NSObject *a3, std::__shared_weak_count **a4)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD **v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  std::string *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  void *__p[2];
  char v30;
  _BYTE __str[32];
  std::__shared_weak_count *v32[2];
  void *v33[2];
  uint64_t v34;

  if (*a4)
  {
    *(_OWORD *)v32 = 0u;
    memset(__str, 0, sizeof(__str));
    std::string::operator=((std::string *)__str, (const std::string *)a2);
    if (a3)
    {
      dispatch_retain(a3);
      ims::Dispatch::reset((NSObject **)&__str[24], a3);
      dispatch_release(a3);
    }
    else
    {
      ims::Dispatch::reset((NSObject **)&__str[24], 0);
    }
    v9 = *a4;
    v8 = a4[1];
    if (v8)
    {
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
    }
    v12 = v32[1];
    v32[0] = v9;
    v32[1] = v8;
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
    v13 = (_QWORD **)(a1 + 160);
    v14 = (_QWORD *)(a1 + 168);
    if ((void **)(a1 + 168) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 160, (void **)a2))
    {
      std::string::basic_string[abi:ne180100]<0>(v33, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v15 = ImsLogger::debug(ims::_logger, (uint64_t)v33, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Replacing xcap delegate for ", 28);
      *(_BYTE *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 32))(v15, a2);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v15 + 17) = 0;
      if (v30 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v34) < 0)
        operator delete(v33[0]);
    }
    v16 = (_QWORD *)*v14;
    v17 = (_QWORD *)(a1 + 168);
    v18 = (_QWORD *)(a1 + 168);
    if (!*v14)
      goto LABEL_24;
    v17 = (_QWORD *)(a1 + 168);
    while (1)
    {
      while (1)
      {
        v18 = v16;
        v19 = v16 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a2, (void **)v16 + 4) & 0x80) == 0)break;
        v16 = (_QWORD *)*v18;
        v17 = v18;
        if (!*v18)
          goto LABEL_24;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v19, (void **)a2) & 0x80) == 0)
        break;
      v17 = v18 + 1;
      v16 = (_QWORD *)v18[1];
      if (!v16)
        goto LABEL_24;
    }
    v20 = (_QWORD *)*v17;
    if (!*v17)
    {
LABEL_24:
      v34 = 0;
      v21 = operator new(0x68uLL);
      v33[0] = v21;
      v33[1] = (void *)(a1 + 168);
      v22 = (std::string *)(v21 + 4);
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v21[6] = *(_QWORD *)(a2 + 16);
      }
      *(_OWORD *)(v21 + 11) = 0u;
      *(_OWORD *)(v21 + 9) = 0u;
      *(_OWORD *)(v21 + 7) = 0u;
      LOBYTE(v34) = 1;
      *v21 = 0;
      v21[1] = 0;
      v21[2] = v18;
      *v17 = v21;
      v23 = (_QWORD *)**v13;
      if (v23)
      {
        *v13 = v23;
        v21 = (_QWORD *)*v17;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 168), v21);
      ++*(_QWORD *)(a1 + 176);
      v20 = v33[0];
      v33[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v33);
    }
    std::string::operator=((std::string *)(v20 + 7), (const std::string *)__str);
    if (v20 + 10 != (_QWORD *)&__str[24])
      ims::Dispatch::reset((NSObject **)v20 + 10, *(dispatch_object_t *)&__str[24]);
    v25 = v32[0];
    v24 = v32[1];
    if (v32[1])
    {
      v26 = &v32[1]->__shared_weak_owners_;
      do
        v27 = __ldxr((unint64_t *)v26);
      while (__stxr(v27 + 1, (unint64_t *)v26));
    }
    v28 = (std::__shared_weak_count *)v20[12];
    v20[11] = v25;
    v20[12] = v24;
    if (v28)
      std::__shared_weak_count::__release_weak(v28);
    if (v32[1])
      std::__shared_weak_count::__release_weak(v32[1]);
    if (*(_QWORD *)&__str[24])
      dispatch_release(*(dispatch_object_t *)&__str[24]);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
  }
}

void sub_1BF07BDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
  DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>::~DelegateRecord((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::removeCallDelegate(uint64_t a1, void **a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;

  v3 = (uint64_t **)(a1 + 136);
  v4 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 136, a2);
  if ((uint64_t *)(a1 + 144) != v4)
  {
    v5 = v4;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v3, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,0>((uint64_t)(v5 + 4));
    operator delete(v5);
  }
}

void IMSWrapperDelegate::removeStackDelegate(uint64_t a1, void **a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;

  v3 = (uint64_t **)(a1 + 64);
  v4 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 64, a2);
  if ((uint64_t *)(a1 + 72) != v4)
  {
    v5 = v4;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v3, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,0>((uint64_t)(v5 + 4));
    operator delete(v5);
  }
}

void IMSWrapperDelegate::removeCallManagerDelegate(uint64_t a1, void **a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;

  v3 = (uint64_t **)(a1 + 88);
  v4 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 88, a2);
  if ((uint64_t *)(a1 + 96) != v4)
  {
    v5 = v4;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v3, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,0>((uint64_t)(v5 + 4));
    operator delete(v5);
  }
}

void IMSWrapperDelegate::removeMessageDelegate(uint64_t a1, void **a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;

  v3 = (uint64_t **)(a1 + 112);
  v4 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 112, a2);
  if ((uint64_t *)(a1 + 120) != v4)
  {
    v5 = v4;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v3, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,0>((uint64_t)(v5 + 4));
    operator delete(v5);
  }
}

void IMSWrapperDelegate::removeXcapDelegate(uint64_t a1, void **a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;

  v3 = (uint64_t **)(a1 + 160);
  v4 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 160, a2);
  if ((uint64_t *)(a1 + 168) != v4)
  {
    v5 = v4;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v3, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,0>((uint64_t)(v5 + 4));
    operator delete(v5);
  }
}

void IMSWrapperDelegate::dumpState(IMSWrapperDelegate *this, ImsOutStream *a2)
{
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  const void *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  char v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  char *v14;
  BOOL v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  const void *v18;
  unint64_t *v19;
  unint64_t v20;
  char v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  const void *v28;
  unint64_t *v29;
  unint64_t v30;
  char v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  const void *v38;
  unint64_t *v39;
  unint64_t v40;
  char v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  const void *v48;
  unint64_t *v49;
  unint64_t v50;
  char v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  IMSWrapperDelegate *v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  std::__shared_weak_count *v61;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  StackEventDelegates:", 22);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  v4 = (char *)*((_QWORD *)this + 8);
  v56 = this;
  v5 = (char *)this + 72;
  if (v4 != (char *)this + 72)
  {
    while (1)
    {
      v7 = (const void *)*((_QWORD *)v4 + 11);
      v6 = (std::__shared_weak_count *)*((_QWORD *)v4 + 12);
      if (v6)
      {
        p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    ", 4);
      *((_BYTE *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, _QWORD *))(*(_QWORD *)a2 + 32))(a2, (_QWORD *)v4 + 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" (", 2);
      *((_BYTE *)a2 + 17) = 0;
      if (!v6 || v6->__shared_owners_ == -1)
      {
        v10 = 1;
      }
      else
      {
        v61 = std::__shared_weak_count::lock(v6);
        if (v61)
          v10 = v7
        else
          v10 = 0;
      }
      std::ostream::operator<<();
      *((_BYTE *)a2 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)")", 1);
      *((_BYTE *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((_BYTE *)a2 + 17) = 0;
      if ((v10 & 1) == 0)
      {
        if (v61)
        {
          p_shared_owners = (unint64_t *)&v61->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
            break;
        }
      }
      if (v6)
        goto LABEL_18;
LABEL_19:
      v13 = (char *)*((_QWORD *)v4 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (char *)*((_QWORD *)v4 + 2);
          v15 = *(_QWORD *)v14 == (_QWORD)v4;
          v4 = v14;
        }
        while (!v15);
      }
      v4 = v14;
      if (v14 == v5)
        goto LABEL_30;
    }
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
    if (!v6)
      goto LABEL_19;
LABEL_18:
    std::__shared_weak_count::__release_weak(v6);
    goto LABEL_19;
  }
LABEL_30:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  CallManagerEventDelegates:", 28);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  v16 = (_QWORD *)*((_QWORD *)v56 + 11);
  if (v16 != (_QWORD *)((char *)v56 + 96))
  {
    while (1)
    {
      v18 = (const void *)v16[11];
      v17 = (std::__shared_weak_count *)v16[12];
      if (v17)
      {
        v19 = (unint64_t *)&v17->__shared_weak_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    ", 4);
      *((_BYTE *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, _QWORD *))(*(_QWORD *)a2 + 32))(a2, v16 + 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" (", 2);
      *((_BYTE *)a2 + 17) = 0;
      if (!v17 || v17->__shared_owners_ == -1)
      {
        v21 = 1;
      }
      else
      {
        v60 = std::__shared_weak_count::lock(v17);
        if (v60)
          v21 = v18
        else
          v21 = 0;
      }
      std::ostream::operator<<();
      *((_BYTE *)a2 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)")", 1);
      *((_BYTE *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((_BYTE *)a2 + 17) = 0;
      if ((v21 & 1) == 0)
      {
        if (v60)
        {
          v22 = (unint64_t *)&v60->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
            break;
        }
      }
      if (v17)
        goto LABEL_47;
LABEL_48:
      v24 = (_QWORD *)v16[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v16[2];
          v15 = *v25 == (_QWORD)v16;
          v16 = v25;
        }
        while (!v15);
      }
      v16 = v25;
      if (v25 == (_QWORD *)((char *)v56 + 96))
        goto LABEL_59;
    }
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
    if (!v17)
      goto LABEL_48;
LABEL_47:
    std::__shared_weak_count::__release_weak(v17);
    goto LABEL_48;
  }
LABEL_59:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  MessageEventDelegates:", 24);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  v26 = (_QWORD *)*((_QWORD *)v56 + 14);
  if (v26 != (_QWORD *)((char *)v56 + 120))
  {
    while (1)
    {
      v28 = (const void *)v26[11];
      v27 = (std::__shared_weak_count *)v26[12];
      if (v27)
      {
        v29 = (unint64_t *)&v27->__shared_weak_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    ", 4);
      *((_BYTE *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, _QWORD *))(*(_QWORD *)a2 + 32))(a2, v26 + 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" (", 2);
      *((_BYTE *)a2 + 17) = 0;
      if (!v27 || v27->__shared_owners_ == -1)
      {
        v31 = 1;
      }
      else
      {
        v59 = std::__shared_weak_count::lock(v27);
        if (v59)
          v31 = v28
        else
          v31 = 0;
      }
      std::ostream::operator<<();
      *((_BYTE *)a2 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)")", 1);
      *((_BYTE *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((_BYTE *)a2 + 17) = 0;
      if ((v31 & 1) == 0)
      {
        if (v59)
        {
          v32 = (unint64_t *)&v59->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
            break;
        }
      }
      if (v27)
        goto LABEL_76;
LABEL_77:
      v34 = (_QWORD *)v26[1];
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (_QWORD *)v26[2];
          v15 = *v35 == (_QWORD)v26;
          v26 = v35;
        }
        while (!v15);
      }
      v26 = v35;
      if (v35 == (_QWORD *)((char *)v56 + 120))
        goto LABEL_88;
    }
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
    if (!v27)
      goto LABEL_77;
LABEL_76:
    std::__shared_weak_count::__release_weak(v27);
    goto LABEL_77;
  }
LABEL_88:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  CallEventDelegates:", 21);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  v36 = (_QWORD *)*((_QWORD *)v56 + 17);
  if (v36 != (_QWORD *)((char *)v56 + 144))
  {
    while (1)
    {
      v38 = (const void *)v36[11];
      v37 = (std::__shared_weak_count *)v36[12];
      if (v37)
      {
        v39 = (unint64_t *)&v37->__shared_weak_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    ", 4);
      *((_BYTE *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, _QWORD *))(*(_QWORD *)a2 + 32))(a2, v36 + 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" (", 2);
      *((_BYTE *)a2 + 17) = 0;
      if (!v37 || v37->__shared_owners_ == -1)
      {
        v41 = 1;
      }
      else
      {
        v58 = std::__shared_weak_count::lock(v37);
        if (v58)
          v41 = v38
        else
          v41 = 0;
      }
      std::ostream::operator<<();
      *((_BYTE *)a2 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)")", 1);
      *((_BYTE *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((_BYTE *)a2 + 17) = 0;
      if ((v41 & 1) == 0)
      {
        if (v58)
        {
          v42 = (unint64_t *)&v58->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
            break;
        }
      }
      if (v37)
        goto LABEL_105;
LABEL_106:
      v44 = (_QWORD *)v36[1];
      if (v44)
      {
        do
        {
          v45 = v44;
          v44 = (_QWORD *)*v44;
        }
        while (v44);
      }
      else
      {
        do
        {
          v45 = (_QWORD *)v36[2];
          v15 = *v45 == (_QWORD)v36;
          v36 = v45;
        }
        while (!v15);
      }
      v36 = v45;
      if (v45 == (_QWORD *)((char *)v56 + 144))
        goto LABEL_117;
    }
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
    if (!v37)
      goto LABEL_106;
LABEL_105:
    std::__shared_weak_count::__release_weak(v37);
    goto LABEL_106;
  }
LABEL_117:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  XCAPEventDelegates:", 21);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  v46 = (_QWORD *)*((_QWORD *)v56 + 20);
  if (v46 != (_QWORD *)((char *)v56 + 168))
  {
    while (1)
    {
      v48 = (const void *)v46[11];
      v47 = (std::__shared_weak_count *)v46[12];
      if (v47)
      {
        v49 = (unint64_t *)&v47->__shared_weak_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    ", 4);
      *((_BYTE *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, _QWORD *))(*(_QWORD *)a2 + 32))(a2, v46 + 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" (", 2);
      *((_BYTE *)a2 + 17) = 0;
      if (!v47 || v47->__shared_owners_ == -1)
      {
        v51 = 1;
      }
      else
      {
        v57 = std::__shared_weak_count::lock(v47);
        if (v57)
          v51 = v48
        else
          v51 = 0;
      }
      std::ostream::operator<<();
      *((_BYTE *)a2 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)")", 1);
      *((_BYTE *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((_BYTE *)a2 + 17) = 0;
      if ((v51 & 1) == 0)
      {
        if (v57)
        {
          v52 = (unint64_t *)&v57->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
            break;
        }
      }
      if (v47)
        goto LABEL_134;
LABEL_135:
      v54 = (_QWORD *)v46[1];
      if (v54)
      {
        do
        {
          v55 = v54;
          v54 = (_QWORD *)*v54;
        }
        while (v54);
      }
      else
      {
        do
        {
          v55 = (_QWORD *)v46[2];
          v15 = *v55 == (_QWORD)v46;
          v46 = v55;
        }
        while (!v15);
      }
      v46 = v55;
      if (v55 == (_QWORD *)((char *)v56 + 168))
        return;
    }
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
    if (!v47)
      goto LABEL_135;
LABEL_134:
    std::__shared_weak_count::__release_weak(v47);
    goto LABEL_135;
  }
}

void sub_1BF07CA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  std::__shared_weak_count *v19;

  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  _Unwind_Resume(exception_object);
}

void IMSWrapperDelegate::handleDisconnectEvent(uint64_t a1, uint64_t a2, uint64_t a3, __int16 *a4)
{
  std::string *v7;
  _QWORD *v8;
  uint64_t v9;
  std::string *v10;
  NSObject *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  _QWORD block[2];
  void (*v22)(uint64_t);
  void *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::string v26;
  std::string v27;
  __int16 v28;
  char v29;
  std::string v30;
  int v31;
  char v32;
  std::string v33;
  std::string v34;
  void *__p[2];
  char v36;
  void *v37[2];
  char v38;
  __int16 v39;
  char v40;
  _BYTE v41[85];
  std::string v42;
  std::string v43;

  memset(&v43, 0, sizeof(v43));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v43 = *(std::string *)a2;
  memset(&v42, 0, sizeof(v42));
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v42 = *(std::string *)a3;
  memset(v41, 0, sizeof(v41));
  v39 = *a4;
  v40 = *((_BYTE *)a4 + 2);
  if (*((char *)a4 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v41[5], *((const std::string::value_type **)a4 + 1), *((_QWORD *)a4 + 2));
  }
  else
  {
    *(_OWORD *)&v41[5] = *(_OWORD *)(a4 + 4);
    *(_QWORD *)&v41[21] = *((_QWORD *)a4 + 3);
  }
  *(_DWORD *)&v41[29] = *((_DWORD *)a4 + 8);
  v41[33] = *((_BYTE *)a4 + 36);
  v7 = (std::string *)&v41[37];
  if (*((char *)a4 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v41[37], *((const std::string::value_type **)a4 + 5), *((_QWORD *)a4 + 6));
  }
  else
  {
    *(_OWORD *)&v41[37] = *(_OWORD *)(a4 + 20);
    *(_QWORD *)&v41[53] = *((_QWORD *)a4 + 7);
  }
  if (*((char *)a4 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v41[61], *((const std::string::value_type **)a4 + 8), *((_QWORD *)a4 + 9));
  }
  else
  {
    *(_OWORD *)&v41[61] = *((_OWORD *)a4 + 4);
    *(_QWORD *)&v41[77] = *((_QWORD *)a4 + 10);
  }
  v8 = *(_QWORD **)(a1 + 136);
  v20 = (_QWORD *)(a1 + 144);
  if (v8 != (_QWORD *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v9 = ImsLogger::debug(ims::_logger, (uint64_t)v37, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Dispatching handleDisconnectEvent callback for ", 47);
      *(_BYTE *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 32))(v9, v8 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v9 + 17) = 0;
      if (v36 < 0)
        operator delete(__p[0]);
      v10 = v7;
      if (v38 < 0)
        operator delete(v37[0]);
      v11 = v8[10];
      if (v11)
        dispatch_retain((dispatch_object_t)v8[10]);
      v12 = v8[11];
      v13 = (std::__shared_weak_count *)v8[12];
      if (v13)
      {
        p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
        do
          v15 = __ldxr(p_shared_weak_owners);
        while (__stxr(v15 + 1, p_shared_weak_owners));
        v22 = ___ZN18IMSWrapperDelegate21handleDisconnectEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_RKN3ims14DisconnectInfoE_block_invoke;
        v23 = &__block_descriptor_tmp_31;
        v24 = v12;
        v25 = v13;
        do
          v16 = __ldxr(p_shared_weak_owners);
        while (__stxr(v16 + 1, p_shared_weak_owners));
      }
      else
      {
        v22 = ___ZN18IMSWrapperDelegate21handleDisconnectEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_RKN3ims14DisconnectInfoE_block_invoke;
        v23 = &__block_descriptor_tmp_31;
        v24 = v12;
        v25 = 0;
      }
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 1174405120;
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v26, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
      else
        v26 = v43;
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v27, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
      else
        v27 = v42;
      v28 = v39;
      v29 = v40;
      if ((v41[28] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)&v41[5], *(std::string::size_type *)&v41[13]);
      else
        v30 = *(std::string *)&v41[5];
      v31 = *(_DWORD *)&v41[29];
      v32 = v41[33];
      if ((v41[60] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)&v41[37], *(std::string::size_type *)&v41[45]);
      else
        v33 = *v10;
      if ((v41[84] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)&v41[61], *(std::string::size_type *)&v41[69]);
      else
        v34 = *(std::string *)&v41[61];
      if (v11)
        dispatch_async(v11, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (v25)
        std::__shared_weak_count::__release_weak(v25);
      if (v13)
        std::__shared_weak_count::__release_weak(v13);
      if (v11)
        dispatch_release(v11);
      v17 = (_QWORD *)v8[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v8[2];
          v19 = *v18 == (_QWORD)v8;
          v8 = v18;
        }
        while (!v19);
      }
      v8 = v18;
      v7 = v10;
    }
    while (v18 != v20);
  }
  if ((v41[84] & 0x80000000) != 0)
    operator delete(*(void **)&v41[61]);
  if ((v41[60] & 0x80000000) != 0)
    operator delete(*(void **)&v41[37]);
  if ((v41[28] & 0x80000000) != 0)
    operator delete(*(void **)&v41[5]);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
}

void sub_1BF07D050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;

  if (a57 < 0)
    operator delete(__p);
  if (a50 < 0)
    operator delete(a45);
  if (*(char *)(v57 - 153) < 0)
    operator delete(*(void **)(v57 - 176));
  if (*(char *)(v57 - 121) < 0)
    operator delete(*(void **)(v57 - 144));
  _Unwind_Resume(a1);
}

void ___ZN18IMSWrapperDelegate21handleDisconnectEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_RKN3ims14DisconnectInfoE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a1 + 48, a1 + 72, a1 + 96);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF07D26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN3ims17CallEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c26_ZTSN3ims14DisconnectInfoE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  int v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;

  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v7;
  }
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 72), *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v8;
  }
  v9 = *(_WORD *)(a2 + 96);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  *(_WORD *)(a1 + 96) = v9;
  if (*(char *)(a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 104), *(const std::string::value_type **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v10;
  }
  v11 = *(_DWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 132) = *(_BYTE *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = v11;
  if (*(char *)(a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 136), *(const std::string::value_type **)(a2 + 136), *(_QWORD *)(a2 + 144));
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = v12;
  }
  v13 = (std::string *)(a1 + 160);
  if (*(char *)(a2 + 183) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)(a2 + 160), *(_QWORD *)(a2 + 168));
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
}

void sub_1BF07D3DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  std::__shared_weak_count *v7;

  if (*(char *)(v1 + 159) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 127) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  v7 = *(std::__shared_weak_count **)(v1 + 40);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN3ims17CallEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c26_ZTSN3ims14DisconnectInfoE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void IMSWrapperDelegate::handleEmergencySessionRequired(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD block[2];
  void (*v19)(uint64_t);
  void *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string v23;
  std::string v24;
  char v25;
  void *__p[2];
  char v27;
  void *v28[2];
  char v29;
  std::string v30;
  std::string v31;

  memset(&v31, 0, sizeof(v31));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v31 = *(std::string *)a2;
  memset(&v30, 0, sizeof(v30));
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v30 = *(std::string *)a3;
  v7 = *(_QWORD **)(a1 + 136);
  if (v7 != (_QWORD *)(a1 + 144))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v28, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::debug(ims::_logger, (uint64_t)v28, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Dispatching handleEmergencySessionRequired callback for ", 56);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 32))(v8, v7 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (v27 < 0)
        operator delete(__p[0]);
      if (v29 < 0)
        operator delete(v28[0]);
      v9 = v7[10];
      if (v9)
        dispatch_retain((dispatch_object_t)v7[10]);
      v10 = v7[11];
      v11 = (std::__shared_weak_count *)v7[12];
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
        v19 = ___ZN18IMSWrapperDelegate30handleEmergencySessionRequiredERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_b_block_invoke;
        v20 = &__block_descriptor_tmp_18_3;
        v21 = v10;
        v22 = v11;
        do
          v14 = __ldxr(p_shared_weak_owners);
        while (__stxr(v14 + 1, p_shared_weak_owners));
      }
      else
      {
        v19 = ___ZN18IMSWrapperDelegate30handleEmergencySessionRequiredERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_b_block_invoke;
        v20 = &__block_descriptor_tmp_18_3;
        v21 = v10;
        v22 = 0;
      }
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 1174405120;
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v23, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
      else
        v23 = v31;
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v24, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
      else
        v24 = v30;
      v25 = a4;
      if (v9)
        dispatch_async(v9, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (v22)
        std::__shared_weak_count::__release_weak(v22);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      if (v9)
        dispatch_release(v9);
      v15 = (_QWORD *)v7[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v7[2];
          v17 = *v16 == (_QWORD)v7;
          v7 = v16;
        }
        while (!v17);
      }
      v7 = v16;
    }
    while (v16 != (_QWORD *)(a1 + 144));
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
}

void sub_1BF07D7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (*(char *)(v46 - 121) < 0)
    operator delete(*(void **)(v46 - 144));
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate30handleEmergencySessionRequiredERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_b_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 24))(v5, a1 + 48, a1 + 72, *(unsigned __int8 *)(a1 + 96));
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF07D98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN3ims17CallEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;

  v4 = *(_QWORD *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 32);
  a1[1].__r_.__value_.__r.__words[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 2, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&a1[2].__r_.__value_.__l.__data_ = v7;
  }
  v8 = a1 + 3;
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 88);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
}

void sub_1BF07DA44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  std::__shared_weak_count *v4;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  v4 = *(std::__shared_weak_count **)(v1 + 40);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN3ims17CallEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void IMSWrapperDelegate::handleActiveEvent(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD block[2];
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::string v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  std::string v25;

  memset(&v25, 0, sizeof(v25));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  v3 = *(_QWORD **)(a1 + 136);
  if (v3 != (_QWORD *)(a1 + 144))
  {
    v4 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v23, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Dispatching handleActiveEvent callback for ", 43);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, v3 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v22 < 0)
        operator delete(__p[0]);
      if (v24 < 0)
        operator delete(v23[0]);
      v6 = v3[10];
      if (v6)
        dispatch_retain((dispatch_object_t)v3[10]);
      v7 = v3[11];
      v8 = (std::__shared_weak_count *)v3[12];
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        v16 = ___ZN18IMSWrapperDelegate17handleActiveEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_20_0;
        v18 = v7;
        v19 = v8;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      else
      {
        v16 = ___ZN18IMSWrapperDelegate17handleActiveEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_20_0;
        v18 = v7;
        v19 = 0;
      }
      block[0] = v4;
      block[1] = 1174405120;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v20, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
      else
        v20 = v25;
      if (v6)
        dispatch_async(v6, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      if (v6)
        dispatch_release(v6);
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 144));
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_1BF07DD50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  NSObject *v39;
  std::__shared_weak_count *v40;

  if (a21 < 0)
    operator delete(__p);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate17handleActiveEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t))(*(_QWORD *)v5 + 32))(v5, a1 + 48);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF07DEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN3ims17CallEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v3;
  unint64_t *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 32);
  a1[1].__r_.__value_.__r.__words[2] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1BF07DF34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN3ims17CallEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void IMSWrapperDelegate::handleInactiveEvent(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD block[2];
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::string v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  std::string v25;

  memset(&v25, 0, sizeof(v25));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  v3 = *(_QWORD **)(a1 + 136);
  if (v3 != (_QWORD *)(a1 + 144))
  {
    v4 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v23, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Dispatching handleInactiveEvent callback for ", 45);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, v3 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v22 < 0)
        operator delete(__p[0]);
      if (v24 < 0)
        operator delete(v23[0]);
      v6 = v3[10];
      if (v6)
        dispatch_retain((dispatch_object_t)v3[10]);
      v7 = v3[11];
      v8 = (std::__shared_weak_count *)v3[12];
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        v16 = ___ZN18IMSWrapperDelegate19handleInactiveEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_22_0;
        v18 = v7;
        v19 = v8;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      else
      {
        v16 = ___ZN18IMSWrapperDelegate19handleInactiveEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_22_0;
        v18 = v7;
        v19 = 0;
      }
      block[0] = v4;
      block[1] = 1174405120;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v20, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
      else
        v20 = v25;
      if (v6)
        dispatch_async(v6, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      if (v6)
        dispatch_release(v6);
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 144));
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_1BF07E218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  NSObject *v39;
  std::__shared_weak_count *v40;

  if (a21 < 0)
    operator delete(__p);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate19handleInactiveEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t))(*(_QWORD *)v5 + 40))(v5, a1 + 48);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF07E37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleTryingEvent(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD block[2];
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::string v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  std::string v25;

  memset(&v25, 0, sizeof(v25));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  v3 = *(_QWORD **)(a1 + 136);
  if (v3 != (_QWORD *)(a1 + 144))
  {
    v4 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v23, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Dispatching handleTryingEvent callback for ", 43);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, v3 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v22 < 0)
        operator delete(__p[0]);
      if (v24 < 0)
        operator delete(v23[0]);
      v6 = v3[10];
      if (v6)
        dispatch_retain((dispatch_object_t)v3[10]);
      v7 = v3[11];
      v8 = (std::__shared_weak_count *)v3[12];
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        v16 = ___ZN18IMSWrapperDelegate17handleTryingEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_24_1;
        v18 = v7;
        v19 = v8;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      else
      {
        v16 = ___ZN18IMSWrapperDelegate17handleTryingEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_24_1;
        v18 = v7;
        v19 = 0;
      }
      block[0] = v4;
      block[1] = 1174405120;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v20, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
      else
        v20 = v25;
      if (v6)
        dispatch_async(v6, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      if (v6)
        dispatch_release(v6);
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 144));
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_1BF07E61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  NSObject *v39;
  std::__shared_weak_count *v40;

  if (a21 < 0)
    operator delete(__p);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate17handleTryingEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t))(*(_QWORD *)v5 + 48))(v5, a1 + 48);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF07E780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleRingingEvent(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD block[2];
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::string v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  std::string v25;

  memset(&v25, 0, sizeof(v25));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  v3 = *(_QWORD **)(a1 + 136);
  if (v3 != (_QWORD *)(a1 + 144))
  {
    v4 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v23, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Dispatching handleRingingEvent callback for ", 44);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, v3 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v22 < 0)
        operator delete(__p[0]);
      if (v24 < 0)
        operator delete(v23[0]);
      v6 = v3[10];
      if (v6)
        dispatch_retain((dispatch_object_t)v3[10]);
      v7 = v3[11];
      v8 = (std::__shared_weak_count *)v3[12];
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        v16 = ___ZN18IMSWrapperDelegate18handleRingingEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_26_2;
        v18 = v7;
        v19 = v8;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      else
      {
        v16 = ___ZN18IMSWrapperDelegate18handleRingingEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_26_2;
        v18 = v7;
        v19 = 0;
      }
      block[0] = v4;
      block[1] = 1174405120;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v20, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
      else
        v20 = v25;
      if (v6)
        dispatch_async(v6, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      if (v6)
        dispatch_release(v6);
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 144));
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_1BF07EA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  NSObject *v39;
  std::__shared_weak_count *v40;

  if (a21 < 0)
    operator delete(__p);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate18handleRingingEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t))(*(_QWORD *)v5 + 56))(v5, a1 + 48);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF07EB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleJoinedEvent(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD block[2];
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::string v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  std::string v25;

  memset(&v25, 0, sizeof(v25));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  v3 = *(_QWORD **)(a1 + 136);
  if (v3 != (_QWORD *)(a1 + 144))
  {
    v4 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v23, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Dispatching handleJoinedEvent callback for ", 43);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, v3 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v22 < 0)
        operator delete(__p[0]);
      if (v24 < 0)
        operator delete(v23[0]);
      v6 = v3[10];
      if (v6)
        dispatch_retain((dispatch_object_t)v3[10]);
      v7 = v3[11];
      v8 = (std::__shared_weak_count *)v3[12];
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        v16 = ___ZN18IMSWrapperDelegate17handleJoinedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_28_2;
        v18 = v7;
        v19 = v8;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      else
      {
        v16 = ___ZN18IMSWrapperDelegate17handleJoinedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_28_2;
        v18 = v7;
        v19 = 0;
      }
      block[0] = v4;
      block[1] = 1174405120;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v20, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
      else
        v20 = v25;
      if (v6)
        dispatch_async(v6, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      if (v6)
        dispatch_release(v6);
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 144));
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_1BF07EE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  NSObject *v39;
  std::__shared_weak_count *v40;

  if (a21 < 0)
    operator delete(__p);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate17handleJoinedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t))(*(_QWORD *)v5 + 64))(v5, a1 + 48);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF07EF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleInProgressEvent(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD block[2];
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::string v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  std::string v25;

  memset(&v25, 0, sizeof(v25));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  v3 = *(_QWORD **)(a1 + 136);
  if (v3 != (_QWORD *)(a1 + 144))
  {
    v4 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v23, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Dispatching handleInProgressEvent callback for ", 47);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, v3 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v22 < 0)
        operator delete(__p[0]);
      if (v24 < 0)
        operator delete(v23[0]);
      v6 = v3[10];
      if (v6)
        dispatch_retain((dispatch_object_t)v3[10]);
      v7 = v3[11];
      v8 = (std::__shared_weak_count *)v3[12];
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        v16 = ___ZN18IMSWrapperDelegate21handleInProgressEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_30;
        v18 = v7;
        v19 = v8;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      else
      {
        v16 = ___ZN18IMSWrapperDelegate21handleInProgressEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_30;
        v18 = v7;
        v19 = 0;
      }
      block[0] = v4;
      block[1] = 1174405120;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v20, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
      else
        v20 = v25;
      if (v6)
        dispatch_async(v6, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      if (v6)
        dispatch_release(v6);
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 144));
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_1BF07F228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  NSObject *v39;
  std::__shared_weak_count *v40;

  if (a21 < 0)
    operator delete(__p);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate21handleInProgressEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t))(*(_QWORD *)v5 + 72))(v5, a1 + 48);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF07F38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleProceedingEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD v17[2];
  void (*v18)(uint64_t);
  void *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::string v22;
  std::string v23;
  void *__p[2];
  char v25;
  void *v26[2];
  char v27;
  std::string v28;
  std::string v29;

  memset(&v29, 0, sizeof(v29));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v29 = *(std::string *)a2;
  memset(&v28, 0, sizeof(v28));
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v28 = *(std::string *)a3;
  v5 = *(_QWORD **)(a1 + 136);
  if (v5 != (_QWORD *)(a1 + 144))
  {
    v6 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v26, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v7 = ImsLogger::debug(ims::_logger, (uint64_t)v26, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Dispatching handleProceedingEvent callback for ", 47);
      *(_BYTE *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 32))(v7, v5 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v7 + 17) = 0;
      if (v25 < 0)
        operator delete(__p[0]);
      if (v27 < 0)
        operator delete(v26[0]);
      v8 = v5[10];
      if (v8)
        dispatch_retain((dispatch_object_t)v5[10]);
      v9 = v5[11];
      v10 = (std::__shared_weak_count *)v5[12];
      if (v10)
      {
        p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
        do
          v12 = __ldxr(p_shared_weak_owners);
        while (__stxr(v12 + 1, p_shared_weak_owners));
        v18 = ___ZN18IMSWrapperDelegate21handleProceedingEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8__block_invoke;
        v19 = &__block_descriptor_tmp_32_2;
        v20 = v9;
        v21 = v10;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
      }
      else
      {
        v18 = ___ZN18IMSWrapperDelegate21handleProceedingEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8__block_invoke;
        v19 = &__block_descriptor_tmp_32_2;
        v20 = v9;
        v21 = 0;
      }
      v17[0] = v6;
      v17[1] = 1174405120;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v22, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
      else
        v22 = v29;
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v23, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
      else
        v23 = v28;
      if (v8)
        dispatch_async(v8, v17);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)v17);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      if (v21)
        std::__shared_weak_count::__release_weak(v21);
      if (v10)
        std::__shared_weak_count::__release_weak(v10);
      if (v8)
        dispatch_release(v8);
      v14 = (_QWORD *)v5[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v5[2];
          v16 = *v15 == (_QWORD)v5;
          v5 = v15;
        }
        while (!v16);
      }
      v5 = v15;
    }
    while (v15 != (_QWORD *)(a1 + 144));
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_1BF07F6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  if (*(char *)(v44 - 105) < 0)
    operator delete(*(void **)(v44 - 128));
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate21handleProceedingEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8__block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, a1 + 48, a1 + 72);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF07F840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleMediaStatusEvent(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD v18[2];
  void (*v19)(uint64_t);
  void *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string v23;
  char v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  std::string v29;

  memset(&v29, 0, sizeof(v29));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v29 = *(std::string *)a2;
  v5 = *(_QWORD **)(a1 + 136);
  v6 = (_QWORD *)(a1 + 144);
  if (v5 != v6)
  {
    v7 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::debug(ims::_logger, (uint64_t)v27, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Dispatching handleMediaStatusEvent callback for ", 48);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 32))(v8, v5 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (v26 < 0)
        operator delete(__p[0]);
      if (v28 < 0)
        operator delete(v27[0]);
      v9 = v5[10];
      if (v9)
        dispatch_retain((dispatch_object_t)v5[10]);
      v10 = v5[11];
      v11 = (std::__shared_weak_count *)v5[12];
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
        v19 = ___ZN18IMSWrapperDelegate22handleMediaStatusEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke;
        v20 = &__block_descriptor_tmp_34_0;
        v21 = v10;
        v22 = v11;
        do
          v14 = __ldxr(p_shared_weak_owners);
        while (__stxr(v14 + 1, p_shared_weak_owners));
      }
      else
      {
        v19 = ___ZN18IMSWrapperDelegate22handleMediaStatusEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke;
        v20 = &__block_descriptor_tmp_34_0;
        v21 = v10;
        v22 = 0;
      }
      v18[0] = v7;
      v18[1] = 1174405120;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v23, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
      else
        v23 = v29;
      v24 = a3;
      if (v9)
        dispatch_async(v9, v18);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)v18);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (v22)
        std::__shared_weak_count::__release_weak(v22);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      if (v9)
        dispatch_release(v9);
      v15 = (_QWORD *)v5[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v5[2];
          v17 = *v16 == (_QWORD)v5;
          v5 = v16;
        }
        while (!v17);
      }
      v5 = v16;
    }
    while (v16 != v6);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_1BF07FAE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  NSObject *v39;
  std::__shared_weak_count *v40;

  if (a20 < 0)
    operator delete(__p);
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate22handleMediaStatusEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t, _QWORD))(*(_QWORD *)v5 + 88))(v5, a1 + 48, *(unsigned __int8 *)(a1 + 72));
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF07FC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleRingbackToneEvent(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD v18[2];
  void (*v19)(uint64_t);
  void *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string v23;
  char v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  std::string v29;

  memset(&v29, 0, sizeof(v29));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v29 = *(std::string *)a2;
  v5 = *(_QWORD **)(a1 + 136);
  v6 = (_QWORD *)(a1 + 144);
  if (v5 != v6)
  {
    v7 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::debug(ims::_logger, (uint64_t)v27, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Dispatching handleRingbackToneEvent callback for ", 49);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 32))(v8, v5 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (v26 < 0)
        operator delete(__p[0]);
      if (v28 < 0)
        operator delete(v27[0]);
      v9 = v5[10];
      if (v9)
        dispatch_retain((dispatch_object_t)v5[10]);
      v10 = v5[11];
      v11 = (std::__shared_weak_count *)v5[12];
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
        v19 = ___ZN18IMSWrapperDelegate23handleRingbackToneEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke;
        v20 = &__block_descriptor_tmp_36_0;
        v21 = v10;
        v22 = v11;
        do
          v14 = __ldxr(p_shared_weak_owners);
        while (__stxr(v14 + 1, p_shared_weak_owners));
      }
      else
      {
        v19 = ___ZN18IMSWrapperDelegate23handleRingbackToneEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke;
        v20 = &__block_descriptor_tmp_36_0;
        v21 = v10;
        v22 = 0;
      }
      v18[0] = v7;
      v18[1] = 1174405120;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v23, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
      else
        v23 = v29;
      v24 = a3;
      if (v9)
        dispatch_async(v9, v18);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)v18);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (v22)
        std::__shared_weak_count::__release_weak(v22);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      if (v9)
        dispatch_release(v9);
      v15 = (_QWORD *)v5[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v5[2];
          v17 = *v16 == (_QWORD)v5;
          v5 = v16;
        }
        while (!v17);
      }
      v5 = v16;
    }
    while (v16 != v6);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_1BF07FEF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  NSObject *v39;
  std::__shared_weak_count *v40;

  if (a20 < 0)
    operator delete(__p);
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate23handleRingbackToneEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t, _QWORD))(*(_QWORD *)v5 + 96))(v5, a1 + 48, *(unsigned __int8 *)(a1 + 72));
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF080058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleHoldFailed(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD block[2];
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::string v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  std::string v25;

  memset(&v25, 0, sizeof(v25));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  v3 = *(_QWORD **)(a1 + 136);
  if (v3 != (_QWORD *)(a1 + 144))
  {
    v4 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v23, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Dispatching handleHoldFailed callback for ", 42);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, v3 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v22 < 0)
        operator delete(__p[0]);
      if (v24 < 0)
        operator delete(v23[0]);
      v6 = v3[10];
      if (v6)
        dispatch_retain((dispatch_object_t)v3[10]);
      v7 = v3[11];
      v8 = (std::__shared_weak_count *)v3[12];
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        v16 = ___ZN18IMSWrapperDelegate16handleHoldFailedERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_38_1;
        v18 = v7;
        v19 = v8;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      else
      {
        v16 = ___ZN18IMSWrapperDelegate16handleHoldFailedERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_38_1;
        v18 = v7;
        v19 = 0;
      }
      block[0] = v4;
      block[1] = 1174405120;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v20, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
      else
        v20 = v25;
      if (v6)
        dispatch_async(v6, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      if (v6)
        dispatch_release(v6);
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 144));
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_1BF0802F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  NSObject *v39;
  std::__shared_weak_count *v40;

  if (a21 < 0)
    operator delete(__p);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate16handleHoldFailedERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t))(*(_QWORD *)v5 + 104))(v5, a1 + 48);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF08045C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleResumeFailed(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD block[2];
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::string v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  std::string v25;

  memset(&v25, 0, sizeof(v25));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  v3 = *(_QWORD **)(a1 + 136);
  if (v3 != (_QWORD *)(a1 + 144))
  {
    v4 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v23, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Dispatching handleResumeFailed callback for ", 44);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, v3 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v22 < 0)
        operator delete(__p[0]);
      if (v24 < 0)
        operator delete(v23[0]);
      v6 = v3[10];
      if (v6)
        dispatch_retain((dispatch_object_t)v3[10]);
      v7 = v3[11];
      v8 = (std::__shared_weak_count *)v3[12];
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        v16 = ___ZN18IMSWrapperDelegate18handleResumeFailedERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_40_2;
        v18 = v7;
        v19 = v8;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      else
      {
        v16 = ___ZN18IMSWrapperDelegate18handleResumeFailedERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_40_2;
        v18 = v7;
        v19 = 0;
      }
      block[0] = v4;
      block[1] = 1174405120;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v20, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
      else
        v20 = v25;
      if (v6)
        dispatch_async(v6, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      if (v6)
        dispatch_release(v6);
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 144));
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_1BF0806FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  NSObject *v39;
  std::__shared_weak_count *v40;

  if (a21 < 0)
    operator delete(__p);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate18handleResumeFailedERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t))(*(_QWORD *)v5 + 112))(v5, a1 + 48);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF080860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleTextMediaDetectedEvent(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD block[2];
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::string v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  std::string v25;

  memset(&v25, 0, sizeof(v25));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  v3 = *(_QWORD **)(a1 + 136);
  if (v3 != (_QWORD *)(a1 + 144))
  {
    v4 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v23, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Dispatching handleTextMediaDetectedEvent callback for ", 54);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, v3 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v22 < 0)
        operator delete(__p[0]);
      if (v24 < 0)
        operator delete(v23[0]);
      v6 = v3[10];
      if (v6)
        dispatch_retain((dispatch_object_t)v3[10]);
      v7 = v3[11];
      v8 = (std::__shared_weak_count *)v3[12];
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        v16 = ___ZN18IMSWrapperDelegate28handleTextMediaDetectedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_42_2;
        v18 = v7;
        v19 = v8;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      else
      {
        v16 = ___ZN18IMSWrapperDelegate28handleTextMediaDetectedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_42_2;
        v18 = v7;
        v19 = 0;
      }
      block[0] = v4;
      block[1] = 1174405120;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v20, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
      else
        v20 = v25;
      if (v6)
        dispatch_async(v6, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      if (v6)
        dispatch_release(v6);
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 144));
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_1BF080B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  NSObject *v39;
  std::__shared_weak_count *v40;

  if (a21 < 0)
    operator delete(__p);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate28handleTextMediaDetectedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t))(*(_QWORD *)v5 + 120))(v5, a1 + 48);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF080C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleTextMediaDeactivatedEvent(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD block[2];
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::string v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  std::string v25;

  memset(&v25, 0, sizeof(v25));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  v3 = *(_QWORD **)(a1 + 136);
  if (v3 != (_QWORD *)(a1 + 144))
  {
    v4 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v23, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Dispatching handleTextMediaDeactivatedEvent callback for ", 57);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, v3 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v22 < 0)
        operator delete(__p[0]);
      if (v24 < 0)
        operator delete(v23[0]);
      v6 = v3[10];
      if (v6)
        dispatch_retain((dispatch_object_t)v3[10]);
      v7 = v3[11];
      v8 = (std::__shared_weak_count *)v3[12];
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        v16 = ___ZN18IMSWrapperDelegate31handleTextMediaDeactivatedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_44_2;
        v18 = v7;
        v19 = v8;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      else
      {
        v16 = ___ZN18IMSWrapperDelegate31handleTextMediaDeactivatedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_44_2;
        v18 = v7;
        v19 = 0;
      }
      block[0] = v4;
      block[1] = 1174405120;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v20, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
      else
        v20 = v25;
      if (v6)
        dispatch_async(v6, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      if (v6)
        dispatch_release(v6);
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 144));
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_1BF080F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  NSObject *v39;
  std::__shared_weak_count *v40;

  if (a21 < 0)
    operator delete(__p);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate31handleTextMediaDeactivatedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a1 + 48);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF081068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleTextMediaRemoteDirectionEvent(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD v18[2];
  void (*v19)(uint64_t);
  void *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string v23;
  char v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  std::string v29;

  memset(&v29, 0, sizeof(v29));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v29 = *(std::string *)a2;
  v5 = *(_QWORD **)(a1 + 136);
  v6 = (_QWORD *)(a1 + 144);
  if (v5 != v6)
  {
    v7 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::debug(ims::_logger, (uint64_t)v27, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Dispatching handleTextMediaRemoteDirectionEvent callback for ", 61);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 32))(v8, v5 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (v26 < 0)
        operator delete(__p[0]);
      if (v28 < 0)
        operator delete(v27[0]);
      v9 = v5[10];
      if (v9)
        dispatch_retain((dispatch_object_t)v5[10]);
      v10 = v5[11];
      v11 = (std::__shared_weak_count *)v5[12];
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
        v19 = ___ZN18IMSWrapperDelegate35handleTextMediaRemoteDirectionEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke;
        v20 = &__block_descriptor_tmp_46_2;
        v21 = v10;
        v22 = v11;
        do
          v14 = __ldxr(p_shared_weak_owners);
        while (__stxr(v14 + 1, p_shared_weak_owners));
      }
      else
      {
        v19 = ___ZN18IMSWrapperDelegate35handleTextMediaRemoteDirectionEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke;
        v20 = &__block_descriptor_tmp_46_2;
        v21 = v10;
        v22 = 0;
      }
      v18[0] = v7;
      v18[1] = 1174405120;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v23, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
      else
        v23 = v29;
      v24 = a3;
      if (v9)
        dispatch_async(v9, v18);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)v18);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (v22)
        std::__shared_weak_count::__release_weak(v22);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      if (v9)
        dispatch_release(v9);
      v15 = (_QWORD *)v5[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v5[2];
          v17 = *v16 == (_QWORD)v5;
          v5 = v16;
        }
        while (!v17);
      }
      v5 = v16;
    }
    while (v16 != v6);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_1BF08130C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  NSObject *v39;
  std::__shared_weak_count *v40;

  if (a20 < 0)
    operator delete(__p);
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate35handleTextMediaRemoteDirectionEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t, _QWORD))(*(_QWORD *)v5 + 136))(v5, a1 + 48, *(unsigned __int8 *)(a1 + 72));
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF081474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleAcknowledgedEvent(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD block[2];
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::string v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  std::string v25;

  memset(&v25, 0, sizeof(v25));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  v3 = *(_QWORD **)(a1 + 136);
  if (v3 != (_QWORD *)(a1 + 144))
  {
    v4 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v23, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Dispatching handleAcknowledgedEvent callback for ", 49);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, v3 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v22 < 0)
        operator delete(__p[0]);
      if (v24 < 0)
        operator delete(v23[0]);
      v6 = v3[10];
      if (v6)
        dispatch_retain((dispatch_object_t)v3[10]);
      v7 = v3[11];
      v8 = (std::__shared_weak_count *)v3[12];
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        v16 = ___ZN18IMSWrapperDelegate23handleAcknowledgedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_48_2;
        v18 = v7;
        v19 = v8;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      else
      {
        v16 = ___ZN18IMSWrapperDelegate23handleAcknowledgedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_48_2;
        v18 = v7;
        v19 = 0;
      }
      block[0] = v4;
      block[1] = 1174405120;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v20, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
      else
        v20 = v25;
      if (v6)
        dispatch_async(v6, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      if (v6)
        dispatch_release(v6);
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 144));
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_1BF081714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  NSObject *v39;
  std::__shared_weak_count *v40;

  if (a21 < 0)
    operator delete(__p);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate23handleAcknowledgedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a1 + 48);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF081878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleMediaInitializedEvent(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD block[2];
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::string v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  std::string v25;

  memset(&v25, 0, sizeof(v25));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  v3 = *(_QWORD **)(a1 + 136);
  if (v3 != (_QWORD *)(a1 + 144))
  {
    v4 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v23, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Dispatching handleMediaInitializedEvent callback for ", 53);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, v3 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v22 < 0)
        operator delete(__p[0]);
      if (v24 < 0)
        operator delete(v23[0]);
      v6 = v3[10];
      if (v6)
        dispatch_retain((dispatch_object_t)v3[10]);
      v7 = v3[11];
      v8 = (std::__shared_weak_count *)v3[12];
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        v16 = ___ZN18IMSWrapperDelegate27handleMediaInitializedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_50_0;
        v18 = v7;
        v19 = v8;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      else
      {
        v16 = ___ZN18IMSWrapperDelegate27handleMediaInitializedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_50_0;
        v18 = v7;
        v19 = 0;
      }
      block[0] = v4;
      block[1] = 1174405120;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v20, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
      else
        v20 = v25;
      if (v6)
        dispatch_async(v6, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      if (v6)
        dispatch_release(v6);
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 144));
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_1BF081B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  NSObject *v39;
  std::__shared_weak_count *v40;

  if (a21 < 0)
    operator delete(__p);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate27handleMediaInitializedEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a1 + 48);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF081C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleAudioStreamTokensEvent(uint64_t a1, uint64_t a2, const void **a3)
{
  const void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD block[2];
  void (*v19)(_QWORD *);
  void *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string v23;
  CFTypeRef v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  CFTypeRef cf;
  std::string v30;

  memset(&v30, 0, sizeof(v30));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v30 = *(std::string *)a2;
  v5 = *a3;
  cf = v5;
  if (v5)
    CFRetain(v5);
  v6 = *(_QWORD **)(a1 + 136);
  if (v6 != (_QWORD *)(a1 + 144))
  {
    v7 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::debug(ims::_logger, (uint64_t)v27, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Dispatching handleAudioStreamTokensEvent callback for ", 54);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 32))(v8, v6 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (v26 < 0)
        operator delete(__p[0]);
      if (v28 < 0)
        operator delete(v27[0]);
      v9 = v6[10];
      if (v9)
        dispatch_retain((dispatch_object_t)v6[10]);
      v10 = v6[11];
      v11 = (std::__shared_weak_count *)v6[12];
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
        v19 = ___ZN18IMSWrapperDelegate28handleAudioStreamTokensEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK9__CFArrayEE_block_invoke;
        v20 = &__block_descriptor_tmp_52_0;
        v21 = v10;
        v22 = v11;
        do
          v14 = __ldxr(p_shared_weak_owners);
        while (__stxr(v14 + 1, p_shared_weak_owners));
      }
      else
      {
        v19 = ___ZN18IMSWrapperDelegate28handleAudioStreamTokensEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK9__CFArrayEE_block_invoke;
        v20 = &__block_descriptor_tmp_52_0;
        v21 = v10;
        v22 = 0;
      }
      block[0] = v7;
      block[1] = 1174405120;
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v23, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
      else
        v23 = v30;
      v24 = cf;
      if (cf)
        CFRetain(cf);
      if (v9)
        dispatch_async(v9, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef(&v24);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (v22)
        std::__shared_weak_count::__release_weak(v22);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      if (v9)
        dispatch_release(v9);
      v15 = (_QWORD *)v6[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v6[2];
          v17 = *v16 == (_QWORD)v6;
          v6 = v16;
        }
        while (!v17);
      }
      v6 = v16;
    }
    while (v16 != (_QWORD *)(a1 + 144));
  }
  ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef(&cf);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
}

void sub_1BF081F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,const void *a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  const void **v41;
  NSObject *v42;
  std::__shared_weak_count *v43;

  ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef(v41);
  if (a21 < 0)
    operator delete(__p);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v43)
    {
LABEL_5:
      if (!v42)
      {
LABEL_10:
        ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef(&a35);
        if (a41 < 0)
          operator delete(a36);
        _Unwind_Resume(a1);
      }
LABEL_9:
      dispatch_release(v42);
      goto LABEL_10;
    }
  }
  else if (!v43)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v43);
  if (!v42)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate28handleAudioStreamTokensEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK9__CFArrayEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  const void *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10[3];

  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v10[2] = v3;
    if (v3)
    {
      v4 = v3;
      v5 = (const void *)a1[4];
      v10[1] = v5;
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        v7 = (const void *)a1[9];
        v10[0] = v7;
        if (v7)
          CFRetain(v7);
        (*(void (**)(const void *, _QWORD *, const void **))(*(_QWORD *)v5 + 176))(v5, a1 + 6, v10);
        ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef(v10);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF0820E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef((const void **)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN3ims17CallEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c39_ZTSN3ctu2cf11CFSharedRefIK9__CFArrayEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  std::string *v7;
  __int128 v8;

  v4 = *(_QWORD *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 32);
  a1[1].__r_.__value_.__r.__words[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::SharedRef(a1[3].__r_.__value_.__r.__words, *(CFTypeRef *)(a2 + 72));
}

void sub_1BF082174(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN3ims17CallEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c39_ZTSN3ctu2cf11CFSharedRefIK9__CFArrayEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef((const void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void IMSWrapperDelegate::handleTextStreamTokenEvent(uint64_t a1, uint64_t a2, const void **a3)
{
  const void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD block[2];
  void (*v19)(_QWORD *);
  void *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string v23;
  CFTypeRef v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  CFTypeRef cf;
  std::string v30;

  memset(&v30, 0, sizeof(v30));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v30 = *(std::string *)a2;
  v5 = *a3;
  cf = v5;
  if (v5)
    CFRetain(v5);
  v6 = *(_QWORD **)(a1 + 136);
  if (v6 != (_QWORD *)(a1 + 144))
  {
    v7 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::debug(ims::_logger, (uint64_t)v27, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Dispatching handleTextStreamTokenEvent callback for ", 52);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 32))(v8, v6 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (v26 < 0)
        operator delete(__p[0]);
      if (v28 < 0)
        operator delete(v27[0]);
      v9 = v6[10];
      if (v9)
        dispatch_retain((dispatch_object_t)v6[10]);
      v10 = v6[11];
      v11 = (std::__shared_weak_count *)v6[12];
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
        v19 = ___ZN18IMSWrapperDelegate26handleTextStreamTokenEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK10__CFNumberEE_block_invoke;
        v20 = &__block_descriptor_tmp_54_0;
        v21 = v10;
        v22 = v11;
        do
          v14 = __ldxr(p_shared_weak_owners);
        while (__stxr(v14 + 1, p_shared_weak_owners));
      }
      else
      {
        v19 = ___ZN18IMSWrapperDelegate26handleTextStreamTokenEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK10__CFNumberEE_block_invoke;
        v20 = &__block_descriptor_tmp_54_0;
        v21 = v10;
        v22 = 0;
      }
      block[0] = v7;
      block[1] = 1174405120;
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v23, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
      else
        v23 = v30;
      v24 = cf;
      if (cf)
        CFRetain(cf);
      if (v9)
        dispatch_async(v9, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef(&v24);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (v22)
        std::__shared_weak_count::__release_weak(v22);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      if (v9)
        dispatch_release(v9);
      v15 = (_QWORD *)v6[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v6[2];
          v17 = *v16 == (_QWORD)v6;
          v6 = v16;
        }
        while (!v17);
      }
      v6 = v16;
    }
    while (v16 != (_QWORD *)(a1 + 144));
  }
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef(&cf);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
}

void sub_1BF0824A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,const void *a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  const void **v41;
  NSObject *v42;
  std::__shared_weak_count *v43;

  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef(v41);
  if (a21 < 0)
    operator delete(__p);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v43)
    {
LABEL_5:
      if (!v42)
      {
LABEL_10:
        ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef(&a35);
        if (a41 < 0)
          operator delete(a36);
        _Unwind_Resume(a1);
      }
LABEL_9:
      dispatch_release(v42);
      goto LABEL_10;
    }
  }
  else if (!v43)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v43);
  if (!v42)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate26handleTextStreamTokenEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK10__CFNumberEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  const void *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10[3];

  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v10[2] = v3;
    if (v3)
    {
      v4 = v3;
      v5 = (const void *)a1[4];
      v10[1] = v5;
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        v7 = (const void *)a1[9];
        v10[0] = v7;
        if (v7)
          CFRetain(v7);
        (*(void (**)(const void *, _QWORD *, const void **))(*(_QWORD *)v5 + 184))(v5, a1 + 6, v10);
        ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef(v10);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF082628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN3ims17CallEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c41_ZTSN3ctu2cf11CFSharedRefIK10__CFNumberEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  std::string *v7;
  __int128 v8;

  v4 = *(_QWORD *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 32);
  a1[1].__r_.__value_.__r.__words[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::SharedRef(a1[3].__r_.__value_.__r.__words, *(CFTypeRef *)(a2 + 72));
}

void sub_1BF0826B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN3ims17CallEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c41_ZTSN3ctu2cf11CFSharedRefIK10__CFNumberEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void IMSWrapperDelegate::handleIncomingDtmfEvent(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD v18[2];
  void (*v19)(uint64_t);
  void *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string v23;
  char v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  std::string v29;

  memset(&v29, 0, sizeof(v29));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v29 = *(std::string *)a2;
  v5 = *(_QWORD **)(a1 + 136);
  v6 = (_QWORD *)(a1 + 144);
  if (v5 != v6)
  {
    v7 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::debug(ims::_logger, (uint64_t)v27, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Dispatching handleIncomingDtmfEvent callback for ", 49);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 32))(v8, v5 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (v26 < 0)
        operator delete(__p[0]);
      if (v28 < 0)
        operator delete(v27[0]);
      v9 = v5[10];
      if (v9)
        dispatch_retain((dispatch_object_t)v5[10]);
      v10 = v5[11];
      v11 = (std::__shared_weak_count *)v5[12];
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
        v19 = ___ZN18IMSWrapperDelegate23handleIncomingDtmfEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEc_block_invoke;
        v20 = &__block_descriptor_tmp_56_1;
        v21 = v10;
        v22 = v11;
        do
          v14 = __ldxr(p_shared_weak_owners);
        while (__stxr(v14 + 1, p_shared_weak_owners));
      }
      else
      {
        v19 = ___ZN18IMSWrapperDelegate23handleIncomingDtmfEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEc_block_invoke;
        v20 = &__block_descriptor_tmp_56_1;
        v21 = v10;
        v22 = 0;
      }
      v18[0] = v7;
      v18[1] = 1174405120;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v23, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
      else
        v23 = v29;
      v24 = a3;
      if (v9)
        dispatch_async(v9, v18);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)v18);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (v22)
        std::__shared_weak_count::__release_weak(v22);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      if (v9)
        dispatch_release(v9);
      v15 = (_QWORD *)v5[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v5[2];
          v17 = *v16 == (_QWORD)v5;
          v5 = v16;
        }
        while (!v17);
      }
      v5 = v16;
    }
    while (v16 != v6);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_1BF0829A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  NSObject *v39;
  std::__shared_weak_count *v40;

  if (a20 < 0)
    operator delete(__p);
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate23handleIncomingDtmfEventERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEc_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t, _QWORD))(*(_QWORD *)v5 + 192))(v5, a1 + 48, *(char *)(a1 + 72));
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF082B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleResumeIndication(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD v20[2];
  void (*v21)(uint64_t);
  void *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::string v25;
  int v26;
  int v27;
  void *__p[2];
  char v29;
  void *v30[2];
  char v31;
  std::string v32;

  memset(&v32, 0, sizeof(v32));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v32 = *(std::string *)a2;
  v7 = *(_QWORD **)(a1 + 136);
  v8 = (_QWORD *)(a1 + 144);
  if (v7 != (_QWORD *)(a1 + 144))
  {
    v9 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v30, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v10 = ImsLogger::debug(ims::_logger, (uint64_t)v30, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Dispatching handleResumeIndication callback for ", 48);
      *(_BYTE *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 32))(v10, v7 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v10 + 17) = 0;
      if (v29 < 0)
        operator delete(__p[0]);
      if (v31 < 0)
        operator delete(v30[0]);
      v11 = v7[10];
      if (v11)
        dispatch_retain((dispatch_object_t)v7[10]);
      v12 = v7[11];
      v13 = (std::__shared_weak_count *)v7[12];
      if (v13)
      {
        p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
        do
          v15 = __ldxr(p_shared_weak_owners);
        while (__stxr(v15 + 1, p_shared_weak_owners));
        v21 = ___ZN18IMSWrapperDelegate22handleResumeIndicationERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ims13FlowDirectionENS9_9MediaTypeE_block_invoke;
        v22 = &__block_descriptor_tmp_58_2;
        v23 = v12;
        v24 = v13;
        do
          v16 = __ldxr(p_shared_weak_owners);
        while (__stxr(v16 + 1, p_shared_weak_owners));
      }
      else
      {
        v21 = ___ZN18IMSWrapperDelegate22handleResumeIndicationERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ims13FlowDirectionENS9_9MediaTypeE_block_invoke;
        v22 = &__block_descriptor_tmp_58_2;
        v23 = v12;
        v24 = 0;
      }
      v20[0] = v9;
      v20[1] = 1174405120;
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v25, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
      else
        v25 = v32;
      v26 = a3;
      v27 = a4;
      if (v11)
        dispatch_async(v11, v20);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)v20);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (v24)
        std::__shared_weak_count::__release_weak(v24);
      if (v13)
        std::__shared_weak_count::__release_weak(v13);
      if (v11)
        dispatch_release(v11);
      v17 = (_QWORD *)v7[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v7[2];
          v19 = *v18 == (_QWORD)v7;
          v7 = v18;
        }
        while (!v19);
      }
      v7 = v18;
    }
    while (v18 != v8);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_1BF082DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  std::__shared_weak_count *v39;
  NSObject *v40;

  if (a20 < 0)
    operator delete(__p);
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    if (!v39)
    {
LABEL_5:
      if (!v40)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v40);
      goto LABEL_10;
    }
  }
  else if (!v39)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v39);
  if (!v40)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate22handleResumeIndicationERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ims13FlowDirectionENS9_9MediaTypeE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 200))(v5, a1 + 48, *(unsigned int *)(a1 + 72), *(unsigned int *)(a1 + 76));
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF082F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleHoldIndication(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD v20[2];
  void (*v21)(uint64_t);
  void *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::string v25;
  int v26;
  int v27;
  void *__p[2];
  char v29;
  void *v30[2];
  char v31;
  std::string v32;

  memset(&v32, 0, sizeof(v32));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v32 = *(std::string *)a2;
  v7 = *(_QWORD **)(a1 + 136);
  v8 = (_QWORD *)(a1 + 144);
  if (v7 != (_QWORD *)(a1 + 144))
  {
    v9 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v30, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v10 = ImsLogger::debug(ims::_logger, (uint64_t)v30, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Dispatching handleHoldIndication callback for ", 46);
      *(_BYTE *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 32))(v10, v7 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v10 + 17) = 0;
      if (v29 < 0)
        operator delete(__p[0]);
      if (v31 < 0)
        operator delete(v30[0]);
      v11 = v7[10];
      if (v11)
        dispatch_retain((dispatch_object_t)v7[10]);
      v12 = v7[11];
      v13 = (std::__shared_weak_count *)v7[12];
      if (v13)
      {
        p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
        do
          v15 = __ldxr(p_shared_weak_owners);
        while (__stxr(v15 + 1, p_shared_weak_owners));
        v21 = ___ZN18IMSWrapperDelegate20handleHoldIndicationERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ims13FlowDirectionENS9_9MediaTypeE_block_invoke;
        v22 = &__block_descriptor_tmp_60_3;
        v23 = v12;
        v24 = v13;
        do
          v16 = __ldxr(p_shared_weak_owners);
        while (__stxr(v16 + 1, p_shared_weak_owners));
      }
      else
      {
        v21 = ___ZN18IMSWrapperDelegate20handleHoldIndicationERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ims13FlowDirectionENS9_9MediaTypeE_block_invoke;
        v22 = &__block_descriptor_tmp_60_3;
        v23 = v12;
        v24 = 0;
      }
      v20[0] = v9;
      v20[1] = 1174405120;
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v25, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
      else
        v25 = v32;
      v26 = a3;
      v27 = a4;
      if (v11)
        dispatch_async(v11, v20);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)v20);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (v24)
        std::__shared_weak_count::__release_weak(v24);
      if (v13)
        std::__shared_weak_count::__release_weak(v13);
      if (v11)
        dispatch_release(v11);
      v17 = (_QWORD *)v7[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v7[2];
          v19 = *v18 == (_QWORD)v7;
          v7 = v18;
        }
        while (!v19);
      }
      v7 = v18;
    }
    while (v18 != v8);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_1BF0831D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  std::__shared_weak_count *v39;
  NSObject *v40;

  if (a20 < 0)
    operator delete(__p);
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    if (!v39)
    {
LABEL_5:
      if (!v40)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v40);
      goto LABEL_10;
    }
  }
  else if (!v39)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v39);
  if (!v40)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate20handleHoldIndicationERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ims13FlowDirectionENS9_9MediaTypeE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 208))(v5, a1 + 48, *(unsigned int *)(a1 + 72), *(unsigned int *)(a1 + 76));
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF083340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleThumperCallRegister(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD block[2];
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::string v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  std::string v25;

  memset(&v25, 0, sizeof(v25));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  v3 = *(_QWORD **)(a1 + 136);
  if (v3 != (_QWORD *)(a1 + 144))
  {
    v4 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v23, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Dispatching handleThumperCallRegister callback for ", 51);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, v3 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v22 < 0)
        operator delete(__p[0]);
      if (v24 < 0)
        operator delete(v23[0]);
      v6 = v3[10];
      if (v6)
        dispatch_retain((dispatch_object_t)v3[10]);
      v7 = v3[11];
      v8 = (std::__shared_weak_count *)v3[12];
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        v16 = ___ZN18IMSWrapperDelegate25handleThumperCallRegisterERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_62_1;
        v18 = v7;
        v19 = v8;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      else
      {
        v16 = ___ZN18IMSWrapperDelegate25handleThumperCallRegisterERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_62_1;
        v18 = v7;
        v19 = 0;
      }
      block[0] = v4;
      block[1] = 1174405120;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v20, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
      else
        v20 = v25;
      if (v6)
        dispatch_async(v6, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      if (v6)
        dispatch_release(v6);
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 144));
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_1BF0835E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  NSObject *v39;
  std::__shared_weak_count *v40;

  if (a21 < 0)
    operator delete(__p);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate25handleThumperCallRegisterERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t))(*(_QWORD *)v5 + 160))(v5, a1 + 48);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF083744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleThumperCallDeregister(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD block[2];
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::string v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  std::string v25;

  memset(&v25, 0, sizeof(v25));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  v3 = *(_QWORD **)(a1 + 136);
  if (v3 != (_QWORD *)(a1 + 144))
  {
    v4 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v23, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Dispatching handleThumperCallDeregister callback for ", 53);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, v3 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v22 < 0)
        operator delete(__p[0]);
      if (v24 < 0)
        operator delete(v23[0]);
      v6 = v3[10];
      if (v6)
        dispatch_retain((dispatch_object_t)v3[10]);
      v7 = v3[11];
      v8 = (std::__shared_weak_count *)v3[12];
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        v16 = ___ZN18IMSWrapperDelegate27handleThumperCallDeregisterERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_64_0;
        v18 = v7;
        v19 = v8;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      else
      {
        v16 = ___ZN18IMSWrapperDelegate27handleThumperCallDeregisterERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_64_0;
        v18 = v7;
        v19 = 0;
      }
      block[0] = v4;
      block[1] = 1174405120;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v20, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
      else
        v20 = v25;
      if (v6)
        dispatch_async(v6, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      if (v6)
        dispatch_release(v6);
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 144));
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_1BF0839E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  NSObject *v39;
  std::__shared_weak_count *v40;

  if (a21 < 0)
    operator delete(__p);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate27handleThumperCallDeregisterERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t))(*(_QWORD *)v5 + 168))(v5, a1 + 48);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF083B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSWrapperDelegate::handleIncomingEvent(IMSWrapperDelegate *this, ims::CallHandle *a2, const ims::CallIncomingInfo *a3)
{
  IMSWrapperDelegate *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t v13;
  IMSWrapperDelegate *v14;
  IMSWrapperDelegate *v15;
  BOOL v16;
  _QWORD block[2];
  void (*v18)(_QWORD *);
  void *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  ims::CallHandle *v22;
  std::string v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  void *__p[2];
  char v37;
  void *v38[2];
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  ims::CallIncomingInfo::CallIncomingInfo((std::string *)&v40, a3);
  v5 = (IMSWrapperDelegate *)*((_QWORD *)this + 11);
  if (v5 != (IMSWrapperDelegate *)((char *)this + 96))
  {
    v6 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v38, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v7 = ImsLogger::debug(ims::_logger, (uint64_t)v38, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Dispatching handleIncomingEvent callback for ", 45);
      *(_BYTE *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, (uint64_t)v5 + 56);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v7 + 17) = 0;
      if (v37 < 0)
        operator delete(__p[0]);
      if (v39 < 0)
        operator delete(v38[0]);
      v8 = *((_QWORD *)v5 + 10);
      if (v8)
        dispatch_retain(*((dispatch_object_t *)v5 + 10));
      v9 = *((_QWORD *)v5 + 11);
      v10 = (std::__shared_weak_count *)*((_QWORD *)v5 + 12);
      if (v10)
      {
        p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
        do
          v12 = __ldxr(p_shared_weak_owners);
        while (__stxr(v12 + 1, p_shared_weak_owners));
        v18 = ___ZN18IMSWrapperDelegate19handleIncomingEventEPN3ims10CallHandleERKNS0_16CallIncomingInfoE_block_invoke;
        v19 = &__block_descriptor_tmp_66_0;
        v20 = v9;
        v21 = v10;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
      }
      else
      {
        v18 = ___ZN18IMSWrapperDelegate19handleIncomingEventEPN3ims10CallHandleERKNS0_16CallIncomingInfoE_block_invoke;
        v19 = &__block_descriptor_tmp_66_0;
        v20 = v9;
        v21 = 0;
      }
      block[0] = v6;
      block[1] = 1174405120;
      v22 = a2;
      ims::CallIncomingInfo::CallIncomingInfo(&v23, (const ims::CallIncomingInfo *)&v40);
      if (v8)
        dispatch_async(v8, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (v35 < 0)
        operator delete(v34);
      if (v33 < 0)
        operator delete(v32);
      if (v31 < 0)
        operator delete(v30);
      if (v29 < 0)
        operator delete(v28);
      if (v27 < 0)
        operator delete(v26);
      if (v25 < 0)
        operator delete(v24);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (v21)
        std::__shared_weak_count::__release_weak(v21);
      if (v10)
        std::__shared_weak_count::__release_weak(v10);
      if (v8)
        dispatch_release(v8);
      v14 = (IMSWrapperDelegate *)*((_QWORD *)v5 + 1);
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = *(IMSWrapperDelegate **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (IMSWrapperDelegate *)*((_QWORD *)v5 + 2);
          v16 = *(_QWORD *)v15 == (_QWORD)v5;
          v5 = v15;
        }
        while (!v16);
      }
      v5 = v15;
    }
    while (v15 != (IMSWrapperDelegate *)((char *)this + 96));
  }
  if (SHIBYTE(v51) < 0)
    operator delete(*((void **)&v50 + 1));
  if (SBYTE7(v50) < 0)
    operator delete((void *)v49);
  if (SHIBYTE(v47) < 0)
    operator delete(*((void **)&v46 + 1));
  if (SHIBYTE(v45) < 0)
    operator delete(*((void **)&v44 + 1));
  if (SBYTE7(v44) < 0)
    operator delete((void *)v43);
  if (SHIBYTE(v42) < 0)
    operator delete(*((void **)&v41 + 1));
  if (SBYTE7(v41) < 0)
    operator delete((void *)v40);
}

void sub_1BF083E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53)
{
  void **v53;
  NSObject *v54;
  std::__shared_weak_count *v55;

  ims::CallIncomingInfo::~CallIncomingInfo(v53);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v55)
    {
LABEL_3:
      if (!v54)
      {
LABEL_8:
        ims::CallIncomingInfo::~CallIncomingInfo(&a53);
        _Unwind_Resume(a1);
      }
LABEL_7:
      dispatch_release(v54);
      goto LABEL_8;
    }
  }
  else if (!v55)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v55);
  if (!v54)
    goto LABEL_8;
  goto LABEL_7;
}

void ___ZN18IMSWrapperDelegate19handleIncomingEventEPN3ims10CallHandleERKNS0_16CallIncomingInfoE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = (const void *)a1[4];
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[4];
        (*(void (**)(const void *, _QWORD, _QWORD *))(*(_QWORD *)v5 + 16))(v5, a1[6], a1 + 7);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF083FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *__copy_helper_block_e8_32c55_ZTSNSt3__18weak_ptrIN3ims24CallManagerEventDelegateEEE56c28_ZTSN3ims16CallIncomingInfoE(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return ims::CallIncomingInfo::CallIncomingInfo((std::string *)(a1 + 56), (const ims::CallIncomingInfo *)(a2 + 7));
}

void sub_1BF08403C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c55_ZTSNSt3__18weak_ptrIN3ims24CallManagerEventDelegateEEE56c28_ZTSN3ims16CallIncomingInfoE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  ims::CallIncomingInfo::~CallIncomingInfo((void **)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleIncomingEvent(IMSWrapperDelegate *this, ims::CallHandle *a2, const ims::CallIncomingInfo *a3)
{
  IMSWrapperDelegate::handleIncomingEvent((IMSWrapperDelegate *)((char *)this - 16), a2, a3);
}

void IMSWrapperDelegate::handleMergeSuccess(IMSWrapperDelegate *this)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  BOOL v13;
  _QWORD v14[2];
  void (*v15)(uint64_t);
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;

  v1 = (char *)*((_QWORD *)this + 11);
  v2 = (char *)this + 96;
  if (v1 != (char *)this + 96)
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v4 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Dispatching handleMergeSuccess callback for ", 44);
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 32))(v4, (_QWORD *)v1 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v4 + 17) = 0;
      if (v20 < 0)
        operator delete(__p[0]);
      if (v22 < 0)
        operator delete(v21[0]);
      v5 = *((_QWORD *)v1 + 10);
      if (v5)
        dispatch_retain(*((dispatch_object_t *)v1 + 10));
      v6 = *((_QWORD *)v1 + 11);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v1 + 12);
      if (v7)
      {
        p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v15 = ___ZN18IMSWrapperDelegate18handleMergeSuccessEv_block_invoke;
        v16 = &__block_descriptor_tmp_68_1;
        v17 = v6;
        v18 = v7;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
      }
      else
      {
        v15 = ___ZN18IMSWrapperDelegate18handleMergeSuccessEv_block_invoke;
        v16 = &__block_descriptor_tmp_68_1;
        v17 = v6;
        v18 = 0;
      }
      v14[0] = v3;
      v14[1] = 1174405120;
      if (v5)
        dispatch_async(v5, v14);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)v14);
      if (v18)
        std::__shared_weak_count::__release_weak(v18);
      if (v7)
        std::__shared_weak_count::__release_weak(v7);
      if (v5)
        dispatch_release(v5);
      v11 = (char *)*((_QWORD *)v1 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char *)*((_QWORD *)v1 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v1;
          v1 = v12;
        }
        while (!v13);
      }
      v1 = v12;
    }
    while (v12 != v2);
  }
}

void sub_1BF08429C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::__shared_weak_count *v26;

  if (a14)
    std::__shared_weak_count::__release_weak(a14);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate18handleMergeSuccessEv_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[4];
        (*(void (**)(const void *))(*(_QWORD *)v5 + 32))(v5);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF0843A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c55_ZTSNSt3__18weak_ptrIN3ims24CallManagerEventDelegateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c55_ZTSNSt3__18weak_ptrIN3ims24CallManagerEventDelegateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleMergeSuccess(IMSWrapperDelegate *this)
{
  IMSWrapperDelegate::handleMergeSuccess((IMSWrapperDelegate *)((char *)this - 16));
}

void IMSWrapperDelegate::handleMergeFailure(IMSWrapperDelegate *this)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  BOOL v13;
  _QWORD v14[2];
  void (*v15)(uint64_t);
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;

  v1 = (char *)*((_QWORD *)this + 11);
  v2 = (char *)this + 96;
  if (v1 != (char *)this + 96)
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v4 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Dispatching handleMergeFailure callback for ", 44);
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 32))(v4, (_QWORD *)v1 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v4 + 17) = 0;
      if (v20 < 0)
        operator delete(__p[0]);
      if (v22 < 0)
        operator delete(v21[0]);
      v5 = *((_QWORD *)v1 + 10);
      if (v5)
        dispatch_retain(*((dispatch_object_t *)v1 + 10));
      v6 = *((_QWORD *)v1 + 11);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v1 + 12);
      if (v7)
      {
        p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v15 = ___ZN18IMSWrapperDelegate18handleMergeFailureEv_block_invoke;
        v16 = &__block_descriptor_tmp_70_0;
        v17 = v6;
        v18 = v7;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
      }
      else
      {
        v15 = ___ZN18IMSWrapperDelegate18handleMergeFailureEv_block_invoke;
        v16 = &__block_descriptor_tmp_70_0;
        v17 = v6;
        v18 = 0;
      }
      v14[0] = v3;
      v14[1] = 1174405120;
      if (v5)
        dispatch_async(v5, v14);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)v14);
      if (v18)
        std::__shared_weak_count::__release_weak(v18);
      if (v7)
        std::__shared_weak_count::__release_weak(v7);
      if (v5)
        dispatch_release(v5);
      v11 = (char *)*((_QWORD *)v1 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char *)*((_QWORD *)v1 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v1;
          v1 = v12;
        }
        while (!v13);
      }
      v1 = v12;
    }
    while (v12 != v2);
  }
}

void sub_1BF084600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::__shared_weak_count *v26;

  if (a14)
    std::__shared_weak_count::__release_weak(a14);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate18handleMergeFailureEv_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[4];
        (*(void (**)(const void *))(*(_QWORD *)v5 + 40))(v5);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF08470C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleMergeFailure(IMSWrapperDelegate *this)
{
  IMSWrapperDelegate::handleMergeFailure((IMSWrapperDelegate *)((char *)this - 16));
}

void IMSWrapperDelegate::handleMergedMediaInit(IMSWrapperDelegate *this)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  BOOL v13;
  _QWORD v14[2];
  void (*v15)(uint64_t);
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;

  v1 = (char *)*((_QWORD *)this + 11);
  v2 = (char *)this + 96;
  if (v1 != (char *)this + 96)
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v4 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Dispatching handleMergedMediaInit callback for ", 47);
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 32))(v4, (_QWORD *)v1 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v4 + 17) = 0;
      if (v20 < 0)
        operator delete(__p[0]);
      if (v22 < 0)
        operator delete(v21[0]);
      v5 = *((_QWORD *)v1 + 10);
      if (v5)
        dispatch_retain(*((dispatch_object_t *)v1 + 10));
      v6 = *((_QWORD *)v1 + 11);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v1 + 12);
      if (v7)
      {
        p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v15 = ___ZN18IMSWrapperDelegate21handleMergedMediaInitEv_block_invoke;
        v16 = &__block_descriptor_tmp_72;
        v17 = v6;
        v18 = v7;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
      }
      else
      {
        v15 = ___ZN18IMSWrapperDelegate21handleMergedMediaInitEv_block_invoke;
        v16 = &__block_descriptor_tmp_72;
        v17 = v6;
        v18 = 0;
      }
      v14[0] = v3;
      v14[1] = 1174405120;
      if (v5)
        dispatch_async(v5, v14);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)v14);
      if (v18)
        std::__shared_weak_count::__release_weak(v18);
      if (v7)
        std::__shared_weak_count::__release_weak(v7);
      if (v5)
        dispatch_release(v5);
      v11 = (char *)*((_QWORD *)v1 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char *)*((_QWORD *)v1 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v1;
          v1 = v12;
        }
        while (!v13);
      }
      v1 = v12;
    }
    while (v12 != v2);
  }
}

void sub_1BF084930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::__shared_weak_count *v26;

  if (a14)
    std::__shared_weak_count::__release_weak(a14);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate21handleMergedMediaInitEv_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[4];
        (*(void (**)(const void *))(*(_QWORD *)v5 + 24))(v5);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF084A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleMergedMediaInit(IMSWrapperDelegate *this)
{
  IMSWrapperDelegate::handleMergedMediaInit((IMSWrapperDelegate *)((char *)this - 16));
}

void IMSWrapperDelegate::handleConferenceSubscribeEvent(IMSWrapperDelegate *this, char a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  BOOL v15;
  _QWORD block[2];
  void (*v17)(uint64_t);
  void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  char v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;

  v2 = (char *)*((_QWORD *)this + 11);
  v3 = (char *)this + 96;
  if (v2 != (char *)this + 96)
  {
    v5 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v6 = ImsLogger::debug(ims::_logger, (uint64_t)v24, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Dispatching handleConferenceSubscribeEvent callback for ", 56);
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 32))(v6, (_QWORD *)v2 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v6 + 17) = 0;
      if (v23 < 0)
        operator delete(__p[0]);
      if (v25 < 0)
        operator delete(v24[0]);
      v7 = *((_QWORD *)v2 + 10);
      if (v7)
        dispatch_retain(*((dispatch_object_t *)v2 + 10));
      v8 = *((_QWORD *)v2 + 11);
      v9 = (std::__shared_weak_count *)*((_QWORD *)v2 + 12);
      if (v9)
      {
        p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
        v17 = ___ZN18IMSWrapperDelegate30handleConferenceSubscribeEventEb_block_invoke;
        v18 = &__block_descriptor_tmp_74_1;
        v19 = v8;
        v20 = v9;
        do
          v12 = __ldxr(p_shared_weak_owners);
        while (__stxr(v12 + 1, p_shared_weak_owners));
      }
      else
      {
        v17 = ___ZN18IMSWrapperDelegate30handleConferenceSubscribeEventEb_block_invoke;
        v18 = &__block_descriptor_tmp_74_1;
        v19 = v8;
        v20 = 0;
      }
      block[0] = v5;
      block[1] = 1174405120;
      v21 = a2;
      if (v7)
        dispatch_async(v7, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (v20)
        std::__shared_weak_count::__release_weak(v20);
      if (v9)
        std::__shared_weak_count::__release_weak(v9);
      if (v7)
        dispatch_release(v7);
      v13 = (char *)*((_QWORD *)v2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (char *)*((_QWORD *)v2 + 2);
          v15 = *(_QWORD *)v14 == (_QWORD)v2;
          v2 = v14;
        }
        while (!v15);
      }
      v2 = v14;
    }
    while (v14 != v3);
  }
}

void sub_1BF084C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::__shared_weak_count *v28;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate30handleConferenceSubscribeEventEb_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[4];
        (*(void (**)(const void *, _QWORD))(*(_QWORD *)v5 + 48))(v5, *(unsigned __int8 *)(a1 + 48));
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF084D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleConferenceSubscribeEvent(IMSWrapperDelegate *this, char a2)
{
  IMSWrapperDelegate::handleConferenceSubscribeEvent((IMSWrapperDelegate *)((char *)this - 16), a2);
}

void IMSWrapperDelegate::handleEmergencySessionFinished(IMSWrapperDelegate *this)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  BOOL v13;
  _QWORD v14[2];
  void (*v15)(uint64_t);
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;

  v1 = (char *)*((_QWORD *)this + 11);
  v2 = (char *)this + 96;
  if (v1 != (char *)this + 96)
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v4 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Dispatching handleEmergencySessionFinished callback for ", 56);
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 32))(v4, (_QWORD *)v1 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v4 + 17) = 0;
      if (v20 < 0)
        operator delete(__p[0]);
      if (v22 < 0)
        operator delete(v21[0]);
      v5 = *((_QWORD *)v1 + 10);
      if (v5)
        dispatch_retain(*((dispatch_object_t *)v1 + 10));
      v6 = *((_QWORD *)v1 + 11);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v1 + 12);
      if (v7)
      {
        p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v15 = ___ZN18IMSWrapperDelegate30handleEmergencySessionFinishedEv_block_invoke;
        v16 = &__block_descriptor_tmp_76_0;
        v17 = v6;
        v18 = v7;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
      }
      else
      {
        v15 = ___ZN18IMSWrapperDelegate30handleEmergencySessionFinishedEv_block_invoke;
        v16 = &__block_descriptor_tmp_76_0;
        v17 = v6;
        v18 = 0;
      }
      v14[0] = v3;
      v14[1] = 1174405120;
      if (v5)
        dispatch_async(v5, v14);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)v14);
      if (v18)
        std::__shared_weak_count::__release_weak(v18);
      if (v7)
        std::__shared_weak_count::__release_weak(v7);
      if (v5)
        dispatch_release(v5);
      v11 = (char *)*((_QWORD *)v1 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char *)*((_QWORD *)v1 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v1;
          v1 = v12;
        }
        while (!v13);
      }
      v1 = v12;
    }
    while (v12 != v2);
  }
}

void sub_1BF084FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::__shared_weak_count *v26;

  if (a14)
    std::__shared_weak_count::__release_weak(a14);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate30handleEmergencySessionFinishedEv_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[4];
        (*(void (**)(const void *))(*(_QWORD *)v5 + 56))(v5);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF0850B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleEmergencySessionFinished(IMSWrapperDelegate *this)
{
  IMSWrapperDelegate::handleEmergencySessionFinished((IMSWrapperDelegate *)((char *)this - 16));
}

void IMSWrapperDelegate::handleThumperCallError(IMSWrapperDelegate *this, char a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  BOOL v15;
  _QWORD block[2];
  void (*v17)(uint64_t);
  void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  char v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;

  v2 = (char *)*((_QWORD *)this + 11);
  v3 = (char *)this + 96;
  if (v2 != (char *)this + 96)
  {
    v5 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v6 = ImsLogger::debug(ims::_logger, (uint64_t)v24, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Dispatching handleThumperCallError callback for ", 48);
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 32))(v6, (_QWORD *)v2 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v6 + 17) = 0;
      if (v23 < 0)
        operator delete(__p[0]);
      if (v25 < 0)
        operator delete(v24[0]);
      v7 = *((_QWORD *)v2 + 10);
      if (v7)
        dispatch_retain(*((dispatch_object_t *)v2 + 10));
      v8 = *((_QWORD *)v2 + 11);
      v9 = (std::__shared_weak_count *)*((_QWORD *)v2 + 12);
      if (v9)
      {
        p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
        v17 = ___ZN18IMSWrapperDelegate22handleThumperCallErrorEb_block_invoke;
        v18 = &__block_descriptor_tmp_78;
        v19 = v8;
        v20 = v9;
        do
          v12 = __ldxr(p_shared_weak_owners);
        while (__stxr(v12 + 1, p_shared_weak_owners));
      }
      else
      {
        v17 = ___ZN18IMSWrapperDelegate22handleThumperCallErrorEb_block_invoke;
        v18 = &__block_descriptor_tmp_78;
        v19 = v8;
        v20 = 0;
      }
      block[0] = v5;
      block[1] = 1174405120;
      v21 = a2;
      if (v7)
        dispatch_async(v7, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (v20)
        std::__shared_weak_count::__release_weak(v20);
      if (v9)
        std::__shared_weak_count::__release_weak(v9);
      if (v7)
        dispatch_release(v7);
      v13 = (char *)*((_QWORD *)v2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (char *)*((_QWORD *)v2 + 2);
          v15 = *(_QWORD *)v14 == (_QWORD)v2;
          v2 = v14;
        }
        while (!v15);
      }
      v2 = v14;
    }
    while (v14 != v3);
  }
}

void sub_1BF0852D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::__shared_weak_count *v28;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate22handleThumperCallErrorEb_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[4];
        (*(void (**)(const void *, _QWORD))(*(_QWORD *)v5 + 64))(v5, *(unsigned __int8 *)(a1 + 48));
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF0853F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleThumperCallError(IMSWrapperDelegate *this, char a2)
{
  IMSWrapperDelegate::handleThumperCallError((IMSWrapperDelegate *)((char *)this - 16), a2);
}

void IMSWrapperDelegate::handleMediaStackSwitchComplete(uint64_t a1, char a2, int *a3, uint64_t a4)
{
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD v20[2];
  void (*v21)(uint64_t);
  void *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::string v25;
  int v26;
  char v27;
  void *__p[2];
  char v29;
  void *v30[2];
  char v31;
  std::string v32;

  v6 = *a3;
  memset(&v32, 0, sizeof(v32));
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v32 = *(std::string *)a4;
  v7 = *(_QWORD **)(a1 + 88);
  v8 = (_QWORD *)(a1 + 96);
  if (v7 != v8)
  {
    v9 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v30, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v10 = ImsLogger::debug(ims::_logger, (uint64_t)v30, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Dispatching handleMediaStackSwitchComplete callback for ", 56);
      *(_BYTE *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 32))(v10, v7 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v10 + 17) = 0;
      if (v29 < 0)
        operator delete(__p[0]);
      if (v31 < 0)
        operator delete(v30[0]);
      v11 = v7[10];
      if (v11)
        dispatch_retain((dispatch_object_t)v7[10]);
      v12 = v7[11];
      v13 = (std::__shared_weak_count *)v7[12];
      if (v13)
      {
        p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
        do
          v15 = __ldxr(p_shared_weak_owners);
        while (__stxr(v15 + 1, p_shared_weak_owners));
        v21 = ___ZN18IMSWrapperDelegate30handleMediaStackSwitchCompleteEbRKN3ims10MediaStackERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE_block_invoke;
        v22 = &__block_descriptor_tmp_80;
        v23 = v12;
        v24 = v13;
        do
          v16 = __ldxr(p_shared_weak_owners);
        while (__stxr(v16 + 1, p_shared_weak_owners));
      }
      else
      {
        v21 = ___ZN18IMSWrapperDelegate30handleMediaStackSwitchCompleteEbRKN3ims10MediaStackERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE_block_invoke;
        v22 = &__block_descriptor_tmp_80;
        v23 = v12;
        v24 = 0;
      }
      v20[0] = v9;
      v20[1] = 1174405120;
      v27 = a2;
      v26 = v6;
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v25, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
      else
        v25 = v32;
      if (v11)
        dispatch_async(v11, v20);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)v20);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (v24)
        std::__shared_weak_count::__release_weak(v24);
      if (v13)
        std::__shared_weak_count::__release_weak(v13);
      if (v11)
        dispatch_release(v11);
      v17 = (_QWORD *)v7[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v7[2];
          v19 = *v18 == (_QWORD)v7;
          v7 = v18;
        }
        while (!v19);
      }
      v7 = v18;
    }
    while (v18 != v8);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_1BF0856AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  NSObject *v39;
  std::__shared_weak_count *v40;

  if (a20 < 0)
    operator delete(__p);
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate30handleMediaStackSwitchCompleteEbRKN3ims10MediaStackERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[4];
        (*(void (**)(const void *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v5 + 72))(v5, *(unsigned __int8 *)(a1 + 76), a1 + 72, a1 + 48);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF085818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c55_ZTSNSt3__18weak_ptrIN3ims24CallManagerEventDelegateEEE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v3;
  unint64_t *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 32);
  a1[1].__r_.__value_.__r.__words[2] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1BF085898(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c55_ZTSNSt3__18weak_ptrIN3ims24CallManagerEventDelegateEEE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleMediaStackSwitchComplete(uint64_t a1, char a2, int *a3, uint64_t a4)
{
  IMSWrapperDelegate::handleMediaStackSwitchComplete(a1 - 16, a2, a3, a4);
}

void IMSWrapperDelegate::handleMergeEnabled(IMSWrapperDelegate *this, char a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  BOOL v15;
  _QWORD block[2];
  void (*v17)(uint64_t);
  void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  char v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;

  v2 = (char *)*((_QWORD *)this + 11);
  v3 = (char *)this + 96;
  if (v2 != (char *)this + 96)
  {
    v5 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v6 = ImsLogger::debug(ims::_logger, (uint64_t)v24, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Dispatching handleMergeEnabled callback for ", 44);
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 32))(v6, (_QWORD *)v2 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v6 + 17) = 0;
      if (v23 < 0)
        operator delete(__p[0]);
      if (v25 < 0)
        operator delete(v24[0]);
      v7 = *((_QWORD *)v2 + 10);
      if (v7)
        dispatch_retain(*((dispatch_object_t *)v2 + 10));
      v8 = *((_QWORD *)v2 + 11);
      v9 = (std::__shared_weak_count *)*((_QWORD *)v2 + 12);
      if (v9)
      {
        p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
        v17 = ___ZN18IMSWrapperDelegate18handleMergeEnabledEb_block_invoke;
        v18 = &__block_descriptor_tmp_82;
        v19 = v8;
        v20 = v9;
        do
          v12 = __ldxr(p_shared_weak_owners);
        while (__stxr(v12 + 1, p_shared_weak_owners));
      }
      else
      {
        v17 = ___ZN18IMSWrapperDelegate18handleMergeEnabledEb_block_invoke;
        v18 = &__block_descriptor_tmp_82;
        v19 = v8;
        v20 = 0;
      }
      block[0] = v5;
      block[1] = 1174405120;
      v21 = a2;
      if (v7)
        dispatch_async(v7, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (v20)
        std::__shared_weak_count::__release_weak(v20);
      if (v9)
        std::__shared_weak_count::__release_weak(v9);
      if (v7)
        dispatch_release(v7);
      v13 = (char *)*((_QWORD *)v2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (char *)*((_QWORD *)v2 + 2);
          v15 = *(_QWORD *)v14 == (_QWORD)v2;
          v2 = v14;
        }
        while (!v15);
      }
      v2 = v14;
    }
    while (v14 != v3);
  }
}

void sub_1BF085B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::__shared_weak_count *v28;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate18handleMergeEnabledEb_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[4];
        (*(void (**)(const void *, _QWORD))(*(_QWORD *)v5 + 80))(v5, *(unsigned __int8 *)(a1 + 48));
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF085C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleMergeEnabled(IMSWrapperDelegate *this, char a2)
{
  IMSWrapperDelegate::handleMergeEnabled((IMSWrapperDelegate *)((char *)this - 16), a2);
}

void IMSWrapperDelegate::handleUssdData(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD v18[2];
  void (*v19)(uint64_t);
  void *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string v23;
  char v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  std::string v29;

  memset(&v29, 0, sizeof(v29));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v29 = *(std::string *)a2;
  v5 = *(_QWORD **)(a1 + 88);
  v6 = (_QWORD *)(a1 + 96);
  if (v5 != v6)
  {
    v7 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::debug(ims::_logger, (uint64_t)v27, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Dispatching handleUssdData callback for ", 40);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 32))(v8, v5 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (v26 < 0)
        operator delete(__p[0]);
      if (v28 < 0)
        operator delete(v27[0]);
      v9 = v5[10];
      if (v9)
        dispatch_retain((dispatch_object_t)v5[10]);
      v10 = v5[11];
      v11 = (std::__shared_weak_count *)v5[12];
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
        v19 = ___ZN18IMSWrapperDelegate14handleUssdDataERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke;
        v20 = &__block_descriptor_tmp_84_0;
        v21 = v10;
        v22 = v11;
        do
          v14 = __ldxr(p_shared_weak_owners);
        while (__stxr(v14 + 1, p_shared_weak_owners));
      }
      else
      {
        v19 = ___ZN18IMSWrapperDelegate14handleUssdDataERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke;
        v20 = &__block_descriptor_tmp_84_0;
        v21 = v10;
        v22 = 0;
      }
      v18[0] = v7;
      v18[1] = 1174405120;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v23, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
      else
        v23 = v29;
      v24 = a3;
      if (v9)
        dispatch_async(v9, v18);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)v18);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (v22)
        std::__shared_weak_count::__release_weak(v22);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      if (v9)
        dispatch_release(v9);
      v15 = (_QWORD *)v5[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v5[2];
          v17 = *v16 == (_QWORD)v5;
          v5 = v16;
        }
        while (!v17);
      }
      v5 = v16;
    }
    while (v16 != v6);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_1BF085ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  NSObject *v39;
  std::__shared_weak_count *v40;

  if (a20 < 0)
    operator delete(__p);
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate14handleUssdDataERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[4];
        (*(void (**)(const void *, uint64_t, _QWORD))(*(_QWORD *)v5 + 88))(v5, a1 + 48, *(unsigned __int8 *)(a1 + 72));
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF086034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c55_ZTSNSt3__18weak_ptrIN3ims24CallManagerEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v3;
  unint64_t *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 32);
  a1[1].__r_.__value_.__r.__words[2] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1BF0860B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c55_ZTSNSt3__18weak_ptrIN3ims24CallManagerEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleUssdData(uint64_t a1, uint64_t a2, char a3)
{
  IMSWrapperDelegate::handleUssdData(a1 - 16, a2, a3);
}

void IMSWrapperDelegate::handleUssdError(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD v18[2];
  void (*v19)(uint64_t);
  void *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string v23;
  int v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  std::string v29;

  memset(&v29, 0, sizeof(v29));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v29 = *(std::string *)a2;
  v5 = *(_QWORD **)(a1 + 88);
  v6 = (_QWORD *)(a1 + 96);
  if (v5 != v6)
  {
    v7 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::debug(ims::_logger, (uint64_t)v27, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Dispatching handleUssdError callback for ", 41);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 32))(v8, v5 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (v26 < 0)
        operator delete(__p[0]);
      if (v28 < 0)
        operator delete(v27[0]);
      v9 = v5[10];
      if (v9)
        dispatch_retain((dispatch_object_t)v5[10]);
      v10 = v5[11];
      v11 = (std::__shared_weak_count *)v5[12];
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
        v19 = ___ZN18IMSWrapperDelegate15handleUssdErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj_block_invoke;
        v20 = &__block_descriptor_tmp_86_0;
        v21 = v10;
        v22 = v11;
        do
          v14 = __ldxr(p_shared_weak_owners);
        while (__stxr(v14 + 1, p_shared_weak_owners));
      }
      else
      {
        v19 = ___ZN18IMSWrapperDelegate15handleUssdErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj_block_invoke;
        v20 = &__block_descriptor_tmp_86_0;
        v21 = v10;
        v22 = 0;
      }
      v18[0] = v7;
      v18[1] = 1174405120;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v23, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
      else
        v23 = v29;
      v24 = a3;
      if (v9)
        dispatch_async(v9, v18);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)v18);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (v22)
        std::__shared_weak_count::__release_weak(v22);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      if (v9)
        dispatch_release(v9);
      v15 = (_QWORD *)v5[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v5[2];
          v17 = *v16 == (_QWORD)v5;
          v5 = v16;
        }
        while (!v17);
      }
      v5 = v16;
    }
    while (v16 != v6);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_1BF0863A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  NSObject *v39;
  std::__shared_weak_count *v40;

  if (a20 < 0)
    operator delete(__p);
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate15handleUssdErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[4];
        (*(void (**)(const void *, uint64_t, _QWORD))(*(_QWORD *)v5 + 96))(v5, a1 + 48, *(unsigned int *)(a1 + 72));
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF08650C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleUssdError(uint64_t a1, uint64_t a2, int a3)
{
  IMSWrapperDelegate::handleUssdError(a1 - 16, a2, a3);
}

void IMSWrapperDelegate::handleForceLTEFallback(IMSWrapperDelegate *this)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  BOOL v13;
  _QWORD v14[2];
  void (*v15)(uint64_t);
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;

  v1 = (char *)*((_QWORD *)this + 11);
  v2 = (char *)this + 96;
  if (v1 != (char *)this + 96)
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v4 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Dispatching handleForceLTEFallback callback for ", 48);
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 32))(v4, (_QWORD *)v1 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v4 + 17) = 0;
      if (v20 < 0)
        operator delete(__p[0]);
      if (v22 < 0)
        operator delete(v21[0]);
      v5 = *((_QWORD *)v1 + 10);
      if (v5)
        dispatch_retain(*((dispatch_object_t *)v1 + 10));
      v6 = *((_QWORD *)v1 + 11);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v1 + 12);
      if (v7)
      {
        p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v15 = ___ZN18IMSWrapperDelegate22handleForceLTEFallbackEv_block_invoke;
        v16 = &__block_descriptor_tmp_88;
        v17 = v6;
        v18 = v7;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
      }
      else
      {
        v15 = ___ZN18IMSWrapperDelegate22handleForceLTEFallbackEv_block_invoke;
        v16 = &__block_descriptor_tmp_88;
        v17 = v6;
        v18 = 0;
      }
      v14[0] = v3;
      v14[1] = 1174405120;
      if (v5)
        dispatch_async(v5, v14);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)v14);
      if (v18)
        std::__shared_weak_count::__release_weak(v18);
      if (v7)
        std::__shared_weak_count::__release_weak(v7);
      if (v5)
        dispatch_release(v5);
      v11 = (char *)*((_QWORD *)v1 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char *)*((_QWORD *)v1 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v1;
          v1 = v12;
        }
        while (!v13);
      }
      v1 = v12;
    }
    while (v12 != v2);
  }
}

void sub_1BF086730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::__shared_weak_count *v26;

  if (a14)
    std::__shared_weak_count::__release_weak(a14);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate22handleForceLTEFallbackEv_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[4];
        (*(void (**)(const void *))(*(_QWORD *)v5 + 104))(v5);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF08683C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleForceLTEFallback(IMSWrapperDelegate *this)
{
  IMSWrapperDelegate::handleForceLTEFallback((IMSWrapperDelegate *)((char *)this - 16));
}

void IMSWrapperDelegate::handleTransferEvent(IMSWrapperDelegate *this, char a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  BOOL v15;
  _QWORD block[2];
  void (*v17)(uint64_t);
  void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  char v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;

  v2 = (char *)*((_QWORD *)this + 11);
  v3 = (char *)this + 96;
  if (v2 != (char *)this + 96)
  {
    v5 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v6 = ImsLogger::debug(ims::_logger, (uint64_t)v24, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Dispatching handleTransferEvent callback for ", 45);
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 32))(v6, (_QWORD *)v2 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v6 + 17) = 0;
      if (v23 < 0)
        operator delete(__p[0]);
      if (v25 < 0)
        operator delete(v24[0]);
      v7 = *((_QWORD *)v2 + 10);
      if (v7)
        dispatch_retain(*((dispatch_object_t *)v2 + 10));
      v8 = *((_QWORD *)v2 + 11);
      v9 = (std::__shared_weak_count *)*((_QWORD *)v2 + 12);
      if (v9)
      {
        p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
        v17 = ___ZN18IMSWrapperDelegate19handleTransferEventEb_block_invoke;
        v18 = &__block_descriptor_tmp_90_0;
        v19 = v8;
        v20 = v9;
        do
          v12 = __ldxr(p_shared_weak_owners);
        while (__stxr(v12 + 1, p_shared_weak_owners));
      }
      else
      {
        v17 = ___ZN18IMSWrapperDelegate19handleTransferEventEb_block_invoke;
        v18 = &__block_descriptor_tmp_90_0;
        v19 = v8;
        v20 = 0;
      }
      block[0] = v5;
      block[1] = 1174405120;
      v21 = a2;
      if (v7)
        dispatch_async(v7, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (v20)
        std::__shared_weak_count::__release_weak(v20);
      if (v9)
        std::__shared_weak_count::__release_weak(v9);
      if (v7)
        dispatch_release(v7);
      v13 = (char *)*((_QWORD *)v2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (char *)*((_QWORD *)v2 + 2);
          v15 = *(_QWORD *)v14 == (_QWORD)v2;
          v2 = v14;
        }
        while (!v15);
      }
      v2 = v14;
    }
    while (v14 != v3);
  }
}

void sub_1BF086A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::__shared_weak_count *v28;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate19handleTransferEventEb_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[4];
        (*(void (**)(const void *, _QWORD))(*(_QWORD *)v5 + 112))(v5, *(unsigned __int8 *)(a1 + 48));
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF086B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleTransferEvent(IMSWrapperDelegate *this, char a2)
{
  IMSWrapperDelegate::handleTransferEvent((IMSWrapperDelegate *)((char *)this - 16), a2);
}

void IMSWrapperDelegate::handleRegistrationStateChanged(uint64_t a1, int *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD block[2];
  void (*v17)(uint64_t);
  void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  int v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;

  v2 = *(_QWORD **)(a1 + 64);
  v3 = (_QWORD *)(a1 + 72);
  if (v2 != (_QWORD *)(a1 + 72))
  {
    v4 = *a2;
    v5 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v6 = ImsLogger::debug(ims::_logger, (uint64_t)v24, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Dispatching handleRegistrationStateChanged callback for ", 56);
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 32))(v6, v2 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v6 + 17) = 0;
      if (v23 < 0)
        operator delete(__p[0]);
      if (v25 < 0)
        operator delete(v24[0]);
      v7 = v2[10];
      if (v7)
        dispatch_retain((dispatch_object_t)v2[10]);
      v8 = v2[11];
      v9 = (std::__shared_weak_count *)v2[12];
      if (v9)
      {
        p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
        v17 = ___ZN18IMSWrapperDelegate30handleRegistrationStateChangedERKN3ims17RegistrationStateE_block_invoke;
        v18 = &__block_descriptor_tmp_92_0;
        v19 = v8;
        v20 = v9;
        do
          v12 = __ldxr(p_shared_weak_owners);
        while (__stxr(v12 + 1, p_shared_weak_owners));
      }
      else
      {
        v17 = ___ZN18IMSWrapperDelegate30handleRegistrationStateChangedERKN3ims17RegistrationStateE_block_invoke;
        v18 = &__block_descriptor_tmp_92_0;
        v19 = v8;
        v20 = 0;
      }
      block[0] = v5;
      block[1] = 1174405120;
      v21 = v4;
      if (v7)
        dispatch_async(v7, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (v20)
        std::__shared_weak_count::__release_weak(v20);
      if (v9)
        std::__shared_weak_count::__release_weak(v9);
      if (v7)
        dispatch_release(v7);
      v13 = (_QWORD *)v2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v2[2];
          v15 = *v14 == (_QWORD)v2;
          v2 = v14;
        }
        while (!v15);
      }
      v2 = v14;
    }
    while (v14 != v3);
  }
}

void sub_1BF086DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::__shared_weak_count *v28;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate30handleRegistrationStateChangedERKN3ims17RegistrationStateE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t))(*(_QWORD *)v5 + 16))(v5, a1 + 48);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF086EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN3ims18StackEventDelegateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN3ims18StackEventDelegateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleRegistrationStateChanged(uint64_t a1, int *a2)
{
  IMSWrapperDelegate::handleRegistrationStateChanged(a1 - 8, a2);
}

void IMSWrapperDelegate::handleRegistrationActive(IMSWrapperDelegate *this, const ims::RegistrationActiveInfo *a2)
{
  IMSWrapperDelegate *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  IMSWrapperDelegate *v12;
  IMSWrapperDelegate *v13;
  BOOL v14;
  _QWORD block[2];
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  int v20;
  std::string v21;
  std::string v22;
  std::string v23;
  int v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  _QWORD v29[4];
  std::string v30[2];
  uint64_t v31;

  v31 = 0;
  memset(v30, 0, sizeof(v30));
  memset(v29, 0, sizeof(v29));
  LODWORD(v29[0]) = *(_DWORD *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v29[1], *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v29[1] = *(_OWORD *)((char *)a2 + 8);
    v29[3] = *((_QWORD *)a2 + 3);
  }
  memset(v30, 0, 24);
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v30, *((__int128 **)a2 + 4), *((__int128 **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3));
  if (*((char *)a2 + 79) < 0)
    std::string::__init_copy_ctor_external(&v30[1], *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  else
    v30[1] = *(std::string *)((char *)a2 + 56);
  LODWORD(v31) = *((_DWORD *)a2 + 20);
  v4 = (IMSWrapperDelegate *)*((_QWORD *)this + 8);
  if (v4 != (IMSWrapperDelegate *)((char *)this + 72))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v27, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Dispatching handleRegistrationActive callback for ", 50);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, (uint64_t)v4 + 56);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v26 < 0)
        operator delete(__p[0]);
      if (v28 < 0)
        operator delete(v27[0]);
      v6 = *((_QWORD *)v4 + 10);
      if (v6)
        dispatch_retain(*((dispatch_object_t *)v4 + 10));
      v7 = *((_QWORD *)v4 + 11);
      v8 = (std::__shared_weak_count *)*((_QWORD *)v4 + 12);
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        v16 = ___ZN18IMSWrapperDelegate24handleRegistrationActiveERKN3ims22RegistrationActiveInfoE_block_invoke;
        v17 = &__block_descriptor_tmp_94_1;
        v18 = v7;
        v19 = v8;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      else
      {
        v16 = ___ZN18IMSWrapperDelegate24handleRegistrationActiveERKN3ims22RegistrationActiveInfoE_block_invoke;
        v17 = &__block_descriptor_tmp_94_1;
        v18 = v7;
        v19 = 0;
      }
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 1174405120;
      v20 = v29[0];
      if (SHIBYTE(v29[3]) < 0)
        std::string::__init_copy_ctor_external(&v21, (const std::string::value_type *)v29[1], v29[2]);
      else
        v21 = *(std::string *)&v29[1];
      memset(&v22, 0, sizeof(v22));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v22, (__int128 *)v30[0].__r_.__value_.__l.__data_, (__int128 *)v30[0].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30[0].__r_.__value_.__l.__size_ - v30[0].__r_.__value_.__r.__words[0]) >> 3));
      if (SHIBYTE(v30[1].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v23, v30[1].__r_.__value_.__l.__data_, v30[1].__r_.__value_.__l.__size_);
      else
        v23 = v30[1];
      v24 = v31;
      if (v6)
        dispatch_async(v6, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      v27[0] = &v22;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      if (v6)
        dispatch_release(v6);
      v12 = (IMSWrapperDelegate *)*((_QWORD *)v4 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(IMSWrapperDelegate **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (IMSWrapperDelegate *)*((_QWORD *)v4 + 2);
          v14 = *(_QWORD *)v13 == (_QWORD)v4;
          v4 = v13;
        }
        while (!v14);
      }
      v4 = v13;
    }
    while (v13 != (IMSWrapperDelegate *)((char *)this + 72));
  }
  if (SHIBYTE(v30[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30[1].__r_.__value_.__l.__data_);
  v27[0] = v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  if (SHIBYTE(v29[3]) < 0)
    operator delete((void *)v29[1]);
}

void sub_1BF0872D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, ims::RegistrationActiveInfo *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  a38 = a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  if (a50 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void ___ZN18IMSWrapperDelegate24handleRegistrationActiveERKN3ims22RegistrationActiveInfoE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t))(*(_QWORD *)v5 + 24))(v5, a1 + 48);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF087484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN3ims18StackEventDelegateEEE48c34_ZTSN3ims22RegistrationActiveInfoE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;

  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v7;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 80), *(__int128 **)(a2 + 80), *(__int128 **)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3));
  v8 = (std::string *)(a1 + 104);
  if (*(char *)(a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
}

void sub_1BF087580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  std::__shared_weak_count *v5;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 79) < 0)
    operator delete(*v3);
  v5 = *(std::__shared_weak_count **)(v2 + 40);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN3ims18StackEventDelegateEEE48c34_ZTSN3ims22RegistrationActiveInfoE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  void **v3;

  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  v3 = (void **)(a1 + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleRegistrationActive(IMSWrapperDelegate *this, const ims::RegistrationActiveInfo *a2)
{
  IMSWrapperDelegate::handleRegistrationActive((IMSWrapperDelegate *)((char *)this - 8), a2);
}

void IMSWrapperDelegate::handleRegistrationEvent(uint64_t a1, __int128 *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD block[2];
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;
  int v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;
  __int128 v26;
  int v27;

  v26 = *a2;
  v27 = *((_DWORD *)a2 + 4);
  v2 = *(_QWORD **)(a1 + 64);
  v3 = (_QWORD *)(a1 + 72);
  if (v2 != (_QWORD *)(a1 + 72))
  {
    v4 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v24, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Dispatching handleRegistrationEvent callback for ", 49);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, v2 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v23 < 0)
        operator delete(__p[0]);
      if (v25 < 0)
        operator delete(v24[0]);
      v6 = v2[10];
      if (v6)
        dispatch_retain((dispatch_object_t)v2[10]);
      v7 = v2[11];
      v8 = (std::__shared_weak_count *)v2[12];
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        v16 = ___ZN18IMSWrapperDelegate23handleRegistrationEventERKN3ims16RegistrationInfoE_block_invoke;
        v17 = &__block_descriptor_tmp_96;
        v18 = v7;
        v19 = v8;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      else
      {
        v16 = ___ZN18IMSWrapperDelegate23handleRegistrationEventERKN3ims16RegistrationInfoE_block_invoke;
        v17 = &__block_descriptor_tmp_96;
        v18 = v7;
        v19 = 0;
      }
      block[0] = v4;
      block[1] = 1174405120;
      v20 = v26;
      v21 = v27;
      if (v6)
        dispatch_async(v6, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      if (v6)
        dispatch_release(v6);
      v12 = (_QWORD *)v2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v2[2];
          v14 = *v13 == (_QWORD)v2;
          v2 = v13;
        }
        while (!v14);
      }
      v2 = v13;
    }
    while (v13 != v3);
  }
}

void sub_1BF087858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__shared_weak_count *v30;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate23handleRegistrationEventERKN3ims16RegistrationInfoE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t))(*(_QWORD *)v5 + 32))(v5, a1 + 48);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF087974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleRegistrationEvent(uint64_t a1, __int128 *a2)
{
  IMSWrapperDelegate::handleRegistrationEvent(a1 - 8, a2);
}

void IMSWrapperDelegate::handleInitialized(IMSWrapperDelegate *this, int a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  BOOL v15;
  _QWORD block[2];
  void (*v17)(uint64_t);
  void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  int v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;

  v2 = (char *)*((_QWORD *)this + 8);
  v3 = (char *)this + 72;
  if (v2 != (char *)this + 72)
  {
    v5 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v6 = ImsLogger::debug(ims::_logger, (uint64_t)v24, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Dispatching handleInitialized callback for ", 43);
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 32))(v6, (_QWORD *)v2 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v6 + 17) = 0;
      if (v23 < 0)
        operator delete(__p[0]);
      if (v25 < 0)
        operator delete(v24[0]);
      v7 = *((_QWORD *)v2 + 10);
      if (v7)
        dispatch_retain(*((dispatch_object_t *)v2 + 10));
      v8 = *((_QWORD *)v2 + 11);
      v9 = (std::__shared_weak_count *)*((_QWORD *)v2 + 12);
      if (v9)
      {
        p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
        v17 = ___ZN18IMSWrapperDelegate17handleInitializedEj_block_invoke;
        v18 = &__block_descriptor_tmp_98;
        v19 = v8;
        v20 = v9;
        do
          v12 = __ldxr(p_shared_weak_owners);
        while (__stxr(v12 + 1, p_shared_weak_owners));
      }
      else
      {
        v17 = ___ZN18IMSWrapperDelegate17handleInitializedEj_block_invoke;
        v18 = &__block_descriptor_tmp_98;
        v19 = v8;
        v20 = 0;
      }
      block[0] = v5;
      block[1] = 1174405120;
      v21 = a2;
      if (v7)
        dispatch_async(v7, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (v20)
        std::__shared_weak_count::__release_weak(v20);
      if (v9)
        std::__shared_weak_count::__release_weak(v9);
      if (v7)
        dispatch_release(v7);
      v13 = (char *)*((_QWORD *)v2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (char *)*((_QWORD *)v2 + 2);
          v15 = *(_QWORD *)v14 == (_QWORD)v2;
          v2 = v14;
        }
        while (!v15);
      }
      v2 = v14;
    }
    while (v14 != v3);
  }
}

void sub_1BF087B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::__shared_weak_count *v28;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate17handleInitializedEj_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, _QWORD))(*(_QWORD *)v5 + 56))(v5, *(unsigned int *)(a1 + 48));
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF087CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleInitialized(IMSWrapperDelegate *this, int a2)
{
  IMSWrapperDelegate::handleInitialized((IMSWrapperDelegate *)((char *)this - 8), a2);
}

void IMSWrapperDelegate::handleUninitialized(IMSWrapperDelegate *this, int a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  BOOL v15;
  _QWORD block[2];
  void (*v17)(uint64_t);
  void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  int v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;

  v2 = (char *)*((_QWORD *)this + 8);
  v3 = (char *)this + 72;
  if (v2 != (char *)this + 72)
  {
    v5 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v6 = ImsLogger::debug(ims::_logger, (uint64_t)v24, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Dispatching handleUninitialized callback for ", 45);
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 32))(v6, (_QWORD *)v2 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v6 + 17) = 0;
      if (v23 < 0)
        operator delete(__p[0]);
      if (v25 < 0)
        operator delete(v24[0]);
      v7 = *((_QWORD *)v2 + 10);
      if (v7)
        dispatch_retain(*((dispatch_object_t *)v2 + 10));
      v8 = *((_QWORD *)v2 + 11);
      v9 = (std::__shared_weak_count *)*((_QWORD *)v2 + 12);
      if (v9)
      {
        p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
        v17 = ___ZN18IMSWrapperDelegate19handleUninitializedEj_block_invoke;
        v18 = &__block_descriptor_tmp_100;
        v19 = v8;
        v20 = v9;
        do
          v12 = __ldxr(p_shared_weak_owners);
        while (__stxr(v12 + 1, p_shared_weak_owners));
      }
      else
      {
        v17 = ___ZN18IMSWrapperDelegate19handleUninitializedEj_block_invoke;
        v18 = &__block_descriptor_tmp_100;
        v19 = v8;
        v20 = 0;
      }
      block[0] = v5;
      block[1] = 1174405120;
      v21 = a2;
      if (v7)
        dispatch_async(v7, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (v20)
        std::__shared_weak_count::__release_weak(v20);
      if (v9)
        std::__shared_weak_count::__release_weak(v9);
      if (v7)
        dispatch_release(v7);
      v13 = (char *)*((_QWORD *)v2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (char *)*((_QWORD *)v2 + 2);
          v15 = *(_QWORD *)v14 == (_QWORD)v2;
          v2 = v14;
        }
        while (!v15);
      }
      v2 = v14;
    }
    while (v14 != v3);
  }
}

void sub_1BF087EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::__shared_weak_count *v28;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate19handleUninitializedEj_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, _QWORD))(*(_QWORD *)v5 + 64))(v5, *(unsigned int *)(a1 + 48));
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF087FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleUninitialized(IMSWrapperDelegate *this, int a2)
{
  IMSWrapperDelegate::handleUninitialized((IMSWrapperDelegate *)((char *)this - 8), a2);
}

void IMSWrapperDelegate::handlePdnReset(IMSWrapperDelegate *this)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  BOOL v13;
  _QWORD v14[2];
  void (*v15)(uint64_t);
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;

  v1 = (char *)*((_QWORD *)this + 8);
  v2 = (char *)this + 72;
  if (v1 != (char *)this + 72)
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v4 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Dispatching handlePdnReset callback for ", 40);
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 32))(v4, (_QWORD *)v1 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v4 + 17) = 0;
      if (v20 < 0)
        operator delete(__p[0]);
      if (v22 < 0)
        operator delete(v21[0]);
      v5 = *((_QWORD *)v1 + 10);
      if (v5)
        dispatch_retain(*((dispatch_object_t *)v1 + 10));
      v6 = *((_QWORD *)v1 + 11);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v1 + 12);
      if (v7)
      {
        p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v15 = ___ZN18IMSWrapperDelegate14handlePdnResetEv_block_invoke;
        v16 = &__block_descriptor_tmp_102_1;
        v17 = v6;
        v18 = v7;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
      }
      else
      {
        v15 = ___ZN18IMSWrapperDelegate14handlePdnResetEv_block_invoke;
        v16 = &__block_descriptor_tmp_102_1;
        v17 = v6;
        v18 = 0;
      }
      v14[0] = v3;
      v14[1] = 1174405120;
      if (v5)
        dispatch_async(v5, v14);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)v14);
      if (v18)
        std::__shared_weak_count::__release_weak(v18);
      if (v7)
        std::__shared_weak_count::__release_weak(v7);
      if (v5)
        dispatch_release(v5);
      v11 = (char *)*((_QWORD *)v1 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char *)*((_QWORD *)v1 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v1;
          v1 = v12;
        }
        while (!v13);
      }
      v1 = v12;
    }
    while (v12 != v2);
  }
}

void sub_1BF088220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::__shared_weak_count *v26;

  if (a14)
    std::__shared_weak_count::__release_weak(a14);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate14handlePdnResetEv_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *))(*(_QWORD *)v5 + 80))(v5);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF08832C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSWrapperDelegate::handlePdnReset(IMSWrapperDelegate *this)
{
  IMSWrapperDelegate::handlePdnReset((IMSWrapperDelegate *)((char *)this - 8));
}

void IMSWrapperDelegate::handleStateDump(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD block[2];
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::string v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  std::string v25;

  memset(&v25, 0, sizeof(v25));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  v3 = *(_QWORD **)(a1 + 64);
  if (v3 != (_QWORD *)(a1 + 72))
  {
    v4 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v23, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Dispatching handleStateDump callback for ", 41);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, v3 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v22 < 0)
        operator delete(__p[0]);
      if (v24 < 0)
        operator delete(v23[0]);
      v6 = v3[10];
      if (v6)
        dispatch_retain((dispatch_object_t)v3[10]);
      v7 = v3[11];
      v8 = (std::__shared_weak_count *)v3[12];
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        v16 = ___ZN18IMSWrapperDelegate15handleStateDumpERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_104_1;
        v18 = v7;
        v19 = v8;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      else
      {
        v16 = ___ZN18IMSWrapperDelegate15handleStateDumpERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v17 = &__block_descriptor_tmp_104_1;
        v18 = v7;
        v19 = 0;
      }
      block[0] = v4;
      block[1] = 1174405120;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v20, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
      else
        v20 = v25;
      if (v6)
        dispatch_async(v6, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      if (v6)
        dispatch_release(v6);
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 72));
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_1BF0885D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  NSObject *v39;
  std::__shared_weak_count *v40;

  if (a21 < 0)
    operator delete(__p);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate15handleStateDumpERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t))(*(_QWORD *)v5 + 88))(v5, a1 + 48);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF088738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN3ims18StackEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v3;
  unint64_t *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 32);
  a1[1].__r_.__value_.__r.__words[2] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1BF0887B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN3ims18StackEventDelegateEEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleStateDump(uint64_t a1, uint64_t a2)
{
  IMSWrapperDelegate::handleStateDump(a1 - 8, a2);
}

void IMSWrapperDelegate::handleAuthenticate(IMSWrapperDelegate *this, const ims::aka::Request *a2)
{
  IMSWrapperDelegate *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  IMSWrapperDelegate *v12;
  IMSWrapperDelegate *v13;
  BOOL v14;
  _QWORD block[2];
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *__p[2];
  char v32;
  void *v33[2];
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  ims::aka::Request::Request((ims::aka::Request *)&v35, a2);
  v3 = (IMSWrapperDelegate *)*((_QWORD *)this + 8);
  if (v3 != (IMSWrapperDelegate *)((char *)this + 72))
  {
    v4 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v33, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v33, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Dispatching handleAuthenticate callback for ", 44);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, (uint64_t)v3 + 56);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v32 < 0)
        operator delete(__p[0]);
      if (v34 < 0)
        operator delete(v33[0]);
      v6 = *((_QWORD *)v3 + 10);
      if (v6)
        dispatch_retain(*((dispatch_object_t *)v3 + 10));
      v7 = *((_QWORD *)v3 + 11);
      v8 = (std::__shared_weak_count *)*((_QWORD *)v3 + 12);
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        v16 = ___ZN18IMSWrapperDelegate18handleAuthenticateERKN3ims3aka7RequestE_block_invoke;
        v17 = &__block_descriptor_tmp_106_1;
        v18 = v7;
        v19 = v8;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      else
      {
        v16 = ___ZN18IMSWrapperDelegate18handleAuthenticateERKN3ims3aka7RequestE_block_invoke;
        v17 = &__block_descriptor_tmp_106_1;
        v18 = v7;
        v19 = 0;
      }
      block[0] = v4;
      block[1] = 1174405120;
      ims::aka::Request::Request((ims::aka::Request *)&v20, (const ims::aka::Request *)&v35);
      if (v6)
        dispatch_async(v6, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (v29)
      {
        v30 = v29;
        operator delete(v29);
      }
      if (v27)
      {
        v28 = v27;
        operator delete(v27);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      if (v23)
      {
        v24 = v23;
        operator delete(v23);
      }
      if (v21)
      {
        v22 = v21;
        operator delete(v21);
      }
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      if (v6)
        dispatch_release(v6);
      v12 = (IMSWrapperDelegate *)*((_QWORD *)v3 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(IMSWrapperDelegate **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (IMSWrapperDelegate *)*((_QWORD *)v3 + 2);
          v14 = *(_QWORD *)v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
    }
    while (v13 != (IMSWrapperDelegate *)((char *)this + 72));
  }
  if (*((_QWORD *)&v41 + 1))
  {
    *(_QWORD *)&v42 = *((_QWORD *)&v41 + 1);
    operator delete(*((void **)&v41 + 1));
  }
  if ((_QWORD)v40)
  {
    *((_QWORD *)&v40 + 1) = v40;
    operator delete((void *)v40);
  }
  if (*((_QWORD *)&v38 + 1))
  {
    *(_QWORD *)&v39 = *((_QWORD *)&v38 + 1);
    operator delete(*((void **)&v38 + 1));
  }
  if ((_QWORD)v37)
  {
    *((_QWORD *)&v37 + 1) = v37;
    operator delete((void *)v37);
  }
  if (*((_QWORD *)&v35 + 1))
  {
    *(_QWORD *)&v36 = *((_QWORD *)&v35 + 1);
    operator delete(*((void **)&v35 + 1));
  }
}

void sub_1BF088AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  ims::aka::Request *v45;
  NSObject *v46;
  std::__shared_weak_count *v47;

  ims::aka::Request::~Request(v45);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v47)
    {
LABEL_3:
      if (!v46)
      {
LABEL_8:
        ims::aka::Request::~Request((ims::aka::Request *)&a45);
        _Unwind_Resume(a1);
      }
LABEL_7:
      dispatch_release(v46);
      goto LABEL_8;
    }
  }
  else if (!v47)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v47);
  if (!v46)
    goto LABEL_8;
  goto LABEL_7;
}

void ___ZN18IMSWrapperDelegate18handleAuthenticateERKN3ims3aka7RequestE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t))(*(_QWORD *)v5 + 96))(v5, a1 + 48);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF088C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

ims::aka::Request *__copy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN3ims18StackEventDelegateEEE48c22_ZTSN3ims3aka7RequestE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[5];
  a1[4] = a2[4];
  a1[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return ims::aka::Request::Request((ims::aka::Request *)(a1 + 6), (const ims::aka::Request *)(a2 + 6));
}

void sub_1BF088CA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN3ims18StackEventDelegateEEE48c22_ZTSN3ims3aka7RequestE(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;

  v2 = (void *)a1[19];
  if (v2)
  {
    a1[20] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[10];
  if (v5)
  {
    a1[11] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }
  v7 = (std::__shared_weak_count *)a1[5];
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void ims::aka::Request::~Request(ims::aka::Request *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
}

void `non-virtual thunk to'IMSWrapperDelegate::handleAuthenticate(IMSWrapperDelegate *this, const ims::aka::Request *a2)
{
  IMSWrapperDelegate::handleAuthenticate((IMSWrapperDelegate *)((char *)this - 8), a2);
}

void IMSWrapperDelegate::handleClientError(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD v18[2];
  void (*v19)(uint64_t);
  void *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string v23;
  int v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  std::string v29;

  memset(&v29, 0, sizeof(v29));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v29 = *(std::string *)a2;
  v5 = *(_QWORD **)(a1 + 64);
  v6 = (_QWORD *)(a1 + 72);
  if (v5 != v6)
  {
    v7 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::debug(ims::_logger, (uint64_t)v27, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Dispatching handleClientError callback for ", 43);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 32))(v8, v5 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (v26 < 0)
        operator delete(__p[0]);
      if (v28 < 0)
        operator delete(v27[0]);
      v9 = v5[10];
      if (v9)
        dispatch_retain((dispatch_object_t)v5[10]);
      v10 = v5[11];
      v11 = (std::__shared_weak_count *)v5[12];
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
        v19 = ___ZN18IMSWrapperDelegate17handleClientErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj_block_invoke;
        v20 = &__block_descriptor_tmp_108;
        v21 = v10;
        v22 = v11;
        do
          v14 = __ldxr(p_shared_weak_owners);
        while (__stxr(v14 + 1, p_shared_weak_owners));
      }
      else
      {
        v19 = ___ZN18IMSWrapperDelegate17handleClientErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj_block_invoke;
        v20 = &__block_descriptor_tmp_108;
        v21 = v10;
        v22 = 0;
      }
      v18[0] = v7;
      v18[1] = 1174405120;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v23, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
      else
        v23 = v29;
      v24 = a3;
      if (v9)
        dispatch_async(v9, v18);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)v18);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (v22)
        std::__shared_weak_count::__release_weak(v22);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      if (v9)
        dispatch_release(v9);
      v15 = (_QWORD *)v5[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v5[2];
          v17 = *v16 == (_QWORD)v5;
          v5 = v16;
        }
        while (!v17);
      }
      v5 = v16;
    }
    while (v16 != v6);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_1BF089048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  NSObject *v39;
  std::__shared_weak_count *v40;

  if (a20 < 0)
    operator delete(__p);
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    if (!v40)
    {
LABEL_5:
      if (!v39)
      {
LABEL_10:
        if (a39 < 0)
          operator delete(a34);
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      dispatch_release(v39);
      goto LABEL_10;
    }
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v40);
  if (!v39)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN18IMSWrapperDelegate17handleClientErrorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t, _QWORD))(*(_QWORD *)v5 + 112))(v5, a1 + 48, *(unsigned int *)(a1 + 72));
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF0891B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleClientError(uint64_t a1, uint64_t a2, int a3)
{
  IMSWrapperDelegate::handleClientError(a1 - 8, a2, a3);
}

void IMSWrapperDelegate::handleRegistrationIdentities(uint64_t a1, __int128 **a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD block[2];
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[24];
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  __int128 *v25;
  __int128 *v26;
  uint64_t v27;

  v25 = 0;
  v26 = 0;
  v27 = 0;
  std::vector<ims::RegistrationIdentity>::__init_with_size[abi:ne180100]<ims::RegistrationIdentity*,ims::RegistrationIdentity*>((uint64_t)&v25, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 5);
  v3 = *(_QWORD **)(a1 + 64);
  if (v3 != (_QWORD *)(a1 + 72))
  {
    v4 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v23, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Dispatching handleRegistrationIdentities callback for ", 54);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, v3 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v22 < 0)
        operator delete(__p[0]);
      if (v24 < 0)
        operator delete(v23[0]);
      v6 = v3[10];
      if (v6)
        dispatch_retain((dispatch_object_t)v3[10]);
      v7 = v3[11];
      v8 = (std::__shared_weak_count *)v3[12];
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        v16 = ___ZN18IMSWrapperDelegate28handleRegistrationIdentitiesERKNSt3__16vectorIN3ims20RegistrationIdentityENS0_9allocatorIS3_EEEE_block_invoke;
        v17 = &__block_descriptor_tmp_110_0;
        v18 = v7;
        v19 = v8;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      else
      {
        v16 = ___ZN18IMSWrapperDelegate28handleRegistrationIdentitiesERKNSt3__16vectorIN3ims20RegistrationIdentityENS0_9allocatorIS3_EEEE_block_invoke;
        v17 = &__block_descriptor_tmp_110_0;
        v18 = v7;
        v19 = 0;
      }
      block[0] = v4;
      block[1] = 1174405120;
      memset(v20, 0, sizeof(v20));
      std::vector<ims::RegistrationIdentity>::__init_with_size[abi:ne180100]<ims::RegistrationIdentity*,ims::RegistrationIdentity*>((uint64_t)v20, v25, v26, ((char *)v26 - (char *)v25) >> 5);
      if (v6)
        dispatch_async(v6, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      v23[0] = v20;
      std::vector<ims::RegistrationIdentity>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      if (v6)
        dispatch_release(v6);
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 72));
  }
  v23[0] = &v25;
  std::vector<ims::RegistrationIdentity>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_1BF089434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  NSObject *v31;
  std::__shared_weak_count *v32;

  std::vector<ims::RegistrationIdentity>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v32)
    {
LABEL_3:
      if (!v31)
      {
LABEL_8:
        __p = &a31;
        std::vector<ims::RegistrationIdentity>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        _Unwind_Resume(a1);
      }
LABEL_7:
      dispatch_release(v31);
      goto LABEL_8;
    }
  }
  else if (!v32)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v32);
  if (!v31)
    goto LABEL_8;
  goto LABEL_7;
}

void ___ZN18IMSWrapperDelegate28handleRegistrationIdentitiesERKNSt3__16vectorIN3ims20RegistrationIdentityENS0_9allocatorIS3_EEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t))(*(_QWORD *)v5 + 120))(v5, a1 + 48);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF089594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN3ims18StackEventDelegateEEE48c68_ZTSNSt3__16vectorIN3ims20RegistrationIdentityENS_9allocatorIS2_EEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  return std::vector<ims::RegistrationIdentity>::__init_with_size[abi:ne180100]<ims::RegistrationIdentity*,ims::RegistrationIdentity*>((uint64_t)(a1 + 6), *(__int128 **)(a2 + 48), *(__int128 **)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 5);
}

void sub_1BF089604(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c49_ZTSNSt3__18weak_ptrIN3ims18StackEventDelegateEEE48c68_ZTSNSt3__16vectorIN3ims20RegistrationIdentityENS_9allocatorIS2_EEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  void **v3;

  v3 = (void **)(a1 + 48);
  std::vector<ims::RegistrationIdentity>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleRegistrationIdentities(uint64_t a1, __int128 **a2)
{
  IMSWrapperDelegate::handleRegistrationIdentities(a1 - 8, a2);
}

void IMSWrapperDelegate::handleRegistrationAllowed(IMSWrapperDelegate *this)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  BOOL v13;
  _QWORD v14[2];
  void (*v15)(uint64_t);
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;

  v1 = (char *)*((_QWORD *)this + 8);
  v2 = (char *)this + 72;
  if (v1 != (char *)this + 72)
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v4 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Dispatching handleRegistrationAllowed callback for ", 51);
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 32))(v4, (_QWORD *)v1 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v4 + 17) = 0;
      if (v20 < 0)
        operator delete(__p[0]);
      if (v22 < 0)
        operator delete(v21[0]);
      v5 = *((_QWORD *)v1 + 10);
      if (v5)
        dispatch_retain(*((dispatch_object_t *)v1 + 10));
      v6 = *((_QWORD *)v1 + 11);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v1 + 12);
      if (v7)
      {
        p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v15 = ___ZN18IMSWrapperDelegate25handleRegistrationAllowedEv_block_invoke;
        v16 = &__block_descriptor_tmp_112;
        v17 = v6;
        v18 = v7;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
      }
      else
      {
        v15 = ___ZN18IMSWrapperDelegate25handleRegistrationAllowedEv_block_invoke;
        v16 = &__block_descriptor_tmp_112;
        v17 = v6;
        v18 = 0;
      }
      v14[0] = v3;
      v14[1] = 1174405120;
      if (v5)
        dispatch_async(v5, v14);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)v14);
      if (v18)
        std::__shared_weak_count::__release_weak(v18);
      if (v7)
        std::__shared_weak_count::__release_weak(v7);
      if (v5)
        dispatch_release(v5);
      v11 = (char *)*((_QWORD *)v1 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char *)*((_QWORD *)v1 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v1;
          v1 = v12;
        }
        while (!v13);
      }
      v1 = v12;
    }
    while (v12 != v2);
  }
}

void sub_1BF08986C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::__shared_weak_count *v26;

  if (a14)
    std::__shared_weak_count::__release_weak(a14);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate25handleRegistrationAllowedEv_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *))(*(_QWORD *)v5 + 104))(v5);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF089978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleRegistrationAllowed(IMSWrapperDelegate *this)
{
  IMSWrapperDelegate::handleRegistrationAllowed((IMSWrapperDelegate *)((char *)this - 8));
}

void IMSWrapperDelegate::handleNewInitialRegistration(IMSWrapperDelegate *this)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  BOOL v13;
  _QWORD v14[2];
  void (*v15)(uint64_t);
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;

  v1 = (char *)*((_QWORD *)this + 8);
  v2 = (char *)this + 72;
  if (v1 != (char *)this + 72)
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v4 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Dispatching handleNewInitialRegistration callback for ", 54);
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 32))(v4, (_QWORD *)v1 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v4 + 17) = 0;
      if (v20 < 0)
        operator delete(__p[0]);
      if (v22 < 0)
        operator delete(v21[0]);
      v5 = *((_QWORD *)v1 + 10);
      if (v5)
        dispatch_retain(*((dispatch_object_t *)v1 + 10));
      v6 = *((_QWORD *)v1 + 11);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v1 + 12);
      if (v7)
      {
        p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v15 = ___ZN18IMSWrapperDelegate28handleNewInitialRegistrationEv_block_invoke;
        v16 = &__block_descriptor_tmp_114_0;
        v17 = v6;
        v18 = v7;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
      }
      else
      {
        v15 = ___ZN18IMSWrapperDelegate28handleNewInitialRegistrationEv_block_invoke;
        v16 = &__block_descriptor_tmp_114_0;
        v17 = v6;
        v18 = 0;
      }
      v14[0] = v3;
      v14[1] = 1174405120;
      if (v5)
        dispatch_async(v5, v14);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)v14);
      if (v18)
        std::__shared_weak_count::__release_weak(v18);
      if (v7)
        std::__shared_weak_count::__release_weak(v7);
      if (v5)
        dispatch_release(v5);
      v11 = (char *)*((_QWORD *)v1 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char *)*((_QWORD *)v1 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v1;
          v1 = v12;
        }
        while (!v13);
      }
      v1 = v12;
    }
    while (v12 != v2);
  }
}

void sub_1BF089B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::__shared_weak_count *v26;

  if (a14)
    std::__shared_weak_count::__release_weak(a14);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate28handleNewInitialRegistrationEv_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *))(*(_QWORD *)v5 + 128))(v5);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF089CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleNewInitialRegistration(IMSWrapperDelegate *this)
{
  IMSWrapperDelegate::handleNewInitialRegistration((IMSWrapperDelegate *)((char *)this - 8));
}

void IMSWrapperDelegate::handleKeepAliveCompletion(IMSWrapperDelegate *this, char a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  BOOL v15;
  _QWORD block[2];
  void (*v17)(uint64_t);
  void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  char v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;

  v2 = (char *)*((_QWORD *)this + 8);
  v3 = (char *)this + 72;
  if (v2 != (char *)this + 72)
  {
    v5 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v6 = ImsLogger::debug(ims::_logger, (uint64_t)v24, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Dispatching handleKeepAliveCompletion callback for ", 51);
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 32))(v6, (_QWORD *)v2 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v6 + 17) = 0;
      if (v23 < 0)
        operator delete(__p[0]);
      if (v25 < 0)
        operator delete(v24[0]);
      v7 = *((_QWORD *)v2 + 10);
      if (v7)
        dispatch_retain(*((dispatch_object_t *)v2 + 10));
      v8 = *((_QWORD *)v2 + 11);
      v9 = (std::__shared_weak_count *)*((_QWORD *)v2 + 12);
      if (v9)
      {
        p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
        v17 = ___ZN18IMSWrapperDelegate25handleKeepAliveCompletionEb_block_invoke;
        v18 = &__block_descriptor_tmp_116;
        v19 = v8;
        v20 = v9;
        do
          v12 = __ldxr(p_shared_weak_owners);
        while (__stxr(v12 + 1, p_shared_weak_owners));
      }
      else
      {
        v17 = ___ZN18IMSWrapperDelegate25handleKeepAliveCompletionEb_block_invoke;
        v18 = &__block_descriptor_tmp_116;
        v19 = v8;
        v20 = 0;
      }
      block[0] = v5;
      block[1] = 1174405120;
      v21 = a2;
      if (v7)
        dispatch_async(v7, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (v20)
        std::__shared_weak_count::__release_weak(v20);
      if (v9)
        std::__shared_weak_count::__release_weak(v9);
      if (v7)
        dispatch_release(v7);
      v13 = (char *)*((_QWORD *)v2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (char *)*((_QWORD *)v2 + 2);
          v15 = *(_QWORD *)v14 == (_QWORD)v2;
          v2 = v14;
        }
        while (!v15);
      }
      v2 = v14;
    }
    while (v14 != v3);
  }
}

void sub_1BF089ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::__shared_weak_count *v28;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate25handleKeepAliveCompletionEb_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, _QWORD))(*(_QWORD *)v5 + 136))(v5, *(unsigned __int8 *)(a1 + 48));
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF089FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleKeepAliveCompletion(IMSWrapperDelegate *this, char a2)
{
  IMSWrapperDelegate::handleKeepAliveCompletion((IMSWrapperDelegate *)((char *)this - 8), a2);
}

void IMSWrapperDelegate::handleMessageSendFailure(IMSWrapperDelegate *this, char a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  BOOL v15;
  _QWORD block[2];
  void (*v17)(uint64_t);
  void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  char v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;

  v2 = (char *)*((_QWORD *)this + 14);
  v3 = (char *)this + 120;
  if (v2 != (char *)this + 120)
  {
    v5 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v6 = ImsLogger::debug(ims::_logger, (uint64_t)v24, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Dispatching handleMessageSendFailure callback for ", 50);
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 32))(v6, (_QWORD *)v2 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v6 + 17) = 0;
      if (v23 < 0)
        operator delete(__p[0]);
      if (v25 < 0)
        operator delete(v24[0]);
      v7 = *((_QWORD *)v2 + 10);
      if (v7)
        dispatch_retain(*((dispatch_object_t *)v2 + 10));
      v8 = *((_QWORD *)v2 + 11);
      v9 = (std::__shared_weak_count *)*((_QWORD *)v2 + 12);
      if (v9)
      {
        p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
        v17 = ___ZN18IMSWrapperDelegate24handleMessageSendFailureEb_block_invoke;
        v18 = &__block_descriptor_tmp_118_0;
        v19 = v8;
        v20 = v9;
        do
          v12 = __ldxr(p_shared_weak_owners);
        while (__stxr(v12 + 1, p_shared_weak_owners));
      }
      else
      {
        v17 = ___ZN18IMSWrapperDelegate24handleMessageSendFailureEb_block_invoke;
        v18 = &__block_descriptor_tmp_118_0;
        v19 = v8;
        v20 = 0;
      }
      block[0] = v5;
      block[1] = 1174405120;
      v21 = a2;
      if (v7)
        dispatch_async(v7, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (v20)
        std::__shared_weak_count::__release_weak(v20);
      if (v9)
        std::__shared_weak_count::__release_weak(v9);
      if (v7)
        dispatch_release(v7);
      v13 = (char *)*((_QWORD *)v2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (char *)*((_QWORD *)v2 + 2);
          v15 = *(_QWORD *)v14 == (_QWORD)v2;
          v2 = v14;
        }
        while (!v15);
      }
      v2 = v14;
    }
    while (v14 != v3);
  }
}

void sub_1BF08A214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::__shared_weak_count *v28;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate24handleMessageSendFailureEb_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, _QWORD))(*(_QWORD *)v5 + 16))(v5, *(unsigned __int8 *)(a1 + 48));
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF08A330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c51_ZTSNSt3__18weak_ptrIN3ims20MessageEventDelegateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c51_ZTSNSt3__18weak_ptrIN3ims20MessageEventDelegateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleMessageSendFailure(IMSWrapperDelegate *this, char a2)
{
  IMSWrapperDelegate::handleMessageSendFailure((IMSWrapperDelegate *)((char *)this - 48), a2);
}

void IMSWrapperDelegate::handleMessageSendFailure(IMSWrapperDelegate *this, const ims::MessageResult *a2)
{
  IMSWrapperDelegate *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  IMSWrapperDelegate *v12;
  IMSWrapperDelegate *v13;
  BOOL v14;
  _QWORD block[2];
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  int v20;
  __int16 v21;
  std::string v22;
  __int16 v23;
  std::string v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  int v29;
  __int16 v30;
  _WORD v31[33];

  memset(v31, 0, 58);
  v29 = *(_DWORD *)a2;
  v30 = *((_WORD *)a2 + 2);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v31[1], *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v31[1] = *(_OWORD *)((char *)a2 + 8);
    *(_QWORD *)&v31[9] = *((_QWORD *)a2 + 3);
  }
  v31[13] = *((_WORD *)a2 + 16);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v31[17], *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    *(_OWORD *)&v31[17] = *(_OWORD *)((char *)a2 + 40);
    *(_QWORD *)&v31[25] = *((_QWORD *)a2 + 7);
  }
  v4 = (IMSWrapperDelegate *)*((_QWORD *)this + 14);
  if (v4 != (IMSWrapperDelegate *)((char *)this + 120))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v27, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Dispatching handleMessageSendFailure callback for ", 50);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, (uint64_t)v4 + 56);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v26 < 0)
        operator delete(__p[0]);
      if (v28 < 0)
        operator delete(v27[0]);
      v6 = *((_QWORD *)v4 + 10);
      if (v6)
        dispatch_retain(*((dispatch_object_t *)v4 + 10));
      v7 = *((_QWORD *)v4 + 11);
      v8 = (std::__shared_weak_count *)*((_QWORD *)v4 + 12);
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        v16 = ___ZN18IMSWrapperDelegate24handleMessageSendFailureERKN3ims13MessageResultE_block_invoke;
        v17 = &__block_descriptor_tmp_119_1;
        v18 = v7;
        v19 = v8;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      else
      {
        v16 = ___ZN18IMSWrapperDelegate24handleMessageSendFailureERKN3ims13MessageResultE_block_invoke;
        v17 = &__block_descriptor_tmp_119_1;
        v18 = v7;
        v19 = 0;
      }
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 1174405120;
      v20 = v29;
      v21 = v30;
      if (SHIBYTE(v31[12]) < 0)
        std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)&v31[1], *(std::string::size_type *)&v31[5]);
      else
        v22 = *(std::string *)&v31[1];
      v23 = v31[13];
      if (SHIBYTE(v31[28]) < 0)
        std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)&v31[17], *(std::string::size_type *)&v31[21]);
      else
        v24 = *(std::string *)&v31[17];
      if (v6)
        dispatch_async(v6, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      if (v6)
        dispatch_release(v6);
      v12 = (IMSWrapperDelegate *)*((_QWORD *)v4 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(IMSWrapperDelegate **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (IMSWrapperDelegate *)*((_QWORD *)v4 + 2);
          v14 = *(_QWORD *)v13 == (_QWORD)v4;
          v4 = v13;
        }
        while (!v14);
      }
      v4 = v13;
    }
    while (v13 != (IMSWrapperDelegate *)((char *)this + 120));
  }
  if (SHIBYTE(v31[28]) < 0)
    operator delete(*(void **)&v31[17]);
  if (SHIBYTE(v31[12]) < 0)
    operator delete(*(void **)&v31[1]);
}

void sub_1BF08A6D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a45 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate24handleMessageSendFailureERKN3ims13MessageResultE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t))(*(_QWORD *)v5 + 24))(v5, a1 + 48);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF08A85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c51_ZTSNSt3__18weak_ptrIN3ims20MessageEventDelegateEEE48c25_ZTSN3ims13MessageResultE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  int v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;

  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v7;
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v8;
  }
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  v9 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_1BF08A92C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  std::__shared_weak_count *v4;

  if (*(char *)(v1 + 79) < 0)
    operator delete(*v2);
  v4 = *(std::__shared_weak_count **)(v1 + 40);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c51_ZTSNSt3__18weak_ptrIN3ims20MessageEventDelegateEEE48c25_ZTSN3ims13MessageResultE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void ims::MessageResult::~MessageResult(void **this)
{
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleMessageSendFailure(IMSWrapperDelegate *this, const ims::MessageResult *a2)
{
  IMSWrapperDelegate::handleMessageSendFailure((IMSWrapperDelegate *)((char *)this - 48), a2);
}

void IMSWrapperDelegate::handleMessageSendSuccess(IMSWrapperDelegate *this)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  BOOL v13;
  _QWORD v14[2];
  void (*v15)(uint64_t);
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;

  v1 = (char *)*((_QWORD *)this + 14);
  v2 = (char *)this + 120;
  if (v1 != (char *)this + 120)
  {
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v4 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Dispatching handleMessageSendSuccess callback for ", 50);
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 32))(v4, (_QWORD *)v1 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v4 + 17) = 0;
      if (v20 < 0)
        operator delete(__p[0]);
      if (v22 < 0)
        operator delete(v21[0]);
      v5 = *((_QWORD *)v1 + 10);
      if (v5)
        dispatch_retain(*((dispatch_object_t *)v1 + 10));
      v6 = *((_QWORD *)v1 + 11);
      v7 = (std::__shared_weak_count *)*((_QWORD *)v1 + 12);
      if (v7)
      {
        p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v15 = ___ZN18IMSWrapperDelegate24handleMessageSendSuccessEv_block_invoke;
        v16 = &__block_descriptor_tmp_121;
        v17 = v6;
        v18 = v7;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
      }
      else
      {
        v15 = ___ZN18IMSWrapperDelegate24handleMessageSendSuccessEv_block_invoke;
        v16 = &__block_descriptor_tmp_121;
        v17 = v6;
        v18 = 0;
      }
      v14[0] = v3;
      v14[1] = 1174405120;
      if (v5)
        dispatch_async(v5, v14);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)v14);
      if (v18)
        std::__shared_weak_count::__release_weak(v18);
      if (v7)
        std::__shared_weak_count::__release_weak(v7);
      if (v5)
        dispatch_release(v5);
      v11 = (char *)*((_QWORD *)v1 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char *)*((_QWORD *)v1 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v1;
          v1 = v12;
        }
        while (!v13);
      }
      v1 = v12;
    }
    while (v12 != v2);
  }
}

void sub_1BF08ABFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::__shared_weak_count *v26;

  if (a14)
    std::__shared_weak_count::__release_weak(a14);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate24handleMessageSendSuccessEv_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *))(*(_QWORD *)v5 + 32))(v5);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF08AD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleMessageSendSuccess(IMSWrapperDelegate *this)
{
  IMSWrapperDelegate::handleMessageSendSuccess((IMSWrapperDelegate *)((char *)this - 48));
}

void IMSWrapperDelegate::handleMessageSendSuccess(IMSWrapperDelegate *this, const ims::MessageResult *a2)
{
  IMSWrapperDelegate *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  IMSWrapperDelegate *v12;
  IMSWrapperDelegate *v13;
  BOOL v14;
  _QWORD block[2];
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  int v20;
  __int16 v21;
  std::string v22;
  __int16 v23;
  std::string v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  int v29;
  __int16 v30;
  _WORD v31[33];

  memset(v31, 0, 58);
  v29 = *(_DWORD *)a2;
  v30 = *((_WORD *)a2 + 2);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v31[1], *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v31[1] = *(_OWORD *)((char *)a2 + 8);
    *(_QWORD *)&v31[9] = *((_QWORD *)a2 + 3);
  }
  v31[13] = *((_WORD *)a2 + 16);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v31[17], *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    *(_OWORD *)&v31[17] = *(_OWORD *)((char *)a2 + 40);
    *(_QWORD *)&v31[25] = *((_QWORD *)a2 + 7);
  }
  v4 = (IMSWrapperDelegate *)*((_QWORD *)this + 14);
  if (v4 != (IMSWrapperDelegate *)((char *)this + 120))
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v27, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Dispatching handleMessageSendSuccess callback for ", 50);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, (uint64_t)v4 + 56);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v26 < 0)
        operator delete(__p[0]);
      if (v28 < 0)
        operator delete(v27[0]);
      v6 = *((_QWORD *)v4 + 10);
      if (v6)
        dispatch_retain(*((dispatch_object_t *)v4 + 10));
      v7 = *((_QWORD *)v4 + 11);
      v8 = (std::__shared_weak_count *)*((_QWORD *)v4 + 12);
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        v16 = ___ZN18IMSWrapperDelegate24handleMessageSendSuccessERKN3ims13MessageResultE_block_invoke;
        v17 = &__block_descriptor_tmp_122_0;
        v18 = v7;
        v19 = v8;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      else
      {
        v16 = ___ZN18IMSWrapperDelegate24handleMessageSendSuccessERKN3ims13MessageResultE_block_invoke;
        v17 = &__block_descriptor_tmp_122_0;
        v18 = v7;
        v19 = 0;
      }
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 1174405120;
      v20 = v29;
      v21 = v30;
      if (SHIBYTE(v31[12]) < 0)
        std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)&v31[1], *(std::string::size_type *)&v31[5]);
      else
        v22 = *(std::string *)&v31[1];
      v23 = v31[13];
      if (SHIBYTE(v31[28]) < 0)
        std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)&v31[17], *(std::string::size_type *)&v31[21]);
      else
        v24 = *(std::string *)&v31[17];
      if (v6)
        dispatch_async(v6, block);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)block);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      if (v6)
        dispatch_release(v6);
      v12 = (IMSWrapperDelegate *)*((_QWORD *)v4 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(IMSWrapperDelegate **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (IMSWrapperDelegate *)*((_QWORD *)v4 + 2);
          v14 = *(_QWORD *)v13 == (_QWORD)v4;
          v4 = v13;
        }
        while (!v14);
      }
      v4 = v13;
    }
    while (v13 != (IMSWrapperDelegate *)((char *)this + 120));
  }
  if (SHIBYTE(v31[28]) < 0)
    operator delete(*(void **)&v31[17]);
  if (SHIBYTE(v31[12]) < 0)
    operator delete(*(void **)&v31[1]);
}

void sub_1BF08B07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a45 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN18IMSWrapperDelegate24handleMessageSendSuccessERKN3ims13MessageResultE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t))(*(_QWORD *)v5 + 40))(v5, a1 + 48);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF08B200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleMessageSendSuccess(IMSWrapperDelegate *this, const ims::MessageResult *a2)
{
  IMSWrapperDelegate::handleMessageSendSuccess((IMSWrapperDelegate *)((char *)this - 48), a2);
}

void IMSWrapperDelegate::handleMessageReceived(IMSWrapperDelegate *this, const ims::MessageInfo *a2)
{
  IMSWrapperDelegate *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  IMSWrapperDelegate *v12;
  IMSWrapperDelegate *v13;
  BOOL v14;
  _QWORD v15[2];
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::string v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  void *v30;
  void *__p[2];
  char v32;
  void *v33[2];
  char v34;
  _BYTE v35[32];
  __int128 v36;
  void *v37[2];
  void *v38[2];
  __int128 v39;
  void *v40[2];
  void *v41[2];
  __int128 v42;

  *(_OWORD *)v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  *(_OWORD *)v40 = 0u;
  *(_OWORD *)v37 = 0u;
  *(_OWORD *)v38 = 0u;
  v36 = 0u;
  memset(v35, 0, sizeof(v35));
  ims::MessageInfo::MessageInfo((std::string *)v35, a2);
  v3 = (IMSWrapperDelegate *)*((_QWORD *)this + 14);
  if (v3 != (IMSWrapperDelegate *)((char *)this + 120))
  {
    v4 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v33, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v33, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Dispatching handleMessageReceived callback for ", 47);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, (uint64_t)v3 + 56);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v32 < 0)
        operator delete(__p[0]);
      if (v34 < 0)
        operator delete(v33[0]);
      v6 = *((_QWORD *)v3 + 10);
      if (v6)
        dispatch_retain(*((dispatch_object_t *)v3 + 10));
      v7 = *((_QWORD *)v3 + 11);
      v8 = (std::__shared_weak_count *)*((_QWORD *)v3 + 12);
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        v16 = ___ZN18IMSWrapperDelegate21handleMessageReceivedERKN3ims11MessageInfoE_block_invoke;
        v17 = &__block_descriptor_tmp_124;
        v18 = v7;
        v19 = v8;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      else
      {
        v16 = ___ZN18IMSWrapperDelegate21handleMessageReceivedERKN3ims11MessageInfoE_block_invoke;
        v17 = &__block_descriptor_tmp_124;
        v18 = v7;
        v19 = 0;
      }
      v15[0] = v4;
      v15[1] = 1174405120;
      ims::MessageInfo::MessageInfo(&v20, (const ims::MessageInfo *)v35);
      if (v6)
        dispatch_async(v6, v15);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)v15);
      if (v29)
      {
        v30 = v29;
        operator delete(v29);
      }
      if (v28 < 0)
        operator delete(v27);
      if (v26 < 0)
        operator delete(v25);
      if (v24 < 0)
        operator delete(v23);
      if (v22 < 0)
        operator delete(v21);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      if (v6)
        dispatch_release(v6);
      v12 = (IMSWrapperDelegate *)*((_QWORD *)v3 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(IMSWrapperDelegate **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (IMSWrapperDelegate *)*((_QWORD *)v3 + 2);
          v14 = *(_QWORD *)v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
    }
    while (v13 != (IMSWrapperDelegate *)((char *)this + 120));
  }
  if (v41[1])
  {
    *(void **)&v42 = v41[1];
    operator delete(v41[1]);
  }
  if (SHIBYTE(v41[0]) < 0)
    operator delete(v40[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[1]);
  if (SHIBYTE(v38[0]) < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v36) < 0)
    operator delete(*(void **)&v35[24]);
  if ((v35[23] & 0x80000000) != 0)
    operator delete(*(void **)v35);
}

void sub_1BF08B518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  ims::MessageInfo *v45;
  NSObject *v46;
  std::__shared_weak_count *v47;

  ims::MessageInfo::~MessageInfo(v45);
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    if (!v47)
    {
LABEL_3:
      if (!v46)
      {
LABEL_8:
        ims::MessageInfo::~MessageInfo((ims::MessageInfo *)&a45);
        _Unwind_Resume(a1);
      }
LABEL_7:
      dispatch_release(v46);
      goto LABEL_8;
    }
  }
  else if (!v47)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v47);
  if (!v46)
    goto LABEL_8;
  goto LABEL_7;
}

void ___ZN18IMSWrapperDelegate21handleMessageReceivedERKN3ims11MessageInfoE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        (*(void (**)(const void *, uint64_t))(*(_QWORD *)v5 + 48))(v5, a1 + 48);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF08B66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *__copy_helper_block_e8_32c51_ZTSNSt3__18weak_ptrIN3ims20MessageEventDelegateEEE48c23_ZTSN3ims11MessageInfoE(std::string *a1, _QWORD *a2)
{
  std::string::size_type v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[5];
  a1[1].__r_.__value_.__l.__size_ = a2[4];
  a1[1].__r_.__value_.__r.__words[2] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return ims::MessageInfo::MessageInfo(a1 + 2, (const ims::MessageInfo *)(a2 + 6));
}

void sub_1BF08B6C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c51_ZTSNSt3__18weak_ptrIN3ims20MessageEventDelegateEEE48c23_ZTSN3ims11MessageInfoE(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(_QWORD *)(a1 + 176) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void ims::MessageInfo::~MessageInfo(ims::MessageInfo *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void `non-virtual thunk to'IMSWrapperDelegate::handleMessageReceived(IMSWrapperDelegate *this, const ims::MessageInfo *a2)
{
  IMSWrapperDelegate::handleMessageReceived((IMSWrapperDelegate *)((char *)this - 48), a2);
}

const void **IMSWrapperDelegate::handleXcapRequestCompletion(uint64_t a1, const void **a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD v16[2];
  void (*v17)(uint64_t);
  void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  CFTypeRef v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;
  CFTypeRef cf;

  cf = 0;
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(&cf, a2);
  v3 = *(_QWORD **)(a1 + 160);
  if (v3 != (_QWORD *)(a1 + 168))
  {
    v4 = MEMORY[0x1E0C809B0];
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "ims.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v24, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Dispatching handleXcapRequestCompletion callback for ", 53);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 32))(v5, v3 + 7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v23 < 0)
        operator delete(__p[0]);
      if (v25 < 0)
        operator delete(v24[0]);
      v6 = v3[10];
      if (v6)
        dispatch_retain((dispatch_object_t)v3[10]);
      v7 = v3[11];
      v8 = (std::__shared_weak_count *)v3[12];
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        v17 = ___ZN18IMSWrapperDelegate27handleXcapRequestCompletionEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
        v18 = &__block_descriptor_tmp_126_0;
        v19 = v7;
        v20 = v8;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      else
      {
        v17 = ___ZN18IMSWrapperDelegate27handleXcapRequestCompletionEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
        v18 = &__block_descriptor_tmp_126_0;
        v19 = v7;
        v20 = 0;
      }
      v16[0] = v4;
      v16[1] = 1174405120;
      v21 = cf;
      if (cf)
        CFRetain(cf);
      if (v6)
        dispatch_async(v6, v16);
      else
        IMSClientManager::callOnMainQueue((IMSClientManager *)v16);
      ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v21);
      if (v20)
        std::__shared_weak_count::__release_weak(v20);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      if (v6)
        dispatch_release(v6);
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 168));
  }
  return ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&cf);
}

void sub_1BF08BA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,const void *a28)
{
  const void **v28;
  std::__shared_weak_count *v29;

  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(v28);
  if (a14)
    std::__shared_weak_count::__release_weak(a14);
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&a28);
  _Unwind_Resume(a1);
}

void ___ZN18IMSWrapperDelegate27handleXcapRequestCompletionEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  const void *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const void *v9[3];

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v9[2] = v3;
    if (v3)
    {
      v4 = v3;
      v5 = *(const void **)(a1 + 32);
      v9[1] = v5;
      if (v5)
      {
        if (v6)
          v5 = (const void *)v6[1];
        ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(v9, (const void **)(a1 + 48));
        (*(void (**)(const void *, const void **))(*(_QWORD *)v5 + 16))(v5, v9);
        ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(v9);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF08BB70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

const void **__copy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN3ims17XcapEventDelegateEEE48c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef((const void **)(a1 + 48), (const void **)(a2 + 48));
}

void __destroy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN3ims17XcapEventDelegateEEE48c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)(a1 + 48));
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

const void **`non-virtual thunk to'IMSWrapperDelegate::handleXcapRequestCompletion(uint64_t a1, const void **a2)
{
  return IMSWrapperDelegate::handleXcapRequestCompletion(a1 - 56, a2);
}

void `non-virtual thunk to'IMSWrapperDelegate::~IMSWrapperDelegate(IMSWrapperDelegate *this)
{
  IMSWrapperDelegate::~IMSWrapperDelegate((IMSWrapperDelegate *)((char *)this - 8));
}

{
  IMSWrapperDelegate::~IMSWrapperDelegate((IMSWrapperDelegate *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

{
  IMSWrapperDelegate::~IMSWrapperDelegate((IMSWrapperDelegate *)((char *)this - 16));
}

{
  IMSWrapperDelegate::~IMSWrapperDelegate((IMSWrapperDelegate *)((char *)this - 16));
  JUMPOUT(0x1C3B87100);
}

{
  IMSWrapperDelegate::~IMSWrapperDelegate((IMSWrapperDelegate *)((char *)this - 48));
}

{
  IMSWrapperDelegate::~IMSWrapperDelegate((IMSWrapperDelegate *)((char *)this - 48));
  JUMPOUT(0x1C3B87100);
}

{
  IMSWrapperDelegate::~IMSWrapperDelegate((IMSWrapperDelegate *)((char *)this - 56));
}

{
  IMSWrapperDelegate::~IMSWrapperDelegate((IMSWrapperDelegate *)((char *)this - 56));
  JUMPOUT(0x1C3B87100);
}

_QWORD *ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::SharedRef(_QWORD *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
    CFRetain(cf);
  return a1;
}

_QWORD *ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::SharedRef(_QWORD *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
    CFRetain(cf);
  return a1;
}

std::string *ims::CallIncomingInfo::CallIncomingInfo(std::string *this, const ims::CallIncomingInfo *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  LOWORD(this[4].__r_.__value_.__l.__data_) = *((_WORD *)a2 + 48);
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 104), *((const std::string::value_type **)a2 + 13), *((_QWORD *)a2 + 14));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a2 + 104);
    this[5].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 15);
    *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = v8;
  }
  this[5].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 16);
  this[5].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 17);
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(this + 6, *((const std::string::value_type **)a2 + 18), *((_QWORD *)a2 + 19));
  }
  else
  {
    v9 = *((_OWORD *)a2 + 9);
    this[6].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 20);
    *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = v9;
  }
  v10 = this + 7;
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 21), *((_QWORD *)a2 + 22));
  }
  else
  {
    v11 = *(_OWORD *)((char *)a2 + 168);
    this[7].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 23);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  return this;
}

void sub_1BF08BEE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  if (*(char *)(v1 + 167) < 0)
    operator delete(*v6);
  if (*(char *)(v1 + 127) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

ims::aka::Request *ims::aka::Request::Request(ims::aka::Request *this, const ims::aka::Request *a2)
{
  __int16 v4;

  v4 = *(_WORD *)a2;
  *((_QWORD *)this + 1) = 0;
  *(_WORD *)this = v4;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)this + 1, *((const void **)a2 + 1), *((_QWORD *)a2 + 2), *((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1));
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)this + 4, *((const void **)a2 + 4), *((_QWORD *)a2 + 5), *((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4));
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)this + 7, *((const void **)a2 + 7), *((_QWORD *)a2 + 8), *((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7));
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)this + 10, *((const void **)a2 + 10), *((_QWORD *)a2 + 11), *((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10));
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)this + 13, *((const void **)a2 + 13), *((_QWORD *)a2 + 14), *((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13));
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  return this;
}

void sub_1BF08C044(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v7 = *v5;
  if (*v5)
  {
    v1[11] = v7;
    operator delete(v7);
  }
  v8 = *v4;
  if (*v4)
  {
    v1[8] = v8;
    operator delete(v8);
  }
  v9 = *v3;
  if (*v3)
  {
    v1[5] = v9;
    operator delete(v9);
  }
  v10 = *v2;
  if (*v2)
  {
    v1[2] = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<ims::RegistrationIdentity>::__init_with_size[abi:ne180100]<ims::RegistrationIdentity*,ims::RegistrationIdentity*>(uint64_t result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v4;
  std::string *v7;
  std::string *v8;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  _QWORD v13[3];
  uint64_t v14;
  std::string *v15;
  std::string *v16;

  if (a4)
  {
    v4 = (_QWORD *)result;
    if (a4 >> 59)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v7 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<RTCPSDesItem>>(result + 16, a4);
    v8 = v7;
    *v4 = v7;
    v4[1] = v7;
    v4[2] = (char *)v7 + 32 * v9;
    v15 = v7;
    v16 = v7;
    v13[0] = v4 + 2;
    v13[1] = &v15;
    v13[2] = &v16;
    v14 = 0;
    if (a2 != a3)
    {
      v10 = v7;
      do
      {
        if (*((char *)a2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
          v12 = v16;
        }
        else
        {
          v11 = *a2;
          v10->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
          v12 = v10;
        }
        LODWORD(v10[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6);
        a2 += 2;
        v10 = (std::string *)((char *)v12 + 32);
        v16 = (std::string *)((char *)v12 + 32);
      }
      while (a2 != a3);
      v8 = (std::string *)((char *)v12 + 32);
    }
    LOBYTE(v14) = 1;
    result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ims::RegistrationIdentity>,ims::RegistrationIdentity*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
    v4[1] = v8;
  }
  return result;
}

void sub_1BF08C1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<ims::RegistrationIdentity>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ims::RegistrationIdentity>,ims::RegistrationIdentity*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t i;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 8);
    for (i = **(_QWORD **)(a1 + 16); i != v3; i -= 32)
    {
      if (*(char *)(i - 9) < 0)
        operator delete(*(void **)(i - 32));
    }
  }
  return a1;
}

std::string *ims::MessageInfo::MessageInfo(std::string *this, const ims::MessageInfo *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  }
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(this[5].__r_.__value_.__r.__words, *((const void **)a2 + 15), *((_QWORD *)a2 + 16), *((_QWORD *)a2 + 16) - *((_QWORD *)a2 + 15));
  return this;
}

void sub_1BF08C360(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

const void **ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(const void **a1, const void **a2)
{
  const void *v3;

  v3 = *a2;
  *a1 = *a2;
  if (v3)
    CFRetain(v3);
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::CallEventDelegate>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

SipTerminationLockBase *__copy_helper_block_e8_40c54_ZTS23SipTypedTerminationLockI21SipThreadSafeLockableE(uint64_t a1, uint64_t a2)
{
  return SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock((SipTerminationLockBase *)(a1 + 40), a2 + 40);
}

uint64_t __destroy_helper_block_e8_40c54_ZTS23SipTypedTerminationLockI21SipThreadSafeLockableE(uint64_t a1)
{
  return SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock(a1 + 40);
}

void ice::Client::regIndication<int({block_pointer}&)(unsigned char *,unsigned int)>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  const void *aBlock;
  void *v4;

  v4 = 0;
  ice::detail::wrapCallback<int>(*a3, &v4);
  aBlock = v4;
  v4 = 0;
  ice::Client::regIndicationInternal();
  if (aBlock)
    _Block_release(aBlock);
  if (v4)
    _Block_release(v4);
}

void sub_1BF08C4DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, void *a10)
{
  if (aBlock)
    _Block_release(aBlock);
  if (a10)
    _Block_release(a10);
  _Unwind_Resume(exception_object);
}

BOOL IBINasClient::isInitialized(IBINasClient *this)
{
  return *((_DWORD *)this + 81) == 2;
}

_QWORD *IBINasClient::logPrefix(IBINasClient *this, ImsOutStream *a2)
{
  _QWORD *result;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"IBINasClient: ", 14);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

void IBINasClient::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "IBINasClient");
}

void `non-virtual thunk to'IBINasClient::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "IBINasClient");
}

_QWORD *`non-virtual thunk to'IBINasClient::logPrefix(IBINasClient *this, ImsOutStream *a2)
{
  _QWORD *result;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"IBINasClient: ", 14);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

SipTerminationLockBase *SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock(SipTerminationLockBase *a1, uint64_t *a2, const std::string *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  SipTerminationLockBase::SipTerminationLockBase(a1, a3);
  *v5 = &off_1E78D9290;
  v5[4] = 0;
  v6 = v5 + 4;
  v5[5] = 0;
  std::shared_ptr<IpAddress>::operator=[abi:ne180100](v5 + 4, a2);
  v7 = *v6;
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 5);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 32))(v7, (_QWORD *)a1 + 1);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return a1;
}

void sub_1BF08C678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  void **v11;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v10);
  *(_QWORD *)v9 = off_1E78BC5D8;
  if (*(char *)(v9 + 31) < 0)
    operator delete(*v11);
  _Unwind_Resume(a1);
}

void SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock(uint64_t a1)
{
  SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a1 = &off_1E78D9290;
  v3 = a1 + 32;
  v2 = *(_QWORD *)(a1 + 32);
  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v2)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1 + 8);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3);
  *(_QWORD *)a1 = off_1E78BC5D8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

SipTerminationLockBase *SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock(SipTerminationLockBase *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  SipTerminationLockBase::SipTerminationLockBase(a1, (const std::string *)(a2 + 8));
  *v4 = &off_1E78D9290;
  v4[4] = 0;
  v5 = v4 + 4;
  v4[5] = 0;
  std::shared_ptr<IpAddress>::operator=[abi:ne180100](v4 + 4, (uint64_t *)(a2 + 32));
  v6 = *v5;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a1 + 5);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (v6)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 32))(v6, (_QWORD *)a1 + 1);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_1BF08C86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  void **v11;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v10);
  *(_QWORD *)v9 = off_1E78BC5D8;
  if (*(char *)(v9 + 31) < 0)
    operator delete(*v11);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void SipAuthScheme::SipAuthScheme(SipAuthScheme *this, const SipAuthScheme *a2)
{
  *(_QWORD *)this = off_1E78D92D8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  if (this != a2)
  {
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>((_QWORD *)this + 1, *((uint64_t **)a2 + 3), 0);
  }
}

void sub_1BF08C9C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

ImsOutStream *SipAuthScheme::encode(SipAuthScheme *this, ImsOutStream *a2, uint64_t a3)
{
  const std::string *v6;
  uint64_t *v7;
  char v8;
  _QWORD *v9;
  _BOOL4 v10;
  _QWORD *v11;
  std::string v13;
  void *__p[2];
  __int128 v15;
  uint64_t v16;

  v6 = (const std::string *)(*(uint64_t (**)(SipAuthScheme *))(*(_QWORD *)this + 40))(this);
  LoggableString::LoggableString((std::string *)__p, v6);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" ", 1);
  *((_BYTE *)a2 + 17) = 0;
  if (SBYTE7(v15) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = 0u;
  v15 = 0u;
  v16 = 1065353216;
  (*(void (**)(SipAuthScheme *, void **, uint64_t))(*(_QWORD *)this + 8))(this, __p, a3);
  v7 = (uint64_t *)v15;
  if ((_QWORD)v15)
  {
    v8 = 1;
    do
    {
      if ((v8 & 1) == 0)
      {
        v9 = (_QWORD *)*((_QWORD *)a2 + 1);
        v13.__r_.__value_.__s.__data_[0] = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
        *((_BYTE *)a2 + 17) = 0;
      }
      LoggableString::LoggableString(&v13, (const std::string *)(v7 + 2));
      (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &v13);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
      v10 = isDirectiveWhitelisted((unsigned __int16 *)v7 + 8);
      v11 = (_QWORD *)*((_QWORD *)a2 + 1);
      if (v10)
      {
        v13.__r_.__value_.__s.__data_[0] = 61;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v13, 1);
        *((_BYTE *)a2 + 17) = 0;
        LoggableString::LoggableString(&v13, (const std::string *)(v7 + 5));
        (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &v13);
        if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v13.__r_.__value_.__l.__data_);
      }
      else
      {
        v13.__r_.__value_.__s.__data_[0] = 61;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v13, 1);
        *((_BYTE *)a2 + 17) = 0;
        (*(void (**)(ImsOutStream *, uint64_t *))(*(_QWORD *)a2 + 32))(a2, v7 + 5);
      }
      v8 = 0;
      v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  return a2;
}

void sub_1BF08CB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&__p);
  _Unwind_Resume(a1);
}

BOOL isDirectiveWhitelisted(unsigned __int16 *a1)
{
  uint64_t v1;
  int v2;
  unsigned __int16 *v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  unsigned __int16 *v7;
  int v9;
  int v10;
  unsigned __int16 *v11;
  int v12;

  v1 = *((unsigned __int8 *)a1 + 23);
  v2 = (char)v1;
  if ((v1 & 0x80u) != 0)
    v1 = *((_QWORD *)a1 + 1);
  if (v1 == 3)
  {
    if (v2 >= 0)
      v7 = a1;
    else
      v7 = *(unsigned __int16 **)a1;
    if (*v7 == 29301 && *((_BYTE *)v7 + 2) == 105)
      return 1;
    v9 = *v7;
    v5 = *((unsigned __int8 *)v7 + 2);
    v6 = v9 == 28529;
    v10 = 112;
  }
  else
  {
    if (v1 == 5)
    {
      if (v2 >= 0)
        v11 = a1;
      else
        v11 = *(unsigned __int16 **)a1;
      v12 = *(_DWORD *)v11;
      v5 = *((unsigned __int8 *)v11 + 4);
      v6 = v12 == 1818322290;
    }
    else
    {
      if (v1 != 9)
        return 0;
      if (v2 >= 0)
        v3 = a1;
      else
        v3 = *(unsigned __int16 **)a1;
      v4 = *(_QWORD *)v3;
      v5 = *((unsigned __int8 *)v3 + 8);
      v6 = v4 == 0x687469726F676C61;
    }
    v10 = 109;
  }
  return v6 && v5 == v10;
}

ImsOutStream *SipAuthScheme::log(SipAuthScheme *this, ImsOutStream *a2)
{
  const std::string *v4;
  uint64_t *i;
  _BOOL4 v6;
  _QWORD *v7;
  std::string v9;
  void *__p[2];
  __int128 v11;
  uint64_t v12;

  v4 = (const std::string *)(*(uint64_t (**)(SipAuthScheme *))(*(_QWORD *)this + 40))(this);
  LoggableString::LoggableString((std::string *)__p, v4);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (SBYTE7(v11) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = 0u;
  v11 = 0u;
  v12 = 1065353216;
  (*(void (**)(SipAuthScheme *, void **, uint64_t))(*(_QWORD *)this + 8))(this, __p, 1);
  for (i = (uint64_t *)v11; i; i = (uint64_t *)*i)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  ", 2);
    *((_BYTE *)a2 + 17) = 0;
    LoggableString::LoggableString(&v9, (const std::string *)(i + 2));
    (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &v9);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    v6 = isDirectiveWhitelisted((unsigned __int16 *)i + 8);
    v7 = (_QWORD *)*((_QWORD *)a2 + 1);
    if (v6)
    {
      v9.__r_.__value_.__s.__data_[0] = 61;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v9, 1);
      *((_BYTE *)a2 + 17) = 0;
      LoggableString::LoggableString(&v9, (const std::string *)(i + 5));
      (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &v9);
      (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((_BYTE *)a2 + 17) = 0;
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v9.__r_.__value_.__l.__data_);
    }
    else
    {
      v9.__r_.__value_.__s.__data_[0] = 61;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v9, 1);
      *((_BYTE *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, uint64_t *))(*(_QWORD *)a2 + 32))(a2, i + 5);
      (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((_BYTE *)a2 + 17) = 0;
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  return a2;
}

void sub_1BF08CEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t SipAuthScheme::encodeDirectives(uint64_t a1, uint64_t a2)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  __int128 v14;
  uint64_t v15;
  _OWORD v16[4];
  void *__p[2];
  __int128 v18;
  __int128 v19;
  _BYTE v20[144];
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 *v25;

  v2 = *(__int128 **)(a1 + 24);
  if (v2)
  {
    v3 = *MEMORY[0x1E0DE4F60];
    v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v5 = MEMORY[0x1E0DE4FB8] + 16;
    do
    {
      v23 = 0u;
      v24 = 0u;
      v22 = 0u;
      std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)&v22, v2 + 1);
      v21 = 0;
      memset(v20, 0, sizeof(v20));
      v18 = 0u;
      v19 = 0u;
      *(_OWORD *)__p = 0u;
      memset(v16, 0, sizeof(v16));
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
      LOBYTE(v14) = 34;
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v14, 1);
      if (v24 >= 0)
        v7 = (char *)&v23 + 8;
      else
        v7 = (char *)*((_QWORD *)&v23 + 1);
      if (v24 >= 0)
        v8 = HIBYTE(v24);
      else
        v8 = v24;
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
      LOBYTE(v14) = 34;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v14, 1);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16 + 8, &v14);
      v25 = &v22;
      v10 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)&v22, (uint64_t)&std::piecewise_construct, &v25);
      v11 = v10 + 40;
      if ((char)v10[63] < 0)
        operator delete(*(void **)v11);
      *(_OWORD *)v11 = v14;
      *((_QWORD *)v11 + 2) = v15;
      *(_QWORD *)&v16[0] = v3;
      *(_QWORD *)((char *)v16 + *(_QWORD *)(v3 - 24)) = v4;
      *((_QWORD *)&v16[0] + 1) = v5;
      if (SHIBYTE(v18) < 0)
        operator delete(__p[1]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C3B8707C](v20);
      if (SHIBYTE(v24) < 0)
        operator delete(*((void **)&v23 + 1));
      if (SBYTE7(v23) < 0)
        operator delete((void *)v22);
      v2 = *(__int128 **)v2;
    }
    while (v2);
  }
  return 1;
}

void sub_1BF08D0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  std::ostringstream::~ostringstream((uint64_t)&a16);
  ims::AccessNetwork::~AccessNetwork((void **)(v16 - 160));
  _Unwind_Resume(a1);
}

uint64_t SipAuthScheme::parseDirective(uint64_t a1, __int128 *a2, const std::string *a3)
{
  unsigned __int8 *v4;
  __int128 *v6;

  v6 = a2;
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 8, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v6);
  std::string::operator=((std::string *)(v4 + 40), a3);
  return 1;
}

uint64_t SipAuthScheme::createFromString(uint64_t a1)
{
  const char *v2;
  std::string *v3;
  std::string::size_type size;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  std::string *p_str;
  _BYTE *v11;
  std::string::size_type v12;
  BOOL v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t *i;
  _BYTE *v18;
  void *__p[2];
  __int128 v21;
  uint64_t v22;
  std::string v23;
  std::string *v24;
  std::string v25;
  std::string v26;
  std::string __str;

  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)"Digest";
  v23.__r_.__value_.__r.__words[2] = 0x600000000000000;
  std::string::push_back(&v23, 32);
  if (*(char *)(a1 + 23) >= 0)
    v2 = (const char *)a1;
  else
    v2 = *(const char **)a1;
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v23;
  else
    v3 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  else
    size = v23.__r_.__value_.__l.__size_;
  if (!strncasecmp(v2, (const char *)v3, size))
  {
    *(_OWORD *)__p = 0u;
    v21 = 0u;
    v22 = 1065353216;
    memset(&__str, 0, sizeof(__str));
    while (1)
    {
      size = ims::nextTokenQ((std::string *)a1, size, &__str, 0x2Cu);
      if (size == -1)
        break;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v9 = __str.__r_.__value_.__l.__size_;
      if (!v9
        || ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (p_str = &__str)
          : (p_str = (std::string *)__str.__r_.__value_.__r.__words[0]),
            (v11 = memchr(p_str, 61, v9), v12 = v11 - (_BYTE *)p_str, v11) ? (v13 = v12 == -1) : (v13 = 1),
            v13))
      {
        std::string::basic_string[abi:ne180100]<0>(&v26, "auth");
        std::string::basic_string[abi:ne180100]<0>(&v25, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v15 = ImsLogger::error(ims::_logger, (uint64_t)&v26, (uint64_t)&v25);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Invalid auth header: missing equals at ", 39);
        *(_BYTE *)(v15 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v15 + 32))(v15, &__str);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v15 + 17) = 0;
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v25.__r_.__value_.__l.__data_);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26.__r_.__value_.__l.__data_);
        break;
      }
      memset(&v26, 0, sizeof(v26));
      std::string::basic_string(&v26, &__str, 0, v12, (std::allocator<char> *)&v25);
      memset(&v25, 0, sizeof(v25));
      std::string::basic_string(&v25, &__str, v12 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v24);
      ims::chomp(&v25, "\r\n\t \"", 3);
      v24 = &v26;
      v14 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, (unsigned __int8 *)&v26, (uint64_t)&std::piecewise_construct, (__int128 **)&v24);
      std::string::operator=((std::string *)(v14 + 40), &v25);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (size == -1)
    {
      v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(__p, "algorithm");
      if (v16 && !std::string::compare((const std::string *)(v16 + 40), 0, 3uLL, "AKA"))
      {
        v8 = operator new();
        *(_OWORD *)(v8 + 24) = 0u;
        *(_OWORD *)(v8 + 8) = 0u;
        *(_DWORD *)(v8 + 40) = 1065353216;
        *(_QWORD *)(v8 + 168) = 0;
        *(_QWORD *)(v8 + 176) = 0;
        *(_QWORD *)(v8 + 160) = 0;
        *(_DWORD *)(v8 + 48) = 0;
        *(_OWORD *)(v8 + 56) = 0u;
        *(_OWORD *)(v8 + 72) = 0u;
        *(_OWORD *)(v8 + 88) = 0u;
        *(_OWORD *)(v8 + 104) = 0u;
        *(_OWORD *)(v8 + 120) = 0u;
        *(_OWORD *)(v8 + 136) = 0u;
        *(_BYTE *)(v8 + 152) = 0;
        *(_QWORD *)v8 = &off_1E78C5E10;
        *(_OWORD *)(v8 + 264) = 0u;
        *(_OWORD *)(v8 + 280) = 0u;
        *(_OWORD *)(v8 + 296) = 0u;
        *(_DWORD *)(v8 + 320) = 2;
        SipDigestAuthScheme::clear((SipDigestAuthScheme *)v8);
        *(_OWORD *)(v8 + 246) = 0u;
        *(_OWORD *)(v8 + 232) = 0u;
        *(_OWORD *)(v8 + 216) = 0u;
        *(_OWORD *)(v8 + 200) = 0u;
        *(_OWORD *)(v8 + 184) = 0u;
        *(_QWORD *)(v8 + 272) = *(_QWORD *)(v8 + 264);
        *(_QWORD *)(v8 + 296) = *(_QWORD *)(v8 + 288);
        *(_DWORD *)(v8 + 312) = 0;
        *(_BYTE *)(v8 + 316) = 0;
      }
      else
      {
        v8 = operator new();
        *(_OWORD *)(v8 + 24) = 0u;
        *(_OWORD *)(v8 + 8) = 0u;
        *(_DWORD *)(v8 + 40) = 1065353216;
        *(_QWORD *)(v8 + 168) = 0;
        *(_QWORD *)(v8 + 176) = 0;
        *(_QWORD *)(v8 + 160) = 0;
        *(_DWORD *)(v8 + 48) = 0;
        *(_OWORD *)(v8 + 56) = 0u;
        *(_OWORD *)(v8 + 72) = 0u;
        *(_OWORD *)(v8 + 88) = 0u;
        *(_OWORD *)(v8 + 104) = 0u;
        *(_OWORD *)(v8 + 120) = 0u;
        *(_OWORD *)(v8 + 136) = 0u;
        *(_BYTE *)(v8 + 152) = 0;
        *(_QWORD *)v8 = &off_1E78DB7F0;
        *(_OWORD *)(v8 + 184) = 0u;
        *(_OWORD *)(v8 + 200) = 0u;
        *(_OWORD *)(v8 + 216) = 0u;
      }
      for (i = (uint64_t *)v21; i; i = (uint64_t *)*i)
      {
        if (((**(uint64_t (***)(uint64_t, uint64_t, uint64_t))v8)(v8, (uint64_t)(i + 2), (uint64_t)(i + 5)) & 1) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(&__str, "sip.decode");
          std::string::basic_string[abi:ne180100]<0>(&v26, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v18 = (_BYTE *)ImsLogger::error(ims::_logger, (uint64_t)&__str, (uint64_t)&v26);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)v18 + 1), (uint64_t)"Unable to parse auth directive: ", 32);
          v18[17] = 0;
          LoggableString::LoggableString(&v25, (const std::string *)(i + 2));
          (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v18 + 40))(v18, &v25);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)v18 + 1), (uint64_t)"=", 1);
          v18[17] = 0;
          (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v18 + 32))(v18, i + 5);
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v18[17] = 0;
          if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v25.__r_.__value_.__l.__data_);
          if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v26.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
    }
    else
    {
      v8 = 0;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "auth");
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"I only support Digest authentication", 36);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SBYTE7(v21) < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "auth");
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = (_BYTE *)ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)&__str);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v6 + 32))(v6, a1);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v6[17] = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SBYTE7(v21) < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "auth");
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"doesn't start with '", 20);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v7 + 32))(v7, &v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SBYTE7(v21) < 0)
      operator delete(__p[0]);
    v8 = 0;
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  return v8;
}

void sub_1BF08D8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a9);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 2), (const std::string *)(v4 + 2));
        std::string::operator=((std::string *)(v8 + 5), (const std::string *)(v4 + 5));
        v10 = (_QWORD *)*v8;
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1, v8);
        v4 = (uint64_t *)*v4;
        if (!v10)
          break;
        v8 = v10;
      }
      while (v4 != a3);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(a1, (__int128 *)v4 + 1);
    v4 = (uint64_t *)*v4;
  }
}

void sub_1BF08DA7C(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1BF08DA98(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 *inserted;

  v4 = (unsigned __int8 *)(a2 + 2);
  v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  a2[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  float v7;
  unint64_t v8;
  float v9;
  _BOOL8 v10;
  unint64_t v11;
  unint64_t v12;
  int8x8_t prime;
  void *v14;
  void *v15;
  uint64_t v16;
  unsigned __int8 **v17;
  unint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  int v28;
  unsigned __int8 *v29;
  void *v30;
  uint8x8_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v41;
  unsigned __int8 *v42;

  v6 = a1 + 32;
  v7 = *(float *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    v10 = 1;
    if (v8 >= 3)
      v10 = (v8 & (v8 - 1)) != 0;
    v11 = v10 | (2 * v8);
    v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12)
      prime = (int8x8_t)v12;
    else
      prime = (int8x8_t)v11;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    v42 = a3;
    if (*(_QWORD *)&prime > v8)
    {
LABEL_13:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = operator new(8 * *(_QWORD *)&prime);
      v15 = *(void **)a1;
      *(_QWORD *)a1 = v14;
      if (v15)
        operator delete(v15);
      v16 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v16++) = 0;
      while (*(_QWORD *)&prime != v16);
      v17 = *(unsigned __int8 ***)(a1 + 16);
      if (v17)
      {
        v18 = (unint64_t)v17[1];
        v19 = (uint8x8_t)vcnt_s8(prime);
        v19.i16[0] = vaddlv_u8(v19);
        v20 = v19.u32[0];
        if (v19.u32[0] > 1uLL)
        {
          if (v18 >= *(_QWORD *)&prime)
            v18 %= *(_QWORD *)&prime;
        }
        else
        {
          v18 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = a1 + 16;
        v24 = *v17;
        if (*v17)
        {
          v41 = v19.u32[0];
          do
          {
            v25 = *((_QWORD *)v24 + 1);
            if (v20 > 1)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            if (v25 == v18)
            {
              v17 = (unsigned __int8 **)v24;
            }
            else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v25))
            {
              v26 = *(unsigned __int8 **)v24;
              if (*(_QWORD *)v24)
              {
                v27 = v24;
                while (1)
                {
                  v28 = std::equal_to<std::string>::operator()[abi:ne180100](v6, v24 + 16, v26 + 16);
                  v29 = *(unsigned __int8 **)v27;
                  if (!v28)
                    break;
                  v26 = *(unsigned __int8 **)v29;
                  v27 = *(unsigned __int8 **)v27;
                  if (!*(_QWORD *)v29)
                    goto LABEL_46;
                }
                v26 = *(unsigned __int8 **)v27;
                v29 = v27;
LABEL_46:
                v20 = v41;
              }
              else
              {
                v29 = v24;
              }
              *v17 = v26;
              *(_QWORD *)v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v25);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v25) = v24;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v17;
              v17 = (unsigned __int8 **)v24;
              v18 = v25;
            }
            v24 = *v17;
          }
          while (*v17);
        }
      }
      goto LABEL_58;
    }
    if (*(_QWORD *)&prime < v8)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (*(_QWORD *)&prime <= v21)
        prime = (int8x8_t)v21;
      if (*(_QWORD *)&prime < v8)
      {
        if (prime)
          goto LABEL_13;
        v30 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v30)
          operator delete(v30);
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_58:
    v8 = *(_QWORD *)(a1 + 8);
    a3 = v42;
  }
  v31 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v31.i16[0] = vaddlv_u8(v31);
  v32 = v31.u32[0];
  if (v31.u32[0] > 1uLL)
  {
    v33 = a2;
    if (v8 <= a2)
      v33 = a2 % v8;
  }
  else
  {
    v33 = (v8 - 1) & a2;
  }
  v34 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v33);
  if (v34)
  {
    v35 = *(unsigned __int8 **)v34;
    if (*(_QWORD *)v34)
    {
      v36 = 0;
      do
      {
        v37 = *((_QWORD *)v35 + 1);
        if (v32 > 1)
        {
          v38 = *((_QWORD *)v35 + 1);
          if (v37 >= v8)
            v38 = v37 % v8;
        }
        else
        {
          v38 = v37 & (v8 - 1);
        }
        if (v38 != v33)
          break;
        v39 = v37 == a2 ? std::equal_to<std::string>::operator()[abi:ne180100](v6, v35 + 16, a3) : 0;
        if ((v36 & (v39 ^ 1) & 1) != 0)
          break;
        v36 |= v39;
        v34 = *(unsigned __int8 **)v34;
        v35 = *(unsigned __int8 **)v34;
      }
      while (*(_QWORD *)v34);
    }
  }
  return v34;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(_QWORD *a1, __int128 *a2)
{
  _QWORD *inserted;
  _QWORD *v5[3];

  memset(v5, 0, sizeof(v5));
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a2, v5);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_1BF08DFE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  char *v7;
  unint64_t result;

  v6 = a1 + 16;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  a3[1] = v6;
  *((_BYTE *)a3 + 16) = 0;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v7 + 16), a2);
  *((_BYTE *)a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 16));
  *((_QWORD *)v7 + 1) = result;
  return result;
}

void sub_1BF08E078(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void ImsLogStream::~ImsLogStream(ImsLogStream *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E78D9358;
  v2 = *((_QWORD *)this + 4);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = &off_1E78D7A10;
  if (*((_BYTE *)this + 16))
  {
    v3 = *((_QWORD *)this + 1);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
}

{
  ImsLogStream::~ImsLogStream(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t ImsLogDestinationStderr::output(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v12;
  const char *v13;
  const char *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  size_t v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  size_t v26;
  _QWORD *v27;
  _QWORD *v28;
  size_t v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  std::locale v33;

  if (*(char *)(a4 + 23) >= 0)
    v8 = *(unsigned __int8 *)(a4 + 23);
  else
    v8 = *(_QWORD *)(a4 + 8);
  v9 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v10 = v9;
  }
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], a2, v10);
  v12 = a3 - 3;
  if (v8)
  {
    if (v12 > 5)
      v13 = "?";
    else
      v13 = off_1E78D9758[v12];
    v15 = strlen(v13);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v15);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"[", 1);
    v18 = *(char *)(a4 + 23);
    if (v18 >= 0)
      v19 = a4;
    else
      v19 = *(_QWORD *)a4;
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(a4 + 23);
    else
      v20 = *(_QWORD *)(a4 + 8);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"]: ", 3);
    v23 = strlen(a5);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)a5, v23);
    std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
    v25 = std::locale::use_facet(&v33, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
  }
  else
  {
    if (v12 > 5)
      v14 = "?";
    else
      v14 = off_1E78D9758[v12];
    v26 = strlen(v14);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v14, v26);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)": ", 2);
    v29 = strlen(a5);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)a5, v29);
    std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(_QWORD *)(*v30 - 24)));
    v31 = std::locale::use_facet(&v33, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
  }
  std::locale::~locale(&v33);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_1BF08E324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

_QWORD *ImsLogDestinationStderr::createFromString(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int *v4;
  int v5;
  int v6;
  _QWORD *result;

  v2 = *(unsigned __int8 *)(a2 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (v2 != 6)
    return 0;
  v4 = v3 >= 0 ? (int *)a2 : *(int **)a2;
  v5 = *v4;
  v6 = *((unsigned __int16 *)v4 + 2);
  if (v5 != 1701082227 || v6 != 29298)
    return 0;
  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *((_DWORD *)result + 4) = 8;
  *result = &off_1E78D9550;
  return result;
}

uint64_t ImsLogDestinationSyslog::createFromString(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int *v4;
  int v5;
  int v6;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a2 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (v2 != 6)
    return 0;
  v4 = v3 >= 0 ? (int *)a2 : *(int **)a2;
  v5 = *v4;
  v6 = *((unsigned __int16 *)v4 + 2);
  if (v5 != 1819507059 || v6 != 26479)
    return 0;
  result = operator new();
  *(_DWORD *)(result + 16) = 8;
  *(_QWORD *)result = &off_1E78D93C0;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

void ImsLogDestinationSyslog::output(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  int v5;

  if (a3 >= 7)
    v5 = 7;
  else
    v5 = a3;
  syslog(v5, "%s", a5);
}

void ImsLogDestinationOslog::~ImsLogDestinationOslog(ImsLogDestinationOslog *this)
{
  void *v1;

  *(_QWORD *)this = &off_1E78D9408;
  v1 = (void *)*((_QWORD *)this + 3);
  if (v1)
    os_release(v1);
}

{
  ImsLogDestinationOslog::~ImsLogDestinationOslog(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t ImsLogDestinationOslog::createFromString(int a1, std::string *this)
{
  std::string::size_type v3;
  uint64_t v4;
  std::string::size_type size;
  std::string *v6;
  int data;
  int v8;
  std::string::size_type v10;
  std::string::size_type v11;
  std::string *v12;
  std::string v14;
  std::string v15;
  char v16;

  v3 = std::string::find(this, 58, 0);
  memset(&v15, 0, sizeof(v15));
  std::string::basic_string(&v15, this, 0, v3, (std::allocator<char> *)&v14);
  v4 = 0;
  size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v15.__r_.__value_.__l.__size_;
  if (size == 5)
  {
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v15;
    else
      v6 = (std::string *)v15.__r_.__value_.__r.__words[0];
    data = (int)v6->__r_.__value_.__l.__data_;
    v8 = v6->__r_.__value_.__s.__data_[4];
    if (data == 1869378415 && v8 == 103)
    {
      if (v3 == -1)
        goto LABEL_21;
      v10 = v3 + 1;
      v11 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v11 & 0x80u) != 0)
        v11 = this->__r_.__value_.__l.__size_;
      if (v10 >= v11)
      {
LABEL_21:
        v4 = operator new();
        *(_QWORD *)v4 = &off_1E78D9408;
        *(_QWORD *)(v4 + 8) = 0;
        *(_QWORD *)(v4 + 24) = 0;
        *(_DWORD *)(v4 + 16) = 7;
      }
      else
      {
        v4 = operator new();
        std::string::basic_string(&v14, this, v10, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v16);
        *(_QWORD *)v4 = &off_1E78D9408;
        *(_QWORD *)(v4 + 8) = 0;
        if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = &v14;
        else
          v12 = (std::string *)v14.__r_.__value_.__r.__words[0];
        *(_QWORD *)(v4 + 24) = os_log_create("com.apple.ipTelephony", (const char *)v12);
        *(_DWORD *)(v4 + 16) = 7;
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v14.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      v4 = 0;
    }
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF08E698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  MEMORY[0x1C3B87100](v18, 0x10A1C4088054FEALL);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ImsLoggerStreambuf::overflow(char **this, int a2)
{
  char v2;

  if (a2 != -1)
  {
    v2 = a2;
    ImsLoggerStreambuf::dump((ImsLoggerStreambuf *)this, this[6]);
    *this[6]++ = v2;
  }
  return 0;
}

uint64_t ImsLogFacility::ImsLogFacility(uint64_t a1, const std::string *a2, uint64_t a3)
{
  std::string *v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_1E78D94D0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (std::string *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  v7 = a1 + 40;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 88), 0);
  *(_BYTE *)(a1 + 152) = 0;
  std::string::operator=(v6, a2);
  *(_QWORD *)(a1 + 32) = a3;
  std::__hash_table<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>>>::clear(v7);
  *(_DWORD *)(a1 + 80) = 4;
  return a1;
}

void sub_1BF08E7B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  pthread_mutex_t *v4;

  pthread_mutex_destroy(v4);
  std::__hash_table<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>>>::~__hash_table(v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void ImsLogFacility::~ImsLogFacility(ImsLogFacility *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E78D94D0;
  v2 = (char *)this + 40;
  std::__hash_table<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>>>::clear((uint64_t)this + 40);
  *((_DWORD *)this + 20) = 4;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 88));
  std::__hash_table<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>>>::~__hash_table((uint64_t)v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  ImsLogFacility::~ImsLogFacility(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t ImsLogFacility::streamForPriority(ImsLogFacility *this, int a2)
{
  uint64_t v3;
  uint64_t NullStream;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  uint64_t **v22;
  uint64_t *j;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  int8x8_t prime;
  void *v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  void *v54;
  pthread_mutex_t *v55;
  _QWORD v56[9];

  if (*((_DWORD *)this + 20) < a2)
  {
    v3 = *((_QWORD *)this + 4);
    NullStream = *(_QWORD *)(v3 + 264);
    if (!NullStream)
    {
      NullStream = ims::createNullStream(this);
      *(_QWORD *)(v3 + 264) = NullStream;
    }
    return NullStream;
  }
  v55 = 0;
  ImsLock::set((pthread_mutex_t *)((char *)this + 88), &v55, (uint64_t)v56);
  ImsResult::~ImsResult((ImsResult *)v56);
  v6 = a2;
  v7 = *((_QWORD *)this + 6);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = a2;
      if (v7 <= a2)
        v9 = a2 % v7;
    }
    else
    {
      v9 = (v7 - 1) & a2;
    }
    v10 = *(uint64_t ***)(*((_QWORD *)this + 5) + 8 * v9);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
          {
            NullStream = i[3];
            goto LABEL_104;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v12 >= v7)
              v12 %= v7;
          }
          else
          {
            v12 &= v7 - 1;
          }
          if (v12 != v9)
            break;
        }
      }
    }
  }
  v13 = (char *)operator new();
  std::streambuf::basic_streambuf();
  *(_QWORD *)v13 = &off_1E78D9450;
  *((_QWORD *)v13 + 10) = 0;
  *((_QWORD *)v13 + 11) = 0;
  *((_QWORD *)v13 + 12) = 0;
  *((_QWORD *)v13 + 9) = this;
  *((_DWORD *)v13 + 16) = a2;
  std::vector<char>::__append((std::vector<char> *)(v13 + 80), 0x402uLL);
  v14 = *((_QWORD *)v13 + 10);
  *((_QWORD *)v13 + 5) = v14;
  *((_QWORD *)v13 + 6) = v14;
  *((_QWORD *)v13 + 7) = v14 + 1024;
  v15 = (std::__shared_weak_count *)operator new(0x40uLL);
  v15->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D9688;
  v17 = operator new();
  v18 = MEMORY[0x1E0DE4FA0];
  *(_QWORD *)(v17 + 8) = MEMORY[0x1E0DE4FA0] + 64;
  *(_QWORD *)v17 = v18 + 24;
  std::ios_base::init((std::ios_base *)(v17 + 8), v13);
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D96D8;
  *(_QWORD *)(v17 + 144) = 0;
  *(_DWORD *)(v17 + 152) = -1;
  v15[1].__shared_owners_ = v17;
  LOWORD(v15[1].__shared_weak_owners_) = 1;
  v15[2].__vftable = (std::__shared_weak_count_vtbl *)this;
  v15[2].__shared_owners_ = (uint64_t)v13;
  v19 = *((_QWORD *)this + 6);
  if (v19)
  {
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      v21 = a2;
      if (v19 <= a2)
        v21 = a2 % v19;
    }
    else
    {
      v21 = (v19 - 1) & a2;
    }
    v22 = *(uint64_t ***)(*((_QWORD *)this + 5) + 8 * v21);
    if (v22)
    {
      for (j = *v22; j; j = (uint64_t *)*j)
      {
        v24 = j[1];
        if (v24 == a2)
        {
          if (*((_DWORD *)j + 4) == a2)
            goto LABEL_93;
        }
        else
        {
          if (v20.u32[0] > 1uLL)
          {
            if (v24 >= v19)
              v24 %= v19;
          }
          else
          {
            v24 &= v19 - 1;
          }
          if (v24 != v21)
            break;
        }
      }
    }
  }
  else
  {
    v21 = 0;
  }
  v56[2] = 1;
  v25 = operator new(0x28uLL);
  v26 = (_QWORD *)((char *)this + 56);
  v56[0] = v25;
  v56[1] = (char *)this + 56;
  *v25 = 0;
  v25[1] = a2;
  *((_DWORD *)v25 + 4) = a2;
  v25[3] = 0;
  v25[4] = 0;
  v27 = (float)(unint64_t)(*((_QWORD *)this + 8) + 1);
  v28 = *((float *)this + 18);
  if (!v19 || (float)(v28 * (float)v19) < v27)
  {
    v29 = 1;
    if (v19 >= 3)
      v29 = (v19 & (v19 - 1)) != 0;
    v30 = v29 | (2 * v19);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      prime = (int8x8_t)v31;
    else
      prime = (int8x8_t)v30;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v19 = *((_QWORD *)this + 6);
    }
    if (*(_QWORD *)&prime > v19)
      goto LABEL_49;
    if (*(_QWORD *)&prime < v19)
    {
      v39 = vcvtps_u32_f32((float)*((unint64_t *)this + 8) / *((float *)this + 18));
      if (v19 < 3 || (v40 = (uint8x8_t)vcnt_s8((int8x8_t)v19), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (*(_QWORD *)&prime <= v39)
        prime = (int8x8_t)v39;
      if (*(_QWORD *)&prime >= v19)
      {
        v19 = *((_QWORD *)this + 6);
      }
      else
      {
        if (prime)
        {
LABEL_49:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v33 = operator new(8 * *(_QWORD *)&prime);
          v34 = (void *)*((_QWORD *)this + 5);
          *((_QWORD *)this + 5) = v33;
          if (v34)
            operator delete(v34);
          v35 = 0;
          *((int8x8_t *)this + 6) = prime;
          do
            *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v35++) = 0;
          while (*(_QWORD *)&prime != v35);
          v36 = (_QWORD *)*v26;
          if (*v26)
          {
            v37 = v36[1];
            v38 = (uint8x8_t)vcnt_s8(prime);
            v38.i16[0] = vaddlv_u8(v38);
            if (v38.u32[0] > 1uLL)
            {
              if (v37 >= *(_QWORD *)&prime)
                v37 %= *(_QWORD *)&prime;
            }
            else
            {
              v37 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v37) = v26;
            v42 = (_QWORD *)*v36;
            if (*v36)
            {
              do
              {
                v43 = v42[1];
                if (v38.u32[0] > 1uLL)
                {
                  if (v43 >= *(_QWORD *)&prime)
                    v43 %= *(_QWORD *)&prime;
                }
                else
                {
                  v43 &= *(_QWORD *)&prime - 1;
                }
                if (v43 != v37)
                {
                  v44 = *((_QWORD *)this + 5);
                  if (!*(_QWORD *)(v44 + 8 * v43))
                  {
                    *(_QWORD *)(v44 + 8 * v43) = v36;
                    goto LABEL_74;
                  }
                  *v36 = *v42;
                  *v42 = **(_QWORD **)(*((_QWORD *)this + 5) + 8 * v43);
                  **(_QWORD **)(*((_QWORD *)this + 5) + 8 * v43) = v42;
                  v42 = v36;
                }
                v43 = v37;
LABEL_74:
                v36 = v42;
                v42 = (_QWORD *)*v42;
                v37 = v43;
              }
              while (v42);
            }
          }
          v19 = (unint64_t)prime;
          goto LABEL_78;
        }
        v54 = (void *)*((_QWORD *)this + 5);
        *((_QWORD *)this + 5) = 0;
        if (v54)
          operator delete(v54);
        v19 = 0;
        *((_QWORD *)this + 6) = 0;
      }
    }
LABEL_78:
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v19 <= v6)
        v21 = v6 % v19;
      else
        v21 = v6;
    }
    else
    {
      v21 = (v19 - 1) & v6;
    }
  }
  v45 = *(_QWORD **)(*((_QWORD *)this + 5) + 8 * v21);
  j = (uint64_t *)v56[0];
  if (v45)
  {
    *(_QWORD *)v56[0] = *v45;
LABEL_91:
    *v45 = j;
    goto LABEL_92;
  }
  *(_QWORD *)v56[0] = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = j;
  *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v21) = v26;
  if (*j)
  {
    v46 = *(_QWORD *)(*j + 8);
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v46 >= v19)
        v46 %= v19;
    }
    else
    {
      v46 &= v19 - 1;
    }
    v45 = (_QWORD *)(*((_QWORD *)this + 5) + 8 * v46);
    goto LABEL_91;
  }
LABEL_92:
  v56[0] = 0;
  ++*((_QWORD *)this + 8);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,void *>>>>::reset[abi:ne180100]((uint64_t)v56);
  do
LABEL_93:
    v47 = __ldxr(p_shared_owners);
  while (__stxr(v47 + 1, p_shared_owners));
  v48 = (std::__shared_weak_count *)j[4];
  j[3] = (uint64_t)&v15[1];
  j[4] = (uint64_t)v15;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  NullStream = (uint64_t)&v15[1];
  if (v15)
  {
    v51 = (unint64_t *)&v15->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_104:
  ImsLock::~ImsLock(&v55);
  return NullStream;
}

void sub_1BF08EEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, pthread_mutex_t *a11, char a12)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ImsLock::~ImsLock(&a11);
  _Unwind_Resume(a1);
}

uint64_t ImsLogFacility::dumpState(ImsLogFacility *this, ImsOutStream *a2)
{
  uint64_t result;
  uint64_t *i;
  unsigned int v6;
  const char *v7;
  size_t v8;

  (*(void (**)(ImsOutStream *, char *))(*(_QWORD *)a2 + 32))(a2, (char *)this + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" (", 2);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)")", 1);
  *((_BYTE *)a2 + 17) = 0;
  result = (*(uint64_t (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  for (i = (uint64_t *)*((_QWORD *)this + 7); i; i = (uint64_t *)*i)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    ", 4);
    *((_BYTE *)a2 + 17) = 0;
    v6 = *((_DWORD *)i + 4) - 3;
    v7 = "?";
    if (v6 <= 5)
      v7 = off_1E78D9758[v6];
    v8 = strlen(v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)v7, v8);
    *((_BYTE *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"(", 1);
    *((_BYTE *)a2 + 17) = 0;
    std::ostream::operator<<();
    *((_BYTE *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)") ", 2);
    *((_BYTE *)a2 + 17) = 0;
    result = (*(uint64_t (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
  }
  return result;
}

void ImsLogger::obfuscate(uint64_t a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6;
  void **v7;
  unint64_t v8;
  void *__p[2];
  unsigned __int8 v10;
  std::string __str;

  memset(&__str, 0, sizeof(__str));
  std::string::basic_string[abi:ne180100]<0>(&__str, "xxxxxx");
  v6 = *(_QWORD *)(a1 + 472);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (const void **)(a1 + 448), __p);
  if ((v10 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v8 = v10;
  else
    v8 = (unint64_t)__p[1];
  (*(void (**)(uint64_t, void **, unint64_t, std::string *))(*(_QWORD *)v6 + 24))(v6, v7, v8, &__str);
  if ((char)v10 < 0)
    operator delete(__p[0]);
  std::string::basic_string(a3, &__str, 0, 0xAuLL, (std::allocator<char> *)__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BF08F1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogger::addDestination(ImsLogger *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  ImsLogDestination *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  std::locale v15;

  v3 = (_QWORD *)((char *)a1 + 24);
  v4 = *((_QWORD *)a1 + 4);
  if ((ImsLogger *)v4 == (ImsLogger *)((char *)a1 + 24))
  {
LABEL_4:
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Unknown log destination '", 25);
    v8 = *(char *)(a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *(_QWORD *)a2;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a2 + 23);
    else
      v10 = *(_QWORD *)(a2 + 8);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"'", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
    v13 = std::locale::use_facet(&v15, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v15);
    std::ostream::put();
    std::ostream::flush();
    return 0;
  }
  else
  {
    while (1)
    {
      v6 = (ImsLogDestination *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 16) + 16))(*(_QWORD *)(v4 + 16), a2);
      if (v6)
        return ImsLogger::addDestination(a1, v6);
      v4 = *(_QWORD *)(v4 + 8);
      if ((_QWORD *)v4 == v3)
        goto LABEL_4;
    }
  }
}

void sub_1BF08F354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t ImsLogger::addDestination(ImsLogger *this, ImsLogDestination *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  pthread_mutex_t *v9;
  _BYTE v10[72];

  *((_QWORD *)a2 + 1) = this;
  v4 = (*(uint64_t (**)(ImsLogDestination *))(*(_QWORD *)a2 + 32))(a2);
  if ((_DWORD)v4)
  {
    v9 = 0;
    ImsLock::set((pthread_mutex_t *)((char *)this + 376), &v9, (uint64_t)v10);
    ImsResult::~ImsResult((ImsResult *)v10);
    v5 = operator new(0x18uLL);
    v5[1] = this;
    v5[2] = a2;
    v6 = *(_QWORD *)this;
    *v5 = *(_QWORD *)this;
    *(_QWORD *)(v6 + 8) = v5;
    *(_QWORD *)this = v5;
    ++*((_QWORD *)this + 2);
    v7 = *((_DWORD *)a2 + 4);
    if (v7 > *((_DWORD *)this + 120))
      *((_DWORD *)this + 120) = v7;
    ImsLock::~ImsLock(&v9);
  }
  return v4;
}

void sub_1BF08F418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_mutex_t *a9)
{
  ImsLock::~ImsLock(&a9);
  _Unwind_Resume(a1);
}

_QWORD *ImsLogger::clearDestinations(ImsLogger *this)
{
  uint64_t *i;
  uint64_t v3;
  pthread_mutex_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _BYTE v9[72];

  v6 = (uint64_t)&v6;
  v7 = &v6;
  v8 = 0;
  v5 = 0;
  ImsLock::set((pthread_mutex_t *)((char *)this + 376), &v5, (uint64_t)v9);
  ImsResult::~ImsResult((ImsResult *)v9);
  if (&v6 != (uint64_t *)this)
    std::list<ImsLogDestination *>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<ImsLogDestination *,void *>,std::__list_const_iterator<ImsLogDestination *,void *>>(&v6, *((_QWORD *)this + 1), (uint64_t)this);
  std::__list_imp<unsigned long long>::clear(this);
  ImsLock::~ImsLock(&v5);
  for (i = v7; i != &v6; i = (uint64_t *)i[1])
  {
    v3 = i[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return std::__list_imp<unsigned long long>::clear(&v6);
}

void sub_1BF08F4D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  pthread_mutex_t *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, pthread_mutex_t *);
  ImsLock::~ImsLock((pthread_mutex_t **)va);
  std::__list_imp<unsigned long long>::clear((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t ImsLogger::osLog(ImsLogger *this)
{
  ImsLogger *v1;
  uint64_t v3;
  const void *v4;
  _QWORD *v5;

  v1 = (ImsLogger *)*((_QWORD *)this + 1);
  if (v1 == this)
    return MEMORY[0x1E0C81028];
  v3 = MEMORY[0x1E0C81028];
  while (1)
  {
    v4 = (const void *)*((_QWORD *)v1 + 2);
    if (v4)
    {
      if (v5)
        break;
    }
    v1 = (ImsLogger *)*((_QWORD *)v1 + 1);
    if (v1 == this)
      return v3;
  }
  return v5[3];
}

uint64_t ims::createNullStream(ims *this)
{
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;

  v1 = operator new();
  v2 = operator new();
  v3 = (_OWORD *)operator new();
  v3[2] = 0u;
  v3[3] = 0u;
  *v3 = 0u;
  v3[1] = 0u;
  std::streambuf::basic_streambuf();
  *(_QWORD *)v3 = &off_1E78D95F0;
  v4 = MEMORY[0x1E0DE4FA0];
  *(_QWORD *)(v2 + 8) = MEMORY[0x1E0DE4FA0] + 64;
  *(_QWORD *)v2 = v4 + 24;
  std::ios_base::init((std::ios_base *)(v2 + 8), v3);
  *(_QWORD *)(v2 + 144) = 0;
  *(_DWORD *)(v2 + 152) = -1;
  *(_QWORD *)v1 = &off_1E78D7A10;
  *(_QWORD *)(v1 + 8) = v2;
  *(_WORD *)(v1 + 16) = 1;
  return v1;
}

uint64_t ImsLogger::streamForFacilityAndPriority(uint64_t a1, std::string *a2, int a3)
{
  ims *v6;
  ImsLogFacility *v7;
  uint64_t NullStream;
  pthread_mutex_t *v10;
  _BYTE v11[72];

  v10 = 0;
  ImsLock::set((pthread_mutex_t *)(a1 + 376), &v10, (uint64_t)v11);
  ImsResult::~ImsResult((ImsResult *)v11);
  if (*(_QWORD *)(a1 + 16))
  {
    ImsLock::~ImsLock(&v10);
    v7 = (ImsLogFacility *)ImsLogger::facilityWithName(a1, a2, 1);
    return ImsLogFacility::streamForPriority(v7, a3);
  }
  else
  {
    NullStream = *(_QWORD *)(a1 + 264);
    if (!NullStream)
    {
      NullStream = ims::createNullStream(v6);
      *(_QWORD *)(a1 + 264) = NullStream;
    }
    ImsLock::~ImsLock(&v10);
  }
  return NullStream;
}

void sub_1BF08F77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_mutex_t *a9)
{
  ImsLock::~ImsLock(&a9);
  _Unwind_Resume(a1);
}

uint64_t ImsLogger::facilityWithName(uint64_t a1, std::string *a2, int a3)
{
  uint64_t v5;
  size_t size;
  std::string::size_type v7;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  std::string *i;
  _QWORD *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  pthread_mutex_t *v17;
  _BYTE v18[72];

  v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  size = a2->__r_.__value_.__l.__size_;
  if ((v5 & 0x80u) == 0)
    v7 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    v7 = a2->__r_.__value_.__l.__size_;
  if (v7)
  {
    v9 = *(unsigned __int8 *)(a1 + 127);
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a1 + 112);
    if (v7 != v9)
      goto LABEL_18;
    if (v10 >= 0)
      v11 = (unsigned __int8 *)(a1 + 104);
    else
      v11 = *(unsigned __int8 **)(a1 + 104);
    if ((v5 & 0x80) != 0)
    {
      if (memcmp(a2->__r_.__value_.__l.__data_, v11, size))
        goto LABEL_18;
    }
    else if ((_DWORD)v5)
    {
      for (i = a2; i->__r_.__value_.__s.__data_[0] == *v11; i = (std::string *)((char *)i + 1))
      {
        ++v11;
        if (!--v5)
          return a1 + 96;
      }
LABEL_18:
      v17 = 0;
      ImsLock::set((pthread_mutex_t *)(a1 + 312), &v17, (uint64_t)v18);
      ImsResult::~ImsResult((ImsResult *)v18);
      v13 = *(_QWORD **)(a1 + 272);
      if (v13)
      {
        v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(v13, (unsigned __int8 *)a2);
        if (v14)
        {
          v15 = *((_QWORD *)v14 + 5);
LABEL_27:
          ImsLock::~ImsLock(&v17);
          return v15;
        }
        if (a3)
        {
LABEL_25:
          v15 = ImsLogger::addFacility(a1, a2);
          goto LABEL_27;
        }
      }
      else if (a3)
      {
        goto LABEL_25;
      }
      v15 = 0;
      goto LABEL_27;
    }
  }
  return a1 + 96;
}

void sub_1BF08F8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_mutex_t *a9)
{
  ImsLock::~ImsLock(&a9);
  _Unwind_Resume(a1);
}

uint64_t ImsLogger::error(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::string __p;

  ImsLogger::getFacilityWithStackTag(a1, a2, a3, &__p);
  v4 = ImsLogger::streamForFacilityAndPriority(a1, &__p, 3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF08F92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ImsLogger::getFacilityWithStackTag(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v7;
  std::string::size_type size;
  char v9;
  void **v10;
  std::string::size_type v11;
  void *__p[2];
  unsigned __int8 v13;
  std::string v14;

  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a3 + 8);
  if (v7)
  {
    memset(&v14, 0, sizeof(v14));
    ImsLogger::logTagForStack(a1, (unsigned __int8 *)a3, &v14);
    size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    v9 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v14.__r_.__value_.__l.__size_;
    if (size)
    {
      std::operator+<char>();
      if ((v13 & 0x80u) == 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      if ((v13 & 0x80u) == 0)
        v11 = v13;
      else
        v11 = (std::string::size_type)__p[1];
      std::string::append(a4, (const std::string::value_type *)v10, v11);
      if ((char)v13 < 0)
        operator delete(__p[0]);
      v9 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    }
    if (v9 < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_1BF08FA50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogger::warn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::string __p;

  ImsLogger::getFacilityWithStackTag(a1, a2, a3, &__p);
  v4 = ImsLogger::streamForFacilityAndPriority(a1, &__p, 4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF08FAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogger::notice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::string __p;

  ImsLogger::getFacilityWithStackTag(a1, a2, a3, &__p);
  v4 = ImsLogger::streamForFacilityAndPriority(a1, &__p, 5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF08FB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogger::info(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::string __p;

  ImsLogger::getFacilityWithStackTag(a1, a2, a3, &__p);
  v4 = ImsLogger::streamForFacilityAndPriority(a1, &__p, 6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF08FBD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogger::debug(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::string __p;

  ImsLogger::getFacilityWithStackTag(a1, a2, a3, &__p);
  v4 = ImsLogger::streamForFacilityAndPriority(a1, &__p, 7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF08FC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogger::spam(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::string __p;

  ImsLogger::getFacilityWithStackTag(a1, a2, a3, &__p);
  v4 = ImsLogger::streamForFacilityAndPriority(a1, &__p, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF08FCB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogger::addFacility(uint64_t a1, std::string *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  std::string *v9;

  if (!*(_QWORD *)(a1 + 272))
  {
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_DWORD *)(v4 + 32) = 1065353216;
    *(_QWORD *)(a1 + 272) = v4;
  }
  v5 = operator new();
  ImsLogFacility::ImsLogFacility(v5, a2, a1);
  v6 = *(_DWORD *)(a1 + 176);
  if ((v6 - 9) >= 0xFFFFFFFA)
    *(_DWORD *)(v5 + 80) = v6;
  v7 = *(uint64_t **)(a1 + 272);
  v9 = a2;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,ImsLogFacility *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ImsLogFacility *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ImsLogFacility *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ImsLogFacility *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v9)+ 5) = v5;
  return v5;
}

void sub_1BF08FD94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C404807EDE9);
  _Unwind_Resume(a1);
}

uint64_t ImsLogger::setPriority(uint64_t a1, int a2, std::string *a3)
{
  uint64_t result;
  uint64_t v6;
  _QWORD *i;

  result = ImsLogger::facilityWithName(a1, a3, 1);
  if ((a2 - 9) >= 0xFFFFFFFA)
    *(_DWORD *)(result + 80) = a2;
  if (*(_DWORD *)(a1 + 256) > a2)
  {
    a2 = *(_DWORD *)(a1 + 176);
    v6 = *(_QWORD *)(a1 + 272);
    if (v6)
    {
      for (i = *(_QWORD **)(v6 + 16); i; i = (_QWORD *)*i)
      {
        if (*(_DWORD *)(i[5] + 80) > a2)
          a2 = *(_DWORD *)(i[5] + 80);
      }
    }
  }
  *(_DWORD *)(a1 + 256) = a2;
  return result;
}

void ImsLogger::setParams(ImsLogger *a1, std::string *a2)
{
  std::string::size_type v4;
  size_t size;
  std::string *p_str;
  _BYTE *v7;
  std::string::size_type v8;
  BOOL v9;
  int v10;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string __p;
  std::string v15;
  std::string __str;
  char v17;

  v4 = 0;
  memset(&__str, 0, sizeof(__str));
  while (1)
  {
    v4 = ims::nextToken(a2, v4, &__str, 0x2Cu);
    if (v4 == -1)
      break;
    memset(&v15, 0, sizeof(v15));
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    if (!size
      || ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (p_str = &__str)
        : (p_str = (std::string *)__str.__r_.__value_.__r.__words[0]),
          (v7 = memchr(p_str, 61, size), v8 = v7 - (_BYTE *)p_str, v7) ? (v9 = v8 == -1) : (v9 = 1),
          v9))
    {
      *((_BYTE *)&v15.__r_.__value_.__s + 23) = 7;
      qmemcpy(&v15, "default", 7);
      v10 = priorityFromString(&__str);
LABEL_16:
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v15;
      else
        v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)v11);
      ImsLogger::setPriority((uint64_t)a1, v10, &__p);
      goto LABEL_20;
    }
    std::string::basic_string(&__p, &__str, 0, v8, (std::allocator<char> *)&v17);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    v15 = __p;
    v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v12 = __p.__r_.__value_.__l.__size_;
    if (v12 != 4
      || ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (v13 = &v15)
        : (v13 = (std::string *)v15.__r_.__value_.__r.__words[0]),
          LODWORD(v13->__r_.__value_.__l.__data_) != 1953719652))
    {
      std::string::basic_string(&__p, &__str, v8 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v17);
      v10 = priorityFromString(&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_16;
    }
    std::string::basic_string(&__p, &__str, v8 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v17);
    ImsLogger::addDestination(a1, (uint64_t)&__p);
LABEL_20:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BF090050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

uint64_t priorityFromString(_BYTE *a1)
{
  const void **v1;
  int v2;
  size_t v3;
  unsigned __int8 *v4;
  int v5;
  const char *v6;
  unsigned __int16 *v7;
  int v8;
  int v9;
  uint64_t v11;
  int *v13;
  int v14;
  int v15;

  v1 = (const void **)a1;
  v2 = (char)a1[23];
  if (v2 >= 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  switch(v3)
  {
    case 1uLL:
      if (v2 >= 0)
        v4 = a1;
      else
        v4 = *(unsigned __int8 **)a1;
      v5 = *v4;
      switch(v5)
      {
        case 'e':
          goto LABEL_51;
        case 'n':
          goto LABEL_39;
        case 'w':
          goto LABEL_52;
      }
      if (!memcmp(v4, "i", v3))
        goto LABEL_26;
      v6 = "d";
      a1 = v4;
      goto LABEL_34;
    case 3uLL:
      if (v2 >= 0)
        v7 = (unsigned __int16 *)a1;
      else
        v7 = *(unsigned __int16 **)a1;
      v8 = *v7;
      v9 = *((unsigned __int8 *)v7 + 2);
      if (v8 != 29285 || v9 != 114)
        goto LABEL_47;
      goto LABEL_51;
    case 4uLL:
      if (v2 < 0)
        a1 = *(_BYTE **)a1;
      if (*(_DWORD *)a1 == 1852989815)
        goto LABEL_52;
      if (memcmp(a1, "info", v3))
        goto LABEL_47;
LABEL_26:
      v11 = 6;
      break;
    case 5uLL:
      if (v2 < 0)
        a1 = *(_BYTE **)a1;
      if (*(_DWORD *)a1 == 1869771365 && a1[4] == 114)
      {
LABEL_51:
        v11 = 3;
      }
      else
      {
        v6 = "debug";
LABEL_34:
        if (!memcmp(a1, v6, v3))
        {
          v11 = 7;
        }
        else
        {
LABEL_47:
          v11 = 8;
          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "s"))
          {
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "spam"))
              v11 = 8;
            else
              v11 = 4;
          }
        }
      }
      break;
    case 6uLL:
      if (v2 < 0)
        a1 = *(_BYTE **)a1;
      if (memcmp(a1, "notice", v3))
        goto LABEL_47;
LABEL_39:
      v11 = 5;
      break;
    case 7uLL:
      if (v2 >= 0)
        v13 = (int *)a1;
      else
        v13 = *(int **)a1;
      v14 = *v13;
      v15 = *(int *)((char *)v13 + 3);
      if (v14 != 1852989815 || v15 != 1735289198)
        goto LABEL_47;
LABEL_52:
      v11 = 4;
      break;
    default:
      goto LABEL_47;
  }
  return v11;
}

void ImsLogger::dumpToPath(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  pthread_mutex_t *v5;
  _BYTE v6[72];

  v5 = 0;
  ImsLock::set((pthread_mutex_t *)(a1 + 376), &v5, (uint64_t)v6);
  ImsResult::~ImsResult((ImsResult *)v6);
  for (i = a1; ; (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(i + 16) + 48))(*(_QWORD *)(i + 16), a2))
  {
    i = *(_QWORD *)(i + 8);
    if (i == a1)
      break;
  }
  ImsLock::~ImsLock(&v5);
}

void sub_1BF090324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_mutex_t *a9)
{
  ImsLock::~ImsLock(&a9);
  _Unwind_Resume(a1);
}

void ImsLogger::addStackToLogTagMap(_QWORD *a1, unsigned __int8 *a2, int a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  char *v8;
  unint64_t v9;
  std::string *v10;
  __int128 v11;
  unint64_t v12;
  std::string *v13;
  __int128 v14;
  unint64_t v15;
  std::string *v16;
  __int128 v17;
  unsigned __int8 *v18;
  std::string v19;
  std::string __str;

  v6 = (uint64_t)(a1 + 61);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1 + 61, a2);
  switch(a3)
  {
    case 0:
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      if ((char)v7[63] < 0)
      {
        *((_QWORD *)v7 + 6) = 4;
        v8 = (char *)*((_QWORD *)v7 + 5);
      }
      else
      {
        v8 = (char *)(v7 + 40);
        v7[63] = 4;
      }
      strcpy(v8, "emgr");
      return;
    case 1:
      v15 = a1[66] + 1;
      a1[66] = v15;
      std::to_string(&v19, v15);
      v16 = std::string::insert(&v19, 0, "ims", 3uLL);
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      goto LABEL_14;
    case 2:
      v9 = a1[67] + 1;
      a1[67] = v9;
      std::to_string(&v19, v9);
      v10 = std::string::insert(&v19, 0, "laz", 3uLL);
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      goto LABEL_14;
    case 3:
      v12 = a1[68] + 1;
      a1[68] = v12;
      std::to_string(&v19, v12);
      v13 = std::string::insert(&v19, 0, "thmp", 4uLL);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
LABEL_14:
      v19.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      v18 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v19);
      std::string::operator=((std::string *)(v18 + 40), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      break;
    default:
      return;
  }
}

void sub_1BF090594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ImsLogger::removeStackFromLogTagMap(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;

  v3 = (_QWORD *)(a1 + 488);
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>((_QWORD *)(a1 + 488), a2);
  if (v4)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::remove(v3, v4, (uint64_t)v8);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "logger");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::error(ims::_logger, (uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Unable to remove stackId (", 26);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v5 + 32))(v5, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)") from LogTagMap", 16);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (v7 < 0)
      operator delete(__p[0]);
    if (v9 < 0)
      operator delete(v8[0]);
  }
}

void sub_1BF0906F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ims::error(uint64_t a1, uint64_t a2)
{
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  return ImsLogger::error(ims::_logger, a1, a2);
}

void ImsLogger::logTagForStack(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, std::string *a3@<X8>)
{
  unsigned __int8 *v4;
  __int128 v5;

  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>((_QWORD *)(a1 + 488), a2);
  if (v4)
  {
    if ((char)v4[63] < 0)
    {
      std::string::__init_copy_ctor_external(a3, *((const std::string::value_type **)v4 + 5), *((_QWORD *)v4 + 6));
    }
    else
    {
      v5 = *(_OWORD *)(v4 + 40);
      a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 7);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v5;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
}

uint64_t ImsLogger::dumpState(ImsLogger *this, ImsOutStream *a2)
{
  uint64_t v4;
  uint64_t **i;
  uint64_t result;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"***** IMS Logger *****", 22);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  ImsLogFacility::dumpState((ImsLogger *)((char *)this + 96), a2);
  v4 = *((_QWORD *)this + 20);
  for (i = *(uint64_t ***)(*((_QWORD *)this + 34) + 16); i; i = (uint64_t **)*i)
  {
    ImsLogFacility::dumpState((ImsLogFacility *)i[5], a2);
    v4 += i[5][8];
  }
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"Total log facilities: ", 22);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"Total log streams: ", 19);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  result = (*(uint64_t (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

_QWORD *ims::createInstance(ims *this)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  void **v4;
  _QWORD *v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void **v11;
  void **v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *result;
  _QWORD v27[2];
  pthread_mutex_t *v28;
  std::string __p[3];

  v1 = operator new();
  *(_QWORD *)v1 = v1;
  *(_QWORD *)(v1 + 8) = v1;
  v2 = (uint64_t *)(v1 + 24);
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v1 + 24;
  *(_QWORD *)(v1 + 32) = v1 + 24;
  *(_OWORD *)(v1 + 40) = 0u;
  v3 = (_QWORD *)(v1 + 40);
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_QWORD *)(v1 + 88) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "default");
  ImsLogFacility::ImsLogFacility(v1 + 96, __p, v1);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  *(_QWORD *)(v1 + 288) = 0;
  *(_QWORD *)(v1 + 296) = 0;
  *(_QWORD *)(v1 + 304) = 0;
  pthread_mutex_init((pthread_mutex_t *)(v1 + 312), 0);
  pthread_mutex_init((pthread_mutex_t *)(v1 + 376), 0);
  v4 = (void **)(v1 + 448);
  *(_OWORD *)(v1 + 440) = 0u;
  *(_OWORD *)(v1 + 456) = 0u;
  *(_DWORD *)(v1 + 480) = 3;
  *(_BYTE *)(v1 + 484) = 0;
  *(_OWORD *)(v1 + 488) = 0u;
  *(_OWORD *)(v1 + 504) = 0u;
  *(_DWORD *)(v1 + 520) = 1065353216;
  *(_QWORD *)(v1 + 264) = 0;
  *(_QWORD *)(v1 + 272) = 0;
  *(_QWORD *)(v1 + 528) = 0;
  *(_QWORD *)(v1 + 544) = 0;
  *(_QWORD *)(v1 + 536) = 0;
  *(_BYTE *)(v1 + 280) = 1;
  v27[0] = 0;
  v27[1] = 0;
  ImsRandomNumberGenerator<unsigned char>::ImsRandomNumberGenerator(v27, 0, 63);
  ImsRandomStringGenerator::randomString((ImsRandomStringGenerator *)v27, 10, __p);
  if (*(char *)(v1 + 471) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
  *(_QWORD *)(v1 + 464) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E78D08A8;
  *(_QWORD *)(v1 + 472) = v5;
  std::__hash_table<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>>>::clear(v1 + 136);
  *(_DWORD *)(v1 + 176) = 4;
  *(_DWORD *)(v1 + 256) = 4;
  v28 = 0;
  ImsLock::set((pthread_mutex_t *)(v1 + 376), &v28, (uint64_t)__p);
  ImsResult::~ImsResult((ImsResult *)__p);
  for (i = *(_QWORD *)(v1 + 8); i != v1; i = *(_QWORD *)(i + 8))
  {
    v7 = *(_QWORD *)(i + 16);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  std::__list_imp<unsigned long long>::clear((_QWORD *)v1);
  ImsLock::~ImsLock(&v28);
  v8 = *(_QWORD *)(v1 + 272);
  if (v8)
  {
    v9 = *(_QWORD **)(v8 + 16);
    if (v9)
    {
      do
      {
        v10 = v9[5];
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        v9 = (_QWORD *)*v9;
      }
      while (v9);
      v8 = *(_QWORD *)(v1 + 272);
      if (!v8)
        goto LABEL_23;
      v11 = *(void ***)(v8 + 16);
      if (v11)
      {
        do
        {
          v12 = (void **)*v11;
          if (*((char *)v11 + 39) < 0)
            operator delete(v11[2]);
          operator delete(v11);
          v11 = v12;
        }
        while (v12);
      }
    }
    v13 = *(void **)v8;
    *(_QWORD *)v8 = 0;
    if (v13)
      operator delete(v13);
    MEMORY[0x1C3B87100](v8, 0x10A0C408EF24B1CLL);
LABEL_23:
    *(_QWORD *)(v1 + 272) = 0;
  }
  v14 = operator new();
  *(_DWORD *)(v14 + 16) = 8;
  *(_QWORD *)v14 = &off_1E78D93C0;
  *(_QWORD *)(v14 + 8) = 0;
  v15 = operator new(0x18uLL);
  v15[1] = v2;
  v15[2] = v14;
  v16 = *v2;
  *v15 = *v2;
  *(_QWORD *)(v16 + 8) = v15;
  *v2 = (uint64_t)v15;
  ++*v3;
  v17 = (_QWORD *)operator new();
  v17[1] = 0;
  v17[2] = 0;
  *((_DWORD *)v17 + 4) = 8;
  *v17 = &off_1E78D9550;
  v18 = operator new(0x18uLL);
  v18[1] = v2;
  v18[2] = v17;
  v19 = *v2;
  *v18 = *v2;
  *(_QWORD *)(v19 + 8) = v18;
  *v2 = (uint64_t)v18;
  ++*v3;
  v20 = operator new();
  *(_DWORD *)(v20 + 16) = 8;
  *(_QWORD *)v20 = &off_1E78DA888;
  *(_QWORD *)(v20 + 8) = 0;
  *(_OWORD *)(v20 + 24) = 0u;
  *(_OWORD *)(v20 + 40) = 0u;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *(_OWORD *)(v20 + 81) = 0u;
  *(_BYTE *)(v20 + 97) = 1;
  *(_QWORD *)(v20 + 104) = 0;
  v21 = operator new(0x18uLL);
  v21[1] = v2;
  v21[2] = v20;
  v22 = *v2;
  *v21 = *v2;
  *(_QWORD *)(v22 + 8) = v21;
  *v2 = (uint64_t)v21;
  ++*v3;
  v23 = operator new();
  *(_QWORD *)v23 = &off_1E78D9408;
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 24) = 0;
  *(_DWORD *)(v23 + 16) = 7;
  v24 = operator new(0x18uLL);
  v24[1] = v2;
  v24[2] = v23;
  v25 = *(_QWORD *)(v1 + 24);
  *v24 = v25;
  *(_QWORD *)(v25 + 8) = v24;
  *(_QWORD *)(v1 + 24) = v24;
  ++*(_QWORD *)(v1 + 40);
  result = ImsRandomNumberGenerator<unsigned char>::~ImsRandomNumberGenerator(v27);
  ims::_logger = v1;
  return result;
}

void sub_1BF090D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  _QWORD *v20;
  ImsLogFacility *v21;
  pthread_mutex_t *v22;
  pthread_mutex_t *v23;
  uint64_t v24;
  void **v25;

  ImsRandomNumberGenerator<unsigned char>::~ImsRandomNumberGenerator(&a11);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v24);
  if (*(char *)(v19 + 471) < 0)
    operator delete(*v25);
  pthread_mutex_destroy(v23);
  pthread_mutex_destroy(v22);
  if (*(char *)(v19 + 311) < 0)
    operator delete(*(void **)(v19 + 288));
  ImsLogFacility::~ImsLogFacility(v21);
  if (*(char *)(v19 + 95) < 0)
    operator delete(*(void **)(v19 + 72));
  if (*(char *)(v19 + 71) < 0)
    operator delete(*(void **)(v19 + 48));
  std::__list_imp<unsigned long long>::clear(v20);
  std::__list_imp<unsigned long long>::clear((_QWORD *)v19);
  MEMORY[0x1C3B87100](v19, 0x10B2C40891255D7);
  _Unwind_Resume(a1);
}

uint64_t ims::info(uint64_t a1, uint64_t a2)
{
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  return ImsLogger::info(ims::_logger, a1, a2);
}

uint64_t ims::warn(uint64_t a1, uint64_t a2)
{
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  return ImsLogger::warn(ims::_logger, a1, a2);
}

uint64_t ims::debug(uint64_t a1, uint64_t a2)
{
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  return ImsLogger::debug(ims::_logger, a1, a2);
}

void ims::dumpMessage(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned __int8 v13;
  NSObject *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  const char **v18;
  const char **v19;
  NSObject *v20;
  uint64_t *v21;
  const char *v22;
  uint64_t v23;
  const char **i;
  const char **v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t *v28;
  const char *v29;
  NSObject *v30;
  const char *v31;
  uint64_t *v32;
  const char *v33;
  uint64_t v34;
  int v35;
  NSObject *v36;
  uint64_t *v37;
  const char *v38;
  uint64_t *v39;
  uint64_t *v40;
  const char *v41;
  uint64_t *v42;
  uint64_t v44;
  _BYTE __p[12];
  __int16 v46;
  const char *v47;
  char v48;
  uint8_t buf[24];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v13 = atomic_load((unsigned __int8 *)&qword_1ED70EDD0);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_1ED70EDD0))
  {
    qword_1ED70EDC8 = (uint64_t)os_log_create("com.apple.ipTelephony", "ims");
    __cxa_guard_release(&qword_1ED70EDD0);
  }
  v14 = qword_1ED70EDC8;
  if (os_log_type_enabled((os_log_t)qword_1ED70EDC8, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a1 + 23) >= 0)
      v15 = a1;
    else
      v15 = (uint64_t *)*a1;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "";
    _os_log_impl(&dword_1BEDF4000, v14, OS_LOG_TYPE_DEFAULT, "[%{public}s]: %{public}s", buf, 0x16u);
    v14 = qword_1ED70EDC8;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a1 + 23) >= 0)
      v16 = a1;
    else
      v16 = (uint64_t *)*a1;
    if (*((char *)a2 + 23) >= 0)
      v17 = a2;
    else
      v17 = (uint64_t *)*a2;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v16;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v17;
    _os_log_impl(&dword_1BEDF4000, v14, OS_LOG_TYPE_DEFAULT, "[%{public}s]: %{public}s", buf, 0x16u);
  }
  memset(buf, 0, sizeof(buf));
  std::string::basic_string[abi:ne180100]<0>(__p, "\n");
  ims::tokenizeAsView(a3, (void **)buf, __p);
  v44 = a5;
  if (v48 < 0)
    operator delete(*(void **)__p);
  v18 = *(const char ***)buf;
  v19 = *(const char ***)&buf[8];
  if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
  {
    v20 = qword_1ED70EDC8;
    do
    {
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)a1 + 23) >= 0)
          v21 = a1;
        else
          v21 = (uint64_t *)*a1;
        v22 = *v18;
        *(_DWORD *)__p = 136446466;
        *(_QWORD *)&__p[4] = v21;
        v46 = 2082;
        v47 = v22;
        _os_log_impl(&dword_1BEDF4000, v20, OS_LOG_TYPE_DEFAULT, "[%{public}s]: %{public}s", __p, 0x16u);
        v20 = qword_1ED70EDC8;
      }
      v18 += 2;
    }
    while (v18 != v19);
  }
  v23 = *(unsigned __int8 *)(a4 + 23);
  if ((v23 & 0x80u) != 0)
    v23 = *(_QWORD *)(a4 + 8);
  if (v23)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    std::string::basic_string[abi:ne180100]<0>(__p, "\n");
    ims::tokenizeAsView((uint64_t *)a4, (void **)buf, __p);
    if (v48 < 0)
      operator delete(*(void **)__p);
    v25 = *(const char ***)buf;
    for (i = *(const char ***)&buf[8]; v25 != i; v25 += 2)
    {
      v26 = qword_1ED70EDC8;
      v27 = os_log_type_enabled((os_log_t)qword_1ED70EDC8, OS_LOG_TYPE_DEFAULT);
      if (a7)
      {
        if (v27)
        {
          if (*((char *)a1 + 23) >= 0)
            v28 = a1;
          else
            v28 = (uint64_t *)*a1;
          v29 = *v25;
          *(_DWORD *)__p = 136446467;
          *(_QWORD *)&__p[4] = v28;
          v46 = 2085;
          v47 = v29;
          v30 = v26;
          v31 = "[%{public}s]: %{sensitive}s";
LABEL_42:
          _os_log_impl(&dword_1BEDF4000, v30, OS_LOG_TYPE_DEFAULT, v31, __p, 0x16u);
        }
      }
      else if (v27)
      {
        if (*((char *)a1 + 23) >= 0)
          v32 = a1;
        else
          v32 = (uint64_t *)*a1;
        v33 = *v25;
        *(_DWORD *)__p = 136446466;
        *(_QWORD *)&__p[4] = v32;
        v46 = 2082;
        v47 = v33;
        v30 = v26;
        v31 = "[%{public}s]: %{public}s";
        goto LABEL_42;
      }
    }
  }
  v34 = *(unsigned __int8 *)(v44 + 23);
  v35 = (char)v34;
  if ((v34 & 0x80u) != 0)
    v34 = *(_QWORD *)(v44 + 8);
  v36 = qword_1ED70EDC8;
  if (v34 && os_log_type_enabled((os_log_t)qword_1ED70EDC8, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a1 + 23) >= 0)
      v37 = a1;
    else
      v37 = (uint64_t *)*a1;
    v38 = *(const char **)v44;
    if (v35 >= 0)
      v38 = (const char *)v44;
    *(_DWORD *)__p = 136446466;
    *(_QWORD *)&__p[4] = v37;
    v46 = 2082;
    v47 = v38;
    _os_log_impl(&dword_1BEDF4000, v36, OS_LOG_TYPE_DEFAULT, "[%{public}s]: %{public}s", __p, 0x16u);
    v36 = qword_1ED70EDC8;
  }
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a1 + 23) >= 0)
      v39 = a1;
    else
      v39 = (uint64_t *)*a1;
    *(_DWORD *)__p = 136446466;
    *(_QWORD *)&__p[4] = v39;
    v46 = 2082;
    v47 = "";
    _os_log_impl(&dword_1BEDF4000, v36, OS_LOG_TYPE_DEFAULT, "[%{public}s]: %{public}s", __p, 0x16u);
    v36 = qword_1ED70EDC8;
  }
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a1 + 23) >= 0)
      v40 = a1;
    else
      v40 = (uint64_t *)*a1;
    if (*(char *)(a6 + 23) >= 0)
      v41 = (const char *)a6;
    else
      v41 = *(const char **)a6;
    *(_DWORD *)__p = 136446466;
    *(_QWORD *)&__p[4] = v40;
    v46 = 2082;
    v47 = v41;
    _os_log_impl(&dword_1BEDF4000, v36, OS_LOG_TYPE_DEFAULT, "[%{public}s]: %{public}s", __p, 0x16u);
    v36 = qword_1ED70EDC8;
  }
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a1 + 23) >= 0)
      v42 = a1;
    else
      v42 = (uint64_t *)*a1;
    *(_DWORD *)__p = 136446466;
    *(_QWORD *)&__p[4] = v42;
    v46 = 2082;
    v47 = "";
    _os_log_impl(&dword_1BEDF4000, v36, OS_LOG_TYPE_DEFAULT, "[%{public}s]: %{public}s", __p, 0x16u);
  }
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
}

void sub_1BF0914B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (a20 < 0)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogStream::isLog(ImsLogStream *this)
{
  return 1;
}

void ImsLoggerStreambuf::~ImsLoggerStreambuf(ImsLoggerStreambuf *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E78D9450;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  std::streambuf::~streambuf();
}

{
  void *v2;

  *(_QWORD *)this = &off_1E78D9450;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  std::streambuf::~streambuf();
  JUMPOUT(0x1C3B87100);
}

void ImsLogDestinationStderr::~ImsLogDestinationStderr(ImsLogDestinationStderr *this)
{
  JUMPOUT(0x1C3B87100);
}

double ImsLogDestinationStderr::name@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 16) = 0x600000000000000;
  result = *(double *)"stderr";
  *(_OWORD *)a1 = *(_OWORD *)"stderr";
  return result;
}

uint64_t ImsLogDestination::initialize(ImsLogDestination *this)
{
  return 1;
}

void ImsLogDestinationSyslog::~ImsLogDestinationSyslog(ImsLogDestinationSyslog *this)
{
  JUMPOUT(0x1C3B87100);
}

double ImsLogDestinationSyslog::name@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 16) = 0x600000000000000;
  result = *(double *)"syslog";
  *(_OWORD *)a1 = *(_OWORD *)"syslog";
  return result;
}

double ImsLogDestinationOslog::name@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = *(double *)"oslog";
  *(_OWORD *)a1 = *(_OWORD *)"oslog";
  *(_QWORD *)(a1 + 16) = 0x500000000000000;
  return result;
}

uint64_t ImsLogFacility::logger(ImsLogFacility *this)
{
  return *((_QWORD *)this + 4);
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n)
{
  char *value;
  char *end;
  std::vector<char>::pointer begin;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      bzero(this->__end_, __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = end - this->__begin_;
    v8 = v7 + __n;
    if ((uint64_t)(v7 + __n) < 0)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v9 = value - begin;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (char *)operator new(v10);
    else
      v11 = 0;
    v12 = &v11[v7];
    v13 = &v11[v10];
    bzero(v12, __n);
    if (end == begin)
    {
      v11 = v12;
    }
    else
    {
      v14 = &end[~(unint64_t)begin];
      do
      {
        v15 = *--end;
        (v14--)[(_QWORD)v11] = v15;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v11;
    this->__end_ = &v12[__n];
    this->__end_cap_.__value_ = v13;
    if (end)
      operator delete(end);
  }
}

void NullStreambuf::~NullStreambuf(NullStreambuf *this)
{
  std::streambuf::~streambuf();
  JUMPOUT(0x1C3B87100);
}

uint64_t NullStreambuf::overflow(NullStreambuf *this, uint64_t a2)
{
  return a2;
}

void std::__shared_ptr_emplace<ImsLogStream::create(int,ImsLogFacility *)::ImsLogStreamWrap,std::allocator<ImsLogStream::create(int,ImsLogFacility *)::ImsLogStreamWrap>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D9688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ImsLogStream::create(int,ImsLogFacility *)::ImsLogStreamWrap,std::allocator<ImsLogStream::create(int,ImsLogFacility *)::ImsLogStreamWrap>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D9688;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<ImsLogStream::create(int,ImsLogFacility *)::ImsLogStreamWrap,std::allocator<ImsLogStream::create(int,ImsLogFacility *)::ImsLogStreamWrap>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ImsLogStream::create(int,ImsLogFacility *)::ImsLogStreamWrap::~ImsLogStreamWrap(ImsLogStream *a1)
{
  ImsLogStream::~ImsLogStream(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t *std::list<ImsLogDestination *>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<ImsLogDestination *,void *>,std::__list_const_iterator<ImsLogDestination *,void *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *i;

  for (i = (uint64_t *)a1[1]; a2 != a3 && i != a1; i = (uint64_t *)i[1])
  {
    i[2] = *(_QWORD *)(a2 + 16);
    a2 = *(_QWORD *)(a2 + 8);
  }
  if (i == a1)
    return std::list<ImsLogDestination *>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<ImsLogDestination *,void *>,std::__list_const_iterator<ImsLogDestination *,void *>>((uint64_t)a1, a1, a2, a3);
  else
    return std::list<std::pair<unsigned long long,long>>::erase((uint64_t)a1, i, a1);
}

uint64_t *std::list<ImsLogDestination *>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<ImsLogDestination *,void *>,std::__list_const_iterator<ImsLogDestination *,void *>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  if (a3 != a4)
  {
    v8 = operator new(0x18uLL);
    v9 = v8;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = *(_QWORD *)(a3 + 16);
    v10 = *(_QWORD *)(a3 + 8);
    v11 = 1;
    if (v10 != a4)
    {
      v12 = v8;
      do
      {
        v8 = operator new(0x18uLL);
        *v8 = v12;
        v8[1] = 0;
        v8[2] = *(_QWORD *)(v10 + 16);
        v12[1] = v8;
        ++v11;
        v10 = *(_QWORD *)(v10 + 8);
        v12 = v8;
      }
      while (v10 != a4);
    }
    v13 = *a2;
    *(_QWORD *)(v13 + 8) = v9;
    *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_1BF0919D4(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1BF0919F4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,ImsLogFacility *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ImsLogFacility *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ImsLogFacility *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ImsLogFacility *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  void **v14;
  char *v15;
  unint64_t v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  void *v41;

  v7 = a1 + 3;
  v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v9 = v8;
  v10 = a1[1];
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v13 = v8;
      if (v8 >= v10)
        v13 = v8 % v10;
    }
    else
    {
      v13 = (v10 - 1) & v8;
    }
    v14 = *(void ***)(*a1 + 8 * v13);
    if (v14)
    {
      v15 = (char *)*v14;
      if (*v14)
      {
        do
        {
          v16 = *((_QWORD *)v15 + 1);
          if (v16 == v9)
          {
            if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 4), (unsigned __int8 *)v15 + 16, a2) & 1) != 0)return v15;
          }
          else
          {
            if (v12 > 1)
            {
              if (v16 >= v10)
                v16 %= v10;
            }
            else
            {
              v16 &= v10 - 1;
            }
            if (v16 != v13)
              break;
          }
          v15 = *(char **)v15;
        }
        while (v15);
      }
    }
  }
  else
  {
    v13 = 0;
  }
  v17 = *a4;
  v15 = (char *)operator new(0x30uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v9;
  v18 = (std::string *)(v15 + 16);
  if (*((char *)v17 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
  }
  else
  {
    v19 = *v17;
    *((_QWORD *)v15 + 4) = *((_QWORD *)v17 + 2);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
  }
  *((_QWORD *)v15 + 5) = 0;
  v20 = (float)(unint64_t)(a1[3] + 1);
  v21 = *((float *)a1 + 8);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = (int8x8_t)v24;
    else
      prime = (int8x8_t)v23;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = a1[1];
    if (*(_QWORD *)&prime > v10)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v10)
    {
      v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (*(_QWORD *)&prime <= v32)
        prime = (int8x8_t)v32;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v26 = operator new(8 * *(_QWORD *)&prime);
          v27 = (void *)*a1;
          *a1 = (uint64_t)v26;
          if (v27)
            operator delete(v27);
          v28 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v28++) = 0;
          while (*(_QWORD *)&prime != v28);
          v29 = (_QWORD *)a1[2];
          if (v29)
          {
            v30 = v29[1];
            v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&prime)
                v30 %= *(_QWORD *)&prime;
            }
            else
            {
              v30 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v30) = a1 + 2;
            v35 = (_QWORD *)*v29;
            if (*v29)
            {
              do
              {
                v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v36))
                  {
                    *(_QWORD *)(*a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *v29 = *v35;
                  *v35 = **(_QWORD **)(*a1 + 8 * v36);
                  **(_QWORD **)(*a1 + 8 * v36) = v35;
                  v35 = v29;
                }
                v36 = v30;
LABEL_58:
                v29 = v35;
                v35 = (_QWORD *)*v35;
                v30 = v36;
              }
              while (v35);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        v41 = (void *)*a1;
        *a1 = 0;
        if (v41)
          operator delete(v41);
        v10 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v13 = v9 % v10;
      else
        v13 = v9;
    }
    else
    {
      v13 = (v10 - 1) & v9;
    }
  }
  v37 = *a1;
  v38 = *(_QWORD **)(*a1 + 8 * v13);
  if (v38)
  {
    *(_QWORD *)v15 = *v38;
LABEL_75:
    *v38 = v15;
    goto LABEL_76;
  }
  *(_QWORD *)v15 = a1[2];
  a1[2] = (uint64_t)v15;
  *(_QWORD *)(v37 + 8 * v13) = a1 + 2;
  if (*(_QWORD *)v15)
  {
    v39 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v39 >= v10)
        v39 %= v10;
    }
    else
    {
      v39 &= v10 - 1;
    }
    v38 = (_QWORD *)(*a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  ++*v7;
  return v15;
}

void sub_1BF091E4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t LazuliRequest::LazuliRequest(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  _QWORD *v6;
  std::string *v7;
  __int128 v8;

  v6 = (_QWORD *)LazuliMessage::LazuliMessage(a1, a2, a4);
  *v6 = off_1E78D9798;
  v7 = (std::string *)(v6 + 16);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    v7->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return a1;
}

void sub_1BF091ED0(_Unwind_Exception *a1)
{
  void **v1;

  LazuliMessage::~LazuliMessage(v1);
  _Unwind_Resume(a1);
}

void LazuliRequest::encodeStartLine(LazuliRequest *this, ImsOutStream *a2)
{
  void *__p[2];
  char v5;
  std::string v6;
  std::string v7;
  std::string v8;
  void *v9[2];
  char v10;

  LoggableString::LoggableString((LoggableString *)v9, "MSRP ");
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, v9);
  LoggableString::LoggableString(&v8, (const std::string *)((char *)this + 80));
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" ", 1);
  *((_BYTE *)a2 + 17) = 0;
  if (*((char *)this + 151) < 0)
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 16), *((_QWORD *)this + 17));
  else
    v6 = *(std::string *)((char *)this + 128);
  LoggableString::LoggableString(&v7, &v6);
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &v7);
  LoggableString::LoggableString((LoggableString *)__p, "\r\n");
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1BF092028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  if (*(char *)(v27 - 17) < 0)
    operator delete(*(void **)(v27 - 40));
  _Unwind_Resume(exception_object);
}

void LazuliRequest::encodeEndLine(LazuliRequest *this, ImsOutStream *a2, int a3)
{
  const char *v5;
  void *__p[2];
  char v7;
  std::string v8;
  void *v9[2];
  char v10;
  void *v11[2];
  uint64_t v12;

  v11[0] = 0;
  v11[1] = 0;
  v12 = 0;
  if (a3)
    v5 = "$";
  else
    v5 = "+";
  LoggableString::LoggableString((LoggableString *)v11, v5);
  LoggableString::LoggableString((LoggableString *)v9, "-------");
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, v9);
  LoggableString::LoggableString(&v8, (const std::string *)((char *)this + 80));
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &v8);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, v11);
  LoggableString::LoggableString((LoggableString *)__p, "\r\n");
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  if (v7 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (v10 < 0)
    operator delete(v9[0]);
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
}

void sub_1BF0921BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v26 - 17) < 0)
    operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(exception_object);
}

void LazuliRequest::~LazuliRequest(void **this)
{
  *this = off_1E78D9798;
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  LazuliMessage::~LazuliMessage(this);
}

{
  *this = off_1E78D9798;
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  LazuliMessage::~LazuliMessage(this);
  JUMPOUT(0x1C3B87100);
}

void LazuliRequest::debugStr(LazuliRequest *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 151) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 16), *((_QWORD *)this + 17));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 18);
  }
}

SipStringParameterHeader *SipContentTypeHeader::clone(SipContentTypeHeader *this)
{
  SipStringParameterHeader *v2;

  v2 = (SipStringParameterHeader *)operator new();
  SipStringParameterHeader::SipStringParameterHeader(v2, this);
  *(_QWORD *)v2 = off_1E78D98C8;
  *((_BYTE *)v2 + 56) = 0;
  return v2;
}

void sub_1BF0923A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C4070BFB248);
  _Unwind_Resume(a1);
}

uint64_t tlv::parseV<ms::tlv::RTPSessionIdentifier>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

void sub_1BF092404(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BF0923F8);
}

uint64_t tlv::parseV<ms::tlv::IndicationStatus>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

void sub_1BF092450(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BF092444);
}

uint64_t tlv::parseV<ms::tlv::ServiceAppData>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

void sub_1BF09249C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BF092490);
}

uint64_t ms::tlv::writeField(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  return a1 + 39;
}

uint64_t tlv::parseV<ms::tlv::SessionInactivityType>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

void sub_1BF092554(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BF092548);
}

uint64_t ms::tlv::parseField(uint64_t a1, const unsigned __int8 *a2, _DWORD *a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  a3[2] = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  a3[3] = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)4);
  a3[4] = *(_DWORD *)(a1 + 16);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 20), a2, (const unsigned __int8 *)4);
  a3[5] = *(_DWORD *)(a1 + 20);
  return a1 + 24;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  a3[1] = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  a3[2] = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  a3[3] = *(_DWORD *)(a1 + 12);
  return a1 + 16;
}

uint64_t tlv::parseV<ms::tlv::SenderReportInfo>@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = ms::tlv::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), (_DWORD *)a3);
  *a1 = result;
  return result;
}

void sub_1BF092658(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

uint64_t ms::tlv::parseField(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 8) = *(_BYTE *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 9), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 9);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 13), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 13);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 17), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(a1 + 17);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 21), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(a1 + 21);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 25), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 28) = *(_DWORD *)(a1 + 25);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 29), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a1 + 29);
  return a1 + 33;
}

uint64_t tlv::parseV<ms::tlv::ReceiverReportInfo>@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;

  *(_DWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  result = ms::tlv::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), a3);
  *a1 = result;
  return result;
}

void sub_1BF0927A8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

unsigned __int8 *ms::tlv::parseField(char *a1, unsigned __int8 *a2, uint64_t a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)1);
  *(_DWORD *)(a3 + 4) = a1[4];
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 5), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 8) = *(_WORD *)(a1 + 5);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(a3 + 16), a1 + 7, (char *)a2, a2 - (unsigned __int8 *)(a1 + 7));
  return a2;
}

unsigned __int8 *tlv::parseV<ms::tlv::SDESInfo>@<X0>(char **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char *v4;
  unsigned __int8 *v5;
  unsigned __int8 *result;

  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v4 = *a1;
  v5 = (unsigned __int8 *)&v4[a2];
  result = ms::tlv::parseField(v4, v5, a3);
  *a1 = (char *)v5;
  return result;
}

void sub_1BF09288C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BF09287CLL);
}

void sub_1BF09289C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  if (v3)
  {
    *(_QWORD *)(v1 + 24) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tlv::parseV<ms::tlv::XRReceiverRefTime>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)8);
  result = *(_QWORD *)v3;
  *a1 = (tlv *)((char *)v3 + 8);
  return result;
}

void sub_1BF0928F0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BF0928E4);
}

uint64_t tlv::parseV<ms::tlv::XRDLRRReportInfo>(uint64_t *a1, int a2)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  *a1 = ms::tlv::parseField(*a1, (const unsigned __int8 *)(*a1 + a2), v3);
  return v3[0];
}

void sub_1BF0929CC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BF0929B8);
}

uint64_t tlv::parseV<ms::tlv::RTCPReportTypeInfoIncoming>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

void sub_1BF092A14(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BF092A08);
}

uint64_t tlv::parseV<ms::tlv::ApnType>(tlv **a1, int a2)
{
  tlv *v3;
  uint64_t result;

  v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)4);
  result = *(unsigned int *)v3;
  *a1 = (tlv *)((char *)v3 + 4);
  return result;
}

void sub_1BF092A60(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BF092A54);
}

void SipRecipientListBody::SipRecipientListBody(SipRecipientListBody *this)
{
  void *__p[2];
  char v3;

  std::string::basic_string[abi:ne180100]<0>(__p, "<?xml version=\"1.0\" encoding=\"UTF-8\"?><resource-lists xmlns=\"urn:ietf:params:xml:ns:resource-lists\" xmlns:cp=\"urn:ietf:params:xml:ns:copycontrol\"><list></list></resource-lists>");
  SipGenericXmlBody::SipGenericXmlBody(this, &SipRecipientListBody::kContentType, (uint64_t)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  *(_QWORD *)this = &off_1E78D9950;
}

void sub_1BF092ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipRecipientListBody::addRecipient(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  XmlParserGenericItem *ChildAtPath;
  XmlParserGenericItem *v13;
  std::string *v14;
  __int128 v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  const std::string::value_type *v23;
  uint64_t v24;
  const std::string::value_type *v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  const ImsResult *v31;
  uint64_t v32;
  uint64_t v33;
  const ImsResult *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38[2];
  char v39;
  std::string v40;
  std::string v41;
  std::string v42;
  void *__p[2];
  std::string::size_type v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  _BYTE v47[40];
  __int128 v48;
  __int128 v49;

  v4 = *a2;
  if (!*a2)
  {
    *(_OWORD *)&v47[24] = 0u;
    v48 = 0u;
    v49 = 0u;
    *(_QWORD *)v47 = &off_1E78B7238;
    *(_QWORD *)&v47[8] = &_bambiDomain;
    *(_DWORD *)&v47[16] = 1073741825;
    v31 = (const ImsResult *)ImsResult::operator<<<char [15]>((uint64_t)v47, "NULL recipient");
    ImsResult::ImsResult((ImsResult *)a3, v31);
    ImsResult::~ImsResult((ImsResult *)v47);
    return;
  }
  if (*(_QWORD *)(v4 + 2056) != 1)
  {
    v8 = 0;
    v45 = 0;
    v46 = 0;
    goto LABEL_38;
  }
  v7 = *(_QWORD *)(v4 + 2040);
  v9 = *(_QWORD *)(v7 + 56);
  v8 = *(std::__shared_weak_count **)(v7 + 64);
  v45 = v9;
  v46 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (!v9)
  {
LABEL_38:
    *(_OWORD *)&v47[24] = 0u;
    v48 = 0u;
    v49 = 0u;
    *(_QWORD *)v47 = &off_1E78B7238;
    *(_QWORD *)&v47[8] = &_bambiDomain;
    *(_DWORD *)&v47[16] = 1073741825;
    v32 = ImsResult::operator<<<char [20]>((uint64_t)v47, "recipient contains ");
    __p[0] = *(void **)(*a2 + 2056);
    v33 = ImsResult::operator<<<unsigned long>(v32);
    v34 = (const ImsResult *)ImsResult::operator<<<char [7]>(v33, " forks");
    ImsResult::ImsResult((ImsResult *)a3, v34);
    ImsResult::~ImsResult((ImsResult *)v47);
    if (!v8)
      return;
    goto LABEL_60;
  }
  std::string::basic_string[abi:ne180100]<0>(v47, "entry");
  std::string::basic_string[abi:ne180100]<0>(__p, "list");
  ChildAtPath = XmlParserGenericItem::firstChildAtPath((XmlParserGenericItem *)(a1 + 56), (uint64_t)__p, 1);
  v13 = XmlParserGenericItem::addChildWithName(ChildAtPath, (__int128 *)v47);
  if (SHIBYTE(v44) < 0)
    operator delete(__p[0]);
  if ((v47[23] & 0x80000000) != 0)
    operator delete(*(void **)v47);
  memset(v47, 0, sizeof(v47));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v47, 1);
  SipUri::asString(*a2 + 224, 1, __p);
  (*(void (**)(_BYTE *, void **))(*(_QWORD *)v47 + 32))(v47, __p);
  if (SHIBYTE(v44) < 0)
    operator delete(__p[0]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)&v47[8], (uint64_t)"?Call-ID=", 9);
  v47[17] = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(*a2 + 1504) + 16))(*a2 + 1504, v47);
  __p[0] = 0;
  __p[1] = 0;
  v44 = 0;
  SipUri::asString(*a2 + 664, 0, &v41);
  v14 = std::string::append(&v41, "%3Btag%3D", 9uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = *(char *)(*a2 + 1095);
  if (v16 >= 0)
    v17 = (const std::string::value_type *)(*a2 + 1072);
  else
    v17 = *(const std::string::value_type **)(*a2 + 1072);
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(*a2 + 1095);
  else
    v18 = *(_QWORD *)(*a2 + 1080);
  v19 = std::string::append(&v42, v17, v18);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v44 = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)&v47[8], (uint64_t)";From=", 6);
  v47[17] = 0;
  (*(void (**)(_BYTE *, void **))(*(_QWORD *)v47 + 32))(v47, __p);
  memset(&v42, 0, sizeof(v42));
  SipUri::asString(*a2 + 224, 0, &v40);
  v21 = std::string::append(&v40, "%3Btag%3D", 9uLL);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v25 = *(const std::string::value_type **)(v9 + 152);
  v24 = v9 + 152;
  v23 = v25;
  v26 = *(char *)(v24 + 23);
  if (v26 >= 0)
    v27 = (const std::string::value_type *)v24;
  else
    v27 = v23;
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(v24 + 23);
  else
    v28 = *(_QWORD *)(v24 + 8);
  v29 = std::string::append(&v41, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)&v47[8], (uint64_t)";To=", 4);
  v47[17] = 0;
  (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v47 + 32))(v47, &v42);
  if (*(char *)(*a2 + 1615) < 0)
  {
    if (!*(_QWORD *)(*a2 + 1600))
      goto LABEL_42;
    goto LABEL_41;
  }
  if (*(_BYTE *)(*a2 + 1615))
  {
LABEL_41:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)&v47[8], (uint64_t)";Session-ID=",
      12);
    v47[17] = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(*a2 + 1560) + 16))(*a2 + 1560, v47);
  }
LABEL_42:
  std::string::basic_string[abi:ne180100]<0>(&v41, "sip.parser");
  std::string::basic_string[abi:ne180100]<0>(&v40, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v35 = ImsLogger::debug(ims::_logger, (uint64_t)&v41, (uint64_t)&v40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"SipRecipientListBody: added entry ", 34);
  *(_BYTE *)(v35 + 17) = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*(_QWORD *)&v47[24] + 8, v38);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v35 + 32))(v35, v38);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v35 + 17) = 0;
  if (v39 < 0)
    operator delete(v38[0]);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v41, "uri");
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*(_QWORD *)&v47[24] + 8, &v40);
  (*(void (**)(XmlParserGenericItem *, std::string *, std::string *))(*(_QWORD *)v13 + 32))(v13, &v41, &v40);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44) < 0)
    operator delete(__p[0]);
  *(_QWORD *)v47 = &off_1E78D7A10;
  if (v47[16] && *(_QWORD *)&v47[8])
    (*(void (**)(_QWORD))(**(_QWORD **)&v47[8] + 8))(*(_QWORD *)&v47[8]);
  v8 = v46;
  if (v46)
  {
LABEL_60:
    v36 = (unint64_t *)&v8->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BF093100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42)
{
  uint64_t v42;
  uint64_t v44;

  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a33 < 0)
    operator delete(a28);
  if (a40 < 0)
    operator delete(a35);
  *(_QWORD *)(v42 - 128) = &off_1E78D7A10;
  if (*(_BYTE *)(v42 - 112))
  {
    v44 = *(_QWORD *)(v42 - 120);
    if (v44)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void SipRecipientListBody::addedToPart(SipRecipientListBody *this, SipBodyPart *a2)
{
  SipBodyPart::setHeader((unint64_t *)a2, (uint64_t)"Content-Disposition", (std::string *)"recipient-list");
}

void SipRecipientListBody::~SipRecipientListBody(void **this)
{
  SipGenericXmlBody::~SipGenericXmlBody(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t _GLOBAL__sub_I_SipRecipientListBody_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&SipRecipientListBody::kContentType, "application/resource-lists+xml");
  return __cxa_atexit(MEMORY[0x1E0DE44D0], &SipRecipientListBody::kContentType, &dword_1BEDF4000);
}

_QWORD *HttpMessage::HttpMessage(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = off_1E78D99F8;
  a1[2] = 0;
  a1[1] = a1 + 2;
  a1[3] = 0;
  v3 = (std::string *)(a1 + 4);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  return a1;
}

void sub_1BF093390(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

uint64_t HttpMessage::HttpMessage(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4)
{
  std::string *v7;
  uint64_t **v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  std::string v15;
  void *__p[2];
  char v17;
  void **v18;

  *(_QWORD *)a1 = off_1E78D99F8;
  v7 = (std::string *)(a1 + 32);
  v8 = (uint64_t **)(a1 + 8);
  std::map<std::string,std::string,HttpMessage::ciLess,std::allocator<std::pair<std::string const,std::string>>>::map[abi:ne180100]((uint64_t *)(a1 + 8), a3);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    v7->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v10 = *a4;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 56) = v10;
  }
  if (*(char *)(a1 + 79) < 0)
  {
    if (!*(_QWORD *)(a1 + 64))
      return a1;
  }
  else if (!*(_BYTE *)(a1 + 79))
  {
    return a1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Content-Length");
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)v8, (uint64_t)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  if (a1 + 16 == v11)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Content-Length");
    if (*(char *)(a1 + 79) < 0)
      v12 = *(_QWORD *)(a1 + 64);
    else
      v12 = *(unsigned __int8 *)(a1 + 79);
    std::to_string(&v15, v12);
    v18 = __p;
    v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v18);
    std::string::operator=((std::string *)(v13 + 7), &v15);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (v17 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_1BF093530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;
  void **v22;
  void **v23;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 79) < 0)
    operator delete(*v23);
  if (*(char *)(v20 + 55) < 0)
    operator delete(*v22);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v21, *(_QWORD **)(v20 + 16));
  _Unwind_Resume(a1);
}

void HttpMessage::HttpMessage(HttpMessage *this, const HttpMessage *a2)
{
  std::string *v4;
  void **v5;
  std::string v6;

  *(_QWORD *)this = off_1E78D99F8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_QWORD *)this + 3) = 0;
  *((_OWORD *)this + 2) = 0u;
  v4 = (std::string *)((char *)this + 32);
  v5 = (void **)((char *)this + 56);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  if (this != a2)
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)this + 8, *((__int128 **)a2 + 1), (__int128 *)a2 + 1);
  if (*((char *)a2 + 79) < 0)
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  else
    v6 = *(std::string *)((char *)a2 + 56);
  if (*((char *)this + 79) < 0)
    operator delete(*v5);
  *(std::string *)v5 = v6;
  std::string::operator=(v4, (const std::string *)((char *)a2 + 32));
}

void sub_1BF093690(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  _QWORD **v4;
  void **v5;

  if (*(char *)(v2 + 79) < 0)
    operator delete(*v5);
  if (*(char *)(v2 + 55) < 0)
    operator delete(*v3);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *v4);
  _Unwind_Resume(a1);
}

void HttpMessage::findHeader(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v5 = a1 + 8;
  if (a1 + 16 == std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(a1 + 8, a2))
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(v5, a2);
    if (*(char *)(v6 + 79) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v6 + 56), *(_QWORD *)(v6 + 64));
    }
    else
    {
      v7 = *(_OWORD *)(v6 + 56);
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 72);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
    }
  }
}

void HttpMessage::serialize(HttpMessage *this, __CFHTTPMessage *a2)
{
  __int128 *v4;
  char *v5;
  __int128 *v6;
  __int128 *v7;
  BOOL v8;
  UInt8 *v9;
  CFIndex v10;
  uint64_t v11;
  CFStringRef value;
  uint64_t v13;
  CFStringRef headerField;
  CFDataRef bodyData[2];
  void *__p[2];
  __int128 v17;

  v4 = (__int128 *)*((_QWORD *)this + 1);
  v5 = (char *)this + 16;
  if (v4 != (__int128 *)((char *)this + 16))
  {
    do
    {
      *(_OWORD *)__p = 0u;
      v17 = 0u;
      *(_OWORD *)bodyData = 0u;
      std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)bodyData, v4 + 2);
      v13 = 0;
      headerField = 0;
      ims::CFString::CFString(&v13, (char *)bodyData, 0x8000100u);
      v11 = 0;
      value = 0;
      ims::CFString::CFString(&v11, (char *)&__p[1], 0x8000100u);
      CFHTTPMessageSetHeaderFieldValue(a2, headerField, value);
      ims::CFType::~CFType((ims::CFType *)&v11);
      ims::CFType::~CFType((ims::CFType *)&v13);
      if (SHIBYTE(v17) < 0)
        operator delete(__p[1]);
      if (SHIBYTE(__p[0]) < 0)
        operator delete(bodyData[0]);
      v6 = (__int128 *)*((_QWORD *)v4 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(__int128 **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (__int128 *)*((_QWORD *)v4 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
    }
    while (v7 != (__int128 *)v5);
  }
  v9 = (UInt8 *)this + 56;
  if (*((char *)this + 79) < 0)
  {
    v10 = *((_QWORD *)this + 8);
    if (!v10)
      return;
    bodyData[0] = 0;
    bodyData[1] = 0;
    v9 = *(UInt8 **)v9;
  }
  else
  {
    v10 = *((unsigned __int8 *)this + 79);
    if (!*((_BYTE *)this + 79))
      return;
    bodyData[0] = 0;
    bodyData[1] = 0;
  }
  ims::CFData::CFData((ims::CFData *)bodyData, v9, v10);
  CFHTTPMessageSetBody(a2, bodyData[1]);
  ims::CFType::~CFType((ims::CFType *)bodyData);
}

void sub_1BF0938B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  ims::CFType::~CFType((ims::CFType *)va);
  _Unwind_Resume(a1);
}

void HttpMessage::copySerializedMessage(HttpMessage *this@<X0>, _QWORD *a2@<X8>)
{
  __CFHTTPMessage *v3;
  __CFHTTPMessage *v4;
  __int128 v5;
  uint64_t v6;

  v3 = (__CFHTTPMessage *)(*(uint64_t (**)(HttpMessage *))(*(_QWORD *)this + 32))(this);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v3)
  {
    v4 = v3;
    HttpMessage::copySerializedMessage(v3, &v5);
    *(_OWORD *)a2 = v5;
    a2[2] = v6;
    CFRelease(v4);
  }
}

void sub_1BF09395C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void HttpMessage::copySerializedMessage(CFHTTPMessageRef message@<X1>, _QWORD *a2@<X8>)
{
  const __CFData *v4;
  UInt8 *BytePtr;
  CFIndex Length;
  void (**v7)(ims::CFData *__hidden);
  CFDataRef theData;

  if (!message)
    goto LABEL_8;
  v4 = CFHTTPMessageCopySerializedMessage(message);
  v7 = &off_1E78D9E48;
  theData = v4;
  if (!v4 || !CFDataGetLength(v4))
  {
    ims::CFType::~CFType((ims::CFType *)&v7);
LABEL_8:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  if (theData)
  {
    BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
    Length = CFDataGetLength(theData);
  }
  else
  {
    BytePtr = 0;
    Length = 0;
  }
  std::string::basic_string[abi:ne180100](a2, BytePtr, Length);
  ims::CFType::~CFType((ims::CFType *)&v7);
}

void sub_1BF093A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ims::CFType::~CFType((ims::CFType *)&a9);
  _Unwind_Resume(a1);
}

uint64_t HttpMessage::deserialize(HttpMessage *this, CFHTTPMessageRef message)
{
  int v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t *v7;
  __int128 *v8;
  __int128 *v9;
  BOOL v10;
  const __CFData *v11;
  const std::string::value_type *BytePtr;
  CFIndex Length;
  void *__p[2];
  char v16;
  CFDataRef theData[2];
  void *v18[2];
  __int128 v19;
  __int128 *v20;
  _QWORD *v21[2];
  _QWORD v22[2];

  v22[0] = &off_1E78EAC60;
  v22[1] = CFHTTPMessageCopyAllHeaderFields(message);
  v21[0] = 0;
  v21[1] = 0;
  v20 = (__int128 *)v21;
  ims::CFDictionary::asStringMap((uint64_t)v22, (uint64_t)&v20, (uint64_t)theData);
  v4 = (*(uint64_t (**)(CFDataRef, _QWORD))(*(_QWORD *)theData[1] + 24))(theData[1], LODWORD(v18[0]));
  ImsResult::~ImsResult((ImsResult *)theData);
  if (v4)
  {
    std::string::basic_string[abi:ne180100]<0>(theData, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::error(ims::_logger, (uint64_t)theData, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Unable to fetch HTTP Request headers", 36);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (v16 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v18[0]) < 0)
      operator delete(theData[0]);
  }
  else
  {
    v6 = v20;
    if (v20 != (__int128 *)v21)
    {
      do
      {
        *(_OWORD *)v18 = 0u;
        v19 = 0u;
        *(_OWORD *)theData = 0u;
        std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)theData, v6 + 2);
        __p[0] = theData;
        v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 1, (uint64_t)theData, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
        std::string::operator=((std::string *)(v7 + 7), (const std::string *)&v18[1]);
        if (SHIBYTE(v19) < 0)
          operator delete(v18[1]);
        if (SHIBYTE(v18[0]) < 0)
          operator delete(theData[0]);
        v8 = (__int128 *)*((_QWORD *)v6 + 1);
        if (v8)
        {
          do
          {
            v9 = v8;
            v8 = *(__int128 **)v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (__int128 *)*((_QWORD *)v6 + 2);
            v10 = *(_QWORD *)v9 == (_QWORD)v6;
            v6 = v9;
          }
          while (!v10);
        }
        v6 = v9;
      }
      while (v9 != (__int128 *)v21);
    }
    v11 = CFHTTPMessageCopyBody(message);
    if (v11)
    {
      theData[0] = (CFDataRef)&off_1E78D9E48;
      theData[1] = v11;
      BytePtr = (const std::string::value_type *)CFDataGetBytePtr(v11);
      if (theData[1])
        Length = CFDataGetLength(theData[1]);
      else
        Length = 0;
      std::string::__assign_external((std::string *)((char *)this + 56), BytePtr, Length);
      ims::CFType::~CFType((ims::CFType *)theData);
    }
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v20, v21[0]);
  ims::CFType::~CFType((ims::CFType *)v22);
  return v4 ^ 1u;
}

void sub_1BF093CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,_QWORD *a30)
{
  uint64_t v30;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a29, a30);
  ims::CFType::~CFType((ims::CFType *)(v30 - 104));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t *v10;
  uint64_t **leaf_high;
  __int128 *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t **v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;

  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v19 = (uint64_t *)a1;
    v20 = v8;
    v21 = v8;
    if (v8)
    {
      v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          v10 = v21;
          v18 = 0;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high(a1, &v18, (uint64_t)(v21 + 4));
          std::__tree<unsigned int>::__insert_node_at((uint64_t **)a1, v18, leaf_high, v10);
          v8 = v20;
          v21 = v20;
          if (v20)
            v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v20);
          v12 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v12)
          {
            do
            {
              a2 = v12;
              v12 = *(__int128 **)v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v13 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v13);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v19);
  }
  if (a2 != a3)
  {
    do
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>(a1, a2 + 2, &v19);
      v18 = 0;
      v14 = v19;
      v15 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high(a1, &v18, (uint64_t)(v19 + 4));
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)a1, v18, v15, v14);
      v19 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&v19, 0);
      v16 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(__int128 **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (__int128 *)*((_QWORD *)a2 + 2);
          v13 = *(_QWORD *)v17 == (_QWORD)a2;
          a2 = v17;
        }
        while (!v13);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
}

void sub_1BF093EFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  const char *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const char *v10;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    if (*(char *)(a3 + 23) >= 0)
      v6 = (const char *)a3;
    else
      v6 = *(const char **)a3;
    do
    {
      while (1)
      {
        v5 = v4;
        v9 = (_QWORD *)v4[4];
        v7 = v4 + 4;
        v8 = v9;
        v10 = (const char *)(*((char *)v7 + 23) >= 0 ? v7 : v8);
        if ((strcasecmp(v6, v10) & 0x80000000) == 0)
          break;
        v4 = (_QWORD *)*v5;
        result = v5;
        if (!*v5)
          goto LABEL_14;
      }
      v4 = (_QWORD *)v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_14:
  *a2 = v5;
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  const char *v7;

  v3 = a1 + 8;
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(a1, a2, *(_QWORD *)(a1 + 8), a1 + 8);
  if (v3 == v4)
    return v3;
  v5 = v4;
  v6 = *(char *)(a2 + 23) >= 0 ? (const char *)a2 : *(const char **)a2;
  v7 = *(char *)(v5 + 55) >= 0 ? (const char *)(v5 + 32) : *(const char **)(v5 + 32);
  if (strcasecmp(v6, v7) < 0)
    return v3;
  return v5;
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  const char *v7;
  int v8;
  uint64_t *v9;

  if (a3)
  {
    v5 = a3;
    if (*(char *)(a2 + 23) >= 0)
      v6 = (const char *)a2;
    else
      v6 = *(const char **)a2;
    do
    {
      if (*(char *)(v5 + 55) >= 0)
        v7 = (const char *)(v5 + 32);
      else
        v7 = *(const char **)(v5 + 32);
      v8 = strcasecmp(v7, v6);
      v9 = (uint64_t *)(v5 + 8);
      if (v8 >= 0)
      {
        v9 = (uint64_t *)v5;
        a4 = v5;
      }
      v5 = *v9;
    }
    while (*v9);
  }
  return a4;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v11 = 0;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,SDPParser::str_caseless_compare,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1BF0941B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void ImsCFDnsResolver::HostInfo::~HostInfo(ImsCFDnsResolver::HostInfo *this)
{
  __CFHost *v2;
  __CFRunLoop *Main;
  const void *v4;

  v2 = (__CFHost *)*((_QWORD *)this + 2);
  if (v2)
  {
    Main = CFRunLoopGetMain();
    CFHostUnscheduleFromRunLoop(v2, Main, (CFStringRef)*MEMORY[0x1E0C9B270]);
  }
  v4 = (const void *)*((_QWORD *)this + 10);
  if (v4)
    _Block_release(v4);
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  ims::CFType::~CFType((ImsCFDnsResolver::HostInfo *)((char *)this + 8));
}

void ImsCFDnsResolver::HostInfo::_callback(ImsCFDnsResolver::HostInfo *this, __CFHost *a2, CFHostInfoType a3, const CFStreamError *a4, void *a5)
{
  _QWORD v5[5];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN16ImsCFDnsResolver8HostInfo9_callbackEP8__CFHost14CFHostInfoTypePK13CFStreamErrorPv_block_invoke;
  v5[3] = &__block_descriptor_tmp_32;
  v5[4] = a4;
  ims::performBlock((IMSClientManager *)v5);
}

void ___ZN16ImsCFDnsResolver8HostInfo9_callbackEP8__CFHost14CFHostInfoTypePK13CFStreamErrorPv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  const __CFArray *Addressing;
  CFIndex Count;
  CFIndex v5;
  const void *ValueAtIndex;
  const void *v7;
  CFTypeID v8;
  IpAddress *BytePtr;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void ***v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  void **v24;
  BOOL v25;
  uint64_t *v26;
  __int128 v27;
  void *__p[2];
  char v29;
  void (**v30)(ims::CFData *__hidden);
  CFDataRef theData;
  void *v32[2];
  char v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void (**v37)(ims::CFType *__hidden);
  CFArrayRef v38;
  Boolean hasBeenResolved;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1 && (v2 = *(_QWORD *)v1) != 0)
  {
    hasBeenResolved = 0;
    Addressing = CFHostGetAddressing(*(CFHostRef *)(v1 + 16), &hasBeenResolved);
    v37 = off_1E78EAB00;
    v38 = Addressing;
    if (Addressing)
      CFRetain(Addressing);
    v37 = (void (**)(ims::CFType *__hidden))&off_1E78EAC08;
    if (hasBeenResolved)
    {
      if (v38)
      {
        Count = CFArrayGetCount(v38);
        v34 = 0;
        v35 = 0;
        v36 = 0;
        if (Count >= 1)
        {
          v5 = 0;
          while (1)
          {
            v30 = &off_1E78D9E48;
            theData = 0;
            if (!v38
              || (ValueAtIndex = CFArrayGetValueAtIndex(v38, v5), (v7 = ValueAtIndex) == 0)
              || (v8 = CFGetTypeID(ValueAtIndex), v8 != ((uint64_t (*)(_QWORD))v30[4])(&v30)))
            {
              std::string::basic_string[abi:ne180100]<0>(v32, "dns");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v10 = ImsLogger::debug(ims::_logger, (uint64_t)v32, (uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"couldn't get data for address ", 30);
              *(_BYTE *)(v10 + 17) = 0;
              std::ostream::operator<<();
              *(_BYTE *)(v10 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v10 + 17) = 0;
              if (v29 < 0)
                operator delete(__p[0]);
              if (v33 < 0)
                operator delete(v32[0]);
              goto LABEL_32;
            }
            ((void (*)(void (***)(ims::CFData *__hidden), const void *, uint64_t))v30[6])(&v30, v7, 1);
            v27 = 0uLL;
            BytePtr = theData;
            if (theData)
              BytePtr = (IpAddress *)CFDataGetBytePtr(theData);
            IpAddress::createAddress(BytePtr, (uint64_t)&v27);
            if (!(_QWORD)v27)
              break;
            if ((*(_DWORD *)(v1 + 72) & (*(unsigned int (**)(_QWORD))(*(_QWORD *)v27 + 136))(v27)) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(v32, "dns");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v12 = ImsLogger::debug(ims::_logger, (uint64_t)v32, (uint64_t)__p);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 32))(v12, v1 + 24);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)": skipping ", 11);
              *(_BYTE *)(v12 + 17) = 0;
              v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v27 + 128))(v27);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 32))(v12, v13);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)" address ", 9);
              *(_BYTE *)(v12 + 17) = 0;
              v11 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v27 + 40))(v27, v12);
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              goto LABEL_23;
            }
            std::vector<std::shared_ptr<LazuliHeader>>::push_back[abi:ne180100]((char **)&v34, &v27);
LABEL_27:
            v14 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
            if (*((_QWORD *)&v27 + 1))
            {
              v15 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
              do
                v16 = __ldaxr(v15);
              while (__stlxr(v16 - 1, v15));
              if (!v16)
              {
                ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                std::__shared_weak_count::__release_weak(v14);
              }
            }
LABEL_32:
            ims::CFType::~CFType((ims::CFType *)&v30);
            if (++v5 == Count)
              goto LABEL_43;
          }
          std::string::basic_string[abi:ne180100]<0>(v32, "dns");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v11 = ImsLogger::debug(ims::_logger, (uint64_t)v32, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"createAddress failed", 20);
          *(_BYTE *)(v11 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_23:
          *(_BYTE *)(v11 + 17) = 0;
          if (v29 < 0)
            operator delete(__p[0]);
          if (v33 < 0)
            operator delete(v32[0]);
          goto LABEL_27;
        }
      }
      else
      {
        v34 = 0;
        v35 = 0;
        v36 = 0;
      }
LABEL_43:
      ImsDnsResolver::cleanAddressesAndPerformBlock(v2, v1 + 24, (__int128 **)&v34, *(_QWORD *)(v1 + 80));
      v19 = (void ***)(v2 + 8);
      v20 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v2 + 8, (void **)(v1 + 24));
      if ((void **)(v2 + 16) != v20)
      {
        v21 = v20;
        v22 = (void **)v20[1];
        if (v22)
        {
          do
          {
            v23 = v22;
            v22 = (void **)*v22;
          }
          while (v22);
        }
        else
        {
          v24 = v20;
          do
          {
            v23 = (void **)v24[2];
            v25 = *v23 == v24;
            v24 = v23;
          }
          while (!v25);
        }
        if (*v19 == v20)
          *v19 = v23;
        v26 = *(uint64_t **)(v2 + 16);
        --*(_QWORD *)(v2 + 24);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v26, (uint64_t *)v21);
        if (*((char *)v21 + 55) < 0)
          operator delete(v21[4]);
        operator delete(v21);
      }
      ImsCFDnsResolver::HostInfo::~HostInfo((ImsCFDnsResolver::HostInfo *)v1);
      MEMORY[0x1C3B87100]();
      v32[0] = &v34;
      std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v32);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v34, "dns");
      std::string::basic_string[abi:ne180100]<0>(v32, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v18 = ImsLogger::debug(ims::_logger, (uint64_t)&v34, (uint64_t)v32);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 32))(v18, v1 + 24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)" hasn't been resolved", 21);
      *(_BYTE *)(v18 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v18 + 17) = 0;
      if (v33 < 0)
        operator delete(v32[0]);
      if (SHIBYTE(v36) < 0)
        operator delete(v34);
    }
    ims::CFType::~CFType((ims::CFType *)&v37);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v34, "dns");
    std::string::basic_string[abi:ne180100]<0>(v32, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v17 = ImsLogger::error(ims::_logger, (uint64_t)&v34, (uint64_t)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"NULL hostInfo or resolver", 25);
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    if (v33 < 0)
      operator delete(v32[0]);
    if (SHIBYTE(v36) < 0)
      operator delete(v34);
  }
}

void sub_1BF0948AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a32 < 0)
    operator delete(__p);
  ims::CFType::~CFType((ims::CFType *)(v32 - 104));
  _Unwind_Resume(a1);
}

void ImsCFDnsResolver::~ImsCFDnsResolver(ImsCFDnsResolver *this)
{
  char *v2;
  char *v3;
  ImsCFDnsResolver::HostInfo *v4;
  char *v5;
  char *v6;
  BOOL v7;

  *(_QWORD *)this = &off_1E78D9DF8;
  v2 = (char *)*((_QWORD *)this + 1);
  v3 = (char *)this + 16;
  if (v2 != (char *)this + 16)
  {
    do
    {
      v4 = (ImsCFDnsResolver::HostInfo *)*((_QWORD *)v2 + 7);
      if (v4)
      {
        ImsCFDnsResolver::HostInfo::~HostInfo(v4);
        MEMORY[0x1C3B87100]();
      }
      v5 = (char *)*((_QWORD *)v2 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v2 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 2));
}

{
  ImsCFDnsResolver::~ImsCFDnsResolver(this);
  JUMPOUT(0x1C3B87100);
}

void ImsCFDnsResolver::resolveHostname(uint64_t a1, uint64_t a2, int a3, const std::string *a4, void (**a5)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD **v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  const __CFAllocator *v17;
  CFHostRef v18;
  __CFHost *v19;
  __CFHost *v20;
  __CFRunLoop *Main;
  uint64_t v22;
  const ImsResult *v23;
  const ImsResult *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t **v29;
  _QWORD *v30;
  uint64_t *v31;
  std::string *v32;
  _QWORD *v33;
  uint64_t *v34;
  _QWORD **v35;
  std::string *v36;
  _BYTE v37[72];
  void *__p[2];
  char v39;
  CFHostClientContext clientContext;
  CFStreamError error;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v10 = (_QWORD **)(a1 + 8);
  v11 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 8, (void **)a2);
  if ((void **)(a1 + 16) != v11)
  {
    memset(v37, 0, 24);
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    error.domain = (CFIndex)&off_1E78B7238;
    *(_QWORD *)&error.error = &_bambiDomain;
    LODWORD(v42) = 1073741826;
    v12 = ImsResult::operator<<<std::string>((uint64_t)&error, a2);
    v13 = ImsResult::operator<<<char [27]>(v12, " is already being resolved");
    ((void (**)(_QWORD, uint64_t, uint64_t, _BYTE *))a5)[2](a5, a2, v13, v37);
    ImsResult::~ImsResult((ImsResult *)&error);
    error.domain = (CFIndex)v37;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&error);
    return;
  }
  v14 = (uint64_t **)v11;
  v35 = v10;
  v15 = operator new();
  *(_QWORD *)(v15 + 8) = &off_1E78D9EA0;
  *(_QWORD *)(v15 + 16) = 0;
  *(_OWORD *)(v15 + 24) = 0u;
  v16 = v15 + 24;
  *(_QWORD *)(v15 + 80) = 0;
  v36 = (std::string *)(v15 + 48);
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_DWORD *)(v15 + 72) = 0;
  *(_QWORD *)v15 = a1;
  std::string::operator=((std::string *)(v15 + 24), (const std::string *)a2);
  *(_DWORD *)(v15 + 72) = a3;
  std::string::operator=((std::string *)(v15 + 48), a4);
  *(_QWORD *)(v15 + 80) = _Block_copy(a5);
  memset(v37, 0, sizeof(v37));
  v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ims::CFString::CFString(&error, (char *)(v15 + 24), 0x8000100u);
  v18 = CFHostCreateWithName(v17, *(CFStringRef *)&error.error);
  ims::CFType::setRef((ims::CFType *)(v15 + 8), v18, 0);
  ims::CFType::~CFType((ims::CFType *)&error);
  v19 = *(__CFHost **)(v15 + 16);
  if (!v19)
  {
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    error.domain = (CFIndex)&off_1E78B7238;
    *(_QWORD *)&error.error = &_bambiDomain;
    LODWORD(v42) = 0x40000000;
    v23 = (const ImsResult *)ImsResult::operator<<<char [23]>((uint64_t)&error, "couldn't create CFHost");
    ImsResult::ImsResult((ImsResult *)v37, v23);
LABEL_9:
    ImsResult::~ImsResult((ImsResult *)&error);
    goto LABEL_23;
  }
  clientContext.version = 0;
  clientContext.info = (void *)v15;
  memset(&clientContext.retain, 0, 24);
  if (!CFHostSetClient(v19, (CFHostClientCallBack)ImsCFDnsResolver::HostInfo::_callback, &clientContext))
  {
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    error.domain = (CFIndex)&off_1E78B7238;
    *(_QWORD *)&error.error = &_bambiDomain;
    LODWORD(v42) = 0x40000000;
    v24 = (const ImsResult *)ImsResult::operator<<<char [23]>((uint64_t)&error, "CFHostSetClient failed");
    ImsResult::ImsResult((ImsResult *)v37, v24);
    goto LABEL_9;
  }
  v20 = *(__CFHost **)(v15 + 16);
  Main = CFRunLoopGetMain();
  CFHostScheduleWithRunLoop(v20, Main, (CFStringRef)*MEMORY[0x1E0C9B270]);
  if (*(char *)(v15 + 71) < 0)
    v22 = *(_QWORD *)(v15 + 56);
  else
    v22 = *(unsigned __int8 *)(v15 + 71);
  if (v22)
  {
    std::string::basic_string[abi:ne180100]<0>(&error, "dns");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v25 = ImsLogger::debug(ims::_logger, (uint64_t)&error, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"resolving ", 10);
    *(_BYTE *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 32))(v25, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)" on ", 4);
    *(_BYTE *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v25 + 32))(v25, v36);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v25 + 17) = 0;
    if (v39 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v42) < 0)
      operator delete((void *)error.domain);
    ims::CFString::CFString(&error, (char *)v36, 0x8000100u);
    _CFHostStartInfoResolutionForInterface();
    ims::CFType::~CFType((ims::CFType *)&error);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&error, "dns");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v26 = ImsLogger::debug(ims::_logger, (uint64_t)&error, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"resolving ", 10);
    *(_BYTE *)(v26 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 32))(v26, v16);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v26 + 17) = 0;
    if (v39 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v42) < 0)
      operator delete((void *)error.domain);
    error.domain = 0;
    *(_QWORD *)&error.error = 0;
    CFHostStartInfoResolution(*(CFHostRef *)(v15 + 16), kCFHostAddresses, &error);
  }
  memset(&v37[24], 0, 48);
  *(_QWORD *)v37 = &off_1E78B7238;
  *(_QWORD *)&v37[8] = &_bambiDomain;
  *(_DWORD *)&v37[16] = 0;
LABEL_23:
  if (!(*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)&v37[8] + 24))(*(_QWORD *)&v37[8], *(unsigned int *)&v37[16]))
  {
    v27 = *v14;
    if (*v14)
    {
      v28 = v14;
      while (1)
      {
        while (1)
        {
          v29 = (uint64_t **)v27;
          v30 = v27 + 4;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a2, (void **)v27 + 4) & 0x80) == 0)break;
          v27 = *v29;
          v28 = v29;
          if (!*v29)
            goto LABEL_34;
        }
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v30, (void **)a2) & 0x80) == 0)
          break;
        v28 = v29 + 1;
        v27 = v29[1];
        if (!v27)
          goto LABEL_34;
      }
      v31 = *v28;
      if (*v28)
        goto LABEL_40;
    }
    else
    {
      v28 = v14;
      v29 = v14;
    }
LABEL_34:
    v31 = (uint64_t *)operator new(0x40uLL);
    v32 = (std::string *)(v31 + 4);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v32->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v31[6] = *(_QWORD *)(a2 + 16);
    }
    v31[7] = 0;
    *v31 = 0;
    v31[1] = 0;
    v31[2] = (uint64_t)v29;
    *v28 = v31;
    v33 = (_QWORD *)**v35;
    v34 = v31;
    if (v33)
    {
      *v35 = v33;
      v34 = *v28;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v14, v34);
    ++*(_QWORD *)(a1 + 24);
LABEL_40:
    v31[7] = v15;
    goto LABEL_41;
  }
  ImsCFDnsResolver::HostInfo::~HostInfo((ImsCFDnsResolver::HostInfo *)v15);
  MEMORY[0x1C3B87100]();
  error.domain = 0;
  *(_QWORD *)&error.error = 0;
  v42 = 0;
  ((void (**)(_QWORD, uint64_t, _BYTE *, CFStreamError *))a5)[2](a5, a2, v37, &error);
  clientContext.version = (CFIndex)&error;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&clientContext);
LABEL_41:
  ImsResult::~ImsResult((ImsResult *)v37);
}

void sub_1BF0950C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ims::CFHost::~CFHost(ims::CFHost *this)
{
  ims::CFType::~CFType(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t ims::CFType::getMemorySize(ims::CFType *this)
{
  return 0;
}

void ims::CFData::~CFData(ims::CFData *this)
{
  ims::CFType::~CFType(this);
  JUMPOUT(0x1C3B87100);
}

void SipEventHeader::~SipEventHeader(void **this)
{
  *this = off_1E78C5CF8;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  *this = off_1E78E5828;
  this[8] = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
}

{
  *this = off_1E78C5CF8;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  *this = off_1E78E5828;
  this[8] = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C3B87100);
}

SipStringParameterHeader *SipEventHeader::clone(SipEventHeader *this)
{
  SipStringParameterHeader *v2;

  v2 = (SipStringParameterHeader *)operator new();
  SipStringParameterHeader::SipStringParameterHeader(v2, this);
  *(_QWORD *)v2 = off_1E78D9F28;
  *((_BYTE *)v2 + 56) = 0;
  *((_BYTE *)v2 + 97) = 0;
  return v2;
}

void sub_1BF09534C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C4070BFB248);
  _Unwind_Resume(a1);
}

void LazuliFromPathHeader::LazuliFromPathHeader(LazuliFromPathHeader *this, const LazuliRouteSet *a2)
{
  std::string *v3;

  v3 = LazuliHeader::LazuliHeader((std::string *)this, (const std::string *)"From-Path");
  v3->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78D9FB0;
  LazuliRouteSet::LazuliRouteSet((LazuliRouteSet *)&v3[2].__r_.__value_.__r.__words[1], a2);
}

void sub_1BF0953B4(_Unwind_Exception *a1)
{
  void **v1;

  LazuliHeader::~LazuliHeader(v1);
  _Unwind_Resume(a1);
}

void LazuliFromPathHeader::create(std::__shared_weak_count **a1@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v3 = (std::__shared_weak_count *)operator new(0x88uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DA030;
  v5 = v3 + 1;
  LazuliHeader::LazuliHeader((std::string *)&v3[1], (const std::string *)"From-Path");
  v3[3].__shared_owners_ = (uint64_t)&off_1E78EF3C0;
  *(_OWORD *)&v3[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[4].__shared_owners_ = 0u;
  v3[5].std::__shared_count = 0u;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DA080;
  shared_weak_owners = (std::__shared_weak_count *)v3[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v3[1].__shared_owners_ = (uint64_t)v5;
    v3[1].__shared_weak_owners_ = (uint64_t)v3;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v3[1].__shared_owners_ = (uint64_t)v5;
    v3[1].__shared_weak_owners_ = (uint64_t)v3;
  }
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_14:
  *a1 = v5;
  a1[1] = v3;
}

void sub_1BF0954E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t LazuliFromPathHeader::encodeValue(LazuliFromPathHeader *this, ImsOutStream *a2)
{
  LazuliRouteSet::toStream((LazuliFromPathHeader *)((char *)this + 56), a2);
  return 1;
}

BOOL LazuliFromPathHeader::setValueFromString(uint64_t a1, std::string *a2)
{
  _QWORD *v2;
  _BOOL8 v3;

  v2 = (_QWORD *)(a1 + 56);
  v3 = LazuliRouteSet::fromString((LazuliRouteSet *)(a1 + 56), a2);
  if (!v3)
    SipRouteSet::clear(v2);
  return v3;
}

std::string::size_type LazuliFromPathHeader::findParameterMarker(int a1, std::string *this)
{
  std::string::size_type v3;
  std::string::size_type size;
  std::string::size_type v5;
  std::string::size_type v6;

  v3 = 0;
  while (1)
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) != 0)
      size = this->__r_.__value_.__l.__size_;
    if (v3 >= size)
      return -1;
    v5 = std::string::find(this, 60, v3);
    if (v5 == -1)
      break;
    v6 = std::string::find(this, 62, v5);
    v3 = v6 + 1;
    if (v6 == -1)
      return -1;
  }
  return std::string::find(this, 59, v3);
}

void LazuliFromPathHeader::~LazuliFromPathHeader(void **this)
{
  *this = &off_1E78D9FB0;
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)(this + 7));
  LazuliHeader::~LazuliHeader(this);
}

{
  *this = &off_1E78D9FB0;
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)(this + 7));
  LazuliHeader::~LazuliHeader(this);
  JUMPOUT(0x1C3B87100);
}

double LazuliFromPathHeader::clone@<D0>(LazuliFromPathHeader *this@<X0>, _OWORD *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  double result;
  __int128 v7;

  v4 = (std::string *)operator new(0x88uLL);
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78C7EB8;
  v4[1].__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78DE938;
  v4[1].__r_.__value_.__l.__size_ = 0;
  v4[1].__r_.__value_.__r.__words[2] = 0;
  v5 = v4 + 2;
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    v4[2].__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
  v4[3].__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 48);
  v4[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78D9FB0;
  LazuliRouteSet::LazuliRouteSet((LazuliRouteSet *)&v4[3].__r_.__value_.__r.__words[1], (LazuliFromPathHeader *)((char *)this + 56));
  *(_QWORD *)&v7 = v4 + 1;
  *((_QWORD *)&v7 + 1) = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v7, &v4[1].__r_.__value_.__l.__size_, (uint64_t)&v4[1]);
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

void sub_1BF095728(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *shared_weak_owners;
  void *v4;

  shared_weak_owners = (std::__shared_weak_count *)v1[1].__shared_weak_owners_;
  if (shared_weak_owners)
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliFromPathHeader::create(void)::HeaderWrapper,std::allocator<LazuliFromPathHeader::create(void)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DA030;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliFromPathHeader::create(void)::HeaderWrapper,std::allocator<LazuliFromPathHeader::create(void)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DA030;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<LazuliFromPathHeader::create(void)::HeaderWrapper,std::allocator<LazuliFromPathHeader::create(void)::HeaderWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void LazuliFromPathHeader::create(void)::HeaderWrapper::~HeaderWrapper(void **a1)
{
  *a1 = &off_1E78D9FB0;
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)(a1 + 7));
  LazuliHeader::~LazuliHeader(a1);
}

{
  *a1 = &off_1E78D9FB0;
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)(a1 + 7));
  LazuliHeader::~LazuliHeader(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1BF095924(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1C3B8707C](v1);
  _Unwind_Resume(a1);
}

_QWORD *SipDialogState::stateStr@<X0>(SipDialogState *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v4;
  char *v5;

  v4 = *(_DWORD *)this - 1;
  if (v4 > 4)
    v5 = "unknown";
  else
    v5 = off_1E78DA0F0[v4];
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B8707C](a1 + 128);
  return a1;
}

void SipDialogParticipantInfo::participantName(std::string *this, const std::string *a2)
{
  const std::string *v4;
  std::string::size_type v5;
  std::string::size_type v6;
  std::string::size_type size;
  char v8;
  char v9;
  std::string::size_type v10;
  char v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string::size_type v14;
  __int128 *v15;
  __int128 v16;
  char v17;
  size_t v18;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  char v25;
  std::string __p;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  _BYTE v31[128];
  std::string v32[2];
  _BYTE v33[224];
  uint64_t v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  memset(&v28, 0, sizeof(v28));
  v4 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  if (a2->__r_.__value_.__r.__words[0] == a2->__r_.__value_.__l.__size_)
    goto LABEL_12;
  while (1)
  {
    v5 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    LOBYTE(v6) = *((_BYTE *)&v28.__r_.__value_.__s + 23);
    size = v28.__r_.__value_.__l.__size_;
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v5 = v28.__r_.__value_.__l.__size_;
    if (v5)
      break;
    std::string::operator=(&v28, v4);
    v4 += 2;
    if (v4 == (const std::string *)a2->__r_.__value_.__l.__size_)
    {
      LOBYTE(v6) = *((_BYTE *)&v28.__r_.__value_.__s + 23);
      size = v28.__r_.__value_.__l.__size_;
      break;
    }
  }
  v8 = v6;
  v6 = v6;
  if ((v6 & 0x80u) != 0)
    v6 = size;
  if (!v6)
  {
LABEL_12:
    SipDialogParticipantInfo::uri(a2, &__p);
    memset(&v27, 0, sizeof(v27));
    v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v27, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (!__p.__r_.__value_.__l.__size_)
          goto LABEL_25;
        goto LABEL_16;
      }
    }
    else
    {
      v27 = __p;
    }
    if (!v9)
      goto LABEL_25;
LABEL_16:
    v34 = 0;
    memset(v33, 0, sizeof(v33));
    memset(v32, 0, sizeof(v32));
    memset(v31, 0, sizeof(v31));
    SipUri::SipUri((uint64_t)v31, &__p);
    std::string::operator=(&v27, (const std::string *)&v33[24]);
    v10 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    v11 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    v12 = v27.__r_.__value_.__l.__size_;
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    else
      v13 = v27.__r_.__value_.__l.__size_;
    if (!v13)
    {
      std::string::operator=(&v27, v32);
      v10 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
      v12 = v27.__r_.__value_.__l.__size_;
      v11 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    }
    if (v11 < 0)
      v10 = v12;
    if (!v10)
    {
      std::string::operator=(&v27, (const std::string *)v33);
      v14 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v14 = v27.__r_.__value_.__l.__size_;
      if (v14)
      {
        memset(&v30, 0, sizeof(v30));
        v15 = SipUri::phoneContext((SipUri *)v31);
        if (*((char *)v15 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
        }
        else
        {
          v16 = *v15;
          v30.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
          *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
        }
        v17 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
        if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
        else
          v18 = v30.__r_.__value_.__l.__size_;
        if (v18)
        {
          memset(&v29, 0, sizeof(v29));
          v19 = &v29;
          std::string::basic_string[abi:ne180100]((uint64_t)&v29, v18 + 1);
          if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v19 = (std::string *)v29.__r_.__value_.__r.__words[0];
          if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v20 = &v30;
          else
            v20 = (std::string *)v30.__r_.__value_.__r.__words[0];
          memmove(v19, v20, v18);
          *(_WORD *)((char *)&v19->__r_.__value_.__l.__data_ + v18) = 45;
          if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v21 = &v27;
          else
            v21 = (std::string *)v27.__r_.__value_.__r.__words[0];
          if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v22 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
          else
            v22 = v27.__r_.__value_.__l.__size_;
          v23 = std::string::append(&v29, (const std::string::value_type *)v21, v22);
          v24 = v23->__r_.__value_.__r.__words[0];
          v35[0] = v23->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v35 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
          v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v27.__r_.__value_.__l.__data_);
          v27.__r_.__value_.__r.__words[0] = v24;
          v27.__r_.__value_.__l.__size_ = v35[0];
          *(std::string::size_type *)((char *)&v27.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v35 + 7);
          *((_BYTE *)&v27.__r_.__value_.__s + 23) = v25;
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v29.__r_.__value_.__l.__data_);
          v17 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
        }
        if (v17 < 0)
          operator delete(v30.__r_.__value_.__l.__data_);
      }
    }
    SipUri::~SipUri((SipUri *)v31);
LABEL_25:
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    v28 = v27;
    *((_BYTE *)&v27.__r_.__value_.__s + 23) = 0;
    v27.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((*((_BYTE *)&v28.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
  if ((v8 & 0x80) == 0)
  {
LABEL_11:
    *this = v28;
    return;
  }
LABEL_30:
  std::string::__init_copy_ctor_external(this, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
}

void sub_1BF095DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42)
{
  if (a34 < 0)
    operator delete(__p);
  if (a40 < 0)
    operator delete(a35);
  SipUri::~SipUri((SipUri *)&a42);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(a1);
}

void SipDialogParticipantInfo::uri(const std::string *this@<X0>, std::string *a2@<X8>)
{
  std::string::value_type v4;
  std::string::size_type size;
  const std::string *v6;
  std::string::size_type v7;
  std::string v8;

  memset(&v8, 0, sizeof(v8));
  v4 = this[4].__r_.__value_.__s.__data_[0];
  if (!v4)
    goto LABEL_17;
  std::string::operator=(&v8, this + 1);
  v4 = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v8.__r_.__value_.__l.__size_;
  if (!size)
  {
LABEL_17:
    v6 = (const std::string *)this->__r_.__value_.__r.__words[0];
    if (this->__r_.__value_.__r.__words[0] != this->__r_.__value_.__l.__size_)
    {
      while (1)
      {
        v7 = HIBYTE(v8.__r_.__value_.__r.__words[2]);
        v4 = HIBYTE(v8.__r_.__value_.__r.__words[2]);
        if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v7 = v8.__r_.__value_.__l.__size_;
        if (v7)
          break;
        std::string::operator=(&v8, v6 + 1);
        v6 += 2;
        if (v6 == (const std::string *)this->__r_.__value_.__l.__size_)
        {
          v4 = HIBYTE(v8.__r_.__value_.__r.__words[2]);
          break;
        }
      }
    }
  }
  if (v4 < 0)
  {
    std::string::__init_copy_ctor_external(a2, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__r_.__value_.__l.__data_);
  }
  else
  {
    *a2 = v8;
  }
}

void sub_1BF095F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *SipDialogParticipantInfo::str(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  const char *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  BOOL v44;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t i;
  _QWORD *v56;
  void **v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  void **v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  unsigned __int8 v75;
  __int128 v76;
  _OWORD v77[4];
  void *v78[2];
  __int128 v79;
  __int128 v80;
  _BYTE v81[144];
  uint64_t v82;
  void *v83[2];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;

  if (!*(_BYTE *)(a2 + 96) && *(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
    return std::string::basic_string[abi:ne180100]<0>(a1, "");
  v82 = 0;
  v80 = 0u;
  memset(v81, 0, sizeof(v81));
  *(_OWORD *)v78 = 0u;
  v79 = 0u;
  memset(v77, 0, sizeof(v77));
  v76 = 0u;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v76);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"    <", 5);
  v5 = *(char *)(a3 + 23);
  if (v5 >= 0)
    v6 = a3;
  else
    v6 = *(_QWORD *)a3;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a3 + 23);
  else
    v7 = *(_QWORD *)(a3 + 8);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">\n", 2);
  v9 = *(_QWORD *)a2;
  v72 = a2;
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
  {
    v10 = (void *)*MEMORY[0x1E0DE4F50];
    v12 = *(void **)(MEMORY[0x1E0DE4F50] + 64);
    v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v13 = MEMORY[0x1E0DE4FB8] + 16;
    do
    {
      v100 = 0;
      v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      *(_OWORD *)v83 = 0u;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, (uint64_t)"      <identity", 15);
      if (*(char *)(v9 + 23) < 0)
      {
        if (*(_QWORD *)(v9 + 8))
        {
LABEL_15:
          v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, (uint64_t)" display=\"", 10);
          v15 = *(char *)(v9 + 23);
          if (v15 >= 0)
            v16 = v9;
          else
            v16 = *(_QWORD *)v9;
          if (v15 >= 0)
            v17 = *(unsigned __int8 *)(v9 + 23);
          else
            v17 = *(_QWORD *)(v9 + 8);
          v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\"", 1);
        }
      }
      else if (*(_BYTE *)(v9 + 23))
      {
        goto LABEL_15;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, (uint64_t)">", 1);
      v19 = *(char *)(v9 + 47);
      if (v19 >= 0)
        v20 = v9 + 24;
      else
        v20 = *(_QWORD *)(v9 + 24);
      if (v19 >= 0)
        v21 = *(unsigned __int8 *)(v9 + 47);
      else
        v21 = *(_QWORD *)(v9 + 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, v20, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, (uint64_t)"</identity>\n", 12);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v84 + 8, &v73);
      v83[0] = v10;
      *(void **)((char *)v83 + *((_QWORD *)v10 - 3)) = v12;
      *(_QWORD *)&v84 = v11;
      *((_QWORD *)&v84 + 1) = v13;
      if (SHIBYTE(v89) < 0)
        operator delete(*((void **)&v88 + 1));
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1C3B8707C](&v91);
      if ((v75 & 0x80u) == 0)
        v22 = &v73;
      else
        v22 = v73;
      if ((v75 & 0x80u) == 0)
        v23 = v75;
      else
        v23 = v74;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v22, v23);
      if ((char)v75 < 0)
        operator delete(v73);
      v9 += 48;
    }
    while (v9 != *(_QWORD *)(v72 + 8));
  }
  if (*(_BYTE *)(v72 + 96))
  {
    if (*(char *)(v72 + 47) < 0)
    {
      if (*(_QWORD *)(v72 + 32))
        goto LABEL_45;
    }
    else if (*(_BYTE *)(v72 + 47))
    {
      goto LABEL_45;
    }
    if (!*(_QWORD *)(v72 + 64))
    {
      std::string::basic_string[abi:ne180100]<0>(&v73, "");
LABEL_79:
      if ((v75 & 0x80u) == 0)
        v47 = &v73;
      else
        v47 = v73;
      if ((v75 & 0x80u) == 0)
        v48 = v75;
      else
        v48 = v74;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v47, v48);
      if ((char)v75 < 0)
        operator delete(v73);
      goto LABEL_87;
    }
LABEL_45:
    v100 = 0;
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    *(_OWORD *)v83 = 0u;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v83);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, (uint64_t)"      <target uri=\"", 19);
    v25 = *(char *)(v72 + 47);
    if (v25 >= 0)
      v26 = v72 + 24;
    else
      v26 = *(_QWORD *)(v72 + 24);
    if (v25 >= 0)
      v27 = *(unsigned __int8 *)(v72 + 47);
    else
      v27 = *(_QWORD *)(v72 + 32);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\"", 1);
    if (*(_QWORD *)(v72 + 64))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, (uint64_t)">\n", 2);
      v29 = *(_QWORD **)(v72 + 48);
      if (v29 == (_QWORD *)(v72 + 56))
      {
        v31 = "      </target>\n";
        v30 = 16;
      }
      else
      {
        v30 = 16;
        v31 = "      </target>\n";
        do
        {
          v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, (uint64_t)"        <param pname=\"", 22);
          v33 = *((char *)v29 + 55);
          if (v33 >= 0)
            v34 = (uint64_t)(v29 + 4);
          else
            v34 = v29[4];
          if (v33 >= 0)
            v35 = *((unsigned __int8 *)v29 + 55);
          else
            v35 = v29[5];
          v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
          v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\" pval=\"", 8);
          v38 = *((char *)v29 + 79);
          if (v38 >= 0)
            v39 = (uint64_t)(v29 + 7);
          else
            v39 = v29[7];
          if (v38 >= 0)
            v40 = *((unsigned __int8 *)v29 + 79);
          else
            v40 = v29[8];
          v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, v40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"\"/>\n", 4);
          v42 = (_QWORD *)v29[1];
          if (v42)
          {
            do
            {
              v43 = v42;
              v42 = (_QWORD *)*v42;
            }
            while (v42);
          }
          else
          {
            do
            {
              v43 = (_QWORD *)v29[2];
              v44 = *v43 == (_QWORD)v29;
              v29 = v43;
            }
            while (!v44);
          }
          v29 = v43;
        }
        while (v43 != (_QWORD *)(v72 + 56));
      }
    }
    else
    {
      v31 = "/>\n";
      v30 = 3;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, (uint64_t)v31, v30);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v84 + 8, &v73);
    v83[0] = *(void **)MEMORY[0x1E0DE4F50];
    v46 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(void **)((char *)v83 + *((_QWORD *)v83[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F50] + 64);
    *(_QWORD *)&v84 = v46;
    *((_QWORD *)&v84 + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (SHIBYTE(v89) < 0)
      operator delete(*((void **)&v88 + 1));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1C3B8707C](&v91);
    goto LABEL_79;
  }
LABEL_87:
  if ((*(char *)(v72 + 127) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v72 + 127))
      goto LABEL_98;
LABEL_91:
    v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"      <session-description type=\"", 33);
    v50 = *(char *)(v72 + 127);
    if (v50 >= 0)
      v51 = v72 + 104;
    else
      v51 = *(_QWORD *)(v72 + 104);
    if (v50 >= 0)
      v52 = *(unsigned __int8 *)(v72 + 127);
    else
      v52 = *(_QWORD *)(v72 + 112);
    v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, v51, v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"\"/>\n", 4);
    goto LABEL_98;
  }
  if (*(_QWORD *)(v72 + 112))
    goto LABEL_91;
LABEL_98:
  v54 = *(_QWORD *)(v72 + 72);
  for (i = *(_QWORD *)(v72 + 80); v54 != i; v54 += 12)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"      <mediaAttributes>\n", 24);
    v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"        <mediaType>", 19);
    if ((SBYTE7(v84) & 0x80u) == 0)
      v57 = v83;
    else
      v57 = (void **)v83[0];
    if ((SBYTE7(v84) & 0x80u) == 0)
      v58 = BYTE7(v84);
    else
      v58 = (uint64_t)v83[1];
    v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v57, v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"</mediaType>\n", 13);
    if (SBYTE7(v84) < 0)
      operator delete(v83[0]);
    if (*(_BYTE *)(v54 + 8))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"        <port0/>\n", 17);
    v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"        <mediaDirection>", 24);
    ims::toString<MediaDirection>((unsigned int *)v54, v83);
    if ((SBYTE7(v84) & 0x80u) == 0)
      v61 = v83;
    else
      v61 = (void **)v83[0];
    if ((SBYTE7(v84) & 0x80u) == 0)
      v62 = BYTE7(v84);
    else
      v62 = (uint64_t)v83[1];
    v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v61, v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"</mediaDirection>\n", 18);
    if (SBYTE7(v84) < 0)
      operator delete(v83[0]);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"      </mediaAttributes>\n", 25);
  }
  v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"    </", 6);
  v65 = *(char *)(a3 + 23);
  if (v65 >= 0)
    v66 = a3;
  else
    v66 = *(_QWORD *)a3;
  if (v65 >= 0)
    v67 = *(unsigned __int8 *)(a3 + 23);
  else
    v67 = *(_QWORD *)(a3 + 8);
  v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, v66, v67);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)">\n", 2);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v77 + 8, a1);
  *(_QWORD *)&v76 = *MEMORY[0x1E0DE4F50];
  v69 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v77[-1] + *(_QWORD *)(v76 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v77[0] = v69;
  *((_QWORD *)&v77[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v79) < 0)
    operator delete(v78[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return (_QWORD *)MEMORY[0x1C3B8707C](v81);
}

void sub_1BF096708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void SipDialogParticipantInfo::copyFrom(SipDialogParticipantInfo *this, const SipDialogParticipantInfo *a2)
{
  BOOL v4;

  if (this != a2 && *((_QWORD *)this + 1) == *(_QWORD *)this)
    std::vector<SipDialogParticipantIdentity>::__assign_with_size[abi:ne180100]<SipDialogParticipantIdentity*,SipDialogParticipantIdentity*>((uint64_t)this, *(std::string **)a2, *((std::string **)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 4));
  if (*((_BYTE *)this + 96))
    v4 = 1;
  else
    v4 = *((_BYTE *)a2 + 96) == 0;
  if (!v4)
  {
    *((_BYTE *)this + 96) = 1;
    std::string::operator=((std::string *)this + 1, (const std::string *)a2 + 1);
    if (this != a2)
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 6, *((__int128 **)a2 + 6), (__int128 *)((char *)a2 + 56));
  }
  if ((*((char *)this + 127) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 127))
      return;
LABEL_14:
    std::string::operator=((std::string *)((char *)this + 104), (const std::string *)((char *)a2 + 104));
    return;
  }
  if (!*((_QWORD *)this + 14))
    goto LABEL_14;
}

void SipDialogDirection::str(SipDialogDirection *this@<X0>, _QWORD *a2@<X8>)
{
  const std::string::value_type *v4;
  char *v5;
  const std::string::value_type *v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string v14;
  std::string v15;

  if (*(_BYTE *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "direction=\"");
    v6 = (const std::string::value_type *)*((_QWORD *)this + 1);
    v5 = (char *)this + 8;
    v4 = v6;
    v7 = v5[23];
    if (v7 >= 0)
      v8 = v5;
    else
      v8 = v4;
    if (v7 >= 0)
      v9 = v5[23];
    else
      v9 = *((_QWORD *)v5 + 1);
    v10 = std::string::append(&v14, v8, v9);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v15, "\"", 1uLL);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v12->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

void sub_1BF096920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void SipDialogInfo::copyFrom(SipDialogInfo *this, const SipDialogInfo *a2)
{
  if (*((_BYTE *)a2 + 456))
  {
    if (*((_BYTE *)this + 456))
      SipDialogParticipantInfo::copyFrom((SipDialogInfo *)((char *)this + 328), (const SipDialogInfo *)((char *)a2 + 328));
    else
      SipDialogInfo::setLocal(this, (const SipDialogInfo *)((char *)a2 + 328));
  }
  if (*((_BYTE *)a2 + 592))
  {
    if (*((_BYTE *)this + 592))
      SipDialogParticipantInfo::copyFrom((SipDialogInfo *)((char *)this + 464), (const SipDialogInfo *)((char *)a2 + 464));
    else
      SipDialogInfo::setRemote(this, (const SipDialogInfo *)((char *)a2 + 464));
  }
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 47))
      goto LABEL_12;
    goto LABEL_11;
  }
  if (!*((_QWORD *)this + 4))
LABEL_11:
    std::string::operator=((std::string *)this + 1, (const std::string *)a2 + 1);
LABEL_12:
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 71))
      goto LABEL_15;
    goto LABEL_14;
  }
  if (!*((_QWORD *)this + 7))
LABEL_14:
    std::string::operator=((std::string *)this + 2, (const std::string *)a2 + 2);
LABEL_15:
  if ((*((char *)this + 95) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 95))
      goto LABEL_18;
    goto LABEL_17;
  }
  if (!*((_QWORD *)this + 10))
LABEL_17:
    std::string::operator=((std::string *)this + 3, (const std::string *)a2 + 3);
LABEL_18:
  if (*((char *)this + 127) < 0)
  {
    if (*((_QWORD *)this + 14))
      goto LABEL_21;
    goto LABEL_20;
  }
  if (!*((_BYTE *)this + 127))
  {
LABEL_20:
    *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
    std::string::operator=((std::string *)((char *)this + 104), (const std::string *)((char *)a2 + 104));
    *((_BYTE *)this + 128) = *((_BYTE *)a2 + 128);
  }
LABEL_21:
  if (!*((_BYTE *)this + 264) && *((_BYTE *)a2 + 264))
    SipDialogInfo::setReplaces((std::string *)this, (const std::string *)a2 + 8);
  if (!*((_BYTE *)this + 320) && *((_BYTE *)a2 + 320))
  {
    std::string::operator=((std::string *)((char *)this + 272), (const std::string *)((char *)a2 + 272));
    std::string::operator=((std::string *)((char *)this + 296), (const std::string *)((char *)a2 + 296));
    *((_BYTE *)this + 320) = 1;
  }
  *((_BYTE *)this + 176) = *((_BYTE *)a2 + 176);
}

void SipDialogInfo::event(SipDialogInfo *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  void **v12;
  std::string *v13;
  BOOL v14;
  void **v15;
  uint64_t v16;
  _WORD *v17;
  char v18;
  std::string *i;
  BOOL isEmergencyUrn;
  BOOL v21;
  void **v22;
  void *v23;
  int v24;
  void **v25;
  void **v26;
  void **v27;
  void **v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  BOOL v35;
  void *__p[2];
  char v37;
  std::string v38;
  _BYTE __str[32];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  *(_OWORD *)(a2 + 48) = 0u;
  v4 = (std::string *)(a2 + 48);
  *(_OWORD *)(a2 + 96) = 0u;
  v5 = (std::string *)(a2 + 96);
  *(_OWORD *)(a2 + 144) = 0u;
  v6 = (std::string *)(a2 + 144);
  *(_OWORD *)(a2 + 208) = 0u;
  v7 = (std::string *)(a2 + 208);
  *(_QWORD *)(a2 + 288) = 0;
  v8 = (std::string *)(a2 + 24);
  v9 = (std::string *)(a2 + 72);
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  v10 = (std::string *)(a2 + 120);
  v11 = (std::string *)(a2 + 168);
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a2 + 208), "");
  *(_BYTE *)(a2 + 232) = 0;
  *(_BYTE *)(a2 + 240) = 0;
  std::string::basic_string[abi:ne180100]<0>(__str, "");
  std::string::basic_string[abi:ne180100]<0>(&v38, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  SipDialogState::SipDialogState(a2 + 248, (uint64_t *)__str, &v38, (uint64_t)__p);
  if (v37 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  *(_WORD *)(a2 + 288) = 256;
  std::string::operator=((std::string *)a2, (const std::string *)this);
  std::string::operator=(v8, (const std::string *)this + 1);
  *(_BYTE *)(a2 + 200) = *((_BYTE *)this + 96);
  std::string::operator=(v7, (const std::string *)((char *)this + 104));
  *(_BYTE *)(a2 + 232) = *((_BYTE *)this + 128);
  *(_DWORD *)(a2 + 192) = *((_DWORD *)this + 45);
  *(_BYTE *)(a2 + 196) = 1;
  SipDialogParticipantInfo::participantName((std::string *)__str, (const std::string *)((char *)this + 328));
  std::string::operator=(v4, (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  SipDialogParticipantInfo::participantName((std::string *)__str, (const std::string *)((char *)this + 464));
  std::string::operator=(v9, (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  std::string::operator=(v5, (const std::string *)this + 18);
  std::string::operator=(v10, (const std::string *)((char *)this + 568));
  SipDialogParticipantInfo::uri((const std::string *)((char *)this + 328), (std::string *)__str);
  std::string::operator=(v6, (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  SipDialogParticipantInfo::uri((const std::string *)((char *)this + 464), (std::string *)__str);
  std::string::operator=(v11, (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (!*((_BYTE *)this + 456) || !*((_BYTE *)this + 424))
  {
    v14 = 0;
    goto LABEL_38;
  }
  memset(__str, 0, 24);
  std::string::basic_string[abi:ne180100]<0>(__str, "");
  memset(&v38, 0, sizeof(v38));
  std::string::basic_string[abi:ne180100]<0>(&v38, "sip.rendering");
  v12 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 376, (void **)&v38.__r_.__value_.__l.__data_);
  if ((void **)((char *)this + 384) == v12)
  {
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    {
      v38.__r_.__value_.__l.__size_ = 14;
      v13 = (std::string *)v38.__r_.__value_.__r.__words[0];
    }
    else
    {
      *((_BYTE *)&v38.__r_.__value_.__s + 23) = 14;
      v13 = &v38;
    }
    strcpy((char *)v13, "+sip.rendering");
    v15 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 376, (void **)&v38.__r_.__value_.__l.__data_);
    if (v12 == v15)
      goto LABEL_32;
    v12 = v15;
  }
  std::string::operator=((std::string *)__str, (const std::string *)(v12 + 7));
  v16 = __str[23];
  if (__str[23] < 0)
    v16 = *(_QWORD *)&__str[8];
  if (v16 == 2)
  {
    v17 = __str;
    if (__str[23] < 0)
      v17 = *(_WORD **)__str;
    v14 = *v17 == 28526 || *v17 == 28494 || *v17 == 20302;
    goto LABEL_34;
  }
LABEL_32:
  v14 = 0;
LABEL_34:
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
LABEL_38:
  *(_BYTE *)(a2 + 240) = v14;
  *(_DWORD *)(a2 + 248) = *((_DWORD *)this + 34);
  std::string::operator=((std::string *)(a2 + 256), (const std::string *)this + 6);
  *(_WORD *)(a2 + 280) = *((_WORD *)this + 84);
  *(_BYTE *)(a2 + 282) = *((_BYTE *)this + 170);
  v18 = *((_BYTE *)this + 592);
  if (v18)
  {
    for (i = (std::string *)*((_QWORD *)this + 58); i != *((std::string **)this + 59); i += 2)
    {
      v63 = 0;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v40 = 0u;
      memset(__str, 0, sizeof(__str));
      SipUri::SipUri((uint64_t)__str, i + 1);
      isEmergencyUrn = SipUri::isEmergencyUrn((SipUri *)__str);
      SipUri::~SipUri((SipUri *)__str);
      if (isEmergencyUrn)
        goto LABEL_45;
    }
    if (*((_BYTE *)this + 560))
    {
      v63 = 0;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v40 = 0u;
      memset(__str, 0, sizeof(__str));
      SipUri::SipUri((uint64_t)__str, (std::string *)((char *)this + 488));
      v21 = SipUri::isEmergencyUrn((SipUri *)__str);
      SipUri::~SipUri((SipUri *)__str);
      if (v21)
      {
LABEL_45:
        v18 = 1;
        goto LABEL_47;
      }
    }
    v18 = 0;
  }
LABEL_47:
  *(_BYTE *)(a2 + 288) = v18;
  if (*((_BYTE *)this + 176))
  {
    if (*((_BYTE *)this + 176) == 1)
    {
LABEL_71:
      v34 = 0;
      goto LABEL_73;
    }
  }
  else if (*((_BYTE *)this + 424))
  {
    memset(__str, 0, 24);
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)__str, (uint64_t)this + 376);
    std::string::basic_string[abi:ne180100]<0>(&v38, "+sip.rendering");
    v22 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)__str, (void **)&v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (&__str[8] == (_BYTE *)v22)
      goto LABEL_61;
    v23 = (void *)*((unsigned __int8 *)v22 + 79);
    v24 = (char)v23;
    if ((char)v23 < 0)
      v23 = v22[8];
    if (v23 != (void *)2)
    {
LABEL_61:
      v29 = 1;
    }
    else
    {
      v27 = (void **)v22[7];
      v26 = v22 + 7;
      v25 = v27;
      v28 = v24 >= 0 ? v26 : v25;
      v29 = bswap32(*(unsigned __int16 *)v28) >> 16 != 28271;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)__str, *(_QWORD **)&__str[8]);
    if (!v29)
      goto LABEL_71;
  }
  v31 = *((_QWORD *)this + 50);
  v30 = *((_QWORD *)this + 51);
  if (v31 == v30)
  {
    v34 = 1;
  }
  else
  {
    v32 = v31 + 12;
    do
    {
      v33 = *(_DWORD *)(v32 - 8);
      v35 = v33 == 3;
      v34 = v33 != 3;
      v35 = v35 || v32 == v30;
      v32 += 12;
    }
    while (!v35);
  }
LABEL_73:
  *(_BYTE *)(a2 + 289) = v34;
}

void sub_1BF097080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void **v26;

  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  SipDialogEventData::~SipDialogEventData(v26);
  _Unwind_Resume(a1);
}

uint64_t SipDialogTable::str@<X0>(SipDialogTable *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  const char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  SipDialogTable *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  void **v39;
  void *v40;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  void **v49;
  uint64_t v50;
  _QWORD *v51;
  const char *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  void *v71;
  uint64_t v72;
  _QWORD *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  void *v82;
  uint64_t v83;
  void **v84;
  uint64_t v85;
  void **v86;
  uint64_t v87;
  void **v88;
  uint64_t v89;
  SipDialogTable *v90;
  SipDialogTable *v91;
  BOOL v92;
  uint64_t v93;
  _QWORD *v95;
  uint64_t v96;
  void *v97[2];
  unsigned __int8 v98;
  __int128 v99;
  _OWORD v100[4];
  void *v101[2];
  __int128 v102;
  __int128 v103;
  _BYTE v104[144];
  uint64_t v105;
  void *v106[2];
  unsigned __int8 v107;
  __int128 v108;
  _QWORD v109[8];
  __int128 v110;
  __int128 v111;
  __int128 v112;
  _BYTE v113[144];
  uint64_t v114;
  void *v115;
  uint64_t v116;
  unsigned __int8 v117;
  void *__p[2];
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;

  v105 = 0;
  v103 = 0u;
  memset(v104, 0, sizeof(v104));
  *(_OWORD *)v101 = 0u;
  v102 = 0u;
  memset(v100, 0, sizeof(v100));
  v99 = 0u;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v99);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"<?xml version=\"1.0\"?>\n<dialog-info xmlns=\"urn:ietf:params:xml:ns:dialog-info\"", 77);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"\n  version=\"", 12);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\"", 1);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"\n  state=\"", 10);
  if (*((_BYTE *)this + 24))
    v6 = "full";
  else
    v6 = "partial";
  if (*((_BYTE *)this + 24))
    v7 = 4;
  else
    v7 = 7;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\"", 1);
  if (*((char *)this + 63) < 0)
  {
    if (!*((_QWORD *)this + 6))
      goto LABEL_18;
  }
  else if (!*((_BYTE *)this + 63))
  {
    goto LABEL_18;
  }
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"\n  entity=\"", 11);
  v10 = *((char *)this + 63);
  if (v10 >= 0)
    v11 = (char *)this + 40;
  else
    v11 = (char *)*((_QWORD *)this + 5);
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)this + 63);
  else
    v12 = *((_QWORD *)this + 6);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\"", 1);
LABEL_18:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)">\n", 2);
  v95 = a2;
  v14 = *(SipDialogTable **)this;
  if (*(SipDialogTable **)this != (SipDialogTable *)((char *)this + 8))
  {
    v15 = (void *)*MEMORY[0x1E0DE4F50];
    v17 = *(void **)(MEMORY[0x1E0DE4F50] + 64);
    v16 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v96 = MEMORY[0x1E0DE4FB8] + 16;
    do
    {
      v114 = 0;
      v112 = 0u;
      memset(v113, 0, sizeof(v113));
      v110 = 0u;
      v111 = 0u;
      memset(v109, 0, sizeof(v109));
      v108 = 0u;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v108);
      if (*((char *)v14 + 79) < 0)
      {
        if (*((_QWORD *)v14 + 8))
        {
LABEL_24:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"  <dialog", 9);
          v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)" id=\"", 5);
          v19 = *((char *)v14 + 79);
          if (v19 >= 0)
            v20 = (uint64_t)v14 + 56;
          else
            v20 = *((_QWORD *)v14 + 7);
          if (v19 >= 0)
            v21 = *((unsigned __int8 *)v14 + 79);
          else
            v21 = *((_QWORD *)v14 + 8);
          v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"\"", 1);
          if (*((char *)v14 + 103) < 0)
          {
            if (!*((_QWORD *)v14 + 11))
              goto LABEL_41;
          }
          else if (!*((_BYTE *)v14 + 103))
          {
            goto LABEL_41;
          }
          v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)" call-id=\"", 10);
          v24 = *((char *)v14 + 103);
          if (v24 >= 0)
            v25 = (uint64_t)v14 + 80;
          else
            v25 = *((_QWORD *)v14 + 10);
          if (v24 >= 0)
            v26 = *((unsigned __int8 *)v14 + 103);
          else
            v26 = *((_QWORD *)v14 + 11);
          v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\"", 1);
LABEL_41:
          if (*((char *)v14 + 127) < 0)
          {
            if (!*((_QWORD *)v14 + 14))
              goto LABEL_52;
          }
          else if (!*((_BYTE *)v14 + 127))
          {
            goto LABEL_52;
          }
          v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"\n    local-tag=\"", 16);
          v29 = *((char *)v14 + 127);
          if (v29 >= 0)
            v30 = (uint64_t)v14 + 104;
          else
            v30 = *((_QWORD *)v14 + 13);
          if (v29 >= 0)
            v31 = *((unsigned __int8 *)v14 + 127);
          else
            v31 = *((_QWORD *)v14 + 14);
          v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\"", 1);
LABEL_52:
          if (*((char *)v14 + 151) < 0)
          {
            if (*((_QWORD *)v14 + 17))
              goto LABEL_56;
          }
          else
          {
            if (!*((_BYTE *)v14 + 151))
              goto LABEL_63;
LABEL_56:
            v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"\n    remote-tag=\"", 17);
            v34 = *((char *)v14 + 151);
            if (v34 >= 0)
              v35 = (uint64_t)v14 + 128;
            else
              v35 = *((_QWORD *)v14 + 16);
            if (v34 >= 0)
              v36 = *((unsigned __int8 *)v14 + 151);
            else
              v36 = *((_QWORD *)v14 + 17);
            v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"\"", 1);
          }
LABEL_63:
          if (*((_BYTE *)v14 + 152))
          {
            v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"\n    ", 5);
            SipDialogDirection::str((SipDialogTable *)((char *)v14 + 152), __p);
            v39 = (SBYTE7(v119) & 0x80u) == 0 ? __p : (void **)__p[0];
            v40 = (SBYTE7(v119) & 0x80u) == 0 ? (void *)BYTE7(v119) : __p[1];
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, (uint64_t)v40);
            if (SBYTE7(v119) < 0)
              operator delete(__p[0]);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)">\n", 2);
          v135 = 0;
          v133 = 0u;
          v134 = 0u;
          v131 = 0u;
          v132 = 0u;
          v129 = 0u;
          v130 = 0u;
          v127 = 0u;
          v128 = 0u;
          v125 = 0u;
          v126 = 0u;
          v123 = 0u;
          v124 = 0u;
          v121 = 0u;
          v122 = 0u;
          v119 = 0u;
          v120 = 0u;
          *(_OWORD *)__p = 0u;
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          if (*((_DWORD *)v14 + 48))
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v119, (uint64_t)"    <state", 10);
            if (*((char *)v14 + 223) < 0)
            {
              if (!*((_QWORD *)v14 + 26))
                goto LABEL_84;
            }
            else if (!*((_BYTE *)v14 + 223))
            {
              goto LABEL_84;
            }
            v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v119, (uint64_t)" event=\"", 8);
            v42 = *((char *)v14 + 223);
            if (v42 >= 0)
              v43 = (uint64_t)v14 + 200;
            else
              v43 = *((_QWORD *)v14 + 25);
            if (v42 >= 0)
              v44 = *((unsigned __int8 *)v14 + 223);
            else
              v44 = *((_QWORD *)v14 + 26);
            v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, v43, v44);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"\"", 1);
LABEL_84:
            if (*((_BYTE *)v14 + 226))
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v119, (uint64_t)" code=\"", 7);
              v46 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"\"", 1);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v119, (uint64_t)">", 1);
            SipDialogState::stateStr((SipDialogTable *)((char *)v14 + 192), &v115);
            if ((v117 & 0x80u) == 0)
              v47 = &v115;
            else
              v47 = v115;
            if ((v117 & 0x80u) == 0)
              v48 = v117;
            else
              v48 = v116;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v119, (uint64_t)v47, v48);
            if ((char)v117 < 0)
              operator delete(v115);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v119, (uint64_t)"</state>\n", 9);
          }
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v119 + 8, v106);
          __p[0] = v15;
          *(void **)((char *)__p + *((_QWORD *)v15 - 3)) = v17;
          *(_QWORD *)&v119 = v16;
          *((_QWORD *)&v119 + 1) = MEMORY[0x1E0DE4FB8] + 16;
          if (SHIBYTE(v124) < 0)
            operator delete(*((void **)&v123 + 1));
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1C3B8707C](&v126);
          if ((v107 & 0x80u) == 0)
            v49 = v106;
          else
            v49 = (void **)v106[0];
          if ((v107 & 0x80u) == 0)
            v50 = v107;
          else
            v50 = (uint64_t)v106[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)v49, v50);
          if ((char)v107 < 0)
            operator delete(v106[0]);
          v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"    <sa:exclusive>", 18);
          if (*((_BYTE *)v14 + 232))
            v52 = "true";
          else
            v52 = "false";
          if (*((_BYTE *)v14 + 232))
            v53 = 4;
          else
            v53 = 5;
          v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"</sa:exclusive>\n", 16);
          if (*((_BYTE *)v14 + 240))
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"    <duration>", 14);
            v55 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"</duration>\n", 12);
          }
          if (*((_BYTE *)v14 + 320))
          {
            v135 = 0;
            v133 = 0u;
            v134 = 0u;
            v131 = 0u;
            v132 = 0u;
            v129 = 0u;
            v130 = 0u;
            v127 = 0u;
            v128 = 0u;
            v125 = 0u;
            v126 = 0u;
            v123 = 0u;
            v124 = 0u;
            v121 = 0u;
            v122 = 0u;
            v119 = 0u;
            v120 = 0u;
            *(_OWORD *)__p = 0u;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v119, (uint64_t)"    <replaces", 13);
            if (*((char *)v14 + 271) < 0)
            {
              if (!*((_QWORD *)v14 + 32))
                goto LABEL_125;
            }
            else if (!*((_BYTE *)v14 + 271))
            {
              goto LABEL_125;
            }
            v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v119, (uint64_t)" call-id=\"", 10);
            v57 = *((char *)v14 + 271);
            if (v57 >= 0)
              v58 = (uint64_t)v14 + 248;
            else
              v58 = *((_QWORD *)v14 + 31);
            if (v57 >= 0)
              v59 = *((unsigned __int8 *)v14 + 271);
            else
              v59 = *((_QWORD *)v14 + 32);
            v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, v58, v59);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"\"", 1);
LABEL_125:
            if (*((char *)v14 + 295) < 0)
            {
              if (!*((_QWORD *)v14 + 35))
                goto LABEL_136;
            }
            else if (!*((_BYTE *)v14 + 295))
            {
              goto LABEL_136;
            }
            v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v119, (uint64_t)" local-tag=\"", 12);
            v62 = *((char *)v14 + 295);
            if (v62 >= 0)
              v63 = (uint64_t)v14 + 272;
            else
              v63 = *((_QWORD *)v14 + 34);
            if (v62 >= 0)
              v64 = *((unsigned __int8 *)v14 + 295);
            else
              v64 = *((_QWORD *)v14 + 35);
            v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, v63, v64);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"\"", 1);
LABEL_136:
            if (*((char *)v14 + 319) < 0)
            {
              if (!*((_QWORD *)v14 + 38))
                goto LABEL_147;
            }
            else if (!*((_BYTE *)v14 + 319))
            {
              goto LABEL_147;
            }
            v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v119, (uint64_t)" remote-tag=\"", 13);
            v67 = *((char *)v14 + 319);
            if (v67 >= 0)
              v68 = (uint64_t)v14 + 296;
            else
              v68 = *((_QWORD *)v14 + 37);
            if (v67 >= 0)
              v69 = *((unsigned __int8 *)v14 + 319);
            else
              v69 = *((_QWORD *)v14 + 38);
            v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, v68, v69);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"\"", 1);
LABEL_147:
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v119, (uint64_t)"/>\n", 3);
            std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v119 + 8, &v115);
            __p[0] = v15;
            *(void **)((char *)__p + *((_QWORD *)v15 - 3)) = v17;
            *(_QWORD *)&v119 = v16;
            *((_QWORD *)&v119 + 1) = MEMORY[0x1E0DE4FB8] + 16;
            if (SHIBYTE(v124) < 0)
              operator delete(*((void **)&v123 + 1));
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1C3B8707C](&v126);
            if ((v117 & 0x80u) == 0)
              v71 = &v115;
            else
              v71 = v115;
            if ((v117 & 0x80u) == 0)
              v72 = v117;
            else
              v72 = v116;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)v71, v72);
            if ((char)v117 < 0)
              operator delete(v115);
          }
          if (*((_BYTE *)v14 + 376))
          {
            v135 = 0;
            v133 = 0u;
            v134 = 0u;
            v131 = 0u;
            v132 = 0u;
            v129 = 0u;
            v130 = 0u;
            v127 = 0u;
            v128 = 0u;
            v125 = 0u;
            v126 = 0u;
            v123 = 0u;
            v124 = 0u;
            v121 = 0u;
            v122 = 0u;
            v119 = 0u;
            v120 = 0u;
            *(_OWORD *)__p = 0u;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v119, (uint64_t)"    <referred-by", 16);
            if (*((char *)v14 + 351) < 0)
            {
              if (!*((_QWORD *)v14 + 42))
                goto LABEL_169;
            }
            else if (!*((_BYTE *)v14 + 351))
            {
              goto LABEL_169;
            }
            v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v119, (uint64_t)" display=\"", 10);
            v74 = *((char *)v14 + 351);
            if (v74 >= 0)
              v75 = (uint64_t)v14 + 328;
            else
              v75 = *((_QWORD *)v14 + 41);
            if (v74 >= 0)
              v76 = *((unsigned __int8 *)v14 + 351);
            else
              v76 = *((_QWORD *)v14 + 42);
            v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, v75, v76);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"\"", 1);
LABEL_169:
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v119, (uint64_t)"/>", 2);
            v78 = *((char *)v14 + 375);
            if (v78 >= 0)
              v79 = (uint64_t)v14 + 352;
            else
              v79 = *((_QWORD *)v14 + 44);
            if (v78 >= 0)
              v80 = *((unsigned __int8 *)v14 + 375);
            else
              v80 = *((_QWORD *)v14 + 45);
            v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v119, v79, v80);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"</referred-by>\n", 15);
            std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v119 + 8, &v115);
            __p[0] = v15;
            *(void **)((char *)__p + *((_QWORD *)v15 - 3)) = v17;
            *(_QWORD *)&v119 = v16;
            *((_QWORD *)&v119 + 1) = MEMORY[0x1E0DE4FB8] + 16;
            if (SHIBYTE(v124) < 0)
              operator delete(*((void **)&v123 + 1));
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1C3B8707C](&v126);
            if ((v117 & 0x80u) == 0)
              v82 = &v115;
            else
              v82 = v115;
            if ((v117 & 0x80u) == 0)
              v83 = v117;
            else
              v83 = v116;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)v82, v83);
            if ((char)v117 < 0)
              operator delete(v115);
          }
          if (*((_BYTE *)v14 + 512))
          {
            std::string::basic_string[abi:ne180100]<0>(&v115, "local");
            SipDialogParticipantInfo::str(__p, (uint64_t)v14 + 384, (uint64_t)&v115);
            if ((SBYTE7(v119) & 0x80u) == 0)
              v84 = __p;
            else
              v84 = (void **)__p[0];
            if ((SBYTE7(v119) & 0x80u) == 0)
              v85 = BYTE7(v119);
            else
              v85 = (uint64_t)__p[1];
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)v84, v85);
            if (SBYTE7(v119) < 0)
              operator delete(__p[0]);
            if ((char)v117 < 0)
              operator delete(v115);
          }
          if (*((_BYTE *)v14 + 648))
          {
            std::string::basic_string[abi:ne180100]<0>(&v115, "remote");
            SipDialogParticipantInfo::str(__p, (uint64_t)v14 + 520, (uint64_t)&v115);
            if ((SBYTE7(v119) & 0x80u) == 0)
              v86 = __p;
            else
              v86 = (void **)__p[0];
            if ((SBYTE7(v119) & 0x80u) == 0)
              v87 = BYTE7(v119);
            else
              v87 = (uint64_t)__p[1];
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)v86, v87);
            if (SBYTE7(v119) < 0)
              operator delete(__p[0]);
            if ((char)v117 < 0)
              operator delete(v115);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"  </dialog>\n", 12);
        }
      }
      else if (*((_BYTE *)v14 + 79))
      {
        goto LABEL_24;
      }
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v109[1], v97);
      *(_QWORD *)&v108 = v15;
      *(_QWORD *)((char *)&v109[-2] + *((_QWORD *)v15 - 3)) = v17;
      v109[0] = v16;
      v109[1] = v96;
      if (SHIBYTE(v111) < 0)
        operator delete(*((void **)&v110 + 1));
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1C3B8707C](v113);
      if ((v98 & 0x80u) == 0)
        v88 = v97;
      else
        v88 = (void **)v97[0];
      if ((v98 & 0x80u) == 0)
        v89 = v98;
      else
        v89 = (uint64_t)v97[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)v88, v89);
      if ((char)v98 < 0)
        operator delete(v97[0]);
      v90 = (SipDialogTable *)*((_QWORD *)v14 + 1);
      if (v90)
      {
        do
        {
          v91 = v90;
          v90 = *(SipDialogTable **)v90;
        }
        while (v90);
      }
      else
      {
        do
        {
          v91 = (SipDialogTable *)*((_QWORD *)v14 + 2);
          v92 = *(_QWORD *)v91 == (_QWORD)v14;
          v14 = v91;
        }
        while (!v92);
      }
      v14 = v91;
    }
    while (v91 != (SipDialogTable *)((char *)this + 8));
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"</dialog-info>\n", 15);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v100 + 8, v95);
  *(_QWORD *)&v99 = *MEMORY[0x1E0DE4F50];
  v93 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v100[-1] + *(_QWORD *)(v99 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v100[0] = v93;
  *((_QWORD *)&v100[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v102) < 0)
    operator delete(v101[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B8707C](v104);
}

void sub_1BF097EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (SLOBYTE(STACK[0x2C7]) < 0)
    operator delete((void *)STACK[0x2B0]);
  if (SLOBYTE(STACK[0x2AF]) < 0)
    operator delete((void *)STACK[0x298]);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a57);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

BOOL SipDialogTable::fillReplacesHeaderData(uint64_t a1, void **a2, uint64_t a3)
{
  void **v5;
  void **v6;
  uint64_t v7;
  std::string *v8;
  std::string::size_type size;
  std::string::size_type v11;
  std::string v12;

  v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1, a2);
  v6 = v5;
  v7 = a1 + 8;
  if ((void **)(a1 + 8) == v5)
    return v7 != (_QWORD)v6;
  std::string::operator=((std::string *)a3, (const std::string *)(v5 + 10));
  if (*(char *)(a3 + 47) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
  else
    v12 = *(std::string *)(a3 + 24);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v12.__r_.__value_.__l.__size_;
    operator delete(v12.__r_.__value_.__l.__data_);
    if (size)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (!*((_BYTE *)&v12.__r_.__value_.__s + 23))
LABEL_7:
    std::string::operator=((std::string *)(a3 + 24), (const std::string *)(v6 + 13));
LABEL_8:
  v8 = (std::string *)(a3 + 48);
  if (*(char *)(a3 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a3 + 48), *(_QWORD *)(a3 + 56));
  }
  else
  {
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 64);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    v11 = v12.__r_.__value_.__l.__size_;
    operator delete(v12.__r_.__value_.__l.__data_);
    if (v11)
      return v7 != (_QWORD)v6;
    goto LABEL_15;
  }
  if (!*((_BYTE *)&v12.__r_.__value_.__s + 23))
LABEL_15:
    std::string::operator=(v8, (const std::string *)(v6 + 16));
  return v7 != (_QWORD)v6;
}

BOOL SipDialogTable::update(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  void **v8;
  uint64_t *v9;
  void **v10;
  void **v11;
  int v12;
  _BOOL4 v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  void **v23;
  void **v24;
  char *v25;
  char *v26;
  __int128 *v27;
  __int128 *v28;
  _OWORD *v29;
  char *v30;
  _QWORD *v31;
  _OWORD *v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  uint64_t *v36;
  _QWORD *v37;
  _QWORD *v38;
  _BOOL4 v40;
  __int128 v41;
  __int128 v42;
  void *v43[4];
  std::string v44;
  void *__p[2];
  char v46;
  void *v47[2];
  __int128 v48;
  uint64_t v49;
  std::string v50;
  int v51;
  std::string v52;
  __int16 v53;
  char v54;
  std::string v55;

  if (*(_DWORD *)(a2 + 28) <= *(_DWORD *)(a1 + 28) && *(_BYTE *)(a1 + 32))
    return 0;
  memset(v43, 0, sizeof(v43));
  v41 = 0u;
  v42 = 0u;
  std::map<std::string,SipDialogInfo>::map[abi:ne180100]((uint64_t *)&v41, a1);
  *((_QWORD *)&v42 + 1) = *(_QWORD *)(a1 + 24);
  LOBYTE(v43[0]) = *(_BYTE *)(a1 + 32);
  if (*(char *)(a1 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v43[1], *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)&v43[1] = *(_OWORD *)(a1 + 40);
    v43[3] = *(void **)(a1 + 56);
  }
  if (*(_BYTE *)(a2 + 24))
  {
    if (a1 != a2)
      std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,SipDialogInfo>,std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *> *,long>>((uint64_t *)a1, *(__int128 **)a2, (__int128 *)(a2 + 8));
    v7 = *(_QWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v7;
    std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a2 + 40));
    v8 = (void **)v41;
    if ((__int128 *)v41 != (__int128 *)((char *)&v41 + 8))
    {
      do
      {
        if ((void **)(a1 + 8) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1, v8 + 7))
        {
          v50.__r_.__value_.__r.__words[0] = (std::string::size_type)(v8 + 7);
          v9 = std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v8 + 7, (uint64_t)&std::piecewise_construct, (__int128 **)&v50);
          SipDialogInfo::copyFrom((SipDialogInfo *)(v9 + 7), (const SipDialogInfo *)(v8 + 7));
        }
        v10 = (void **)v8[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (void **)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (void **)v8[2];
            v35 = *v11 == v8;
            v8 = v11;
          }
          while (!v35);
        }
        v8 = v11;
      }
      while (v11 != (void **)((char *)&v41 + 8));
    }
    v40 = 0;
  }
  else
  {
    v12 = *(_DWORD *)(a2 + 28);
    v13 = (v12 - *(_DWORD *)(a1 + 28)) > 1;
    *(_DWORD *)(a1 + 28) = v12;
    v14 = *(unsigned __int8 *)(a2 + 63);
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(a2 + 48);
    if (v14)
      std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a2 + 40));
    v15 = *(__int128 **)a2;
    v40 = v13;
    if (*(_QWORD *)a2 != a2 + 8)
    {
      do
      {
        if ((void **)(a1 + 8) == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1, (void **)v15 + 7))
        {
          v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v15 + 56;
          v19 = std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (void **)v15 + 7, (uint64_t)&std::piecewise_construct, (__int128 **)&v50);
          SipDialogInfo::operator=((uint64_t)(v19 + 7), (uint64_t)v15 + 56);
        }
        else
        {
          bzero(&v50, 0x258uLL);
          v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v15 + 56;
          v16 = std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (void **)v15 + 7, (uint64_t)&std::piecewise_construct, (__int128 **)&v44);
          SipDialogInfo::SipDialogInfo(&v50, (const SipDialogInfo *)(v16 + 7));
          std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__erase_unique<std::string>((uint64_t **)a1, (void **)v15 + 7);
          v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v15 + 56;
          v17 = std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (void **)v15 + 7, (uint64_t)&std::piecewise_construct, (__int128 **)&v44);
          SipDialogInfo::operator=((uint64_t)(v17 + 7), (uint64_t)v15 + 56);
          v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v15 + 56;
          v18 = std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (void **)v15 + 7, (uint64_t)&std::piecewise_construct, (__int128 **)&v44);
          SipDialogInfo::copyFrom((SipDialogInfo *)(v18 + 7), (const SipDialogInfo *)&v50);
          SipDialogInfo::~SipDialogInfo((void **)&v50.__r_.__value_.__l.__data_);
        }
        v20 = (__int128 *)*((_QWORD *)v15 + 1);
        if (v20)
        {
          do
          {
            v21 = v20;
            v20 = *(__int128 **)v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (__int128 *)*((_QWORD *)v15 + 2);
            v35 = *(_QWORD *)v21 == (_QWORD)v15;
            v15 = v21;
          }
          while (!v35);
        }
        v15 = v21;
      }
      while (v21 != (__int128 *)(a2 + 8));
    }
  }
  if (a3)
  {
    v23 = (void **)(a2 + 8);
    v22 = *(__int128 **)a2;
    if (*(_QWORD *)a2 != a2 + 8)
    {
      do
      {
        memset(&v55, 0, sizeof(v55));
        if (*((char *)v22 + 79) < 0)
          std::string::__init_copy_ctor_external(&v55, *((const std::string::value_type **)v22 + 7), *((_QWORD *)v22 + 8));
        else
          v55 = *(std::string *)((char *)v22 + 56);
        v24 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1, (void **)&v55.__r_.__value_.__l.__data_);
        if ((void **)(a1 + 8) == v24)
        {
          bzero(&v50, 0x258uLL);
          SipDialogInfo::SipDialogInfo(&v50, (const SipDialogInfo *)((char *)v22 + 56));
          v49 = 0;
          *(_OWORD *)v47 = 0u;
          v48 = 0u;
          std::string::basic_string[abi:ne180100]<0>(&v44, "");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          SipDialogState::SipDialogState((uint64_t)v47, 5, &v44, (uint64_t)__p);
          if (v46 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v44.__r_.__value_.__l.__data_);
          v51 = (int)v47[0];
          std::string::operator=(&v52, (const std::string *)&v47[1]);
          v53 = v49;
          v54 = BYTE2(v49);
          v26 = (char *)a3[1];
          SipDialogInfo::event((SipDialogInfo *)&v50, (uint64_t)&v44);
          std::vector<SipDialogEventData>::insert(a3, v26, (__int128 *)&v44);
          SipDialogEventData::~SipDialogEventData((void **)&v44.__r_.__value_.__l.__data_);
          if (SHIBYTE(v48) < 0)
            operator delete(v47[1]);
          SipDialogInfo::~SipDialogInfo((void **)&v50.__r_.__value_.__l.__data_);
        }
        else
        {
          v25 = (char *)a3[1];
          SipDialogInfo::event((SipDialogInfo *)(v24 + 7), (uint64_t)&v50);
          std::vector<SipDialogEventData>::insert(a3, v25, (__int128 *)&v50);
          SipDialogEventData::~SipDialogEventData((void **)&v50.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v55.__r_.__value_.__l.__data_);
        v27 = (__int128 *)*((_QWORD *)v22 + 1);
        if (v27)
        {
          do
          {
            v28 = v27;
            v27 = *(__int128 **)v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = (__int128 *)*((_QWORD *)v22 + 2);
            v35 = *(_QWORD *)v28 == (_QWORD)v22;
            v22 = v28;
          }
          while (!v35);
        }
        v22 = v28;
      }
      while (v28 != (__int128 *)v23);
    }
    if (*(_BYTE *)(a2 + 24))
    {
      v29 = (_OWORD *)v41;
      if ((__int128 *)v41 != (__int128 *)((char *)&v41 + 8))
      {
        do
        {
          memset(&v55, 0, sizeof(v55));
          if (*((char *)v29 + 79) < 0)
            std::string::__init_copy_ctor_external(&v55, *((const std::string::value_type **)v29 + 7), *((_QWORD *)v29 + 8));
          else
            v55 = *(std::string *)((char *)v29 + 56);
          if ((void **)(a1 + 8) == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1, (void **)&v55.__r_.__value_.__l.__data_)&& v23 == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a2, (void **)&v55.__r_.__value_.__l.__data_))
          {
            bzero(&v50, 0x258uLL);
            SipDialogInfo::SipDialogInfo(&v50, (const SipDialogInfo *)((char *)v29 + 56));
            v49 = 0;
            *(_OWORD *)v47 = 0u;
            v48 = 0u;
            std::string::basic_string[abi:ne180100]<0>(&v44, "");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            SipDialogState::SipDialogState((uint64_t)v47, 5, &v44, (uint64_t)__p);
            if (v46 < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v44.__r_.__value_.__l.__data_);
            v51 = (int)v47[0];
            std::string::operator=(&v52, (const std::string *)&v47[1]);
            v53 = v49;
            v54 = BYTE2(v49);
            v30 = (char *)a3[1];
            SipDialogInfo::event((SipDialogInfo *)&v50, (uint64_t)&v44);
            std::vector<SipDialogEventData>::insert(a3, v30, (__int128 *)&v44);
            SipDialogEventData::~SipDialogEventData((void **)&v44.__r_.__value_.__l.__data_);
            if (SHIBYTE(v48) < 0)
              operator delete(v47[1]);
            SipDialogInfo::~SipDialogInfo((void **)&v50.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v55.__r_.__value_.__l.__data_);
          v31 = (_QWORD *)*((_QWORD *)v29 + 1);
          if (v31)
          {
            do
            {
              v32 = v31;
              v31 = (_QWORD *)*v31;
            }
            while (v31);
          }
          else
          {
            do
            {
              v32 = (_OWORD *)*((_QWORD *)v29 + 2);
              v35 = *(_QWORD *)v32 == (_QWORD)v29;
              v29 = v32;
            }
            while (!v35);
          }
          v29 = v32;
        }
        while (v32 != (__int128 *)((char *)&v41 + 8));
      }
    }
  }
  *(_OWORD *)&v50.__r_.__value_.__r.__words[1] = 0uLL;
  v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50.__r_.__value_.__l.__size_;
  v33 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 != a1 + 8)
  {
    do
    {
      v34 = *(_DWORD *)(v33 + 192);
      if (v34)
        v35 = v34 == 5;
      else
        v35 = 1;
      if (!v35)
      {
        v44.__r_.__value_.__r.__words[0] = v33 + 56;
        v36 = std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v50, (void **)(v33 + 56), (uint64_t)&std::piecewise_construct, (__int128 **)&v44);
        SipDialogInfo::operator=((uint64_t)(v36 + 7), v33 + 56);
      }
      v37 = *(_QWORD **)(v33 + 8);
      if (v37)
      {
        do
        {
          v38 = v37;
          v37 = (_QWORD *)*v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          v38 = *(_QWORD **)(v33 + 16);
          v35 = *v38 == v33;
          v33 = (uint64_t)v38;
        }
        while (!v35);
      }
      v33 = (uint64_t)v38;
    }
    while (v38 != (_QWORD *)(a1 + 8));
  }
  if (&v50 != (std::string *)a1)
    std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,SipDialogInfo>,std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *> *,long>>((uint64_t *)a1, (__int128 *)v50.__r_.__value_.__l.__data_, (__int128 *)&v50.__r_.__value_.__r.__words[1]);
  std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy((uint64_t)&v50, (_QWORD *)v50.__r_.__value_.__l.__size_);
  v6 = v40;
  if (SHIBYTE(v43[3]) < 0)
    operator delete(v43[1]);
  std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy((uint64_t)&v41, *((_QWORD **)&v41 + 1));
  return v6;
}

void sub_1BF098830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy((uint64_t)&a11, (_QWORD *)a12);
  _Unwind_Resume(a1);
}

uint64_t std::vector<SipDialogEventData>::insert(_QWORD *a1, char *a2, __int128 *a3)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64x2_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  int64x2_t v49;
  char *v50;
  _QWORD *v51;

  v5 = (char *)*a1;
  v6 = a1[1];
  v7 = (uint64_t)&a2[-*a1];
  v8 = v7 / 296;
  v9 = *a1 + 296 * (v7 / 296);
  v11 = a1 + 2;
  v10 = a1[2];
  if (v6 >= v10)
  {
    v15 = 0x14C1BACF914C1BADLL * ((uint64_t)(v6 - (_QWORD)v5) >> 3) + 1;
    if (v15 > 0xDD67C8A60DD67CLL)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v17 = 0x14C1BACF914C1BADLL * ((uint64_t)(v10 - (_QWORD)v5) >> 3);
    if (2 * v17 > v15)
      v15 = 2 * v17;
    if (v17 >= 0x6EB3E45306EB3ELL)
      v18 = 0xDD67C8A60DD67CLL;
    else
      v18 = v15;
    v47 = v11;
    if (v18)
    {
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipDialogEventData>>(v18);
    }
    else
    {
      v20 = 0;
      v19 = 0;
    }
    v22 = (uint64_t)&v20[296 * v8];
    v44 = v20;
    *(_QWORD *)&v45 = v22;
    *((_QWORD *)&v45 + 1) = v22;
    v46 = &v20[296 * v19];
    if (v8 == v19)
    {
      if (v7 < 1)
      {
        if (v5 == a2)
          v25 = 1;
        else
          v25 = 2 * v8;
        v51 = v11;
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipDialogEventData>>(v25);
        v27 = (uint64_t)&v26[296 * (v25 >> 2)];
        v48 = v26;
        v49.i64[0] = v27;
        v29 = &v26[296 * v28];
        v49.i64[1] = v27;
        v50 = v29;
        v30 = (__int128 *)v45;
        if (*((_QWORD *)&v45 + 1) == (_QWORD)v45)
        {
          v34 = vdupq_n_s64(v45);
          v32 = v27;
        }
        else
        {
          v31 = (*((_QWORD *)&v45 + 1) - (_QWORD)v45) / 296;
          v32 = v27 + 296 * v31;
          v33 = 296 * v31;
          do
          {
            SipDialogEventData::SipDialogEventData(v27, v30);
            v27 += 296;
            v30 = (__int128 *)((char *)v30 + 296);
            v33 -= 296;
          }
          while (v33);
          v26 = v48;
          v27 = v49.i64[0];
          v34 = (int64x2_t)v45;
          v29 = v50;
        }
        v35 = v46;
        v48 = v44;
        v44 = v26;
        *(_QWORD *)&v45 = v27;
        v49 = v34;
        *((_QWORD *)&v45 + 1) = v32;
        v46 = v29;
        v50 = v35;
        std::__split_buffer<SipDialogEventData>::~__split_buffer((uint64_t)&v48);
        v22 = v32;
      }
      else
      {
        v23 = v8 + 2;
        if (v8 >= -1)
          v23 = v8 + 1;
        v22 -= 296 * (v23 >> 1);
        *(_QWORD *)&v45 = v22;
        *((_QWORD *)&v45 + 1) = v22;
      }
    }
    SipDialogEventData::SipDialogEventData(v22, a3);
    v36 = 0;
    *((_QWORD *)&v45 + 1) += 296;
    v37 = (char *)*a1;
    while ((char *)(v9 + v36) != v37)
    {
      v36 -= 296;
      SipDialogEventData::SipDialogEventData((std::string *)(v36 + v45), (const SipDialogEventData *)(v36 + v9));
    }
    v38 = v45 + v36;
    *(_QWORD *)&v45 = v45 + v36;
    v39 = a1[1];
    v40 = *((_QWORD *)&v45 + 1);
    if (v39 != v9)
    {
      v41 = 0;
      do
      {
        SipDialogEventData::SipDialogEventData((std::string *)(*((_QWORD *)&v45 + 1) + v41), (const SipDialogEventData *)(v9 + v41));
        v41 += 296;
      }
      while (v9 + v41 != v39);
      v38 = v45;
      v9 = a1[1];
      v40 = *((_QWORD *)&v45 + 1) + v41;
    }
    v42 = (char *)*a1;
    *a1 = v38;
    a1[1] = v40;
    v43 = (char *)a1[2];
    a1[2] = v46;
    *((_QWORD *)&v45 + 1) = v9;
    v46 = v43;
    v44 = v42;
    *(_QWORD *)&v45 = v42;
    return std::__split_buffer<SipDialogEventData>::~__split_buffer((uint64_t)&v44);
  }
  else if (v9 == v6)
  {
    result = SipDialogEventData::SipDialogEventData(*a1 + 296 * (v7 / 296), a3);
    a1[1] = v9 + 296;
  }
  else
  {
    v12 = v6 - 296;
    if (v6 < 0x128)
    {
      v14 = a1[1];
    }
    else
    {
      v13 = (__int128 *)(v6 - 296);
      v14 = a1[1];
      do
      {
        SipDialogEventData::SipDialogEventData(v14, v13);
        v13 = (__int128 *)((char *)v13 + 296);
        v14 += 296;
      }
      while ((unint64_t)v13 < v6);
    }
    a1[1] = v14;
    if (v6 != v9 + 296)
    {
      v24 = 8 * ((uint64_t)(v6 - (v9 + 296)) >> 3);
      do
      {
        SipDialogEventData::operator=(v12, (__int128 *)&v5[296 * v8 - 296 + v24]);
        v12 -= 296;
        v24 -= 296;
      }
      while (v24);
    }
    return SipDialogEventData::operator=(v9, a3);
  }
  return result;
}

void sub_1BF098CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v17 + 8) = v16;
  _Unwind_Resume(exception_object);
}

void SipDialogEventData::~SipDialogEventData(void **this)
{
  if (*((char *)this + 279) < 0)
    operator delete(this[32]);
  if (*((char *)this + 231) < 0)
    operator delete(this[26]);
  if (*((char *)this + 191) < 0)
    operator delete(this[21]);
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t SipDialogEventData::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  void **v9;
  __int128 v10;
  void **v11;
  __int128 v12;
  void **v13;
  __int128 v14;
  void **v15;
  __int128 v16;
  void **v17;
  __int128 v18;
  char v19;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v7);
  v8 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)v7 = v8;
  *((_BYTE *)a2 + 71) = 0;
  *((_BYTE *)a2 + 48) = 0;
  v9 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v9);
  v10 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)v9 = v10;
  *((_BYTE *)a2 + 95) = 0;
  *((_BYTE *)a2 + 72) = 0;
  v11 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v11);
  v12 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)v11 = v12;
  *((_BYTE *)a2 + 119) = 0;
  *((_BYTE *)a2 + 96) = 0;
  v13 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*v13);
  v14 = *(__int128 *)((char *)a2 + 120);
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  *(_OWORD *)v13 = v14;
  *((_BYTE *)a2 + 143) = 0;
  *((_BYTE *)a2 + 120) = 0;
  v15 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0)
    operator delete(*v15);
  v16 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)v15 = v16;
  *((_BYTE *)a2 + 167) = 0;
  *((_BYTE *)a2 + 144) = 0;
  v17 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*v17);
  v18 = *(__int128 *)((char *)a2 + 168);
  *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
  *(_OWORD *)v17 = v18;
  *((_BYTE *)a2 + 191) = 0;
  *((_BYTE *)a2 + 168) = 0;
  v19 = *((_BYTE *)a2 + 196);
  *(_DWORD *)(a1 + 192) = *((_DWORD *)a2 + 48);
  *(_BYTE *)(a1 + 196) = v19;
  *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 13));
  *(_BYTE *)(a1 + 232) = *((_BYTE *)a2 + 232);
  *(_BYTE *)(a1 + 240) = *((_BYTE *)a2 + 240);
  *(_DWORD *)(a1 + 248) = *((_DWORD *)a2 + 62);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 16));
  *(_WORD *)(a1 + 280) = *((_WORD *)a2 + 140);
  *(_BYTE *)(a1 + 282) = *((_BYTE *)a2 + 282);
  *(_WORD *)(a1 + 288) = *((_WORD *)a2 + 144);
  return a1;
}

uint64_t SipDialogEventData::SipDialogEventData(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v5 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v5;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v6 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)(a1 + 48) = v6;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 6) = 0;
  v7 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)(a1 + 72) = v7;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  v8 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 96) = v8;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  v9 = *(__int128 *)((char *)a2 + 120);
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  *(_OWORD *)(a1 + 120) = v9;
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 16) = 0;
  *((_QWORD *)a2 + 17) = 0;
  v10 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 144) = v10;
  *((_QWORD *)a2 + 18) = 0;
  *((_QWORD *)a2 + 19) = 0;
  *((_QWORD *)a2 + 20) = 0;
  v11 = *(__int128 *)((char *)a2 + 168);
  *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
  *(_OWORD *)(a1 + 168) = v11;
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 22) = 0;
  *((_QWORD *)a2 + 23) = 0;
  v12 = *((_DWORD *)a2 + 48);
  *(_BYTE *)(a1 + 196) = *((_BYTE *)a2 + 196);
  *(_DWORD *)(a1 + 192) = v12;
  SipDialogDirection::SipDialogDirection((_BYTE *)(a1 + 200), (uint64_t)a2 + 200);
  *(_BYTE *)(a1 + 240) = *((_BYTE *)a2 + 240);
  SipDialogState::SipDialogState(a1 + 248, (uint64_t)a2 + 248);
  *(_WORD *)(a1 + 288) = *((_WORD *)a2 + 144);
  return a1;
}

void sub_1BF099148(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 231) < 0)
    operator delete(*(void **)(v1 + 208));
  if (*(char *)(v1 + 191) < 0)
    operator delete(*(void **)(v1 + 168));
  if (*(char *)(v1 + 167) < 0)
    operator delete(*(void **)(v1 + 144));
  if (*(char *)(v1 + 143) < 0)
    operator delete(*(void **)(v1 + 120));
  if (*(char *)(v1 + 119) < 0)
    operator delete(*(void **)(v1 + 96));
  if (*(char *)(v1 + 95) < 0)
    operator delete(*(void **)(v1 + 72));
  if (*(char *)(v1 + 71) < 0)
    operator delete(*(void **)(v1 + 48));
  if (*(char *)(v1 + 47) < 0)
    operator delete(*(void **)(v1 + 24));
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SipDialogEventData>>(unint64_t a1)
{
  if (a1 >= 0xDD67C8A60DD67DLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(296 * a1);
}

void SipDialogEventData::SipDialogEventData(std::string *this, const SipDialogEventData *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(this + 5, *((const std::string::value_type **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v9 = *(_OWORD *)((char *)a2 + 120);
    this[5].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 17);
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(this + 6, *((const std::string::value_type **)a2 + 18), *((_QWORD *)a2 + 19));
  }
  else
  {
    v10 = *((_OWORD *)a2 + 9);
    this[6].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 20);
    *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = v10;
  }
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external(this + 7, *((const std::string::value_type **)a2 + 21), *((_QWORD *)a2 + 22));
  }
  else
  {
    v11 = *(_OWORD *)((char *)a2 + 168);
    this[7].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 23);
    *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = v11;
  }
  v12 = *((_DWORD *)a2 + 48);
  this[8].__r_.__value_.__s.__data_[4] = *((_BYTE *)a2 + 196);
  LODWORD(this[8].__r_.__value_.__l.__data_) = v12;
  SipDialogDirection::SipDialogDirection(&this[8].__r_.__value_.__s.__data_[8], (uint64_t)a2 + 200);
  this[10].__r_.__value_.__s.__data_[0] = *((_BYTE *)a2 + 240);
  SipDialogState::SipDialogState((uint64_t)&this[10].__r_.__value_.__l.__size_, (uint64_t)a2 + 248);
  LOWORD(this[12].__r_.__value_.__l.__data_) = *((_WORD *)a2 + 144);
}

void sub_1BF099444(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;

  if (*(char *)(v1 + 167) < 0)
    operator delete(*v7);
  if (*(char *)(v1 + 143) < 0)
    operator delete(*v6);
  if (*(char *)(v1 + 119) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<SipDialogEventData>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 296;
    SipDialogEventData::~SipDialogEventData((void **)(i - 296));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t SipDialogState::SipDialogState(uint64_t a1, int a2, std::string *__str, uint64_t a4)
{
  uint64_t v6;
  const char *v7;

  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 31) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)a1 = a2;
  std::string::operator=((std::string *)(a1 + 8), __str);
  v6 = *(unsigned __int8 *)(a4 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a4 + 8);
  if (v6)
  {
    *(_BYTE *)(a1 + 34) = 1;
    if (*(char *)(a4 + 23) >= 0)
      v7 = (const char *)a4;
    else
      v7 = *(const char **)a4;
    *(_WORD *)(a1 + 32) = strtoul(v7, 0, 10);
  }
  return a1;
}

void sub_1BF0995F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,SipDialogInfo>,std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *> *,long>>(uint64_t *a1, __int128 *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 *v9;
  uint64_t *v10;
  uint64_t **leaf_high;
  __int128 *v12;
  BOOL v13;
  uint64_t **v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t *v20;

  if (a1[2])
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = (uint64_t)(a1 + 1);
    *(_QWORD *)(v7 + 16) = 0;
    a1[1] = 0;
    a1[2] = 0;
    if (*(_QWORD *)(v6 + 8))
      v8 = *(_QWORD **)(v6 + 8);
    else
      v8 = (_QWORD *)v6;
    v18 = a1;
    v19 = v8;
    v20 = v8;
    if (v8)
    {
      v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          SipDialogInfo::operator=((uint64_t)(v8 + 7), (uint64_t)v9 + 56);
          v10 = v20;
          v17 = 0;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)a1, &v17, v20 + 4);
          std::__tree<unsigned int>::__insert_node_at((uint64_t **)a1, v17, leaf_high, v10);
          v8 = v19;
          v20 = v19;
          if (v19)
            v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v19);
          v12 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v12)
          {
            do
            {
              a2 = v12;
              v12 = *(__int128 **)v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v13 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v13);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v18);
  }
  if (a2 != a3)
  {
    do
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::__construct_node<std::pair<std::string const,SipDialogInfo> const&>((uint64_t)a1, a2 + 2, &v18);
      v17 = 0;
      v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)a1, &v17, v18 + 4);
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)a1, v17, v14, v18);
      v18 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SipDialogInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)&v18, 0);
      v15 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = *(__int128 **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (__int128 *)*((_QWORD *)a2 + 2);
          v13 = *(_QWORD *)v16 == (_QWORD)a2;
          a2 = v16;
        }
        while (!v13);
      }
      a2 = v16;
    }
    while (v16 != a3);
  }
}

void sub_1BF0997D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

void LazuliResponse::encodeStartLine(LazuliResponse *this, ImsOutStream *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  __int128 *v10;
  unsigned int v11;
  __int128 *v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  std::string v19;
  void *v20[2];
  char v21;
  std::string v22;

  memset(&v22, 0, sizeof(v22));
  v4 = qword_1ED7042F8;
  if (qword_1ED7042F8)
  {
    v5 = *((_DWORD *)this + 32);
    v6 = &qword_1ED7042F8;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 >= v5;
      if (v7 >= v5)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (v8)
        v6 = (uint64_t *)v4;
      v4 = *v9;
    }
    while (*v9);
    v10 = &ims::kEmptyString;
    if (v6 != &qword_1ED7042F8)
    {
      v11 = *((_DWORD *)v6 + 8);
      v12 = (__int128 *)(v6 + 5);
      if (v11 <= v5)
        v10 = v12;
    }
  }
  else
  {
    v10 = &ims::kEmptyString;
  }
  if (*((char *)v10 + 23) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  else
    v22 = *(std::string *)v10;
  LoggableString::LoggableString((LoggableString *)v20, "MSRP ");
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, v20);
  LoggableString::LoggableString(&v19, (const std::string *)((char *)this + 80));
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &v19);
  LoggableString::LoggableString((LoggableString *)v17, " ");
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, v17);
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  LoggableString::LoggableString((LoggableString *)v15, " ");
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, v15);
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 32))(a2, &v22);
  LoggableString::LoggableString((LoggableString *)__p, "\r\n");
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  if (v14 < 0)
    operator delete(__p[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (v21 < 0)
    operator delete(v20[0]);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
}

void sub_1BF099A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v33 - 49) < 0)
    operator delete(*(void **)(v33 - 72));
  if (*(char *)(v33 - 25) < 0)
    operator delete(*(void **)(v33 - 48));
  _Unwind_Resume(exception_object);
}

void LazuliResponse::encodeEndLine(LazuliResponse *this, ImsOutStream *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;
  std::string v8;
  void *v9[2];
  char v10;

  LoggableString::LoggableString((LoggableString *)v9, "-------");
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, v9);
  LoggableString::LoggableString(&v8, (const std::string *)((char *)this + 80));
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &v8);
  LoggableString::LoggableString((LoggableString *)v6, "$");
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, v6);
  LoggableString::LoggableString((LoggableString *)__p, "\r\n");
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1BF099BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v26 - 17) < 0)
    operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t LazuliResponse::debugStr@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _OWORD v5[5];
  void *__p[2];
  __int128 v7;
  __int128 v8;
  _OWORD v9[9];
  uint64_t v10;

  v10 = 0;
  v8 = 0u;
  memset(v9, 0, sizeof(v9));
  *(_OWORD *)__p = 0u;
  v7 = 0u;
  memset(v5, 0, sizeof(v5));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v5[1] + 8, a1);
  *(_QWORD *)&v5[0] = *MEMORY[0x1E0DE4F50];
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(*(_QWORD *)&v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v5[1] = v3;
  *((_QWORD *)&v5[1] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v7) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B8707C](v9);
}

void sub_1BF099D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void LazuliResponse::~LazuliResponse(void **this)
{
  LazuliMessage::~LazuliMessage(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t ibiBarringFactorToActualBarringFactor(unsigned int a1)
{
  if (a1 > 0xF)
    return 100;
  else
    return word_1BF2A7F26[a1];
}

uint64_t ___ZN12IBINasClient20handleSsacBarringIndEPhjNSt3__110shared_ptrIS_EE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  void *__p[2];
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v2 = *(_QWORD *)(a1 + 32);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v3 = *(unsigned __int16 *)(a1 + 70);
  LOWORD(v13) = *(_WORD *)(a1 + 68);
  HIDWORD(v13) = v3;
  LOBYTE(v15) = 1;
  if ((unsigned __int16)v13 > 0x64u || v3 >= 0x201)
  {
    LOWORD(v13) = 100;
    HIDWORD(v13) = 0;
    LOBYTE(v15) = 0;
  }
  HIDWORD(v14) = 1;
  v5 = *(_QWORD *)(v2 + 56);
  v4 = v2 + 56;
  v6 = (*(uint64_t (**)(uint64_t))(v5 + 64))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v6);
  if (*(_DWORD *)(a1 + 64) == 1)
    v7 = "[SIM 2]: ";
  else
    v7 = "[SIM 1]: ";
  std::string::basic_string[abi:ne180100]<0>(__p, v7);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 32))(v6, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Got SSAC voice barring indication, Factor = ", 44);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)", time = ", 9);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v12 < 0)
    operator delete(__p[0]);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v8);
  if (*(_DWORD *)(a1 + 64) == 1)
    v9 = "[SIM 2]: ";
  else
    v9 = "[SIM 1]: ";
  std::string::basic_string[abi:ne180100]<0>(__p, v9);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 32))(v8, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Indication converted to SSAC info, Factor = ", 44);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)", time = ", 9);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v12 < 0)
    operator delete(__p[0]);
  IMSNasClient::notifyDelegates(*(_QWORD **)(a1 + 40), *(_DWORD *)(a1 + 64), (__int16 *)&v13, 1);
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1BF099FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12IBINasClientEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12IBINasClientEE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 40);
}

uint64_t IBINasClient::requestSsacBarringInfo(IBINasClient *this, int a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  unint64_t GMID;
  std::string *v8;
  std::string::size_type size;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void (**v26)(ImsResult *__hidden);
  uint64_t *v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[4];
  uint64_t v33;
  void *aBlock[2];
  char v35;
  void *__p[2];
  char v37;
  void *v38;
  std::__shared_weak_count *v39;
  char v40;
  _OWORD v41[2];
  uint64_t v42;
  std::string v43;
  void *v44;
  IBINasClient *v45;
  _QWORD v46[7];
  uint64_t v47;
  std::__shared_weak_count *v48;
  _BYTE v49[56];
  std::string v50;

  v4 = (char *)this + 56;
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 64))((char *)this + 56);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
  if (a2 == 1)
    v6 = "[SIM 2]: ";
  else
    v6 = "[SIM 1]: ";
  std::string::basic_string[abi:ne180100]<0>(&v43, v6);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 32))(v5, &v43);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"requesting current SSAC info", 28);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  v33 = 0;
  memset(v32, 0, sizeof(v32));
  AriSdk::ARI_IBINetDcSsacBarringInfoReq_SDK::ARI_IBINetDcSsacBarringInfoReq_SDK((AriSdk::ARI_IBINetDcSsacBarringInfoReq_SDK *)v32);
  LODWORD(v43.__r_.__value_.__l.__data_) = a2;
  if (!v33)
    AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>(&v33, &v43);
  if (*((_BYTE *)this + 320) && *((_DWORD *)this + 81) == 2)
  {
    memset(&v50, 0, sizeof(v50));
    std::string::basic_string[abi:ne180100]<0>(&v50, "ibi.nas.");
    GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v32);
    (*(void (**)(std::string *__return_ptr, IBINasClient *, unint64_t))(*(_QWORD *)this + 136))(&v43, this, (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26));
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v43;
    else
      v8 = (std::string *)v43.__r_.__value_.__r.__words[0];
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    else
      size = v43.__r_.__value_.__l.__size_;
    std::string::append(&v50, (const std::string::value_type *)v8, size);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    memset(v49, 0, 48);
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(v41, (_QWORD *)this + 37);
    if (*(_QWORD *)&v41[0])
      v10 = *(_QWORD *)&v41[0] + 160;
    else
      v10 = 0;
    v47 = v10;
    v48 = (std::__shared_weak_count *)*((_QWORD *)&v41[0] + 1);
    v41[0] = 0uLL;
    LoggableString::LoggableString(&v43, &v50);
    SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v49, &v47, &v43);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    v11 = v48;
    if (v48)
    {
      p_shared_owners = (unint64_t *)&v48->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v41[0] + 1);
    if (*((_QWORD *)&v41[0] + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v41[0] + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v32);
    v18 = (*(uint64_t (**)(IBINasClient *, _QWORD))(*(_QWORD *)this + 144))(this, (v17 >> 17) & 0xFFFF8000 | ((_DWORD)v17 << 26));
    v43.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
    v43.__r_.__value_.__l.__size_ = 1174405120;
    v43.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN12IBINasClient4sendIN6AriSdk34ARI_IBINetDcSsacBarringInfoReq_SDKEEE9ImsResultRT__block_invoke;
    v44 = &__block_descriptor_tmp_65_2;
    v45 = this;
    SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v46, (uint64_t)v49);
    v46[6] = v18;
    v19 = *((_QWORD *)this + 41);
    __p[0] = 0;
    ice::detail::wrapCallback<int>((uint64_t)&v43, __p);
    LODWORD(v41[0]) = 0;
    if (!v33)
      AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>(&v33, v41);
    memset(v41, 0, sizeof(v41));
    v42 = 0;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v38, (_QWORD *)(v19 + 8));
    ice::SendMsgBaseProxy::SendMsgBaseProxy();
    v20 = v39;
    if (v39)
    {
      v21 = (unint64_t *)&v39->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    aBlock[0] = __p[0];
    __p[0] = 0;
    ice::SendMsgBaseProxy::callback();
    if (aBlock[0])
      _Block_release(aBlock[0]);
    if (__p[0])
      _Block_release(__p[0]);
    MEMORY[0x1C3B86680](v41);
    std::string::basic_string[abi:ne180100]<0>(&v38, "ibi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v23 = ImsLogger::debug(ims::_logger, (uint64_t)&v38, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"Sent: ", 6);
    *(_BYTE *)(v23 + 17) = 0;
    v24 = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v32);
    (*(void (**)(void **__return_ptr, IBINasClient *, unint64_t))(*(_QWORD *)this + 136))(aBlock, this, (v24 >> 17) & 0xFFFF8000 | ((_DWORD)v24 << 26));
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v23 + 32))(v23, aBlock);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)" successfully", 13);
    *(_BYTE *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v23 + 17) = 0;
    if (v35 < 0)
      operator delete(aBlock[0]);
    if (v37 < 0)
      operator delete(__p[0]);
    if (v40 < 0)
      operator delete(v38);
    v31 = 0uLL;
    v26 = &off_1E78B7238;
    v27 = &_bambiDomain;
    v28 = 0;
    v30 = 0uLL;
    v29 = 0uLL;
    SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock((uint64_t)v46);
    SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock((uint64_t)v49);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
  }
  else
  {
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v26 = &off_1E78B7238;
    v27 = &_bambiDomain;
    v28 = 1073741826;
  }
  ImsResult::~ImsResult((ImsResult *)&v26);
  return MEMORY[0x1C3B86998](v32);
}

void sub_1BF09A558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *aBlock,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  uint64_t v46;
  uint64_t v47;

  if (a45 < 0)
    operator delete(__p);
  SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock(v46);
  SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock(v47 - 128);
  if (*(char *)(v47 - 49) < 0)
    operator delete(*(void **)(v47 - 72));
  MEMORY[0x1C3B86998](&a19);
  _Unwind_Resume(a1);
}

void sub_1BF09A688()
{
  uint64_t v0;

  if (*(char *)(v0 - 217) < 0)
    operator delete(*(void **)(v0 - 240));
  JUMPOUT(0x1BF09A680);
}

uint64_t IBINasClient::handleRequestSsacBarringResp(unsigned __int8 *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  const unsigned __int8 *v13;
  uint64_t v14;
  uint64_t BufGmid;
  const std::string::value_type *v16;
  std::string::size_type v17;
  SipTerminationLockBase *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  NSObject *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD block[5];
  std::__shared_weak_count *v35;
  SipTerminationLockBase *v36;
  int v37;
  __int16 v38;
  __int16 v39;
  std::string v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  std::string __p;
  void *v44;
  std::string::size_type v45;
  uint64_t v46;
  _BYTE v47[64];
  __int128 v48;
  __int128 v49;

  v48 = 0u;
  v49 = 0u;
  memset(v47, 0, sizeof(v47));
  AriSdk::ARI_IBINetDcSsacBarringInfoRspCb_SDK::ARI_IBINetDcSsacBarringInfoRspCb_SDK((AriSdk::ARI_IBINetDcSsacBarringInfoRspCb_SDK *)v47, a1);
  if (AriSdk::ARI_IBINetDcSsacBarringInfoRspCb_SDK::unpack((AriSdk::ARI_IBINetDcSsacBarringInfoRspCb_SDK *)v47))
  {
    std::string::basic_string[abi:ne180100]<0>(&v44, "ibi.nas");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::error(ims::_logger, (uint64_t)&v44, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"failed to extract SSAC response params", 38);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
  }
  else
  {
    v8 = v49;
    v9 = *(_DWORD *)v48;
    v10 = ibiBarringFactorToActualBarringFactor(*(_DWORD *)v49);
    v11 = *(int *)(v8 + 4);
    if (v11 > 7)
      v12 = 512;
    else
      v12 = word_1BF2A7F50[v11];
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v13 = (const unsigned __int8 *)a2;
    v14 = *a3;
    BufGmid = AriMsg::GetBufGmid((AriMsg *)a1, v13);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v14 + 136))(&v44, v14, BufGmid);
    memset(&__p, 0, sizeof(__p));
    std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.nas.");
    if (v46 >= 0)
      v16 = (const std::string::value_type *)&v44;
    else
      v16 = (const std::string::value_type *)v44;
    if (v46 >= 0)
      v17 = HIBYTE(v46);
    else
      v17 = v45;
    std::string::append(&__p, v16, v17);
    v18 = (SipTerminationLockBase *)operator new();
    v19 = (std::__shared_weak_count *)a3[1];
    if (*a3)
      v20 = *a3 + 160;
    else
      v20 = 0;
    v41 = v20;
    v42 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
    LoggableString::LoggableString(&v40, &__p);
    SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock(v18, &v41, &v40);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    v23 = v42;
    if (v42)
    {
      v24 = (unint64_t *)&v42->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v27 = *a3;
    v26 = (std::__shared_weak_count *)a3[1];
    v28 = *(NSObject **)(*a3 + 48);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZN12IBINasClient28handleRequestSsacBarringRespEPhjNSt3__110shared_ptrIS_EE_block_invoke;
    block[3] = &__block_descriptor_tmp_12_0;
    v38 = v10;
    v39 = v12;
    v37 = v9;
    block[4] = v27;
    v35 = v26;
    if (v26)
    {
      v29 = (unint64_t *)&v26->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v36 = v18;
    dispatch_async(v28, block);
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46) < 0)
    operator delete(v44);
  return MEMORY[0x1C3B86A4C](v47);
}

void sub_1BF09A9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  uint64_t v38;

  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  MEMORY[0x1C3B87100](v38, 0x10B3C40AC51C97CLL);
  if (a31 < 0)
    operator delete(a26);
  if (a37 < 0)
    operator delete(a32);
  MEMORY[0x1C3B86A4C](&a38);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBINasClient28handleRequestSsacBarringRespEPhjNSt3__110shared_ptrIS_EE_block_invoke(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;
  void *v12[2];
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  v2 = *(unsigned __int16 *)(a1 + 62);
  LOWORD(v14) = *(_WORD *)(a1 + 60);
  HIDWORD(v14) = v2;
  LOBYTE(v16) = 1;
  if ((unsigned __int16)v14 > 0x64u || v2 >= 0x201)
  {
    LOWORD(v14) = 100;
    HIDWORD(v14) = 0;
    LOBYTE(v16) = 0;
  }
  HIDWORD(v15) = 1;
  std::string::basic_string[abi:ne180100]<0>(v12, "ibi.nas");
  std::string::basic_string[abi:ne180100]<0>(v10, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v3 = ImsLogger::debug(ims::_logger, (uint64_t)v12, (uint64_t)v10);
  if (*(_DWORD *)(a1 + 56) == 1)
    v4 = "[SIM 2]: ";
  else
    v4 = "[SIM 1]: ";
  std::string::basic_string[abi:ne180100]<0>(__p, v4);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 32))(v3, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Got SSAC voice barring response, Factor = ", 42);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)", time = ", 9);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  std::string::basic_string[abi:ne180100]<0>(v12, "ibi.nas");
  std::string::basic_string[abi:ne180100]<0>(v10, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)v12, (uint64_t)v10);
  if (*(_DWORD *)(a1 + 56) == 1)
    v6 = "[SIM 2]: ";
  else
    v6 = "[SIM 1]: ";
  std::string::basic_string[abi:ne180100]<0>(__p, v6);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 32))(v5, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Response converted to SSAC info, Factor = ", 42);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)", time = ", 9);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  IMSNasClient::notifyDelegates(*(_QWORD **)(a1 + 32), *(_DWORD *)(a1 + 56), (__int16 *)&v14, 1);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1BF09AD24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c40_ZTSNSt3__110shared_ptrI12IBINasClientEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c40_ZTSNSt3__110shared_ptrI12IBINasClientEE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

uint64_t ___ZN12IBINasClient19handleAcbBarringIndEPhjNSt3__110shared_ptrIS_EE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int16 v3;
  unsigned int v4;
  char v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  void *__p[2];
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v2 = *(_QWORD *)(a1 + 32);
  v19 = 0;
  v20 = 0;
  if (*(_BYTE *)(a1 + 70))
    v3 = 0;
  else
    v3 = 100;
  v4 = *(unsigned __int16 *)(a1 + 68);
  LOWORD(v19) = v3;
  HIDWORD(v19) = v4;
  LOBYTE(v20) = 0;
  HIDWORD(v20) = 1;
  v21 = 1;
  if (v4 < 0x201)
  {
    if (*(_BYTE *)(a1 + 71))
    {
      HIDWORD(v20) = 0;
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 56) + 64))(v2 + 56);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 56) + 16))(v2 + 56, v6);
      if (*(_DWORD *)(a1 + 64) == 1)
        v7 = "[SIM 2]: ";
      else
        v7 = "[SIM 1]: ";
      std::string::basic_string[abi:ne180100]<0>(__p, v7);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 32))(v6, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"removed voice service flag from barring indication.", 51);
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v6 + 17) = 0;
      if (v18 < 0)
        operator delete(__p[0]);
      v5 = 1;
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    LOWORD(v19) = 100;
    LOBYTE(v21) = 0;
    v5 = 1;
    HIDWORD(v19) = 0;
    HIDWORD(v20) = 0;
  }
  v9 = *(_QWORD *)(v2 + 56);
  v8 = v2 + 56;
  v10 = (*(uint64_t (**)(uint64_t))(v9 + 64))(v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v10);
  if (*(_DWORD *)(a1 + 64) == 1)
    v11 = "[SIM 2]: ";
  else
    v11 = "[SIM 1]: ";
  std::string::basic_string[abi:ne180100]<0>(__p, v11);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 32))(v10, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Got ACB barring indication, Factor = ", 37);
  *(_BYTE *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)", time = ", 9);
  *(_BYTE *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (v18 < 0)
    operator delete(__p[0]);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v12);
  if (*(_DWORD *)(a1 + 64) == 1)
    v13 = "[SIM 2]: ";
  else
    v13 = "[SIM 1]: ";
  std::string::basic_string[abi:ne180100]<0>(__p, v13);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 32))(v12, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Indication converted to ACB info, Factor = ", 43);
  *(_BYTE *)(v12 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)", time = ", 9);
  *(_BYTE *)(v12 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v12 + 17) = 0;
  if (v18 < 0)
  {
    operator delete(__p[0]);
    if ((v5 & 1) != 0)
      goto LABEL_31;
  }
  else if ((v5 & 1) != 0)
  {
    goto LABEL_31;
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v14);
  if (*(_DWORD *)(a1 + 64) == 1)
    v15 = "[SIM 2]: ";
  else
    v15 = "[SIM 1]: ";
  std::string::basic_string[abi:ne180100]<0>(__p, v15);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v14 + 32))(v14, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"ACB barring applies to voice", 28);
  *(_BYTE *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v14 + 17) = 0;
  if (v18 < 0)
    operator delete(__p[0]);
LABEL_31:
  IMSNasClient::notifyDelegates(*(_QWORD **)(a1 + 40), *(_DWORD *)(a1 + 64), (__int16 *)&v19, 2);
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1BF09B174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t IBINasClient::requestAcbBarringInfo(IBINasClient *this, int a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  unint64_t GMID;
  std::string *v8;
  std::string::size_type size;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void (**v26)(ImsResult *__hidden);
  uint64_t *v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[4];
  uint64_t v33;
  void *aBlock[2];
  char v35;
  void *__p[2];
  char v37;
  void *v38;
  std::__shared_weak_count *v39;
  char v40;
  _OWORD v41[2];
  uint64_t v42;
  std::string v43;
  void *v44;
  IBINasClient *v45;
  _QWORD v46[7];
  uint64_t v47;
  std::__shared_weak_count *v48;
  _BYTE v49[56];
  std::string v50;

  v4 = (char *)this + 56;
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 64))((char *)this + 56);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
  if (a2 == 1)
    v6 = "[SIM 2]: ";
  else
    v6 = "[SIM 1]: ";
  std::string::basic_string[abi:ne180100]<0>(&v43, v6);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 32))(v5, &v43);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Getting current ACB info.", 25);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  v33 = 0;
  memset(v32, 0, sizeof(v32));
  AriSdk::ARI_IBINetGetAcBarringInfoReq_SDK::ARI_IBINetGetAcBarringInfoReq_SDK((AriSdk::ARI_IBINetGetAcBarringInfoReq_SDK *)v32);
  LODWORD(v43.__r_.__value_.__l.__data_) = a2;
  if (!v33)
    AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>(&v33, &v43);
  if (*((_BYTE *)this + 320) && *((_DWORD *)this + 81) == 2)
  {
    memset(&v50, 0, sizeof(v50));
    std::string::basic_string[abi:ne180100]<0>(&v50, "ibi.nas.");
    GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v32);
    (*(void (**)(std::string *__return_ptr, IBINasClient *, unint64_t))(*(_QWORD *)this + 136))(&v43, this, (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26));
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v43;
    else
      v8 = (std::string *)v43.__r_.__value_.__r.__words[0];
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    else
      size = v43.__r_.__value_.__l.__size_;
    std::string::append(&v50, (const std::string::value_type *)v8, size);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    memset(v49, 0, 48);
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(v41, (_QWORD *)this + 37);
    if (*(_QWORD *)&v41[0])
      v10 = *(_QWORD *)&v41[0] + 160;
    else
      v10 = 0;
    v47 = v10;
    v48 = (std::__shared_weak_count *)*((_QWORD *)&v41[0] + 1);
    v41[0] = 0uLL;
    LoggableString::LoggableString(&v43, &v50);
    SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v49, &v47, &v43);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    v11 = v48;
    if (v48)
    {
      p_shared_owners = (unint64_t *)&v48->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v41[0] + 1);
    if (*((_QWORD *)&v41[0] + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v41[0] + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v32);
    v18 = (*(uint64_t (**)(IBINasClient *, _QWORD))(*(_QWORD *)this + 144))(this, (v17 >> 17) & 0xFFFF8000 | ((_DWORD)v17 << 26));
    v43.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
    v43.__r_.__value_.__l.__size_ = 1174405120;
    v43.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN12IBINasClient4sendIN6AriSdk33ARI_IBINetGetAcBarringInfoReq_SDKEEE9ImsResultRT__block_invoke;
    v44 = &__block_descriptor_tmp_69_1;
    v45 = this;
    SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v46, (uint64_t)v49);
    v46[6] = v18;
    v19 = *((_QWORD *)this + 41);
    __p[0] = 0;
    ice::detail::wrapCallback<int>((uint64_t)&v43, __p);
    LODWORD(v41[0]) = 0;
    if (!v33)
      AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>(&v33, v41);
    memset(v41, 0, sizeof(v41));
    v42 = 0;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v38, (_QWORD *)(v19 + 8));
    ice::SendMsgBaseProxy::SendMsgBaseProxy();
    v20 = v39;
    if (v39)
    {
      v21 = (unint64_t *)&v39->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    aBlock[0] = __p[0];
    __p[0] = 0;
    ice::SendMsgBaseProxy::callback();
    if (aBlock[0])
      _Block_release(aBlock[0]);
    if (__p[0])
      _Block_release(__p[0]);
    MEMORY[0x1C3B86680](v41);
    std::string::basic_string[abi:ne180100]<0>(&v38, "ibi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v23 = ImsLogger::debug(ims::_logger, (uint64_t)&v38, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"Sent: ", 6);
    *(_BYTE *)(v23 + 17) = 0;
    v24 = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v32);
    (*(void (**)(void **__return_ptr, IBINasClient *, unint64_t))(*(_QWORD *)this + 136))(aBlock, this, (v24 >> 17) & 0xFFFF8000 | ((_DWORD)v24 << 26));
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v23 + 32))(v23, aBlock);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)" successfully", 13);
    *(_BYTE *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v23 + 17) = 0;
    if (v35 < 0)
      operator delete(aBlock[0]);
    if (v37 < 0)
      operator delete(__p[0]);
    if (v40 < 0)
      operator delete(v38);
    v31 = 0uLL;
    v26 = &off_1E78B7238;
    v27 = &_bambiDomain;
    v28 = 0;
    v30 = 0uLL;
    v29 = 0uLL;
    SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock((uint64_t)v46);
    SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock((uint64_t)v49);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
  }
  else
  {
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v26 = &off_1E78B7238;
    v27 = &_bambiDomain;
    v28 = 1073741826;
  }
  ImsResult::~ImsResult((ImsResult *)&v26);
  return MEMORY[0x1C3B8695C](v32);
}

void sub_1BF09B6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *aBlock,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  uint64_t v46;
  uint64_t v47;

  if (a45 < 0)
    operator delete(__p);
  SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock(v46);
  SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock(v47 - 128);
  if (*(char *)(v47 - 49) < 0)
    operator delete(*(void **)(v47 - 72));
  MEMORY[0x1C3B8695C](&a19);
  _Unwind_Resume(a1);
}

void sub_1BF09B7FC()
{
  uint64_t v0;

  if (*(char *)(v0 - 217) < 0)
    operator delete(*(void **)(v0 - 240));
  JUMPOUT(0x1BF09B7F4);
}

uint64_t IBINasClient::handleRequestAcbBarringResp(unsigned __int8 *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  BOOL v8;
  int v9;
  const unsigned __int8 *v10;
  uint64_t v11;
  uint64_t BufGmid;
  const std::string::value_type *v13;
  std::string::size_type v14;
  SipTerminationLockBase *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD block[5];
  std::__shared_weak_count *v32;
  SipTerminationLockBase *v33;
  int v34;
  BOOL v35;
  std::string v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::string __p;
  void *v40;
  std::string::size_type v41;
  uint64_t v42;
  _BYTE v43[64];
  __int128 v44;
  __int128 v45;
  __int128 v46;

  v45 = 0u;
  v46 = 0u;
  v44 = 0u;
  memset(v43, 0, sizeof(v43));
  AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK::ARI_IBINetGetAcBarringInfoRspCb_SDK((AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK *)v43, a1);
  if (AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK::unpack((AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK *)v43))
  {
    std::string::basic_string[abi:ne180100]<0>(&v40, "ibi.nas");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::error(ims::_logger, (uint64_t)&v40, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"failed to extract ACB info response params", 42);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
  }
  else
  {
    if (*(_DWORD *)(v45 + 4))
      v8 = 1;
    else
      v8 = *(_DWORD *)(v45 + 8) != 0;
    v9 = *(_DWORD *)v44;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v10 = (const unsigned __int8 *)a2;
    v11 = *a3;
    BufGmid = AriMsg::GetBufGmid((AriMsg *)a1, v10);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 136))(&v40, v11, BufGmid);
    memset(&__p, 0, sizeof(__p));
    std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.nas.");
    if (v42 >= 0)
      v13 = (const std::string::value_type *)&v40;
    else
      v13 = (const std::string::value_type *)v40;
    if (v42 >= 0)
      v14 = HIBYTE(v42);
    else
      v14 = v41;
    std::string::append(&__p, v13, v14);
    v15 = (SipTerminationLockBase *)operator new();
    v16 = (std::__shared_weak_count *)a3[1];
    if (*a3)
      v17 = *a3 + 160;
    else
      v17 = 0;
    v37 = v17;
    v38 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    LoggableString::LoggableString(&v36, &__p);
    SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock(v15, &v37, &v36);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    v20 = v38;
    if (v38)
    {
      v21 = (unint64_t *)&v38->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v24 = *a3;
    v23 = (std::__shared_weak_count *)a3[1];
    v25 = *(NSObject **)(*a3 + 48);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZN12IBINasClient27handleRequestAcbBarringRespEPhjNSt3__110shared_ptrIS_EE_block_invoke;
    block[3] = &__block_descriptor_tmp_38_2;
    v35 = v8;
    v34 = v9;
    block[4] = v24;
    v32 = v23;
    if (v23)
    {
      v26 = (unint64_t *)&v23->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v33 = v15;
    dispatch_async(v25, block);
    v28 = v32;
    if (v32)
    {
      v29 = (unint64_t *)&v32->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42) < 0)
    operator delete(v40);
  return MEMORY[0x1C3B869E0](v43);
}

void sub_1BF09BB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  uint64_t v38;

  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  MEMORY[0x1C3B87100](v38, 0x10B3C40AC51C97CLL);
  if (a31 < 0)
    operator delete(a26);
  if (a37 < 0)
    operator delete(a32);
  MEMORY[0x1C3B869E0](&a38);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBINasClient27handleRequestAcbBarringRespEPhjNSt3__110shared_ptrIS_EE_block_invoke(uint64_t a1)
{
  __int16 v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;
  uint64_t v12;
  _BYTE v13[12];

  v12 = 0;
  *(_QWORD *)v13 = 0;
  if (*(_BYTE *)(a1 + 60))
    v2 = 0;
  else
    v2 = 100;
  LOWORD(v12) = v2;
  HIDWORD(v12) = 100;
  v13[0] = 0;
  *(_QWORD *)&v13[4] = 0x100000001;
  std::string::basic_string[abi:ne180100]<0>(v10, "ibi.nas");
  std::string::basic_string[abi:ne180100]<0>(v8, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v3 = ImsLogger::debug(ims::_logger, (uint64_t)v10, (uint64_t)v8);
  if (*(_DWORD *)(a1 + 56) == 1)
    v4 = "[SIM 2]: ";
  else
    v4 = "[SIM 1]: ";
  std::string::basic_string[abi:ne180100]<0>(__p, v4);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 32))(v3, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Got voice barring from ACB info response, Factor = ", 51);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)", time = ", 9);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  IMSNasClient::notifyDelegates(*(_QWORD **)(a1 + 32), *(_DWORD *)(a1 + 56), (__int16 *)&v12, 2);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1BF09BD44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

void SipThreadSafeLockable::~SipThreadSafeLockable(SipThreadSafeLockable *this, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 48)) = a2[3];
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 72));
  SipLockable::~SipLockable(this, a2 + 1);
}

void IBINasClient::IBINasClient(IBINasClient *this, dispatch_object_t *a2)
{
  SipThreadSafeLockable *v3;
  unsigned __int8 v4;
  const char *v5;
  dispatch_queue_t v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *size;
  NSObject *object;
  __int128 v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  std::string __p;

  *((_QWORD *)this + 20) = &off_1E78B7B60;
  v3 = (IBINasClient *)((char *)this + 160);
  *(_QWORD *)this = off_1E78C1DA0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = (char *)this + 32;
  *((_QWORD *)this + 6) = *a2;
  if (*a2)
    dispatch_retain(*a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.nas");
  ImsLogContainer::ImsLogContainer((uint64_t)this + 56, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  SipThreadSafeLockable::SipThreadSafeLockable(v3, (uint64_t *)off_1E78DA3D8);
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  *(_QWORD *)this = &off_1E78DA260;
  *((_QWORD *)this + 7) = &off_1E78DA318;
  *((_QWORD *)this + 20) = &unk_1E78DA398;
  *((_QWORD *)this + 39) = 0;
  *((_BYTE *)this + 320) = 0;
  *((_DWORD *)this + 85) = 0;
  *(_QWORD *)((char *)this + 332) = 0;
  *(_QWORD *)((char *)this + 324) = 0;
  *((_QWORD *)this + 43) = (char *)this + 352;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = (char *)this + 376;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_17);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_17))
  {
    std::string::basic_string[abi:ne180100]<0>(&qword_1ED70EDE0, "com.apple.ipTelephony.ibi.nas");
    __cxa_atexit(MEMORY[0x1E0DE44D0], &qword_1ED70EDE0, &dword_1BEDF4000);
    __cxa_guard_release(&_MergedGlobals_17);
  }
  if (byte_1ED70EDF7 >= 0)
    v5 = (const char *)&qword_1ED70EDE0;
  else
    v5 = (const char *)qword_1ED70EDE0;
  v6 = dispatch_queue_create(v5, 0);
  v7 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = v6;
  if (v7)
    dispatch_release(v7);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  ctu::LogServer::create();
  if (__p.__r_.__value_.__r.__words[0])
  {
    v8 = (std::__shared_weak_count *)operator new(0x30uLL);
    v8->__shared_owners_ = 0;
    v8->__shared_weak_owners_ = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78BDEC8;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CFD00;
    v8[1].__shared_owners_ = (uint64_t)&unk_1E78CFD50;
    v8[1].__shared_weak_owners_ = (uint64_t)this + 56;
    v25 = v8 + 1;
    v26 = v8;
    v24 = 0uLL;
    ctu::LogServer::addWriter();
    if (v26)
    {
      p_shared_owners = &v26->__shared_owners_;
      do
        v10 = __ldaxr((unint64_t *)p_shared_owners);
      while (__stlxr(v10 - 1, (unint64_t *)p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  v11 = *((_QWORD *)this + 39);
  object = v11;
  if (v11)
    dispatch_retain(v11);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  ice::Client::create();
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 328, &v24);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (size)
  {
    v17 = (unint64_t *)&size->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (object)
    dispatch_release(object);
  v19 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v20 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1BF09C154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, dispatch_object_t object, char a12, uint64_t a13, char a14, uint64_t a15, char a16)
{
  uint64_t v16;
  SipThreadSafeLockable *v17;
  void **v18;
  uint64_t v19;
  NSObject *v21;
  std::__shared_weak_count *v22;

  __cxa_guard_abort(&_MergedGlobals_17);
  std::__tree<std::string>::destroy(v16 + 368, *(char **)(v16 + 376));
  std::__tree<unsigned int>::destroy(v16 + 344, *(_QWORD **)(v16 + 352));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v19);
  v21 = *(NSObject **)(v16 + 312);
  if (v21)
    dispatch_release(v21);
  v22 = *(std::__shared_weak_count **)(v16 + 304);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  SipThreadSafeLockable::~SipThreadSafeLockable(v17, (uint64_t *)off_1E78DA3D8);
  ImsLogContainer::~ImsLogContainer(v18);
  IMSNasClient::~IMSNasClient((IMSNasClient *)v16);
  _Unwind_Resume(a1);
}

void sub_1BF09C21C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  JUMPOUT(0x1BF09C20CLL);
}

void sub_1BF09C234()
{
  JUMPOUT(0x1BF09C20CLL);
}

void IBINasClient::~IBINasClient(IBINasClient *this, uint64_t *a2)
{
  uint64_t v4;
  SipLockable *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *((_QWORD *)this + 7) = &off_1E78DA318;
  *((_QWORD *)this + 20) = a2[5];
  v5 = (IBINasClient *)((char *)this + 160);
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[6];
  std::__tree<std::string>::destroy((uint64_t)this + 368, *((char **)this + 47));
  std::__tree<unsigned int>::destroy((uint64_t)this + 344, *((_QWORD **)this + 44));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 328);
  v6 = *((_QWORD *)this + 39);
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  v8 = a2[1];
  *((_QWORD *)this + 20) = v8;
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v8 - 48)) = a2[4];
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 232));
  SipLockable::~SipLockable(v5, a2 + 2);
  *((_QWORD *)this + 7) = off_1E78CFE68;
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  IMSNasClient::~IMSNasClient(this);
}

void IBINasClient::~IBINasClient(IBINasClient *this)
{
}

{
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'IBINasClient::~IBINasClient(IBINasClient *this)
{
}

{
}

{
  JUMPOUT(0x1C3B87100);
}

{
  JUMPOUT(0x1C3B87100);
}

void IBINasClient::updateBarringForInstance(IBINasClient *this, int a2, int a3)
{
  std::string *v6;
  const std::string::value_type *v7;
  std::string *v8;
  __int128 v9;
  uint64_t v10;
  const char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD v20[5];
  _BYTE v21[48];
  _QWORD v22[5];
  _BYTE v23[48];
  std::string __p;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int64_t v33;
  int v34;

  v34 = a2;
  if (*((_DWORD *)this + 81) != 2)
  {
    v18 = (char *)this + 56;
    v19 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 64))((char *)this + 56);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v18 + 16))(v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"IBINasClient not initialized. Don't register for indications.", 61);
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v19 + 17) = 0;
    return;
  }
  v32 = 0uLL;
  v33 = 0;
  v6 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v29, "ibi.nas.listen.");
  if (a2)
    v7 = "1";
  else
    v7 = "0";
  v8 = std::string::append(v6, v7, 1uLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v33 = v8->__r_.__value_.__r.__words[2];
  v32 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v30) < 0)
    operator delete((void *)v29);
  v30 = 0u;
  v31 = 0u;
  v29 = 0u;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v25, (_QWORD *)this + 37);
  if (v25)
    v10 = v25 + 160;
  else
    v10 = 0;
  v27 = v10;
  v28 = v26;
  v25 = 0;
  v26 = 0;
  if (v33 >= 0)
    v11 = (const char *)&v32;
  else
    v11 = (const char *)v32;
  LoggableString::LoggableString((LoggableString *)&__p, v11);
  SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock((SipTerminationLockBase *)&v29, &v27, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v12 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v26;
  if (v26)
  {
    v16 = (unint64_t *)&v26->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 43, (unsigned int *)&v34, (uint64_t)&std::piecewise_construct, (unsigned int **)&__p)+ 8) = a3;
  if ((a3 & 2) != 0)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 1174405120;
    v22[2] = ___ZN12IBINasClient24updateBarringForInstanceEjj_block_invoke;
    v22[3] = &__block_descriptor_tmp_45_1;
    v22[4] = this;
    SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v23, (uint64_t)&v29);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
    ice::Client::regIndication<int({block_pointer}&)(unsigned char *,unsigned int)>(*((_QWORD *)this + 41), 630358016, (uint64_t *)&__p);
    IBINasClient::requestAcbBarringInfo(this, v34);
    SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock((uint64_t)v23);
    if ((a3 & 1) == 0)
      goto LABEL_27;
  }
  else
  {
    ice::Client::setIndShouldWake(*((ice::Client **)this + 41));
    if ((a3 & 1) == 0)
    {
LABEL_27:
      ice::Client::setIndShouldWake(*((ice::Client **)this + 41));
      goto LABEL_31;
    }
  }
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 1174405120;
  v20[2] = ___ZN12IBINasClient24updateBarringForInstanceEjj_block_invoke_46;
  v20[3] = &__block_descriptor_tmp_47_2;
  v20[4] = this;
  SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v21, (uint64_t)&v29);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
  ice::Client::regIndication<int({block_pointer}&)(unsigned char *,unsigned int)>(*((_QWORD *)this + 41), 696320000, (uint64_t *)&__p);
  IBINasClient::requestSsacBarringInfo(this, v34);
  SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock((uint64_t)v21);
LABEL_31:
  SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock((uint64_t)&v29);
  if (SHIBYTE(v33) < 0)
    operator delete((void *)v32);
}

void sub_1BF09C718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock(v37 - 128);
  if (*(char *)(v37 - 57) < 0)
    operator delete(*(void **)(v37 - 80));
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBINasClient24updateBarringForInstanceEjj_block_invoke(_QWORD *a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  BOOL v27;
  __int16 v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  __int16 v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  const unsigned __int8 *v49;
  uint64_t v50;
  uint64_t BufGmid;
  const std::string::value_type *v52;
  std::string::size_type v53;
  SipTerminationLockBase *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  NSObject *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  __int16 v71;
  BOOL v72;
  int v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  std::string __p;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  SipTerminationLockBase *v81;
  int v82;
  __int16 v83;
  BOOL v84;
  BOOL v85;
  BOOL v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  std::string v89;
  void *v90;
  std::string::size_type v91;
  uint64_t v92;
  _OWORD v93[4];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  int *v98;

  v5 = a1[4];
  v7 = a1[9];
  v6 = (std::__shared_weak_count *)a1[10];
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v74, (_QWORD *)(v5 + 296));
  v98 = 0;
  v96 = 0u;
  v97 = 0u;
  v94 = 0u;
  v95 = 0u;
  memset(v93, 0, sizeof(v93));
  AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK::ARI_IBINetCellLteAcBarringStatusIndCb_SDK((AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK *)v93, a2);
  if (AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK::unpack((AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK *)v93))
  {
    v12 = *(_QWORD *)(v5 + 56);
    v11 = v5 + 56;
    v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"failed to extract ACB indication params", 39);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
  }
  else
  {
    v14 = *(_DWORD *)v94;
    v15 = v5 + 56;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 56) + 64))(v5 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 56) + 16))(v5 + 56, v16);
    if (v14 == 1)
      v17 = "[SIM 2]: ";
    else
      v17 = "[SIM 1]: ";
    std::string::basic_string[abi:ne180100]<0>(&__p, v17);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v16 + 32))(v16, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"*response.barring_info_type_t2 = ", 33);
    *(_BYTE *)(v16 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 64))(v5 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v5 + 56, v18);
    std::string::basic_string[abi:ne180100]<0>(&__p, v17);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v18 + 32))(v18, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"(*response.mo_data_barring_t4).barring_status = ", 48);
    *(_BYTE *)(v18 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v18 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 64))(v5 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v5 + 56, v19);
    std::string::basic_string[abi:ne180100]<0>(&__p, v17);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v19 + 32))(v19, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"(*response.mo_data_barring_t4).remaining_timer = ", 49);
    *(_BYTE *)(v19 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v19 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 64))(v5 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v5 + 56, v20);
    std::string::basic_string[abi:ne180100]<0>(&__p, v17);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v20 + 32))(v20, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"(*response.mo_signaling_barring_t5).barring_status = ", 53);
    *(_BYTE *)(v20 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v20 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 64))(v5 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v5 + 56, v21);
    std::string::basic_string[abi:ne180100]<0>(&__p, v17);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v21 + 32))(v21, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"(*response.mo_signaling_barring_t5).remaining_timer = ", 54);
    *(_BYTE *)(v21 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v21 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 64))(v5 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v5 + 56, v22);
    std::string::basic_string[abi:ne180100]<0>(&__p, v17);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v22 + 32))(v22, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"*response.skip_barring_mmtel_voice_t7 = ", 40);
    *(_BYTE *)(v22 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v22 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 64))(v5 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v5 + 56, v23);
    std::string::basic_string[abi:ne180100]<0>(&__p, v17);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v23 + 32))(v23, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"*response.skip_barring_sms_t9 = ", 32);
    *(_BYTE *)(v23 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v23 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v24 = **((_BYTE **)&v94 + 1);
    v73 = v14;
    if (v24 == 4)
    {
      v29 = *(_DWORD *)v96;
      v30 = *(int *)(v96 + 4);
      v31 = *(_DWORD *)v96 != 0;
      if (v30 > 7)
        v32 = 512;
      else
        v32 = word_1BF2A7F50[v30];
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 64))(v5 + 56);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v5 + 56, v36);
      std::string::basic_string[abi:ne180100]<0>(&__p, v17);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v36 + 32))(v36, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"barring type: MO_SIGNALING, barringStatus=", 42);
      *(_BYTE *)(v36 + 17) = 0;
      if (v29)
        v37 = "true";
      else
        v37 = "false";
      if (v29)
        v38 = 4;
      else
        v38 = 5;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)v37, v38);
      *(_BYTE *)(v36 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)", barringTime=", 14);
      *(_BYTE *)(v36 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v36 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v72 = v31;
      *(_BYTE *)(v36 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v71 = v32;
    }
    else if (v24 == 2)
    {
      v25 = **((_DWORD **)&v95 + 1);
      v26 = *(int *)(*((_QWORD *)&v95 + 1) + 4);
      v27 = **((_DWORD **)&v95 + 1) != 0;
      if (v26 > 7)
        v28 = 512;
      else
        v28 = word_1BF2A7F50[v26];
      v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 64))(v5 + 56);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v5 + 56, v33);
      std::string::basic_string[abi:ne180100]<0>(&__p, v17);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v33 + 32))(v33, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"barring type: MO_DATA, barringStatus=", 37);
      *(_BYTE *)(v33 + 17) = 0;
      if (v25)
        v34 = "true";
      else
        v34 = "false";
      if (v25)
        v35 = 4;
      else
        v35 = 5;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)v34, v35);
      *(_BYTE *)(v33 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)", barringTime=", 14);
      *(_BYTE *)(v33 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v33 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v33 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v71 = v28;
      v72 = v27;
    }
    else
    {
      v71 = 0;
      v72 = 0;
    }
    v39 = *(_DWORD *)v97;
    v40 = *(_DWORD *)v97 == 1;
    v41 = *v98;
    v42 = *v98 == 1;
    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 64))(v5 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v5 + 56, v43);
    std::string::basic_string[abi:ne180100]<0>(&__p, v17);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v43 + 32))(v43, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v43 + 8), (uint64_t)"skipBarringMmtelVoice=", 22);
    *(_BYTE *)(v43 + 17) = 0;
    if (v39 == 1)
      v44 = "true";
    else
      v44 = "false";
    if (v39 == 1)
      v45 = 4;
    else
      v45 = 5;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v43 + 8), (uint64_t)v44, v45);
    *(_BYTE *)(v43 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v43 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 64))(v5 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v5 + 56, v46);
    std::string::basic_string[abi:ne180100]<0>(&__p, v17);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v46 + 32))(v46, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v46 + 8), (uint64_t)"skipBarringSms=", 15);
    *(_BYTE *)(v46 + 17) = 0;
    if (v41 == 1)
      v47 = "true";
    else
      v47 = "false";
    if (v41 == 1)
      v48 = 4;
    else
      v48 = 5;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v46 + 8), (uint64_t)v47, v48);
    *(_BYTE *)(v46 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v46 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v90 = 0;
    v91 = 0;
    v92 = 0;
    v49 = (const unsigned __int8 *)a3;
    v50 = v74;
    BufGmid = AriMsg::GetBufGmid((AriMsg *)a2, v49);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v50 + 136))(&v90, v50, BufGmid);
    memset(&v89, 0, sizeof(v89));
    std::string::basic_string[abi:ne180100]<0>(&v89, "ibi.nas.");
    if (v92 >= 0)
      v52 = (const std::string::value_type *)&v90;
    else
      v52 = (const std::string::value_type *)v90;
    if (v92 >= 0)
      v53 = HIBYTE(v92);
    else
      v53 = v91;
    std::string::append(&v89, v52, v53);
    v54 = (SipTerminationLockBase *)operator new();
    if (v74)
      v55 = v74 + 160;
    else
      v55 = 0;
    v87 = v55;
    v88 = v75;
    if (v75)
    {
      v56 = (unint64_t *)&v75->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    LoggableString::LoggableString(&__p, &v89);
    SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock(v54, &v87, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v58 = v88;
    if (v88)
    {
      v59 = (unint64_t *)&v88->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN12IBINasClient19handleAcbBarringIndEPhjNSt3__110shared_ptrIS_EE_block_invoke;
    v77 = &__block_descriptor_tmp_34_1;
    v61 = *(NSObject **)(v74 + 48);
    __p.__r_.__value_.__l.__size_ = 1174405120;
    v84 = v72;
    v83 = v71;
    v85 = v40;
    v82 = v73;
    v86 = v42;
    v78 = v5;
    v79 = v74;
    v80 = v75;
    if (v75)
    {
      v62 = (unint64_t *)&v75->__shared_owners_;
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    v81 = v54;
    dispatch_async(v61, &__p);
    v64 = v80;
    if (v80)
    {
      v65 = (unint64_t *)&v80->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    if (SHIBYTE(v92) < 0)
      operator delete(v90);
  }
  MEMORY[0x1C3B86B54](v93);
  v67 = v75;
  if (v75)
  {
    v68 = (unint64_t *)&v75->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  return 0;
}

void sub_1BF09D388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  MEMORY[0x1C3B86B54](&a40);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBINasClient24updateBarringForInstanceEjj_block_invoke_46(_QWORD *a1, unsigned __int8 *a2, unsigned int a3)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  const unsigned __int8 *v19;
  uint64_t v20;
  uint64_t BufGmid;
  const std::string::value_type *v22;
  std::string::size_type v23;
  SipTerminationLockBase *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  NSObject *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v41;
  std::__shared_weak_count *v42;
  std::string __p;
  void *v44;
  _QWORD *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  SipTerminationLockBase *v48;
  int v49;
  __int16 v50;
  __int16 v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  std::string v54;
  void *v55;
  std::string::size_type v56;
  uint64_t v57;
  _BYTE v58[64];
  __int128 v59;
  uint64_t v60;

  v5 = (_QWORD *)a1[4];
  v7 = a1[9];
  v6 = (std::__shared_weak_count *)a1[10];
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v41, v5 + 37);
  v60 = 0;
  v59 = 0u;
  memset(v58, 0, sizeof(v58));
  AriSdk::ARI_IBINetDcSsacBarringInfoIndCb_SDK::ARI_IBINetDcSsacBarringInfoIndCb_SDK((AriSdk::ARI_IBINetDcSsacBarringInfoIndCb_SDK *)v58, a2);
  if (AriSdk::ARI_IBINetDcSsacBarringInfoIndCb_SDK::unpack((AriSdk::ARI_IBINetDcSsacBarringInfoIndCb_SDK *)v58))
  {
    v12 = v5[7];
    v11 = v5 + 7;
    v13 = (*(uint64_t (**)(_QWORD *))(v12 + 56))(v11);
    (*(void (**)(_QWORD *, uint64_t))(*v11 + 16))(v11, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"failed to extract SSAC indication params", 40);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
  }
  else
  {
    v14 = *((_QWORD *)&v59 + 1);
    v15 = *(_DWORD *)v59;
    v16 = ibiBarringFactorToActualBarringFactor(**((_DWORD **)&v59 + 1));
    v17 = *(int *)(v14 + 4);
    if (v17 > 7)
      v18 = 512;
    else
      v18 = word_1BF2A7F50[v17];
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v19 = (const unsigned __int8 *)a3;
    v20 = v41;
    BufGmid = AriMsg::GetBufGmid((AriMsg *)a2, v19);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v20 + 136))(&v55, v20, BufGmid);
    memset(&v54, 0, sizeof(v54));
    std::string::basic_string[abi:ne180100]<0>(&v54, "ibi.nas.");
    if (v57 >= 0)
      v22 = (const std::string::value_type *)&v55;
    else
      v22 = (const std::string::value_type *)v55;
    if (v57 >= 0)
      v23 = HIBYTE(v57);
    else
      v23 = v56;
    std::string::append(&v54, v22, v23);
    v24 = (SipTerminationLockBase *)operator new();
    if (v41)
      v25 = v41 + 160;
    else
      v25 = 0;
    v52 = v25;
    v53 = v42;
    if (v42)
    {
      v26 = (unint64_t *)&v42->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    LoggableString::LoggableString(&__p, &v54);
    SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock(v24, &v52, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v28 = v53;
    if (v53)
    {
      v29 = (unint64_t *)&v53->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = v5[6];
    __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
    __p.__r_.__value_.__l.__size_ = 1174405120;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN12IBINasClient20handleSsacBarringIndEPhjNSt3__110shared_ptrIS_EE_block_invoke;
    v44 = &__block_descriptor_tmp_33;
    v50 = v16;
    v51 = v18;
    v49 = v15;
    v45 = v5;
    v46 = v41;
    v47 = v42;
    if (v42)
    {
      v32 = (unint64_t *)&v42->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v48 = v24;
    dispatch_async(v31, &__p);
    v34 = v47;
    if (v47)
    {
      v35 = (unint64_t *)&v47->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57) < 0)
      operator delete(v55);
  }
  MEMORY[0x1C3B86A28](v58);
  v37 = v42;
  if (v42)
  {
    v38 = (unint64_t *)&v42->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  return 0;
}

void sub_1BF09D824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  uint64_t v38;

  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  MEMORY[0x1C3B87100](v38, 0x10B3C40AC51C97CLL);
  if (a31 < 0)
    operator delete(a26);
  if (a37 < 0)
    operator delete(a32);
  MEMORY[0x1C3B86A28](&a38);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void IBINasClient::bootstrap(uint64_t a1, void **a2)
{
  int v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v4 = *(_DWORD *)(a1 + 324);
  if (v4 == 2)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      v6 = std::__shared_weak_count::lock(v5);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)(a1 + 8);
        if (v8)
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 16))(v8, a2);
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
  else if (v4 == 1)
  {
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 368), a2, (uint64_t)a2);
  }
  else
  {
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 48))(a1, a2);
  }
}

void sub_1BF09D9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t IBINasClient::initialize(uint64_t a1, void **a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[5];
  _BYTE v27[48];
  _QWORD v28[5];
  _BYTE v29[48];
  std::string __p;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  _QWORD v35[6];

  v4 = *(_DWORD *)(a1 + 324);
  if (v4 == 1)
  {
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 368), a2, (uint64_t)a2);
  }
  else if (v4 == 2)
  {
    v5 = a1 + 56;
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 64))(a1 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"already initialized", 19);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
  }
  else if (*(_BYTE *)(a1 + 320))
  {
    *(_DWORD *)(a1 + 324) = 2;
    v7 = *(std::__shared_weak_count **)(a1 + 16);
    if (v7)
    {
      v8 = std::__shared_weak_count::lock(v7);
      v35[1] = v8;
      if (v8)
      {
        v9 = v8;
        v10 = *(_QWORD *)(a1 + 8);
        v35[0] = v10;
        if (v10)
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 16))(v10, a2);
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
  }
  else
  {
    v13 = a1 + 56;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 64))(a1 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(a1 + 56, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"initializing IBINasClient", 25);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    memset(v35, 0, sizeof(v35));
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v31, (_QWORD *)(a1 + 296));
    if (v31)
      v15 = v31 + 160;
    else
      v15 = 0;
    v33 = v15;
    v34 = v32;
    v31 = 0;
    v32 = 0;
    LoggableString::LoggableString((LoggableString *)&__p, "ibi.nas.init");
    SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v35, &v33, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v16 = v34;
    if (v34)
    {
      v17 = (unint64_t *)&v34->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = v32;
    if (v32)
    {
      v20 = (unint64_t *)&v32->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    *(_DWORD *)(a1 + 324) = 1;
    v22 = *(_QWORD *)(a1 + 328);
    v23 = MEMORY[0x1E0C809B0];
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 1174405120;
    v28[2] = ___ZN12IBINasClient10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj_block_invoke;
    v28[3] = &__block_descriptor_tmp_51_1;
    v28[4] = a1;
    SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v29, (uint64_t)v35);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
    ice::Client::setEventHandler<void({block_pointer})(void)>(v22, 0, (uint64_t *)&__p);
    v24 = *(_QWORD *)(a1 + 328);
    v26[0] = v23;
    v26[1] = 1174405120;
    v26[2] = ___ZN12IBINasClient10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj_block_invoke_52;
    v26[3] = &__block_descriptor_tmp_53_2;
    v26[4] = a1;
    SipTypedTerminationLock<SipThreadSafeLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v27, (uint64_t)v35);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
    ice::Client::setEventHandler<void({block_pointer})(void)>(v24, 1, (uint64_t *)&__p);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 368), a2, (uint64_t)a2);
    ice::Client::start(*(ice::Client **)(a1 + 328));
    SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock((uint64_t)v27);
    SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock((uint64_t)v29);
    SipTypedTerminationLock<SipThreadSafeLockable>::~SipTypedTerminationLock((uint64_t)v35);
  }
  return 1;
}

void sub_1BF09DD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v37 - 128);
  _Unwind_Resume(a1);
}

void ___ZN12IBINasClient10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj_block_invoke(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;

  v1 = a1[4];
  v3 = a1[9];
  v2 = (std::__shared_weak_count *)a1[10];
  if (!v2)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
  {
LABEL_6:
    if (!v3)
      return;
    goto LABEL_7;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (v3)
LABEL_7:
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 152))(v1);
}

void ___ZN12IBINasClient10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj_block_invoke_52(_QWORD *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;

  v1 = a1[4];
  v3 = a1[9];
  v2 = (std::__shared_weak_count *)a1[10];
  if (!v2)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
  {
LABEL_6:
    if (!v3)
      return;
    goto LABEL_7;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (v3)
LABEL_7:
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 160))(v1);
}

uint64_t IBINasClient::handleClientStarted(IBINasClient *this)
{
  NSObject *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD block[5];

  if (*((_DWORD *)this + 81) == 1)
  {
    *((_DWORD *)this + 81) = 2;
    v2 = *((_QWORD *)this + 6);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN12IBINasClient19handleClientStartedEv_block_invoke;
    block[3] = &__block_descriptor_tmp_54_1;
    block[4] = this;
    dispatch_async(v2, block);
  }
  v4 = *((_QWORD *)this + 7);
  v3 = (char *)this + 56;
  v3[264] = 1;
  v5 = (*(uint64_t (**)(char *))(v4 + 64))(v3);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"IBINasClient started", 20);
  *(_BYTE *)(v5 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  return result;
}

void ___ZN12IBINasClient19handleClientStartedEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::string __p;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v14 = v3;
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(v1 + 8);
      v13 = v5;
      if (v5)
      {
        v6 = *(_QWORD **)(v1 + 368);
        if (v6 != (_QWORD *)(v1 + 376))
        {
          do
          {
            memset(&__p, 0, sizeof(__p));
            if (*((char *)v6 + 55) < 0)
              std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v6[4], v6[5]);
            else
              __p = *(std::string *)(v6 + 4);
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 16))(v5, &__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v7 = (_QWORD *)v6[1];
            if (v7)
            {
              do
              {
                v8 = v7;
                v7 = (_QWORD *)*v7;
              }
              while (v7);
            }
            else
            {
              do
              {
                v8 = (_QWORD *)v6[2];
                v9 = *v8 == (_QWORD)v6;
                v6 = v8;
              }
              while (!v9);
            }
            v6 = v8;
          }
          while (v8 != (_QWORD *)(v1 + 376));
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  std::__tree<std::string>::destroy(v1 + 368, *(char **)(v1 + 376));
  *(_QWORD *)(v1 + 376) = 0;
  *(_QWORD *)(v1 + 384) = 0;
  *(_QWORD *)(v1 + 368) = v1 + 376;
}

void sub_1BF09E0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t IBINasClient::handleClientStopped(IBINasClient *this)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t result;

  v2 = (char *)this + 56;
  v1 = *((_QWORD *)this + 7);
  *((_BYTE *)this + 320) = 0;
  v3 = (*(uint64_t (**)(char *))(v1 + 64))((char *)this + 56);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"IBINasClient stopped", 20);
  *(_BYTE *)(v3 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  return result;
}

uint64_t IBINasClient::deinitialize(uint64_t this)
{
  if (*(_DWORD *)(this + 324) == 2)
    *(_DWORD *)(this + 324) = 0;
  return this;
}

uint64_t (*IBINasClient::callbackForRequest(IBINasClient *this, int a2))()
{
  uint64_t (*v2)();

  v2 = IBINasClient::handleUnknownResponse;
  if (a2 == 679575552)
    v2 = (uint64_t (*)())IBINasClient::handleRequestSsacBarringResp;
  if (a2 == 613548032)
    return (uint64_t (*)())IBINasClient::handleRequestAcbBarringResp;
  else
    return v2;
}

uint64_t IBINasClient::setAccessBarringType(IBINasClient *this)
{
  return (*(uint64_t (**)(IBINasClient *))(*(_QWORD *)this + 128))(this);
}

uint64_t IBINasClient::requestCurrentBarringInfo(uint64_t this)
{
  IBINasClient *v1;
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (IBINasClient *)this;
  if (*(_DWORD *)(this + 324) == 2)
  {
    v2 = *(_QWORD **)(this + 344);
    v3 = (_QWORD *)(this + 352);
    if (v2 != (_QWORD *)(this + 352))
    {
      do
      {
        v4 = *((_DWORD *)v2 + 7);
        v5 = *((_DWORD *)v2 + 8);
        if ((v5 & 2) != 0)
          this = IBINasClient::requestAcbBarringInfo(v1, *((_DWORD *)v2 + 7));
        if ((v5 & 1) != 0)
          this = IBINasClient::requestSsacBarringInfo(v1, v4);
        v6 = (_QWORD *)v2[1];
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = (_QWORD *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (_QWORD *)v2[2];
            v8 = *v7 == (_QWORD)v2;
            v2 = v7;
          }
          while (!v8);
        }
        v2 = v7;
      }
      while (v7 != v3);
    }
  }
  else
  {
    v9 = this + 56;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this + 56) + 64))(this + 56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"IBINasClient not initialized. Don't request barring info.", 57);
    *(_BYTE *)(v10 + 17) = 0;
    this = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
  }
  return this;
}

_QWORD *IBINasClient::getMsgName@<X0>(unsigned int a1@<W1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;

  v4 = Ari::MsgDefById((Ari *)(a1 >> 26));
  v5 = "Unknown";
  if (v4 && *(_QWORD *)(v4 + 48))
    v5 = *(char **)(v4 + 48);
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

uint64_t ___ZN12IBINasClient4sendIN6AriSdk34ARI_IBINetDcSsacBarringInfoReq_SDKEEE9ImsResultRT__block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t *);
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v6 = a1[4];
  v8 = a1[9];
  v7 = (std::__shared_weak_count *)a1[10];
  if (!v7)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v8)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v8)
      return 0;
  }
  v12 = (void (*)(uint64_t, uint64_t, uint64_t *))a1[11];
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v17, (_QWORD *)(v6 + 296));
  v12(a2, a3, &v17);
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return 0;
}

void sub_1BF09E41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBINasClient4sendIN6AriSdk33ARI_IBINetGetAcBarringInfoReq_SDKEEE9ImsResultRT__block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t *);
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v6 = a1[4];
  v8 = a1[9];
  v7 = (std::__shared_weak_count *)a1[10];
  if (!v7)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v8)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v8)
      return 0;
  }
  v12 = (void (*)(uint64_t, uint64_t, uint64_t *))a1[11];
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v17, (_QWORD *)(v6 + 296));
  v12(a2, a3, &v17);
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return 0;
}

void sub_1BF09E520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void LazuliMessageIdHeader::create(const std::string *a1@<X0>, std::string **a2@<X8>)
{
  std::string *v4;
  unint64_t *p_size;
  std::string *v6;
  std::__shared_weak_count *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v4 = (std::string *)operator new(0x70uLL);
  v4->__r_.__value_.__l.__size_ = 0;
  p_size = &v4->__r_.__value_.__l.__size_;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78DA6F0;
  v6 = v4 + 1;
  LazuliStringHeader::LazuliStringHeader(v4 + 1, (const std::string *)"Message-ID", a1);
  v4[4].__r_.__value_.__s.__data_[8] = 1;
  v4[1].__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78DA740;
  v7 = (std::__shared_weak_count *)v4[1].__r_.__value_.__r.__words[2];
  if (v7)
  {
    if (v7->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v8 = __ldxr(p_size);
    while (__stxr(v8 + 1, p_size));
    v9 = &v4->__r_.__value_.__r.__words[2];
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v4[1].__r_.__value_.__l.__size_ = (std::string::size_type)v6;
    v4[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v4;
    std::__shared_weak_count::__release_weak(v7);
  }
  else
  {
    do
      v11 = __ldxr(p_size);
    while (__stxr(v11 + 1, p_size));
    v12 = &v4->__r_.__value_.__r.__words[2];
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v4[1].__r_.__value_.__l.__size_ = (std::string::size_type)v6;
    v4[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v4;
  }
  do
    v14 = __ldaxr(p_size);
  while (__stlxr(v14 - 1, p_size));
  if (!v14)
  {
    (*(void (**)(std::string *))(v4->__r_.__value_.__r.__words[0] + 16))(v4);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
  }
LABEL_14:
  *a2 = v6;
  a2[1] = v4;
}

void sub_1BF09E650(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void LazuliMessageIdHeader::~LazuliMessageIdHeader(void **this)
{
  *this = off_1E78E8B08;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  LazuliHeader::~LazuliHeader(this);
}

{
  *this = off_1E78E8B08;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  LazuliHeader::~LazuliHeader(this);
  JUMPOUT(0x1C3B87100);
}

double LazuliMessageIdHeader::clone@<D0>(LazuliMessageIdHeader *this@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *v4;
  double result;
  __int128 v6;

  v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E78C7FC0;
  LazuliStringHeader::LazuliStringHeader((uint64_t)(v4 + 3), (uint64_t)this);
  v4[3] = off_1E78DA690;
  *((_BYTE *)v4 + 104) = 1;
  *(_QWORD *)&v6 = v4 + 3;
  *((_QWORD *)&v6 + 1) = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v6, v4 + 4, (uint64_t)(v4 + 3));
  result = *(double *)&v6;
  *a2 = v6;
  return result;
}

void sub_1BF09E780(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliMessageIdHeader::create(std::string const&)::HeaderWrapper,std::allocator<LazuliMessageIdHeader::create(std::string const&)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DA6F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliMessageIdHeader::create(std::string const&)::HeaderWrapper,std::allocator<LazuliMessageIdHeader::create(std::string const&)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DA6F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<LazuliMessageIdHeader::create(std::string const&)::HeaderWrapper,std::allocator<LazuliMessageIdHeader::create(std::string const&)::HeaderWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void LazuliMessageIdHeader::create(std::string const&)::HeaderWrapper::~HeaderWrapper(void **this)
{
  *this = off_1E78E8B08;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  LazuliHeader::~LazuliHeader(this);
}

{
  *this = off_1E78E8B08;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  LazuliHeader::~LazuliHeader(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipRequest::SipRequest(uint64_t a1, const std::string *a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a3;
  *(_QWORD *)a1 = off_1E78DA7B8;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 120) = &off_1E78D08F8;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 176) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 184) = a1 + 192;
  *(_BYTE *)(a1 + 209) = 1;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 440) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 448) = a1 + 456;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 480) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 488) = a1 + 496;
  *(_BYTE *)(a1 + 208) = 1;
  *(_WORD *)(a1 + 472) = 257;
  *(_WORD *)(a1 + 512) = 257;
  *(_BYTE *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 112) = &off_1E78BFCE8;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  std::string::operator=((std::string *)(a1 + 88), a2);
  *(_BYTE *)(a1 + 520) = 0;
  return a1;
}

void sub_1BF09E988(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;
  SipUri *v3;
  SipUri *v4;

  v4 = v3;
  SipUri::~SipUri(v4);
  if (v1[111] < 0)
    operator delete(*v2);
  SipMessage::~SipMessage((SipMessage *)v1);
  _Unwind_Resume(a1);
}

void SipRequest::SipRequest(SipRequest *this, const SipRequest *a2)
{
  uint64_t v4;
  SipUri *v5;

  SipMessage::SipMessage(this, a2);
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)v4 = off_1E78DA7B8;
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = &off_1E78BFCE8;
  v5 = (SipUri *)(v4 + 112);
  *(_QWORD *)(v4 + 160) = 0;
  *(_QWORD *)(v4 + 168) = 0;
  *(_QWORD *)(v4 + 120) = &off_1E78D08F8;
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)(v4 + 136) = 0;
  *(_QWORD *)(v4 + 144) = 0;
  *(_WORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 200) = 0;
  *(_QWORD *)(v4 + 192) = 0;
  *(_QWORD *)(v4 + 176) = &off_1E78B82D8;
  *(_QWORD *)(v4 + 184) = v4 + 192;
  *(_BYTE *)(v4 + 209) = 1;
  *(_QWORD *)(v4 + 424) = 0;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 392) = 0u;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 376) = 0u;
  *(_OWORD *)(v4 + 360) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_QWORD *)(v4 + 456) = 0;
  *(_QWORD *)(v4 + 464) = 0;
  *(_QWORD *)(v4 + 440) = &off_1E78B82D8;
  *(_QWORD *)(v4 + 448) = v4 + 456;
  *(_QWORD *)(v4 + 496) = 0;
  *(_QWORD *)(v4 + 504) = 0;
  *(_QWORD *)(v4 + 480) = &off_1E78B82D8;
  *(_QWORD *)(v4 + 488) = v4 + 496;
  *(_BYTE *)(v4 + 208) = 1;
  *(_WORD *)(v4 + 472) = 257;
  *(_WORD *)(v4 + 512) = 257;
  *(_BYTE *)(v4 + 432) = 0;
  std::string::operator=((std::string *)(v4 + 88), (const std::string *)((char *)a2 + 88));
  SipUri::operator=(v5, (uint64_t)a2 + 112);
  *((_BYTE *)this + 520) = *((_BYTE *)a2 + 520);
}

void sub_1BF09EAD0(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;
  SipUri *v3;

  SipUri::~SipUri(v3);
  if (v1[111] < 0)
    operator delete(*v2);
  SipMessage::~SipMessage((SipMessage *)v1);
  _Unwind_Resume(a1);
}

void SipRequest::encodeStartLine(SipRequest *this, ImsOutStream *a2)
{
  const std::string *v4;
  std::string __p;

  v4 = (const std::string *)(*(uint64_t (**)(SipRequest *))(*(_QWORD *)this + 112))(this);
  LoggableString::LoggableString(&__p, v4);
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" ", 1);
  *((_BYTE *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  SipUri::toStream((uint64_t)this + 112, (uint64_t)a2, 1);
  LoggableString::LoggableString((LoggableString *)&__p, " SIP/2.0");
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF09EBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *SipRequest::setCSeq(SipRequest *this, int a2)
{
  std::string *result;
  char *v5;
  const std::string *v6;

  result = (std::string *)SipMessage::header<SipCSeqHeader>(this, 0);
  if (result)
  {
    HIDWORD(result[2].__r_.__value_.__r.__words[1]) = a2;
  }
  else
  {
    v5 = (char *)SipMessage::addHeader<SipCSeqHeader>(this, 0);
    *((_DWORD *)v5 + 15) = a2;
    v6 = (const std::string *)(*(uint64_t (**)(SipRequest *))(*(_QWORD *)this + 112))(this);
    return std::string::operator=((std::string *)(v5 + 64), v6);
  }
  return result;
}

SipHeader *SipMessage::header<SipCSeqHeader>(SipMessage *a1, int a2)
{
  SipHeader *result;

  result = SipMessage::headerWithName(a1, "CSeq", a2);
  if (result)
  return result;
}

void *SipMessage::addHeader<SipCSeqHeader>(SipMessage *a1, int a2)
{
  void *v4;
  SipHeader *v5;
  SipHeader *v6;

  v4 = SipMessageEncodingMap::headerPrototype<SipCSeqHeader>(*((_QWORD **)a1 + 10));
  if (v4
    && (v5 = (SipHeader *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 32))(v4)) != 0
    && (v6 = SipMessage::addHeader(a1, v5, a2)) != 0)
  {
  }
  else
  {
    return 0;
  }
}

uint64_t SipRequest::nextHop(SipRequest *this)
{
  const void *HeaderWithName;
  _QWORD *v3;
  uint64_t v4;

  HeaderWithName = (const void *)SipMessage::firstHeaderWithName((uint64_t)this, (const void **)&SipHeader::kHeaderRoute.__r_.__value_.__l.__data_);
  if (!HeaderWithName)
    return (uint64_t)this + 112;
  if (!v3)
    return (uint64_t)this + 112;
  v4 = v3[9];
  if (v4 == v3[10])
    return 0;
  else
    return *(_QWORD *)v4;
}

BOOL SipRequest::isSessionRefresh(SipRequest *this)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  const char *i;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  BOOL v17;
  _BOOL8 v18;

  v2 = (unsigned __int8 *)(*(uint64_t (**)(SipRequest *))(*(_QWORD *)this + 112))(this);
  v3 = v2[23];
  if ((v3 & 0x80u) == 0)
    v4 = v2[23];
  else
    v4 = *((_QWORD *)v2 + 1);
  if (v4 == 6)
  {
    if ((v3 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v2, "INVITE", *((_QWORD *)v2 + 1)))
        return 1;
    }
    else
    {
      if (!v2[23])
        return 1;
      for (i = "INVITE"; *v2 == *(unsigned __int8 *)i; ++i)
      {
        ++v2;
        if (!--v3)
          return 1;
      }
    }
  }
  v6 = (unsigned __int8 *)(*(uint64_t (**)(SipRequest *))(*(_QWORD *)this + 112))(this);
  v7 = v6[23];
  if ((v7 & 0x80u) == 0)
    v8 = v6[23];
  else
    v8 = *((_QWORD *)v6 + 1);
  if (v8 != 6)
    return 0;
  if ((v7 & 0x80) != 0)
    return memcmp(*(const void **)v6, "UPDATE", *((_QWORD *)v6 + 1)) == 0;
  if (!v6[23])
    return 1;
  v9 = v7 - 1;
  v10 = "UPDATE";
  do
  {
    v12 = *v6++;
    v11 = v12;
    v14 = *(unsigned __int8 *)v10++;
    v13 = v14;
    v16 = v9-- != 0;
    v17 = v11 == v13;
    v18 = v11 == v13;
  }
  while (v17 && v16);
  return v18;
}

SipUri *SipRequest::bestSenderIdentity(uint64_t a1, int a2)
{
  char *v4;
  SipUri *v5;
  _QWORD *v6;
  _QWORD *v7;
  SipUri *v8;
  uint64_t v9;
  SipUri **v10;
  char *v11;
  SipUri *v12;
  BOOL isSipUri;
  char v14;
  char *v15;
  char *v17;
  char *v18;
  uint64_t v19;
  void *__p;
  _QWORD *v21;
  uint64_t v22;

  if (a2 == 3)
  {
    v4 = (char *)SipMessage::header<SipFromHeader>(a1);
    if (v4)
      return (SipUri *)(v4 + 104);
  }
  __p = 0;
  v21 = 0;
  v22 = 0;
  SipMessage::allHeadersWithType<SipPAssertedIdentityHeader>(a1, (uint64_t)&__p);
  v6 = __p;
  v7 = v21;
  if (__p == v21)
    goto LABEL_27;
  v8 = 0;
  v5 = 0;
  do
  {
    v9 = *v6 + 64;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    SipRouteSet::allHops(v9, &v17);
    v10 = (SipUri **)v17;
    v11 = v18;
    if (v17 == v18)
    {
      v14 = 1;
      if (v17)
        goto LABEL_22;
      goto LABEL_23;
    }
    while (1)
    {
      v12 = *v10;
      if (!v5)
        v5 = *v10;
      if (a2 == 1)
      {
        isSipUri = SipUri::isSipUri(*v10);
        goto LABEL_15;
      }
      if (a2 == 2)
        break;
      if (!a2)
        goto LABEL_20;
LABEL_16:
      if (++v10 == (SipUri **)v11)
      {
        v14 = 1;
        v12 = v8;
        goto LABEL_21;
      }
    }
    isSipUri = SipUri::isTelUri(*v10);
LABEL_15:
    if (!isSipUri)
      goto LABEL_16;
LABEL_20:
    v14 = 0;
LABEL_21:
    v10 = (SipUri **)v17;
    v8 = v12;
    if (v17)
    {
LABEL_22:
      v18 = (char *)v10;
      operator delete(v10);
    }
LABEL_23:
    if ((v14 & 1) == 0)
    {
      v5 = v8;
      goto LABEL_31;
    }
    ++v6;
  }
  while (v6 != v7);
  if (!v5 || !SipUri::isValidUri(v5))
  {
LABEL_27:
    v15 = (char *)SipMessage::header<SipFromHeader>(a1);
    if (v15)
      v5 = (SipUri *)(v15 + 104);
    else
      v5 = (SipUri *)SipUri::anonymousUri(0);
  }
LABEL_31:
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_1BF09F00C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SipMessage::allHeadersWithType<SipPAssertedIdentityHeader>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  const void *v11;
  unint64_t v12;
  size_t v13;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;

  v2 = *(_QWORD **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 == v4)
  {
    v26 = v2;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = (_QWORD *)(a2 + 16);
    do
    {
      v10 = *(unsigned __int8 **)(v4 + 8 * v7);
      if ((char)v10[31] < 0)
      {
        v11 = (const void *)*((_QWORD *)v10 + 1);
        v12 = *((_QWORD *)v10 + 2);
      }
      else
      {
        v11 = v10 + 8;
        v12 = v10[31];
      }
      if (v12 >= 0x13)
        v13 = 19;
      else
        v13 = v12;
      if (!memcmp(v11, "P-Asserted-Identity", v13) && v12 == 19)
      {
        v16 = v15;
        if ((unint64_t)v2 >= *v9)
        {
          v17 = ((uint64_t)v2 - *(_QWORD *)a2) >> 3;
          if ((unint64_t)(v17 + 1) >> 61)
            std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
          v18 = *v9 - *(_QWORD *)a2;
          v19 = v18 >> 2;
          if (v18 >> 2 <= (unint64_t)(v17 + 1))
            v19 = v17 + 1;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v19;
          if (v20)
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)v9, v20);
          else
            v21 = 0;
          v22 = &v21[8 * v17];
          *(_QWORD *)v22 = v16;
          v2 = v22 + 8;
          v24 = *(_QWORD **)a2;
          v23 = *(_QWORD **)(a2 + 8);
          if (v23 != *(_QWORD **)a2)
          {
            do
            {
              v25 = *--v23;
              *((_QWORD *)v22 - 1) = v25;
              v22 -= 8;
            }
            while (v23 != v24);
            v23 = *(_QWORD **)a2;
          }
          *(_QWORD *)a2 = v22;
          *(_QWORD *)(a2 + 8) = v2;
          *(_QWORD *)(a2 + 16) = &v21[8 * v20];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *v2++ = v15;
        }
        *(_QWORD *)(a2 + 8) = v2;
        v4 = *(_QWORD *)(a1 + 8);
        v3 = *(_QWORD *)(a1 + 16);
      }
      v7 = ++v8;
    }
    while (v8 < (unint64_t)((v3 - v4) >> 3));
    v26 = *(_QWORD **)a2;
  }
  return v26 != v2;
}

void SipRequest::bestSenderName(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, std::string *a4@<X8>)
{
  char *v8;
  const std::string::value_type **v9;
  __int128 v10;
  std::string::size_type v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  std::string::size_type size;
  BOOL isSipUri;
  char v20;
  std::string::size_type v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void *__p;
  _QWORD *v27;
  uint64_t v28;
  std::string v29;

  memset(&v29, 0, sizeof(v29));
  if (a2 == 3)
  {
    v8 = (char *)SipMessage::header<SipFromHeader>(a1);
    if (v8)
    {
      v9 = (const std::string::value_type **)(v8 + 304);
      if (v8[327] < 0)
      {
        v11 = *((_QWORD *)v8 + 39);
        if (v11)
        {
          std::string::__init_copy_ctor_external(a4, *v9, v11);
          goto LABEL_44;
        }
      }
      else if (v8[327])
      {
        v10 = *(_OWORD *)v9;
        a4->__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 40);
        *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v10;
        goto LABEL_44;
      }
    }
  }
  __p = 0;
  v27 = 0;
  v28 = 0;
  SipMessage::allHeadersWithType<SipPAssertedIdentityHeader>(a1, (uint64_t)&__p);
  v12 = __p;
  v13 = v27;
LABEL_9:
  if (v12 != v13)
  {
    v14 = *v12 + 64;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    SipRouteSet::allHops(v14, &v23);
    v15 = v23;
    v16 = v24;
    if (v23 == v24)
    {
      v20 = 1;
      if (v23)
        goto LABEL_32;
      goto LABEL_33;
    }
    while (1)
    {
      v17 = *(_QWORD *)v15;
      if (*(char *)(*(_QWORD *)v15 + 223) < 0)
      {
        if (!*(_QWORD *)(v17 + 208))
          goto LABEL_26;
      }
      else if (!*(_BYTE *)(*(_QWORD *)v15 + 223))
      {
        goto LABEL_26;
      }
      size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v29.__r_.__value_.__l.__size_;
      if (!size)
        std::string::operator=(&v29, (const std::string *)(v17 + 200));
      switch(a2)
      {
        case 1:
          isSipUri = SipUri::isSipUri((SipUri *)v17);
          break;
        case 2:
          isSipUri = SipUri::isTelUri((SipUri *)v17);
          break;
        case 0:
          goto LABEL_30;
        default:
          goto LABEL_26;
      }
      if (isSipUri)
      {
LABEL_30:
        v20 = 0;
        *a4 = v29;
        memset(&v29, 0, sizeof(v29));
LABEL_31:
        v15 = v23;
        if (v23)
        {
LABEL_32:
          v24 = v15;
          operator delete(v15);
        }
LABEL_33:
        if ((v20 & 1) == 0)
          goto LABEL_42;
        ++v12;
        goto LABEL_9;
      }
LABEL_26:
      v15 += 8;
      if (v15 == v16)
      {
        v20 = 1;
        goto LABEL_31;
      }
    }
  }
  v21 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v21 = v29.__r_.__value_.__l.__size_;
  if (!v21 && (a3 & 1) == 0)
  {
    v22 = (char *)SipMessage::header<SipFromHeader>(a1);
    if (v22)
      std::string::operator=(&v29, (const std::string *)(v22 + 304));
  }
  *a4 = v29;
  memset(&v29, 0, sizeof(v29));
LABEL_42:
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
LABEL_44:
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_1BF09F40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

BOOL SipRequest::canUpdateOutboundViaHeader(SipRequest *this)
{
  const void **v1;
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  __int128 *v6;
  uint64_t v7;
  const char *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  BOOL v15;
  _BOOL4 v16;

  v1 = (const void **)((char *)this + 88);
  v2 = *((unsigned __int8 *)this + 111);
  v3 = *((_QWORD *)this + 12);
  if ((v2 & 0x80u) == 0)
    v4 = *((unsigned __int8 *)this + 111);
  else
    v4 = *((_QWORD *)this + 12);
  if (v4 != 6)
  {
    if (v4 == 3)
    {
      if ((v2 & 0x80) == 0)
      {
        if (*((_BYTE *)this + 111))
        {
          v6 = &SipRequest::kMethodAck;
          while (*(unsigned __int8 *)v1 == *(unsigned __int8 *)v6)
          {
            v1 = (const void **)((char *)v1 + 1);
            v6 = (__int128 *)((char *)v6 + 1);
            if (!--v2)
              goto LABEL_24;
          }
          goto LABEL_23;
        }
LABEL_24:
        v16 = *((_BYTE *)this + 520) != 0;
        return !v16;
      }
      if (!memcmp(*v1, &SipRequest::kMethodAck, v3))
        goto LABEL_24;
    }
LABEL_23:
    v16 = 0;
    return !v16;
  }
  if ((v2 & 0x80) != 0)
  {
    v16 = memcmp(*v1, "CANCEL", v3) == 0;
  }
  else if (*((_BYTE *)this + 111))
  {
    v7 = v2 - 1;
    v8 = "CANCEL";
    do
    {
      v10 = *(unsigned __int8 *)v1;
      v1 = (const void **)((char *)v1 + 1);
      v9 = v10;
      v12 = *(unsigned __int8 *)v8++;
      v11 = v12;
      v14 = v7-- != 0;
      v15 = v9 == v11;
      v16 = v9 == v11;
    }
    while (v15 && v14);
  }
  else
  {
    v16 = 1;
  }
  return !v16;
}

double SipRequest::updateInboundViaHeader@<D0>(SipMessage *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  SipHeader *HeaderWith;
  SipViaHop **v6;
  SipViaHop *v7;
  uint64_t v8;
  const ImsResult *v9;
  double result;
  char v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void (**v15)(ImsResult *__hidden);
  uint64_t *v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  HeaderWith = SipMessage::firstHeaderWithType<SipViaHeader>(a1, 0);
  if (!HeaderWith
    || (v6 = (SipViaHop **)*((_QWORD *)HeaderWith + 8), v6 == *((SipViaHop ***)HeaderWith + 9))
    || (v7 = *v6) == 0)
  {
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v15 = &off_1E78B7238;
    v16 = &_bambiDomain;
    v17 = 1073741828;
    v9 = (const ImsResult *)ImsResult::operator<<<char [19]>((uint64_t)&v15, "invalid Via header");
    ImsResult::ImsResult((ImsResult *)a3, v9);
    ImsResult::~ImsResult((ImsResult *)&v15);
    return result;
  }
  if (!SipViaHop::supportsRport(*v6))
  {
    if (*((char *)v7 + 39) < 0)
    {
      if (*((_QWORD *)v7 + 3))
        goto LABEL_17;
    }
    else if (*((_BYTE *)v7 + 39))
    {
      goto LABEL_17;
    }
    SipHost::address((SipViaHop *)((char *)v7 + 8), &v15);
    v11 = (*((uint64_t (**)(void (**)(ImsResult *__hidden), uint64_t *, _QWORD))*v15 + 13))(v15, a2, 0);
    v12 = (std::__shared_weak_count *)v16;
    if (v16)
    {
      v13 = (unint64_t *)(v16 + 1);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if ((v11 & 1) != 0)
      goto LABEL_18;
    goto LABEL_17;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 56))(*a2);
  SipViaHop::setRport(v7, v8);
LABEL_17:
  SipViaHop::setReceived((uint64_t)v7, a2);
LABEL_18:
  result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

void sub_1BF09F6EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SipRequest::validate(SipRequest *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 *v16;
  const ImsResult *v17;
  _QWORD v18[2];
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = 0;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  SipMessage::validate(this, (uint64_t)&v23);
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v23 + 1) + 24))(*((_QWORD *)&v23 + 1), v24))
  {
    ImsResult::ImsResult(a2, (uint64_t)&v23);
    goto LABEL_26;
  }
  v4 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)this);
  if (v4)
    v5 = (__int128 *)(v4 + 64);
  else
    v5 = &ims::kEmptyString;
  v6 = (*(uint64_t (**)(SipRequest *))(*(_QWORD *)this + 112))(this);
  v7 = *((unsigned __int8 *)v5 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = *((unsigned __int8 *)v5 + 23);
  else
    v8 = *((_QWORD *)v5 + 1);
  v9 = *(unsigned __int8 *)(v6 + 23);
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(v6 + 8);
  if (v8 == v9)
  {
    if (v10 >= 0)
      v11 = (unsigned __int8 *)v6;
    else
      v11 = *(unsigned __int8 **)v6;
    if ((v7 & 0x80) == 0)
    {
      if (*((_BYTE *)v5 + 23))
      {
        while (*(unsigned __int8 *)v5 == *v11)
        {
          v5 = (__int128 *)((char *)v5 + 1);
          ++v11;
          if (!--v7)
            goto LABEL_25;
        }
        goto LABEL_21;
      }
LABEL_25:
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_OWORD *)(a2 + 56) = 0u;
      *(_QWORD *)a2 = &off_1E78B7238;
      *(_QWORD *)(a2 + 8) = &_bambiDomain;
      *(_DWORD *)(a2 + 16) = 0;
      goto LABEL_26;
    }
    if (!memcmp(*(const void **)v5, v11, *((_QWORD *)v5 + 1)))
      goto LABEL_25;
  }
LABEL_21:
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v18[0] = &off_1E78B7238;
  v18[1] = &_bambiDomain;
  v19 = 1073741828;
  v12 = (*(uint64_t (**)(SipRequest *))(*(_QWORD *)this + 112))(this);
  v13 = ImsResult::operator<<<std::string>((uint64_t)v18, v12);
  v14 = ImsResult::operator<<<char [26]>(v13, " request has CSeq method ");
  v15 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)this);
  if (v15)
    v16 = (__int128 *)(v15 + 64);
  else
    v16 = &ims::kEmptyString;
  v17 = (const ImsResult *)ImsResult::operator<<<std::string>(v14, (uint64_t)v16);
  ImsResult::ImsResult((ImsResult *)a2, v17);
  ImsResult::~ImsResult((ImsResult *)v18);
LABEL_26:
  ImsResult::~ImsResult((ImsResult *)&v23);
}

void sub_1BF09F8DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  ImsResult::~ImsResult((ImsResult *)va);
  ImsResult::~ImsResult((ImsResult *)va1);
  _Unwind_Resume(a1);
}

uint64_t SipRequest::needsDefaultRoute(SipRequest *this)
{
  uint64_t v2;
  uint64_t v3;
  const void **v4;
  const char *i;
  uint64_t result;
  unsigned __int8 *v7;

  v2 = *((unsigned __int8 *)this + 111);
  if ((v2 & 0x80u) == 0)
    v3 = *((unsigned __int8 *)this + 111);
  else
    v3 = *((_QWORD *)this + 12);
  if (v3 == 8)
  {
    v4 = (const void **)((char *)this + 88);
    if ((v2 & 0x80) != 0)
    {
      result = memcmp(*v4, "REGISTER", *((_QWORD *)this + 12));
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      if (!*((_BYTE *)this + 111))
        return 0;
      for (i = "REGISTER"; *(unsigned __int8 *)v4 == *(unsigned __int8 *)i; ++i)
      {
        v4 = (const void **)((char *)v4 + 1);
        if (!--v2)
          return 0;
      }
    }
  }
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)this + 4, (unsigned __int8 *)&SipHeader::kHeaderRoute);
  return !v7 || *((_QWORD *)v7 + 5) == 0;
}

SipRequest *SipRequest::createMatchingRequest(uint64_t a1, const std::string *a2)
{
  SipRequest *RequestFromTemplate;
  uint64_t v4;
  uint64_t v5;
  const void **v7;
  const char *v8;
  char *v10;
  const std::string *v11;
  SipHeader *v12;
  _DWORD *v13;
  int v14;
  SipHeader *v15;
  void *HeaderWith;
  const SipViaHop **v17;
  const SipViaHop *v18;
  SipViaHop *v19;
  SipHeader *v20;
  SipViaHop *v21;

  RequestFromTemplate = *(SipRequest **)(a1 + 80);
  if (!RequestFromTemplate)
    return RequestFromTemplate;
  v4 = *(unsigned __int8 *)(a1 + 111);
  if ((v4 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(a1 + 111);
  else
    v5 = *(_QWORD *)(a1 + 96);
  if (v5 != 6)
    return 0;
  v7 = (const void **)(a1 + 88);
  if ((v4 & 0x80) == 0)
  {
    if (*(_BYTE *)(a1 + 111))
    {
      v8 = "INVITE";
      while (*(unsigned __int8 *)v7 == *(unsigned __int8 *)v8)
      {
        v7 = (const void **)((char *)v7 + 1);
        ++v8;
        if (!--v4)
          goto LABEL_15;
      }
      return 0;
    }
    goto LABEL_15;
  }
  if (memcmp(*v7, "INVITE", *(_QWORD *)(a1 + 96)))
    return 0;
LABEL_15:
  RequestFromTemplate = SipMessageEncodingMap::createRequestFromTemplate(RequestFromTemplate, a2, 0, 0);
  SipUri::operator=((SipRequest *)((char *)RequestFromTemplate + 112), a1 + 112);
  v10 = (char *)SipMessage::header<SipCallIdHeader>(a1);
  if (v10)
    v11 = (const std::string *)(v10 + 64);
  else
    v11 = (const std::string *)&ims::kEmptyString;
  v12 = SipMessage::header<SipCallIdHeader>(RequestFromTemplate, 1);
  std::string::operator=((std::string *)((char *)v12 + 64), v11);
  SipMessage::copyHeaderFromMessage(RequestFromTemplate, a1, (uint64_t)&SipHeader::kHeaderFrom);
  SipMessage::copyHeaderFromMessage(RequestFromTemplate, a1, (uint64_t)&SipHeader::kHeaderRoute);
  v13 = SipMessage::header<SipCSeqHeader>(a1);
  if (v13)
    v14 = v13[15];
  else
    v14 = 0;
  v15 = SipMessage::header<SipCSeqHeader>(RequestFromTemplate, 1);
  *((_DWORD *)v15 + 15) = v14;
  std::string::operator=((std::string *)((char *)v15 + 64), a2);
  HeaderWith = SipMessage::firstHeaderWithType<SipViaHeader>(a1);
  if (HeaderWith)
  {
    v17 = (const SipViaHop **)*((_QWORD *)HeaderWith + 8);
    if (v17 != *((const SipViaHop ***)HeaderWith + 9))
    {
      v18 = *v17;
      if (*v17)
      {
        v19 = (SipViaHop *)operator new();
        SipViaHop::SipViaHop(v19, v18);
        v20 = SipMessage::firstHeaderWithType<SipViaHeader>(RequestFromTemplate, 1);
        v21 = v19;
        std::vector<SipViaHop *>::insert((char **)v20 + 8, *((char **)v20 + 8), (char *)&v21);
      }
    }
  }
  return RequestFromTemplate;
}

void sub_1BF09FB70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C4006157D98);
  _Unwind_Resume(a1);
}

SipRequest *SipRequest::createMatchingCancel(SipRequest *this)
{
  SipRequest *MatchingRequest;
  SipRequest *v3;

  MatchingRequest = SipRequest::createMatchingRequest((uint64_t)this, (const std::string *)"CANCEL");
  v3 = MatchingRequest;
  if (MatchingRequest)
    SipMessage::copyHeaderFromMessage(MatchingRequest, (uint64_t)this, (uint64_t)SipHeader::kHeaderTo);
  return v3;
}

SipRequest *SipRequest::createMatchingAckForResponse(SipRequest *this, const SipResponse *a2)
{
  SipRequest *MatchingRequest;
  SipRequest *v4;

  MatchingRequest = SipRequest::createMatchingRequest((uint64_t)this, (const std::string *)&SipRequest::kMethodAck);
  v4 = MatchingRequest;
  if (MatchingRequest)
  {
    *((_BYTE *)MatchingRequest + 520) = 1;
    SipMessage::copyHeaderFromMessage(MatchingRequest, (uint64_t)a2, (uint64_t)SipHeader::kHeaderTo);
  }
  return v4;
}

uint64_t SipRequest::identityTypeFromString(uint64_t a1)
{
  const char *v2;
  int v3;
  void *v4;
  const char *v5;
  int v6;
  int v7;
  const char *v8;
  int v9;
  void *v10;
  const char *v11;
  int v12;
  int v13;
  const char *v14;
  int v15;
  void *v16;
  const char *v17;
  int v18;
  int v19;
  const char *v20;
  int v21;
  void *v22;
  const char *v23;
  int v24;
  _QWORD v26[2];
  char v27;

  std::string::basic_string[abi:ne180100]<0>(v26, "first");
  if (*(char *)(a1 + 23) >= 0)
    v2 = (const char *)a1;
  else
    v2 = *(const char **)a1;
  v3 = v27;
  v4 = (void *)v26[0];
  if (v27 >= 0)
    v5 = (const char *)v26;
  else
    v5 = (const char *)v26[0];
  v6 = strcasecmp(v2, v5);
  v7 = v6;
  if ((v3 & 0x80000000) == 0)
  {
    if (v6)
      goto LABEL_9;
    return 0;
  }
  operator delete(v4);
  if (!v7)
    return 0;
LABEL_9:
  std::string::basic_string[abi:ne180100]<0>(v26, "tel");
  if (*(char *)(a1 + 23) >= 0)
    v8 = (const char *)a1;
  else
    v8 = *(const char **)a1;
  v9 = v27;
  v10 = (void *)v26[0];
  if (v27 >= 0)
    v11 = (const char *)v26;
  else
    v11 = (const char *)v26[0];
  v12 = strcasecmp(v8, v11);
  v13 = v12;
  if ((v9 & 0x80000000) == 0)
  {
    if (v12)
      goto LABEL_17;
    return 2;
  }
  operator delete(v10);
  if (!v13)
    return 2;
LABEL_17:
  std::string::basic_string[abi:ne180100]<0>(v26, "sip");
  if (*(char *)(a1 + 23) >= 0)
    v14 = (const char *)a1;
  else
    v14 = *(const char **)a1;
  v15 = v27;
  v16 = (void *)v26[0];
  if (v27 >= 0)
    v17 = (const char *)v26;
  else
    v17 = (const char *)v26[0];
  v18 = strcasecmp(v14, v17);
  v19 = v18;
  if (v15 < 0)
  {
    operator delete(v16);
    if (v19)
      goto LABEL_25;
    return 1;
  }
  if (!v18)
    return 1;
LABEL_25:
  std::string::basic_string[abi:ne180100]<0>(v26, "from");
  if (*(char *)(a1 + 23) >= 0)
    v20 = (const char *)a1;
  else
    v20 = *(const char **)a1;
  v21 = v27;
  v22 = (void *)v26[0];
  if (v27 >= 0)
    v23 = (const char *)v26;
  else
    v23 = (const char *)v26[0];
  v24 = strcasecmp(v20, v23);
  if (v21 < 0)
    operator delete(v22);
  if (v24)
    return 2;
  else
    return 3;
}

void SipRequest::~SipRequest(void **this)
{
  *this = off_1E78DA7B8;
  SipUri::~SipUri((SipUri *)(this + 14));
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  SipMessage::~SipMessage((SipMessage *)this);
}

{
  *this = off_1E78DA7B8;
  SipUri::~SipUri((SipUri *)(this + 14));
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  SipMessage::~SipMessage((SipMessage *)this);
  JUMPOUT(0x1C3B87100);
}

ImsOutStream *SipMessage::log(SipMessage *this, ImsOutStream *a2)
{
  SipMessage::encode(this, a2);
  return a2;
}

void SipMessage::loggableName(SipMessage *this@<X0>, std::string *a2@<X8>)
{
  std::string __p;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)this + 48))(&__p);
  LoggableString::LoggableString(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF09FEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

SipRequest *SipRequest::clone(SipRequest *this)
{
  SipRequest *v2;

  v2 = (SipRequest *)operator new();
  SipRequest::SipRequest(v2, this);
  return v2;
}

void sub_1BF09FF1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10F3C40979C6A35);
  _Unwind_Resume(a1);
}

uint64_t SipMessage::resultDescription(SipMessage *this)
{
  return (*(uint64_t (**)(SipMessage *))(*(_QWORD *)this + 48))(this);
}

void SipRequest::debugStr(SipRequest *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 111) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 11), *((_QWORD *)this + 12));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 13);
  }
}

uint64_t SipRequest::longDebugStr(SipRequest *this)
{
  return (*(uint64_t (**)(SipRequest *))(*(_QWORD *)this + 48))(this);
}

uint64_t SipRequest::method(SipRequest *this)
{
  return (uint64_t)this + 88;
}

void *SipMessageEncodingMap::headerPrototype<SipCSeqHeader>(_QWORD *a1)
{
  void *result;

  result = (void *)SipMessageEncodingMap::headerPrototypeWithName(a1, (uint64_t)"CSeq");
  if (result)
  return result;
}

uint64_t ImsLogDestinationFile::ImsLogDestinationFile(uint64_t a1, uint64_t a2, int a3, char a4)
{
  void **v8;
  std::string *v9;
  int v10;
  char *v11;
  int64_t v12;
  char *v13;
  void *v14;
  char *v15;
  std::string::size_type v16;
  std::string v18;
  char v19;

  *(_DWORD *)(a1 + 16) = 8;
  *(_QWORD *)a1 = &off_1E78DA888;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v8 = (void **)(a1 + 24);
  *(_OWORD *)(a1 + 40) = 0u;
  v9 = (std::string *)(a1 + 48);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 81) = 0u;
  *(_BYTE *)(a1 + 97) = 1;
  *(_QWORD *)(a1 + 104) = 0;
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)a2);
  std::string::operator=(v9, (const std::string *)a2);
  *(_BYTE *)(a1 + 96) = a3;
  *(_BYTE *)(a1 + 97) = a4;
  *(_QWORD *)(a1 + 104) = 0;
  if (a3)
  {
    v10 = *(char *)(a2 + 23);
    v11 = v10 >= 0 ? (char *)a2 : *(char **)a2;
    v12 = v10 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
    if (v12 >= 1)
    {
      v13 = &v11[v12];
      v14 = v11;
      do
      {
        v15 = (char *)memchr(v14, 58, v12);
        if (!v15)
          break;
        if (*v15 == 58)
        {
          if (v15 != v13)
          {
            v16 = v15 - v11;
            if (v16 != -1)
            {
              std::string::basic_string(&v18, (const std::string *)a2, 0, v16, (std::allocator<char> *)&v19);
              if (*(char *)(a1 + 47) < 0)
                operator delete(*v8);
              *(std::string *)v8 = v18;
              std::string::basic_string(&v18, (const std::string *)a2, v16 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v19);
              if (*(char *)(a1 + 71) < 0)
                operator delete(v9->__r_.__value_.__l.__data_);
              *v9 = v18;
            }
          }
          return a1;
        }
        v14 = v15 + 1;
        v12 = v13 - (_BYTE *)v14;
      }
      while (v13 - (_BYTE *)v14 >= 1);
    }
  }
  return a1;
}

void sub_1BF0A0148(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*(void **)(v1 + 72));
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogDestinationFile::createFromString(int a1, std::string *this)
{
  std::string::size_type size;
  uint64_t v4;
  std::string::size_type v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string __p;
  char v10;

  if (std::string::compare(this, 0, 5uLL, "file:"))
    goto LABEL_9;
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if (size >= 6)
  {
    v4 = operator new();
    std::string::basic_string(&__p, this, 5uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v10);
    ImsLogDestinationFile::ImsLogDestinationFile(v4, (uint64_t)&__p, 0, 1);
  }
  else
  {
    if (std::string::compare(this, 0, 8uLL, "symfile:"))
      goto LABEL_14;
LABEL_9:
    v5 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v5 & 0x80u) != 0)
      v5 = this->__r_.__value_.__l.__size_;
    if (v5 >= 9)
    {
      v4 = operator new();
      std::string::basic_string(&__p, this, 8uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v10);
      ImsLogDestinationFile::ImsLogDestinationFile(v4, (uint64_t)&__p, 1, 1);
    }
    else
    {
      if (std::string::compare(this, 0, 0xCuLL, "global-file:"))
        goto LABEL_16;
LABEL_14:
      v6 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v6 & 0x80u) != 0)
        v6 = this->__r_.__value_.__l.__size_;
      if (v6 >= 0xD)
      {
        v4 = operator new();
        std::string::basic_string(&__p, this, 0xCuLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v10);
        ImsLogDestinationFile::ImsLogDestinationFile(v4, (uint64_t)&__p, 0, 0);
      }
      else
      {
LABEL_16:
        v4 = 0;
        if (std::string::compare(this, 0, 0xFuLL, "global-symfile:"))
          return v4;
        v7 = HIBYTE(this->__r_.__value_.__r.__words[2]);
        if ((v7 & 0x80u) != 0)
          v7 = this->__r_.__value_.__l.__size_;
        if (v7 < 0x10)
          return 0;
        v4 = operator new();
        std::string::basic_string(&__p, this, 0xFuLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v10);
        ImsLogDestinationFile::ImsLogDestinationFile(v4, (uint64_t)&__p, 1, 0);
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF0A03DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1C3B87100](v14, 0x10B3C40919B9137);
  _Unwind_Resume(a1);
}

BOOL ImsLogDestinationFile::initialize(ImsLogDestinationFile *this)
{
  uint64_t v2;
  const char *v3;
  tm *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  void **v15;
  int v16;
  BOOL v17;
  char *v18;
  std::string::size_type v19;
  char *v20;
  int v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *p_p;
  std::string::size_type size;
  std::string *v28;
  std::string::size_type v29;
  char v30;
  uint64_t v31;
  void *v32;
  int v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  std::string *v36;
  std::string::size_type v37;
  char v38;
  std::string::size_type v39;
  const char *v40;
  _QWORD *v41;
  _QWORD *v42;
  std::string __p;
  void *v45[2];
  unsigned __int8 v46;
  std::string v47;
  _OWORD v48[4];
  void *v49[2];
  __int128 v50;
  __int128 v51;
  _OWORD v52[9];
  uint64_t v53;
  tm v54;
  time_t v55;
  char v56;
  std::string v57;
  _QWORD v58[3];

  v58[2] = *MEMORY[0x1E0C80C00];
  if (*((char *)this + 47) < 0)
  {
    v2 = *((_QWORD *)this + 4);
    if (!v2)
      return v2 != 0;
  }
  else
  {
    v2 = *((unsigned __int8 *)this + 47);
    if (!*((_BYTE *)this + 47))
      return v2 != 0;
  }
  v3 = (char *)this + 24;
  if (*((_BYTE *)this + 96))
  {
    v55 = time(0);
    memset(&v54, 0, sizeof(v54));
    ims::localtime((ims *)&v55, &v54, v4);
    v53 = 0;
    v51 = 0u;
    memset(v52, 0, sizeof(v52));
    *(_OWORD *)v49 = 0u;
    v50 = 0u;
    memset(v48, 0, sizeof(v48));
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v48);
    v47.__r_.__value_.__s.__data_[0] = 48;
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v48, (char *)&v47);
    v47.__r_.__value_.__s.__data_[0] = 45;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)&v47, 1);
    v5 = (_QWORD *)std::ostream::operator<<();
    v47.__r_.__value_.__s.__data_[0] = 45;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v47, 1);
    *(_QWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 24) = 2;
    v7 = (_QWORD *)std::ostream::operator<<();
    v47.__r_.__value_.__s.__data_[0] = 45;
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v47, 1);
    *(_QWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 24) = 2;
    v9 = (_QWORD *)std::ostream::operator<<();
    v47.__r_.__value_.__s.__data_[0] = 45;
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v47, 1);
    *(_QWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 24) = 2;
    v11 = (_QWORD *)std::ostream::operator<<();
    v47.__r_.__value_.__s.__data_[0] = 45;
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v47, 1);
    *(_QWORD *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 24) = 2;
    v13 = (_QWORD *)std::ostream::operator<<();
    v47.__r_.__value_.__s.__data_[0] = 45;
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v47, 1);
    *(_QWORD *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 24) = 2;
    std::ostream::operator<<();
    v15 = (void **)((char *)this + 72);
    v16 = *((char *)this + 71);
    v17 = v16 < 0;
    if (v16 >= 0)
      v18 = (char *)this + 48;
    else
      v18 = (char *)*((_QWORD *)this + 6);
    if (v17)
      v19 = *((_QWORD *)this + 7);
    else
      v19 = *((unsigned __int8 *)this + 71);
    if (v19)
    {
      v20 = v18 - 1;
      while (v19)
      {
        v21 = v20[v19--];
        if (v21 == 46)
        {
          if (v19 == -1)
            break;
          std::string::basic_string(&v57, (const std::string *)this + 2, 0, v19, (std::allocator<char> *)v45);
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v48 + 8, v45);
          if ((v46 & 0x80u) == 0)
            v22 = v45;
          else
            v22 = (void **)v45[0];
          if ((v46 & 0x80u) == 0)
            v23 = v46;
          else
            v23 = (std::string::size_type)v45[1];
          v24 = std::string::append(&v57, (const std::string::value_type *)v22, v23);
          v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v47.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string(&__p, (const std::string *)this + 2, v19, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v56);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          v28 = std::string::append(&v47, (const std::string::value_type *)p_p, size);
          v29 = v28->__r_.__value_.__r.__words[0];
          v58[0] = v28->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v58 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
          v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          if (*((char *)this + 95) < 0)
            operator delete(*v15);
          v31 = v58[0];
          *((_QWORD *)this + 9) = v29;
          *((_QWORD *)this + 10) = v31;
          *(_QWORD *)((char *)this + 87) = *(_QWORD *)((char *)v58 + 7);
          *((_BYTE *)this + 95) = v30;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v47.__r_.__value_.__l.__data_);
          if ((char)v46 < 0)
            operator delete(v45[0]);
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          {
            v32 = (void *)v57.__r_.__value_.__r.__words[0];
            goto LABEL_49;
          }
          goto LABEL_50;
        }
      }
    }
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v48 + 8, &v47);
    v33 = *((char *)this + 71);
    if (v33 >= 0)
      v34 = (char *)this + 48;
    else
      v34 = (const std::string::value_type *)*((_QWORD *)this + 6);
    if (v33 >= 0)
      v35 = *((unsigned __int8 *)this + 71);
    else
      v35 = *((_QWORD *)this + 7);
    v36 = std::string::insert(&v47, 0, v34, v35);
    v37 = v36->__r_.__value_.__r.__words[0];
    v57.__r_.__value_.__r.__words[0] = v36->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v36->__r_.__value_.__r.__words[1] + 7);
    v38 = HIBYTE(v36->__r_.__value_.__r.__words[2]);
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if (*((char *)this + 95) < 0)
      operator delete(*v15);
    v39 = v57.__r_.__value_.__r.__words[0];
    *((_QWORD *)this + 9) = v37;
    *((_QWORD *)this + 10) = v39;
    *(_QWORD *)((char *)this + 87) = *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words + 7);
    *((_BYTE *)this + 95) = v38;
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    {
      v32 = (void *)v47.__r_.__value_.__r.__words[0];
LABEL_49:
      operator delete(v32);
    }
LABEL_50:
    *(_QWORD *)&v48[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v48 + *(_QWORD *)(*(_QWORD *)&v48[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    *((_QWORD *)&v48[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (SHIBYTE(v50) < 0)
      operator delete(v49[1]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C3B8707C](v52);
    v40 = (char *)this + 24;
    if (*((char *)this + 47) < 0)
      v40 = *(const char **)v3;
    unlink(v40);
    v41 = (_QWORD *)operator new();
    std::ofstream::basic_ofstream(v41);
    *((_QWORD *)this + 13) = v41;
    if (*((char *)this + 95) < 0)
      v15 = (void **)*v15;
    if (*((char *)this + 47) < 0)
      v3 = *(const char **)v3;
    symlink((const char *)v15, v3);
  }
  else
  {
    std::string::operator=((std::string *)this + 3, (const std::string *)this + 1);
    v42 = (_QWORD *)operator new();
    std::ofstream::basic_ofstream(v42);
    *((_QWORD *)this + 13) = v42;
  }
  return v2 != 0;
}

void sub_1BF0A096C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v28 - 105) < 0)
    operator delete(*(void **)(v28 - 128));
  std::ostringstream::~ostringstream((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void ImsLogDestinationFile::~ImsLogDestinationFile(ImsLogDestinationFile *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E78DA888;
  v2 = *((_QWORD *)this + 13);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

{
  ImsLogDestinationFile::~ImsLogDestinationFile(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t ImsLogDestinationFile::output(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  size_t v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  _QWORD *v25;
  size_t v26;
  _QWORD *v27;
  const std::locale::facet *v28;
  std::locale v30;

  if (*(char *)(a4 + 23) >= 0)
    v8 = *(unsigned __int8 *)(a4 + 23);
  else
    v8 = *(_QWORD *)(a4 + 8);
  v9 = *(_QWORD **)(a1 + 104);
  v10 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v11 = v10;
  }
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, a2, v11);
  if ((a3 - 3) > 5)
    v13 = "?";
  else
    v13 = off_1E78DA8C0[a3 - 3];
  v14 = strlen(v13);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
  if (v8)
  {
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"[", 1);
    v17 = *(char *)(a4 + 23);
    if (v17 >= 0)
      v18 = a4;
    else
      v18 = *(_QWORD *)a4;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(a4 + 23);
    else
      v19 = *(_QWORD *)(a4 + 8);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"]: ", 3);
    v22 = strlen(a5);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)a5, v22);
    std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
    v24 = std::locale::use_facet(&v30, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  }
  else
  {
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
    v26 = strlen(a5);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)a5, v26);
    std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(_QWORD *)(*v27 - 24)));
    v28 = std::locale::use_facet(&v30, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
  }
  std::locale::~locale(&v30);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_1BF0A0CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void ImsLogDestinationFile::dumpToPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD v5[4];
  uint64_t v6;

  if (*(_BYTE *)(a1 + 97))
  {
    if (*(char *)(a1 + 95) < 0)
    {
      if (!*(_QWORD *)(a1 + 80))
        return;
    }
    else if (!*(_BYTE *)(a1 + 95))
    {
      return;
    }
    v4 = *(_QWORD *)(a1 + 104);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *(_QWORD *)(a1 + 104) = 0;
    v6 = 0;
    memset(v5, 0, sizeof(v5));
    ImsFileManager::moveFile(a1 + 72, a2, (uint64_t)v5);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    ImsResult::~ImsResult((ImsResult *)v5);
  }
}

void sub_1BF0A0D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ImsResult::~ImsResult((ImsResult *)&a9);
  _Unwind_Resume(a1);
}

void ImsLogDestinationFile::name(ImsLogDestinationFile *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
}

uint64_t ATTRegistrationPolicy::ATTRegistrationPolicy(uint64_t a1, std::__shared_weak_count **a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v7[2];

  *(_QWORD *)(a1 + 104) = &off_1E78B7B60;
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
  }
  Rfc5626RegistrationPolicy::Rfc5626RegistrationPolicy(a1, (uint64_t *)&off_1E78DABC8, v7);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  *(_QWORD *)a1 = &off_1E78DA908;
  *(_QWORD *)(a1 + 104) = &unk_1E78DAB70;
  *(_QWORD *)(a1 + 176) = &unk_1E78DABB8;
  *(_BYTE *)(a1 + 2356) = 0;
  return a1;
}

void sub_1BF0A0E40(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

BOOL ATTRegistrationPolicy::isForbiddenUserError(ATTRegistrationPolicy *this, unsigned __int16 a2)
{
  char *v3;

  v3 = (char *)this + 2312;
  return !SipResponseCodeMap::empty((ATTRegistrationPolicy *)((char *)this + 2312))
      && SipResponseCodeMap::containsResponseCodeForMethod((uint64_t)v3, (void **)"REGISTER", a2, 0);
}

uint64_t ATTRegistrationPolicy::disableIfInWrongCountry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  _QWORD v8[2];
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a3);
    if ((_DWORD)result)
    {
      v7 = *(_DWORD *)(a2 + 88) == 0;
      v14 = 0;
      v15 = 0;
      v8[0] = &off_1E78B7238;
      v8[1] = &_bambiDomain;
      v9 = v7 << 30;
      v12 = 0;
      v13 = 0;
      v10 = 0;
      v11 = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 176))(a1, v8);
      ImsResult::~ImsResult((ImsResult *)v8);
      return 1;
    }
  }
  return result;
}

void sub_1BF0A0F58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

uint64_t ATTRegistrationPolicy::handleMaxReRegistrationErrors(uint64_t this)
{
  *(_BYTE *)(this + 2356) = 1;
  *(_BYTE *)(this + 220) = 1;
  *(_DWORD *)(this + 216) = 0;
  return this;
}

void ATTRegistrationPolicy::initialRegisterRequestSent(SipRegistrationPolicy *this)
{
  *((_BYTE *)this + 2356) = 0;
  SipRegistrationPolicy::initialRegisterRequestSent(this);
}

BOOL ATTRegistrationPolicy::useNextProxy(ATTRegistrationPolicy *this)
{
  return *((_BYTE *)this + 220) && *((_BYTE *)this + 2356) == 0;
}

void ATTRegistrationPolicy::skipToNextProxy(ATTRegistrationPolicy *this)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(ATTRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(ATTRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"skipToNextProxy...", 18);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  SipRegistrationPolicy::skipToNextProxy(this);
}

void ATTRegistrationPolicy::~ATTRegistrationPolicy(ATTRegistrationPolicy *this)
{
  SipRegistrationPolicy::~SipRegistrationPolicy(this, (uint64_t *)&off_1E78DABD0);
}

{
  SipRegistrationPolicy::~SipRegistrationPolicy(this, (uint64_t *)&off_1E78DABD0);
  JUMPOUT(0x1C3B87100);
}

char *ATTRegistrationPolicy::name(ATTRegistrationPolicy *this)
{
  return &ATTRegistrationPolicy::kPolicyName;
}

void `non-virtual thunk to'ATTRegistrationPolicy::~ATTRegistrationPolicy(ATTRegistrationPolicy *this)
{
  SipRegistrationPolicy::~SipRegistrationPolicy((ATTRegistrationPolicy *)((char *)this - 104), (uint64_t *)&off_1E78DABD0);
}

{
  SipRegistrationPolicy::~SipRegistrationPolicy((ATTRegistrationPolicy *)((char *)this - 104), (uint64_t *)&off_1E78DABD0);
  JUMPOUT(0x1C3B87100);
}

_QWORD *ims::toString<ims::SpamCategory>@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;

  v4 = *a1;
  if (v4 > 0x13)
    v5 = "undefined";
  else
    v5 = off_1E78DB200[v4];
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

void SpamCategoryMap::SpamCategoryMap(SpamCategoryMap *this)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  SpamCategoryMap::populateDefaultCategories((char **)this);
}

void sub_1BF0A1108(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void SpamCategoryMap::populateDefaultCategories(char **this)
{
  char *v2;
  int v3;
  void *v4[2];
  uint64_t v5;
  void *__p[2];
  uint64_t v7;
  int v8;

  v2 = (char *)(this + 1);
  std::__tree<std::string>::destroy((uint64_t)this, this[1]);
  *this = v2;
  this[2] = 0;
  *(_QWORD *)v2 = 0;
  v3 = 3;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)__p = *(_OWORD *)v4;
  v7 = v5;
  v4[1] = 0;
  v5 = 0;
  v4[0] = 0;
  v8 = 3;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
  v3 = 4;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)__p = *(_OWORD *)v4;
  v7 = v5;
  v4[1] = 0;
  v5 = 0;
  v4[0] = 0;
  v8 = 4;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
  v3 = 5;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)__p = *(_OWORD *)v4;
  v7 = v5;
  v4[1] = 0;
  v5 = 0;
  v4[0] = 0;
  v8 = 5;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
  v3 = 6;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)__p = *(_OWORD *)v4;
  v7 = v5;
  v4[1] = 0;
  v5 = 0;
  v4[0] = 0;
  v8 = 6;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
  v3 = 7;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)__p = *(_OWORD *)v4;
  v7 = v5;
  v4[1] = 0;
  v5 = 0;
  v4[0] = 0;
  v8 = 7;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
  v3 = 8;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)__p = *(_OWORD *)v4;
  v7 = v5;
  v4[1] = 0;
  v5 = 0;
  v4[0] = 0;
  v8 = 8;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
  v3 = 9;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)__p = *(_OWORD *)v4;
  v7 = v5;
  v4[1] = 0;
  v5 = 0;
  v4[0] = 0;
  v8 = 9;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
  v3 = 10;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)__p = *(_OWORD *)v4;
  v7 = v5;
  v4[1] = 0;
  v5 = 0;
  v4[0] = 0;
  v8 = 10;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
  v3 = 11;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)__p = *(_OWORD *)v4;
  v7 = v5;
  v4[1] = 0;
  v5 = 0;
  v4[0] = 0;
  v8 = 11;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
  v3 = 12;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)__p = *(_OWORD *)v4;
  v7 = v5;
  v4[1] = 0;
  v5 = 0;
  v4[0] = 0;
  v8 = 12;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
  v3 = 13;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)__p = *(_OWORD *)v4;
  v7 = v5;
  v4[1] = 0;
  v5 = 0;
  v4[0] = 0;
  v8 = 13;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
  v3 = 14;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)__p = *(_OWORD *)v4;
  v7 = v5;
  v4[1] = 0;
  v5 = 0;
  v4[0] = 0;
  v8 = 14;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
  v3 = 15;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)__p = *(_OWORD *)v4;
  v7 = v5;
  v4[1] = 0;
  v5 = 0;
  v4[0] = 0;
  v8 = 15;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
  v3 = 16;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)__p = *(_OWORD *)v4;
  v7 = v5;
  v4[1] = 0;
  v5 = 0;
  v4[0] = 0;
  v8 = 16;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
  v3 = 17;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)__p = *(_OWORD *)v4;
  v7 = v5;
  v4[1] = 0;
  v5 = 0;
  v4[0] = 0;
  v8 = 17;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
  v3 = 18;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)__p = *(_OWORD *)v4;
  v7 = v5;
  v4[1] = 0;
  v5 = 0;
  v4[0] = 0;
  v8 = 18;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
  v3 = 19;
  ims::toString<ims::SpamCategory>(&v3, v4);
  *(_OWORD *)__p = *(_OWORD *)v4;
  v7 = v5;
  v4[1] = 0;
  v5 = 0;
  v4[0] = 0;
  v8 = 19;
  std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>((uint64_t **)this, __p, (uint64_t)__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
}

void sub_1BF0A17BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void SpamCategoryMap::parseFromArray(uint64_t **a1, __int128 **a2)
{
  __int128 *v2;
  __int128 *v3;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  size_t v10;
  std::string *v11;
  _BYTE *v12;
  std::string::size_type v13;
  int v15;
  void *v16;
  std::string *v17;
  std::string *v18;
  int v19;
  int v20;
  int v21;
  void *v22;
  std::string *v23;
  std::string *v24;
  int v25;
  int v26;
  int v27;
  void *v28;
  std::string *v29;
  std::string *v30;
  int v31;
  int v32;
  int v33;
  void *v34;
  std::string *v35;
  std::string *v36;
  int v37;
  int v38;
  int v39;
  void *v40;
  std::string *v41;
  std::string *v42;
  int v43;
  int v44;
  int v45;
  void *v46;
  std::string *v47;
  std::string *v48;
  int v49;
  int v50;
  int v51;
  void *v52;
  std::string *v53;
  std::string *v54;
  int v55;
  int v56;
  int v57;
  void *v58;
  std::string *v59;
  std::string *v60;
  int v61;
  int v62;
  int v63;
  void *v64;
  std::string *v65;
  std::string *v66;
  int v67;
  int v68;
  void *v69;
  std::string *v70;
  std::string *v71;
  int v72;
  int v73;
  void *v74;
  std::string *v75;
  std::string *v76;
  int v77;
  BOOL v78;
  unsigned int v79;
  BOOL v80;
  BOOL v81;
  BOOL v82;
  BOOL v83;
  BOOL v84;
  BOOL v85;
  _BOOL4 v86;
  std::string::size_type i;
  std::string::size_type size;
  __int128 v89;
  std::string __p;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  std::string v94;
  std::string v95;
  unsigned int v96;
  std::string v97;
  std::string v98;

  v91 = 0;
  v92 = 0;
  v93 = 0;
  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      memset(&v95, 0, sizeof(v95));
      if (*((char *)v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v95, *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
      }
      else
      {
        v5 = *v2;
        v95.__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v5;
      }
      std::string::basic_string[abi:ne180100]<0>(&v98, ";");
      ims::tokenize(&v95, &v91, (char *)&v98);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v95.__r_.__value_.__l.__data_);
      v2 = (__int128 *)((char *)v2 + 24);
    }
    while (v2 != v3);
    v6 = v91;
    v7 = v92;
    if (v91 != v92)
    {
      while (1)
      {
        memset(&__p, 0, sizeof(__p));
        if (*(char *)(v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
        }
        else
        {
          v8 = *(_OWORD *)v6;
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__p.__r_.__value_.__r.__words[2])
            : __p.__r_.__value_.__l.__size_;
        if (v10)
        {
          v11 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          v12 = memchr(v11, 58, v10);
          v13 = v12 - (_BYTE *)v11;
          if (v12 && v13 != -1)
            break;
        }
LABEL_172:
        if (v9 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v6 += 24;
        if (v6 == v7)
          goto LABEL_192;
      }
      std::string::basic_string(&v98, &__p, 0, v13, (std::allocator<char> *)&v95);
      LODWORD(v94.__r_.__value_.__l.__data_) = 0;
      ims::toString<ims::SpamCategory>((int *)&v94, &v95);
      v15 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
      v16 = (void *)v95.__r_.__value_.__r.__words[0];
      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v95;
      else
        v17 = (std::string *)v95.__r_.__value_.__r.__words[0];
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &v98;
      else
        v18 = (std::string *)v98.__r_.__value_.__r.__words[0];
      v19 = strcasecmp((const char *)v17, (const char *)v18);
      v20 = v19;
      if (v15 < 0)
      {
        operator delete(v16);
        if (v20)
        {
LABEL_33:
          LODWORD(v94.__r_.__value_.__l.__data_) = 2;
          ims::toString<ims::SpamCategory>((int *)&v94, &v95);
          v21 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
          v22 = (void *)v95.__r_.__value_.__r.__words[0];
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v23 = &v95;
          else
            v23 = (std::string *)v95.__r_.__value_.__r.__words[0];
          if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = &v98;
          else
            v24 = (std::string *)v98.__r_.__value_.__r.__words[0];
          v25 = strcasecmp((const char *)v23, (const char *)v24);
          v26 = v25;
          if (v21 < 0)
          {
            operator delete(v22);
            if (v26)
            {
LABEL_41:
              LODWORD(v94.__r_.__value_.__l.__data_) = 3;
              ims::toString<ims::SpamCategory>((int *)&v94, &v95);
              v27 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
              v28 = (void *)v95.__r_.__value_.__r.__words[0];
              if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v29 = &v95;
              else
                v29 = (std::string *)v95.__r_.__value_.__r.__words[0];
              if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v30 = &v98;
              else
                v30 = (std::string *)v98.__r_.__value_.__r.__words[0];
              v31 = strcasecmp((const char *)v29, (const char *)v30);
              v32 = v31;
              if (v27 < 0)
              {
                operator delete(v28);
                if (v32)
                {
LABEL_49:
                  LODWORD(v94.__r_.__value_.__l.__data_) = 4;
                  ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                  v33 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
                  v34 = (void *)v95.__r_.__value_.__r.__words[0];
                  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v35 = &v95;
                  else
                    v35 = (std::string *)v95.__r_.__value_.__r.__words[0];
                  if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v36 = &v98;
                  else
                    v36 = (std::string *)v98.__r_.__value_.__r.__words[0];
                  v37 = strcasecmp((const char *)v35, (const char *)v36);
                  v38 = v37;
                  if (v33 < 0)
                  {
                    operator delete(v34);
                    if (v38)
                    {
LABEL_57:
                      LODWORD(v94.__r_.__value_.__l.__data_) = 5;
                      ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                      v39 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
                      v40 = (void *)v95.__r_.__value_.__r.__words[0];
                      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v41 = &v95;
                      else
                        v41 = (std::string *)v95.__r_.__value_.__r.__words[0];
                      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v42 = &v98;
                      else
                        v42 = (std::string *)v98.__r_.__value_.__r.__words[0];
                      v43 = strcasecmp((const char *)v41, (const char *)v42);
                      v44 = v43;
                      if (v39 < 0)
                      {
                        operator delete(v40);
                        if (v44)
                        {
LABEL_65:
                          LODWORD(v94.__r_.__value_.__l.__data_) = 6;
                          ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                          v45 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
                          v46 = (void *)v95.__r_.__value_.__r.__words[0];
                          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v47 = &v95;
                          else
                            v47 = (std::string *)v95.__r_.__value_.__r.__words[0];
                          if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v48 = &v98;
                          else
                            v48 = (std::string *)v98.__r_.__value_.__r.__words[0];
                          v49 = strcasecmp((const char *)v47, (const char *)v48);
                          v50 = v49;
                          if (v45 < 0)
                          {
                            operator delete(v46);
                            if (v50)
                            {
LABEL_73:
                              LODWORD(v94.__r_.__value_.__l.__data_) = 7;
                              ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                              v51 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
                              v52 = (void *)v95.__r_.__value_.__r.__words[0];
                              if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v53 = &v95;
                              else
                                v53 = (std::string *)v95.__r_.__value_.__r.__words[0];
                              if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v54 = &v98;
                              else
                                v54 = (std::string *)v98.__r_.__value_.__r.__words[0];
                              v55 = strcasecmp((const char *)v53, (const char *)v54);
                              v56 = v55;
                              if (v51 < 0)
                              {
                                operator delete(v52);
                                if (v56)
                                  goto LABEL_81;
                              }
                              else if (v55)
                              {
LABEL_81:
                                LODWORD(v94.__r_.__value_.__l.__data_) = 8;
                                ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                                v57 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
                                v58 = (void *)v95.__r_.__value_.__r.__words[0];
                                if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v59 = &v95;
                                else
                                  v59 = (std::string *)v95.__r_.__value_.__r.__words[0];
                                if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v60 = &v98;
                                else
                                  v60 = (std::string *)v98.__r_.__value_.__r.__words[0];
                                v61 = strcasecmp((const char *)v59, (const char *)v60);
                                v62 = v61;
                                if (v57 < 0)
                                {
                                  operator delete(v58);
                                  if (v62)
                                    goto LABEL_89;
                                }
                                else if (v61)
                                {
LABEL_89:
                                  LODWORD(v94.__r_.__value_.__l.__data_) = 9;
                                  ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                                  v63 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
                                  v64 = (void *)v95.__r_.__value_.__r.__words[0];
                                  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                    v65 = &v95;
                                  else
                                    v65 = (std::string *)v95.__r_.__value_.__r.__words[0];
                                  if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                    v66 = &v98;
                                  else
                                    v66 = (std::string *)v98.__r_.__value_.__r.__words[0];
                                  v67 = strcasecmp((const char *)v65, (const char *)v66);
                                  if (v63 < 0)
                                    operator delete(v64);
                                  if (v67)
                                  {
                                    LODWORD(v94.__r_.__value_.__l.__data_) = 10;
                                    ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                                    v68 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
                                    v69 = (void *)v95.__r_.__value_.__r.__words[0];
                                    if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                      v70 = &v95;
                                    else
                                      v70 = (std::string *)v95.__r_.__value_.__r.__words[0];
                                    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                      v71 = &v98;
                                    else
                                      v71 = (std::string *)v98.__r_.__value_.__r.__words[0];
                                    v72 = strcasecmp((const char *)v70, (const char *)v71);
                                    if (v68 < 0)
                                      operator delete(v69);
                                    if (v72)
                                    {
                                      LODWORD(v94.__r_.__value_.__l.__data_) = 11;
                                      ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                                      v73 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
                                      v74 = (void *)v95.__r_.__value_.__r.__words[0];
                                      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                        v75 = &v95;
                                      else
                                        v75 = (std::string *)v95.__r_.__value_.__r.__words[0];
                                      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                        v76 = &v98;
                                      else
                                        v76 = (std::string *)v98.__r_.__value_.__r.__words[0];
                                      v77 = strcasecmp((const char *)v75, (const char *)v76);
                                      if (v73 < 0)
                                        operator delete(v74);
                                      if (v77)
                                      {
                                        LODWORD(v94.__r_.__value_.__l.__data_) = 12;
                                        ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                                        v78 = ims::caseInsensitiveStringCompare((const char *)&v95, (const char *)&v98);
                                        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v95.__r_.__value_.__l.__data_);
                                        if (v78)
                                        {
                                          v79 = 12;
                                        }
                                        else
                                        {
                                          LODWORD(v94.__r_.__value_.__l.__data_) = 13;
                                          ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                                          v80 = ims::caseInsensitiveStringCompare((const char *)&v95, (const char *)&v98);
                                          if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
                                            operator delete(v95.__r_.__value_.__l.__data_);
                                          if (v80)
                                          {
                                            v79 = 13;
                                          }
                                          else
                                          {
                                            LODWORD(v94.__r_.__value_.__l.__data_) = 14;
                                            ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                                            v81 = ims::caseInsensitiveStringCompare((const char *)&v95, (const char *)&v98);
                                            if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
                                              operator delete(v95.__r_.__value_.__l.__data_);
                                            if (v81)
                                            {
                                              v79 = 14;
                                            }
                                            else
                                            {
                                              LODWORD(v94.__r_.__value_.__l.__data_) = 15;
                                              ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                                              v82 = ims::caseInsensitiveStringCompare((const char *)&v95, (const char *)&v98);
                                              if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
                                                operator delete(v95.__r_.__value_.__l.__data_);
                                              if (v82)
                                              {
                                                v79 = 15;
                                              }
                                              else
                                              {
                                                LODWORD(v94.__r_.__value_.__l.__data_) = 16;
                                                ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                                                v83 = ims::caseInsensitiveStringCompare((const char *)&v95, (const char *)&v98);
                                                if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
                                                  operator delete(v95.__r_.__value_.__l.__data_);
                                                if (v83)
                                                {
                                                  v79 = 16;
                                                }
                                                else
                                                {
                                                  LODWORD(v94.__r_.__value_.__l.__data_) = 17;
                                                  ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                                                  v84 = ims::caseInsensitiveStringCompare((const char *)&v95, (const char *)&v98);
                                                  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
                                                    operator delete(v95.__r_.__value_.__l.__data_);
                                                  if (v84)
                                                  {
                                                    v79 = 17;
                                                  }
                                                  else
                                                  {
                                                    LODWORD(v94.__r_.__value_.__l.__data_) = 18;
                                                    ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                                                    v85 = ims::caseInsensitiveStringCompare((const char *)&v95, (const char *)&v98);
                                                    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
                                                      operator delete(v95.__r_.__value_.__l.__data_);
                                                    if (v85)
                                                    {
                                                      v79 = 18;
                                                    }
                                                    else
                                                    {
                                                      LODWORD(v94.__r_.__value_.__l.__data_) = 19;
                                                      ims::toString<ims::SpamCategory>((int *)&v94, &v95);
                                                      v86 = ims::caseInsensitiveStringCompare((const char *)&v95, (const char *)&v98);
                                                      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
                                                        operator delete(v95.__r_.__value_.__l.__data_);
                                                      if (v86)
                                                        v79 = 19;
                                                      else
                                                        v79 = 1;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      else
                                      {
                                        v79 = 11;
                                      }
                                    }
                                    else
                                    {
                                      v79 = 10;
                                    }
                                  }
                                  else
                                  {
                                    v79 = 9;
                                  }
                                  goto LABEL_168;
                                }
                                v79 = 8;
LABEL_168:
                                if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(v98.__r_.__value_.__l.__data_);
                                memset(&v98, 0, sizeof(v98));
                                if (v79 >= 2)
                                {
                                  std::string::basic_string(&v95, &__p, v13 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v94);
                                  std::string::basic_string[abi:ne180100]<0>(&v97, ",");
                                  ims::tokenize(&v95, (uint64_t *)&v98, (char *)&v97);
                                  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(v97.__r_.__value_.__l.__data_);
                                  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(v95.__r_.__value_.__l.__data_);
                                  size = v98.__r_.__value_.__l.__size_;
                                  for (i = v98.__r_.__value_.__r.__words[0]; i != size; i += 24)
                                  {
                                    memset(&v97, 0, sizeof(v97));
                                    if (*(char *)(i + 23) < 0)
                                    {
                                      std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)i, *(_QWORD *)(i + 8));
                                    }
                                    else
                                    {
                                      v89 = *(_OWORD *)i;
                                      v97.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 16);
                                      *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v89;
                                    }
                                    ims::lowerCase((uint64_t)&v97, &v94);
                                    v95 = v94;
                                    memset(&v94, 0, sizeof(v94));
                                    v96 = v79;
                                    std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>(a1, (void **)&v95.__r_.__value_.__l.__data_, (uint64_t)&v95);
                                    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
                                      operator delete(v95.__r_.__value_.__l.__data_);
                                    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
                                      operator delete(v94.__r_.__value_.__l.__data_);
                                    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
                                      operator delete(v97.__r_.__value_.__l.__data_);
                                  }
                                }
                                v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v98;
                                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
                                v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                goto LABEL_172;
                              }
                              v79 = 7;
                              goto LABEL_168;
                            }
                          }
                          else if (v49)
                          {
                            goto LABEL_73;
                          }
                          v79 = 6;
                          goto LABEL_168;
                        }
                      }
                      else if (v43)
                      {
                        goto LABEL_65;
                      }
                      v79 = 5;
                      goto LABEL_168;
                    }
                  }
                  else if (v37)
                  {
                    goto LABEL_57;
                  }
                  v79 = 4;
                  goto LABEL_168;
                }
              }
              else if (v31)
              {
                goto LABEL_49;
              }
              v79 = 3;
              goto LABEL_168;
            }
          }
          else if (v25)
          {
            goto LABEL_41;
          }
          v79 = 2;
          goto LABEL_168;
        }
      }
      else if (v19)
      {
        goto LABEL_33;
      }
      v79 = 0;
      goto LABEL_168;
    }
  }
LABEL_192:
  v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
}

void sub_1BF0A20B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (a37 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  a25 = (void *)(v37 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  if (a14 < 0)
    operator delete(a9);
  __p = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t SpamCategoryMap::SpamCategoryMap(uint64_t a1, __int128 **a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  SpamCategoryMap::parseFromArray((uint64_t **)a1, a2);
  return a1;
}

void sub_1BF0A21F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t SpamCategoryMap::operator==(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const void **v9;
  unsigned __int8 *v10;
  _BOOL4 v11;
  uint64_t result;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  _QWORD *v17;

  if (a1[2] == a2[2])
  {
    v2 = a1 + 1;
    v3 = (_QWORD *)*a1;
    if ((_QWORD *)*a1 == a1 + 1)
      return 1;
    v4 = (_QWORD *)*a2;
    while (1)
    {
      v5 = *((unsigned __int8 *)v3 + 55);
      if ((v5 & 0x80u) == 0)
        v6 = *((unsigned __int8 *)v3 + 55);
      else
        v6 = v3[5];
      v7 = *((unsigned __int8 *)v4 + 55);
      v8 = (char)v7;
      if ((v7 & 0x80u) != 0)
        v7 = v4[5];
      if (v6 != v7)
        break;
      v9 = (const void **)(v3 + 4);
      if (v8 >= 0)
        v10 = (unsigned __int8 *)(v4 + 4);
      else
        v10 = (unsigned __int8 *)v4[4];
      if ((v5 & 0x80) != 0)
      {
        v11 = memcmp(*v9, v10, v3[5]) == 0;
      }
      else
      {
        if (*((_BYTE *)v3 + 55))
        {
          while (*(unsigned __int8 *)v9 == *v10)
          {
            v9 = (const void **)((char *)v9 + 1);
            ++v10;
            if (!--v5)
              goto LABEL_17;
          }
          return 0;
        }
LABEL_17:
        v11 = 1;
      }
      result = 0;
      if (!v11 || *((_DWORD *)v3 + 14) != *((_DWORD *)v4 + 14))
        return result;
      v13 = (_QWORD *)v3[1];
      v14 = v3;
      if (v13)
      {
        do
        {
          v3 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v3 = (_QWORD *)v14[2];
          v15 = *v3 == (_QWORD)v14;
          v14 = v3;
        }
        while (!v15);
      }
      v16 = (_QWORD *)v4[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v4[2];
          v15 = *v17 == (_QWORD)v4;
          v4 = v17;
        }
        while (!v15);
      }
      v4 = v17;
      if (v3 == v2)
        return 1;
    }
  }
  return 0;
}

uint64_t SpamCategoryMap::categoryForString(uint64_t a1, uint64_t a2)
{
  void **v3;
  std::string __p;

  ims::lowerCase(a2, &__p);
  v3 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1, (void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 8) == v3)
    return 1;
  else
    return *((unsigned int *)v3 + 14);
}

void sub_1BF0A23C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,ims::SpamCategory>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,ims::SpamCategory>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,ims::SpamCategory>,std::__tree_node<std::__value_type<std::string,ims::SpamCategory>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_1BF0A241C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,ims::SpamCategory>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,ims::SpamCategory>,std::__tree_node<std::__value_type<std::string,ims::SpamCategory>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,ims::SpamCategory> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,ims::SpamCategory> const&>(uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;
  void **v10;

  v9 = 0;
  v10 = 0;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__construct_node<std::pair<std::string const,ims::SpamCategory> const&>((uint64_t)a1, a4, v8);
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__construct_node<std::pair<std::string const,ims::SpamCategory> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (char *)operator new(0x40uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_DWORD *)v6 + 14) = *(_DWORD *)(a2 + 24);
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1BF0A25C4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ims::SpamCategory>,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ims::SpamCategory>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,ims::SpamCategory>,std::__tree_node<std::__value_type<std::string,ims::SpamCategory>,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t **leaf_high;
  _QWORD *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t *v20;

  v5 = (uint64_t **)result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t)(result + 1);
    *(_QWORD *)(v7 + 16) = 0;
    result[1] = 0;
    result[2] = 0;
    if (*(_QWORD *)(v6 + 8))
      v8 = *(_QWORD **)(v6 + 8);
    else
      v8 = (_QWORD *)v6;
    v18 = result;
    v19 = v8;
    v20 = v8;
    if (v8)
    {
      v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          *((_DWORD *)v8 + 14) = *((_DWORD *)v9 + 14);
          v10 = v20;
          v17 = 0;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)v5, &v17, v20 + 4);
          std::__tree<unsigned int>::__insert_node_at(v5, v17, leaf_high, v10);
          v8 = v19;
          v20 = v19;
          if (v19)
            v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v19);
          v12 = (_QWORD *)v9[1];
          if (v12)
          {
            do
            {
              a2 = v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v13 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v13);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t *)std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v18);
  }
  if (a2 != a3)
  {
    do
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__construct_node<std::pair<std::string const,ims::SpamCategory> const&>((uint64_t)v5, (uint64_t)(a2 + 4), &v18);
      v17 = 0;
      v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)v5, &v17, v18 + 4);
      result = std::__tree<unsigned int>::__insert_node_at(v5, v17, v14, v18);
      v15 = (_QWORD *)a2[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)a2[2];
          v13 = *v16 == (_QWORD)a2;
          a2 = v16;
        }
        while (!v13);
      }
      a2 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

void sub_1BF0A27D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string,ims::SpamCategory>>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t **v6;
  _OWORD *v7;
  uint64_t v8;

  v8 = 0;
  result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  if (!*result)
  {
    v6 = (uint64_t **)result;
    v7 = operator new(0x40uLL);
    v7[2] = *(_OWORD *)a3;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *((_DWORD *)v7 + 14) = *(_DWORD *)(a3 + 24);
    return std::__tree<unsigned int>::__insert_node_at(a1, v8, v6, (uint64_t *)v7);
  }
  return result;
}

BOOL SipEmergencyRegistrationPolicy::isRegistrationRetryAllowed(uint64_t a1, int a2)
{
  if (!*(_BYTE *)(a1 + 10))
    return 1;
  if (a2 == 2)
    return *(_BYTE *)(a1 + 11) != 0;
  return 0;
}

uint64_t SipRegistrationPolicy::SipRegistrationPolicy(uint64_t a1, uint64_t *a2, std::__shared_weak_count **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string __p;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, "sip.reg");
  v6 = std::__shared_weak_count::lock(a3[1]);
  ((void (*)(std::string *__return_ptr))(*a3)->__vftable[3].__on_zero_shared)(&__p);
  ImsLogContainer::ImsLogContainer(a1, &__str, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v9 = a2[1];
  *(_QWORD *)(a1 + 104) = v9;
  *(_QWORD *)(a1 + 104 + *(_QWORD *)(v9 - 48)) = a2[2];
  *(_BYTE *)(a1 + 116) = 1;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 128;
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 176) = &unk_1E78DB638;
  v10 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 104) = a2[3];
  *(_QWORD *)(a1 + *(_QWORD *)(v10 - 24)) = a2[4];
  *(_QWORD *)(a1 + 176) = &off_1E78DB588;
  *(_OWORD *)(a1 + 200) = xmmword_1BF2A80D0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 220) = 1;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 224));
  *(_QWORD *)(a1 + 368) = *a3;
  v11 = a3[1];
  *(_QWORD *)(a1 + 376) = v11;
  if (v11)
  {
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
  }
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 412) = 0u;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = -1;
  SipRegistrationConfig::SipRegistrationConfig((SipRegistrationConfig *)(a1 + 480));
  *(_BYTE *)(a1 + 2152) = 0;
  *(_QWORD *)(a1 + 2168) = 0;
  *(_DWORD *)(a1 + 2176) = 0;
  *(_QWORD *)(a1 + 2216) = 0;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(_QWORD *)(a1 + 2160) = &off_1E78BCAE0;
  *(_QWORD *)(a1 + 2224) = 0;
  *(_WORD *)(a1 + 2240) = 0;
  *(_QWORD *)(a1 + 2248) = &off_1E78EB020;
  *(_QWORD *)(a1 + 2272) = 0;
  *(_QWORD *)(a1 + 2264) = 0;
  *(_QWORD *)(a1 + 2256) = a1 + 2264;
  *(_QWORD *)(a1 + 2280) = &off_1E78EB020;
  *(_QWORD *)(a1 + 2304) = 0;
  *(_QWORD *)(a1 + 2296) = 0;
  *(_QWORD *)(a1 + 2288) = a1 + 2296;
  *(_QWORD *)(a1 + 2312) = &off_1E78EB020;
  *(_QWORD *)(a1 + 2328) = 0;
  *(_QWORD *)(a1 + 2336) = 0;
  *(_QWORD *)(a1 + 2320) = a1 + 2328;
  *(_BYTE *)(a1 + 2344) = 0;
  *(_DWORD *)(a1 + 2348) = 0;
  *(_QWORD *)(a1 + 2232) = 0;
  v14 = std::__shared_weak_count::lock(a3[1]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)*a3;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v14;
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 136))(&__str);
  std::string::operator=((std::string *)(a1 + 272), (const std::string *)(a1 + 8));
  std::string::operator=((std::string *)(a1 + 296), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  *(_QWORD *)(a1 + 328) = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  *(_DWORD *)(a1 + 424) = SipRegistrationMode::kModeNormal;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = -1;
  *(_BYTE *)(a1 + 2344) = 0;
  SipLockable::useBlockQueue((SipLockable *)(a1 + 104));
  return a1;
}

void sub_1BF0A2BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t *v23;
  SipLockable *v24;
  SipTimerContainer *v25;
  void **v26;
  SipBackoffTimer *v27;
  uint64_t v28;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;

  *(_QWORD *)(v22 + 2312) = v28;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v22 + 2320, *(_QWORD **)(v22 + 2328));
  *(_QWORD *)(v22 + 2280) = v28;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v22 + 2288, *(_QWORD **)(v22 + 2296));
  *(_QWORD *)(v22 + 2248) = v28;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(v22 + 2256, *(_QWORD **)(v22 + 2264));
  SipBackoffTimer::~SipBackoffTimer(v27);
  SipRegistrationConfig::~SipRegistrationConfig(v26);
  a17 = (void *)(v22 + 432);
  std::vector<SipRegistrationPolicy::ProxyInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  v30 = *(std::__shared_weak_count **)(v22 + 376);
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
  SipTimerContainer::~SipTimerContainer(v25);
  v31 = *(std::__shared_weak_count **)(v22 + 192);
  if (v31)
    std::__shared_weak_count::__release_weak(v31);
  SipLockable::~SipLockable(v24, v23);
  ImsLogContainer::~ImsLogContainer((void **)v22);
  _Unwind_Resume(a1);
}

void SipRegistrationPolicy::~SipRegistrationPolicy(SipRegistrationPolicy *this, uint64_t *a2)
{
  uint64_t v4;
  SipLockable *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void **v9;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *((_QWORD *)this + 13) = a2[3];
  v5 = (SipRegistrationPolicy *)((char *)this + 104);
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[4];
  *((_QWORD *)this + 22) = &off_1E78DB588;
  v6 = *((_QWORD *)this + 279);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 289) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 2320, *((_QWORD **)this + 291));
  *((_QWORD *)this + 285) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 2288, *((_QWORD **)this + 287));
  *((_QWORD *)this + 281) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 2256, *((_QWORD **)this + 283));
  SipBackoffTimer::~SipBackoffTimer((SipRegistrationPolicy *)((char *)this + 2160));
  SipRegistrationConfig::~SipRegistrationConfig((void **)this + 60);
  v9 = (void **)((char *)this + 432);
  std::vector<SipRegistrationPolicy::ProxyInfo>::__destroy_vector::operator()[abi:ne180100](&v9);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  SipTimerContainer::~SipTimerContainer((SipRegistrationPolicy *)((char *)this + 224));
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  SipLockable::~SipLockable(v5, a2 + 1);
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void SipRegistrationPolicy::loggableName(SipRegistrationPolicy *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  std::string *p_p;
  char *v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  std::string *v12;
  char *v13;
  std::string __p;

  if ((*(unsigned int (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 528))(this))
  {
    v4 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 384))(this);
    v5 = (char *)v4;
    if (*(char *)(v4 + 23) >= 0)
      v6 = *(unsigned __int8 *)(v4 + 23);
    else
      v6 = *(_QWORD *)(v4 + 8);
    memset(&__p, 0, sizeof(__p));
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v6 + 30);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v6)
    {
      if (v5[23] >= 0)
        v8 = v5;
      else
        v8 = *(char **)v5;
      memmove(p_p, v8, v6);
    }
    strcpy((char *)p_p + v6, " RegistrationPolicy(EMERGENCY)");
    LoggableString::LoggableString(a2, &__p);
  }
  else
  {
    v9 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 384))(this);
    v10 = (char *)v9;
    if (*(char *)(v9 + 23) >= 0)
      v11 = *(unsigned __int8 *)(v9 + 23);
    else
      v11 = *(_QWORD *)(v9 + 8);
    memset(&__p, 0, sizeof(__p));
    v12 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v11 + 19);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v11)
    {
      if (v10[23] >= 0)
        v13 = v10;
      else
        v13 = *(char **)v10;
      memmove(v12, v13, v11);
    }
    strcpy((char *)v12 + v11, " RegistrationPolicy");
    LoggableString::LoggableString(a2, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF0A2F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'SipRegistrationPolicy::loggableName(SipRegistrationPolicy *this@<X0>, std::string *a2@<X8>)
{
  SipRegistrationPolicy::loggableName((SipRegistrationPolicy *)((char *)this - 104), a2);
}

uint64_t SipRegistrationPolicy::terminationLocksReleased(SipRegistrationPolicy *this)
{
  return (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 280))(this);
}

uint64_t `non-virtual thunk to'SipRegistrationPolicy::terminationLocksReleased(SipRegistrationPolicy *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 13) + 280))((char *)this - 104);
}

uint64_t SipRegistrationPolicy::initialize(SipRegistrationPolicy *this)
{
  *((_BYTE *)this + 220) = 1;
  *((_DWORD *)this + 54) = 0;
  (*(void (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 192))(this);
  *((_BYTE *)this + 2344) = 1;
  return 1;
}

ImsBlockQueue *SipRegistrationPolicy::deinitialize(SipRegistrationPolicy *this)
{
  uint64_t v2;
  ImsBlockQueue *result;
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  SipTimerContainer::cancelAllTimers((SipRegistrationPolicy *)((char *)this + 224));
  std::string::basic_string[abi:ne180100]<0>(v6, "sip.reg");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_10_6);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v6, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"flushing pending blocks", 23);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  result = (ImsBlockQueue *)*((_QWORD *)this + 21);
  if (result)
    result = (ImsBlockQueue *)ImsBlockQueue::flush(result);
  *((_BYTE *)this + 2344) = 0;
  return result;
}

void sub_1BF0A30F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipRegistrationPolicy::updateNextRetryTime(_QWORD *a1, ims *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  tm *v8;
  const char *v9;
  uint64_t v10;
  uint64_t result;

  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v6);
  v7 = *(_QWORD **)(v6 + 8);
  if (a2)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"setting nextRetryTime to ", 25);
    *(_BYTE *)(v6 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(a2, v6, v8);
    v7 = *(_QWORD **)(v6 + 8);
    v9 = " due to ";
    v10 = 8;
  }
  else
  {
    v9 = "clearing nextRetryTime due to ";
    v10 = 30;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a3);
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  a1[48] = a2;
  return result;
}

uint64_t SipRegistrationPolicy::isRegistrationRetryAllowed(_QWORD **a1, uint64_t a2)
{
  if (((unsigned int (*)(_QWORD **))(*a1)[66])(a1))
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[279] + 16))(a1[279], a2);
  else
    return 1;
}

uint64_t SipRegistrationPolicy::useNextProxy(SipRegistrationPolicy *this)
{
  return *((unsigned __int8 *)this + 220);
}

time_t SipRegistrationPolicy::startTimer(SipRegistrationPolicy *this)
{
  time_t v2;
  uint64_t v3;
  time_t v4;
  uint64_t v5;
  tm *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD v25[5];
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  void *__p[2];
  char v31;
  _BYTE v32[24];
  _BYTE *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 48))
    return -1;
  v2 = time(0);
  v3 = *((_QWORD *)this + 48);
  v4 = v3 - v2;
  if (v3 <= v2)
  {
    v13 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"startTimer: nextRetryTime has passed. Retrying immediately.", 59);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    LoggableString::LoggableString((LoggableString *)__p, "retryRegistration");
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v26, (_QWORD *)this + 23);
    v14 = v26 + 104;
    if (!v26)
      v14 = 0;
    v28 = v14;
    v29 = v27;
    v26 = 0;
    v27 = 0;
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 0x40000000;
    v25[2] = ___ZN21SipRegistrationPolicy10startTimerEv_block_invoke;
    v25[3] = &__block_descriptor_tmp_34;
    v25[4] = this;
    SipLockable::performBlock((uint64_t)this + 104, (__int128 *)__p, &v28, v25);
    v15 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = v27;
    if (v27)
    {
      v19 = (unint64_t *)&v27->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v31 < 0)
      operator delete(__p[0]);
    return 0;
  }
  v5 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 32))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"will attempt registration at ", 29);
  *(_BYTE *)(v5 + 17) = 0;
  ims::formatTimeAndIntervalFromNow(*((ims **)this + 48), v5, v6);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  v8 = *((_QWORD *)this + 23);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    if (*((_BYTE *)this + 2152))
      goto LABEL_33;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
  }
  else if (*((_BYTE *)this + 2152))
  {
    return v4;
  }
  v21 = operator new(0x20uLL);
  *v21 = &off_1E78DB650;
  v21[1] = this;
  v21[2] = v8;
  v21[3] = v7;
  v33 = v21;
  SipTimerContainer::startTimer((_QWORD *)this + 28, (uint64_t)"ThrottleTimer", (uint64_t)v32, 1000 * v4, 1);
  v22 = v33;
  if (v33 == v32)
  {
    v23 = 4;
    v22 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_32;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_32:
  if (v7)
  {
LABEL_33:
    std::__shared_weak_count::__release_weak(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v4;
}

void sub_1BF0A3568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__shared_weak_count *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v28;
  uint64_t v29;

  v28 = *(_QWORD **)(v26 - 48);
  if (v28 == v25)
  {
    v29 = 4;
    v28 = (_QWORD *)(v26 - 72);
  }
  else
  {
    if (!v28)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_6:
  if (v24)
  {
    std::__shared_weak_count::__release_weak(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN21SipRegistrationPolicy10startTimerEv_block_invoke(uint64_t a1)
{
  SipRegistrationPolicy::retryRegistration(*(SipRegistrationPolicy **)(a1 + 32));
}

void SipRegistrationPolicy::retryRegistration(SipRegistrationPolicy *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  tm *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v18 = 0;
  v19 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_7;
  }
  v3 = std::__shared_weak_count::lock(v2);
  v19 = v3;
  if (!v3 || (v4 = *((_QWORD *)this + 46), (v18 = v4) == 0))
  {
LABEL_7:
    v8 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"retryRegistration: no delegate", 30);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (!v3)
      return;
    goto LABEL_8;
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v6 = *(_QWORD *)this;
  if (v5)
  {
    v7 = (*(uint64_t (**)(SipRegistrationPolicy *))(v6 + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"retryRegistration: registration already in progress", 51);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
  }
  else if ((*(unsigned int (**)(SipRegistrationPolicy *))(v6 + 432))(this))
  {
    v11 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"retryRegistration: waiting for calls started on proxy ", 54);
    *(_BYTE *)(v11 + 17) = 0;
    SipRegistrationPolicy::lastRegisteredProxyUriString((SipRegistrationPolicy *)v16, this);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 32))(v11, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" to end before attempting registration with ", 44);
    *(_BYTE *)(v11 + 17) = 0;
    SipRegistrationPolicy::currentProxyUriString((SipRegistrationPolicy *)__p, this);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 32))(v11, __p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (v15 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
      operator delete(v16[0]);
    *((_BYTE *)this + 2240) = 1;
  }
  else
  {
    *((_BYTE *)this + 2240) = 0;
    if (*((_QWORD *)this + 48) <= time(0))
    {
      SipRegistrationPolicy::clearAllThrottling((ims **)this);
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    }
    else
    {
      v12 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"retryRegistration: we are throttled until ", 42);
      *(_BYTE *)(v12 + 17) = 0;
      ims::formatTimeAndIntervalFromNow(*((ims **)this + 48), v12, v13);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v12 + 17) = 0;
      SipRegistrationPolicy::startTimer(this);
    }
  }
LABEL_8:
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1BF0A38FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationPolicy::startingRegistration(SipRegistrationPolicy *this)
{
  time_t v2;
  uint64_t v3;
  uint64_t v4;
  tm *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  tm *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  int v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *v26[2];
  char v27;

  v2 = time(0);
  v3 = *(_QWORD *)this;
  if (*((_QWORD *)this + 48) <= v2)
  {
    if ((*(unsigned int (**)(SipRegistrationPolicy *))(v3 + 432))(this))
    {
      v8 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"waiting for calls started on proxy ", 35);
      *(_BYTE *)(v8 + 17) = 0;
      SipRegistrationPolicy::lastRegisteredProxyUriString((SipRegistrationPolicy *)__p, this);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 32))(v8, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" to end before attempting registration with ", 44);
      *(_BYTE *)(v8 + 17) = 0;
      SipRegistrationPolicy::currentProxyUriString((SipRegistrationPolicy *)v26, this);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 32))(v8, v26);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (v27 < 0)
        operator delete(v26[0]);
      if (v22 < 0)
        operator delete(__p[0]);
      v6 = 0;
      *((_BYTE *)this + 2240) = 1;
    }
    else
    {
      *((_BYTE *)this + 2240) = 0;
      v9 = *((_QWORD *)this + 48);
      v10 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v10);
      v11 = *(_QWORD **)(v10 + 8);
      if (v9)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"registration throttling expired at ", 35);
        *(_BYTE *)(v10 + 17) = 0;
        ims::formatTimeAndIntervalFromNow(*((ims **)this + 48), v10, v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)".  Ok to retry registration.", 28);
        *(_BYTE *)(v10 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v10 + 17) = 0;
        std::string::basic_string[abi:ne180100]<0>(__p, "ThrottlingExpired");
        SipRegistrationPolicy::updateNextRetryTime(this, 0, (uint64_t)__p);
        if (v22 < 0)
          operator delete(__p[0]);
        *((_QWORD *)this + 49) = 0;
      }
      else
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"there is currently no registration throttling.  Ok to retry registration.", 73);
        *(_BYTE *)(v10 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v10 + 17) = 0;
      }
      SipTimerContainer::cancelAllTimers((SipRegistrationPolicy *)((char *)this + 224));
      v23 = 0u;
      v24 = 0u;
      v25 = 0u;
      __p[1] = &_bambiDomain;
      v21 = 0;
      v6 = (*(unsigned int (**)(uint64_t *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void (**)(ImsResult *__hidden)))(_bambiDomain + 24))(&_bambiDomain, 0, v13, v14, v15, v16, v17, v18, &off_1E78B7238) ^ 1;
      ImsResult::~ImsResult((ImsResult *)__p);
    }
  }
  else
  {
    v4 = (*(uint64_t (**)(SipRegistrationPolicy *))(v3 + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"waiting for next allowed registration retry at ", 47);
    *(_BYTE *)(v4 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(*((ims **)this + 48), v4, v5);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    v6 = 0;
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)this + 29, "ThrottleTimer"))
    {
      v7 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"ThrottleTimer is not active. Start it now... ", 45);
      *(_BYTE *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v7 + 17) = 0;
      SipRegistrationPolicy::startTimer(this);
      return 0;
    }
  }
  return v6;
}

void sub_1BF0A3CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipRegistrationPolicy::lastRegisteredProxyUriString(SipRegistrationPolicy *this, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = a2[59];
  if ((v2 & 0x8000000000000000) != 0 || (v3 = a2[54], v2 >= 0xEEEEEEEEEEEEEEEFLL * ((a2[55] - v3) >> 5)))
    std::string::basic_string[abi:ne180100]<0>(this, "(none)");
  else
    SipUri::asString(v3 + 480 * v2, 2, this);
}

void SipRegistrationPolicy::currentProxyUriString(SipRegistrationPolicy *this, _QWORD *a2)
{
  uint64_t v2;
  BOOL v3;

  v2 = a2[54];
  if (v2)
    v3 = v2 == a2[55];
  else
    v3 = 1;
  if (v3)
    std::string::basic_string[abi:ne180100]<0>(this, "(none)");
  else
    SipUri::asString(v2 + 480 * a2[57], 2, this);
}

void SipRegistrationPolicy::startEmergencyRegistrationTimer(SipRegistrationPolicy *this)
{
  int v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 528))(this)
    && ((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 279) + 16))(*((_QWORD *)this + 279), 0) & 1) == 0)
  {
    v2 = *(_DWORD *)(*((_QWORD *)this + 279) + 12);
    v4 = *((_QWORD *)this + 23);
    v3 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v6 = __ldxr(p_shared_weak_owners);
      while (__stxr(v6 + 1, p_shared_weak_owners));
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
      if (!v2)
      {
LABEL_17:
        std::__shared_weak_count::__release_weak(v3);
        std::__shared_weak_count::__release_weak(v3);
        return;
      }
      do
        v8 = __ldxr(p_shared_weak_owners);
      while (__stxr(v8 + 1, p_shared_weak_owners));
    }
    else if (!v2)
    {
      return;
    }
    v9 = operator new(0x20uLL);
    *v9 = &off_1E78DB6D0;
    v9[1] = this;
    v9[2] = v4;
    v9[3] = v3;
    v13 = v9;
    SipTimerContainer::startTimer((_QWORD *)this + 28, (uint64_t)&SipRegistrationPolicy::kEmergencyRegistrationTimer, (uint64_t)v12, 1000 * v2, 0);
    v10 = v13;
    if (v13 == v12)
    {
      v11 = 4;
      v10 = v12;
    }
    else
    {
      if (!v13)
        goto LABEL_16;
      v11 = 5;
    }
    (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_16:
    if (!v3)
      return;
    goto LABEL_17;
  }
}

void sub_1BF0A3ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  std::__shared_weak_count *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  if (v13)
  {
    std::__shared_weak_count::__release_weak(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationPolicy::initialRegisterRequestSent(SipRegistrationPolicy *this)
{
  time_t v2;
  ims *v3;
  uint64_t v4;
  tm *v5;
  void *__p[2];
  char v7;

  *((_QWORD *)this + 58) = *((_QWORD *)this + 57);
  v2 = time(0);
  *((_QWORD *)this + 49) = v2;
  v3 = (ims *)(*((_QWORD *)this + 184) + v2);
  std::string::basic_string[abi:ne180100]<0>(__p, "SentInitialRegister");
  SipRegistrationPolicy::updateNextRetryTime(this, v3, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  v4 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"sent initial REGISTER. No new registrations allowed until ", 58);
  *(_BYTE *)(v4 + 17) = 0;
  ims::formatTimeAndIntervalFromNow(*((ims **)this + 48), v4, v5);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  SipRegistrationPolicy::startEmergencyRegistrationTimer(this);
}

void sub_1BF0A4018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

time_t SipRegistrationPolicy::authChallengeReceived(SipRegistrationPolicy *this)
{
  time_t result;
  ims *v3;
  time_t v4;
  uint64_t v5;
  tm *v6;
  void *__p[2];
  char v8;

  result = time(0);
  v3 = (ims *)(*((_QWORD *)this + 184) + result);
  if (*((_QWORD *)this + 48) < (uint64_t)v3)
  {
    v4 = result;
    std::string::basic_string[abi:ne180100]<0>(__p, "AuthChallengeReceived");
    SipRegistrationPolicy::updateNextRetryTime(this, v3, (uint64_t)__p);
    if (v8 < 0)
      operator delete(__p[0]);
    *((_QWORD *)this + 49) = v4;
    v5 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"received 401 response. No new registrations allowed until ", 58);
    *(_BYTE *)(v5 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(*((ims **)this + 48), v5, v6);
    result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
  }
  return result;
}

void sub_1BF0A411C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipRegistrationPolicy::endingRegistration(SipRegistrationPolicy *this)
{
  SipTimerContainer::cancelAllTimers((SipRegistrationPolicy *)((char *)this + 224));
}

void SipRegistrationPolicy::clearFailureFlags(SipRegistrationPolicy *this)
{
  uint64_t v2;
  void *__p[2];
  char v4;

  v2 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"clearing registration failure flags", 35);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 52) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "ClearFailureFlags");
  SipRegistrationPolicy::updateNextRetryTime(this, 0, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
  *((_QWORD *)this + 49) = 0;
  SipRegistrationPolicy::clearLastProxyErrors(this);
}

void sub_1BF0A4200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipRegistrationPolicy::clearLastProxyErrors(SipRegistrationPolicy *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v1 = *((_QWORD *)this + 54);
  if (*((_QWORD *)this + 55) != v1)
  {
    v3 = 0;
    v4 = 408;
    do
    {
      v7 = 0u;
      v8 = 0u;
      v9 = 0u;
      v5[0] = &off_1E78B7238;
      v5[1] = &_bambiDomain;
      v6 = 0;
      ImsResult::operator=(v1 + v4, (uint64_t)v5);
      ImsResult::~ImsResult((ImsResult *)v5);
      ++v3;
      v1 = *((_QWORD *)this + 54);
      v4 += 480;
    }
    while (v3 < 0xEEEEEEEEEEEEEEEFLL * ((*((_QWORD *)this + 55) - v1) >> 5));
  }
}

void sub_1BF0A42D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void SipRegistrationPolicy::clearAllThrottling(ims **this)
{
  uint64_t v2;
  tm *v3;
  void *__p[2];
  char v5;

  SipTimerContainer::cancelAllTimers((SipTimerContainer *)(this + 28));
  if (this[48])
  {
    v2 = (*((uint64_t (**)(ims **))*this + 8))(this);
    (*((void (**)(ims **, uint64_t))*this + 2))(this, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"clearing throttling timer, previously set for ", 46);
    *(_BYTE *)(v2 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(this[48], v2, v3);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v2 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "ClearAllThrottling");
    SipRegistrationPolicy::updateNextRetryTime(this, 0, (uint64_t)__p);
    if (v5 < 0)
      operator delete(__p[0]);
    this[49] = 0;
  }
  *((_BYTE *)this + 2240) = 0;
}

void sub_1BF0A43BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

time_t SipRegistrationPolicy::scheduleRetry(SipRegistrationPolicy *this, const ImsResult *a2, uint64_t a3, int a4)
{
  time_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  time_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  ims *v19;
  uint64_t v20;
  uint64_t v21;
  tm *v22;
  void *__p[2];
  char v25;

  v7 = time(0);
  v8 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"scheduleRetry: now is ", 22);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (a4)
    (*(void (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 504))(this);
  v9 = *(_QWORD *)this;
  if (a3)
  {
    v10 = "scheduleRetry: set retryInterval = ";
  }
  else
  {
    a3 = (*(uint64_t (**)(SipRegistrationPolicy *))(v9 + 208))(this);
    v9 = *(_QWORD *)this;
    v10 = "scheduleRetry: got retryInterval = ";
  }
  v11 = (*(uint64_t (**)(SipRegistrationPolicy *))(v9 + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)v10, 35);
  *(_BYTE *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  v12 = *((_QWORD *)this + 50);
  if (v12)
  {
    v13 = *((_QWORD *)this + 51) + v12;
    v14 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"scheduleRetry: barringEndAt ", 28);
    *(_BYTE *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    v15 = v13 <= v7;
    v16 = v13 - v7;
    if (!v15)
    {
      v17 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"scheduleRetry: retryIntervalOfBarring = ", 40);
      *(_BYTE *)(v17 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v17 + 17) = 0;
      if (v16 <= a3)
      {
        *((_QWORD *)this + 52) = 0;
      }
      else
      {
        *((_QWORD *)this + 52) = v16 - a3;
        v18 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
        (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"scheduleRetry: barring time is longer than the original retry interval: set retryInterval = ", 92);
        *(_BYTE *)(v18 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v18 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v18 + 17) = 0;
        a3 = v16;
      }
    }
  }
  v19 = (ims *)(a3 + v7);
  if (*((_QWORD *)this + 48) >= (uint64_t)v19)
  {
    v20 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"keeping old retry time", 22);
    *(_BYTE *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v20 + 17) = 0;
  }
  else
  {
    *((_QWORD *)this + 49) = v7;
    std::string::basic_string[abi:ne180100]<0>(__p, "ScheduleRetry");
    SipRegistrationPolicy::updateNextRetryTime(this, v19, (uint64_t)__p);
    if (v25 < 0)
      operator delete(__p[0]);
  }
  v21 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"registration retry is scheduled for ", 36);
  *(_BYTE *)(v21 + 17) = 0;
  ims::formatTimeAndIntervalFromNow(*((ims **)this + 48), v21, v22);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v21 + 17) = 0;
  return SipRegistrationPolicy::startTimer(this);
}

void sub_1BF0A47BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

time_t SipRegistrationPolicy::handleBarringAccessAlleviated(SipRegistrationPolicy *this)
{
  uint64_t v2;
  uint64_t v3;
  ims *v4;
  uint64_t v5;
  tm *v6;
  uint64_t v7;
  tm *v8;
  uint64_t v9;
  uint64_t v10;
  tm *v11;
  time_t result;
  uint64_t v13;
  _QWORD *v14;
  const char *v15;
  uint64_t v16;
  void *__p[2];
  char v18;

  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)this + 29, (unsigned __int8 *)&kThrottleTimer)|| *((uint64_t *)this + 48) <= 0)
  {
    v13 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v13);
    v14 = *(_QWORD **)(v13 + 8);
    v15 = "handleBarringAccessAlleviated: no-op: registration is currently not being throttled";
    v16 = 83;
LABEL_9:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    *(_BYTE *)(v13 + 17) = 0;
    result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    return result;
  }
  if (!*((_QWORD *)this + 50))
  {
    v13 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v13);
    v14 = *(_QWORD **)(v13 + 8);
    v15 = "handleBarringAccessAlleviated: no-op: registration barring is not active";
    v16 = 72;
    goto LABEL_9;
  }
  v2 = *((_QWORD *)this + 52);
  v3 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"handleBarringAccessAlleviated: retryIntervalExtendedByBarring=", 62);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  if (!v2)
  {
    v13 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v13);
    v14 = *(_QWORD **)(v13 + 8);
    v15 = "handleBarringAccessAlleviated: no-op: registration barring did not add extra wait time";
    v16 = 86;
    goto LABEL_9;
  }
  v4 = (ims *)(*((_QWORD *)this + 48) - v2);
  v5 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"handleBarringAccessAlleviated: existing nextRetryTime=", 54);
  *(_BYTE *)(v5 + 17) = 0;
  ims::formatTimeAndIntervalFromNow(*((ims **)this + 48), v5, v6);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  v7 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"handleBarringAccessAlleviated: actual nextRetryTime=", 52);
  *(_BYTE *)(v7 + 17) = 0;
  ims::formatTimeAndIntervalFromNow(v4, v7, v8);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  SipTimerContainer::cancelTimer((SipRegistrationPolicy *)((char *)this + 224), &kThrottleTimer);
  v9 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"handleBarringAccessAlleviated: canceled current ThrottleTimer", 61);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "ScheduleRetry");
  SipRegistrationPolicy::updateNextRetryTime(this, v4, (uint64_t)__p);
  if (v18 < 0)
    operator delete(__p[0]);
  v10 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"handleBarringAccessAlleviated: adjusted and scheduled registration retry for ", 77);
  *(_BYTE *)(v10 + 17) = 0;
  ims::formatTimeAndIntervalFromNow(*((ims **)this + 48), v10, v11);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  return SipRegistrationPolicy::startTimer(this);
}

void sub_1BF0A4B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipRegistrationPolicy::emergencyRegistrationTimeout(SipRegistrationPolicy *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v15 = v3;
    if (v3)
    {
      v4 = v3;
      v5 = *((_QWORD *)this + 46);
      v14 = v5;
      if (v5)
      {
        v11 = 0u;
        v12 = 0u;
        v13 = 0u;
        v9[0] = &off_1E78B7238;
        v9[1] = &_bambiDomain;
        v10 = 1073741842;
        v6 = ImsResult::operator<<<char [31]>((uint64_t)v9, "Emergency registration timeout");
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, v6);
        ImsResult::~ImsResult((ImsResult *)v9);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF0A4C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 32);
  _Unwind_Resume(a1);
}

void SipRegistrationPolicy::handleTimer(SipRegistrationPolicy *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  const char *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  v2 = a2;
  v4 = a2[23];
  v5 = *((_QWORD *)a2 + 1);
  if ((v4 & 0x80u) == 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  if (v6 != 13)
    goto LABEL_12;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, "ThrottleTimer", v5))
      goto LABEL_12;
LABEL_24:
    v13 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"registration throttling timer fired", 35);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    SipRegistrationPolicy::retryRegistration(a1);
    return;
  }
  if (!a2[23])
    goto LABEL_24;
  v7 = "ThrottleTimer";
  v8 = a2;
  v9 = a2[23];
  while (*v8 == *(unsigned __int8 *)v7)
  {
    ++v8;
    ++v7;
    if (!--v9)
      goto LABEL_24;
  }
LABEL_12:
  v10 = qword_1ED70CBD0;
  if (byte_1ED70CBDF >= 0)
    v10 = byte_1ED70CBDF;
  if (v6 != v10)
    goto LABEL_26;
  if (byte_1ED70CBDF >= 0)
    v11 = &SipRegistrationPolicy::kSubscriptionRetryTimerName;
  else
    v11 = (uint64_t *)SipRegistrationPolicy::kSubscriptionRetryTimerName;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v2, v11, v5))
      goto LABEL_26;
LABEL_41:
    v18 = (std::__shared_weak_count *)*((_QWORD *)a1 + 47);
    if (v18)
    {
      v19 = std::__shared_weak_count::lock(v18);
      if (v19)
      {
        v20 = v19;
        v21 = *((_QWORD *)a1 + 46);
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 96))(v21);
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
    return;
  }
  if (!(_DWORD)v4)
    goto LABEL_41;
  v12 = v2;
  while (*v12 == *(unsigned __int8 *)v11)
  {
    ++v12;
    v11 = (uint64_t *)((char *)v11 + 1);
    if (!--v4)
      goto LABEL_41;
  }
LABEL_26:
  if (!(*(unsigned int (**)(SipRegistrationPolicy *))(*(_QWORD *)a1 + 528))(a1))
    return;
  v14 = v2[23];
  if ((v14 & 0x80u) == 0)
    v15 = v2[23];
  else
    v15 = *((_QWORD *)v2 + 1);
  v16 = qword_1ED70CBB8;
  if (byte_1ED70CBC7 >= 0)
    v16 = byte_1ED70CBC7;
  if (v15 != v16)
    return;
  if (byte_1ED70CBC7 >= 0)
    v17 = &SipRegistrationPolicy::kEmergencyRegistrationTimer;
  else
    v17 = (uint64_t *)SipRegistrationPolicy::kEmergencyRegistrationTimer;
  if ((v14 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v2, v17, *((_QWORD *)v2 + 1)))
      return;
LABEL_51:
    (*(void (**)(SipRegistrationPolicy *))(*(_QWORD *)a1 + 96))(a1);
    return;
  }
  if (!v2[23])
    goto LABEL_51;
  while (*v2 == *(unsigned __int8 *)v17)
  {
    ++v2;
    v17 = (uint64_t *)((char *)v17 + 1);
    if (!--v14)
      goto LABEL_51;
  }
}

void sub_1BF0A4F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipRegistrationPolicy::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  SipRegistrationPolicy::handleTimer((SipRegistrationPolicy *)(a1 - 176), a2);
}

time_t SipRegistrationPolicy::handleNonSipError(SipRegistrationPolicy *this, const ImsResult *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  const ImsResult *v6;

  v4 = *(_QWORD *)this;
  if (a3)
  {
    v5 = (*(uint64_t (**)(SipRegistrationPolicy *, const ImsResult *))(v4 + 64))(this, a2);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"handleNonSipError(causedByUAC): scheduleRetry(preferredRetryInterval=", 69);
    *(_BYTE *)(v5 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)", useNextProxy=false)", 21);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    return SipRegistrationPolicy::scheduleRetry(this, v6, *((_QWORD *)this + 50), 0);
  }
  else if ((*(unsigned int (**)(SipRegistrationPolicy *, _QWORD))(v4 + 416))(this, 0))
  {
    return SipRegistrationPolicy::handleGeneralError(this, a2);
  }
  else
  {
    return -1;
  }
}

uint64_t SipRegistrationPolicy::handleGeneralError(SipRegistrationPolicy *this, const ImsResult *a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v4 = *((_QWORD *)this + 54);
  if (v4)
    v5 = v4 == *((_QWORD *)this + 55);
  else
    v5 = 1;
  if (!v5)
    ImsResult::operator=(v4 + 480 * *((_QWORD *)this + 57) + 408, (uint64_t)a2);
  ++*((_DWORD *)this + 50);
  SipRegistrationPolicy::clearAllThrottling((ims **)this);
  v6 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"handling general registration error #", 37);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (!*((_BYTE *)this + 220))
  {
    v7 = *((_DWORD *)this + 50);
    v8 = *((_DWORD *)this + 455);
    v9 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v9);
    v10 = *(_QWORD **)(v9 + 8);
    if (v7 <= v8)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"still have ", 11);
      *(_BYTE *)(v9 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v9 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" more re-registration attempts", 30);
      *(_BYTE *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v9 + 17) = 0;
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"too many re-registration errors. Next attempt will be an initial registration.", 78);
      *(_BYTE *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v9 + 17) = 0;
      (*(void (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 256))(this);
    }
  }
  v11 = SipRegistrationPolicy::countOfProxiesWithErrors(this);
  v12 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)this + 55) - *((_QWORD *)this + 54)) >> 5);
  v13 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v13);
  v14 = *(_QWORD **)(v13 + 8);
  if (v12 == v11)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"received general errors from all proxies", 40);
    v15 = 19;
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"received general errors from ", 29);
    *(_BYTE *)(v13 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" of ", 4);
    *(_BYTE *)(v13 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" proxies", 8);
    v15 = 18;
  }
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  return (*(uint64_t (**)(SipRegistrationPolicy *, const ImsResult *))(*(_QWORD *)this + 8 * v15))(this, a2);
}

BOOL SipRegistrationPolicy::isFatalError(SipRegistrationPolicy *this, int a2)
{
  char *v3;

  v3 = (char *)this + 2280;
  if (SipResponseCodeMap::empty((SipRegistrationPolicy *)((char *)this + 2280)))
    return (a2 & 0xFFFFFFFD) == 400;
  else
    return SipResponseCodeMap::containsResponseCodeForMethod((uint64_t)v3, (void **)"REGISTER", a2, 0);
}

BOOL SipRegistrationPolicy::isForbiddenUserError(SipRegistrationPolicy *this, int a2)
{
  char *v3;

  v3 = (char *)this + 2312;
  if (SipResponseCodeMap::empty((SipRegistrationPolicy *)((char *)this + 2312)))
    return (a2 - 403) < 2;
  else
    return SipResponseCodeMap::containsResponseCodeForMethod((uint64_t)v3, (void **)"REGISTER", a2, 0);
}

uint64_t SipRegistrationPolicy::isForbiddenCountryError(SipRegistrationPolicy *this, const SipResponse *a2)
{
  uint64_t v3;
  std::string __p;

  if (*((_DWORD *)a2 + 22) != 403)
    return 0;
  memset(&__p, 0, sizeof(__p));
  SipMessage::reasonText(a2, &__p);
  v3 = (*(uint64_t (**)(SipRegistrationPolicy *, std::string *))(*(_QWORD *)this + 128))(this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v3;
}

void sub_1BF0A5420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SipRegistrationPolicy::isForbiddenCountryReasonText(uint64_t a1, uint64_t a2)
{
  const char *v2;
  const char *v3;

  if (*(char *)(a2 + 23) >= 0)
    v2 = (const char *)a2;
  else
    v2 = *(const char **)a2;
  if (byte_1ED70E6AF >= 0)
    v3 = (const char *)&kResponseServiceNotAllowedInThisLocation;
  else
    v3 = (const char *)kResponseServiceNotAllowedInThisLocation;
  return strcasecmp(v2, v3) == 0;
}

uint64_t SipRegistrationPolicy::isWifiAccessNetwork(std::__shared_weak_count **this)
{
  SipRegistrationPolicy *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _BOOL4 v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v1 = (SipRegistrationPolicy *)this;
  v2 = this[47];
  if (v2 && (v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v4 = v3;
    v5 = *((_QWORD *)v1 + 46);
    v6 = v5 != 0;
    if (v5)
      LODWORD(v1) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v6 = 0;
  }
  return v6 & v1;
}

