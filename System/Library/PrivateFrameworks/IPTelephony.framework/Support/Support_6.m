void sub_1BF0A5528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipRegistrationPolicy::handleDeregistrationError(ims **this, uint64_t **a2)
{
  uint64_t **v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;

  if (a2[1] == &_posixDomain)
    goto LABEL_5;
  v4 = a2;
  do
  {
    v5 = v4;
    v4 = (uint64_t **)v4[4];
  }
  while (v4);
  if (v5[1] == &_posixDomain)
  {
LABEL_5:
    v6 = a2;
    do
    {
      v7 = v6;
      v6 = (uint64_t **)v6[4];
    }
    while (v6);
    if (ImsResultSet::containsResult((ImsResultSet *)(this + 249), *((_DWORD *)v7 + 4)))
    {
      v8 = (*((uint64_t (**)(ims **))*this + 8))(this);
      (*((void (**)(ims **, uint64_t))*this + 2))(this, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"clearing throttling due to socket error: ", 41);
      *(_BYTE *)(v8 + 17) = 0;
      ((void (*)(uint64_t **, uint64_t))(*a2)[2])(a2, v8);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      SipRegistrationPolicy::clearAllThrottling(this);
    }
  }
}

time_t SipRegistrationPolicy::handleRegistrationError(SipRegistrationPolicy *this, const SipResponse *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  time_t v7;
  time_t v8;
  unsigned int *v10;
  unsigned int *v11;
  const ImsResult *v12;
  int v13;
  void (**v14)(ImsResult *__hidden);
  uint64_t *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (((*(uint64_t (**)(SipRegistrationPolicy *, _QWORD))(*(_QWORD *)this + 416))(this, 0) & 1) != 0)
  {
    v4 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"wifi access network: ", 21);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 136))(this);
    std::ostream::operator<<();
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if ((*(unsigned int (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 136))(this)
      && (*(unsigned int (**)(SipRegistrationPolicy *, const SipResponse *))(*(_QWORD *)this + 120))(this, a2))
    {
      v5 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Forbidden Country Situation", 27);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      v6 = *((_DWORD *)a2 + 22) == 0;
      v21 = 0;
      v22 = 0;
      v14 = &off_1E78B7238;
      v15 = &_bambiDomain;
      v16 = v6 << 30;
      v19 = 0;
      v20 = 0;
      v17 = 0;
      v18 = 0;
      v7 = (*(uint64_t (**)(SipRegistrationPolicy *, void (***)(ImsResult *__hidden)))(*(_QWORD *)this + 176))(this, &v14);
LABEL_14:
      v8 = v7;
      ImsResult::~ImsResult((ImsResult *)&v14);
      return v8;
    }
    if ((*(unsigned int (**)(SipRegistrationPolicy *, _QWORD))(*(_QWORD *)this + 112))(this, *((unsigned int *)a2 + 22)))
    {
      return (*(uint64_t (**)(SipRegistrationPolicy *, const SipResponse *))(*(_QWORD *)this + 168))(this, a2);
    }
    *((_DWORD *)this + 52) = 0;
    if (*((_DWORD *)a2 + 22) == 423)
    {
      v10 = (unsigned int *)SipMessage::header<SipRetryAfterHeader>((uint64_t)a2);
      if (v10)
      {
        v11 = v10;
        SipResultDomain::makeResult(a2, (uint64_t)&v14);
        v7 = SipRegistrationPolicy::scheduleRetry(this, v12, v11[26], 0);
        goto LABEL_14;
      }
    }
    else if ((*(unsigned int (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 104))(this))
    {
      v13 = *((_DWORD *)a2 + 22) == 0;
      v21 = 0;
      v22 = 0;
      v14 = &off_1E78B7238;
      v15 = &_bambiDomain;
      v16 = v13 << 30;
      v19 = 0;
      v20 = 0;
      v17 = 0;
      v18 = 0;
      v7 = (*(uint64_t (**)(SipRegistrationPolicy *, void (***)(ImsResult *__hidden)))(*(_QWORD *)this + 160))(this, &v14);
      goto LABEL_14;
    }
    SipResultDomain::makeResult(a2, (uint64_t)&v14);
    v7 = SipRegistrationPolicy::handleGeneralError(this, (const ImsResult *)&v14);
    goto LABEL_14;
  }
  SipRegistrationPolicy::clearAllThrottling((ims **)this);
  return -1;
}

void sub_1BF0A58FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationPolicy::handleMaxReRegistrationErrors(uint64_t this)
{
  *(_BYTE *)(this + 220) = 1;
  *(_DWORD *)(this + 216) = 0;
  return this;
}

uint64_t SipRegistrationPolicy::handleAuthChallengeError(ims **this, const ImsResult *a2)
{
  int v4;
  uint64_t v5;
  ims *v6;
  int v7;
  ims *v8;
  uint64_t v9;
  _QWORD v11[2];
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  SipRegistrationPolicy::clearAllThrottling(this);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v11[0] = &off_1E78B7238;
  v11[1] = &_bambiDomain;
  v12 = 1073741832;
  if (*((uint64_t **)a2 + 1) == &_bambiDomain)
  {
    v4 = *((_DWORD *)a2 + 4);
    ImsResult::~ImsResult((ImsResult *)v11);
    if (v4 == 1073741832)
    {
      v5 = (*((uint64_t (**)(ims **))*this + 8))(this);
      (*((void (**)(ims **, uint64_t))*this + 2))(this, v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"retrying on auth challenge sync failure", 39);
      *(_BYTE *)(v5 + 17) = 0;
      return 1;
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)v11);
  }
  v6 = this[54];
  if (v6 && v6 != this[55])
    ImsResult::operator=((uint64_t)v6 + 480 * (_QWORD)this[57] + 408, (uint64_t)a2);
  v7 = SipRegistrationPolicy::countOfProxiesWithErrors((SipRegistrationPolicy *)this);
  v8 = *this;
  if (0xEEEEEEEEEEEEEEEFLL * ((this[55] - this[54]) >> 5) == v7)
  {
    v9 = (*((uint64_t (**)(ims **))v8 + 8))(this);
    (*((void (**)(ims **, uint64_t))*this + 2))(this, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"received auth challenge error from all proxies", 46);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    (*((void (**)(ims **, const ImsResult *))*this + 19))(this, a2);
    return 0;
  }
  if ((*((unsigned int (**)(ims **))v8 + 41))(this))
    (*((void (**)(ims **))*this + 63))(this);
  return 1;
}

uint64_t SipRegistrationPolicy::countOfProxiesWithErrors(SipRegistrationPolicy *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 54);
  if (*((_QWORD *)this + 55) == v1)
    return 0;
  v3 = 0;
  LODWORD(v4) = 0;
  v5 = 424;
  do
  {
    v4 = v4
       + (*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + v5 - 8) + 24))(*(_QWORD *)(v1 + v5 - 8), *(unsigned int *)(v1 + v5));
    ++v3;
    v1 = *((_QWORD *)this + 54);
    v5 += 480;
  }
  while (v3 < 0xEEEEEEEEEEEEEEEFLL * ((*((_QWORD *)this + 55) - v1) >> 5));
  return v4;
}

uint64_t SipRegistrationPolicy::retryTimeFromResult(SipRegistrationPolicy *this, const ImsResult *a2)
{
  const void *v4;
  void *v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;

  if (*((uint64_t **)a2 + 1) != &SipResultDomain::_domain)
    return -1;
  if (!SipRegistrationConfig::honorRetryAfterForStatusCode((SipRegistrationPolicy *)((char *)this + 480), *((_DWORD *)a2 + 4)))return -1;
  v4 = (const void *)*((_QWORD *)a2 + 5);
  if (!v4)
    return -1;
  if (!v5)
    return -1;
  v6 = (unsigned int *)SipMessage::header<SipRetryAfterHeader>((uint64_t)v5);
  if (!v6)
    return -1;
  v7 = v6;
  v8 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Using Retry-After header value: ", 32);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  return v7[26];
}

time_t SipRegistrationPolicy::handleGeneralErrorFromOneProxy(SipRegistrationPolicy *this, const ImsResult *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const ImsResult *v8;

  v3 = SipRegistrationPolicy::retryTimeFromResult(this, a2);
  if (v3 == -1)
    v3 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 208))(this);
  v4 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 328))(this);
  v5 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v5);
  if ((v4 & 1) != 0)
  {
    v6 = "time to switch proxies";
    v7 = 22;
  }
  else
  {
    v6 = "will try again with the same proxy.";
    v7 = 35;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)v6, v7);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  return SipRegistrationPolicy::scheduleRetry(this, v8, v3, v4);
}

uint64_t SipRegistrationPolicy::handleGeneralErrorFromAllProxies(SipRegistrationPolicy *this, const ImsResult *a2)
{
  return (*(uint64_t (**)(SipRegistrationPolicy *, const ImsResult *))(*(_QWORD *)this + 144))(this, a2);
}

time_t SipRegistrationPolicy::handleFatalError(SipRegistrationPolicy *this, const ImsResult *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const ImsResult *v16;

  v3 = *((_QWORD *)this + 54);
  if (v3)
    v4 = v3 == *((_QWORD *)this + 55);
  else
    v4 = 1;
  if (!v4)
    ImsResult::operator=(v3 + 480 * *((_QWORD *)this + 57) + 408, (uint64_t)a2);
  ++*((_DWORD *)this + 51);
  SipRegistrationPolicy::clearAllThrottling((ims **)this);
  v5 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"handling fatal registration error #", 35);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (*((_BYTE *)this + 515))
  {
    v6 = *((_DWORD *)this + 51);
    v7 = *((_DWORD *)this + 370);
    v8 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 48))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v8);
    v9 = *(_QWORD **)(v8 + 8);
    if (v6 >= v7)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"too many fatal registration errors.  Disabling IMS registration.", 64);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      SipRegistrationPolicy::setRegistrationMode((unsigned int *)this, (unsigned int *)&SipRegistrationMode::kModeDisabled);
      return -1;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"received fatal registration response.  ", 39);
    *(_BYTE *)(v8 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v8 + 17) = 0;
    v10 = *(_QWORD **)(v8 + 8);
    v11 = " more and you're done.";
    v12 = 22;
  }
  else
  {
    v8 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v8);
    v10 = *(_QWORD **)(v8 + 8);
    v11 = "disabled mode is, uh, disabled. I'll keep retrying.";
    v12 = 51;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  v13 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 328))(this);
  if ((v13 & 1) == 0)
  {
    v14 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"this is a re-registration. Trying to use the same proxy.", 56);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
  }
  v15 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 216))(this);
  return SipRegistrationPolicy::scheduleRetry(this, v16, v15, v13);
}

void SipRegistrationPolicy::setRegistrationMode(unsigned int *a1, unsigned int *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v14 = 0;
  v15 = 0;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a1 + 47);
  if (!v3)
  {
    v5 = 0;
    goto LABEL_10;
  }
  v5 = std::__shared_weak_count::lock(v3);
  v15 = v5;
  if (!v5 || (v6 = *((_QWORD *)a1 + 46), (v14 = v6) == 0))
  {
LABEL_10:
    v9 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"setRegistrationMode: no delegate", 32);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (!v5)
      return;
    goto LABEL_11;
  }
  if (a1[106] != *a2)
  {
    v7 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"changing registration mode from ", 32);
    *(_BYTE *)(v7 + 17) = 0;
    operator<<(v7, a1 + 106);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" to ", 4);
    *(_BYTE *)(v7 + 17) = 0;
    operator<<(v7, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    a1[106] = *a2;
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 192))(a1);
    if (a1[106] != SipRegistrationMode::kModeNormal)
    {
      v8 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 64))(a1);
      (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"not resetting registration mode until we see one of these events: ", 66);
      *(_BYTE *)(v8 + 17) = 0;
      deviceEventsToString(a1[446], __p);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 32))(v8, __p);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (v13 < 0)
        operator delete(__p[0]);
    }
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v6 + 32))(v6, a2);
  }
LABEL_11:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1BF0A624C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationPolicy::handleForbiddenCountry(SipRegistrationPolicy *this, const ImsResult *a2)
{
  SipRegistrationPolicy::setRegistrationMode((unsigned int *)this, (unsigned int *)&SipRegistrationMode::kModeDisabledCountry);
  return -1;
}

uint64_t SipRegistrationPolicy::handleWarningHeader()
{
  return 0;
}

time_t SipRegistrationPolicy::handleForbiddenUser(SipRegistrationPolicy *this, const SipResponse *a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned __int8 *v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  time_t v15;
  uint64_t v16;
  time_t v17;
  uint64_t v18;
  const ImsResult *v19;
  int v20;
  uint64_t v21;
  _OWORD v23[4];
  uint64_t v24;
  void *v25[2];
  char v26;

  v24 = 0;
  memset(v23, 0, sizeof(v23));
  SipResultDomain::makeResult(a2, (uint64_t)v23);
  v4 = *((_QWORD *)this + 54);
  if (v4)
    v5 = v4 == *((_QWORD *)this + 55);
  else
    v5 = 1;
  if (!v5)
    ImsResult::operator=(v4 + 480 * *((_QWORD *)this + 57) + 408, (uint64_t)v23);
  *((_BYTE *)this + 220) = 1;
  *((_DWORD *)this + 54) = 0;
  ++*((_DWORD *)this + 52);
  SipRegistrationPolicy::clearAllThrottling((ims **)this);
  v6 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 224))(this);
  v7 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"handling consecutive forbidden/unknown user registration error #", 64);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (*((_DWORD *)this + 52) == *((_DWORD *)this + 53))
  {
    if (*((_BYTE *)this + 514) && *((_DWORD *)this + 106) != SipRegistrationMode::kModeLimitedAccess)
    {
      v14 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 48))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"received Forbidden/Unknown responses from all proxies.  Falling back to limited-access mode.", 92);
      *(_BYTE *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v14 + 17) = 0;
      SipRegistrationPolicy::setRegistrationMode((unsigned int *)this, (unsigned int *)&SipRegistrationMode::kModeLimitedAccess);
      v15 = time(0);
      *((_QWORD *)this + 49) = v15;
      v16 = *((_QWORD *)this + 184);
      std::string::basic_string[abi:ne180100]<0>(v25, "LimitedAccessThrottling");
      SipRegistrationPolicy::updateNextRetryTime(this, (ims *)(v16 + v15), (uint64_t)v25);
      if (v26 < 0)
        operator delete(v25[0]);
      SipRegistrationPolicy::setProxyOffset(this, 0);
      goto LABEL_22;
    }
    v8 = *(_QWORD *)this;
    if (*((_BYTE *)this + 515))
    {
      v9 = (*(uint64_t (**)(SipRegistrationPolicy *))(v8 + 48))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"received Forbidden/Unknown responses from all proxies.  Disabling IMS registration.", 83);
      *(_BYTE *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v9 + 17) = 0;
      SipRegistrationPolicy::setRegistrationMode((unsigned int *)this, (unsigned int *)&SipRegistrationMode::kModeDisabled);
LABEL_22:
      v17 = -1;
      goto LABEL_27;
    }
    v18 = (*(uint64_t (**)(SipRegistrationPolicy *))(v8 + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"disabled mode is, uh, disabled. I'll keep retrying.", 51);
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v18 + 17) = 0;
  }
  else
  {
    v10 = (unsigned int *)SipMessage::header<SipRetryAfterHeader>((uint64_t)a2);
    if (v10 && *((_BYTE *)this + 2104))
      v6 = v10[26];
    v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)a2 + 4, "Warning");
    if (v11)
    {
      v12 = (const void *)*((_QWORD *)v11 + 5);
      if (v12)
      {
        if (v13)
        {
          if (((*(uint64_t (**)(SipRegistrationPolicy *, void *))(*(_QWORD *)this + 184))(this, v13) & 1) != 0)
            goto LABEL_22;
        }
      }
    }
  }
  v20 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 328))(this);
  if ((v20 & 1) == 0)
  {
    v21 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"this is a re-registration. Trying to use the same proxy.", 56);
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v21 + 17) = 0;
  }
  v17 = SipRegistrationPolicy::scheduleRetry(this, v19, v6, v20);
LABEL_27:
  ImsResult::~ImsResult((ImsResult *)v23);
  return v17;
}

void sub_1BF0A6674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (*(char *)(v9 - 33) < 0)
    operator delete(*(void **)(v9 - 56));
  ImsResult::~ImsResult((ImsResult *)&a9);
  _Unwind_Resume(a1);
}

BOOL SipRegistrationPolicy::shouldWaitForCallsToEnd(SipRegistrationPolicy *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = 0;
  v6 = *((_QWORD *)this + 46);
  if (*((_BYTE *)this + 2137) && v6)
    v5 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 120))(v6)
      && (v7 = *((_QWORD *)this + 59), v7 != -1)
      && *((_QWORD *)this + 57) != v7;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v5;
}

void sub_1BF0A6778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipRegistrationPolicy::handleAllCallsEnded(SipRegistrationPolicy *this)
{
  uint64_t v2;

  if (*((_BYTE *)this + 2240))
  {
    *((_BYTE *)this + 2240) = 0;
    v2 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"all calls have ended. Retrying registration.", 44);
    *(_BYTE *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v2 + 17) = 0;
    SipRegistrationPolicy::retryRegistration(this);
  }
}

uint64_t SipRegistrationPolicy::handleRegistrationChange(_BYTE *a1, void *a2, _DWORD *a3)
{
  _BYTE *v6;
  _BYTE *v7;
  time_t Retry;
  time_t v9;
  time_t v11;
  uint64_t v12;
  int v13;
  const ImsResult *v14;
  int v15;
  const char *v16;
  time_t v17;
  uint64_t v19;
  size_t v20;
  int v21;
  _QWORD v22[2];
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  if (*(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)a2 + 40))(a2) == 2)
  {
    if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 528))(a1))
      SipTimerContainer::cancelTimer((SipTimerContainer *)(a1 + 224), (std::string *)&SipRegistrationPolicy::kEmergencyRegistrationTimer);
    if (((*(uint64_t (**)(void *))(*(_QWORD *)a2 + 48))(a2) & 1) == 0)
    {
      if (a1[220])
        a1[220] = 0;
      else
        ++*((_DWORD *)a1 + 54);
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 192))(a1);
      *((_QWORD *)a1 + 59) = *((_QWORD *)a1 + 57);
    }
    return -1;
  }
  if (*(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)a2 + 40))(a2) != 3)
    return -1;
  a1[220] = 1;
  *((_DWORD *)a1 + 54) = 0;
  if (!v6)
    return -1;
  v7 = v6;
  if (v6[60])
  {
    Retry = SipRegistrationNotification::secondsUntilNextRetry((SipRegistrationNotification *)a2);
    v9 = *((_QWORD *)a1 + 183);
    if (v9 >= Retry || v9 == 0)
      v11 = Retry;
    else
      v11 = *((_QWORD *)a1 + 183);
    if ((unint64_t)(Retry - 1) >= 0xFFFFFFFFFFFFFFFELL)
      v12 = *((_QWORD *)a1 + 183);
    else
      v12 = v11;
    v13 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 336))(a1);
    v15 = *((_DWORD *)v7 + 14);
    if (v13)
    {
      if (v15 != 21)
      {
        v16 = "moving to next proxy due to registration change";
LABEL_33:
        v19 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
        (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v19);
        v20 = strlen(v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)v16, v20);
        *(_BYTE *)(v19 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v19 + 17) = 0;
        v21 = 1;
LABEL_35:
        v24 = 0u;
        v25 = 0u;
        v26 = 0u;
        v22[0] = &off_1E78B7238;
        v22[1] = &_bambiDomain;
        v23 = 1073741839;
        v17 = SipRegistrationPolicy::scheduleRetry((SipRegistrationPolicy *)a1, v14, v12, v21);
        ImsResult::~ImsResult((ImsResult *)v22);
        return v17;
      }
    }
    else if (v15 == 2 && a1[2144])
    {
      v16 = "moving to next proxy due to P-CSCF restoration";
      goto LABEL_33;
    }
    v21 = 0;
    goto LABEL_35;
  }
  if ((*((_DWORD *)v6 + 14) - 3) > 1)
    return -1;
  SipTimerContainer::cancelAllTimers((SipTimerContainer *)(a1 + 224));
  v17 = -1;
  if (*((_DWORD *)v7 + 14) == 3 && *a3 == 2)
    SipRegistrationPolicy::clearAllThrottling((ims **)a1);
  return v17;
}

void sub_1BF0A6A9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationPolicy::printProxyErrors(uint64_t this, ImsOutStream *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v10;

  v3 = *(_QWORD *)(this + 432);
  v4 = *(_QWORD *)(this + 440);
  if (v3 != v4)
  {
    v6 = a3;
    v7 = v3 + 408;
    do
    {
      std::string::basic_string[abi:ne180100](__p, v6, 32);
      (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 32))(a2, __p);
      v8 = v7 - 408;
      (*(void (**)(uint64_t, ImsOutStream *))(*(_QWORD *)(v7 - 408) + 40))(v7 - 408, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
      *((_BYTE *)a2 + 17) = 0;
      if (v10 < 0)
        operator delete(__p[0]);
      if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 8) + 24))(*(_QWORD *)(v7 + 8), *(unsigned int *)(v7 + 16)))
      {
        (*(void (**)(uint64_t, ImsOutStream *))(*(_QWORD *)v7 + 16))(v7, a2);
      }
      else
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"no errors", 9);
        *((_BYTE *)a2 + 17) = 0;
      }
      this = (*(uint64_t (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((_BYTE *)a2 + 17) = 0;
      v7 += 480;
    }
    while (v8 + 480 != v4);
  }
  return this;
}

void sub_1BF0A6BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipRegistrationPolicy::printPolicyInfo(SipRegistrationPolicy *this, ImsOutStream *a2)
{
  const char *v4;
  uint64_t v5;
  tm *v6;
  tm *v7;
  uint64_t v8;
  uint64_t result;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Initial reg:   ", 19);
  *((_BYTE *)a2 + 17) = 0;
  if (*((_BYTE *)this + 220))
    v4 = "yes";
  else
    v4 = "no";
  if (*((_BYTE *)this + 220))
    v5 = 3;
  else
    v5 = 2;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)v4, v5);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Re-reg count:  ", 19);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (*((_QWORD *)this + 49))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Last Throttle: ", 19);
    *((_BYTE *)a2 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(*((ims **)this + 48), (uint64_t)a2, v6);
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
  }
  if (*((_QWORD *)this + 48))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Next retry:    ", 19);
    *((_BYTE *)a2 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(*((ims **)this + 48), (uint64_t)a2, v7);
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Mode:                 ", 26);
  *((_BYTE *)a2 + 17) = 0;
  v8 = operator<<((uint64_t)a2, (unsigned int *)this + 106);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (*((_DWORD *)this + 50) || *((_DWORD *)this + 52) || *((_DWORD *)this + 51))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Policy failures: ", 21);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"      General:    ", 18);
    *((_BYTE *)a2 + 17) = 0;
    std::ostream::operator<<();
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"      Forbidden:  ", 18);
    *((_BYTE *)a2 + 17) = 0;
    std::ostream::operator<<();
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"      Fatal:      ", 18);
    *((_BYTE *)a2 + 17) = 0;
    std::ostream::operator<<();
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Last error from each proxy: ", 32);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
    return SipRegistrationPolicy::printProxyErrors((uint64_t)this, a2, 6);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Policy failures: none", 25);
    *((_BYTE *)a2 + 17) = 0;
    result = (*(uint64_t (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
  }
  return result;
}

uint64_t SipRegistrationPolicy::emergencyStateExited(SipRegistrationPolicy *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 528))(this);
  if ((_DWORD)result)
  {
    *((_BYTE *)this + 220) = 1;
    *((_DWORD *)this + 54) = 0;
  }
  return result;
}

void SipRegistrationPolicy::logPrefix(SipRegistrationPolicy *this, ImsOutStream *a2)
{
  void *__p[2];
  char v4;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 480))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
  *((_BYTE *)a2 + 17) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1BF0A6FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipRegistrationPolicy::checkTimers(SipRegistrationPolicy *this, ims *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  tm *v13;
  uint64_t v14;
  tm *v15;
  void *__p[2];
  char v17;

  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)this + 29, "ThrottleTimer"))
  {
    v4 = *((_QWORD *)this + 48);
    if (v4 >= 1)
    {
      v5 = v4 - (_QWORD)a2;
      if (v4 <= (uint64_t)a2)
      {
        v14 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
        (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"oops, I slept through the last throttle time", 44);
        *(_BYTE *)(v14 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v14 + 17) = 0;
        goto LABEL_12;
      }
      v6 = 0;
      v7 = *((_QWORD *)this + 49);
      if (v7 >= 1)
      {
        v8 = v4 <= v7;
        v9 = v4 - v7;
        if (!v8)
        {
          v10 = v9 * *((unsigned int *)this + 135) / 100;
          if (v10 >= *((unsigned int *)this + 136))
            v10 = *((unsigned int *)this + 136);
          v6 = v10 & ~(v10 >> 63);
        }
      }
      v11 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v11);
      v12 = *(_QWORD **)(v11 + 8);
      if (v5 > v6)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"restarting timer on system wake. Next retry scheduled for ", 58);
        *(_BYTE *)(v11 + 17) = 0;
        ims::formatTimeAndIntervalFromNow(*((ims **)this + 48), v11, v13);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v11 + 17) = 0;
LABEL_12:
        SipRegistrationPolicy::startTimer(this);
        return;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"registration throttling ends at ", 32);
      *(_BYTE *)(v11 + 17) = 0;
      ims::formatTimeAndIntervalFromNow(*((ims **)this + 48), v11, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)", retrying now", 14);
      *(_BYTE *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v11 + 17) = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, "CheckTimers");
      SipRegistrationPolicy::updateNextRetryTime(this, a2, (uint64_t)__p);
      if (v17 < 0)
        operator delete(__p[0]);
      SipRegistrationPolicy::retryRegistration(this);
    }
  }
}

void sub_1BF0A7210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipRegistrationPolicy::currentProxies(SipRegistrationPolicy *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *__p;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;

  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v2 = *((_QWORD *)this + 54);
  v3 = *((_QWORD *)this + 55);
  if (v2 != v3)
  {
    v6 = 0;
    v49 = a2 + 24;
    do
    {
      if (v6 == *((_QWORD *)this + 57))
      {
        v7 = *(_QWORD *)(a2 + 32);
        v8 = *(char **)(a2 + 8);
        v9 = *(_BYTE **)(a2 + 16);
        if (!v7)
        {
          v10 = 2 * (v9 - v8) - 1;
          v11 = v9 - v8;
          if (v9 == v8)
            v10 = 0;
          if ((unint64_t)(v10 - *(_QWORD *)(a2 + 40)) < 0x10)
          {
            v12 = *(char **)(a2 + 24);
            v13 = *(char **)a2;
            v14 = (uint64_t)&v12[-*(_QWORD *)a2];
            if (v11 >= v14)
            {
              if (v12 == v13)
                v15 = 1;
              else
                v15 = v14 >> 2;
              v55 = v49;
              __p = std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v49, v15);
              v52 = (char *)__p;
              v53 = (char *)__p;
              v54 = (char *)__p + 8 * v16;
              v50 = operator new(0x1980uLL);
              std::__split_buffer<SipUri *>::push_back(&__p, &v50);
              v17 = *(char **)(a2 + 8);
              v18 = v53;
              v19 = v17;
              if (v17 != *(char **)(a2 + 16))
              {
                do
                {
                  if (v18 == v54)
                  {
                    v20 = v52 - (_BYTE *)__p;
                    if (v52 <= __p)
                    {
                      if (v18 == __p)
                        v28 = 1;
                      else
                        v28 = (v18 - (_BYTE *)__p) >> 2;
                      v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v55, v28);
                      v31 = v52;
                      v18 = &v29[8 * (v28 >> 2)];
                      v32 = v53 - v52;
                      if (v53 != v52)
                      {
                        v18 = &v29[8 * (v28 >> 2) + (v32 & 0xFFFFFFFFFFFFFFF8)];
                        v33 = 8 * (v32 >> 3);
                        v34 = &v29[8 * (v28 >> 2)];
                        do
                        {
                          v35 = *(_QWORD *)v31;
                          v31 += 8;
                          *(_QWORD *)v34 = v35;
                          v34 += 8;
                          v33 -= 8;
                        }
                        while (v33);
                      }
                      v36 = __p;
                      __p = v29;
                      v52 = &v29[8 * (v28 >> 2)];
                      v53 = v18;
                      v54 = &v29[8 * v30];
                      if (v36)
                      {
                        operator delete(v36);
                        v18 = v53;
                      }
                    }
                    else
                    {
                      v21 = v20 >> 3;
                      v22 = v20 >> 3 < -1;
                      v23 = (v20 >> 3) + 2;
                      if (v22)
                        v24 = v23;
                      else
                        v24 = v21 + 1;
                      v25 = &v52[-8 * (v24 >> 1)];
                      v26 = v18 - v52;
                      if (v18 != v52)
                      {
                        memmove(&v52[-8 * (v24 >> 1)], v52, v18 - v52);
                        v18 = v52;
                      }
                      v27 = &v18[-8 * (v24 >> 1)];
                      v18 = &v25[v26];
                      v52 = v27;
                      v53 = &v25[v26];
                    }
                  }
                  v37 = *(_QWORD *)v19;
                  v19 += 8;
                  *(_QWORD *)v18 = v37;
                  v18 = v53 + 8;
                  v53 += 8;
                }
                while (v19 != *(char **)(a2 + 16));
                v17 = *(char **)(a2 + 8);
              }
              v38 = *(char **)a2;
              v39 = v54;
              v40 = *(char **)(a2 + 24);
              v41 = *(_QWORD *)(a2 + 32);
              *(_QWORD *)(a2 + 16) = v18;
              *(_QWORD *)(a2 + 24) = v39;
              v42 = v52;
              *(_QWORD *)a2 = __p;
              *(_QWORD *)(a2 + 8) = v42;
              __p = v38;
              v52 = v17;
              v53 = v19;
              v54 = v40;
              v43 = v18 - v42;
              if (v43 != 8)
                v43 = v41 + 16;
              *(_QWORD *)(a2 + 32) = v43;
              if (v19 != v17)
                v53 = &v19[(v17 - v19 + 7) & 0xFFFFFFFFFFFFFFF8];
              if (v38)
                operator delete(v38);
            }
            else
            {
              if (v8 == v13)
              {
                __p = operator new(0x1980uLL);
                std::__split_buffer<SipUri *>::push_back((_QWORD *)a2, &__p);
                v44 = *(_QWORD *)(a2 + 16);
                __p = *(void **)(v44 - 8);
                *(_QWORD *)(a2 + 16) = v44 - 8;
              }
              else
              {
                __p = operator new(0x1980uLL);
              }
              std::__split_buffer<SipUri *>::push_front(a2, &__p);
              v45 = *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8);
              if (v45 != 8)
                v45 = *(_QWORD *)(a2 + 32) + 16;
              *(_QWORD *)(a2 + 32) = v45;
            }
          }
          else
          {
            *(_QWORD *)(a2 + 32) = 16;
            __p = (void *)*((_QWORD *)v9 - 1);
            *(_QWORD *)(a2 + 16) = v9 - 8;
            std::__split_buffer<SipUri *>::push_front(a2, &__p);
          }
          v7 = *(_QWORD *)(a2 + 32);
          v8 = *(char **)(a2 + 8);
          v9 = *(_BYTE **)(a2 + 16);
        }
        v46 = &v8[8 * (v7 >> 4)];
        v47 = *(_QWORD *)v46 + 408 * (v7 & 0xF);
        if (v9 == v8)
          v48 = 0;
        else
          v48 = v47;
        if (v48 == *(_QWORD *)v46)
          v48 = *((_QWORD *)v46 - 1) + 6528;
        SipUri::SipUri((SipUri *)(v48 - 408), (const SipUri *)v2);
        *(int64x2_t *)(a2 + 32) = vaddq_s64(*(int64x2_t *)(a2 + 32), (int64x2_t)xmmword_1BF29FE80);
      }
      else if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 416) + 24))(*(_QWORD *)(v2 + 416), *(unsigned int *)(v2 + 424)) & 1) == 0)
      {
        std::deque<SipUri>::push_back((_QWORD *)a2, (SipUri *)v2);
      }
      ++v6;
      v2 += 480;
    }
    while (v2 != v3);
  }
}

void sub_1BF0A75C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  void *v17;

  operator delete(v17);
  if (__p)
    operator delete(__p);
  std::deque<SipUri>::~deque[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void SipRegistrationPolicy::transportInitializedToProxy(SipRegistrationPolicy *this, const SipUri *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  _OWORD v10[31];

  v2 = *((_QWORD *)this + 54);
  v3 = *((_QWORD *)this + 55);
  if (v2 != v3)
  {
    v6 = 0;
    do
    {
      memset(v10, 0, 480);
      SipUri::SipUri((SipUri *)v10, (const SipUri *)v2);
      ImsResult::ImsResult((ImsResult *)((char *)&v10[25] + 8), (const ImsResult *)(v2 + 408));
      v7 = SipUri::equals((SipUri *)v10, a2, 1);
      if (v7)
      {
        *((_QWORD *)this + 57) = v6;
        v8 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
        (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"initialized transport to proxy offset ", 38);
        *(_BYTE *)(v8 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v8 + 17) = 0;
      }
      else
      {
        ++v6;
      }
      ImsResult::~ImsResult((ImsResult *)((char *)&v10[25] + 8));
      SipUri::~SipUri((SipUri *)v10);
      v2 += 480;
      if (v2 == v3)
        v9 = 1;
      else
        v9 = v7;
    }
    while (v9 != 1);
  }
}

void sub_1BF0A7798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  SipUri::~SipUri((SipUri *)&a9);
  _Unwind_Resume(a1);
}

void SipRegistrationPolicy::skipToNextProxy(SipRegistrationPolicy *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *((_QWORD *)this + 55) - *((_QWORD *)this + 54);
  if (v1 != 480)
  {
    v2 = *((_QWORD *)this + 57);
    if (v2 + 1 < 0xEEEEEEEEEEEEEEEFLL * (v1 >> 5))
      v3 = v2 + 1;
    else
      v3 = 0;
    SipRegistrationPolicy::setProxyOffset(this, v3);
  }
}

void SipRegistrationPolicy::setProxyOffset(SipRegistrationPolicy *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v2 = *((_QWORD *)this + 54);
  v3 = *((_QWORD *)this + 55);
  if (v2)
    v4 = v2 == v3;
  else
    v4 = 1;
  if (!v4)
  {
    if (*((_QWORD *)this + 57) == a2)
    {
      v6 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"already using proxy #", 21);
      *(_BYTE *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" (", 2);
      *(_BYTE *)(v6 + 17) = 0;
      v7 = *((_QWORD *)this + 54) + 480 * *((_QWORD *)this + 57);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v6);
      v8 = *(_QWORD **)(v6 + 8);
      v9 = ")";
      v10 = 1;
LABEL_17:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v6 + 17) = 0;
      return;
    }
    if (0xEEEEEEEEEEEEEEEFLL * ((v3 - v2) >> 5) <= a2)
    {
      v6 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 56))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v6);
      std::ostream::operator<<();
      *(_BYTE *)(v6 + 17) = 0;
      v8 = *(_QWORD **)(v6 + 8);
      v9 = " is not a valid proxy offset";
      v10 = 28;
      goto LABEL_17;
    }
    *((_QWORD *)this + 57) = a2;
    *((_BYTE *)this + 220) = 1;
    *((_DWORD *)this + 54) = 0;
    v11 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"current proxy is now #", 22);
    *(_BYTE *)(v11 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" (", 2);
    *(_BYTE *)(v11 + 17) = 0;
    v12 = *((_QWORD *)this + 54) + 480 * *((_QWORD *)this + 57);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)")", 1);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 232))(this);
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
    if (v13)
    {
      v14 = std::__shared_weak_count::lock(v13);
      if (v14)
      {
        v15 = v14;
        v16 = *((_QWORD *)this + 46);
        if (v16)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 48))(v16, *((_QWORD *)this + 54) + 480 * *((_QWORD *)this + 57));
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
  }
}

void sub_1BF0A7AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipRegistrationPolicy::setProxy(SipRegistrationPolicy *this@<X0>, const SipUri *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void (**v9)(ImsResult *__hidden);
  unsigned __int16 v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const ImsResult *v13;
  ImsStringOutStream *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void (**v18)(ImsResult *__hidden);
  uint64_t *v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  if (*((_QWORD *)this + 55) == *((_QWORD *)this + 54))
  {
LABEL_16:
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v18 = &off_1E78B7238;
    v19 = &_bambiDomain;
    v20 = 1073741836;
    v13 = (const ImsResult *)ImsResult::operator<<<char [15]>((uint64_t)&v18, "unknown proxy ");
    v14 = (ImsStringOutStream *)*((_QWORD *)v13 + 3);
    if (!v14)
    {
      v14 = (ImsStringOutStream *)operator new();
      ImsStringOutStream::ImsStringOutStream(v14, *(_BYTE *)(*((_QWORD *)v13 + 1) + 32));
      *((_QWORD *)v13 + 3) = v14;
    }
    (*(void (**)(const SipUri *, ImsStringOutStream *))(*(_QWORD *)a2 + 40))(a2, v14);
    ImsResult::ImsResult((ImsResult *)a3, v13);
    ImsResult::~ImsResult((ImsResult *)&v18);
    return;
  }
  v6 = 0;
  while (1)
  {
    v18 = 0;
    v19 = 0;
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
    if (v7)
    {
      v8 = std::__shared_weak_count::lock(v7);
      v19 = (uint64_t *)v8;
      if (v8)
      {
        v9 = (void (**)(ImsResult *__hidden))*((_QWORD *)this + 46);
        v18 = v9;
        if (v9)
        {
          v10 = (*((uint64_t (**)(_QWORD))*v9 + 14))(v9);
          goto LABEL_9;
        }
      }
    }
    else
    {
      v8 = 0;
    }
    v10 = 5060;
LABEL_9:
    if (SipHost::equalsWithDefaultPort((const SipUri *)((char *)a2 + 8), (const SipHost *)(*((_QWORD *)this + 54) + 480 * v6 + 8), v10))break;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (++v6 >= 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)this + 55) - *((_QWORD *)this + 54)) >> 5))
      goto LABEL_16;
  }
  v15 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"desired proxy ", 14);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(const SipUri *, uint64_t))(*(_QWORD *)a2 + 40))(a2, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"matched proxy #", 15);
  *(_BYTE *)(v15 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
  SipRegistrationPolicy::setProxyOffset(this, v6);
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  if (v8)
  {
    v16 = (unint64_t *)&v8->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BF0A7D78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1C3B87100](v2, 0x10A1C4082A5C483);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void SipRegistrationPolicy::lastProxyResult(SipRegistrationPolicy *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v3;

  v2 = *((_QWORD *)this + 54);
  if (v2)
    v3 = v2 == *((_QWORD *)this + 55);
  else
    v3 = 1;
  if (v3)
  {
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)a2 = &off_1E78B7238;
    *(_QWORD *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 0;
  }
  else
  {
    ImsResult::ImsResult((ImsResult *)a2, (const ImsResult *)(v2 + 480 * *((_QWORD *)this + 57) + 408));
  }
}

BOOL SipRegistrationPolicy::allProxiesHaveError(SipRegistrationPolicy *this, const ImsResult *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;

  v2 = *((_QWORD *)this + 54);
  v3 = *((_QWORD *)this + 55) - v2;
  if (!v3)
    return 1;
  v4 = v3 / 480;
  v5 = *((_QWORD *)a2 + 1);
  if (v4 <= 1)
    v6 = 1;
  else
    v6 = v4;
  if (*(_QWORD *)(v2 + 416) != v5)
    return 0;
  v7 = *((_DWORD *)a2 + 4);
  if (*(_DWORD *)(v2 + 424) != v7)
    return 0;
  v8 = (_DWORD *)(v2 + 904);
  v9 = 1;
  do
  {
    v10 = v9;
    if (v6 == v9)
      break;
    if (*((_QWORD *)v8 - 1) != v5)
      break;
    v11 = *v8;
    ++v9;
    v8 += 120;
  }
  while (v11 == v7);
  return v10 >= v4;
}

void SipRegistrationPolicy::onInterfaceChanged(ims **this)
{
  uint64_t v2;

  v2 = (*((uint64_t (**)(ims **))*this + 8))(this);
  (*((void (**)(ims **, uint64_t))*this + 2))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Clearing throttling due to network interface change.", 52);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  SipRegistrationPolicy::clearAllThrottling(this);
}

void SipRegistrationPolicy::onProxyListChanged(SipRegistrationPolicy *a1)
{
  SipRegistrationPolicy::setProxyOffset(a1, 0);
}

void SipRegistrationPolicy::updateConfig(SipRegistrationPolicy *this, const SipRegistrationConfig *a2)
{
  SipRegistrationPolicy *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::string::size_type v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  SipUri *v13;
  SipUri *v14;
  const SipUri *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(SipRegistrationPolicy *);
  uint64_t v21;
  SipUri **v22;
  SipUri *v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  SipUri *v27;
  SipUri *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  const SipRegistrationConfig *v33;
  _QWORD *v34;
  uint64_t v35;
  SipUri *v36;
  SipUri *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  int v41;
  std::__shared_weak_count *size;
  std::string::size_type v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  SipRegistrationPolicy *v50;
  SipUri **v51;
  SipUri *v52;
  uint64_t *v53;
  _QWORD *v54;
  std::string::size_type v55[2];
  const SipUri *v56;
  const SipUri *v57;
  std::string __p;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  _QWORD v62[4];
  _QWORD v63[2];
  char v64;
  char v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  char v80;
  void (**v81)(SipParameterMap *__hidden);
  _QWORD *v82;
  _QWORD v83[2];
  __int16 v84;
  void (**v85)(SipParameterMap *__hidden);
  _QWORD *v86;
  _QWORD v87[2];
  __int16 v88;
  _QWORD v89[2];
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  void *v123;
  _BYTE v124[24];
  _QWORD *v125;
  _QWORD v126[3];
  uint64_t i;
  __int128 v128;
  __int128 v129;

  v3 = this;
  v4 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"updating config", 15);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  bzero(&v56, 0x688uLL);
  SipRegistrationConfig::SipRegistrationConfig((SipRegistrationConfig *)&v56, (SipRegistrationPolicy *)((char *)v3 + 480));
  SipRegistrationConfig::operator=((uint64_t)v3 + 480, (uint64_t)a2);
  if ((*(unsigned int (**)(SipRegistrationPolicy *))(*(_QWORD *)v3 + 528))(v3))
  {
    SipRegistrationPolicy::clearAllThrottling((ims **)v3);
    goto LABEL_14;
  }
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v5 = (std::__shared_weak_count *)*((_QWORD *)v3 + 47);
  if (!v5)
  {
    v6 = 0;
    goto LABEL_9;
  }
  v6 = std::__shared_weak_count::lock(v5);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v6;
  if (!v6
    || (v7 = *((_QWORD *)v3 + 46), (__p.__r_.__value_.__r.__words[0] = v7) == 0)
    || !(*(unsigned int (**)(std::string::size_type))(*(_QWORD *)v7 + 128))(v7))
  {
LABEL_9:
    v8 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)v3 + 64))(v3);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Network interface hasn't changed. Not clearing throttling.", 58);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (!v6)
      goto LABEL_14;
    goto LABEL_10;
  }
  (*(void (**)(SipRegistrationPolicy *))(*(_QWORD *)v3 + 248))(v3);
LABEL_10:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_14:
  if (v56 != v57)
  {
    v11 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)v3 + 64))(v3);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"old proxies: ", 13);
    *(_BYTE *)(v11 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v123, ",");
    ims::join<std::__wrap_iter<SipUri const*>>(&v97, (uint64_t)v56, (uint64_t)v57, (uint64_t)&v123);
    LoggableString::LoggableString(&__p, (const std::string *)&v97);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 40))(v11, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SBYTE7(v98) < 0)
      operator delete((void *)v97);
    if ((v124[15] & 0x80000000) != 0)
      operator delete(v123);
  }
  v12 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)v3 + 64))(v3);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"new proxies: ", 13);
  *(_BYTE *)(v12 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v123, ",");
  ims::join<std::__wrap_iter<SipUri const*>>(&v97, *(_QWORD *)a2, *((_QWORD *)a2 + 1), (uint64_t)&v123);
  LoggableString::LoggableString(&__p, (const std::string *)&v97);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v12 + 40))(v12, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v12 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SBYTE7(v98) < 0)
    operator delete((void *)v97);
  if ((v124[15] & 0x80000000) != 0)
    operator delete(v123);
  if (*((_QWORD *)v3 + 54) == *((_QWORD *)v3 + 55))
  {
    v18 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)v3 + 64))(v3);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"initialized proxy list", 22);
    *(_BYTE *)(v18 + 17) = 0;
    v17 = (_BYTE *)(v18 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    v14 = (SipUri *)*((_QWORD *)v3 + 60);
    v13 = (SipUri *)*((_QWORD *)v3 + 61);
    v15 = v56;
    if (v13 - v14 == v57 - v56)
    {
      while (v14 != v13)
      {
        if (!SipUri::equals(v14, v15, 1))
          goto LABEL_32;
        v14 = (SipUri *)((char *)v14 + 408);
        v15 = (const SipUri *)((char *)v15 + 408);
      }
      if ((*(unsigned int (**)(SipRegistrationPolicy *))(*(_QWORD *)v3 + 528))(v3))
      {
        v19 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)v3 + 64))(v3);
        (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"resetting proxy list for emergency call", 39);
        *(_BYTE *)(v19 + 17) = 0;
        v17 = (_BYTE *)(v19 + 17);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      else
      {
        v20 = *(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)v3 + 64);
        if (!*((_BYTE *)a2 + 1656))
        {
          v49 = v20(v3);
          (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v49);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v49 + 8), (uint64_t)"proxy list hasn't changed", 25);
          *(_BYTE *)(v49 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v49 + 17) = 0;
          goto LABEL_63;
        }
        v21 = v20(v3);
        (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"proxy list hasn't changed, but updating it anyway", 49);
        *(_BYTE *)(v21 + 17) = 0;
        v17 = (_BYTE *)(v21 + 17);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
    }
    else
    {
LABEL_32:
      v16 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)v3 + 64))(v3);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"proxy list has changed.", 23);
      *(_BYTE *)(v16 + 17) = 0;
      v17 = (_BYTE *)(v16 + 17);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
  }
  *v17 = 0;
  v22 = (SipUri **)((char *)v3 + 440);
  v121 = 0u;
  v122 = 0u;
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  v107 = 0u;
  v108 = 0u;
  v105 = 0u;
  v106 = 0u;
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v53 = (uint64_t *)((char *)v3 + 432);
  v23 = (SipUri *)*((_QWORD *)v3 + 54);
  if (v23 && v23 != *v22)
  {
    SipUri::SipUri((SipUri *)&v97, (SipUri *)((char *)v23 + 480 * *((_QWORD *)v3 + 57)));
    BYTE8(v122) = 1;
    v23 = (SipUri *)*v53;
  }
  v50 = v3;
  std::vector<SipRegistrationPolicy::ProxyInfo>::__base_destruct_at_end[abi:ne180100]((uint64_t)v53, v23);
  v24 = *(_QWORD *)a2;
  if (*((_QWORD *)a2 + 1) != *(_QWORD *)a2)
  {
    v25 = 0;
    v54 = (_QWORD *)((char *)v3 + 448);
    v26 = v62;
    v51 = (SipUri **)((char *)v3 + 440);
    do
    {
      *v26 = 0;
      v26[1] = 0;
      v59 = 0;
      v60 = 0;
      __p.__r_.__value_.__r.__words[2] = 0;
      v61 = 0;
      v63[0] = 0;
      v63[1] = 0;
      v62[2] = &off_1E78B82D8;
      v62[3] = v63;
      v65 = 1;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&off_1E78D08F8;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BFCE8;
      v66 = 0u;
      v67 = 0u;
      v68 = 0u;
      v69 = 0u;
      v70 = 0u;
      v71 = 0u;
      v72 = 0u;
      v73 = 0u;
      v74 = 0u;
      v75 = 0u;
      v76 = 0u;
      v77 = 0u;
      v78 = 0u;
      v79 = 0;
      v83[0] = 0;
      v83[1] = 0;
      v81 = &off_1E78B82D8;
      v82 = v83;
      v87[0] = 0;
      v87[1] = 0;
      v85 = &off_1E78B82D8;
      v86 = v87;
      v64 = 1;
      v84 = 257;
      v88 = 257;
      v80 = 0;
      v95 = 0;
      v96 = 0;
      v94 = 0;
      v89[0] = &off_1E78B7238;
      v89[1] = &_bambiDomain;
      v90 = 0;
      v91 = 0;
      v92 = 0;
      v93 = 0;
      SipUri::operator=((SipUri *)&__p, v24 + 408 * v25);
      v27 = *v22;
      if ((unint64_t)*v22 >= *v54)
      {
        v29 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v27 - *v53) >> 5);
        v30 = v29 + 1;
        if (v29 + 1 > 0x88888888888888)
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        if (0xDDDDDDDDDDDDDDDELL * ((*v54 - *v53) >> 5) > v30)
          v30 = 0xDDDDDDDDDDDDDDDELL * ((*v54 - *v53) >> 5);
        if (0xEEEEEEEEEEEEEEEFLL * ((*v54 - *v53) >> 5) >= 0x44444444444444)
          v31 = 0x88888888888888;
        else
          v31 = v30;
        v125 = v54;
        if (v31)
        {
          if (v31 > 0x88888888888888)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v32 = (char *)operator new(480 * v31);
          v33 = a2;
        }
        else
        {
          v33 = a2;
          v32 = 0;
        }
        v34 = v26;
        v123 = v32;
        *(_QWORD *)v124 = &v32[480 * v29];
        *(_QWORD *)&v124[8] = *(_QWORD *)v124;
        *(_QWORD *)&v124[16] = &v32[480 * v31];
        std::construct_at[abi:ne180100]<SipRegistrationPolicy::ProxyInfo,SipRegistrationPolicy::ProxyInfo,SipRegistrationPolicy::ProxyInfo*>(*(SipUri **)v124, (const SipUri *)&__p);
        v35 = *(_QWORD *)v124;
        *(_QWORD *)&v124[8] += 480;
        v36 = *v22;
        v37 = (SipUri *)*v53;
        *(_QWORD *)&v129 = *(_QWORD *)v124;
        *((_QWORD *)&v129 + 1) = *(_QWORD *)v124;
        v128 = v129;
        v126[0] = v54;
        v126[1] = &v128;
        v126[2] = &v129;
        for (i = 0; v36 != v37; v36 = (SipUri *)((char *)v36 - 480))
        {
          SipUri::SipUri((SipUri *)(v35 - 480), (SipUri *)((char *)v36 - 480));
          ImsResult::ImsResult((ImsResult *)(v35 - 72), (SipUri *)((char *)v36 - 72));
          v35 = *((_QWORD *)&v129 + 1) - 480;
          *((_QWORD *)&v129 + 1) -= 480;
        }
        LOBYTE(i) = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SipRegistrationPolicy::ProxyInfo>,std::reverse_iterator<SipRegistrationPolicy::ProxyInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v126);
        v38 = *v54;
        v52 = *(SipUri **)&v124[8];
        v39 = *(_OWORD *)&v124[8];
        v40 = *(_OWORD *)v53;
        *v53 = v35;
        *(_OWORD *)v124 = v40;
        v22 = v51;
        *(_OWORD *)v51 = v39;
        *(_QWORD *)&v124[16] = v38;
        v123 = (void *)v40;
        std::__split_buffer<SipRegistrationPolicy::ProxyInfo>::~__split_buffer((uint64_t)&v123);
        v28 = v52;
        v26 = v34;
        a2 = v33;
      }
      else
      {
        std::construct_at[abi:ne180100]<SipRegistrationPolicy::ProxyInfo,SipRegistrationPolicy::ProxyInfo,SipRegistrationPolicy::ProxyInfo*>(*v22, (const SipUri *)&__p);
        v28 = (SipUri *)((char *)v27 + 480);
        *v22 = (SipUri *)((char *)v27 + 480);
      }
      *v22 = v28;
      ImsResult::~ImsResult((ImsResult *)v89);
      SipUri::~SipUri((SipUri *)&__p);
      ++v25;
      v24 = *(_QWORD *)a2;
    }
    while (v25 < 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
  }
  v3 = v50;
  (*(void (**)(SipRegistrationPolicy *, __int128 *))(*(_QWORD *)v50 + 240))(v50, &v97);
  v41 = -286331153 * ((*((_QWORD *)v3 + 55) - *((_QWORD *)v3 + 54)) >> 5);
  *((_DWORD *)v50 + 53) = v41;
  if (v41 == 1)
    *((_DWORD *)v50 + 53) = *((_DWORD *)a2 + 334);
  if (BYTE8(v122))
    SipUri::~SipUri((SipUri *)&v97);
LABEL_63:
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&__p, (_QWORD *)v3 + 23);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__r.__words[0])
    v43 = __p.__r_.__value_.__r.__words[0] + 176;
  else
    v43 = 0;
  v55[0] = v43;
  v55[1] = __p.__r_.__value_.__l.__size_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  SipSimpleBackoffTimer::initialize((uint64_t)v3 + 2160, (std::string::size_type)v3 + 224, v55, (std::string *)&SipRegistrationPolicy::kSubscriptionRetryTimerName, *((_DWORD *)a2 + 342), *((_DWORD *)a2 + 343));
  if (size)
  {
    v44 = (unint64_t *)&size->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v46 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v47 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if ((char *)v3 + 2312 != (char *)a2 + 1384)
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)v3 + 290, *((__int128 **)a2 + 174), (__int128 *)((char *)a2 + 1400));
  if ((char *)v3 + 2280 != (char *)a2 + 1416)
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)v3 + 286, *((__int128 **)a2 + 178), (__int128 *)((char *)a2 + 1432));
  if ((char *)v3 + 2248 != (char *)a2 + 1448)
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<unsigned int>>,std::__tree_node<std::__value_type<std::string,std::set<unsigned int>>,void *> *,long>>((uint64_t **)v3 + 282, *((__int128 **)a2 + 182), (__int128 *)((char *)a2 + 1464));
  SipRegistrationConfig::~SipRegistrationConfig((void **)&v56);
}

void sub_1BF0A8A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  if (SLOBYTE(STACK[0x8F7]) < 0)
    operator delete((void *)STACK[0x8E0]);
  if (*(char *)(v16 - 177) < 0)
    operator delete(*(void **)(v16 - 200));
  SipRegistrationConfig::~SipRegistrationConfig((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationPolicy::bestAssociatedUri(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 == *(_QWORD *)(a2 + 16))
    return 0;
  else
    return *(_QWORD *)v2;
}

void SipRegistrationPolicy::systemClockDidChange(SipRegistrationPolicy *this)
{
  time_t v2;
  ims *v3;
  time_t v4;
  uint64_t v5;
  tm *v6;
  tm *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  tm *v11;
  void *__p[2];
  char v13;

  if (*((_QWORD *)this + 48))
  {
    v2 = time(0);
    v3 = (ims *)((*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 208))(this) + v2);
    v4 = *((_QWORD *)this + 48);
    if (v4 <= (uint64_t)v3)
    {
      v8 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v8);
      if (v4 >= v2)
      {
        v9 = "systemClockDidChange: next retry time is still within our current retry interval: ";
        v10 = 82;
      }
      else
      {
        v9 = "systemClockDidChange: next retry time is in the past: ";
        v10 = 54;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)v9, v10);
      *(_BYTE *)(v8 + 17) = 0;
      ims::formatTimeAndIntervalFromNow(*((ims **)this + 48), v8, v11);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
    }
    else
    {
      v5 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"systemClockDidChange: resetting next retry time from ", 53);
      *(_BYTE *)(v5 + 17) = 0;
      ims::formatTimeAndIntervalFromNow(*((ims **)this + 48), v5, v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" to ", 4);
      *(_BYTE *)(v5 + 17) = 0;
      ims::formatTimeAndIntervalFromNow(v3, v5, v7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, "SystemClockDidChange");
      SipRegistrationPolicy::updateNextRetryTime(this, v3, (uint64_t)__p);
      if (v13 < 0)
        operator delete(__p[0]);
      *((_QWORD *)this + 49) = v2;
    }
  }
}

void sub_1BF0A8D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipRegistrationPolicy::handleDeviceEvents(SipRegistrationPolicy *this, int a2)
{
  uint64_t v4;
  int v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  char v11;
  std::string v12;
  std::string __p;

  v4 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"handling device events: ", 24);
  *(_BYTE *)(v4 + 17) = 0;
  deviceEventsToString(a2, &v12);
  LoggableString::LoggableString(&__p, &v12);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v4 + 40))(v4, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  v5 = *((_DWORD *)this + 447);
  v6 = v5 & a2;
  if ((v5 & a2) != 0)
  {
    v7 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"resetting registration errors due to event: ", 44);
    *(_BYTE *)(v7 + 17) = 0;
    deviceEventsToString(v6, &v12);
    LoggableString::LoggableString(&__p, &v12);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v7 + 40))(v7, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    (*(void (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 192))(this);
  }
  if (*((_DWORD *)this + 106) != SipRegistrationMode::kModeNormal)
  {
    v8 = *((_DWORD *)this + 446);
    v9 = v8 & a2;
    if ((v8 & a2) != 0)
    {
      v10 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"resetting registration mode due to event: ", 42);
      *(_BYTE *)(v10 + 17) = 0;
      deviceEventsToString(v9, &v12);
      LoggableString::LoggableString(&__p, &v12);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v10 + 40))(v10, &__p);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v10 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v12.__r_.__value_.__l.__data_);
      SipRegistrationPolicy::setRegistrationMode((unsigned int *)this, (unsigned int *)&SipRegistrationMode::kModeNormal);
    }
  }
  if ((a2 & 0x100) != 0)
  {
    v11 = 1;
  }
  else
  {
    if ((a2 & 0x200) == 0)
      return;
    v11 = 0;
  }
  *((_BYTE *)this + 2241) = v11;
}

void sub_1BF0A8FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipRegistrationPolicy::handleSubscriptionFailed(SipRegistrationPolicy *this, const ImsResult *a2, unsigned int a3)
{
  unsigned int v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  time_t v15;
  uint64_t v16;
  tm *v17;
  uint64_t result;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    v14 = (*(uint64_t (**)(SipRegistrationPolicy *, const ImsResult *))(*(_QWORD *)this + 264))(this, a2);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
    goto LABEL_15;
  }
  v4 = a3;
  v6 = *((_QWORD *)this + 23);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  v11 = operator new(0x20uLL);
  *v11 = &off_1E78DB750;
  v11[1] = this;
  v11[2] = v6;
  v11[3] = v5;
  v20 = v11;
  SipTimerContainer::startTimer((_QWORD *)this + 28, (uint64_t)&SipRegistrationPolicy::kSubscriptionRetryTimerName, (uint64_t)v19, 1000 * v4, 0);
  v12 = v20;
  if (v20 == v19)
  {
    v13 = 4;
    v12 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_13;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_13:
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_15:
  v15 = time(0);
  v16 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"will retry subscription at ", 27);
  *(_BYTE *)(v16 + 17) = 0;
  ims::formatTimeAndIntervalFromNow((ims *)(v15 + v4), v16, v17);
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v16 + 17) = 0;
  return result;
}

void sub_1BF0A91A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  std::__shared_weak_count *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  if (v13)
  {
    std::__shared_weak_count::__release_weak(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipRegistrationPolicy::handleSubscriptionSucceeded(SipRegistrationPolicy *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(SipRegistrationPolicy *))(*(_QWORD *)this + 264))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
}

uint64_t SipRegistrationPolicy::disableIfInWrongCountry(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  _QWORD v6[2];
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2);
    if ((_DWORD)result)
    {
      v5 = *(_DWORD *)(a2 + 88) == 0;
      v12 = 0;
      v13 = 0;
      v6[0] = &off_1E78B7238;
      v6[1] = &_bambiDomain;
      v7 = v5 << 30;
      v10 = 0;
      v11 = 0;
      v8 = 0;
      v9 = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 176))(a1, v6);
      ImsResult::~ImsResult((ImsResult *)v6);
      return 1;
    }
  }
  return result;
}

void sub_1BF0A92D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

BOOL SipRegistrationPolicy::shouldDeferRegistration(SipRegistrationPolicy *this)
{
  return *((_BYTE *)this + 2241) && *((_BYTE *)this + 1827) != 0;
}

_QWORD *SipRegistrationPolicy::getClientRegTypeStr@<X0>(SipRegistrationPolicy *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;

  v4 = *((int *)this + 587);
  if (v4 > 3)
    v5 = (char *)&str_10_6;
  else
    v5 = off_1E78DB7C0[v4];
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

void SipEmergencyRegistrationPolicy::~SipEmergencyRegistrationPolicy(SipEmergencyRegistrationPolicy *this)
{
  SipEmergencyRegistrationPolicy::~SipEmergencyRegistrationPolicy(this);
  JUMPOUT(0x1C3B87100);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E78DB2B0;
  v2 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  *((_QWORD *)this + 8) = &off_1E78EB020;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 40, *((_QWORD **)this + 6));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

void std::vector<SipRegistrationPolicy::ProxyInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<SipRegistrationPolicy::ProxyInfo>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (SipUri *)*v2);
    operator delete(**a1);
  }
}

void std::vector<SipRegistrationPolicy::ProxyInfo>::__base_destruct_at_end[abi:ne180100](uint64_t a1, SipUri *a2)
{
  SipUri *v4;
  SipUri *v5;

  v4 = *(SipUri **)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = (SipUri *)((char *)v4 - 480);
      ImsResult::~ImsResult((SipUri *)((char *)v4 - 72));
      SipUri::~SipUri(v5);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

SipUri *std::construct_at[abi:ne180100]<SipRegistrationPolicy::ProxyInfo,SipRegistrationPolicy::ProxyInfo,SipRegistrationPolicy::ProxyInfo*>(SipUri *a1, const SipUri *a2)
{
  uint64_t v4;

  SipUri::SipUri(a1, a2);
  ImsResult::ImsResult(v4 + 408, (uint64_t)a2 + 408);
  return a1;
}

void sub_1BF0A942C(_Unwind_Exception *a1)
{
  SipUri *v1;

  SipUri::~SipUri(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<SipRegistrationPolicy::ProxyInfo>,std::reverse_iterator<SipRegistrationPolicy::ProxyInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t i;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    for (i = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8); i != v3; i += 480)
    {
      ImsResult::~ImsResult((ImsResult *)(i + 408));
      SipUri::~SipUri((SipUri *)i);
    }
  }
  return a1;
}

uint64_t std::__split_buffer<SipRegistrationPolicy::ProxyInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  SipUri *v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (SipUri *)(i - 480);
    *(_QWORD *)(a1 + 16) = i - 480;
    ImsResult::~ImsResult((ImsResult *)(i - 72));
    SipUri::~SipUri(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::__function::__func<SipRegistrationPolicy::startTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startTimer(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78DB650;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipRegistrationPolicy::startTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startTimer(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78DB650;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipRegistrationPolicy::startTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78DB650;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipRegistrationPolicy::startTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78DB650;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipRegistrationPolicy::startTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startTimer(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipRegistrationPolicy::startTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startTimer(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipRegistrationPolicy::startTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startTimer(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF0A9768(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipRegistrationPolicy::startTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startTimer(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipRegistrationPolicy::startTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startTimer(void)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78DB6D0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78DB6D0;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78DB6D0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78DB6D0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF0A99D0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0,std::allocator<SipRegistrationPolicy::startEmergencyRegistrationTimer(void)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t ims::join<std::__wrap_iter<SipUri const*>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v10, 1);
  if (a2 != a3)
  {
    v8 = 1;
    do
    {
      if ((v8 & 1) == 0)
        (*(void (**)(__int128 *, uint64_t))(v10 + 32))(&v10, a4);
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 40))(a2, &v10);
      v8 = 0;
      a2 += 408;
    }
    while (a2 != a3);
  }
  result = std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v11 + 1) + 8, a1);
  *(_QWORD *)&v10 = &off_1E78D7A10;
  if ((_BYTE)v11)
  {
    result = *((_QWORD *)&v10 + 1);
    if (*((_QWORD *)&v10 + 1))
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 8))(*((_QWORD *)&v10 + 1));
  }
  return result;
}

void sub_1BF0A9B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11)
  {
    if (a10)
      (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78DB750;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78DB750;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78DB750;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78DB750;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF0A9D44(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0,std::allocator<SipRegistrationPolicy::handleSubscriptionFailed(ImsResult const&,unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t _GLOBAL__sub_I_SipRegistrationPolicy_cpp()
{
  void (*v0)(void *);

  std::string::basic_string[abi:ne180100]<0>(&SipRegistrationPolicy::kSubscriptionRetryTimerName, "RegSubscriptionRetryTimer");
  v0 = (void (*)(void *))MEMORY[0x1E0DE44D0];
  __cxa_atexit(MEMORY[0x1E0DE44D0], &SipRegistrationPolicy::kSubscriptionRetryTimerName, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&SipRegistrationPolicy::kEmergencyRegistrationTimer, "EmergencyRegistrationTimer");
  __cxa_atexit(v0, &SipRegistrationPolicy::kEmergencyRegistrationTimer, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&SipRegistrationPolicy::kThumperErrorUnauthorized, "Account Authentication Failure");
  __cxa_atexit(v0, &SipRegistrationPolicy::kThumperErrorUnauthorized, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&kResponseServiceNotAllowedInThisLocation, "Service not allowed in this location");
  return __cxa_atexit(v0, &kResponseServiceNotAllowedInThisLocation, &dword_1BEDF4000);
}

uint64_t SipStandardDigestAuthScheme::parseNonce(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 184), a2);
  return 1;
}

uint64_t SipStandardDigestAuthScheme::encodeNonce(uint64_t a1, std::string *this)
{
  std::string::operator=(this, (const std::string *)(a1 + 184));
  return 1;
}

BOOL SipStandardDigestAuthScheme::hasValidNonce(SipStandardDigestAuthScheme *this)
{
  uint64_t v1;

  if (*((char *)this + 207) < 0)
    v1 = *((_QWORD *)this + 24);
  else
    v1 = *((unsigned __int8 *)this + 207);
  return v1 != 0;
}

uint64_t SipStandardDigestAuthScheme::parseAlgorithm(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 128), a2);
  return 1;
}

std::string *SipStandardDigestAuthScheme::encodeAlgorithm(uint64_t a1, std::string *this)
{
  return std::string::operator=(this, (const std::string *)(a1 + 128));
}

uint64_t SipStandardDigestAuthScheme::computeResponse(SipStandardDigestAuthScheme *this, const SipRequest *a2)
{
  char *v4;
  size_t v5;
  uint64_t v6;

  if (*((char *)this + 231) < 0)
  {
    v4 = (char *)*((_QWORD *)this + 26);
    v5 = *((_QWORD *)this + 27);
  }
  else
  {
    v4 = (char *)this + 208;
    v5 = *((unsigned __int8 *)this + 231);
  }
  v6 = (*(uint64_t (**)(const SipRequest *))(*(_QWORD *)a2 + 112))(a2);
  return SipDigestAuthScheme::_computeResponse((uint64_t)this, v6, (uint64_t)a2 + 112, *((_QWORD *)a2 + 9), v4, v5);
}

uint64_t SipStandardDigestAuthScheme::computeResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  size_t v5;

  if (*(char *)(a1 + 231) < 0)
  {
    v4 = *(void **)(a1 + 208);
    v5 = *(_QWORD *)(a1 + 216);
  }
  else
  {
    v4 = (void *)(a1 + 208);
    v5 = *(unsigned __int8 *)(a1 + 231);
  }
  return SipDigestAuthScheme::_computeResponse(a1, a2, a3, a4, v4, v5);
}

uint64_t SipStandardDigestAuthScheme::computeResponse(uint64_t a1, uint64_t a2, const std::string *a3, uint64_t a4)
{
  void *v4;
  size_t v5;

  if (*(char *)(a1 + 231) < 0)
  {
    v4 = *(void **)(a1 + 208);
    v5 = *(_QWORD *)(a1 + 216);
  }
  else
  {
    v4 = (void *)(a1 + 208);
    v5 = *(unsigned __int8 *)(a1 + 231);
  }
  return SipDigestAuthScheme::_computeResponse(a1, a2, a3, a4, v4, v5);
}

SipDigestAuthChallenge *SipStandardDigestAuthScheme::createChallenge(SipStandardDigestAuthScheme *this)
{
  SipDigestAuthChallenge *v2;

  v2 = (SipDigestAuthChallenge *)operator new();
  SipDigestAuthChallenge::SipDigestAuthChallenge(v2, this);
  return v2;
}

void sub_1BF0AA004(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40E7B9B157);
  _Unwind_Resume(a1);
}

SipDigestAuthResponse *SipStandardDigestAuthScheme::createResponse(SipStandardDigestAuthScheme *this)
{
  SipDigestAuthResponse *v2;

  v2 = (SipDigestAuthResponse *)operator new();
  SipDigestAuthResponse::SipDigestAuthResponse(v2, this);
  return v2;
}

void sub_1BF0AA06C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10F3C405BF2102ELL);
  _Unwind_Resume(a1);
}

void SipStandardDigestAuthScheme::~SipStandardDigestAuthScheme(void **this)
{
  SipStandardDigestAuthScheme::~SipStandardDigestAuthScheme(this);
  JUMPOUT(0x1C3B87100);
}

{
  void **v2;

  *this = &off_1E78DB7F0;
  if (*((char *)this + 231) < 0)
    operator delete(this[26]);
  if (*((char *)this + 207) < 0)
    operator delete(this[23]);
  *this = &off_1E78C92F0;
  v2 = this + 20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  v2 = this + 10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  *this = off_1E78D92D8;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)(this + 1));
}

uint64_t SipStandardDigestAuthScheme::clone(SipStandardDigestAuthScheme *this)
{
  uint64_t v2;

  v2 = operator new();
  SipDigestAuthScheme::SipDigestAuthScheme((SipDigestAuthScheme *)v2, this);
  *(_QWORD *)v2 = &off_1E78DB7F0;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  std::string::operator=((std::string *)(v2 + 184), (const std::string *)((char *)this + 184));
  std::string::operator=((std::string *)(v2 + 208), (const std::string *)((char *)this + 208));
  return v2;
}

void sub_1BF0AA140(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C4000F68170);
  _Unwind_Resume(a1);
}

void SipRegistrationInfoBody::SipRegistrationInfoBody(SipRegistrationInfoBody *this, const SipRegistrationInfoBody *a2)
{
  __int128 v4;

  *(_QWORD *)this = off_1E78D24E0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  *(_QWORD *)this = off_1E78CE6A0;
  SipRegistrationInfo::SipRegistrationInfo((SipRegistrationInfoBody *)((char *)this + 32), (const SipRegistrationInfoBody *)((char *)a2 + 32), 0);
}

void sub_1BF0AA2DC(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)v2 = v3;
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_SipRegistrationInfoBody_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(SipRegistrationInfoBody::kContentType, "application/reginfo+xml");
  return __cxa_atexit(MEMORY[0x1E0DE44D0], SipRegistrationInfoBody::kContentType, &dword_1BEDF4000);
}

void SipToHeader::~SipToHeader(SipToHeader *this)
{
  *(_QWORD *)this = &off_1E78DC1D0;
  SipUri::~SipUri((SipToHeader *)((char *)this + 104));
  *(_QWORD *)this = off_1E78E5828;
  *((_QWORD *)this + 8) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  SipHeader::~SipHeader((void **)this);
}

{
  *(_QWORD *)this = &off_1E78DC1D0;
  SipUri::~SipUri((SipToHeader *)((char *)this + 104));
  *(_QWORD *)this = off_1E78E5828;
  *((_QWORD *)this + 8) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C3B87100);
}

SipUriHeader *SipToHeader::clone(SipToHeader *this)
{
  SipUriHeader *v2;

  v2 = (SipUriHeader *)operator new();
  SipUriHeader::SipUriHeader(v2, this);
  *(_QWORD *)v2 = &off_1E78DB8B8;
  return v2;
}

void sub_1BF0AA44C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C4072661F37);
  _Unwind_Resume(a1);
}

void SipRoutableLocalAddressHeader::SipRoutableLocalAddressHeader(SipRoutableLocalAddressHeader *this)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipStringHeader::SipStringHeader((uint64_t)this, (const std::string *)"Routable-Local-Address", &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)this = off_1E78DB958;
  *((_BYTE *)this + 56) = 0;
}

void sub_1BF0AA4DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SipRoutableLocalAddressHeader::setValueFromString(uint64_t a1, std::string *a2)
{
  IpAddress *v3;
  void **v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 v10;
  uint64_t v11;
  IpAddress *v12;
  std::__shared_weak_count *v13;

  v12 = 0;
  v13 = 0;
  IpAddress::createAddress(a2, (uint64_t)&v12);
  v3 = v12;
  if (v12 && (*(unsigned int (**)(IpAddress *))(*(_QWORD *)v12 + 88))(v12))
  {
    IpAddress::asString(v3, 3, &v10);
    v4 = (void **)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
      operator delete(*v4);
    *(_OWORD *)v4 = v10;
    *(_QWORD *)(a1 + 80) = v11;
  }
  if (*(char *)(a1 + 87) < 0)
    v5 = *(_QWORD *)(a1 + 72);
  else
    v5 = *(unsigned __int8 *)(a1 + 87);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5 != 0;
}

void sub_1BF0AA5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SipRoutableLocalAddressHeader::~SipRoutableLocalAddressHeader(void **this)
{
  *this = off_1E78B8320;
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  SipHeader::~SipHeader(this);
}

{
  *this = off_1E78B8320;
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C3B87100);
}

SipStringHeader *SipRoutableLocalAddressHeader::clone(SipRoutableLocalAddressHeader *this)
{
  SipStringHeader *v2;

  v2 = (SipStringHeader *)operator new();
  SipStringHeader::SipStringHeader(v2, this);
  *(_QWORD *)v2 = off_1E78DB958;
  *((_BYTE *)v2 + 56) = 0;
  return v2;
}

void sub_1BF0AA6C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1093C40EE8ABE80);
  _Unwind_Resume(a1);
}

void LazuliUri::LazuliUri(LazuliUri *this, const SipHost *a2, char a3)
{
  std::string *v4;
  uint64_t **v5;
  uint64_t v6;
  const std::string::value_type *v7;
  uint64_t *v8;
  std::string __p;
  void *v10[2];
  char v11;
  void **v12;

  *(_QWORD *)this = &off_1E78DB9F0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (std::string *)((char *)this + 8);
  *((_QWORD *)this + 7) = &off_1E78D08F8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_WORD *)this + 44) = 0;
  *((_QWORD *)this + 14) = &off_1E78B82D8;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 15) = (char *)this + 128;
  v5 = (uint64_t **)((char *)this + 120);
  *((_QWORD *)this + 17) = 0;
  *((_BYTE *)this + 152) = a3;
  *((_WORD *)this + 72) = 257;
  SipHost::operator=((uint64_t)this + 56, (uint64_t)a2);
  if (!*((_WORD *)this + 44))
  {
    *((_WORD *)this + 44) = 2855;
    v6 = *((_QWORD *)this + 12);
    if (v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v6, 2855);
  }
  if (*((_BYTE *)this + 152))
    v7 = "msrps";
  else
    v7 = "msrp";
  std::string::__assign_external(v4, v7);
  std::string::basic_string[abi:ne180100]<0>(v10, "tcp");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v12 = v10;
  v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, v10, (uint64_t)&std::piecewise_construct, (__int128 **)&v12);
  std::string::operator=((std::string *)(v8 + 7), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(v10[0]);
}

void sub_1BF0AA854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  void **v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;

  if (a20 < 0)
    operator delete(__p);
  *(_QWORD *)(v20 + 112) = v24;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v23, *(_QWORD **)(v20 + 128));
  SipHost::~SipHost(v22);
  if (*(char *)(v20 + 55) < 0)
    operator delete(*(void **)(v20 + 32));
  if (*(char *)(v20 + 31) < 0)
    operator delete(*v21);
  _Unwind_Resume(a1);
}

uint64_t LazuliUri::fromString(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string::size_type v6;
  std::string::size_type v7;
  void **v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  _DWORD *v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string::size_type v20;
  std::string::size_type v21;
  std::string::size_type v22;
  void **v23;
  uint64_t v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  std::string __p;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, "LazuliUri");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&__str, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"fromString ", 11);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, a2);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (*(char *)(a1 + 31) < 0)
  {
    **(_BYTE **)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 31) = 0;
  }
  if (*(char *)(a1 + 87) < 0)
  {
    **(_BYTE **)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 87) = 0;
  }
  *(_WORD *)(a1 + 88) = 0;
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)(a1 + 96));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 120, *(_QWORD **)(a1 + 128));
  *(_QWORD *)(a1 + 120) = a1 + 128;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (!v5)
      return 0;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
    if (!*(_BYTE *)(a2 + 23))
      return 0;
  }
  v6 = std::string::find((const std::string *)a2, 58, 0);
  if (v6 == -1)
    return 0;
  v7 = v6;
  std::string::basic_string(&__p, (const std::string *)a2, 0, v6, (std::allocator<char> *)v27);
  ims::lowerCase((uint64_t)&__p, &__str);
  v8 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = *(unsigned __int8 *)(a1 + 31);
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a1 + 16);
  if (v9 == 5)
  {
    if (v10 >= 0)
      v14 = (unsigned __int8 *)(a1 + 8);
    else
      v14 = (unsigned __int8 *)*v8;
    v15 = *(_DWORD *)v14;
    v16 = v14[4];
    if (v15 != 1886548845 || v16 != 115)
      return 0;
    v13 = 1;
    goto LABEL_38;
  }
  if (v9 != 4)
    return 0;
  result = 0;
  if (v10 >= 0)
    v12 = (_DWORD *)(a1 + 8);
  else
    v12 = *v8;
  if (*v12 != 1886548845)
    return result;
  v13 = 0;
LABEL_38:
  *(_BYTE *)(a1 + 152) = v13;
  v18 = std::string::find((const std::string *)a2, 59, v7 + 1);
  if (v18 == -1)
    return 0;
  v19 = v18;
  std::string::basic_string(&__str, (const std::string *)a2, v18 + 1, v5 + ~v18, (std::allocator<char> *)&__p);
  SipParameterMap::fromString(a1 + 112, &__str, 0, 0);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v20 = v7 + 3;
  v21 = std::string::find((const std::string *)a2, 47, v20);
  if (v21 == -1)
  {
    v22 = v19;
  }
  else
  {
    v22 = v21;
    std::string::basic_string(&__str, (const std::string *)a2, v21 + 1, v19 + ~v21, (std::allocator<char> *)&__p);
    v23 = (void **)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      operator delete(*v23);
    *(_OWORD *)v23 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
  }
  if (v22 <= v20)
    return 0;
  memset(&__str, 0, sizeof(__str));
  std::string::basic_string(&__str, (const std::string *)a2, v20, v22 - v20, (std::allocator<char> *)&__p);
  SipHost::fromString(a1 + 56, &__str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "LazuliUri");
  std::string::basic_string[abi:ne180100]<0>(v27, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v24 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)" scheme=", 8);
  *(_BYTE *)(v24 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 32))(v24, a1 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)" _hostname=", 11);
  *(_BYTE *)(v24 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 32))(v24, a1 + 64);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)" _hostport=", 11);
  *(_BYTE *)(v24 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v24 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)" _sessionId=", 12);
  *(_BYTE *)(v24 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 32))(v24, a1 + 32);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)" tcp=", 5);
  *(_BYTE *)(v24 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(v25, "tcp");
  std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 120, v25);
  std::ostream::operator<<();
  *(_BYTE *)(v24 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v24 + 17) = 0;
  if (v26 < 0)
    operator delete(v25[0]);
  if (v28 < 0)
    operator delete(v27[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1BF0AADE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void LazuliUri::setHostPort(LazuliUri *this, unsigned __int16 a2)
{
  _OWORD v4[2];
  __int128 v5;
  uint64_t v6;

  v6 = 0;
  v5 = 0u;
  memset(v4, 0, sizeof(v4));
  SipHost::SipHost((uint64_t)v4, (uint64_t)this + 56);
  LOWORD(v5) = a2;
  if (*((_QWORD *)&v5 + 1))
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)&v5 + 1) + 64))(*((_QWORD *)&v5 + 1), a2);
  (*(void (**)(LazuliUri *, _OWORD *))(*(_QWORD *)this + 24))(this, v4);
  SipHost::~SipHost((void **)v4);
}

void sub_1BF0AAEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  SipHost::~SipHost(&a9);
  _Unwind_Resume(a1);
}

void LazuliUri::~LazuliUri(LazuliUri *this)
{
  *(_QWORD *)this = &off_1E78DB9F0;
  *((_QWORD *)this + 14) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 120, *((_QWORD **)this + 16));
  SipHost::~SipHost((void **)this + 7);
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  LazuliUri::~LazuliUri(this);
  JUMPOUT(0x1C3B87100);
}

ImsOutStream *LazuliUri::toStream(LazuliUri *this, ImsOutStream *a2)
{
  std::string __p;

  if (*((char *)this + 31) < 0)
  {
    if (!*((_QWORD *)this + 2))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)this + 31))
  {
    goto LABEL_7;
  }
  LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 8));
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"://", 3);
  *((_BYTE *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_7:
  SipHost::toStream((LazuliUri *)((char *)this + 56), a2, 1);
  if (*((char *)this + 55) < 0)
  {
    if (!*((_QWORD *)this + 5))
      goto LABEL_13;
  }
  else if (!*((_BYTE *)this + 55))
  {
    goto LABEL_13;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"/", 1);
  *((_BYTE *)a2 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 32));
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_13:
  SipParameterMap::toStream((LazuliUri *)((char *)this + 112), a2, 0, CFSTR("[]/:&+$"), CFSTR("#@!'()*="), 0);
  return a2;
}

void sub_1BF0AB0CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t LazuliUri::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const void **v14;
  unsigned __int8 *v15;

  v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 31);
  else
    v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a2 + 31);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 16);
  if (v3 != v4)
    return 0;
  v8 = (const void **)(a1 + 8);
  if (v5 >= 0)
    v9 = (unsigned __int8 *)(a2 + 8);
  else
    v9 = *(unsigned __int8 **)(a2 + 8);
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(_QWORD *)(a1 + 16)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 31))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  v10 = *(unsigned __int8 *)(a1 + 55);
  if ((v10 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(a1 + 55);
  else
    v11 = *(_QWORD *)(a1 + 40);
  v12 = *(unsigned __int8 *)(a2 + 55);
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a2 + 40);
  if (v11 != v12)
    return 0;
  v14 = (const void **)(a1 + 32);
  if (v13 >= 0)
    v15 = (unsigned __int8 *)(a2 + 32);
  else
    v15 = *(unsigned __int8 **)(a2 + 32);
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*v14, v15, *(_QWORD *)(a1 + 40)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 55))
  {
    while (*(unsigned __int8 *)v14 == *v15)
    {
      v14 = (const void **)((char *)v14 + 1);
      ++v15;
      if (!--v10)
        goto LABEL_31;
    }
    return 0;
  }
LABEL_31:
  if (*(unsigned __int8 *)(a1 + 152) == *(unsigned __int8 *)(a2 + 152)
    && SipHost::equals((SipHost *)(a1 + 56), (const SipHost *)(a2 + 56), 1))
  {
    return SipParameterMap::operator==((_QWORD *)(a1 + 112), a2 + 112);
  }
  return 0;
}

LazuliUri *LazuliUri::clone(LazuliUri *this)
{
  LazuliUri *v2;

  v2 = (LazuliUri *)operator new();
  LazuliUri::LazuliUri(v2, this);
  return v2;
}

void sub_1BF0AB284(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40431A04D0);
  _Unwind_Resume(a1);
}

uint64_t LazuliUri::setHost(LazuliUri *this, const SipHost *a2)
{
  return SipHost::operator=((uint64_t)this + 56, (uint64_t)a2);
}

void LazuliUri::ipAddress(LazuliUri *this@<X0>, _QWORD *a2@<X8>)
{
  SipHost::ipAddress((LazuliUri *)((char *)this + 56), a2);
}

void LazuliUri::returnAddress(LazuliUri *this@<X0>, _QWORD *a2@<X8>)
{
  SipHost::ipAddress((LazuliUri *)((char *)this + 56), a2);
}

void LazuliUri::LazuliUri(LazuliUri *this, const LazuliUri *a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)this = &off_1E78DB9F0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 2);
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
    *((_OWORD *)this + 2) = v5;
  }
  SipHost::SipHost((uint64_t)this + 56, (uint64_t)a2 + 56);
  *((_QWORD *)this + 14) = &off_1E78B82D8;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)this + 15, *((void ***)a2 + 15), (void **)a2 + 16);
  *((_BYTE *)this + 145) = 1;
  *((_BYTE *)this + 144) = *((_BYTE *)a2 + 144);
  *((_BYTE *)this + 152) = *((_BYTE *)a2 + 152);
}

void sub_1BF0AB3B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t SipUint32Header::encodeValue(SipUint32Header *this, ImsOutStream *a2)
{
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  return 1;
}

uint64_t SipUint32Header::setValueFromString(uint64_t a1, uint64_t a2)
{
  const char *v3;

  if (*(char *)(a2 + 23) >= 0)
    v3 = (const char *)a2;
  else
    v3 = *(const char **)a2;
  *(_DWORD *)(a1 + 60) = strtoul(v3, 0, 10);
  return 1;
}

void SipUint32Header::~SipUint32Header(void **this)
{
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipUint32Header::clone(SipUint32Header *this)
{
  uint64_t v2;

  v2 = operator new();
  SipHeader::SipHeader((SipHeader *)v2, this);
  *(_QWORD *)v2 = &off_1E78DBA48;
  *(_DWORD *)(v2 + 60) = *((_DWORD *)this + 15);
  *(_BYTE *)(v2 + 56) = 0;
  return v2;
}

void sub_1BF0AB4E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1093C401DA35BB1);
  _Unwind_Resume(a1);
}

uint64_t SipPAccessNetworkInfoHeader::SipPAccessNetworkInfoHeader(uint64_t a1, const std::string *a2)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_45);
  SipStringParameterHeader::SipStringParameterHeader(a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = off_1E78DBAE0;
  *(_DWORD *)(a1 + 128) = 2;
  return a1;
}

void sub_1BF0AB57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SipPAccessNetworkInfoHeader::setAccessNetworkInfo(uint64_t a1, std::string *this, uint64_t a3, int a4)
{
  const std::string *v8;
  tm *v9;
  std::string::size_type size;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  std::string::size_type v15;
  uint64_t *v16;
  std::string v18;
  __int128 *v19[7];
  __int128 v20;
  uint64_t v21;
  std::string __str;
  std::string v23;

  memset(&v23, 0, sizeof(v23));
  memset(&__str, 0, sizeof(__str));
  if (ims::AccessNetwork::isGSM((ims::AccessNetwork *)this))
  {
    v8 = (const std::string *)"cgi-3gpp";
LABEL_7:
    std::string::operator=(&v23, v8);
    goto LABEL_8;
  }
  if (ims::AccessNetwork::isUMTS((ims::AccessNetwork *)this)
    || ims::AccessNetwork::isLTE((ims::AccessNetwork *)this)
    || ims::AccessNetwork::isNR((ims::AccessNetwork *)this))
  {
    v8 = (const std::string *)"utran-cell-id-3gpp";
    goto LABEL_7;
  }
  if (ims::AccessNetwork::is3GPP2((ims::AccessNetwork *)this))
  {
    v8 = (const std::string *)"ci-3gpp2";
    goto LABEL_7;
  }
  if (ims::AccessNetwork::isWifi((ims::AccessNetwork *)this))
  {
    v8 = (const std::string *)"i-wlan-node-id";
    goto LABEL_7;
  }
LABEL_8:
  if (a4)
  {
    v21 = 0;
    v20 = 0u;
    memset(&v19[1], 0, 48);
    v19[0] = (__int128 *)time(0);
    ims::localtime((ims *)v19, (tm *)&v19[2], v9);
    LODWORD(v21) = v20;
    ImsInternetDateTime::toString((ImsInternetDateTime *)v19, &v18);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str = v18;
    ims::addQuotes((uint64_t)&__str, 0);
  }
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  else
    size = v23.__r_.__value_.__l.__size_;
  if (size)
  {
    std::string::operator=((std::string *)(a1 + 104), this);
    v11 = (uint64_t **)(a1 + 72);
    v19[0] = (__int128 *)&v23;
    v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, (void **)&v23.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v19);
    std::string::operator=((std::string *)(v12 + 7), this + 1);
    v13 = *(unsigned __int8 *)(a3 + 23);
    if ((v13 & 0x80u) != 0)
      v13 = *(_QWORD *)(a3 + 8);
    if (v13)
    {
      v19[0] = (__int128 *)"country";
      v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, (void **)"country", (uint64_t)&std::piecewise_construct, v19);
      std::string::operator=((std::string *)(v14 + 7), (const std::string *)a3);
    }
    v15 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v15 = __str.__r_.__value_.__l.__size_;
    if (v15)
    {
      v19[0] = (__int128 *)"local-time-zone";
      v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, (void **)"local-time-zone", (uint64_t)&std::piecewise_construct, v19);
      std::string::operator=((std::string *)(v16 + 7), &__str);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  return size != 0;
}

void sub_1BF0AB7E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  if (*(char *)(v1 - 33) < 0)
    operator delete(*(void **)(v1 - 56));
  _Unwind_Resume(exception_object);
}

void SipPAccessNetworkInfoHeader::~SipPAccessNetworkInfoHeader(void **this)
{
  *this = off_1E78C5CF8;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  *this = off_1E78E5828;
  this[8] = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
}

{
  *this = off_1E78C5CF8;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  *this = off_1E78E5828;
  this[8] = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C3B87100);
}

SipStringParameterHeader *SipPAccessNetworkInfoHeader::clone(SipPAccessNetworkInfoHeader *this)
{
  SipStringParameterHeader *v2;

  v2 = (SipStringParameterHeader *)operator new();
  SipStringParameterHeader::SipStringParameterHeader(v2, this);
  *(_QWORD *)v2 = off_1E78DBAE0;
  *((_DWORD *)v2 + 32) = 2;
  return v2;
}

void sub_1BF0AB948(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C4070BFB248);
  _Unwind_Resume(a1);
}

std::string::size_type ims::nextToken(std::string *a1, std::string::size_type a2, std::string *a3, unsigned __int8 a4)
{
  std::string::size_type Token;
  void *__p;
  char v7;

  v7 = 1;
  LOWORD(__p) = a4;
  Token = ims::nextToken(a1, a2, a3, (char *)&__p);
  if (v7 < 0)
    operator delete(__p);
  return Token;
}

void sub_1BF0AB9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ims::nextTokenView(uint64_t *a1, unint64_t a2, _QWORD *a3, char *a4)
{
  char *v4;
  unint64_t v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  char *v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  *a3 = 0;
  a3[1] = 0;
  v8 = *((char *)a1 + 23);
  if (v8 >= 0)
    v9 = *((unsigned __int8 *)a1 + 23);
  else
    v9 = a1[1];
  if (v9 > a2)
  {
    if (a4[23] >= 0)
      v10 = a4;
    else
      v10 = *(char **)a4;
    if (v8 >= 0)
      v11 = a1;
    else
      v11 = (uint64_t *)*a1;
    while (strchr(v10, *((char *)v11 + v6)))
    {
      if (v9 == ++v6)
        return -1;
    }
  }
  if (v6 == v9)
    return -1;
  v13 = (uint64_t *)*v7;
  v12 = v6;
  if (v6 < v9)
  {
    if (v4[23] >= 0)
      v14 = v4;
    else
      v14 = *(char **)v4;
    if (v8 >= 0)
      v15 = v7;
    else
      v15 = (uint64_t *)*v7;
    v12 = v6;
    while (!strchr(v14, *((char *)v15 + v12)))
    {
      if (v9 == ++v12)
      {
        v12 = v9;
        break;
      }
    }
  }
  if (v8 >= 0)
    v16 = v7;
  else
    v16 = v13;
  *a3 = (char *)v16 + v6;
  a3[1] = v12 - v6;
  v17 = *((unsigned __int8 *)v7 + 23);
  v18 = v17;
  v19 = v7[1];
  if ((v17 & 0x80u) == 0)
    v20 = *((unsigned __int8 *)v7 + 23);
  else
    v20 = v7[1];
  if (v12 < v20)
  {
    v21 = v4[23] >= 0 ? v4 : *(char **)v4;
    v22 = (v17 & 0x80u) == 0 ? (uint64_t)v7 : *v7;
    if (strchr(v21, *(char *)(v22 + v12)))
    {
      *(_BYTE *)(v22 + v12) = 0;
      v17 = *((unsigned __int8 *)v7 + 23);
      v19 = v7[1];
      v18 = *((_BYTE *)v7 + 23);
    }
  }
  if (v18 < 0)
    v17 = v19;
  if (v12 < v17)
  {
    if (v4[23] < 0)
      v4 = *(char **)v4;
    if (v18 < 0)
      v7 = (uint64_t *)*v7;
    while (strchr(v4, *((char *)v7 + v12)))
    {
      if (v17 == ++v12)
        return v17;
    }
  }
  return v12;
}

unint64_t ims::nextTokenQ(std::string *__str, std::string::size_type __pos, std::string *this, unsigned __int8 a4)
{
  std::string::size_type v4;
  char v6;
  std::string::size_type size;
  std::string *v8;
  int v10;
  unint64_t v11;
  char v12;
  std::string *v13;
  std::string *v14;
  std::string::size_type v15;
  int v16;
  int v17;
  uint64_t v18;
  std::string::size_type v19;
  int v20;
  std::string *v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26;
  _QWORD *v27;
  void *__p[2];
  char v29;
  void *v30[2];
  char v31;
  std::string::value_type v32;

  v4 = __pos;
  v6 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v6 >= 0)
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  else
    size = __str->__r_.__value_.__l.__size_;
  if (size > __pos)
  {
    if (v6 >= 0)
      v8 = __str;
    else
      v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
    while (v8->__r_.__value_.__s.__data_[v4] == 32)
    {
      if (size == ++v4)
        return -1;
    }
  }
  if (v4 == size)
    return -1;
  v10 = a4;
  v11 = v4;
  if (v4 >= size)
  {
LABEL_41:
    std::string::assign(this, __str, v4, v11 - v4);
    v19 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    v20 = (char)v19;
    if ((v19 & 0x80u) != 0)
      v19 = __str->__r_.__value_.__l.__size_;
    if (v20 >= 0)
      v21 = __str;
    else
      v21 = (std::string *)__str->__r_.__value_.__r.__words[0];
    do
    {
      v22 = v11 + 1;
      v23 = v21->__r_.__value_.__s.__data_[v11] != v10 || v11 >= v19;
      ++v11;
    }
    while (!v23);
    return v22 - 1;
  }
  v12 = 0;
  if (v6 >= 0)
    v13 = __str;
  else
    v13 = (std::string *)__str->__r_.__value_.__r.__words[0];
  v11 = v4;
  while (1)
  {
    while ((*((_BYTE *)&__str->__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v14 = __str;
      if (__str->__r_.__value_.__s.__data_[v11] == 92)
      {
        v15 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
        goto LABEL_31;
      }
LABEL_22:
      v16 = v14->__r_.__value_.__s.__data_[v11];
      if (v16 == 34)
      {
        v12 ^= 1u;
        goto LABEL_34;
      }
      if ((v12 & 1) != 0)
      {
        if (++v11 >= size)
          goto LABEL_36;
      }
      else
      {
        if (v16 == a4)
          goto LABEL_41;
        if (++v11 >= size)
          goto LABEL_41;
      }
    }
    v14 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(__str->__r_.__value_.__r.__words[0] + v11) != 92)
      goto LABEL_22;
    v15 = __str->__r_.__value_.__l.__size_;
LABEL_31:
    if (v11 >= v15 - 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v30, "util");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v24 = ImsLogger::error(ims::_logger, (uint64_t)v30, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"Can't end a line with a backslash", 33);
      *(_BYTE *)(v24 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v24 + 17) = 0;
      goto LABEL_37;
    }
    v17 = v13->__r_.__value_.__s.__data_[++v11];
    if (v17 != 34 && v17 != 92)
      break;
LABEL_34:
    if (++v11 >= size)
    {
      if ((v12 & 1) == 0)
        goto LABEL_41;
LABEL_36:
      std::string::basic_string[abi:ne180100]<0>(v30, "util");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v18 = ImsLogger::error(ims::_logger, (uint64_t)v30, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"Unbalanced quotes at offset ", 28);
      *(_BYTE *)(v18 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v18 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)": ", 2);
      *(_BYTE *)(v18 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v18 + 32))(v18, __str);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v18 + 17) = 0;
      goto LABEL_37;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v30, "util");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v25 = ImsLogger::error(ims::_logger, (uint64_t)v30, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"Invalid escape \\", 16);
  *(_BYTE *)(v25 + 17) = 0;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = __str;
  else
    v26 = (std::string *)__str->__r_.__value_.__r.__words[0];
  v27 = *(_QWORD **)(v25 + 8);
  v32 = v26->__r_.__value_.__s.__data_[v11];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)&v32, 1);
  *(_BYTE *)(v25 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v25 + 17) = 0;
LABEL_37:
  if (v29 < 0)
    operator delete(__p[0]);
  if (v31 < 0)
    operator delete(v30[0]);
  return -1;
}

void sub_1BF0ABF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t ims::tokenize(std::string *a1, uint64_t *a2, unsigned __int8 a3)
{
  unint64_t v3;
  void *__p[2];
  uint64_t v6;

  __p[1] = 0;
  v6 = 0x100000000000000;
  __p[0] = (void *)a3;
  v3 = ims::tokenize(a1, a2, (char *)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_1BF0ABFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ims::tokenizeAsView(uint64_t *a1, void **a2, char *a3)
{
  uint64_t v6;
  unint64_t i;
  unint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v21;

  v21 = 0uLL;
  v6 = ims::nextTokenView(a1, 0, &v21, a3);
  if (v6 != -1)
  {
    for (i = v6; i != -1; i = ims::nextTokenView(a1, i, &v21, a3))
    {
      if (*((_QWORD *)&v21 + 1))
      {
        v9 = a2[1];
        v8 = (unint64_t)a2[2];
        if ((unint64_t)v9 >= v8)
        {
          v11 = ((char *)v9 - (_BYTE *)*a2) >> 4;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 60)
            std::vector<std::string_view>::__throw_length_error[abi:ne180100]();
          v13 = v8 - (_QWORD)*a2;
          if (v13 >> 3 > v12)
            v12 = v13 >> 3;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
            v14 = 0xFFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
            v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)(a2 + 2), v14);
          else
            v15 = 0;
          v16 = &v15[16 * v11];
          *(_OWORD *)v16 = v21;
          v18 = (char *)*a2;
          v17 = (char *)a2[1];
          v19 = v16;
          if (v17 != *a2)
          {
            do
            {
              *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
              v19 -= 16;
              v17 -= 16;
            }
            while (v17 != v18);
            v17 = (char *)*a2;
          }
          v10 = v16 + 16;
          *a2 = v19;
          a2[1] = v16 + 16;
          a2[2] = &v15[16 * v14];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *v9 = v21;
          v10 = v9 + 1;
        }
        a2[1] = v10;
      }
    }
  }
  return ((_BYTE *)a2[1] - (_BYTE *)*a2) >> 4;
}

unint64_t ims::findNotQuoted(uint64_t *a1, unsigned __int8 a2)
{
  char v3;
  int v4;
  unint64_t result;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  int v9;

  v3 = 0;
  v4 = 0;
  result = 0;
  v6 = *((unsigned __int8 *)a1 + 23);
  if ((v6 & 0x80u) == 0)
    v7 = a1;
  else
    v7 = (uint64_t *)*a1;
  if ((v6 & 0x80) != 0)
    goto LABEL_7;
LABEL_5:
  v8 = *((unsigned __int8 *)a1 + 23);
  if (result < v6)
  {
    do
    {
      if (v8 <= result)
        std::string::__throw_out_of_range[abi:ne180100]();
      if ((v3 & 1) == 0)
      {
        v9 = *((unsigned __int8 *)v7 + result);
        if (v9 == 92)
        {
          v3 = 1;
          goto LABEL_16;
        }
        if (v9 == 34)
        {
          v3 = 0;
          v4 ^= 1u;
          goto LABEL_16;
        }
        if (((v9 == a2) & ~v4) != 0)
          return result;
      }
      v3 = 0;
LABEL_16:
      ++result;
      if ((v6 & 0x80) == 0)
        goto LABEL_5;
LABEL_7:
      v8 = a1[1];
    }
    while (result < v8);
  }
  return -1;
}

void ims::chomp(std::string *__str, char *__s, char a3)
{
  std::string::size_type v6;
  std::string::size_type size;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string *v10;
  std::string *v11;
  std::string v12;
  char v13;

  v6 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    size = __str->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v8 = 0;
  if ((a3 & 1) != 0)
  {
    while (1)
    {
      v9 = v6;
      if ((v6 & 0x80) != 0)
        v9 = __str->__r_.__value_.__l.__size_;
      if (v8 >= v9)
        break;
      v10 = __str;
      if ((v6 & 0x80) != 0)
        v10 = (std::string *)__str->__r_.__value_.__r.__words[0];
      if (!strchr(__s, v10->__r_.__value_.__s.__data_[v8]))
        break;
      ++v8;
    }
  }
  if (v8 == size)
  {
    if ((v6 & 0x80) != 0)
    {
      *__str->__r_.__value_.__l.__data_ = 0;
      __str->__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      __str->__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&__str->__r_.__value_.__s + 23) = 0;
    }
  }
  else
  {
    if ((a3 & 2) != 0 && size >= 2)
    {
      while (1)
      {
        v11 = __str;
        if ((v6 & 0x80) != 0)
          v11 = (std::string *)__str->__r_.__value_.__r.__words[0];
        if (!strchr(__s, v11->__r_.__value_.__s.__data_[size - 1]))
          break;
        if (--size <= 1)
        {
          size = 1;
          break;
        }
      }
    }
    std::string::basic_string(&v12, __str, v8, size - v8, (std::allocator<char> *)&v13);
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str->__r_.__value_.__l.__data_);
    *__str = v12;
  }
}

void ims::chomp(char *__s@<X1>, uint64_t a2@<X0>, char a3@<W2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  ims::chomp(a4, __s, a3);
}

void sub_1BF0AC3B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL ims::addPercentEscapes(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  const char *v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  _BOOL8 v11;
  uint64_t v13;
  uint64_t v14;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;

  v6 = (const char *)a1;
  if (*(char *)(a1 + 23) < 0)
    v6 = *(const char **)a1;
  v7 = CFStringCreateWithCString(0, v6, 0x8000100u);
  if (v7)
  {
    v8 = v7;
    if (a3)
      v9 = a3;
    else
      v9 = CFSTR(":/?#[]@!$&'()*+,;=");
    v10 = CFURLCreateStringByAddingPercentEscapes(0, v7, a2, v9, 0x8000100u);
    CFRelease(v8);
    if (v10)
    {
      v11 = ims::convertCFString(v10, (std::string *)a1, 0x8000100u);
      CFRelease(v10);
      return v11;
    }
    std::string::basic_string[abi:ne180100]<0>(v17, "util");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v14 = ImsLogger::error(ims::_logger, (uint64_t)v17, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"CreateStringByAddingPercentEscapes failed for '", 47);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "util");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v13 = ImsLogger::error(ims::_logger, (uint64_t)v17, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"addPercentEscapes: couldn't create CFString", 43);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
  }
  if (v16 < 0)
    operator delete(__p[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  return 0;
}

void sub_1BF0AC5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ims::convertCFString(const __CFString *a1, std::string *a2, CFStringEncoding a3)
{
  CFIndex Length;
  int CString;
  _BOOL8 v8;
  std::vector<char> v10;

  if (!a1)
    return 0;
  memset(&v10, 0, sizeof(v10));
  Length = CFStringGetLength(a1);
  std::vector<char>::__append(&v10, Length + 1);
  CString = CFStringGetCString(a1, v10.__begin_, v10.__end_ - v10.__begin_, a3);
  v8 = CString != 0;
  if (CString)
    std::string::__assign_external(a2, v10.__begin_);
  if (v10.__begin_)
  {
    v10.__end_ = v10.__begin_;
    operator delete(v10.__begin_);
  }
  return v8;
}

void sub_1BF0AC6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ims::removePercentEscapes(uint64_t a1)
{
  const char *v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  _BOOL8 v6;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  if (std::string::find((const std::string *)a1, 37, 0) == -1)
    return 1;
  v2 = (const char *)a1;
  if (*(char *)(a1 + 23) < 0)
    v2 = *(const char **)a1;
  v3 = CFStringCreateWithCString(0, v2, 0x8000100u);
  if (v3)
  {
    v4 = v3;
    v5 = CFURLCreateStringByReplacingPercentEscapes(0, v3, &stru_1E78F26B0);
    CFRelease(v4);
    if (v5)
    {
      v6 = ims::convertCFString(v5, (std::string *)a1, 0x8000100u);
      CFRelease(v5);
      return v6;
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "util");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::error(ims::_logger, (uint64_t)v12, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"CreateStringByReplacingPercentEscapes failed for '", 50);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"'", 1);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "util");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::error(ims::_logger, (uint64_t)v12, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"removePercentEscapes: couldn't create CFString", 46);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
  }
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  return 0;
}

void sub_1BF0AC8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ims::caseInsensitiveStringCompare(const char *a1, const char *a2)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  return strcasecmp(a1, a2) == 0;
}

void ims::addQuotes(uint64_t a1, int a2)
{
  std::string *v3;
  std::string::size_type v4;
  char v5;
  uint64_t v6;
  std::string __p;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  if (!a2 || !ims::hasQuotes((uint64_t *)a1))
  {
    std::operator+<char>();
    v3 = std::string::append(&__p, "\"", 1uLL);
    v4 = v3->__r_.__value_.__r.__words[0];
    v8[0] = v3->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v8 + 7) = *(std::string::size_type *)((char *)&v3->__r_.__value_.__r.__words[1] + 7);
    v5 = HIBYTE(v3->__r_.__value_.__r.__words[2]);
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v6 = v8[0];
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 15) = *(_QWORD *)((char *)v8 + 7);
    *(_BYTE *)(a1 + 23) = v5;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1BF0ACA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ims::hasQuotes(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;

  if (*((char *)a1 + 23) < 0)
  {
    v2 = a1[1];
    if (v2 <= 1)
      return 0;
    a1 = (uint64_t *)*a1;
    if (*(_BYTE *)a1 != 34)
      return 0;
    return *((_BYTE *)a1 + v2 - 1) == 34;
  }
  v1 = 0;
  v2 = *((unsigned __int8 *)a1 + 23);
  if (v2 >= 2 && *(_BYTE *)a1 == 34)
    return *((_BYTE *)a1 + v2 - 1) == 34;
  return v1;
}

double ims::removeQuotes(uint64_t a1)
{
  double result;
  uint64_t v3;
  std::string v4;
  char v5;

  if (ims::hasQuotes((uint64_t *)a1))
  {
    if (*(char *)(a1 + 23) < 0)
      v3 = *(_QWORD *)(a1 + 8);
    else
      v3 = *(unsigned __int8 *)(a1 + 23);
    std::string::basic_string(&v4, (const std::string *)a1, 1uLL, v3 - 2, (std::allocator<char> *)&v5);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    result = *(double *)&v4.__r_.__value_.__l.__data_;
    *(std::string *)a1 = v4;
  }
  return result;
}

double ims::removeQuotes@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  return ims::removeQuotes((uint64_t)a2);
}

void sub_1BF0ACB94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void ims::unescapeString(uint64_t *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v12;
  int v13;
  uint64_t *v14;
  int v15;
  int v16;
  std::string::value_type v17;
  char *v18;
  unint64_t v19;

  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  v5 = *((unsigned __int8 *)a1 + 23);
  v6 = *((char *)a1 + 23) < 0;
  v7 = a1[1];
  if (*((char *)a1 + 23) >= 0)
    v8 = *((unsigned __int8 *)a1 + 23);
  else
    v8 = a1[1];
  if (v8)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (v6)
        v14 = (uint64_t *)*a1;
      else
        v14 = a1;
      v15 = *((unsigned __int8 *)v14 + v12);
      v16 = v13 | (v15 != a2);
      if (v13 & 1 | (v15 != a2))
      {
        v17 = v15;
        if ((v13 & 1) != 0)
        {
          v18 = *(char *)(a3 + 23) >= 0 ? (char *)a3 : *(char **)a3;
          if (!strchr(v18, (char)v15))
            std::string::push_back(a4, a2);
        }
        std::string::push_back(a4, v17);
        v5 = *((unsigned __int8 *)a1 + 23);
        v7 = a1[1];
      }
      v13 = v16 ^ 1;
      ++v12;
      v6 = (v5 & 0x80u) != 0;
      if ((v5 & 0x80u) == 0)
        v19 = v5;
      else
        v19 = v7;
    }
    while (v12 < v19);
  }
}

void sub_1BF0ACCA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

__darwin_time_t ims::getCurrentNTPTimestampInMilliseconds(ims *this)
{
  timeval v2;

  v2.tv_sec = 0;
  *(_QWORD *)&v2.tv_usec = 0;
  gettimeofday(&v2, 0);
  return 1000 * v2.tv_sec + v2.tv_usec / 1000 + 2208988800000;
}

uint64_t ims::formatTime(ims *this, uint64_t a2, tm *a3)
{
  void **v4;
  void **v5;
  size_t v6;
  void *__p[2];
  uint64_t v9;
  ims *v10;

  v9 = 0;
  v10 = this;
  __p[0] = 0;
  __p[1] = 0;
  v4 = __p;
  ims::ctime((ims *)&v10, a3, __p);
  v5 = (void **)__p[0];
  *((_BYTE *)__p[0] + 24) = 0;
  if (v9 < 0)
    v4 = v5;
  v6 = strlen((const char *)v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)v4, v6);
  *(_BYTE *)(a2 + 17) = 0;
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  return a2;
}

void sub_1BF0ACDAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ims::formatTimeIntervalMillis(unint64_t this, uint64_t a2, ImsOutStream *a3)
{
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  const char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  if (!this)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"0s", 2);
    v5 = (_BYTE *)(a2 + 17);
LABEL_22:
    *v5 = 0;
    return a2;
  }
  v4 = this % 0x3E8;
  if (this <= 0x3E7)
  {
    std::ostream::operator<<();
    *(_BYTE *)(a2 + 17) = 0;
    v5 = (_BYTE *)(a2 + 17);
    v6 = *(_QWORD **)(a2 + 8);
    v7 = "ms";
    v8 = 2;
LABEL_21:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
    goto LABEL_22;
  }
  v9 = this / 0x3E8 - 86400 * ((unint64_t)((this / 0x3E8 * (unsigned __int128)0x308B91419CA253uLL) >> 64) >> 6);
  if (this <= 0x5265BFF)
  {
    v11 = v9 % 0xE10;
    v10 = v9 % 0xE10;
    if (v9 < 0xE10)
    {
      v12 = v9 % 0xE10 % 0x3C;
      if (v11 < 0x3C)
      {
        if (!(_DWORD)v12)
          return a2;
        goto LABEL_18;
      }
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  std::ostream::operator<<();
  *(_BYTE *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"d", 1);
  *(_BYTE *)(a2 + 17) = 0;
  v10 = v9 % 0xE10;
  if (v9 >= 0xE10)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)" ", 1);
    *(_BYTE *)(a2 + 17) = 0;
LABEL_12:
    std::ostream::operator<<();
    *(_BYTE *)(a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"h", 1);
    *(_BYTE *)(a2 + 17) = 0;
  }
  v12 = (unsigned __int16)v10 % 0x3Cu;
  if (v10 < 0x3C)
    goto LABEL_16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)" ", 1);
  *(_BYTE *)(a2 + 17) = 0;
LABEL_15:
  std::ostream::operator<<();
  *(_BYTE *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"m", 1);
  *(_BYTE *)(a2 + 17) = 0;
LABEL_16:
  if (v12)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)" ", 1);
    *(_BYTE *)(a2 + 17) = 0;
LABEL_18:
    std::ostream::operator<<();
    *(_BYTE *)(a2 + 17) = 0;
    v5 = (_BYTE *)(a2 + 17);
    if (v4)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)".", 1);
      *(_BYTE *)(a2 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(a2 + 17) = 0;
    }
    v6 = *(_QWORD **)(a2 + 8);
    v7 = "s";
    v8 = 1;
    goto LABEL_21;
  }
  return a2;
}

uint64_t ims::formatTimeInterval@<X0>(ims *this@<X0>, _QWORD *a2@<X8>)
{
  ImsOutStream *v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v6, 1);
  ims::formatTimeIntervalMillis(1000 * (_QWORD)this, (uint64_t)&v6, v4);
  result = std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v7 + 1) + 8, a2);
  *(_QWORD *)&v6 = &off_1E78D7A10;
  if ((_BYTE)v7)
  {
    result = *((_QWORD *)&v6 + 1);
    if (*((_QWORD *)&v6 + 1))
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v6 + 1) + 8))(*((_QWORD *)&v6 + 1));
  }
  return result;
}

void sub_1BF0AD110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11)
  {
    if (a10)
      (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ims::formatTimeAndIntervalFromNow(ims *this, uint64_t a2, tm *a3)
{
  time_t v5;
  ImsOutStream *v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;

  ims::formatTime(this, a2, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)" (", 2);
  *(_BYTE *)(a2 + 17) = 0;
  v5 = time(0);
  if (v5 >= (uint64_t)this)
  {
    if (v5 <= (uint64_t)this)
    {
      v7 = *(_QWORD **)(a2 + 8);
      v8 = "now";
      v9 = 3;
    }
    else
    {
      ims::formatTimeIntervalMillis(1000 * (v5 - (_QWORD)this), a2, v6);
      v7 = *(_QWORD **)(a2 + 8);
      v8 = " ago";
      v9 = 4;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    *(_BYTE *)(a2 + 17) = 0;
  }
  else
  {
    ims::formatTimeIntervalMillis(1000 * ((_QWORD)this - v5), a2, v6);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)")", 1);
  *(_BYTE *)(a2 + 17) = 0;
  return a2;
}

void ims::performBlock(IMSClientManager *a1)
{
  dispatch_queue_t queue;

  IMSClientManager::instance(a1);
  IMSClientManager::queue(&queue);
  dispatch_async(queue, a1);
  if (queue)
    dispatch_release(queue);
}

void ims::userHomeDirectory(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  std::vector<char>::size_type v4;
  int v5;
  uid_t v6;
  std::vector<char> v7;
  passwd *v8;
  passwd v9;

  memset(&v9, 0, sizeof(v9));
  v8 = 0;
  v4 = sysconf(71);
  memset(&v7, 0, sizeof(v7));
  if (v4)
    std::vector<char>::__append(&v7, v4);
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
    {
LABEL_9:
      v6 = getuid();
      v5 = getpwuid_r(v6, &v9, v7.__begin_, v4, &v8);
      goto LABEL_10;
    }
    a1 = (uint64_t *)*a1;
  }
  else if (!*((_BYTE *)a1 + 23))
  {
    goto LABEL_9;
  }
  v5 = getpwnam_r((const char *)a1, &v9, v7.__begin_, v4, &v8);
LABEL_10:
  if (v5 || !v9.pw_dir)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, v9.pw_dir);
  }
  if (v7.__begin_)
  {
    v7.__end_ = v7.__begin_;
    operator delete(v7.__begin_);
  }
}

void sub_1BF0AD3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ims::isCarrierInstall(ims *this)
{
  const void *v1;
  _BOOL8 v2;
  _QWORD v4[2];

  v4[0] = 0;
  v1 = (const void *)MGCopyAnswer();
  v2 = (_BOOL8)v1;
  v4[1] = v1;
  if (v1)
  {
    CFRetain(v1);
    v4[0] = &off_1E78EADA0;
    v2 = CFBooleanGetValue((CFBooleanRef)v2) != 0;
  }
  else
  {
    v4[0] = &off_1E78EADA0;
  }
  ims::CFType::~CFType((ims::CFType *)v4);
  return v2;
}

void sub_1BF0AD468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ims::CFType::~CFType((ims::CFType *)&a9);
  _Unwind_Resume(a1);
}

void ims::osVersion(std::string *a1@<X8>)
{
  void *__p[2];
  char v4;

  std::string::basic_string[abi:ne180100]<0>(__p, "???");
  ims::simpleMobileGestaltString(a1, (uint64_t)CFSTR("ProductVersion"), (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1BF0AD4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ims::simpleMobileGestaltString(std::string *this, uint64_t a2, uint64_t a3)
{
  std::string::size_type size;
  char v5;
  std::string __str;
  void (**v7)(ims::CFString *__hidden);
  const __CFString *v8;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    *this = *(std::string *)a3;
  v7 = &off_1E78EAB58;
  v8 = (const __CFString *)MGCopyAnswer();
  memset(&__str, 0, sizeof(__str));
  ims::CFString::asString(v8, (const void *)0x8000100, &__str);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  v5 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size)
  {
    std::string::operator=(this, &__str);
    v5 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v5 < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  ims::CFType::~CFType((ims::CFType *)&v7);
}

void sub_1BF0AD5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  ims::CFType::~CFType((ims::CFType *)&a16);
  if (*(char *)(v16 + 23) < 0)
    operator delete(*(void **)v16);
  _Unwind_Resume(a1);
}

void ims::osBuild(std::string *a1@<X8>)
{
  void *__p[2];
  char v4;

  std::string::basic_string[abi:ne180100]<0>(__p, "???");
  ims::simpleMobileGestaltString(a1, (uint64_t)CFSTR("BuildVersion"), (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1BF0AD650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ims::deviceClass(std::string *a1@<X8>)
{
  void *__p[2];
  char v4;

  std::string::basic_string[abi:ne180100]<0>(__p, "???");
  ims::simpleMobileGestaltString(a1, (uint64_t)CFSTR("DeviceClass"), (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1BF0AD6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ims::shortDeviceClass(_QWORD *a1@<X8>)
{
  std::string *p_p;
  int v4;
  void *v5;
  std::string *v6;
  int v7;
  int v8;
  std::string *v9;
  int v10;
  void *v11;
  std::string *v12;
  int v13;
  int v14;
  std::string *v15;
  int v16;
  void *v17;
  std::string *v18;
  int v19;
  int v20;
  std::string *v21;
  int v22;
  void *v23;
  std::string *v24;
  int v25;
  char *v26;
  std::string v27;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  ims::deviceClass(&__p);
  std::string::basic_string[abi:ne180100]<0>(&v27, "Mac");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v4 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
  v5 = (void *)v27.__r_.__value_.__r.__words[0];
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v27;
  else
    v6 = (std::string *)v27.__r_.__value_.__r.__words[0];
  v7 = strcasecmp((const char *)p_p, (const char *)v6);
  v8 = v7;
  if ((v4 & 0x80000000) == 0)
  {
    if (v7)
      goto LABEL_9;
LABEL_37:
    v26 = "A";
    goto LABEL_42;
  }
  operator delete(v5);
  if (!v8)
    goto LABEL_37;
LABEL_9:
  ims::CFString::asString(CFSTR("iPod"), (const void *)0x8000100, &v27);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &__p;
  else
    v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v10 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
  v11 = (void *)v27.__r_.__value_.__r.__words[0];
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v27;
  else
    v12 = (std::string *)v27.__r_.__value_.__r.__words[0];
  v13 = strcasecmp((const char *)v9, (const char *)v12);
  v14 = v13;
  if ((v10 & 0x80000000) == 0)
  {
    if (v13)
      goto LABEL_17;
LABEL_39:
    v26 = "P";
    goto LABEL_42;
  }
  operator delete(v11);
  if (!v14)
    goto LABEL_39;
LABEL_17:
  ims::CFString::asString(CFSTR("iPad"), (const void *)0x8000100, &v27);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &__p;
  else
    v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v16 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
  v17 = (void *)v27.__r_.__value_.__r.__words[0];
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v27;
  else
    v18 = (std::string *)v27.__r_.__value_.__r.__words[0];
  v19 = strcasecmp((const char *)v15, (const char *)v18);
  v20 = v19;
  if (v16 < 0)
  {
    operator delete(v17);
    if (v20)
      goto LABEL_25;
LABEL_41:
    v26 = "T";
    goto LABEL_42;
  }
  if (!v19)
    goto LABEL_41;
LABEL_25:
  ims::CFString::asString(CFSTR("Watch"), (const void *)0x8000100, &v27);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &__p;
  else
    v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v22 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
  v23 = (void *)v27.__r_.__value_.__r.__words[0];
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &v27;
  else
    v24 = (std::string *)v27.__r_.__value_.__r.__words[0];
  v25 = strcasecmp((const char *)v21, (const char *)v24);
  if (v22 < 0)
    operator delete(v23);
  if (v25)
    v26 = "M";
  else
    v26 = "C";
LABEL_42:
  std::string::basic_string[abi:ne180100]<0>(a1, v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF0AD8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ims::userAssignedDeviceName(std::string *a1@<X8>)
{
  std::string __p;

  ims::deviceClass(&__p);
  ims::simpleMobileGestaltString(a1, (uint64_t)CFSTR("UserAssignedDeviceName"), (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF0AD94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ims::substituteVar@<X0>(const std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  std::string::size_type i;
  std::string::size_type size;
  std::string::size_type v9;
  int v10;
  char *v11;
  int64_t v12;
  std::string::size_type v13;
  void *v14;
  char *v15;
  int64_t v16;
  int v17;
  int64_t v18;
  char *v19;
  char *v20;
  std::string *v21;
  std::string::size_type v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  std::string::size_type v28;
  std::string v31;
  _OWORD v32[4];
  void *__p[2];
  __int128 v34;
  __int128 v35;
  _BYTE v36[144];
  uint64_t v37;
  _BYTE v38[17];

  v37 = 0;
  memset(v36, 0, sizeof(v36));
  v34 = 0u;
  v35 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v32, 0, sizeof(v32));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v32);
  for (i = 0; ; i = v26 + v13)
  {
    if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
    {
      size = a1->__r_.__value_.__l.__size_;
      if (i >= size)
        goto LABEL_48;
      v9 = a1->__r_.__value_.__r.__words[0];
    }
    else
    {
      size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
      v9 = (std::string::size_type)a1;
      if (i >= size)
        goto LABEL_48;
    }
    v10 = *(char *)(a2 + 23);
    v11 = v10 >= 0 ? (char *)a2 : *(char **)a2;
    v12 = v10 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
    v13 = i;
    if (v12)
      break;
LABEL_23:
    std::string::basic_string(&v31, a1, i, v13 - i, (std::allocator<char> *)v38);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &v31;
    else
      v21 = (std::string *)v31.__r_.__value_.__r.__words[0];
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    else
      v22 = v31.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v21, v22);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    v23 = *(char *)(a3 + 23);
    if (v23 >= 0)
      v24 = a3;
    else
      v24 = *(_QWORD *)a3;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(a3 + 23);
    else
      v25 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v24, v25);
    v26 = *(unsigned __int8 *)(a2 + 23);
    if ((v26 & 0x80u) != 0)
      v26 = *(_QWORD *)(a2 + 8);
  }
  v14 = (void *)(v9 + i);
  v15 = (char *)(v9 + size);
  v16 = size - i;
  if (v16 >= v12)
  {
    v17 = *v11;
    do
    {
      v18 = v16 - v12;
      if (v18 == -1)
        break;
      v19 = (char *)memchr(v14, v17, v18 + 1);
      if (!v19)
        break;
      v20 = v19;
      if (!memcmp(v19, v11, v12))
      {
        if (v20 == v15)
          break;
        v13 = (std::string::size_type)&v20[-v9];
        if (&v20[-v9] == (char *)-1)
          break;
        goto LABEL_23;
      }
      v14 = v20 + 1;
      v16 = v15 - (v20 + 1);
    }
    while (v16 >= v12);
  }
  std::string::basic_string(&v31, a1, i, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v38);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = &v31;
  else
    v27 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  else
    v28 = v31.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v27, v28);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
LABEL_48:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v32 + 8, a4);
  *(_QWORD *)&v32[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v32 + *(_QWORD *)(*(_QWORD *)&v32[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v32[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v34) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v36);
}

void sub_1BF0ADBF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ims::makeUrnFromImei(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const ImsResult *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  std::string::value_type v24;
  std::string *p_str;
  std::string *v26;
  std::string::size_type size;
  _QWORD *v28;
  _QWORD *v29;
  std::string *v30;
  std::string::size_type v31;
  _QWORD *v32;
  _QWORD *v33;
  std::string *v34;
  std::string::size_type v35;
  char v36;
  uint64_t v37;
  const ImsResult *v38;
  std::string::size_type v39;
  uint64_t v40;
  uint64_t *v41;
  std::string __p;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string __str;
  _BYTE v47[80];
  __int128 v48;
  __int128 v49;
  _OWORD v50[9];
  uint64_t v51;
  char v52;

  v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
  {
    memset(&v47[24], 0, 48);
    *(_QWORD *)v47 = &off_1E78B7238;
    *(_QWORD *)&v47[8] = &_bambiDomain;
    *(_DWORD *)&v47[16] = 1073741825;
    v14 = (const ImsResult *)ImsResult::operator<<<char [14]>((uint64_t)v47, "IMEI is empty");
    ImsResult::ImsResult((ImsResult *)a5, v14);
    ImsResult::~ImsResult((ImsResult *)v47);
    return;
  }
  memset(&__p, 0, sizeof(__p));
  v51 = 0;
  v49 = 0u;
  memset(v50, 0, sizeof(v50));
  v48 = 0u;
  memset(v47, 0, sizeof(v47));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v47);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"imei:", 5);
  if (std::string::find((const std::string *)a1, 45, 0) != -1)
  {
    v11 = *(char *)(a1 + 23);
    if (v11 >= 0)
      v12 = a1;
    else
      v12 = *(_QWORD *)a1;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a1 + 23);
    else
      v13 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v12, v13);
LABEL_66:
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v47[8], &__str);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __str;
    v36 = 1;
    goto LABEL_69;
  }
  memset(&__str, 0, sizeof(__str));
  LODWORD(v15) = *(char *)(a1 + 23);
  if ((v15 & 0x80000000) == 0)
  {
    __str = *(std::string *)a1;
LABEL_16:
    v16 = 0;
    v17 = v15;
    goto LABEL_17;
  }
  std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  LODWORD(v15) = *(char *)(a1 + 23);
  if ((v15 & 0x80000000) == 0)
    goto LABEL_16;
  v17 = *(_QWORD *)(a1 + 8);
  v16 = 1;
LABEL_17:
  if (v17 == 14)
  {
    if ((a3 & 1) != 0)
      goto LABEL_38;
    v18 = *(_QWORD *)(a1 + 8);
    if (!v16)
      v18 = v15;
    if (!v18)
      goto LABEL_38;
    v19 = 0;
    v20 = 0;
    v21 = v16 ? *(_QWORD *)a1 : a1;
    do
    {
      if ((v20 & 1) != 0)
        v22 = ims::sumOfDouble[(*(_BYTE *)(v21 + v20) - 48)];
      else
        v22 = (*(_BYTE *)(v21 + v20) - 48);
      v19 += v22;
      ++v20;
    }
    while (v18 != v20);
    v23 = v19 % 0xA;
    if (v23)
      v24 = (10 - v23) | 0x30;
    else
LABEL_38:
      v24 = 48;
    std::string::push_back(&__str, v24);
LABEL_40:
    std::string::basic_string(&v45, &__str, 0, 8uLL, (std::allocator<char> *)&v44);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v45;
    else
      v26 = (std::string *)v45.__r_.__value_.__r.__words[0];
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    else
      size = v45.__r_.__value_.__l.__size_;
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v26, size);
    v44.__r_.__value_.__s.__data_[0] = 45;
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)&v44, 1);
    std::string::basic_string(&v44, &__str, 8uLL, 6uLL, (std::allocator<char> *)&v43);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v44;
    else
      v30 = (std::string *)v44.__r_.__value_.__r.__words[0];
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    else
      v31 = v44.__r_.__value_.__l.__size_;
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
    v43.__r_.__value_.__s.__data_[0] = 45;
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)&v43, 1);
    std::string::basic_string(&v43, &__str, 0xEuLL, 1uLL, (std::allocator<char> *)&v52);
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &v43;
    else
      v34 = (std::string *)v43.__r_.__value_.__r.__words[0];
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    else
      v35 = v43.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    goto LABEL_66;
  }
  v15 = v15;
  if (v16)
    v15 = *(_QWORD *)(a1 + 8);
  if (v15 == 15)
  {
    if (a3)
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      p_str->__r_.__value_.__s.__data_[14] = 48;
    }
    goto LABEL_40;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v36 = 0;
LABEL_69:
  *(_QWORD *)v47 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)&v47[*(_QWORD *)(*(_QWORD *)v47 - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)&v47[8] = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v48) < 0)
    operator delete(*(void **)&v47[72]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B8707C](v50);
  if ((v36 & 1) == 0)
  {
    memset(&v47[24], 0, 48);
    *(_QWORD *)v47 = &off_1E78B7238;
    *(_QWORD *)&v47[8] = &_bambiDomain;
    *(_DWORD *)&v47[16] = 0x40000000;
    v37 = ImsResult::operator<<<char [39]>((uint64_t)v47, "couldn't format device id as an IMEI: ");
    v38 = (const ImsResult *)ImsResult::operator<<<std::string>(v37, a1);
    ImsResult::ImsResult((ImsResult *)a5, v38);
    ImsResult::~ImsResult((ImsResult *)v47);
    goto LABEL_91;
  }
  std::string::basic_string[abi:ne180100]<0>(v47, "gsma");
  SipUri::makeUrn((SipUri *)a4);
  std::string::operator=((std::string *)(a4 + 224), (const std::string *)v47);
  if ((v47[23] & 0x80000000) != 0)
    operator delete(*(void **)v47);
  SipUri::setNamespaceStr(a4, &__p);
  if (*(char *)(a2 + 23) < 0)
  {
    v39 = *(_QWORD *)(a2 + 8);
    if (v39 - 1 < 2)
    {
      memset(v47, 0, 24);
      std::string::__init_copy_ctor_external((std::string *)v47, *(const std::string::value_type **)a2, v39);
      goto LABEL_80;
    }
  }
  else if (*(unsigned __int8 *)(a2 + 23) - 1 <= 1)
  {
    *(_OWORD *)v47 = *(_OWORD *)a2;
    *(_QWORD *)&v47[16] = *(_QWORD *)(a2 + 16);
LABEL_80:
    v40 = v47[23];
    if (v47[23] < 0)
      v40 = *(_QWORD *)&v47[8];
    if (v40 == 1)
    {
      std::operator+<char>();
      if ((v47[23] & 0x80000000) != 0)
        operator delete(*(void **)v47);
      *(std::string *)v47 = __str;
    }
    std::string::basic_string[abi:ne180100]<0>(&__str, "svn");
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a4 + 72), (void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v45);
    std::string::operator=((std::string *)(v41 + 7), (const std::string *)v47);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if ((v47[23] & 0x80000000) != 0)
      operator delete(*(void **)v47);
  }
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_QWORD *)a5 = &off_1E78B7238;
  *(_QWORD *)(a5 + 8) = &_bambiDomain;
  *(_DWORD *)(a5 + 16) = 0;
LABEL_91:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF0AE254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ims::makeUrnFromUuid(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  const ImsResult *v7;
  char v8;
  size_t size;
  std::string *v10;
  _BYTE *v11;
  std::string::size_type v12;
  std::string *v14;
  std::string::size_type v15;
  _QWORD *v16;
  _QWORD *v17;
  std::string *v18;
  std::string::size_type v19;
  _QWORD *v20;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type v23;
  _QWORD *v24;
  _QWORD *v25;
  std::string *v26;
  std::string::size_type v27;
  _QWORD *v28;
  _QWORD *v29;
  std::string *v30;
  std::string::size_type v31;
  char v32;
  uint64_t v33;
  const ImsResult *v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string __str;
  _BYTE v42[80];
  __int128 v43;
  __int128 v44;
  _OWORD v45[9];
  uint64_t v46;
  char v47;

  v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    memset(&v35, 0, sizeof(v35));
    v46 = 0;
    v44 = 0u;
    memset(v45, 0, sizeof(v45));
    v43 = 0u;
    memset(v42, 0, sizeof(v42));
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v42);
    memset(&__str, 0, sizeof(__str));
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      __str = *(std::string *)a1;
    while (1)
    {
      v8 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        size = __str.__r_.__value_.__l.__size_;
      if (!size)
        goto LABEL_63;
      v10 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__str
          : (std::string *)__str.__r_.__value_.__r.__words[0];
      v11 = memchr(v10, 45, size);
      v12 = v11 - (_BYTE *)v10;
      if (!v11 || v12 == -1)
        break;
      std::string::erase(&__str, v12, 1uLL);
    }
    if (size != 32)
    {
LABEL_63:
      v32 = 0;
      if ((v8 & 0x80) == 0)
        goto LABEL_65;
      goto LABEL_64;
    }
    std::string::basic_string(&v40, &__str, 0, 8uLL, (std::allocator<char> *)&v39);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v40;
    else
      v14 = (std::string *)v40.__r_.__value_.__r.__words[0];
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    else
      v15 = v40.__r_.__value_.__l.__size_;
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v14, v15);
    v39.__r_.__value_.__s.__data_[0] = 45;
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v39, 1);
    std::string::basic_string(&v39, &__str, 8uLL, 4uLL, (std::allocator<char> *)&v38);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v39;
    else
      v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    else
      v19 = v39.__r_.__value_.__l.__size_;
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
    v38.__r_.__value_.__s.__data_[0] = 45;
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v38, 1);
    std::string::basic_string(&v38, &__str, 0xCuLL, 4uLL, (std::allocator<char> *)&v37);
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v38;
    else
      v22 = (std::string *)v38.__r_.__value_.__r.__words[0];
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    else
      v23 = v38.__r_.__value_.__l.__size_;
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    v37.__r_.__value_.__s.__data_[0] = 45;
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)&v37, 1);
    std::string::basic_string(&v37, &__str, 0x10uLL, 4uLL, (std::allocator<char> *)&v36);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v37;
    else
      v26 = (std::string *)v37.__r_.__value_.__r.__words[0];
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    else
      v27 = v37.__r_.__value_.__l.__size_;
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    v36.__r_.__value_.__s.__data_[0] = 45;
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)&v36, 1);
    std::string::basic_string(&v36, &__str, 0x14uLL, 0xCuLL, (std::allocator<char> *)&v47);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v36;
    else
      v30 = (std::string *)v36.__r_.__value_.__r.__words[0];
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    else
      v31 = v36.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v42[8], &v40);
    v35 = v40;
    v32 = 1;
    if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_64:
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_65:
    *(_QWORD *)v42 = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)&v42[*(_QWORD *)(*(_QWORD *)v42 - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    *(_QWORD *)&v42[8] = MEMORY[0x1E0DE4FB8] + 16;
    if (SHIBYTE(v43) < 0)
      operator delete(*(void **)&v42[72]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C3B8707C](v45);
    if ((v32 & 1) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v42, "uuid");
      SipUri::makeUrn((SipUri *)a2);
      std::string::operator=((std::string *)(a2 + 224), (const std::string *)v42);
      if ((v42[23] & 0x80000000) != 0)
        operator delete(*(void **)v42);
      SipUri::setNamespaceStr(a2, &v35);
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 40) = 0u;
      *(_OWORD *)(a3 + 56) = 0u;
      *(_QWORD *)a3 = &off_1E78B7238;
      *(_QWORD *)(a3 + 8) = &_bambiDomain;
      *(_DWORD *)(a3 + 16) = 0;
    }
    else
    {
      memset(&v42[24], 0, 48);
      *(_QWORD *)v42 = &off_1E78B7238;
      *(_QWORD *)&v42[8] = &_bambiDomain;
      *(_DWORD *)&v42[16] = 0x40000000;
      v33 = ImsResult::operator<<<char [39]>((uint64_t)v42, "couldn't format device id as an UUID: ");
      v34 = (const ImsResult *)ImsResult::operator<<<std::string>(v33, a1);
      ImsResult::ImsResult((ImsResult *)a3, v34);
      ImsResult::~ImsResult((ImsResult *)v42);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
  }
  else
  {
    memset(&v42[24], 0, 48);
    *(_QWORD *)v42 = &off_1E78B7238;
    *(_QWORD *)&v42[8] = &_bambiDomain;
    *(_DWORD *)&v42[16] = 1073741825;
    v7 = (const ImsResult *)ImsResult::operator<<<char [14]>((uint64_t)v42, "UUID is empty");
    ImsResult::ImsResult((ImsResult *)a3, v7);
    ImsResult::~ImsResult((ImsResult *)v42);
  }
}

void sub_1BF0AE834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a50 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a52);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(a1);
}

uint64_t ims::makeHexString@<X0>(ims *this@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  _OWORD v7[4];
  void *__p[2];
  __int128 v9;
  __int128 v10;
  _OWORD v11[9];
  uint64_t v12;
  char v13;

  v12 = 0;
  v10 = 0u;
  memset(v11, 0, sizeof(v11));
  *(_OWORD *)__p = 0u;
  v9 = 0u;
  memset(v7, 0, sizeof(v7));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  *(_DWORD *)((char *)v7 + *(_QWORD *)(*(_QWORD *)&v7[0] - 24) + 8) = *(_DWORD *)((_BYTE *)v7
                                                                                  + *(_QWORD *)(*(_QWORD *)&v7[0] - 24)
                                                                                  + 8) & 0xFFFFFFB5 | 8;
  v13 = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, &v13);
  for (; a2; --a2)
  {
    *(_QWORD *)((char *)&v7[1] + *(_QWORD *)(*(_QWORD *)&v7[0] - 24) + 8) = 2;
    this = (ims *)((char *)this + 1);
    std::ostream::operator<<();
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v7 + 8, a3);
  *(_QWORD *)&v7[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(*(_QWORD *)&v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v7[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v9) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v11);
}

void sub_1BF0AEA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t ims::strToUint32(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;

  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
      return a2;
    a1 = (uint64_t *)*a1;
  }
  else if (!*((_BYTE *)a1 + 23))
  {
    return a2;
  }
  v3 = strtoul((const char *)a1, 0, 10);
  if ((_DWORD)v3 || *__error() != 22)
    return v3;
  return a2;
}

uint64_t ims::strToLong(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
      return 0;
    a1 = (uint64_t *)*a1;
  }
  else if (!*((_BYTE *)a1 + 23))
  {
    return 0;
  }
  v3 = strtol((const char *)a1, 0, 10);
  if (!v3 && *__error() == 22)
    return 0;
  *a2 = v3;
  return 1;
}

BOOL ims::strToBool(uint64_t a1, int a2)
{
  const char *v3;
  char v4;
  void **v5;
  const char *v6;
  char v7;
  void **v8;
  const char *v9;
  int v10;
  void *v11;
  const char *v12;
  _BOOL8 v13;
  const char *v15;
  char v16;
  void **v17;
  const char *v18;
  char v19;
  void **v20;
  const char *v21;
  int v22;
  const char *v23;
  _QWORD v24[2];
  char v25;
  void *__p[2];
  char v27;
  void *v28[2];
  char v29;

  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v28, "false");
    if (*(char *)(a1 + 23) >= 0)
      v3 = (const char *)a1;
    else
      v3 = *(const char **)a1;
    v4 = v29;
    if (v29 >= 0)
      v5 = v28;
    else
      v5 = (void **)v28[0];
    if (!strcasecmp(v3, (const char *)v5))
    {
      v13 = 0;
      if ((v4 & 0x80) == 0)
        return v13;
      goto LABEL_27;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "off");
    if (*(char *)(a1 + 23) >= 0)
      v6 = (const char *)a1;
    else
      v6 = *(const char **)a1;
    v7 = v27;
    if (v27 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    if (strcasecmp(v6, (const char *)v8))
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "no");
      if (*(char *)(a1 + 23) >= 0)
        v9 = (const char *)a1;
      else
        v9 = *(const char **)a1;
      v10 = v25;
      v11 = (void *)v24[0];
      if (v25 >= 0)
        v12 = (const char *)v24;
      else
        v12 = (const char *)v24[0];
      v13 = strcasecmp(v9, v12) != 0;
      if (v10 < 0)
LABEL_23:
        operator delete(v11);
LABEL_24:
      if ((v27 & 0x80) == 0)
        goto LABEL_26;
      goto LABEL_25;
    }
    v13 = 0;
    if (v7 < 0)
      goto LABEL_25;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v28, "true");
    if (*(char *)(a1 + 23) >= 0)
      v15 = (const char *)a1;
    else
      v15 = *(const char **)a1;
    v16 = v29;
    if (v29 >= 0)
      v17 = v28;
    else
      v17 = (void **)v28[0];
    if (!strcasecmp(v15, (const char *)v17))
    {
      v13 = 1;
      if ((v16 & 0x80) == 0)
        return v13;
      goto LABEL_27;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "on");
    if (*(char *)(a1 + 23) >= 0)
      v18 = (const char *)a1;
    else
      v18 = *(const char **)a1;
    v19 = v27;
    if (v27 >= 0)
      v20 = __p;
    else
      v20 = (void **)__p[0];
    if (strcasecmp(v18, (const char *)v20))
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "yes");
      if (*(char *)(a1 + 23) >= 0)
        v21 = (const char *)a1;
      else
        v21 = *(const char **)a1;
      v22 = v25;
      v11 = (void *)v24[0];
      if (v25 >= 0)
        v23 = (const char *)v24;
      else
        v23 = (const char *)v24[0];
      v13 = strcasecmp(v21, v23) == 0;
      if (v22 < 0)
        goto LABEL_23;
      goto LABEL_24;
    }
    v13 = 1;
    if (v19 < 0)
LABEL_25:
      operator delete(__p[0]);
  }
LABEL_26:
  if (v29 < 0)
LABEL_27:
    operator delete(v28[0]);
  return v13;
}

void sub_1BF0AED7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

char *ims::lowerCase(char *result)
{
  char *v1;
  uint64_t v2;
  char *v3;

  v1 = result;
  if (result[23] < 0)
  {
    v1 = *(char **)result;
    v2 = *((_QWORD *)result + 1);
  }
  else
  {
    v2 = result[23];
  }
  v3 = &v1[v2];
  while (v1 != v3)
  {
    result = (char *)__tolower(*v1);
    *v1++ = (char)result;
  }
  return result;
}

char *ims::lowerCase@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  return ims::lowerCase((char *)a2);
}

void sub_1BF0AEE58(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *ims::upperCase(char *result)
{
  char *v1;
  uint64_t v2;
  char *v3;

  v1 = result;
  if (result[23] < 0)
  {
    v1 = *(char **)result;
    v2 = *((_QWORD *)result + 1);
  }
  else
  {
    v2 = result[23];
  }
  v3 = &v1[v2];
  while (v1 != v3)
  {
    result = (char *)__toupper(*v1);
    *v1++ = (char)result;
  }
  return result;
}

char *ims::upperCase@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  return ims::upperCase((char *)a2);
}

void sub_1BF0AEF14(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void ims::normalize(std::string *__str, int a2)
{
  if (a2 == 1)
  {
    ims::upperCase((char *)__str);
  }
  else if (a2 == 2)
  {
    ims::lowerCase((char *)__str);
  }
  ims::chomp(__str, "\r\n\t ", 3);
}

void ims::normalize(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  ims::normalize(a3, a2);
}

void sub_1BF0AEFDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL ims::fileExists(const std::string *__s, std::string *a2)
{
  uint64_t size;
  const std::string *v5;
  const std::string *v6;
  std::string *v7;
  const std::string *v8;
  std::string *p_str;
  int v10;
  int v11;
  stat v13;
  void *__p[2];
  uint64_t v15;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  std::string __str;

  memset(&__str, 0, sizeof(__str));
  LODWORD(size) = SHIBYTE(__s->__r_.__value_.__r.__words[2]);
  if ((size & 0x80000000) == 0)
  {
    __str = *__s;
LABEL_4:
    size = size;
    v5 = __s;
    goto LABEL_5;
  }
  std::string::__init_copy_ctor_external(&__str, __s->__r_.__value_.__l.__data_, __s->__r_.__value_.__l.__size_);
  LODWORD(size) = SHIBYTE(__s->__r_.__value_.__r.__words[2]);
  if ((size & 0x80000000) == 0)
    goto LABEL_4;
  v5 = (const std::string *)__s->__r_.__value_.__r.__words[0];
  size = __s->__r_.__value_.__l.__size_;
LABEL_5:
  if (size >= 2)
  {
    v6 = (const std::string *)((char *)v5 + size);
    v7 = (std::string *)v5;
    do
    {
      v8 = (const std::string *)memchr(v7, 126, size - 1);
      if (!v8)
        break;
      if (LOWORD(v8->__r_.__value_.__l.__data_) == 12158)
      {
        if (v8 != v6 && v8 == v5)
        {
          std::string::basic_string[abi:ne180100]<0>(v18, "~");
          __p[0] = 0;
          __p[1] = 0;
          v15 = 0;
          ims::userHomeDirectory((uint64_t *)__p, v16);
          ims::substituteVar(__s, (uint64_t)v18, (uint64_t)v16, &v13);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v13.st_dev;
          __str.__r_.__value_.__r.__words[2] = *(_QWORD *)&v13.st_uid;
          HIBYTE(v13.st_gid) = 0;
          LOBYTE(v13.st_dev) = 0;
          if (v17 < 0)
            operator delete(v16[0]);
          if (SHIBYTE(v15) < 0)
            operator delete(__p[0]);
          if (v19 < 0)
            operator delete(v18[0]);
        }
        break;
      }
      v7 = (std::string *)((char *)&v8->__r_.__value_.__l.__data_ + 1);
      size = (char *)v6 - (char *)v7;
    }
    while ((char *)v6 - (char *)v7 >= 2);
  }
  memset(&v13, 0, sizeof(v13));
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  v10 = stat((const char *)p_str, &v13);
  v11 = v10;
  if (a2 && !v10)
    std::string::operator=(a2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v11 == 0;
}

void sub_1BF0AF1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 105) < 0)
    operator delete(*(void **)(v33 - 128));
  if (a33 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 81) < 0)
    operator delete(*(void **)(v33 - 104));
  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t ims::makeAwdCallId@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _OWORD v5[4];
  void *__p[2];
  __int128 v7;
  __int128 v8;
  _OWORD v9[9];
  uint64_t v10;
  char v11;

  std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v5, a1);
  v10 = 0;
  v8 = 0u;
  memset(v9, 0, sizeof(v9));
  *(_OWORD *)__p = 0u;
  v7 = 0u;
  memset(v5, 0, sizeof(v5));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  *(_DWORD *)((char *)v5 + *(_QWORD *)(*(_QWORD *)&v5[0] - 24) + 8) = *(_DWORD *)((_BYTE *)v5
                                                                                  + *(_QWORD *)(*(_QWORD *)&v5[0] - 24)
                                                                                  + 8) & 0xFFFFFFB5 | 8;
  v11 = 48;
  v3 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, &v11);
  *(_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = 2;
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v5 + 8, a2);
  *(_QWORD *)&v5[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(*(_QWORD *)&v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v5[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v7) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v9);
}

void sub_1BF0AF354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::convertBundleIdToUuid(_QWORD *a1@<X8>)
{
  void *v4;
  void *v5;
  const unsigned __int8 *uuid;
  __int128 v7;
  uint64_t v8;
  char out[40];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (void *)NEHelperCacheCopyAppUUIDMapping();
  if (v4)
  {
    v5 = v4;
    memset(out, 0, 37);
    uuid = xpc_array_get_uuid(v4, 0);
    uuid_unparse(uuid, out);
    std::string::basic_string[abi:ne180100]<0>(&v7, out);
    *(_OWORD *)a1 = v7;
    a1[2] = v8;
    xpc_release(v5);
  }
}

void sub_1BF0AF418(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void std::vector<std::string_view>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void SDPAudioBuilder::adjustModel(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v13;
  signed int ResponseDirection;
  signed int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  _OWORD *v34;
  uint64_t v35;
  __int128 *v36;
  int v37;
  int v38;
  uint64_t v40;
  unsigned __int16 *v41;
  int v42;
  int v43;
  _BOOL4 v45;
  int v46;
  int v47;
  int v48;
  __int16 v49;
  _BOOL4 v50;
  uint64_t v51;
  unsigned __int16 *v52;
  int v53;
  int v54;
  _BOOL4 v56;
  uint64_t v57;
  unsigned __int16 v58;
  char v59;
  int v60;
  char v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::string::size_type size;
  std::string *p_p;
  int data;
  int v71;
  _BOOL4 v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  unint64_t *v77;
  _QWORD *v78;
  uint64_t v79;
  int v80;
  __int16 v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t j;
  __int16 v89;
  __int16 v90;
  int v91;
  __int16 v92;
  unsigned __int16 v93;
  int v94;
  unsigned __int16 v95;
  uint64_t v96;
  unsigned __int16 v97;
  int v98;
  unsigned __int16 v99;
  int v100;
  unsigned __int16 v101;
  char v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  void *v112[2];
  char v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  __int128 v116;
  __int128 v117;
  unsigned __int16 v118[16];
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  std::string v125;
  std::string __p;
  signed int v127;
  unsigned int v128;
  __int128 v129;
  std::string v130;
  __int128 v131;
  unsigned __int16 v132;
  char v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  _QWORD v139[3];
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  void *v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  _QWORD v151[4];
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;

  v161 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v7 = *(_QWORD *)(*a2 + 416);
  v6 = *(_QWORD *)(*a2 + 424);
  if (v7 == v6)
    return;
  for (i = v7 + 136; *(_DWORD *)(i - 124) != 2; i += 200)
  {
    v13 = i + 64;
    if (v13 == v6)
      return;
  }
  if (*(_BYTE *)(a3 + 432))
  {
    *(_QWORD *)(v5 + 144) = *(_QWORD *)(a3 + 96);
    ResponseDirection = SDPModelBuilder::getResponseDirection(a1, *(unsigned int *)(a3 + 40), a5);
    v128 = ResponseDirection;
    v15 = SDPModelBuilder::getResponseDirection(a1, *(unsigned int *)(a3 + 36), a5);
    v16 = v15;
    v127 = v15;
    if (*(_BYTE *)(a1 + 25))
    {
      if (ResponseDirection <= v15)
      {
        if (ResponseDirection < v15)
        {
          std::string::basic_string[abi:ne180100]<0>(&v147, "sdp");
          std::string::basic_string[abi:ne180100]<0>(&v129, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v26 = ImsLogger::debug(ims::_logger, (uint64_t)&v147, (uint64_t)&v129);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"Media-level direction was: ", 27);
          *(_BYTE *)(v26 + 17) = 0;
          ims::toString<MediaDirection>(&v128, &v116);
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v26 + 32))(v26, &v116);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)" setting it to: ", 16);
          *(_BYTE *)(v26 + 17) = 0;
          ims::toString<MediaDirection>((unsigned int *)&v127, &__p);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v26 + 32))(v26, &__p);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v26 + 17) = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SBYTE7(v117) < 0)
            operator delete((void *)v116);
          if (v130.__r_.__value_.__s.__data_[7] < 0)
            operator delete((void *)v129);
          if (SHIBYTE(v148) < 0)
            operator delete(v147);
          v128 = v16;
          ResponseDirection = v16;
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v147, "sdp");
        std::string::basic_string[abi:ne180100]<0>(&v129, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v17 = ImsLogger::debug(ims::_logger, (uint64_t)&v147, (uint64_t)&v129);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Session-level direction was: ", 29);
        *(_BYTE *)(v17 + 17) = 0;
        ims::toString<MediaDirection>((unsigned int *)&v127, &v116);
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v17 + 32))(v17, &v116);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)" setting it to: ", 16);
        *(_BYTE *)(v17 + 17) = 0;
        ims::toString<MediaDirection>(&v128, &__p);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v17 + 32))(v17, &__p);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v17 + 17) = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SBYTE7(v117) < 0)
          operator delete((void *)v116);
        if (v130.__r_.__value_.__s.__data_[7] < 0)
          operator delete((void *)v129);
        if (SHIBYTE(v148) < 0)
          operator delete(v147);
      }
      if (!ResponseDirection)
      {
        std::string::basic_string[abi:ne180100]<0>(&v147, "sdp");
        std::string::basic_string[abi:ne180100]<0>(&v129, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v27 = ImsLogger::warn(ims::_logger, (uint64_t)&v147, (uint64_t)&v129);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"The audio direction was set to undefined, setting to sendrecv", 61);
        *(_BYTE *)(v27 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v27 + 17) = 0;
        if (v130.__r_.__value_.__s.__data_[7] < 0)
          operator delete((void *)v129);
        if (SHIBYTE(v148) < 0)
          operator delete(v147);
        ResponseDirection = 1;
        v128 = 1;
      }
    }
    else if (!ResponseDirection)
    {
      if (v15 <= 1)
        ResponseDirection = 1;
      else
        ResponseDirection = v15;
      v128 = ResponseDirection;
      std::string::basic_string[abi:ne180100]<0>(&v147, "sdp");
      std::string::basic_string[abi:ne180100]<0>(&v129, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v25 = ImsLogger::warn(ims::_logger, (uint64_t)&v147, (uint64_t)&v129);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"The audio direction was set to undefined, setting to ", 53);
      *(_BYTE *)(v25 + 17) = 0;
      ims::toString<MediaDirection>(&v128, &v116);
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v25 + 32))(v25, &v116);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v25 + 17) = 0;
      if (SBYTE7(v117) < 0)
        operator delete((void *)v116);
      if (v130.__r_.__value_.__s.__data_[7] < 0)
        operator delete((void *)v129);
      if (SHIBYTE(v148) < 0)
        operator delete(v147);
    }
    v28 = *a2 + 392;
    v29 = *(_QWORD *)(*a2 + 400);
    if (v29 != v28)
    {
      v30 = *(_QWORD *)(*a2 + 400);
      while (*(_DWORD *)(v30 + 136) != 4)
      {
        v30 = *(_QWORD *)(v30 + 8);
        if (v30 == v28)
          goto LABEL_73;
      }
      while (*(_DWORD *)(v29 + 136) != 4)
        v29 = *(_QWORD *)(v29 + 8);
      *(_DWORD *)(v29 + 56) = ResponseDirection;
    }
LABEL_73:
    v31 = *(_QWORD *)(i + 8);
    if (i != v31)
    {
      v32 = *(_QWORD *)(i + 8);
      while (*(_DWORD *)(v32 + 136) != 4)
      {
        v32 = *(_QWORD *)(v32 + 8);
        if (i == v32)
          goto LABEL_81;
      }
      while (*(_DWORD *)(v31 + 136) != 4)
        v31 = *(_QWORD *)(v31 + 8);
      *(_DWORD *)(v31 + 56) = ResponseDirection;
    }
LABEL_81:
    if (*(_WORD *)(a3 + 28) == 255)
      goto LABEL_212;
    v111 = i - 96;
    std::__list_imp<SDPRepeatTime>::clear((uint64_t *)(i - 96));
    v148 = 0u;
    v149 = 0u;
    v150 = 0u;
    v159 = 0u;
    v158 = 0u;
    v157 = 0u;
    v156 = 0u;
    v160 = 0;
    v155 = 0u;
    v154 = 0u;
    v153 = 0u;
    v152 = 0u;
    memset(v151, 0, sizeof(v151));
    v33 = *(_WORD *)(a3 + 28);
    v147 = &off_1E78E2080;
    LOWORD(v148) = v33;
    LOBYTE(v149) = 1;
    *((_QWORD *)&v149 + 1) = 0;
    v150 = 0uLL;
    *((_QWORD *)&v148 + 1) = &off_1E78EE990;
    LOWORD(v151[0]) = 255;
    v151[1] = 0;
    LODWORD(v152) = 0x10000;
    v153 = 1uLL;
    v154 = 0uLL;
    v155 = 0xFFuLL;
    *((_QWORD *)&v152 + 1) = &off_1E78B8590;
    v156 = 0uLL;
    v34 = (_OWORD *)(a3 + 280);
    if (*(char *)(a3 + 303) < 0)
    {
      std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)(a3 + 280), *(_QWORD *)(a3 + 288));
    }
    else
    {
      *(_OWORD *)&v125.__r_.__value_.__l.__data_ = *v34;
      v125.__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 296);
    }
    SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v129, v33, (__int128 *)&v125, *(_WORD *)(a3 + 308), 1);
    LOBYTE(v149) = BYTE8(v129);
    std::string::operator=((std::string *)((char *)&v149 + 8), &v130);
    LOWORD(v151[0]) = v131;
    std::string::operator=((std::string *)&v151[1], (const std::string *)((char *)&v131 + 8));
    LODWORD(v152) = v136;
    SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v129);
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v125.__r_.__value_.__l.__data_);
    if (*(char *)(a3 + 303) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v129, *(const std::string::value_type **)(a3 + 280), *(_QWORD *)(a3 + 288));
    }
    else
    {
      v129 = *v34;
      v130.__r_.__value_.__r.__words[0] = *(_QWORD *)(a3 + 296);
    }
    v35 = v130.__r_.__value_.__s.__data_[7];
    if (v130.__r_.__value_.__s.__data_[7] < 0)
      v35 = *((_QWORD *)&v129 + 1);
    if (v35 == 6)
    {
      v36 = (__int128 *)v129;
      if (v130.__r_.__value_.__s.__data_[7] >= 0)
        v36 = &v129;
      v37 = *(_DWORD *)v36;
      v38 = *((unsigned __int16 *)v36 + 2);
      if (v37 == 760368449 && v38 == 16983)
      {
        v45 = 1;
        if ((v130.__r_.__value_.__s.__data_[7] & 0x80) == 0)
        {
LABEL_118:
          if (v45)
            goto LABEL_119;
          goto LABEL_124;
        }
LABEL_123:
        operator delete((void *)v129);
        if (v45)
        {
LABEL_119:
          v91 = *(unsigned __int8 *)(a3 + 328);
          v93 = *(_WORD *)(a3 + 332);
          v95 = *(_WORD *)(a3 + 334);
          v97 = *(_WORD *)(a3 + 336);
          v99 = *(_WORD *)(a3 + 338);
          v101 = *(_WORD *)(a3 + 340);
          v46 = *(unsigned __int8 *)(a3 + 342);
          v47 = *(unsigned __int8 *)(a3 + 343);
          v48 = *(unsigned __int8 *)(a3 + 344);
          v105 = *(unsigned __int8 *)(a3 + 345);
          v107 = *(unsigned __int8 *)(a3 + 346);
          v109 = *(unsigned __int8 *)(a3 + 347);
          v103 = *(_QWORD *)(a3 + 352);
          memset(v118, 0, sizeof(v118));
          v116 = 0u;
          v117 = 0u;
          v49 = *(_WORD *)(a3 + 28);
          v50 = (*(BOOL (**)(SDPMediaRTPMap *))(*((_QWORD *)&v148 + 1) + 24))((SDPMediaRTPMap *)((char *)&v148 + 8));
          if (!v50)
            goto LABEL_175;
          if (SHIBYTE(v151[3]) < 0)
            std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v151[1], v151[2]);
          else
            __p = *(std::string *)&v151[1];
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = __p.__r_.__value_.__l.__size_;
          if (size == 6)
          {
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            data = (int)p_p->__r_.__value_.__l.__data_;
            v71 = WORD2(p_p->__r_.__value_.__r.__words[0]);
            v73 = data == 760368449 && v71 == 16983;
          }
          else
          {
LABEL_175:
            v73 = 0;
          }
          SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)&v116, v49, v73);
          if (v50 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (v47)
          {
            HIBYTE(v118[5]) = v91 != 0;
            LOBYTE(v118[6]) = 1;
          }
          if (v46)
          {
            v118[7] = v93;
            HIBYTE(v118[15]) = 0;
          }
          if (v48)
          {
            v118[8] = v95;
            LOBYTE(v118[9]) = 1;
          }
          if (v105)
          {
            v118[10] = v97;
            LOBYTE(v118[11]) = 1;
          }
          if (v107)
          {
            v118[12] = v99;
            LOBYTE(v118[13]) = 1;
          }
          if (v109)
          {
            v118[14] = v101;
            LOBYTE(v118[15]) = 1;
          }
          SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v129, v118[4]);
          *(_QWORD *)&v129 = off_1E78E9958;
          BYTE2(v131) = v118[5];
          *(_WORD *)((char *)&v131 + 3) = *(unsigned __int16 *)((char *)&v118[5] + 1);
          *(_DWORD *)((char *)&v131 + 6) = *(_DWORD *)&v118[7];
          BYTE10(v131) = v118[9];
          WORD6(v131) = v118[10];
          BYTE14(v131) = v118[11];
          v132 = v118[12];
          v133 = v118[13];
          v134 = *(_DWORD *)&v118[14];
          LODWORD(v140) = 1;
          SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)&v147, (uint64_t)&v129);
          std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v129);
          v74 = (std::__shared_weak_count *)a2[1];
          v123 = *a2;
          v124 = v74;
          if (v74)
          {
            p_shared_owners = (unint64_t *)&v74->__shared_owners_;
            do
              v76 = __ldxr(p_shared_owners);
            while (__stxr(v76 + 1, p_shared_owners));
          }
          if (!*(_BYTE *)(a3 + 432))
            std::__throw_bad_optional_access[abi:ne180100]();
          SDPModelBuilder::setBandwidthSpecifiers(a1, (uint64_t)&v123, i - 136, a3, v103);
          v65 = v124;
          if (!v124)
            goto LABEL_200;
          v77 = (unint64_t *)&v124->__shared_owners_;
          do
            v67 = __ldaxr(v77);
          while (__stlxr(v67 - 1, v77));
          goto LABEL_198;
        }
LABEL_124:
        if (*(char *)(a3 + 303) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v129, *(const std::string::value_type **)(a3 + 280), *(_QWORD *)(a3 + 288));
        }
        else
        {
          v129 = *v34;
          v130.__r_.__value_.__r.__words[0] = *(_QWORD *)(a3 + 296);
        }
        v51 = v130.__r_.__value_.__s.__data_[7];
        if (v130.__r_.__value_.__s.__data_[7] < 0)
          v51 = *((_QWORD *)&v129 + 1);
        if (v51 == 3)
        {
          v52 = (unsigned __int16 *)v129;
          if (v130.__r_.__value_.__s.__data_[7] >= 0)
            v52 = (unsigned __int16 *)&v129;
          v53 = *v52;
          v54 = *((unsigned __int8 *)v52 + 2);
          v56 = v53 == 22085 && v54 == 83;
        }
        else
        {
          v56 = 0;
        }
        if (v130.__r_.__value_.__s.__data_[7] < 0)
          operator delete((void *)v129);
        if (!v56)
          goto LABEL_202;
        v57 = *(_QWORD *)(a3 + 360);
        v108 = *(unsigned __int16 *)(a3 + 368);
        v58 = *(_WORD *)(a3 + 374);
        v59 = *(_BYTE *)(a3 + 378);
        v100 = *(unsigned __int8 *)(a3 + 377);
        v102 = *(_BYTE *)(a3 + 380);
        v60 = *(_DWORD *)(a3 + 396);
        v61 = *(_BYTE *)(a3 + 400);
        v96 = *(_QWORD *)(a3 + 408);
        v89 = *(_WORD *)(a3 + 416);
        v90 = *(_WORD *)(a3 + 418);
        v92 = *(_WORD *)(a3 + 420);
        v94 = *(unsigned __int8 *)(a3 + 376);
        v98 = *(unsigned __int8 *)(a3 + 422);
        v104 = *(unsigned __int8 *)(a3 + 423);
        v106 = *(unsigned __int8 *)(a3 + 424);
        v110 = *(unsigned __int8 *)(a3 + 425);
        v122 = 0;
        v121 = 0u;
        v119 = 0u;
        v120 = 0u;
        memset(v118, 0, sizeof(v118));
        v116 = 0u;
        v117 = 0u;
        SDPMediaFormatEVSParams::SDPMediaFormatEVSParams((SDPMediaFormatEVSParams *)&v116, *(_WORD *)(a3 + 28));
        LOBYTE(v118[6]) = v61;
        v118[8] = v58;
        *(_QWORD *)&v118[12] = v57;
        BYTE13(v121) = 0;
        SDPMediaFormatEVSParams::updateConfigName((uint64_t)&v116);
        DWORD1(v120) = v60;
        BYTE13(v121) = 0;
        SDPMediaFormatEVSParams::updateConfigName((uint64_t)&v116);
        BYTE3(v121) = v59;
        if (v100)
        {
          HIBYTE(v118[6]) = v94;
          LOBYTE(v118[7]) = 1;
        }
        BYTE2(v121) = v102;
        if (v98 || (unsigned __int16)v122 <= 2u && v108 == 7 && !v94)
        {
          LOWORD(v120) = v108;
          BYTE14(v121) = 0;
        }
        if (v104)
        {
          WORD2(v121) = v89;
          BYTE10(v121) = 1;
        }
        if (v106)
        {
          WORD3(v121) = v90;
          BYTE11(v121) = 1;
        }
        if (v110)
        {
          WORD4(v121) = v92;
          BYTE12(v121) = 1;
        }
        SDPMediaFormatEVSParams::SDPMediaFormatEVSParams((SDPMediaFormatEVSParams *)&v129, (const SDPMediaFormatEVSParams *)&v116);
        LODWORD(v140) = 2;
        SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)&v147, (uint64_t)&v129);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v129);
        v62 = (std::__shared_weak_count *)a2[1];
        v114 = *a2;
        v115 = v62;
        if (v62)
        {
          v63 = (unint64_t *)&v62->__shared_owners_;
          do
            v64 = __ldxr(v63);
          while (__stxr(v64 + 1, v63));
        }
        if (!*(_BYTE *)(a3 + 432))
          std::__throw_bad_optional_access[abi:ne180100]();
        SDPModelBuilder::setBandwidthSpecifiers(a1, (uint64_t)&v114, i - 136, a3, v96);
        v65 = v115;
        if (!v115)
        {
LABEL_200:
          *(_QWORD *)&v116 = off_1E78ED0A8;
          if (SHIBYTE(v118[3]) < 0)
            operator delete((void *)v117);
LABEL_202:
          v78 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(v111, 0, 0, (uint64_t)&v147);
          v78[1] = v111;
          v79 = *(_QWORD *)(i - 96);
          *v78 = v79;
          *(_QWORD *)(v79 + 8) = v78;
          *(_QWORD *)(i - 96) = v78;
          ++*(_QWORD *)(i - 80);
          v80 = *(unsigned __int16 *)(a3 + 304);
          if (v80 != 255)
          {
            *(_QWORD *)&v129 = &off_1E78E2080;
            WORD4(v129) = v80;
            v130.__r_.__value_.__s.__data_[8] = 1;
            v131 = 0uLL;
            v130.__r_.__value_.__r.__words[2] = 0;
            v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78EE990;
            v132 = 255;
            v136 = 0;
            v137 = 0;
            v135 = 0;
            v138 = 0x10000;
            v139[1] = 1;
            v141 = 0;
            v139[2] = 0;
            v140 = 0;
            v142 = 255;
            v139[0] = &off_1E78B8590;
            v144 = 0;
            v145 = 0;
            v143 = 0;
            v146 = 0;
            SDPMediaFormatInfo::operator=((uint64_t)&v147, (uint64_t)&v129);
            *(_QWORD *)&v129 = &off_1E78E2080;
            std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v139);
            SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v130.__r_.__value_.__l.__data_);
            v81 = *(_WORD *)(a3 + 304);
            std::string::basic_string[abi:ne180100]<0>(v112, "telephone-event");
            SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v129, v81, (__int128 *)v112, *(_WORD *)(a3 + 308), 1);
            LOBYTE(v149) = BYTE8(v129);
            std::string::operator=((std::string *)((char *)&v149 + 8), &v130);
            LOWORD(v151[0]) = v131;
            std::string::operator=((std::string *)&v151[1], (const std::string *)((char *)&v131 + 8));
            LODWORD(v152) = v136;
            SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v129);
            if (v113 < 0)
              operator delete(v112[0]);
            SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v116, *(_WORD *)(a3 + 304));
            *(_QWORD *)&v116 = off_1E78B8518;
            BYTE8(v129) = BYTE8(v116);
            *(_QWORD *)&v129 = off_1E78ED0A8;
            if (SHIBYTE(v118[3]) < 0)
            {
              std::string::__init_copy_ctor_external(&v130, (const std::string::value_type *)v117, *((std::string::size_type *)&v117 + 1));
            }
            else
            {
              *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v117;
              v130.__r_.__value_.__r.__words[2] = *(_QWORD *)v118;
            }
            LOWORD(v131) = v118[4];
            *(_QWORD *)&v129 = off_1E78B8518;
            LODWORD(v140) = 3;
            SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)&v147, (uint64_t)&v129);
            std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v129);
            *(_QWORD *)&v116 = off_1E78ED0A8;
            if (SHIBYTE(v118[3]) < 0)
              operator delete((void *)v117);
            v82 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(v111, 0, 0, (uint64_t)&v147);
            v82[1] = v111;
            v83 = *(_QWORD *)(i - 96);
            *v82 = v83;
            *(_QWORD *)(v83 + 8) = v82;
            *(_QWORD *)(i - 96) = v82;
            ++*(_QWORD *)(i - 80);
          }
          v147 = &off_1E78E2080;
          std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v152 + 2);
          SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v148 + 1);
LABEL_212:
          SDPMedia::setMaxPacketizationTime((SDPMedia *)(i - 136), *(_WORD *)(a3 + 314));
          SDPMedia::setPacketizationTime((SDPMedia *)(i - 136), *(_WORD *)(a3 + 312));
          if (*(_BYTE *)(a3 + 272))
          {
            SDPMedia::mediaCryptoList((_QWORD *)(i - 136), &v147);
            v84 = v148;
            if ((void **)v148 != &v147)
            {
              v85 = a3 + 192;
              if (!*(_BYTE *)(a3 + 272))
                v85 = 0;
              v86 = *(unsigned __int16 *)(v85 + 40);
              do
              {
                v87 = *(_QWORD *)(v84 + 16);
                if (*(unsigned __int16 *)(v87 + 40) == v86)
                {
                  *(_WORD *)(v87 + 73) = *(_WORD *)(v85 + 73);
                  *(_BYTE *)(v87 + 75) = *(_BYTE *)(v85 + 75);
                }
                v84 = *(_QWORD *)(v84 + 8);
              }
              while ((void **)v84 != &v147);
            }
            std::__list_imp<unsigned long long>::clear(&v147);
          }
          for (j = *(_QWORD *)(i + 8); i != j; j = *(_QWORD *)(j + 8))
          {
            if (*(_DWORD *)(j + 136) == 5)
            {
              if (*(_BYTE *)(a3 + 316))
                *(_BYTE *)(j + 56) = 0;
              return;
            }
          }
          return;
        }
        v66 = (unint64_t *)&v115->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
LABEL_198:
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
        goto LABEL_200;
      }
    }
    if (*(char *)(a3 + 303) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v116, *(const std::string::value_type **)(a3 + 280), *(_QWORD *)(a3 + 288));
    }
    else
    {
      v116 = *v34;
      *(_QWORD *)&v117 = *(_QWORD *)(a3 + 296);
    }
    v40 = BYTE7(v117);
    if (SBYTE7(v117) < 0)
      v40 = *((_QWORD *)&v116 + 1);
    if (v40 == 3)
    {
      v41 = (unsigned __int16 *)v116;
      if ((SBYTE7(v117) & 0x80u) == 0)
        v41 = (unsigned __int16 *)&v116;
      v42 = *v41;
      v43 = *((unsigned __int8 *)v41 + 2);
      v45 = v42 == 19777 && v43 == 82;
      if ((SBYTE7(v117) & 0x80000000) == 0)
      {
LABEL_117:
        if ((v130.__r_.__value_.__s.__data_[7] & 0x80) == 0)
          goto LABEL_118;
        goto LABEL_123;
      }
    }
    else
    {
      v45 = 0;
      if ((SBYTE7(v117) & 0x80000000) == 0)
        goto LABEL_117;
    }
    operator delete((void *)v116);
    goto LABEL_117;
  }
  v18 = *(_QWORD *)(i + 8);
  if (i != v18)
  {
    v19 = *(_QWORD *)(i + 8);
    while (*(_DWORD *)(v19 + 136) != 4)
    {
      v19 = *(_QWORD *)(v19 + 8);
      if (i == v19)
        goto LABEL_28;
    }
    while (*(_DWORD *)(v18 + 136) != 4)
      v18 = *(_QWORD *)(v18 + 8);
    if (a5)
      v20 = 3;
    else
      v20 = 1;
    *(_DWORD *)(v18 + 56) = v20;
  }
LABEL_28:
  v21 = v5 + 392;
  v22 = *(_QWORD *)(v5 + 400);
  if (v22 != v21)
  {
    v23 = v22;
    while (*(_DWORD *)(v23 + 136) != 4)
    {
      v23 = *(_QWORD *)(v23 + 8);
      if (v23 == v21)
        return;
    }
    while (*(_DWORD *)(v22 + 136) != 4)
      v22 = *(_QWORD *)(v22 + 8);
    if (a5)
      v24 = 3;
    else
      v24 = 1;
    *(_DWORD *)(v22 + 56) = v24;
  }
}

void sub_1BF0B0570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned int *a19, uint64_t a20,void **a21)
{
  STACK[0x248] = (unint64_t)&off_1E78E2080;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor(a19);
  SDPMediaRTPMap::~SDPMediaRTPMap(a21);
  _Unwind_Resume(a1);
}

void SDPAudioBuilder::~SDPAudioBuilder(SDPAudioBuilder *this)
{
  *(_QWORD *)this = off_1E78DBBA8;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = off_1E78DBBA8;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1C3B87100);
}

void IBIRTPClient::IBIRTPClient(IBIRTPClient *this, dispatch_object_t *a2)
{
  dispatch_object_t *v3;
  void **v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  char v9;
  uint64_t v10;
  const char *v11;
  dispatch_queue_t v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  std::string *p_shared_owners;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *size;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  NSObject *object;
  std::string v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E78DBBE0;
  *(_OWORD *)((char *)this + 24) = 0u;
  v3 = (dispatch_object_t *)((char *)this + 24);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 10) = *a2;
  if (*a2)
    dispatch_retain(*a2);
  v4 = (void **)((char *)this + 32);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 56) = 0;
  std::to_string(&v30, ++_MergedGlobals_18);
  if (byte_1ED70EE17 >= 0)
    v5 = (const std::string::value_type *)&qword_1ED70EE00;
  else
    v5 = (const std::string::value_type *)qword_1ED70EE00;
  if (byte_1ED70EE17 >= 0)
    v6 = byte_1ED70EE17;
  else
    v6 = unk_1ED70EE08;
  v7 = std::string::insert(&v30, 0, v5, v6);
  v8 = v7->__r_.__value_.__r.__words[0];
  *(_QWORD *)&v31 = v7->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)&v31 + 7) = *(std::string::size_type *)((char *)&v7->__r_.__value_.__r.__words[1] + 7);
  v9 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)this + 55) < 0)
    operator delete(*v4);
  v10 = v31;
  *((_QWORD *)this + 4) = v8;
  *((_QWORD *)this + 5) = v10;
  *(_QWORD *)((char *)this + 47) = *(_QWORD *)((char *)&v31 + 7);
  *((_BYTE *)this + 55) = v9;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v30.__r_.__value_.__l.__data_);
    v9 = *((_BYTE *)this + 55);
  }
  v11 = (char *)this + 32;
  if (v9 < 0)
    v11 = (const char *)*v4;
  v12 = dispatch_queue_create(v11, 0);
  v13 = *v3;
  *v3 = v12;
  if (v13)
    dispatch_release(v13);
  v31 = 0uLL;
  ctu::LogServer::create();
  if ((_QWORD)v31)
  {
    v14 = (std::__shared_weak_count *)operator new(0x38uLL);
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DC030;
    std::string::basic_string[abi:ne180100]<0>(&v30, "ibi.client");
    v14[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E78CFDE8;
    p_shared_owners = (std::string *)&v14[1].__shared_owners_;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(p_shared_owners, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }
    else
    {
      *(_OWORD *)&p_shared_owners->__r_.__value_.__l.__data_ = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
      v14[2].__vftable = (std::__shared_weak_count_vtbl *)v30.__r_.__value_.__r.__words[2];
    }
    ctu::LogServer::addWriter();
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  object = *v3;
  if (*v3)
    dispatch_retain(*v3);
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  ice::Client::create();
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 88, (__int128 *)&v30);
  size = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
  if (v30.__r_.__value_.__l.__size_)
  {
    v21 = (unint64_t *)(v30.__r_.__value_.__l.__size_ + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (v28)
  {
    v23 = (unint64_t *)&v28->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (object)
    dispatch_release(object);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1BF0B0B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  uint64_t v23;
  void **v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  dispatch_object_t *v27;
  void *v29;
  NSObject *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;

  if (a22 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v26);
  operator delete(v29);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v25);
  v30 = *(NSObject **)(v23 + 80);
  if (v30)
    dispatch_release(v30);
  v31 = *(std::__shared_weak_count **)(v23 + 72);
  if (v31)
    std::__shared_weak_count::__release_weak(v31);
  if (*(char *)(v23 + 55) < 0)
    operator delete(*v24);
  if (*v27)
    dispatch_release(*v27);
  v32 = *(std::__shared_weak_count **)(v23 + 16);
  if (v32)
    std::__shared_weak_count::__release_weak(v32);
  _Unwind_Resume(a1);
}

void IBIRTPClient::~IBIRTPClient(IBIRTPClient *this)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  __int128 v10;

  *(_QWORD *)this = &off_1E78DBBE0;
  v2 = (char *)this + 88;
  v10 = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 88, &v10);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  v6 = *((_QWORD *)this + 10);
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  v8 = *((_QWORD *)this + 3);
  if (v8)
    dispatch_release(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

{
  IBIRTPClient::~IBIRTPClient(this);
  JUMPOUT(0x1C3B87100);
}

void IBIRTPClient::registerClient(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v7;
  void *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  _QWORD *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD v35[5];
  std::__shared_weak_count *v36;
  void *__p[2];
  char v38;
  void *v39;
  std::__shared_weak_count *v40;
  char v41;

  if (*(_BYTE *)(a1 + 56))
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v39, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"ARI client already registered, skipping another register request.", 65);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if (v38 < 0)
      operator delete(__p[0]);
    if (v41 < 0)
      operator delete(v39);
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
    goto LABEL_7;
  }
  if (!*(_QWORD *)(a1 + 88))
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v21 = ImsLogger::error(ims::_logger, (uint64_t)&v39, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"IceClient creation failed.", 26);
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v21 + 17) = 0;
    if (v38 < 0)
      operator delete(__p[0]);
    if (v41 < 0)
      operator delete(v39);
    v22 = *(std::__shared_weak_count **)(a2 + 8);
    if (!v22)
      goto LABEL_53;
    v23 = std::__shared_weak_count::lock(v22);
    v40 = v23;
    if (!v23)
      goto LABEL_53;
    v24 = *(_QWORD **)a2;
    v39 = v24;
    if (v24)
    {
      v25 = (_QWORD *)v24[6];
      v26 = (std::__shared_weak_count *)v24[7];
      __p[0] = v25;
      __p[1] = v26;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }
      v29 = v25[37];
      if (v29)
        AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v29 + 120), 1);
      if (v26)
      {
        v30 = (unint64_t *)&v26->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v32 = v40;
      if (!v40)
        goto LABEL_53;
    }
    else
    {
      v32 = v23;
    }
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
LABEL_53:
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0x40000000;
LABEL_7:
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    return;
  }
  *(_BYTE *)(a1 + 56) = 1;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v39, (_QWORD *)(a1 + 8));
  v8 = v39;
  v7 = v40;
  if (v40)
  {
    p_shared_weak_owners = (unint64_t *)&v40->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v13 = *(_QWORD *)(a1 + 88);
  v35[0] = MEMORY[0x1E0C809B0];
  v35[1] = 1174405120;
  v35[2] = ___ZN12IBIRTPClient14registerClientENSt3__18weak_ptrI21IBIRTPStackControllerEE_block_invoke;
  v35[3] = &__block_descriptor_tmp_35;
  v35[4] = v8;
  v36 = v7;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v39 = v35;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v13, 0, (uint64_t *)&v39);
  ice::Client::start(*(ice::Client **)(a1 + 88));
  v17 = *(_QWORD **)a2;
  v16 = *(_QWORD *)(a2 + 8);
  if (v16)
  {
    v18 = (unint64_t *)(v16 + 16);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 72) = v16;
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  if (v36)
    std::__shared_weak_count::__release_weak(v36);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF0B1104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void ___ZN12IBIRTPClient14registerClientENSt3__18weak_ptrI21IBIRTPStackControllerEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD block[6];
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 32);
      if (v5)
      {
        v19 = 0;
        v20 = 0;
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v19, (_QWORD *)(v5 + 8));
        v6 = *(NSObject **)(v5 + 80);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 1174405120;
        block[2] = ___ZN12IBIRTPClient19handleClientStartedEv_block_invoke;
        block[3] = &__block_descriptor_tmp_8_0;
        block[4] = v5;
        block[5] = v19;
        v18 = v20;
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v8 = __ldxr(p_shared_owners);
          while (__stxr(v8 + 1, p_shared_owners));
        }
        dispatch_async(v6, block);
        v9 = v18;
        if (v18)
        {
          v10 = (unint64_t *)&v18->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v12 = v20;
        if (v20)
        {
          v13 = (unint64_t *)&v20->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
      v15 = (unint64_t *)&v4->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF0B12DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN12IBIRTPClient19handleClientStartedEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  void *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD v25[5];
  std::__shared_weak_count *v26;
  _QWORD *v27;
  _QWORD v28[5];
  std::__shared_weak_count *v29;
  _QWORD *v30;
  void *__p[2];
  uint64_t (*v32)(uint64_t, unsigned __int8 *, unsigned int);
  void *v33;
  void *v34;
  std::__shared_weak_count *v35;
  void **v36;
  void *v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, unsigned __int8 *, unsigned int);
  void *v40;
  void *v41;
  std::__shared_weak_count *v42;
  void **v43;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(v2 + 72);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4 && *(_QWORD *)(v2 + 64))
    {
      v5 = *(_QWORD *)(a1 + 40);
      std::string::basic_string[abi:ne180100]<0>(&v37, "ibi.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v37, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Registered ARI client ", 22);
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v6 + 17) = 0;
      if (SHIBYTE(v32) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v39) < 0)
        operator delete(v37);
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v37, (_QWORD *)(v5 + 8));
      v8 = v37;
      v7 = (std::__shared_weak_count *)v38;
      if (v38)
      {
        v9 = (unint64_t *)(v38 + 16);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v13 = (void *)MEMORY[0x1E0C809B0];
      v37 = (void *)MEMORY[0x1E0C809B0];
      v38 = 1174405120;
      v39 = ___ZN12IBIRTPClient22registerForIndicationsEv_block_invoke;
      v40 = &__block_descriptor_tmp_11_2;
      v41 = v8;
      v42 = v7;
      if (v7)
      {
        p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
        do
          v15 = __ldxr(p_shared_weak_owners);
        while (__stxr(v15 + 1, p_shared_weak_owners));
      }
      v43 = &v37;
      __p[0] = v13;
      __p[1] = (void *)1174405120;
      v32 = ___ZN12IBIRTPClient22registerForIndicationsEv_block_invoke_12;
      v33 = &__block_descriptor_tmp_13_0;
      v34 = v8;
      v35 = v7;
      if (v7)
      {
        v16 = (unint64_t *)&v7->__shared_weak_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v36 = __p;
      v28[0] = v13;
      v28[1] = 1174405120;
      v28[2] = ___ZN12IBIRTPClient22registerForIndicationsEv_block_invoke_14;
      v28[3] = &__block_descriptor_tmp_15_3;
      v28[4] = v8;
      v29 = v7;
      if (v7)
      {
        v18 = (unint64_t *)&v7->__shared_weak_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v30 = v28;
      v25[0] = v13;
      v25[1] = 1174405120;
      v25[2] = ___ZN12IBIRTPClient22registerForIndicationsEv_block_invoke_16;
      v25[3] = &__block_descriptor_tmp_17_1;
      v25[4] = v8;
      v26 = v7;
      if (v7)
      {
        v20 = (unint64_t *)&v7->__shared_weak_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v27 = v25;
      ice::Client::regIndication<int({block_pointer}&)(unsigned char *,unsigned int)>(*(_QWORD *)(v5 + 88), 1166049280, (uint64_t *)&v43);
      ice::Client::regIndication<int({block_pointer}&)(unsigned char *,unsigned int)>(*(_QWORD *)(v5 + 88), 1166082048, (uint64_t *)&v36);
      ice::Client::regIndication<int({block_pointer}&)(unsigned char *,unsigned int)>(*(_QWORD *)(v5 + 88), 1166114816, (uint64_t *)&v30);
      ice::Client::regIndication<int({block_pointer}&)(unsigned char *,unsigned int)>(*(_QWORD *)(v5 + 88), 1166147584, (uint64_t *)&v27);
      if (v26)
        std::__shared_weak_count::__release_weak(v26);
      if (v29)
        std::__shared_weak_count::__release_weak(v29);
      if (v35)
        std::__shared_weak_count::__release_weak(v35);
      if (v42)
        std::__shared_weak_count::__release_weak(v42);
      if (v7)
        std::__shared_weak_count::__release_weak(v7);
LABEL_43:
      v23 = (unint64_t *)&v4->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      return;
    }
  }
  else
  {
    v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v37, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v22 = ImsLogger::debug(ims::_logger, (uint64_t)&v37, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"ARI client started notification after stackController goes away", 63);
  *(_BYTE *)(v22 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v22 + 17) = 0;
  if (SHIBYTE(v32) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v37);
  if (v4)
    goto LABEL_43;
}

void sub_1BF0B16BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 81) < 0)
    operator delete(*(void **)(v33 - 104));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12IBIRTPClientEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrI12IBIRTPClientEE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 40);
}

uint64_t ___ZN12IBIRTPClient22registerForIndicationsEv_block_invoke(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  uint64_t v10;
  size_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  _QWORD *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  int v24;
  unsigned int BufGmid;
  NSObject *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  void *__p;
  uint64_t v41;
  void (*v42)(_QWORD *);
  void *v43;
  void **v44;
  _QWORD *v45;
  _QWORD *v46;
  std::string v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unsigned int v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  std::string v53;
  _QWORD v54[3];
  BOOL v55;
  _QWORD v56[3];
  BOOL v57;
  void *v58;
  void **v59;
  uint64_t v60;
  int v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;

  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4)
    return 0;
  v7 = std::__shared_weak_count::lock(v4);
  if (!v7)
    return 0;
  v8 = v7;
  v9 = *(_QWORD **)(a1 + 32);
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(&v62, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v62);
    v11 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v9 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), *(_QWORD *)(*(_QWORD *)(*v9 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"handleMediaSessionErrIndication", 31);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (SBYTE7(v63) < 0)
      operator delete((void *)v62);
    if (SHIBYTE(v42) < 0)
      operator delete(__p);
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v62 = 0u;
    AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK::ARI_IBIImsMEMediaSessionErrIndCb_SDK((AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK *)&v62, a2);
    if ((ice::isARIResponseValid() & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.client");
      std::string::basic_string[abi:ne180100]<0>(&v58, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v23 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"Invalid MediaSessionErrIndication", 33);
      *(_BYTE *)(v23 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_53:
      *(_BYTE *)(v23 + 17) = 0;
      if (SHIBYTE(v60) < 0)
        operator delete(v58);
      if (SHIBYTE(v42) < 0)
        operator delete(__p);
LABEL_57:
      MEMORY[0x1C3B86A04](&v62);
      goto LABEL_58;
    }
    if (!AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK::unpack((AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK *)&v62))
    {
      v58 = 0;
      v59 = &v58;
      v60 = 0x2000000000;
      v61 = 0;
      v61 = *(_DWORD *)v66;
      v56[0] = 0;
      v56[1] = v56;
      v56[2] = 0x2000000000;
      v57 = 0;
      v24 = **((_DWORD **)&v66 + 1);
      v57 = **((_DWORD **)&v66 + 1) == 4;
      v54[0] = 0;
      v54[1] = v54;
      v54[2] = 0x2000000000;
      v55 = v24 == 5;
      memset(&v53, 0, sizeof(v53));
      BufGmid = AriMsg::GetBufGmid((AriMsg *)a2, (const unsigned __int8 *)a3);
      IBIRTPClient::getMsgName(BufGmid, &v53);
      v51 = 0;
      v52 = 0;
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v51, v9 + 1);
      v26 = v9[10];
      __p = (void *)MEMORY[0x1E0C809B0];
      v41 = 1174405120;
      v42 = ___ZN12IBIRTPClient31handleMediaSessionErrIndicationEPhj_block_invoke;
      v43 = &unk_1E78DBF18;
      v50 = a3;
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v47, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
      else
        v47 = v53;
      v48 = v51;
      v49 = v52;
      if (v52)
      {
        p_shared_owners = (unint64_t *)&v52->__shared_owners_;
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }
      v44 = &v58;
      v45 = v56;
      v46 = v54;
      dispatch_async(v26, &__p);
      v29 = v49;
      if (v49)
      {
        v30 = (unint64_t *)&v49->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      v32 = v52;
      if (v52)
      {
        v33 = (unint64_t *)&v52->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53.__r_.__value_.__l.__data_);
      _Block_object_dispose(v54, 8);
      _Block_object_dispose(v56, 8);
      _Block_object_dispose(&v58, 8);
      goto LABEL_57;
    }
    v12 = (std::__shared_weak_count *)v9[9];
    if (v12)
    {
      v13 = std::__shared_weak_count::lock(v12);
      v41 = (uint64_t)v13;
      if (v13)
      {
        v14 = (_QWORD *)v9[8];
        __p = v14;
        if (v14)
        {
          v15 = (_QWORD *)v14[6];
          v16 = (std::__shared_weak_count *)v14[7];
          v58 = v15;
          v59 = (void **)&v16->__vftable;
          if (v16)
          {
            v17 = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldxr(v17);
            while (__stxr(v18 + 1, v17));
          }
          v19 = v15[37];
          if (v19)
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v19 + 120), 3);
          if (v16)
          {
            v20 = (unint64_t *)&v16->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          v22 = (std::__shared_weak_count *)v41;
          if (!v41)
            goto LABEL_52;
        }
        else
        {
          v22 = v13;
        }
        v35 = (unint64_t *)&v22->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
LABEL_52:
    std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(&v58, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v23 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"Failed to extract IBIImsMEMediaSessionErrIndCb: ", 48);
    *(_BYTE *)(v23 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_53;
  }
LABEL_58:
  v37 = (unint64_t *)&v8->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return 0;
}

void sub_1BF0B1D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v39 - 192);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  MEMORY[0x1C3B86A04](v39 - 160);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBIRTPClient22registerForIndicationsEv_block_invoke_12(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  _QWORD *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  void *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int BufGmid;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v45;
  unint64_t v46;
  void *block;
  uint64_t v48;
  void (*v49)(uint64_t);
  void *v50;
  void **v51;
  std::string v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unsigned int v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  std::string v58;
  void *__p;
  void **p_p;
  uint64_t v61;
  __n128 (*v62)(uint64_t, uint64_t);
  void (*v63)(_QWORD *);
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;

  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4)
    return 0;
  v7 = std::__shared_weak_count::lock(v4);
  if (!v7)
    return 0;
  v8 = v7;
  v9 = *(_QWORD **)(a1 + 32);
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&v69, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::debug(ims::_logger, (uint64_t)&v69, (uint64_t)&__p);
    v11 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v9 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), *(_QWORD *)(*(_QWORD *)(*v9 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"handleRTCPSRReportInd", 21);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (SHIBYTE(v61) < 0)
      operator delete(__p);
    if (SBYTE7(v70) < 0)
      operator delete((void *)v69);
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK::ARI_IBIImsMERtcpSenderReportIndCb_SDK((AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK *)&v69, a2);
    if ((ice::isARIResponseValid() & 1) != 0)
    {
      if (AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK::unpack((AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK *)&v69))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.client");
        std::string::basic_string[abi:ne180100]<0>(&block, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v12 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&block);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Failed to extract IBIImsMERtcpSenderReportInd: ", 47);
        *(_BYTE *)(v12 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v12 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v12 + 17) = 0;
        if (SHIBYTE(v49) < 0)
          operator delete(block);
        if (SHIBYTE(v61) < 0)
          operator delete(__p);
        v13 = (std::__shared_weak_count *)v9[9];
        if (!v13)
          goto LABEL_56;
        v14 = std::__shared_weak_count::lock(v13);
        p_p = (void **)&v14->__vftable;
        if (!v14)
          goto LABEL_56;
        v15 = (_QWORD *)v9[8];
        __p = v15;
        if (v15)
        {
          v16 = (_QWORD *)v15[6];
          v17 = (std::__shared_weak_count *)v15[7];
          block = v16;
          v48 = (uint64_t)v17;
          if (v17)
          {
            p_shared_owners = (unint64_t *)&v17->__shared_owners_;
            do
              v19 = __ldxr(p_shared_owners);
            while (__stxr(v19 + 1, p_shared_owners));
          }
          v20 = v16[37];
          if (v20)
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v20 + 120), 3);
          if (v17)
          {
            v21 = (unint64_t *)&v17->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          v23 = (std::__shared_weak_count *)p_p;
          if (!p_p)
            goto LABEL_56;
        }
        else
        {
          v23 = v14;
        }
        v45 = (unint64_t *)&v23->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
LABEL_56:
        MEMORY[0x1C3B86A88](&v69);
        goto LABEL_57;
      }
      v26 = **((_DWORD **)&v74 + 1);
      v27 = *(_DWORD *)v75;
      v28 = **((_DWORD **)&v75 + 1);
      v29 = *(_DWORD *)v76;
      v30 = **((_DWORD **)&v76 + 1);
      __p = 0;
      p_p = &__p;
      v62 = __Block_byref_object_copy__4;
      v63 = __Block_byref_object_dispose__4;
      v61 = 0x7002000000;
      v64 = 0u;
      v65 = 0u;
      v66 = 0u;
      v67 = 0u;
      v68 = 0;
      v31 = *(_DWORD *)v74;
      *(_QWORD *)&v64 = &off_1E78E7800;
      *((_QWORD *)&v65 + 1) = __PAIR64__(v26, v31);
      *(_QWORD *)&v66 = __PAIR64__(v28, v27);
      *((_QWORD *)&v66 + 1) = __PAIR64__(v30, v29);
      v68 = 0;
      v67 = 0uLL;
      memset(&v58, 0, sizeof(v58));
      BufGmid = AriMsg::GetBufGmid((AriMsg *)a2, (const unsigned __int8 *)a3);
      IBIRTPClient::getMsgName(BufGmid, &v58);
      v56 = 0;
      v57 = 0;
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v56, v9 + 1);
      v33 = v9[10];
      block = (void *)MEMORY[0x1E0C809B0];
      v48 = 1174405120;
      v49 = ___ZN12IBIRTPClient21handleRTCPSRReportIndEPhj_block_invoke;
      v50 = &unk_1E78DBF50;
      v55 = a3;
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v52, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
      else
        v52 = v58;
      v53 = v56;
      v54 = v57;
      if (v57)
      {
        v34 = (unint64_t *)&v57->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      v51 = &__p;
      dispatch_async(v33, &block);
      v36 = v54;
      if (v54)
      {
        v37 = (unint64_t *)&v54->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v52.__r_.__value_.__l.__data_);
      v39 = v57;
      if (v57)
      {
        v40 = (unint64_t *)&v57->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      _Block_object_dispose(&__p, 8);
      *(_QWORD *)&v64 = &off_1E78E7800;
      v25 = (void *)v67;
      if (!(_QWORD)v67)
        goto LABEL_56;
      *((_QWORD *)&v67 + 1) = v67;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.client");
      std::string::basic_string[abi:ne180100]<0>(&block, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v24 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&block);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"Invalid RTCPSRReportIndication", 30);
      *(_BYTE *)(v24 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v24 + 17) = 0;
      if (SHIBYTE(v49) < 0)
        operator delete(block);
      if ((SHIBYTE(v61) & 0x80000000) == 0)
        goto LABEL_56;
      v25 = __p;
    }
    operator delete(v25);
    goto LABEL_56;
  }
LABEL_57:
  v42 = (unint64_t *)&v8->__shared_owners_;
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return 0;
}

void sub_1BF0B2408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48)
{
  uint64_t v48;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  MEMORY[0x1C3B86A88](v48 - 208);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBIRTPClient22registerForIndicationsEv_block_invoke_14(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  uint64_t v10;
  size_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  int v24;
  char v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int BufGmid;
  NSObject *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  void *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 block;
  void (*v49)(uint64_t);
  void *v50;
  void **v51;
  std::string v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unsigned int v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  std::string v58;
  void *__p;
  void **p_p;
  uint64_t v61;
  __n128 (*v62)(uint64_t, uint64_t);
  void (*v63)(_QWORD *);
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  void *v68[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;

  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4)
    return 0;
  v7 = std::__shared_weak_count::lock(v4);
  if (!v7)
    return 0;
  v8 = v7;
  v9 = *(_QWORD **)(a1 + 32);
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v68, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::debug(ims::_logger, (uint64_t)v68, (uint64_t)&__p);
    v11 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v9 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), *(_QWORD *)(*(_QWORD *)(*v9 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"handleRTCPRRReportInd", 21);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (SHIBYTE(v61) < 0)
      operator delete(__p);
    if (SBYTE7(v69) < 0)
      operator delete(v68[0]);
    v77 = 0;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    *(_OWORD *)v68 = 0u;
    AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK::ARI_IBIImsMERtcpReceiverReportIndCb_SDK((AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK *)v68, a2);
    if ((ice::isARIResponseValid() & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.client");
      std::string::basic_string[abi:ne180100]<0>(&block, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v23 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&block);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"Invalid RTCPRRReportIndication", 30);
      *(_BYTE *)(v23 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_54:
      *(_BYTE *)(v23 + 17) = 0;
      if (SHIBYTE(v49) < 0)
        operator delete((void *)block);
      if ((SHIBYTE(v61) & 0x80000000) == 0)
        goto LABEL_59;
      v42 = __p;
LABEL_58:
      operator delete(v42);
LABEL_59:
      MEMORY[0x1C3B86AF4](v68);
      goto LABEL_60;
    }
    if (!AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK::unpack((AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK *)v68))
    {
      BYTE7(block) = 0;
      *(_WORD *)((char *)&block + 5) = 0;
      v24 = **((_DWORD **)&v73 + 1);
      v25 = *(_BYTE *)v74;
      v26 = **((_DWORD **)&v74 + 1);
      v27 = *(_DWORD *)v75;
      v28 = **((_DWORD **)&v75 + 1);
      v29 = *(_DWORD *)v76;
      v30 = **((_DWORD **)&v76 + 1);
      v62 = __Block_byref_object_copy__58;
      v63 = __Block_byref_object_dispose__59;
      __p = 0;
      p_p = &__p;
      v61 = 0x6002000000;
      v64 = 0u;
      v65 = 0u;
      v66 = 0u;
      v67 = 0;
      v31 = *(_DWORD *)v73;
      *(_QWORD *)&v64 = &off_1E78EA878;
      DWORD2(v65) = v31;
      v67 = 0;
      v66 = 0uLL;
      LODWORD(block) = v24;
      BYTE4(block) = v25;
      *((_QWORD *)&block + 1) = __PAIR64__(v27, v26);
      v49 = (void (*)(uint64_t))__PAIR64__(v29, v28);
      LODWORD(v50) = v30;
      RTCPReceiverReports::addReport((void **)&v66, &block);
      memset(&v58, 0, sizeof(v58));
      BufGmid = AriMsg::GetBufGmid((AriMsg *)a2, (const unsigned __int8 *)a3);
      IBIRTPClient::getMsgName(BufGmid, &v58);
      v56 = 0;
      v57 = 0;
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v56, v9 + 1);
      v33 = v9[10];
      *(_QWORD *)&block = MEMORY[0x1E0C809B0];
      *((_QWORD *)&block + 1) = 1174405120;
      v49 = ___ZN12IBIRTPClient21handleRTCPRRReportIndEPhj_block_invoke;
      v50 = &unk_1E78DBF88;
      v55 = a3;
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v52, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
      else
        v52 = v58;
      v53 = v56;
      v54 = v57;
      if (v57)
      {
        p_shared_owners = (unint64_t *)&v57->__shared_owners_;
        do
          v35 = __ldxr(p_shared_owners);
        while (__stxr(v35 + 1, p_shared_owners));
      }
      v51 = &__p;
      dispatch_async(v33, &block);
      v36 = v54;
      if (v54)
      {
        v37 = (unint64_t *)&v54->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v52.__r_.__value_.__l.__data_);
      v39 = v57;
      if (v57)
      {
        v40 = (unint64_t *)&v57->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      _Block_object_dispose(&__p, 8);
      *(_QWORD *)&v64 = &off_1E78EA878;
      v42 = (void *)v66;
      if (!(_QWORD)v66)
        goto LABEL_59;
      *((_QWORD *)&v66 + 1) = v66;
      goto LABEL_58;
    }
    v12 = (std::__shared_weak_count *)v9[9];
    if (v12)
    {
      v13 = std::__shared_weak_count::lock(v12);
      p_p = (void **)&v13->__vftable;
      if (v13)
      {
        v14 = (_QWORD *)v9[8];
        __p = v14;
        if (v14)
        {
          v15 = v14[6];
          v16 = (std::__shared_weak_count *)v14[7];
          *(_QWORD *)&block = v15;
          *((_QWORD *)&block + 1) = v16;
          if (v16)
          {
            v17 = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldxr(v17);
            while (__stxr(v18 + 1, v17));
          }
          v19 = *(_QWORD *)(v15 + 296);
          if (v19)
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v19 + 120), 3);
          if (v16)
          {
            v20 = (unint64_t *)&v16->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          v22 = (std::__shared_weak_count *)p_p;
          if (!p_p)
            goto LABEL_53;
        }
        else
        {
          v22 = v13;
        }
        v43 = (unint64_t *)&v22->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
LABEL_53:
    std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(&block, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v23 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&block);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"Failed to extract IBIImsMERtcpReceiverReportInd: ", 49);
    *(_BYTE *)(v23 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_54;
  }
LABEL_60:
  v45 = (unint64_t *)&v8->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return 0;
}

void sub_1BF0B2AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  MEMORY[0x1C3B86AF4](&a48);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBIRTPClient22registerForIndicationsEv_block_invoke_16(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  uint64_t v10;
  size_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  _QWORD *v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unsigned int BufGmid;
  NSObject *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  void *__p;
  uint64_t v41;
  void (*v42)(uint64_t);
  void *v43;
  std::string v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unsigned int v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::string v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4)
    return 0;
  v7 = std::__shared_weak_count::lock(v4);
  if (!v7)
    return 0;
  v8 = v7;
  v9 = *(_QWORD **)(a1 + 32);
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&v51, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::debug(ims::_logger, (uint64_t)&v51, (uint64_t)&__p);
    v11 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v9 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), *(_QWORD *)(*(_QWORD *)(*v9 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"handleRTCPSDESReportInd", 23);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (SHIBYTE(v42) < 0)
      operator delete(__p);
    if (SBYTE7(v52) < 0)
      operator delete((void *)v51);
    v59 = 0;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK::ARI_IBIImsMERtcpSDESReportIndCb_SDK((AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK *)&v51, a2);
    if ((ice::isARIResponseValid() & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.client");
      std::string::basic_string[abi:ne180100]<0>(&v50, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v23 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"Invalid RTCPSDESReportIndication", 32);
      *(_BYTE *)(v23 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_52:
      *(_BYTE *)(v23 + 17) = 0;
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v42) & 0x80000000) == 0)
        goto LABEL_57;
      v34 = __p;
LABEL_56:
      operator delete(v34);
LABEL_57:
      MEMORY[0x1C3B869BC](&v51);
      goto LABEL_58;
    }
    if (!AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK::unpack((AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK *)&v51))
    {
      memset(&v50, 0, sizeof(v50));
      BufGmid = AriMsg::GetBufGmid((AriMsg *)a2, (const unsigned __int8 *)a3);
      IBIRTPClient::getMsgName(BufGmid, &v50);
      v48 = 0;
      v49 = 0;
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v48, v9 + 1);
      v25 = v9[10];
      __p = (void *)MEMORY[0x1E0C809B0];
      v41 = 1174405120;
      v42 = ___ZN12IBIRTPClient23handleRTCPSDESReportIndEPhj_block_invoke;
      v43 = &__block_descriptor_tmp_63_3;
      v47 = a3;
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v44, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
      else
        v44 = v50;
      v45 = v48;
      v46 = v49;
      if (v49)
      {
        p_shared_owners = (unint64_t *)&v49->__shared_owners_;
        do
          v27 = __ldxr(p_shared_owners);
        while (__stxr(v27 + 1, p_shared_owners));
      }
      dispatch_async(v25, &__p);
      v28 = v46;
      if (v46)
      {
        v29 = (unint64_t *)&v46->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      v31 = v49;
      if (v49)
      {
        v32 = (unint64_t *)&v49->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_57;
      v34 = (void *)v50.__r_.__value_.__r.__words[0];
      goto LABEL_56;
    }
    v12 = (std::__shared_weak_count *)v9[9];
    if (v12)
    {
      v13 = std::__shared_weak_count::lock(v12);
      v41 = (uint64_t)v13;
      if (v13)
      {
        v14 = (_QWORD *)v9[8];
        __p = v14;
        if (v14)
        {
          v15 = v14[6];
          v16 = (std::__shared_weak_count *)v14[7];
          v50.__r_.__value_.__r.__words[0] = v15;
          v50.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
          if (v16)
          {
            v17 = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldxr(v17);
            while (__stxr(v18 + 1, v17));
          }
          v19 = *(_QWORD *)(v15 + 296);
          if (v19)
            AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v19 + 120), 3);
          if (v16)
          {
            v20 = (unint64_t *)&v16->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          v22 = (std::__shared_weak_count *)v41;
          if (!v41)
            goto LABEL_51;
        }
        else
        {
          v22 = v13;
        }
        v35 = (unint64_t *)&v22->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
LABEL_51:
    std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(&v50, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v23 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"Failed to extract IBIImsMERtcpSDESReportInd: ", 45);
    *(_BYTE *)(v23 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_52;
  }
LABEL_58:
  v37 = (unint64_t *)&v8->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return 0;
}

void sub_1BF0B3114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  MEMORY[0x1C3B869BC](&a33);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t (*IBIRTPClient::callbackForRequest(IBIRTPClient *this, int a2))(const unsigned __int8 *a1)
{
  if (a2 > 1149370367)
  {
    if (a2 <= 1149435903)
    {
      if (a2 == 1149370368)
        return (uint64_t (*)(const unsigned __int8 *))IBIRTPClient::handleTerminateMediaSessionResponse;
      if (a2 == 1149403136)
        return (uint64_t (*)(const unsigned __int8 *))IBIRTPClient::handleStartDTMFCodeResponse;
    }
    else
    {
      switch(a2)
      {
        case 1149435904:
          return (uint64_t (*)(const unsigned __int8 *))IBIRTPClient::handleStopDTMFCodeResponse;
        case 1149468672:
          return (uint64_t (*)(const unsigned __int8 *))IBIRTPClient::handleCreateAudioMediaSessionResponse;
        case 1149501440:
          return (uint64_t (*)(const unsigned __int8 *))IBIRTPClient::handleConfigureAudioMediaResponse;
      }
    }
  }
  else if (a2 <= 1149272063)
  {
    if (a2 == -259653632)
      return IBIRTPClient::handleAudioCallEventResponse;
    if (a2 == 210337792)
      return IBIRTPClient::handleCallPsRtpResponse;
  }
  else
  {
    switch(a2)
    {
      case 1149272064:
        return (uint64_t (*)(const unsigned __int8 *))IBIRTPClient::handleGetMediaCapabilityResponse;
      case 1149304832:
        return (uint64_t (*)(const unsigned __int8 *))IBIRTPClient::handleStartMediaResponse;
      case 1149337600:
        return (uint64_t (*)(const unsigned __int8 *))IBIRTPClient::handleStopMediaResponse;
    }
  }
  return (uint64_t (*)(const unsigned __int8 *))IBIRTPClient::handleUnknownResponse;
}

uint64_t IBIRTPClient::handleGetMediaCapabilityResponse(unsigned __int8 *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int BufGmid;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD block[4];
  std::string v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unsigned int v23;
  _QWORD v24[2];
  char v25;
  void *__p[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::string v31;

  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(&v31, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"handleGetMediaCapabilityResponse", 32);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SBYTE7(v27) < 0)
    operator delete(__p[0]);
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  *(_OWORD *)__p = 0u;
  v27 = 0u;
  AriSdk::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK((AriSdk::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK *)__p, a1);
  if ((ice::isARIResponseValid() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v31, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v24, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::error(ims::_logger, (uint64_t)&v31, (uint64_t)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Invalid GetMediaCapabilityResponse", 34);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if ((v25 & 0x80000000) == 0)
      goto LABEL_22;
    v11 = (void *)v24[0];
    goto LABEL_21;
  }
  memset(&v31, 0, sizeof(v31));
  BufGmid = AriMsg::GetBufGmid((AriMsg *)a1, (const unsigned __int8 *)a2);
  IBIRTPClient::getMsgName(BufGmid, &v31);
  v8 = *a3;
  v9 = *(NSObject **)(*a3 + 80);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN12IBIRTPClient32handleGetMediaCapabilityResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke;
  block[3] = &__block_descriptor_tmp_21_1;
  v23 = a2;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v20, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
    v8 = *a3;
  }
  else
  {
    v20 = v31;
  }
  v12 = (std::__shared_weak_count *)a3[1];
  v21 = v8;
  v22 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  dispatch_async(v9, block);
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    v11 = (void *)v20.__r_.__value_.__r.__words[0];
LABEL_21:
    operator delete(v11);
  }
LABEL_22:
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  return MEMORY[0x1C3B86AD0](__p);
}

void sub_1BF0B35D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  if (*(char *)(v31 - 49) < 0)
    operator delete(*(void **)(v31 - 72));
  MEMORY[0x1C3B86AD0](&__p);
  _Unwind_Resume(a1);
}

uint64_t IBIRTPClient::handleStartMediaResponse(unsigned __int8 *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int BufGmid;
  uint64_t v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD block[6];
  std::string v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unsigned int v22;
  std::string v23;
  void *v24[2];
  uint64_t v25;
  int v26;
  void *__p[2];
  uint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  std::string::basic_string[abi:ne180100]<0>(&v30, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v30, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"handleStartMediaResponse", 24);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
  if (SBYTE7(v31) < 0)
    operator delete((void *)v30);
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK::ARI_IBIImsMEStartMediaRspCb_SDK((AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK *)&v30, a1);
  if ((ice::isARIResponseValid() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v24, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Invalid StartMediaResponse", 26);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_9;
  }
  if (AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK::unpack((AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK *)&v30))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v24, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Failed to extract StartMediaSessionResponse : ", 46);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_9:
    *(_BYTE *)(v7 + 17) = 0;
    if (SHIBYTE(v25) < 0)
      operator delete(v24[0]);
    if (SHIBYTE(v28) < 0)
      operator delete(__p[0]);
    return MEMORY[0x1C3B868CC](&v30);
  }
  __p[0] = 0;
  __p[1] = __p;
  v28 = 0x2000000000;
  v29 = 0;
  v29 = *(_DWORD *)v34;
  v24[0] = 0;
  v24[1] = v24;
  v25 = 0x2000000000;
  v26 = 0;
  v26 = **((_DWORD **)&v34 + 1);
  memset(&v23, 0, sizeof(v23));
  BufGmid = AriMsg::GetBufGmid((AriMsg *)a1, (const unsigned __int8 *)a2);
  IBIRTPClient::getMsgName(BufGmid, &v23);
  v9 = *a3;
  v10 = *(NSObject **)(*a3 + 80);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN12IBIRTPClient24handleStartMediaResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke;
  block[3] = &unk_1E78DBD58;
  v22 = a2;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
    v9 = *a3;
  }
  else
  {
    v19 = v23;
  }
  v11 = (std::__shared_weak_count *)a3[1];
  v20 = v9;
  v21 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  block[4] = __p;
  block[5] = v24;
  dispatch_async(v10, block);
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  _Block_object_dispose(v24, 8);
  _Block_object_dispose(__p, 8);
  return MEMORY[0x1C3B868CC](&v30);
}

void sub_1BF0B3A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a27 < 0)
    operator delete(__p);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a35, 8);
  MEMORY[0x1C3B868CC](v40 - 128);
  _Unwind_Resume(a1);
}

uint64_t IBIRTPClient::handleStopMediaResponse(unsigned __int8 *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int BufGmid;
  uint64_t v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD block[6];
  std::string v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unsigned int v22;
  std::string v23;
  void *v24[2];
  uint64_t v25;
  int v26;
  void *__p[2];
  uint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  std::string::basic_string[abi:ne180100]<0>(&v30, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v30, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"handleStopMediaResponse", 23);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
  if (SBYTE7(v31) < 0)
    operator delete((void *)v30);
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK::ARI_IBIImsMEStopMediaRspCb_SDK((AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK *)&v30, a1);
  if ((ice::isARIResponseValid() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v24, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Invalid StopMediaSessionResponse", 32);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_9;
  }
  if (AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK::unpack((AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK *)&v30))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v24, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Failed to extract StopMediaSessionResponse : ", 45);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_9:
    *(_BYTE *)(v7 + 17) = 0;
    if (SHIBYTE(v25) < 0)
      operator delete(v24[0]);
    if (SHIBYTE(v28) < 0)
      operator delete(__p[0]);
    return MEMORY[0x1C3B868A8](&v30);
  }
  __p[0] = 0;
  __p[1] = __p;
  v28 = 0x2000000000;
  v29 = 0;
  v29 = *(_DWORD *)v34;
  v24[0] = 0;
  v24[1] = v24;
  v25 = 0x2000000000;
  v26 = 0;
  v26 = **((_DWORD **)&v34 + 1);
  memset(&v23, 0, sizeof(v23));
  BufGmid = AriMsg::GetBufGmid((AriMsg *)a1, (const unsigned __int8 *)a2);
  IBIRTPClient::getMsgName(BufGmid, &v23);
  v9 = *a3;
  v10 = *(NSObject **)(*a3 + 80);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN12IBIRTPClient23handleStopMediaResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke;
  block[3] = &unk_1E78DBD90;
  v22 = a2;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
    v9 = *a3;
  }
  else
  {
    v19 = v23;
  }
  v11 = (std::__shared_weak_count *)a3[1];
  v20 = v9;
  v21 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  block[4] = __p;
  block[5] = v24;
  dispatch_async(v10, block);
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  _Block_object_dispose(v24, 8);
  _Block_object_dispose(__p, 8);
  return MEMORY[0x1C3B868A8](&v30);
}

void sub_1BF0B3E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a27 < 0)
    operator delete(__p);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a35, 8);
  MEMORY[0x1C3B868A8](v40 - 128);
  _Unwind_Resume(a1);
}

uint64_t IBIRTPClient::handleTerminateMediaSessionResponse(unsigned __int8 *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int BufGmid;
  uint64_t v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD block[6];
  std::string v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unsigned int v22;
  std::string v23;
  void *v24[2];
  uint64_t v25;
  int v26;
  void *__p[2];
  uint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  std::string::basic_string[abi:ne180100]<0>(&v30, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v30, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"handleTerminateMediaSessionResponse", 35);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
  if (SBYTE7(v31) < 0)
    operator delete((void *)v30);
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK::ARI_IBIImsMETerminateMediaSessionRspCb_SDK((AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK *)&v30, a1);
  if ((ice::isARIResponseValid() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v24, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Invalid TerminateMediaSessionResponse", 37);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_9;
  }
  if (AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK::unpack((AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK *)&v30))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v24, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Failed to extract TerminateMediaSessionResponse : ", 50);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_9:
    *(_BYTE *)(v7 + 17) = 0;
    if (SHIBYTE(v25) < 0)
      operator delete(v24[0]);
    if (SHIBYTE(v28) < 0)
      operator delete(__p[0]);
    return MEMORY[0x1C3B86B90](&v30);
  }
  __p[0] = 0;
  __p[1] = __p;
  v28 = 0x2000000000;
  v29 = 0;
  v29 = *(_DWORD *)v34;
  v24[0] = 0;
  v24[1] = v24;
  v25 = 0x2000000000;
  v26 = 0;
  v26 = **((_DWORD **)&v34 + 1);
  memset(&v23, 0, sizeof(v23));
  BufGmid = AriMsg::GetBufGmid((AriMsg *)a1, (const unsigned __int8 *)a2);
  IBIRTPClient::getMsgName(BufGmid, &v23);
  v9 = *a3;
  v10 = *(NSObject **)(*a3 + 80);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN12IBIRTPClient35handleTerminateMediaSessionResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke;
  block[3] = &unk_1E78DBDC8;
  v22 = a2;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
    v9 = *a3;
  }
  else
  {
    v19 = v23;
  }
  v11 = (std::__shared_weak_count *)a3[1];
  v20 = v9;
  v21 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  block[4] = __p;
  block[5] = v24;
  dispatch_async(v10, block);
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  _Block_object_dispose(v24, 8);
  _Block_object_dispose(__p, 8);
  return MEMORY[0x1C3B86B90](&v30);
}

void sub_1BF0B4308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a27 < 0)
    operator delete(__p);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a35, 8);
  MEMORY[0x1C3B86B90](v40 - 128);
  _Unwind_Resume(a1);
}

uint64_t IBIRTPClient::handleStartDTMFCodeResponse(unsigned __int8 *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int BufGmid;
  uint64_t v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD block[6];
  std::string v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unsigned int v22;
  std::string v23;
  void *v24[2];
  uint64_t v25;
  int v26;
  void *__p[2];
  uint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  std::string::basic_string[abi:ne180100]<0>(&v30, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v30, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"handleStartDTMFCodeResponse", 27);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
  if (SBYTE7(v31) < 0)
    operator delete((void *)v30);
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK::ARI_IBIImsMEStartDTMFCodeRspCb_SDK((AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK *)&v30, a1);
  if ((ice::isARIResponseValid() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v24, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Invalid StartDTMFCodeResponse", 29);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_9;
  }
  if (AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK::unpack((AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK *)&v30))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v24, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Failed to extract StartDTMFCodeResponse : ", 42);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_9:
    *(_BYTE *)(v7 + 17) = 0;
    if (SHIBYTE(v25) < 0)
      operator delete(v24[0]);
    if (SHIBYTE(v28) < 0)
      operator delete(__p[0]);
    return MEMORY[0x1C3B86980](&v30);
  }
  __p[0] = 0;
  __p[1] = __p;
  v28 = 0x2000000000;
  v29 = 0;
  v29 = *(_DWORD *)v34;
  v24[0] = 0;
  v24[1] = v24;
  v25 = 0x2000000000;
  v26 = 0;
  v26 = **((_DWORD **)&v34 + 1);
  memset(&v23, 0, sizeof(v23));
  BufGmid = AriMsg::GetBufGmid((AriMsg *)a1, (const unsigned __int8 *)a2);
  IBIRTPClient::getMsgName(BufGmid, &v23);
  v9 = *a3;
  v10 = *(NSObject **)(*a3 + 80);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN12IBIRTPClient27handleStartDTMFCodeResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke;
  block[3] = &unk_1E78DBE00;
  v22 = a2;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
    v9 = *a3;
  }
  else
  {
    v19 = v23;
  }
  v11 = (std::__shared_weak_count *)a3[1];
  v20 = v9;
  v21 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  block[4] = __p;
  block[5] = v24;
  dispatch_async(v10, block);
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  _Block_object_dispose(v24, 8);
  _Block_object_dispose(__p, 8);
  return MEMORY[0x1C3B86980](&v30);
}

void sub_1BF0B478C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a27 < 0)
    operator delete(__p);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a35, 8);
  MEMORY[0x1C3B86980](v40 - 144);
  _Unwind_Resume(a1);
}

uint64_t IBIRTPClient::handleStopDTMFCodeResponse(unsigned __int8 *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int BufGmid;
  uint64_t v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD block[6];
  std::string v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unsigned int v22;
  std::string v23;
  void *v24[2];
  uint64_t v25;
  int v26;
  void *__p[2];
  uint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  std::string::basic_string[abi:ne180100]<0>(&v30, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v30, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"handleStopDTMFCodeResponse", 26);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
  if (SBYTE7(v31) < 0)
    operator delete((void *)v30);
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK::ARI_IBIImsMEStopDTMFCodeRspCb_SDK((AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK *)&v30, a1);
  if ((ice::isARIResponseValid() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v24, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Invalid StopDTMFCodeResponse", 28);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_9;
  }
  if (AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK::unpack((AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK *)&v30))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v24, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Failed to extract StopDTMFCodeResponse : ", 41);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_9:
    *(_BYTE *)(v7 + 17) = 0;
    if (SHIBYTE(v25) < 0)
      operator delete(v24[0]);
    if (SHIBYTE(v28) < 0)
      operator delete(__p[0]);
    return MEMORY[0x1C3B86944](&v30);
  }
  __p[0] = 0;
  __p[1] = __p;
  v28 = 0x2000000000;
  v29 = 0;
  v29 = *(_DWORD *)v34;
  v24[0] = 0;
  v24[1] = v24;
  v25 = 0x2000000000;
  v26 = 0;
  v26 = **((_DWORD **)&v34 + 1);
  memset(&v23, 0, sizeof(v23));
  BufGmid = AriMsg::GetBufGmid((AriMsg *)a1, (const unsigned __int8 *)a2);
  IBIRTPClient::getMsgName(BufGmid, &v23);
  v9 = *a3;
  v10 = *(NSObject **)(*a3 + 80);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN12IBIRTPClient26handleStopDTMFCodeResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke;
  block[3] = &unk_1E78DBE38;
  v22 = a2;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
    v9 = *a3;
  }
  else
  {
    v19 = v23;
  }
  v11 = (std::__shared_weak_count *)a3[1];
  v20 = v9;
  v21 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  block[4] = __p;
  block[5] = v24;
  dispatch_async(v10, block);
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  _Block_object_dispose(v24, 8);
  _Block_object_dispose(__p, 8);
  return MEMORY[0x1C3B86944](&v30);
}

void sub_1BF0B4C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a27 < 0)
    operator delete(__p);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a35, 8);
  MEMORY[0x1C3B86944](v40 - 144);
  _Unwind_Resume(a1);
}

uint64_t IBIRTPClient::handleCreateAudioMediaSessionResponse(unsigned __int8 *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int BufGmid;
  std::__shared_weak_count *v17;
  uint64_t v18;
  NSObject *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  _QWORD v24[7];
  std::__shared_weak_count *v25;
  void *__p[2];
  char v27;
  void *v28[2];
  uint64_t v29;
  _QWORD block[7];
  std::__shared_weak_count *v31;
  void *v32[2];
  uint64_t v33;
  void *v34;
  void **v35;
  uint64_t v36;
  int v37;
  void *v38;
  void **v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _DWORD *v47;

  std::string::basic_string[abi:ne180100]<0>(&v42, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(&v38, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v42, (uint64_t)&v38);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"handleCreateAudioMediaSessionResponse", 37);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SHIBYTE(v40) < 0)
    operator delete(v38);
  if (SBYTE7(v43) < 0)
    operator delete((void *)v42);
  v47 = 0;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v42 = 0u;
  AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK((AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK *)&v42, a1);
  if ((ice::isARIResponseValid() & 1) != 0)
  {
    v7 = AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK::unpack((AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK *)&v42);
    v38 = 0;
    v39 = &v38;
    v40 = 0x2000000000;
    v41 = -1;
    v34 = 0;
    v35 = &v34;
    v36 = 0x2000000000;
    v37 = 0;
    v32[0] = 0;
    v32[1] = 0;
    v33 = 0;
    std::string::basic_string[abi:ne180100]<0>(v32, "handleCreateAudioMediaSessionResponse");
    if (v7)
    {
      std::string::basic_string[abi:ne180100]<0>(v28, "ibi.client");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::error(ims::_logger, (uint64_t)v28, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Failed to extract CreateAudioMediaSessionResponse : ", 52);
      *(_BYTE *)(v8 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (v27 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v29) < 0)
        operator delete(v28[0]);
    }
    else
    {
      *((_DWORD *)v39 + 6) = **((_DWORD **)&v46 + 1);
      *((_DWORD *)v35 + 6) = *v47;
      BufGmid = AriMsg::GetBufGmid((AriMsg *)a1, (const unsigned __int8 *)a2);
      IBIRTPClient::getMsgName(BufGmid, v28);
      if (SHIBYTE(v33) < 0)
        operator delete(v32[0]);
      *(_OWORD *)v32 = *(_OWORD *)v28;
      v33 = v29;
    }
    v18 = *a3;
    v17 = (std::__shared_weak_count *)a3[1];
    v19 = *(NSObject **)(*a3 + 80);
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 1174405120;
    v24[2] = ___ZN12IBIRTPClient37handleCreateAudioMediaSessionResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke_40;
    v24[3] = &unk_1E78DBEA8;
    v24[6] = v18;
    v25 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    v24[4] = &v38;
    v24[5] = &v34;
    dispatch_async(v19, v24);
    v13 = v25;
    if (v25)
    {
      v22 = (unint64_t *)&v25->__shared_owners_;
      do
        v15 = __ldaxr(v22);
      while (__stlxr(v15 - 1, v22));
      goto LABEL_31;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v38, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(&v34, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::error(ims::_logger, (uint64_t)&v38, (uint64_t)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Invalid CreateAudioMediaSessionResponse", 39);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (SHIBYTE(v36) < 0)
      operator delete(v34);
    if (SHIBYTE(v40) < 0)
      operator delete(v38);
    v38 = 0;
    v39 = &v38;
    v40 = 0x2000000000;
    v41 = -1;
    v34 = 0;
    v35 = &v34;
    v36 = 0x2000000000;
    v37 = 0;
    v32[0] = 0;
    v32[1] = 0;
    v33 = 0;
    std::string::basic_string[abi:ne180100]<0>(v32, "handleCreateAudioMediaSessionResponse");
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZN12IBIRTPClient37handleCreateAudioMediaSessionResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke;
    block[3] = &unk_1E78DBE70;
    v10 = (std::__shared_weak_count *)a3[1];
    block[6] = *a3;
    v31 = v10;
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    block[4] = &v38;
    block[5] = &v34;
    dispatch_async(MEMORY[0x1E0C80D38], block);
    v13 = v31;
    if (v31)
    {
      v14 = (unint64_t *)&v31->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
LABEL_31:
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  if (SHIBYTE(v33) < 0)
    operator delete(v32[0]);
  _Block_object_dispose(&v34, 8);
  _Block_object_dispose(&v38, 8);
  return MEMORY[0x1C3B86BB4](&v42);
}

void sub_1BF0B516C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  if (a28 < 0)
    operator delete(__p);
  if (a42 < 0)
    operator delete(a37);
  _Block_object_dispose(&a44, 8);
  _Block_object_dispose((const void *)(v49 - 176), 8);
  MEMORY[0x1C3B86BB4](v49 - 144);
  _Unwind_Resume(a1);
}

uint64_t IBIRTPClient::handleConfigureAudioMediaResponse(unsigned __int8 *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int BufGmid;
  uint64_t v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD block[6];
  std::string v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unsigned int v22;
  std::string v23;
  void *v24[2];
  uint64_t v25;
  int v26;
  void *__p[2];
  uint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  std::string::basic_string[abi:ne180100]<0>(&v30, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v30, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"handleConfigureAudioMediaResponse", 33);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
  if (SBYTE7(v31) < 0)
    operator delete((void *)v30);
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK((AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK *)&v30, a1);
  if ((ice::isARIResponseValid() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v24, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Invalid ConfigureAudioMediaSessionResponse", 42);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_9;
  }
  if (AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK::unpack((AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK *)&v30))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v24, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Failed to extract ConfigureAudioMediaSessionResponse : ", 55);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_9:
    *(_BYTE *)(v7 + 17) = 0;
    if (SHIBYTE(v25) < 0)
      operator delete(v24[0]);
    if (SHIBYTE(v28) < 0)
      operator delete(__p[0]);
    return MEMORY[0x1C3B86B18](&v30);
  }
  __p[0] = 0;
  __p[1] = __p;
  v28 = 0x2000000000;
  v29 = 0;
  v29 = *(_DWORD *)v34;
  v24[0] = 0;
  v24[1] = v24;
  v25 = 0x2000000000;
  v26 = 0;
  v26 = **((_DWORD **)&v34 + 1);
  memset(&v23, 0, sizeof(v23));
  BufGmid = AriMsg::GetBufGmid((AriMsg *)a1, (const unsigned __int8 *)a2);
  IBIRTPClient::getMsgName(BufGmid, &v23);
  v9 = *a3;
  v10 = *(NSObject **)(*a3 + 80);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN12IBIRTPClient33handleConfigureAudioMediaResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke;
  block[3] = &unk_1E78DBEE0;
  v22 = a2;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
    v9 = *a3;
  }
  else
  {
    v19 = v23;
  }
  v11 = (std::__shared_weak_count *)a3[1];
  v20 = v9;
  v21 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  block[4] = __p;
  block[5] = v24;
  dispatch_async(v10, block);
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  _Block_object_dispose(v24, 8);
  _Block_object_dispose(__p, 8);
  return MEMORY[0x1C3B86B18](&v30);
}

void sub_1BF0B5610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a27 < 0)
    operator delete(__p);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a35, 8);
  MEMORY[0x1C3B86B18](v40 - 128);
  _Unwind_Resume(a1);
}

uint64_t IBIRTPClient::handleAudioCallEventResponse(const unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v5[2];
  char v6;
  void *__p[2];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  void *v12[2];
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(v12, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"handleAudioCallEventResponse", 28);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v13 < 0)
    operator delete(v12[0]);
  if (SBYTE7(v8) < 0)
    operator delete(__p[0]);
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  *(_OWORD *)__p = 0u;
  v8 = 0u;
  AriSdk::ARI_CsiIceAudCallEventRespCb_SDK::ARI_CsiIceAudCallEventRespCb_SDK((AriSdk::ARI_CsiIceAudCallEventRespCb_SDK *)__p, a1);
  if ((ice::isARIResponseValid() & 1) != 0)
  {
    if (!AriSdk::ARI_CsiIceAudCallEventRespCb_SDK::unpack((AriSdk::ARI_CsiIceAudCallEventRespCb_SDK *)__p))
      return MEMORY[0x1C3B86908](__p);
    std::string::basic_string[abi:ne180100]<0>(v12, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v5, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::error(ims::_logger, (uint64_t)v12, (uint64_t)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Failed to extract CsiIceAudCallEventResponse : ", 47);
    *(_BYTE *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v5, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::error(ims::_logger, (uint64_t)v12, (uint64_t)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Invalid AudioCallEventResponse", 30);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(_BYTE *)(v3 + 17) = 0;
  if (v6 < 0)
    operator delete(v5[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  return MEMORY[0x1C3B86908](__p);
}

void sub_1BF0B590C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 33) < 0)
    operator delete(*(void **)(v21 - 56));
  MEMORY[0x1C3B86908](&__p);
  _Unwind_Resume(a1);
}

uint64_t IBIRTPClient::handleCallPsRtpResponse(const unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v5[2];
  char v6;
  void *__p[2];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12[2];
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(v12, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"handleCallPsRtpResponse", 23);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v13 < 0)
    operator delete(v12[0]);
  if (SBYTE7(v8) < 0)
    operator delete(__p[0]);
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  *(_OWORD *)__p = 0u;
  AriSdk::ARI_IBICallPsRtpRspCb_SDK::ARI_IBICallPsRtpRspCb_SDK((AriSdk::ARI_IBICallPsRtpRspCb_SDK *)__p, a1);
  if ((ice::isARIResponseValid() & 1) != 0)
  {
    if (!AriSdk::ARI_IBICallPsRtpRspCb_SDK::unpack((AriSdk::ARI_IBICallPsRtpRspCb_SDK *)__p))
      return MEMORY[0x1C3B8683C](__p);
    std::string::basic_string[abi:ne180100]<0>(v12, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v5, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::error(ims::_logger, (uint64_t)v12, (uint64_t)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Failed to extract IBICallPsRtpRspCb: ", 37);
    *(_BYTE *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v5, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::error(ims::_logger, (uint64_t)v12, (uint64_t)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Invalid CallPsRtpResponse", 25);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(_BYTE *)(v3 + 17) = 0;
  if (v6 < 0)
    operator delete(v5[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  return MEMORY[0x1C3B8683C](__p);
}

void sub_1BF0B5BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 33) < 0)
    operator delete(*(void **)(v21 - 56));
  MEMORY[0x1C3B8683C](&__p);
  _Unwind_Resume(a1);
}

void IBIRTPClient::handleUnknownResponse()
{
  uint64_t v0;
  void *__p[2];
  char v2;
  void *v3[2];
  char v4;

  std::string::basic_string[abi:ne180100]<0>(v3, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v0 = ImsLogger::error(ims::_logger, (uint64_t)v3, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v0 + 8), (uint64_t)"handleUnknownResponse", 21);
  *(_BYTE *)(v0 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v0 + 64))(v0, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v0 + 17) = 0;
  if (v2 < 0)
    operator delete(__p[0]);
  if (v4 < 0)
    operator delete(v3[0]);
}

void sub_1BF0B5D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *IBIRTPClient::getMsgName@<X0>(unsigned int a1@<W1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;

  v4 = Ari::MsgDefById((Ari *)(a1 >> 26));
  v5 = "Unknown";
  if (v4 && *(_QWORD *)(v4 + 48))
    v5 = *(char **)(v4 + 48);
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

void ___ZN12IBIRTPClient32handleGetMediaCapabilityResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(v10, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"RECV: Length: ", 14);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)", Name: ", 8);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, a1 + 32);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  v3 = *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 56) + 72);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF0B5EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c40_ZTSNSt3__110shared_ptrI12IBIRTPClientEE(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c40_ZTSNSt3__110shared_ptrI12IBIRTPClientEE(uint64_t a1)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 56);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void ___ZN12IBIRTPClient24handleStartMediaResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  void *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  std::string::basic_string[abi:ne180100]<0>(v12, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"RECV: Length: ", 14);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)", Name: ", 8);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 32))(v2, a1 + 6);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  v3 = a1[9];
  v4 = *(std::__shared_weak_count **)(v3 + 72);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v12[1] = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(void **)(v3 + 64);
      v12[0] = v7;
      if (v7)
        IBIRTPStackController::handleStartMediaResponse((IBIRTPStackController *)v7, *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24), *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24));
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1BF0B6130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c40_ZTSNSt3__110shared_ptrI12IBIRTPClientEE(std::string *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  std::string::size_type v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 48);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *(_QWORD *)(a2 + 80);
  a1[3].__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 72);
  a1[3].__r_.__value_.__l.__size_ = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
}

void __destroy_helper_block_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c40_ZTSNSt3__110shared_ptrI12IBIRTPClientEE(uint64_t a1)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 72);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void ___ZN12IBIRTPClient23handleStopMediaResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  void *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  std::string::basic_string[abi:ne180100]<0>(v12, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"RECV: Length: ", 14);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)", Name: ", 8);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 32))(v2, a1 + 6);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  v3 = a1[9];
  v4 = *(std::__shared_weak_count **)(v3 + 72);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v12[1] = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(void **)(v3 + 64);
      v12[0] = v7;
      if (v7)
        IBIRTPStackController::handleStopMediaResponse((IBIRTPStackController *)v7, *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24), *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24));
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1BF0B6394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void ___ZN12IBIRTPClient35handleTerminateMediaSessionResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  void *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  std::string::basic_string[abi:ne180100]<0>(v12, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"RECV: Length: ", 14);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)", Name: ", 8);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 32))(v2, a1 + 6);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  v3 = a1[9];
  v4 = *(std::__shared_weak_count **)(v3 + 72);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v12[1] = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(void **)(v3 + 64);
      v12[0] = v7;
      if (v7)
        IBIRTPStackController::handleTerminateMediaSessionResponse((IBIRTPStackController *)v7, *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24), *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24));
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1BF0B6550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void ___ZN12IBIRTPClient27handleStartDTMFCodeResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  void *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  std::string::basic_string[abi:ne180100]<0>(v12, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"RECV: Length: ", 14);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)", Name: ", 8);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 32))(v2, a1 + 6);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  v3 = a1[9];
  v4 = *(std::__shared_weak_count **)(v3 + 72);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v12[1] = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(void **)(v3 + 64);
      v12[0] = v7;
      if (v7)
        IBIRTPStackController::handleStartDTMFCodeResponse((IBIRTPStackController *)v7, *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24), *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24));
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1BF0B670C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void ___ZN12IBIRTPClient26handleStopDTMFCodeResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  void *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  std::string::basic_string[abi:ne180100]<0>(v12, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"RECV: Length: ", 14);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)", Name: ", 8);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 32))(v2, a1 + 6);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  v3 = a1[9];
  v4 = *(std::__shared_weak_count **)(v3 + 72);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v12[1] = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(void **)(v3 + 64);
      v12[0] = v7;
      if (v7)
        IBIRTPStackController::handleStopDTMFCodeResponse((IBIRTPStackController *)v7, *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24), *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24));
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1BF0B68C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void ___ZN12IBIRTPClient37handleCreateAudioMediaSessionResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  IBIRTPStackController *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = a1[6];
  v3 = *(std::__shared_weak_count **)(v2 + 72);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = *(IBIRTPStackController **)(v2 + 64);
      if (v6)
        IBIRTPStackController::handleCreateAudioMediaSessionResponse(v6, *(unsigned int *)(*(_QWORD *)(a1[4] + 8) + 24), *(unsigned int *)(*(_QWORD *)(a1[5] + 8) + 24));
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF0B69B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_48c40_ZTSNSt3__110shared_ptrI12IBIRTPClientEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_48c40_ZTSNSt3__110shared_ptrI12IBIRTPClientEE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 48);
}

void ___ZN12IBIRTPClient37handleCreateAudioMediaSessionResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke_40(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  IBIRTPStackController *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = a1[6];
  v3 = *(std::__shared_weak_count **)(v2 + 72);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = *(IBIRTPStackController **)(v2 + 64);
      if (v6)
        IBIRTPStackController::handleCreateAudioMediaSessionResponse(v6, *(unsigned int *)(*(_QWORD *)(a1[4] + 8) + 24), *(unsigned int *)(*(_QWORD *)(a1[5] + 8) + 24));
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF0B6AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN12IBIRTPClient33handleConfigureAudioMediaResponseEPhjNSt3__110shared_ptrIS_EE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  void *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  std::string::basic_string[abi:ne180100]<0>(v12, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"RECV: Length: ", 14);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)", Name: ", 8);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 32))(v2, a1 + 6);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  v3 = a1[9];
  v4 = *(std::__shared_weak_count **)(v3 + 72);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v12[1] = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(void **)(v3 + 64);
      v12[0] = v7;
      if (v7)
        IBIRTPStackController::handleConfigureAudioMediaSessionResponse((IBIRTPStackController *)v7, *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24), *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24));
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1BF0B6C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void ___ZN12IBIRTPClient31handleMediaSessionErrIndicationEPhj_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  void *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  std::string::basic_string[abi:ne180100]<0>(v12, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"RECV: Length: ", 14);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)", Name: ", 8);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 32))(v2, a1 + 7);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  v3 = a1[10];
  v4 = *(std::__shared_weak_count **)(v3 + 72);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v12[1] = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(void **)(v3 + 64);
      v12[0] = v7;
      if (v7)
        IBIRTPStackController::handleMediaError((IBIRTPStackController *)v7, *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24), *(unsigned __int8 *)(*(_QWORD *)(a1[5] + 8) + 24), *(unsigned __int8 *)(*(_QWORD *)(a1[6] + 8) + 24));
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1BF0B6DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c40_ZTSNSt3__110shared_ptrI12IBIRTPClientEE(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 56);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
}

void __destroy_helper_block_e8_56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c40_ZTSNSt3__110shared_ptrI12IBIRTPClientEE(uint64_t a1)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 80);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
}

__n128 __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __n128 result;

  *(_QWORD *)(a1 + 40) = off_1E78D63E0;
  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 54) = *(_QWORD *)(a2 + 54);
  *(_QWORD *)(a1 + 40) = &off_1E78E7800;
  *(_QWORD *)(a1 + 48) = v2;
  v3 = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = v3;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  result = *(__n128 *)(a2 + 88);
  *(__n128 *)(a1 + 88) = result;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  return result;
}

void __Block_byref_object_dispose__4(_QWORD *a1)
{
  void *v1;

  a1[5] = &off_1E78E7800;
  v1 = (void *)a1[11];
  if (v1)
  {
    a1[12] = v1;
    operator delete(v1);
  }
}

void ___ZN12IBIRTPClient21handleRTCPSRReportIndEPhj_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *__p[2];
  char v18;
  void *v19;
  std::__shared_weak_count *v20;
  char v21;

  std::string::basic_string[abi:ne180100]<0>(&v19, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v19, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"RECV: Length: ", 14);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)", Name: ", 8);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, a1 + 40);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v18 < 0)
    operator delete(__p[0]);
  if (v21 < 0)
    operator delete(v19);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(std::__shared_weak_count **)(v3 + 72);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v20 = v5;
    if (v5)
    {
      v6 = *(_QWORD **)(v3 + 64);
      v19 = v6;
      if (v6)
      {
        v7 = (_QWORD *)v6[6];
        v8 = (std::__shared_weak_count *)v6[7];
        __p[0] = v7;
        __p[1] = v8;
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        v11 = v7[37];
        if (v11)
          AnalyticsLogger::logRemoteRTCPSRPacket(*(AnalyticsLogger **)(v11 + 120), (const RTCPSRPacket *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
        if (v8)
        {
          v12 = (unint64_t *)&v8->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v14 = v20;
        if (!v20)
          return;
      }
      else
      {
        v14 = v5;
      }
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
}

void sub_1BF0B7138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c40_ZTSNSt3__110shared_ptrI12IBIRTPClientEE(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 40);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c40_ZTSNSt3__110shared_ptrI12IBIRTPClientEE(uint64_t a1)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 64);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

__n128 __Block_byref_object_copy__58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;

  *(_QWORD *)(a1 + 40) = off_1E78D63E0;
  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 54) = *(_QWORD *)(a2 + 54);
  *(_QWORD *)(a1 + 40) = &off_1E78EA878;
  *(_QWORD *)(a1 + 48) = v2;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 72) = result;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  return result;
}

void __Block_byref_object_dispose__59(_QWORD *a1)
{
  void *v1;

  a1[5] = &off_1E78EA878;
  v1 = (void *)a1[9];
  if (v1)
  {
    a1[10] = v1;
    operator delete(v1);
  }
}

void ___ZN12IBIRTPClient21handleRTCPRRReportIndEPhj_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *__p[2];
  char v18;
  void *v19;
  std::__shared_weak_count *v20;
  char v21;

  std::string::basic_string[abi:ne180100]<0>(&v19, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v19, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"RECV: Length: ", 14);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)", Name: ", 8);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, a1 + 40);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v18 < 0)
    operator delete(__p[0]);
  if (v21 < 0)
    operator delete(v19);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(std::__shared_weak_count **)(v3 + 72);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v20 = v5;
    if (v5)
    {
      v6 = *(_QWORD **)(v3 + 64);
      v19 = v6;
      if (v6)
      {
        v7 = (_QWORD *)v6[6];
        v8 = (std::__shared_weak_count *)v6[7];
        __p[0] = v7;
        __p[1] = v8;
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        v11 = v7[37];
        if (v11)
          AnalyticsLogger::logRemoteRTCPRRPacket(*(AnalyticsLogger **)(v11 + 120), (const RTCPRRPacket *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), 0);
        if (v8)
        {
          v12 = (unint64_t *)&v8->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v14 = v20;
        if (!v20)
          return;
      }
      else
      {
        v14 = v5;
      }
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
}

void sub_1BF0B7480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void ___ZN12IBIRTPClient23handleRTCPSDESReportIndEPhj_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *__p[2];
  char v19;
  void *v20;
  std::__shared_weak_count *v21;
  char v22;

  std::string::basic_string[abi:ne180100]<0>(&v20, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v20, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"RECV: Length: ", 14);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)", Name: ", 8);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, a1 + 32);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v19 < 0)
    operator delete(__p[0]);
  if (v22 < 0)
    operator delete(v20);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(std::__shared_weak_count **)(v3 + 72);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v21 = v5;
    if (v5)
    {
      v6 = *(_QWORD **)(v3 + 64);
      v20 = v6;
      if (v6)
      {
        v7 = (_QWORD *)v6[6];
        v8 = (std::__shared_weak_count *)v6[7];
        __p[0] = v7;
        __p[1] = v8;
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        v11 = v7[37];
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 120);
          *(_QWORD *)(v12 + 536) = time(0);
        }
        if (v8)
        {
          v13 = (unint64_t *)&v8->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v15 = v21;
        if (!v21)
          return;
      }
      else
      {
        v15 = v5;
      }
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_1BF0B769C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void IBIRTPClient::logPrefix(IBIRTPClient *this, ImsOutStream *a2)
{
  std::string __p;

  LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 32));
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF0B773C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *IBIRTPClient::loggableName@<X0>(IBIRTPClient *this@<X0>, std::string *a2@<X8>)
{
  return LoggableString::LoggableString(a2, (const std::string *)((char *)this + 32));
}

void std::__shared_ptr_emplace<ImsDebugLogWriter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DC030;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ImsDebugLogWriter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DC030;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<ImsDebugLogWriter>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t _GLOBAL__sub_I_IBIRTPClient_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&qword_1ED70EE00, "com.apple.ipTelephony.iceClient.");
  return __cxa_atexit(MEMORY[0x1E0DE44D0], &qword_1ED70EE00, &dword_1BEDF4000);
}

void SipSessionTimer::SipSessionTimer(SipSessionTimer *this)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E78DC080;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 90;
  *((_QWORD *)this + 5) = 0;
  SipTimerContainer::SipTimerContainer((SipSessionTimer *)((char *)this + 48));
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_WORD *)this + 104) = 256;
  *((_QWORD *)this + 19) = this;
}

void sub_1BF0B7850(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void SipSessionTimer::loggableName(SipSessionTimer *this@<X0>, LoggableString *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_6;
  }
  v5 = std::__shared_weak_count::lock(v4);
  if (!v5 || (v6 = *((_QWORD *)this + 24)) == 0)
  {
LABEL_6:
    LoggableString::LoggableString(a2, "Unknown SipSessionTimer");
    if (!v5)
      return;
    goto LABEL_7;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 320))(v6);
LABEL_7:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1BF0B792C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *SipSessionTimer::initialize(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  const std::string *v11;
  std::string *result;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  v7 = *a2;
  v6 = a2[1];
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(std::__shared_weak_count **)(a1 + 200);
  *(_QWORD *)(a1 + 192) = v7;
  *(_QWORD *)(a1 + 200) = v6;
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_BYTE *)(a1 + 208) = a3;
  v11 = (const std::string *)(*a2 + 32);
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(*a2 + 8));
  result = std::string::operator=((std::string *)(a1 + 120), v11);
  v13 = *a2;
  v14 = *(_DWORD *)(*a2 + 824);
  v15 = *(_DWORD *)(*a2 + 820);
  if (v15 <= v14)
    v15 = *(_DWORD *)(*a2 + 824);
  *(_DWORD *)(a1 + 28) = v15;
  *(_DWORD *)(a1 + 32) = v14;
  v16 = *(_DWORD *)(v13 + 816);
  if (v16 < v15 && v16 != 0)
    v16 = v15;
  *(_DWORD *)(a1 + 24) = v16;
  *(_BYTE *)(a1 + 209) = 1;
  return result;
}

void SipSessionTimer::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  SipSession *v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  const char *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  SipUserAgent *v17;
  uint64_t v18;
  const char *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  _BYTE v23[72];
  void *__p[2];
  char v25;
  _BYTE v26[72];
  SipSession *v27;
  std::__shared_weak_count *v28;

  v3 = *(std::__shared_weak_count **)(a1 + 200);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v28 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(SipSession **)(a1 + 192);
      v27 = v7;
      if (v7)
      {
        v8 = a2[23];
        v9 = *((_QWORD *)a2 + 1);
        v10 = (v8 & 0x80u) == 0 ? a2[23] : *((_QWORD *)a2 + 1);
        if (v10 == 19)
        {
          if ((v8 & 0x80) != 0)
          {
            v14 = *(const void **)a2;
            if (memcmp(v14, "SessionExpiresTimer", v9))
            {
              if (!memcmp(v14, "SessionRefreshTimer", v9))
              {
LABEL_25:
                SipSession::sendSessionRefresh(v7, (uint64_t)v23);
                ImsResult::~ImsResult((ImsResult *)v23);
              }
              goto LABEL_26;
            }
          }
          else if (a2[23])
          {
            v11 = "SessionExpiresTimer";
            v12 = a2;
            v13 = a2[23];
            while (*v12 == *(unsigned __int8 *)v11)
            {
              ++v12;
              ++v11;
              if (!--v13)
                goto LABEL_17;
            }
            v19 = "SessionRefreshTimer";
            while (*a2 == *(unsigned __int8 *)v19)
            {
              ++a2;
              ++v19;
              if (!--v8)
                goto LABEL_25;
            }
            goto LABEL_26;
          }
LABEL_17:
          v15 = *((_QWORD *)v7 + 30);
          if (v15
            && (v16 = *(_QWORD *)(v15 + 208)) != 0
            && (v17 = *(SipUserAgent **)(v16 + 136)) != 0
            && !*(_BYTE *)(SipUserAgent::config(v17) + 1153))
          {
            v22 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)v7 + 32))(v7);
            (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)v7 + 16))(v7, v22);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"did not receive session refresh update in time.  Terminating session.", 69);
            *(_BYTE *)(v22 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v22 + 17) = 0;
            std::string::basic_string[abi:ne180100]<0>(__p, "SessionExpired");
            SipSession::bye((std::__shared_weak_count *)v7, (uint64_t)__p, 0);
            ImsResult::~ImsResult((ImsResult *)v26);
            if (v25 < 0)
              operator delete(__p[0]);
          }
          else
          {
            v18 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)v7 + 32))(v7);
            (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)v7 + 16))(v7, v18);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"ignoring session refresh timeout", 32);
            *(_BYTE *)(v18 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v18 + 17) = 0;
          }
        }
      }
LABEL_26:
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1BF0B7C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v24 - 48);
  _Unwind_Resume(a1);
}

uint64_t SipSessionTimer::handleIntervalTooSmallResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v4 = *(std::__shared_weak_count **)(a1 + 200);
  if (!v4)
    return 0;
  v7 = std::__shared_weak_count::lock(v4);
  if (!v7)
    return 0;
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 192);
  if (v9 && (v10 = SipMessage::header<SipMinSEHeader>(a2)) != 0 && (v11 = v10[26], v11 > *(_DWORD *)(a1 + 28)))
  {
    *(_DWORD *)(a1 + 28) = v11;
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 64))(v9);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"received 422 response to ", 25);
    *(_BYTE *)(v12 + 17) = 0;
    v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a3 + 288) + 112))(*(_QWORD *)(*(_QWORD *)a3 + 288));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 32))(v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)" request in confirmed session.  Re-sending with Min-SE = ", 57);
    *(_BYTE *)(v12 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    v14 = 1;
  }
  else
  {
    v14 = 0;
  }
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v14;
}

void sub_1BF0B7E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipSessionTimer::validateIncomingRequestAndUpdateResponse(SipSessionTimer *this, const SipRequest *a2, std::string *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  SipHeader *v13;
  uint64_t v14;
  SipHeader *v15;
  void **v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::string::size_type v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  ImsPrefs *v29;
  void **UseUacAsRefresherKey;
  void *v31;
  int v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  int v42;
  uint64_t *v43;
  const std::string *v44;
  const std::string *v45;
  _BOOL4 v46;
  _BOOL4 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  BOOL v52;
  std::string *p_p;
  std::__shared_weak_count *v54;
  std::string __p;
  uint64_t v56;
  std::__shared_weak_count *v57;

  v56 = 0;
  v57 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v4)
    goto LABEL_79;
  v57 = std::__shared_weak_count::lock(v4);
  if (!v57)
    goto LABEL_79;
  v7 = *((_QWORD *)this + 24);
  v56 = v7;
  if (!v7)
    goto LABEL_79;
  std::string::basic_string[abi:ne180100]<0>(&__p, "timer");
  SipMessage::addSupportedOption((SipMessage *)a3, (void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "timer");
  v8 = SipMessage::supportsOption((uint64_t)a2, (void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!v8)
    *((_BYTE *)this + 208) = 1;
  v9 = *((_DWORD *)this + 7);
  v10 = SipMessage::header<SipMinSEHeader>((uint64_t)a2);
  if (v10 && v10[26] > v9)
    v9 = v10[26];
  v11 = SipMessage::header<SipSessionExpiresHeader>((uint64_t)a2);
  if (!v11)
  {
    if (!*((_DWORD *)this + 6))
      goto LABEL_79;
    v15 = SipMessage::header<SipSessionExpiresHeader>((SipMessage *)a3);
    *((_DWORD *)v15 + 26) = *((_DWORD *)this + 6);
LABEL_21:
    std::string::basic_string[abi:ne180100]<0>(&__p, "refresher");
    v16 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v15 + 72, (void **)&__p.__r_.__value_.__l.__data_);
    if ((void **)((char *)v15 + 80) == v16)
      v17 = &ims::kEmptyString;
    else
      v17 = (__int128 *)(v16 + 7);
    v18 = *((unsigned __int8 *)v17 + 23);
    v19 = *((_QWORD *)v17 + 1);
    if ((v18 & 0x80u) == 0)
      v20 = v18;
    else
      v20 = v19;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v20)
        goto LABEL_31;
    }
    else if (!v20)
    {
LABEL_31:
      v21 = *(_QWORD *)(v56 + 240);
      v22 = *(std::string **)(v21 + 208);
      v23 = *(std::__shared_weak_count **)(v21 + 216);
      p_p = v22;
      v54 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(p_shared_owners);
        while (__stxr(v25 + 1, p_shared_owners));
      }
      v26 = v22[5].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      v27 = *(std::__shared_weak_count **)(v26 + 16);
      if (v27)
      {
        v27 = std::__shared_weak_count::lock(v27);
        v28 = v27;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v27;
        if (v27)
        {
          v27 = *(std::__shared_weak_count **)(v26 + 8);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
        }
      }
      else
      {
        v28 = 0;
      }
      v29 = (ImsPrefs *)SipStack::prefs((SipStack *)v27);
      UseUacAsRefresherKey = (void **)ImsPrefs::getUseUacAsRefresherKey(v29);
      v31 = ImsPrefs::prefWithKey(v29, UseUacAsRefresherKey);
      if (v31)
        v32 = (*(uint64_t (**)(void *))(*(_QWORD *)v31 + 40))(v31);
      else
        v32 = *((_BYTE *)UseUacAsRefresherKey + 57) != 0;
      if (v28)
      {
        v33 = (unint64_t *)&v28->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if (v54)
      {
        v35 = &v54->__shared_owners_;
        do
          v36 = __ldaxr((unint64_t *)v35);
        while (__stlxr(v36 - 1, (unint64_t *)v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      if (!v32)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "refresher");
        v42 = *((unsigned __int8 *)this + 209);
        p_p = &__p;
        v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v15 + 9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
        if (v42)
          v44 = (const std::string *)SipSessionTimer::kRoleUAS;
        else
          v44 = &SipSessionTimer::kRoleUAC;
        std::string::operator=((std::string *)(v43 + 7), v44);
LABEL_71:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_73;
      }
      v37 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)a2 + 112))(a2);
      v38 = (uint64_t)v15 + 64;
      v39 = v37[23];
      if ((v39 & 0x80u) == 0)
        v40 = v37[23];
      else
        v40 = *((_QWORD *)v37 + 1);
      if (v40 == 6)
      {
        if ((v39 & 0x80) == 0)
        {
          if (v37[23])
          {
            v41 = "INVITE";
            while (*v37 == *(unsigned __int8 *)v41)
            {
              ++v37;
              ++v41;
              if (!--v39)
                goto LABEL_86;
            }
            goto LABEL_67;
          }
LABEL_86:
          std::string::basic_string[abi:ne180100]<0>(&__p, "timer");
          v52 = SipMessage::supportsOption((uint64_t)a2, (void **)&__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          std::string::basic_string[abi:ne180100]<0>(&__p, "refresher");
          if (v52)
            SipParameterMap::setParameter(v38, (__int128 *)&__p, &SipSessionTimer::kRoleUAC);
          else
            SipParameterMap::setParameter(v38, (__int128 *)&__p, (const std::string *)SipSessionTimer::kRoleUAS);
          goto LABEL_71;
        }
        if (!memcmp(*(const void **)v37, "INVITE", *((_QWORD *)v37 + 1)))
          goto LABEL_86;
      }
LABEL_67:
      std::string::basic_string[abi:ne180100]<0>(&__p, "refresher");
      if (*((_BYTE *)this + 209))
        v45 = (const std::string *)SipSessionTimer::kRoleUAS;
      else
        v45 = &SipSessionTimer::kRoleUAC;
      SipParameterMap::setParameter(v38, (__int128 *)&__p, v45);
      goto LABEL_71;
    }
LABEL_73:
    std::string::basic_string[abi:ne180100]<0>(&__p, "timer");
    v46 = SipMessage::supportsOption((uint64_t)a2, (void **)&__p.__r_.__value_.__l.__data_);
    v47 = v46;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (!v46)
        goto LABEL_79;
LABEL_77:
      std::string::basic_string[abi:ne180100]<0>(&__p, "timer");
      SipMessage::addRequiredOption((SipMessage *)a3, (void **)&__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_79;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v47)
      goto LABEL_77;
LABEL_79:
    v14 = 1;
    goto LABEL_80;
  }
  if (v11[26] >= v9)
  {
    v15 = (SipHeader *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 32))(v11);
    SipMessage::addHeader((SipMessage *)a3, v15, 0);
    goto LABEL_21;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"proposed SessionExpires is less than minimum of ", 48);
  *(_BYTE *)(v12 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v12 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Interval Too Small");
  LODWORD(a3[3].__r_.__value_.__r.__words[2]) = 422;
  std::string::operator=(a3 + 4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v13 = SipMessage::header<SipMinSEHeader>((SipMessage *)a3);
  v14 = 0;
  *((_DWORD *)v13 + 26) = v9;
LABEL_80:
  v48 = v57;
  if (v57)
  {
    v49 = (unint64_t *)&v57->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  return v14;
}

void sub_1BF0B83C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void *SipMessage::header<SipSessionExpiresHeader>(uint64_t a1)
{
  unsigned __int8 *v1;
  const void *v2;

  v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 32), "Session-Expires");
  if (v1 && (v2 = (const void *)*((_QWORD *)v1 + 5)) != 0)
  else
    return 0;
}

SipHeader *SipMessage::header<SipMinSEHeader>(SipMessage *a1)
{
  SipHeader *result;

  result = SipMessage::headerWithName(a1, "Min-SE", 1);
  if (result)
  return result;
}

SipHeader *SipMessage::header<SipSessionExpiresHeader>(SipMessage *a1)
{
  SipHeader *result;

  result = SipMessage::headerWithName(a1, "Session-Expires", 1);
  if (result)
  return result;
}

void SipSessionTimer::updateFromResponse(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  tm *v16;
  void **v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  std::string::size_type size;
  uint64_t v24;
  int v25;
  unsigned __int8 *v26;
  std::string *v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  _BYTE *v34;
  char v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  unsigned int v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  ImsPrefs *v51;
  void **DoNotRefreshSessionIfNoSessionExpiresHeaderFromRemoteKey;
  void *v53;
  char v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  void *__p[2];
  char v66;
  std::string v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  _BYTE v70[24];
  _BYTE *v71;
  _BYTE v72[24];
  _BYTE *v73;
  _BYTE v74[24];
  _BYTE *v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v68 = 0;
  v69 = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 200);
  if (!v4)
    goto LABEL_72;
  v69 = std::__shared_weak_count::lock(v4);
  if (!v69)
    goto LABEL_72;
  v7 = *(_QWORD *)(a1 + 192);
  v68 = v7;
  if (!v7)
    goto LABEL_72;
  SipTimerContainer::cancelAllTimers((SipTimerContainer *)(a1 + 48));
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
  }
  v13 = SipMessage::header<SipSessionExpiresHeader>(a2);
  v14 = v13;
  if (v13)
  {
    *(_DWORD *)(a1 + 24) = v13[26];
    *(_QWORD *)(a1 + 40) = time(0) + *(unsigned int *)(a1 + 24);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"next session refresh due at ", 28);
    *(_BYTE *)(v15 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(*(ims **)(a1 + 40), v15, v16);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
    memset(&v67, 0, sizeof(v67));
    std::string::basic_string[abi:ne180100]<0>(__p, "refresher");
    v17 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v14 + 18), __p);
    if (v14 + 20 == (_DWORD *)v17)
      v18 = &ims::kEmptyString;
    else
      v18 = (__int128 *)(v17 + 7);
    if (*((char *)v18 + 23) < 0)
      std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
    else
      v67 = *(std::string *)v18;
    if (v66 < 0)
      operator delete(__p[0]);
    v22 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v67.__r_.__value_.__r.__words[2]);
    else
      size = v67.__r_.__value_.__l.__size_;
    v24 = a3[23];
    v25 = (char)v24;
    if ((v24 & 0x80u) != 0)
      v24 = *((_QWORD *)a3 + 1);
    if (size == v24)
    {
      if (v25 >= 0)
        v26 = a3;
      else
        v26 = *(unsigned __int8 **)a3;
      if ((*((_BYTE *)&v67.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        if (*((_BYTE *)&v67.__r_.__value_.__s + 23))
        {
          v27 = &v67;
          while (v27->__r_.__value_.__s.__data_[0] == *v26)
          {
            v27 = (std::string *)((char *)v27 + 1);
            ++v26;
            if (!--v22)
              goto LABEL_51;
          }
          goto LABEL_43;
        }
LABEL_51:
        v36 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v7 + 64))(v7, v26);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v36);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"I'm responsible for session refresh", 35);
        *(_BYTE *)(v36 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v36 + 17) = 0;
        if (v8)
        {
          v37 = (unint64_t *)&v8->__shared_weak_owners_;
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        v75 = 0;
        v39 = operator new(0x20uLL);
        *v39 = &off_1E78DC100;
        v39[1] = a1;
        v39[2] = v9;
        v39[3] = v8;
        v75 = v39;
        SipTimerContainer::startTimer((_QWORD *)(a1 + 48), (uint64_t)"SessionRefreshTimer", (uint64_t)v74, 1000 * (*(_DWORD *)(a1 + 24) >> 1), 0);
        v34 = v75;
        v35 = 1;
        if (v75 == v74)
        {
          v40 = 4;
          v34 = v74;
          goto LABEL_64;
        }
        goto LABEL_55;
      }
      if (!memcmp(v67.__r_.__value_.__l.__data_, v26, v67.__r_.__value_.__l.__size_))
        goto LABEL_51;
    }
LABEL_43:
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"the other guy is responsible for session refresh", 48);
    *(_BYTE *)(v28 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v28 + 17) = 0;
    v29 = *(_DWORD *)(a1 + 24);
    if (v29 <= *(_DWORD *)(v7 + 828) + *(_DWORD *)(a1 + 32))
      v30 = 0;
    else
      v30 = *(_DWORD *)(v7 + 828);
    if (v8)
    {
      v31 = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v73 = 0;
    v33 = operator new(0x20uLL);
    *v33 = &off_1E78DC100;
    v33[1] = a1;
    v33[2] = v9;
    v33[3] = v8;
    v73 = v33;
    SipTimerContainer::startTimer((_QWORD *)(a1 + 48), (uint64_t)"SessionExpiresTimer", (uint64_t)v72, 1000 * (v29 - v30), 0);
    v34 = v73;
    if (v73 == v72)
    {
      v35 = 0;
      v40 = 4;
      v34 = v72;
      goto LABEL_64;
    }
    v35 = 0;
LABEL_55:
    if (!v34)
      goto LABEL_65;
    v40 = 5;
LABEL_64:
    (*(void (**)(void))(*(_QWORD *)v34 + 8 * v40))();
LABEL_65:
    *(_BYTE *)(a1 + 209) = v35;
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    goto LABEL_67;
  }
  v19 = a3[23];
  if ((v19 & 0x80u) == 0)
    v20 = a3[23];
  else
    v20 = *((_QWORD *)a3 + 1);
  if (v20 == 3)
  {
    if ((v19 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a3, &SipSessionTimer::kRoleUAC, *((_QWORD *)a3 + 1)))
        goto LABEL_67;
    }
    else if (a3[23])
    {
      v21 = &SipSessionTimer::kRoleUAC;
      while (*a3 == *v21)
      {
        ++a3;
        ++v21;
        if (!--v19)
          goto LABEL_59;
      }
      goto LABEL_67;
    }
LABEL_59:
    if (!*(_DWORD *)(a1 + 24))
      goto LABEL_67;
    v41 = *(_QWORD *)(v7 + 240);
    if (v41 && (v42 = *(_QWORD *)(v41 + 208)) != 0)
      v43 = *(_QWORD *)(v42 + 136);
    else
      v43 = 0;
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = 0uLL;
    v49 = *(std::__shared_weak_count **)(v43 + 16);
    if (v49)
    {
      v49 = std::__shared_weak_count::lock(v49);
      v50 = v49;
      v67.__r_.__value_.__l.__size_ = (std::string::size_type)v49;
      if (v49)
      {
        v49 = *(std::__shared_weak_count **)(v43 + 8);
        v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
      }
    }
    else
    {
      v50 = 0;
    }
    v51 = (ImsPrefs *)SipStack::prefs((SipStack *)v49);
    DoNotRefreshSessionIfNoSessionExpiresHeaderFromRemoteKey = (void **)ImsPrefs::getDoNotRefreshSessionIfNoSessionExpiresHeaderFromRemoteKey(v51);
    v53 = ImsPrefs::prefWithKey(v51, DoNotRefreshSessionIfNoSessionExpiresHeaderFromRemoteKey);
    if (v53)
      v54 = (*(uint64_t (**)(void *))(*(_QWORD *)v53 + 40))(v53);
    else
      v54 = *((_BYTE *)DoNotRefreshSessionIfNoSessionExpiresHeaderFromRemoteKey + 57) != 0;
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v56 = __ldaxr(p_shared_owners);
      while (__stlxr(v56 - 1, p_shared_owners));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if ((v54 & 1) != 0)
      goto LABEL_67;
    v57 = v68;
    v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 64))(v68);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 16))(v57, v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v58 + 8), (uint64_t)"No Session-Expires in response, but we sent one in our request", 62);
    *(_BYTE *)(v58 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v58 + 17) = 0;
    v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 64))(v57);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 16))(v57, v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v59 + 8), (uint64_t)"I'm responsible for session refresh", 35);
    *(_BYTE *)(v59 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v59 + 64))(v59, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v59 + 17) = 0;
    if (v8)
    {
      v60 = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    v62 = operator new(0x20uLL);
    *v62 = &off_1E78DC100;
    v62[1] = a1;
    v62[2] = v9;
    v62[3] = v8;
    v71 = v62;
    SipTimerContainer::startTimer((_QWORD *)(a1 + 48), (uint64_t)"SessionRefreshTimer", (uint64_t)v70, 1000 * (*(_DWORD *)(a1 + 24) >> 1), 0);
    v63 = v71;
    if (v71 == v70)
    {
      v64 = 4;
      v63 = v70;
    }
    else
    {
      if (!v71)
      {
LABEL_100:
        *(_BYTE *)(a1 + 209) = 1;
        goto LABEL_67;
      }
      v64 = 5;
    }
    (*(void (**)(void))(*v63 + 8 * v64))();
    goto LABEL_100;
  }
LABEL_67:
  v44 = SipMessage::header<SipMinSEHeader>(a2);
  if (v44)
  {
    v45 = v44[26];
    if (v45 > *(_DWORD *)(a1 + 28))
      *(_DWORD *)(a1 + 28) = v45;
  }
  if (v8)
  {
    std::__shared_weak_count::__release_weak(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_72:
  v46 = v69;
  if (v69)
  {
    v47 = (unint64_t *)&v69->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_1BF0B8C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::__shared_weak_count *v31;
  char *v32;
  char *v34;
  uint64_t v35;

  v34 = a27;
  if (a27 == v32)
  {
    v35 = 4;
    v34 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v35 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
LABEL_6:
  if (v31)
  {
    std::__shared_weak_count::__release_weak(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void SipSessionTimer::updateFromIncomingResponse(SipSessionTimer *this, const SipResponse *a2)
{
  BOOL v4;
  BOOL v5;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "timer");
  v4 = SipMessage::supportsOption((uint64_t)a2, __p);
  v5 = v4;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (v5)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (!v4)
LABEL_3:
    *((_BYTE *)this + 208) = 1;
LABEL_4:
  SipSessionTimer::updateFromResponse((uint64_t)this, (uint64_t)a2, (unsigned __int8 *)&SipSessionTimer::kRoleUAC);
}

void sub_1BF0B8E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipSessionTimer::addHeadersToRequest(SipSessionTimer *this, SipRequest *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unsigned int v7;
  SipHeader *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  SipHeader *v12;
  SipHeader *v13;
  int v14;
  uint64_t *v15;
  const std::string *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p[2];
  char v20;
  std::__shared_weak_count *v22;
  void **v23;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v22 = v5;
    if (v5)
    {
      v6 = v5;
      if (!*((_QWORD *)this + 24))
      {
LABEL_22:
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        return;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "timer");
      SipMessage::addSupportedOption(a2, __p);
      if (v20 < 0)
        operator delete(__p[0]);
      v7 = *((_DWORD *)this + 7);
      if (v7 > *((_DWORD *)this + 8))
      {
        v8 = SipMessage::header<SipMinSEHeader>(a2);
        v9 = *((_DWORD *)v8 + 26);
        if (v9 >= v7)
          goto LABEL_10;
        *((_DWORD *)v8 + 26) = v7;
      }
      v9 = v7;
LABEL_10:
      v10 = *((_DWORD *)this + 6);
      if (v10)
      {
        if (v10 <= v9)
          v11 = v9;
        else
          v11 = *((_DWORD *)this + 6);
        v12 = SipMessage::header<SipSessionExpiresHeader>(a2);
        v13 = v12;
        if (*((_DWORD *)v12 + 26) - 1 >= v11)
          *((_DWORD *)v12 + 26) = v11;
        if (*((_BYTE *)this + 208))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "refresher");
          v14 = *((unsigned __int8 *)this + 209);
          v23 = __p;
          v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v13 + 9, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v23);
          if (v14)
            v16 = (const std::string *)&SipSessionTimer::kRoleUAC;
          else
            v16 = (const std::string *)&SipSessionTimer::kRoleUAS;
          std::string::operator=((std::string *)(v15 + 7), v16);
          if (v20 < 0)
            operator delete(__p[0]);
        }
      }
      goto LABEL_22;
    }
  }
}

void sub_1BF0B8FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void SipSessionTimer::~SipSessionTimer(SipSessionTimer *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78DC080;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  SipTimerContainer::~SipTimerContainer((SipSessionTimer *)((char *)this + 48));
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78DC080;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  SipTimerContainer::~SipTimerContainer((SipSessionTimer *)((char *)this + 48));
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0,std::allocator<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78DC100;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0,std::allocator<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78DC100;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0,std::allocator<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78DC100;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0,std::allocator<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78DC100;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0,std::allocator<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0,std::allocator<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0,std::allocator<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0>,void ()(std::string&)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF0B9280(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0,std::allocator<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0,std::allocator<SipSessionTimer::updateFromResponse(SipResponse const&,std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

void NetworkInterfaceMonitor::_callback(NetworkInterfaceMonitor *this, const __SCDynamicStore *a2, const __CFArray *a3, void *a4)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  void *v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void *__p[2];
  char v20;
  void *v21[2];
  std::__shared_weak_count *v22;
  __int128 v23;

  if (a3)
  {
    *((_BYTE *)a3 + 8) = 1;
    v5 = NetworkInterfaceMonotorManager::_instance;
    if (!NetworkInterfaceMonotorManager::_instance)
    {
      v5 = operator new();
      *(_OWORD *)v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_DWORD *)(v5 + 32) = 1065353216;
      NetworkInterfaceMonotorManager::_instance = v5;
    }
    v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>((_QWORD *)v5, (unsigned __int8 *)a3 + 16);
    if (v6)
    {
      v7 = v6;
      v9 = (char *)*((_QWORD *)v6 + 5);
      v8 = (void *)*((_QWORD *)v6 + 6);
      v21[0] = v9;
      v21[1] = v8;
      v10 = (std::__shared_weak_count *)*((_QWORD *)v7 + 7);
      v22 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v23 = *((_OWORD *)v7 + 4);
      if (v9)
      {
        if (*((_QWORD *)&v23 + 1) && v8 != 0)
        {
          v14 = v9 + 16;
          __p[0] = (void *)(*(uint64_t (**)(void *, char *))(*(_QWORD *)v8 + 64))(v8, v9 + 16);
          (*(void (**)(_QWORD, char *, void **))(**((_QWORD **)&v23 + 1) + 16))(*((_QWORD *)&v23 + 1), v14, __p);
          v15 = __p[0];
          __p[0] = 0;
          if (v15)
            (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
        }
      }
      if (v10)
      {
        v16 = (unint64_t *)&v10->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v18 = ImsLogger::error(ims::_logger, (uint64_t)v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"No NetworkInterfaceMonitor found", 32);
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v18 + 17) = 0;
    if (v20 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v22) < 0)
      operator delete(v21[0]);
  }
}

void sub_1BF0B94E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a9)
    (*(void (**)(void *))(*(_QWORD *)a9 + 8))(a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void NetworkInterfaceMonitor::~NetworkInterfaceMonitor(void **this)
{
  NetworkInterfaceMonitor::stopMonitoring((NetworkInterfaceMonitor *)this);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

void NetworkInterfaceMonitor::stopMonitoring(NetworkInterfaceMonitor *this)
{
  const __SCDynamicStore *v2;

  v2 = (const __SCDynamicStore *)*((_QWORD *)this + 1);
  if (v2)
  {
    SCDynamicStoreSetDispatchQueue(v2, 0);
    CFRelease(*((CFTypeRef *)this + 1));
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t NetworkInterfaceMonitor::startMonitoring(NetworkInterfaceMonitor *this, std::string *__str, char a3)
{
  SCDynamicStoreRef v6;
  size_t v7;
  char *p_p;
  size_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  const __SCDynamicStore *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  void *v19[2];
  char v20;
  void (**v21)(ims::CFMutableArray *__hidden);
  CFArrayRef keys;
  void *__p;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  size_t v27;
  uint64_t v28;
  SCDynamicStoreContext context;

  if (*((_QWORD *)this + 1))
    NetworkInterfaceMonitor::stopMonitoring(this);
  std::string::operator=((std::string *)((char *)this + 16), __str);
  memset(&context, 0, sizeof(context));
  context.info = *(void **)this;
  v6 = SCDynamicStoreCreate(0, CFSTR("ims"), (SCDynamicStoreCallBack)NetworkInterfaceMonitor::_callback, &context);
  *((_QWORD *)this + 1) = v6;
  if (v6)
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    std::operator+<char>();
    v21 = &off_1E78B7BD8;
    keys = 0;
    if ((a3 & 1) == 0)
      goto LABEL_11;
    if (v28 >= 0)
      v7 = HIBYTE(v28);
    else
      v7 = v27;
    v24 = 0;
    v25 = 0;
    __p = 0;
    p_p = (char *)&__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v7 + 5);
    if (v25 < 0)
      p_p = (char *)__p;
    strcpy(&p_p[v7], "/IPv4");
    ims::CFString::CFString(v19, (char *)&__p, 0x8000100u);
    ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v21, (const void **)v19);
    ims::CFType::~CFType((ims::CFType *)v19);
    if (SHIBYTE(v25) < 0)
    {
      operator delete(__p);
      if ((a3 & 2) == 0)
        goto LABEL_30;
    }
    else
    {
LABEL_11:
      if ((a3 & 2) == 0)
        goto LABEL_30;
    }
    if (v28 >= 0)
      v9 = HIBYTE(v28);
    else
      v9 = v27;
    v24 = 0;
    v25 = 0;
    __p = 0;
    v10 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v9 + 5);
    if (v25 < 0)
      v10 = __p;
    if (v9)
    {
      if (v28 >= 0)
        v11 = &v26;
      else
        v11 = v26;
      memmove(v10, v11, v9);
    }
    strcpy((char *)v10 + v9, "/IPv6");
    ims::CFString::CFString(v19, (char *)&__p, 0x8000100u);
    ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v21, (const void **)v19);
    ims::CFType::~CFType((ims::CFType *)v19);
    if (SHIBYTE(v25) < 0)
      operator delete(__p);
LABEL_30:
    if (SCDynamicStoreSetNotificationKeys(*((SCDynamicStoreRef *)this + 1), keys, 0))
    {
      v14 = (const __SCDynamicStore *)*((_QWORD *)this + 1);
      v15 = sImsDispatchQueue;
      if (!sImsDispatchQueue)
      {
        v15 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
        sImsDispatchQueue = (uint64_t)v15;
      }
      if (SCDynamicStoreSetDispatchQueue(v14, v15))
      {
        v13 = 1;
        goto LABEL_45;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "net");
      std::string::basic_string[abi:ne180100]<0>(v19, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v17 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"NetworkInterfaceMonitor: unable to set dispatch queue for dynamic store", 71);
      *(_BYTE *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v17 + 17) = 0;
      if (v20 < 0)
        operator delete(v19[0]);
      if (SHIBYTE(v25) < 0)
        operator delete(__p);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "net");
      std::string::basic_string[abi:ne180100]<0>(v19, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v16 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"NetworkInterfaceMonitor: SetNotificationKeys failed", 51);
      *(_BYTE *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v16 + 17) = 0;
      if (v20 < 0)
        operator delete(v19[0]);
      if (SHIBYTE(v25) < 0)
        operator delete(__p);
      NetworkInterfaceMonitor::stopMonitoring(this);
    }
    v13 = 0;
LABEL_45:
    ims::CFType::~CFType((ims::CFType *)&v21);
    if (SHIBYTE(v28) < 0)
      operator delete(v26);
    return v13;
  }
  std::string::basic_string[abi:ne180100]<0>(&v26, "net");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v12 = ImsLogger::error(ims::_logger, (uint64_t)&v26, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"NetworkInterfaceMonitor: couldn't create dynamic store", 54);
  *(_BYTE *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v12 + 17) = 0;
  if (SHIBYTE(v25) < 0)
    operator delete(__p);
  if (SHIBYTE(v28) < 0)
    operator delete(v26);
  return 0;
}

void sub_1BF0B9A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0)
    operator delete(__p);
  ims::CFType::~CFType((ims::CFType *)&a16);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(a1);
}

void sub_1BF0B9AD8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  JUMPOUT(0x1BF0B9AC0);
}

uint64_t NetworkInterfaceMonotorManager::startMonitoring(_QWORD *a1, unsigned __int8 *a2, std::string *a3, char a4)
{
  unsigned __int8 *v6;
  NetworkInterfaceMonitor *v7;

  v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1, a2);
  if (v6)
  {
    v7 = (NetworkInterfaceMonitor *)*((_QWORD *)v6 + 5);
    if (v7)
      NetworkInterfaceMonitor::startMonitoring(v7, a3, a4);
  }
  return 0;
}

void NetworkInterfaceMonotorManager::stopMonitoring(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  NetworkInterfaceMonitor *v3;

  v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1, a2);
  if (v2)
  {
    v3 = (NetworkInterfaceMonitor *)*((_QWORD *)v2 + 5);
    if (v3)
      NetworkInterfaceMonitor::stopMonitoring(v3);
  }
}

void NetworkInterfaceMonotorManager::releaseMonitor(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  NetworkInterfaceMonitor *v5;
  void **v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _BYTE *v10;
  NSObject *v11;
  _QWORD v12[5];
  __int128 v13;

  v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1, a2);
  if (v3)
  {
    v4 = v3;
    v5 = (NetworkInterfaceMonitor *)*((_QWORD *)v3 + 5);
    if (v5)
    {
      NetworkInterfaceMonitor::stopMonitoring(v5);
      v6 = (void **)*((_QWORD *)v4 + 5);
      if (v6)
      {
        NetworkInterfaceMonitor::~NetworkInterfaceMonitor(v6);
        MEMORY[0x1C3B87100]();
      }
    }
    *((_QWORD *)v4 + 5) = 0;
    *((_QWORD *)v4 + 9) = 0;
    v13 = 0uLL;
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)(v4 + 48), &v13);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = (_BYTE *)*((_QWORD *)v4 + 8);
    if (v10)
    {
      if (v10[8])
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v10 + 8))(*((_QWORD *)v4 + 8));
      }
      else
      {
        v11 = sImsDispatchQueue;
        if (!sImsDispatchQueue)
        {
          v11 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
          sImsDispatchQueue = (uint64_t)v11;
        }
        v12[0] = MEMORY[0x1E0C809B0];
        v12[1] = 0x40000000;
        v12[2] = ___ZN30NetworkInterfaceMonotorManager14releaseMonitorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        v12[3] = &__block_descriptor_tmp_11_3;
        v12[4] = v10;
        dispatch_async(v11, v12);
      }
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::remove(a1, v4, (uint64_t)&v13);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,NetworkInterfaceMonotorManager::NetworkInterfaceWatcher>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,NetworkInterfaceMonotorManager::NetworkInterfaceWatcher>,void *>>>>::reset[abi:ne180100]((uint64_t)&v13, 0);
  }
}

uint64_t ___ZN30NetworkInterfaceMonotorManager14releaseMonitorERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void NetworkInterfaceMonotorManager::createMonitor(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 **v18;
  unsigned __int8 *v19;
  unint64_t v20;
  char *v21;
  _QWORD *v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  int8x8_t prime;
  void *v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  std::string __p;
  __int128 v50;
  std::__shared_weak_count *v51;
  __int128 v52;
  _BYTE v53[40];
  _QWORD v54[3];

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  ImsUuid::generate((ImsUuid *)&__p);
  if (SBYTE7(v50) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a4, (const std::string::value_type *)__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2]);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78C0288;
    if (SBYTE7(v50) < 0)
      operator delete((void *)__p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
    *(_QWORD *)(a4 + 16) = v50;
  }
  memset(v53, 0, sizeof(v53));
  v8 = operator new();
  *(_QWORD *)v8 = off_1E78DC180;
  *(_BYTE *)(v8 + 8) = 0;
  v9 = (std::string *)(v8 + 16);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    *(_QWORD *)(v8 + 32) = *(_QWORD *)(a4 + 16);
  }
  *(_QWORD *)&v53[24] = v8;
  v10 = operator new();
  *(_QWORD *)v10 = *(_QWORD *)&v53[24];
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_QWORD *)v53 = v10;
  std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v53[8], a3);
  *(_QWORD *)&v53[32] = a2;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  v50 = *(_OWORD *)v53;
  v51 = *(std::__shared_weak_count **)&v53[16];
  *(_QWORD *)&v53[8] = 0;
  *(_QWORD *)&v53[16] = 0;
  v52 = *(_OWORD *)&v53[24];
  v11 = (_QWORD *)(a1 + 24);
  v12 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)&__p);
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
  {
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    v16 = v15.u32[0];
    if (v15.u32[0] > 1uLL)
    {
      v17 = v12;
      if (v12 >= v14)
        v17 = v12 % v14;
    }
    else
    {
      v17 = (v14 - 1) & v12;
    }
    v18 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v17);
    if (v18)
    {
      v19 = *v18;
      if (*v18)
      {
        while (1)
        {
          v20 = *((_QWORD *)v19 + 1);
          if (v20 == v13)
          {
            if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, v19 + 16, (unsigned __int8 *)&__p) & 1) != 0)
              goto LABEL_84;
          }
          else
          {
            if (v16 > 1)
            {
              if (v20 >= v14)
                v20 %= v14;
            }
            else
            {
              v20 &= v14 - 1;
            }
            if (v20 != v17)
            {
LABEL_28:
              v11 = (_QWORD *)(a1 + 24);
              break;
            }
          }
          v19 = *(unsigned __int8 **)v19;
          if (!v19)
            goto LABEL_28;
        }
      }
    }
  }
  else
  {
    v17 = 0;
  }
  v54[2] = 1;
  v21 = (char *)operator new(0x50uLL);
  v22 = (_QWORD *)(a1 + 16);
  v54[0] = v21;
  v54[1] = a1 + 16;
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = v13;
  *(std::string *)(v21 + 16) = __p;
  memset(&__p, 0, sizeof(__p));
  *(_OWORD *)(v21 + 40) = v50;
  *((_QWORD *)v21 + 7) = v51;
  *((_QWORD *)&v50 + 1) = 0;
  v51 = 0;
  *((_OWORD *)v21 + 4) = v52;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v14 || (float)(v24 * (float)v14) < v23)
  {
    v25 = 1;
    if (v14 >= 3)
      v25 = (v14 & (v14 - 1)) != 0;
    v26 = v25 | (2 * v14);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      prime = (int8x8_t)v27;
    else
      prime = (int8x8_t)v26;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v14 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v14)
      goto LABEL_41;
    if (*(_QWORD *)&prime < v14)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v14 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (*(_QWORD *)&prime <= v35)
        prime = (int8x8_t)v35;
      if (*(_QWORD *)&prime >= v14)
      {
        v14 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_41:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v29 = operator new(8 * *(_QWORD *)&prime);
          v30 = *(void **)a1;
          *(_QWORD *)a1 = v29;
          if (v30)
            operator delete(v30);
          v31 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v31++) = 0;
          while (*(_QWORD *)&prime != v31);
          v32 = (_QWORD *)*v22;
          if (*v22)
          {
            v33 = v32[1];
            v34 = (uint8x8_t)vcnt_s8(prime);
            v34.i16[0] = vaddlv_u8(v34);
            if (v34.u32[0] > 1uLL)
            {
              if (v33 >= *(_QWORD *)&prime)
                v33 %= *(_QWORD *)&prime;
            }
            else
            {
              v33 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v22;
            v38 = (_QWORD *)*v32;
            if (*v32)
            {
              do
              {
                v39 = v38[1];
                if (v34.u32[0] > 1uLL)
                {
                  if (v39 >= *(_QWORD *)&prime)
                    v39 %= *(_QWORD *)&prime;
                }
                else
                {
                  v39 &= *(_QWORD *)&prime - 1;
                }
                if (v39 != v33)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v39))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v32;
                    goto LABEL_66;
                  }
                  *v32 = *v38;
                  *v38 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v39);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v39) = v38;
                  v38 = v32;
                }
                v39 = v33;
LABEL_66:
                v32 = v38;
                v38 = (_QWORD *)*v38;
                v33 = v39;
              }
              while (v38);
            }
          }
          v14 = (unint64_t)prime;
          goto LABEL_70;
        }
        v48 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v48)
          operator delete(v48);
        v14 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_70:
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v17 = v13 % v14;
      else
        v17 = v13;
    }
    else
    {
      v17 = (v14 - 1) & v13;
    }
  }
  v40 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v17);
  if (v40)
  {
    *(_QWORD *)v54[0] = *v40;
    *v40 = v54[0];
  }
  else
  {
    *(_QWORD *)v54[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v54[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = v22;
    if (*(_QWORD *)v54[0])
    {
      v41 = *(_QWORD *)(*(_QWORD *)v54[0] + 8);
      if ((v14 & (v14 - 1)) != 0)
      {
        if (v41 >= v14)
          v41 %= v14;
      }
      else
      {
        v41 &= v14 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v41) = v54[0];
    }
  }
  v54[0] = 0;
  ++*v11;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,NetworkInterfaceMonotorManager::NetworkInterfaceWatcher>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,NetworkInterfaceMonotorManager::NetworkInterfaceWatcher>,void *>>>>::reset[abi:ne180100]((uint64_t)v54, 0);
LABEL_84:
  v42 = v51;
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v45 = *(std::__shared_weak_count **)&v53[16];
  if (*(_QWORD *)&v53[16])
  {
    v46 = (unint64_t *)(*(_QWORD *)&v53[16] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
}

void sub_1BF0BA304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (*(char *)(v12 + 23) < 0)
    operator delete(*(void **)v12);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,NetworkInterfaceMonotorManager::NetworkInterfaceWatcher>::~pair(uint64_t a1)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void NetworkIntefaceManagerCallback::~NetworkIntefaceManagerCallback(void **this)
{
  *this = off_1E78DC180;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  *this = off_1E78DC180;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  JUMPOUT(0x1C3B87100);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,NetworkInterfaceMonotorManager::NetworkInterfaceWatcher>,0>(uint64_t a1)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,NetworkInterfaceMonotorManager::NetworkInterfaceWatcher>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,NetworkInterfaceMonotorManager::NetworkInterfaceWatcher>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,NetworkInterfaceMonotorManager::NetworkInterfaceWatcher>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

double SipUriHeader::SipUriHeader(uint64_t a1, const std::string *a2)
{
  uint64_t v2;
  double result;

  v2 = SipHeader::SipHeader(a1, a2);
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 64) = &off_1E78B82D8;
  *(_QWORD *)(v2 + 72) = v2 + 80;
  *(_WORD *)(v2 + 96) = 256;
  *(_QWORD *)v2 = &off_1E78DC1D0;
  *(_QWORD *)(v2 + 152) = 0;
  *(_QWORD *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 112) = &off_1E78D08F8;
  *(_QWORD *)(v2 + 120) = 0;
  *(_WORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 184) = 0;
  *(_QWORD *)(v2 + 168) = &off_1E78B82D8;
  *(_QWORD *)(v2 + 176) = v2 + 184;
  *(_BYTE *)(v2 + 201) = 1;
  *(_QWORD *)(v2 + 104) = &off_1E78BFCE8;
  *(_QWORD *)(v2 + 416) = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 384) = 0u;
  *(_OWORD *)(v2 + 400) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_QWORD *)(v2 + 448) = 0;
  *(_QWORD *)(v2 + 456) = 0;
  *(_QWORD *)(v2 + 432) = &off_1E78B82D8;
  *(_QWORD *)(v2 + 440) = v2 + 448;
  *(_QWORD *)(v2 + 488) = 0;
  *(_QWORD *)(v2 + 496) = 0;
  *(_QWORD *)(v2 + 472) = &off_1E78B82D8;
  *(_QWORD *)(v2 + 480) = v2 + 488;
  *(_BYTE *)(v2 + 200) = 1;
  *(_WORD *)(v2 + 464) = 257;
  *(_WORD *)(v2 + 504) = 257;
  *(_BYTE *)(v2 + 424) = 0;
  return result;
}

void SipUriHeader::SipUriHeader(SipUriHeader *this, const SipUriHeader *a2)
{
  _QWORD *v3;

  SipParameterHeader::SipParameterHeader(this, a2);
  *v3 = &off_1E78DC1D0;
  SipUri::SipUri((SipUri *)(v3 + 13), (const SipUriHeader *)((char *)a2 + 104));
}

void sub_1BF0BA5DC(_Unwind_Exception *a1)
{
  SipParameterHeader *v1;

  SipParameterHeader::~SipParameterHeader(v1);
  _Unwind_Resume(a1);
}

uint64_t SipUriHeader::encodeValue(SipUriHeader *this, ImsOutStream *a2)
{
  SipUri::toStream((uint64_t)this + 104, (uint64_t)a2, 0);
  return 1;
}

uint64_t SipUriHeader::valueAsString(uint64_t a1, uint64_t a2)
{
  SipUri::asString(a1 + 104, a2, 0);
  return 1;
}

uint64_t SipUriHeader::setValueFromString(uint64_t a1, std::string *a2)
{
  return SipUri::fromString(a1 + 104, a2);
}

__int128 *SipUriHeader::tag(SipUriHeader *this)
{
  void **v2;
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "tag");
  v2 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 72, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if ((void **)((char *)this + 80) == v2)
    return &ims::kEmptyString;
  else
    return (__int128 *)(v2 + 7);
}

void sub_1BF0BA6A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipUriHeader::setTag(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v5;
  void *__p[2];
  char v7;
  void **v8;

  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "tag");
    v8 = __p;
    v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 72), __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v8);
    std::string::operator=((std::string *)(v5 + 7), (const std::string *)a2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "tag");
    SipParameterMap::clearParameter(a1 + 64, __p);
  }
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1BF0BA77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string::size_type SipUriHeader::findParameterMarker(uint64_t a1, std::string *a2)
{
  return SipUriHeader::findUriHeaderParameterMarker(a2);
}

std::string::size_type SipUriHeader::findUriHeaderParameterMarker(std::string *a1)
{
  std::string::size_type NotQuoted;
  std::string::size_type result;
  std::string::size_type v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;

  NotQuoted = ims::findNotQuoted((uint64_t *)a1, 0x3Cu);
  result = ims::findNotQuoted((uint64_t *)a1, 0x3Bu);
  if (NotQuoted != -1 && result >= NotQuoted)
  {
    v5 = std::string::find(a1, 62, NotQuoted);
    if (v5 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(v9, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_21);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v6 = ImsLogger::error(ims::_logger, (uint64_t)v9, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"No matching close bracket in URI header: ", 41);
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 32))(v6, a1);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v6 + 17) = 0;
      if (v8 < 0)
        operator delete(__p[0]);
      if (v10 < 0)
        operator delete(v9[0]);
      return ims::findNotQuoted((uint64_t *)a1, 0x3Bu);
    }
    else
    {
      return std::string::find(a1, 59, v5);
    }
  }
  return result;
}

void sub_1BF0BA8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipUriHeader::~SipUriHeader(SipUriHeader *this)
{
  *(_QWORD *)this = &off_1E78DC1D0;
  SipUri::~SipUri((SipUriHeader *)((char *)this + 104));
  *(_QWORD *)this = off_1E78E5828;
  *((_QWORD *)this + 8) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  SipHeader::~SipHeader((void **)this);
}

{
  *(_QWORD *)this = &off_1E78DC1D0;
  SipUri::~SipUri((SipUriHeader *)((char *)this + 104));
  *(_QWORD *)this = off_1E78E5828;
  *((_QWORD *)this + 8) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C3B87100);
}

SipUriHeader *SipUriHeader::clone(SipUriHeader *this)
{
  SipUriHeader *v2;

  v2 = (SipUriHeader *)operator new();
  SipUriHeader::SipUriHeader(v2, this);
  return v2;
}

void sub_1BF0BAA14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C4072661F37);
  _Unwind_Resume(a1);
}

void SipMessageManager::OutgoingMessage::~OutgoingMessage(SipMessageManager::OutgoingMessage *this)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (void **)((char *)this + 56);
  if (*((_DWORD *)this + 20))
    ImsPowerAssertion::deinitialize((uint64_t)this + 56);
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    v8 = 0;
    v9 = 0;
    std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v4 + 344), &v8);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  ImsPowerAssertion::~ImsPowerAssertion(v2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void SipMessageManager::OutgoingMessage::send(SipMessageManager::OutgoingMessage *this)
{
  SipMessage *v1;
  int v3;
  const std::string *v4;
  SipHeader *v5;
  uint64_t v6;
  uint64_t v7;
  const SipMessage *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  __int128 v31;

  v1 = (SipMessage *)*((_QWORD *)this + 3);
  if (v1)
  {
    v3 = *(_DWORD *)(*(_QWORD *)this + 160);
    *(_DWORD *)(*(_QWORD *)this + 160) = v3 + 1;
    v4 = (const std::string *)(*(uint64_t (**)(SipMessage *))(*(_QWORD *)v1 + 112))(v1);
    v5 = SipMessage::header<SipCSeqHeader>(v1, 1);
    *((_DWORD *)v5 + 15) = v3;
    std::string::operator=((std::string *)((char *)v5 + 64), v4);
    v6 = *(_QWORD *)(*(_QWORD *)this + 144);
    v30 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v6 + 16));
    v29 = *(_QWORD *)(v6 + 8);
    v7 = *(_QWORD *)(v29 + 152);
    v8 = (const SipMessage *)*((_QWORD *)this + 3);
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (*(_QWORD *)this)
      v10 = *(_QWORD *)this + 8;
    else
      v10 = 0;
    v27 = v10;
    v28 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v25 = 0;
    v26 = 0;
    SipTransactionLayer::sendRequest(v7, v8, &v27, &v25, &v31);
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 32, &v31);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v26;
    if (v26)
    {
      v17 = (unint64_t *)&v26->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = v28;
    if (v28)
    {
      v20 = (unint64_t *)&v28->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v30;
    if (v30)
    {
      v23 = (unint64_t *)&v30->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    *((_BYTE *)this + 48) = 0;
  }
}

void sub_1BF0BACC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void SipMessageManager::SipMessageManager(SipMessageManager *this, uint64_t **a2)
{
  std::string __p;

  *(_QWORD *)this = &off_1E78B7F60;
  *((_QWORD *)this + 1) = &off_1E78B81C8;
  *((_QWORD *)this + 2) = off_1E78B7FB8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.msg");
  ImsLogContainer::ImsLogContainer((uint64_t)this + 24, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *(_QWORD *)this = &off_1E78DC270;
  *((_QWORD *)this + 1) = &unk_1E78DC2D0;
  *((_QWORD *)this + 2) = &unk_1E78DC318;
  *((_QWORD *)this + 3) = &unk_1E78DC348;
  *((_QWORD *)this + 21) = (char *)this + 168;
  *((_QWORD *)this + 22) = (char *)this + 168;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 24) = (char *)this + 200;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_QWORD *)this + 18) = a2;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0x100000001;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"MESSAGE";
  std::__tree<std::__value_type<std::string,SipUserAgentDelegate *>,std::__map_value_compare<std::string,std::__value_type<std::string,SipUserAgentDelegate *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipUserAgentDelegate *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2 + 16, (void **)"MESSAGE", (uint64_t)&std::piecewise_construct, (__int128 **)&__p)[7] = (uint64_t)this;
}

void sub_1BF0BADF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;
  _QWORD *v16;
  uint64_t v17;
  void **v18;
  std::__shared_weak_count *v20;

  if (*(char *)(v14 + 271) < 0)
    operator delete(*(void **)(v14 + 248));
  if (*(char *)(v14 + 247) < 0)
    operator delete(*v18);
  std::__tree<unsigned int>::destroy(v17, *(_QWORD **)(v14 + 200));
  std::__list_imp<unsigned long long>::clear(v16);
  v20 = *(std::__shared_weak_count **)(v14 + 136);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  ImsLogContainer::~ImsLogContainer(v15);
  _Unwind_Resume(a1);
}

void SipMessageManager::deinitialize(SipMessageManager *this)
{
  _QWORD v1[2];
  int v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v3 = 0u;
  v4 = 0u;
  v5 = 0u;
  v1[0] = &off_1E78B7238;
  v1[1] = &_bambiDomain;
  v2 = 1073741827;
  SipMessageManager::clearQueueWithResult(this, (const ImsResult *)v1);
  ImsResult::~ImsResult((ImsResult *)v1);
}

void sub_1BF0BAEC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

_QWORD *SipMessageManager::clearQueueWithResult(SipMessageManager *this, const ImsResult *a2)
{
  uint64_t v4;
  SipMessageManager::OutgoingMessage *v5;
  _QWORD *i;
  unsigned int *v7;

  v4 = *((_QWORD *)this + 27);
  if (v4)
  {
    SipMessageManager::generateError(this, *(unsigned int *)(v4 + 16), a2);
    v5 = (SipMessageManager::OutgoingMessage *)*((_QWORD *)this + 27);
    if (v5)
    {
      SipMessageManager::OutgoingMessage::~OutgoingMessage(v5);
      MEMORY[0x1C3B87100]();
    }
    *((_QWORD *)this + 27) = 0;
  }
  for (i = (_QWORD *)*((_QWORD *)this + 22); i != (_QWORD *)((char *)this + 168); i = (_QWORD *)i[1])
  {
    v7 = (unsigned int *)i[2];
    SipMessageManager::generateError(this, v7[4], a2);
    SipMessageManager::OutgoingMessage::~OutgoingMessage((SipMessageManager::OutgoingMessage *)v7);
    MEMORY[0x1C3B87100]();
  }
  return std::__list_imp<unsigned long long>::clear((_QWORD *)this + 21);
}

void SipMessageManager::endAllMessages(SipMessageManager *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  char v21;
  BOOL v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  char v49;
  BOOL v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD v64[2];
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  void *__p[2];
  char v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;

  SipMessageManager::deinitialize(this);
  v2 = *((_QWORD *)this + 18);
  v70 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v2 + 16));
  v69 = *(_QWORD *)(v2 + 8);
  v3 = *(_QWORD *)(v69 + 152);
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  v64[0] = &off_1E78B7238;
  v64[1] = &_bambiDomain;
  v65 = 1073741827;
  v80 = 0;
  v78 = 0u;
  v79 = 0u;
  std::unordered_map<std::string,std::shared_ptr<SipClientTransaction>>::unordered_map((uint64_t)&v78, v3 + 152);
  v77 = 0;
  v75 = 0u;
  v76 = 0u;
  std::unordered_map<std::string,std::shared_ptr<SipServerTransaction>>::unordered_map((uint64_t)&v75, v3 + 192);
  v4 = (_QWORD *)v79;
  if ((_QWORD)v79)
  {
    v5 = v3 + 32;
    do
    {
      v6 = v4[5];
      v7 = (std::__shared_weak_count *)v4[6];
      v73 = v6;
      v74 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (v6
        && ((v11 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 288) + 112))(*(_QWORD *)(v6 + 288)),
             v12 = v11[23],
             (v12 & 0x80u) == 0)
          ? (v13 = v11[23])
          : (v13 = *((_QWORD *)v11 + 1)),
            v13 == 7))
      {
        if ((v12 & 0x80) != 0)
        {
          v22 = memcmp(*(const void **)v11, "MESSAGE", *((_QWORD *)v11 + 1)) == 0;
        }
        else if (v11[23])
        {
          v14 = v12 - 1;
          v15 = "MESSAGE";
          do
          {
            v17 = *v11++;
            v16 = v17;
            v19 = *(unsigned __int8 *)v15++;
            v18 = v19;
            v20 = v14-- != 0;
            v21 = v20;
            v22 = v16 == v18;
          }
          while (v16 == v18 && (v21 & 1) != 0);
        }
        else
        {
          v22 = 1;
        }
      }
      else
      {
        v22 = 0;
      }
      if (!v7)
        goto LABEL_26;
      v23 = (unint64_t *)&v7->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (v22)
        {
LABEL_27:
          v25 = v73;
          v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 144))(v73);
          v27 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 64);
          if (v26)
          {
            v28 = v27(v3 + 32);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v3 + 32, v28);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"forcing termination of completed transaction ", 45);
            *(_BYTE *)(v28 + 17) = 0;
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v25 + 152))(__p, v25);
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v28 + 40))(v28, __p);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v28 + 17) = 0;
            if (v72 < 0)
              operator delete(__p[0]);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 32))(v25, 7);
          }
          else
          {
            v29 = v27(v3 + 32);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v3 + 32, v29);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"Error out transaction ", 22);
            *(_BYTE *)(v29 + 17) = 0;
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v25 + 152))(__p, v25);
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v29 + 40))(v29, __p);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v29 + 17) = 0;
            if (v72 < 0)
              operator delete(__p[0]);
            (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v25 + 112))(v25, v64);
          }
        }
      }
      else
      {
LABEL_26:
        if (v22)
          goto LABEL_27;
      }
      v30 = v74;
      if (v74)
      {
        v31 = (unint64_t *)&v74->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v4 = (_QWORD *)*v4;
    }
    while (v4);
  }
  v33 = (_QWORD *)v76;
  if ((_QWORD)v76)
  {
    v34 = v3 + 32;
    do
    {
      v35 = v33[5];
      v36 = (std::__shared_weak_count *)v33[6];
      v73 = v35;
      v74 = v36;
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldxr(v37);
        while (__stxr(v39 + 1, v37));
      }
      if (v35
        && ((v40 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v35 + 288) + 112))(*(_QWORD *)(v35 + 288)),
             v41 = v40[23],
             (v41 & 0x80u) == 0)
          ? (v42 = v40[23])
          : (v42 = *((_QWORD *)v40 + 1)),
            v42 == 7))
      {
        if ((v41 & 0x80) != 0)
        {
          v50 = memcmp(*(const void **)v40, "MESSAGE", *((_QWORD *)v40 + 1)) == 0;
        }
        else if (v40[23])
        {
          v43 = v41 - 1;
          v44 = "MESSAGE";
          do
          {
            v46 = *v40++;
            v45 = v46;
            v48 = *(unsigned __int8 *)v44++;
            v47 = v48;
            v20 = v43-- != 0;
            v49 = v20;
            v50 = v45 == v47;
          }
          while (v45 == v47 && (v49 & 1) != 0);
        }
        else
        {
          v50 = 1;
        }
      }
      else
      {
        v50 = 0;
      }
      if (!v36)
        goto LABEL_69;
      v51 = (unint64_t *)&v36->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
        if (v50)
        {
LABEL_70:
          v53 = v73;
          v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 144))(v73);
          v55 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 64);
          if (v54)
          {
            v56 = v55(v3 + 32);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v3 + 32, v56);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v56 + 8), (uint64_t)"forcing termination of completed transaction ", 45);
            *(_BYTE *)(v56 + 17) = 0;
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v53 + 160))(__p, v53);
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v56 + 40))(v56, __p);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v56 + 64))(v56, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v56 + 17) = 0;
            if (v72 < 0)
              operator delete(__p[0]);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 32))(v53, 7);
          }
          else
          {
            v57 = v55(v3 + 32);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v3 + 32, v57);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v57 + 8), (uint64_t)"Error out transaction ", 22);
            *(_BYTE *)(v57 + 17) = 0;
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v53 + 160))(__p, v53);
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v57 + 40))(v57, __p);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v57 + 17) = 0;
            if (v72 < 0)
              operator delete(__p[0]);
            (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v53 + 112))(v53, v64);
          }
        }
      }
      else
      {
LABEL_69:
        if (v50)
          goto LABEL_70;
      }
      v58 = v74;
      if (v74)
      {
        v59 = (unint64_t *)&v74->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v33 = (_QWORD *)*v33;
    }
    while (v33);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v75);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v78);
  ImsResult::~ImsResult((ImsResult *)v64);
  v61 = v70;
  if (v70)
  {
    v62 = (unint64_t *)&v70->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
}

void sub_1BF0BB61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,char a28)
{
  uint64_t v28;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table(v28 - 128);
  ImsResult::~ImsResult((ImsResult *)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

SipMessageManager::OutgoingMessage *SipMessageManager::generateError(SipMessageManager *this, uint64_t a2, const ImsResult *a3)
{
  char *v6;
  char *v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  BOOL v11;
  char **v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  SipMessageManager::OutgoingMessage *result;
  uint64_t v21;
  std::string v22;

  v7 = (char *)this + 200;
  v6 = (char *)*((_QWORD *)this + 25);
  if (!v6)
    goto LABEL_12;
  v8 = *((_DWORD *)a3 + 4);
  v9 = (char *)this + 200;
  do
  {
    v10 = *((_DWORD *)v6 + 7);
    v11 = v10 >= v8;
    if (v10 >= v8)
      v12 = (char **)v6;
    else
      v12 = (char **)(v6 + 8);
    if (v11)
      v9 = v6;
    v6 = *v12;
  }
  while (*v12);
  if (v9 == v7 || v8 < *((_DWORD *)v9 + 7))
LABEL_12:
    v9 = (char *)this + 200;
  v13 = *((_QWORD *)this + 19);
  if (v13)
  {
    v14 = *((_QWORD *)this + 18);
    v15 = *(std::__shared_weak_count **)(v14 + 16);
    if (v15)
    {
      v16 = std::__shared_weak_count::lock(v15);
      if (v16)
      {
        v17 = *(_QWORD *)(v14 + 8);
LABEL_19:
        if (*(char *)(v17 + 4159) < 0)
          std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(v17 + 4136), *(_QWORD *)(v17 + 4144));
        else
          v22 = *(std::string *)(v17 + 4136);
        (*(void (**)(uint64_t, std::string *, uint64_t, const ImsResult *, BOOL))(*(_QWORD *)v13 + 32))(v13, &v22, a2, a3, v9 != v7);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        goto LABEL_29;
      }
    }
    else
    {
      v16 = 0;
    }
    v17 = 0;
    goto LABEL_19;
  }
LABEL_29:
  result = (SipMessageManager::OutgoingMessage *)*((_QWORD *)this + 27);
  if (result)
  {
    SipMessageManager::OutgoingMessage::~OutgoingMessage(result);
    result = (SipMessageManager::OutgoingMessage *)MEMORY[0x1C3B87100](v21, 0x1032C40BADE0BCALL);
  }
  *((_QWORD *)this + 27) = 0;
  return result;
}

void sub_1BF0BB8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipMessageManager::initialize(uint64_t a1, SipStack **a2)
{
  uint64_t v3;
  ImsPrefs *v4;
  void **FatalSmsErrorsKey;
  void *__p;
  uint64_t v7;
  uint64_t v8;

  v3 = a1;
  std::string::operator=((std::string *)(a1 + 224), (const std::string *)((char *)*a2 + 3736));
  std::string::operator=((std::string *)(v3 + 248), (const std::string *)((char *)*a2 + 3760));
  __p = 0;
  v7 = 0;
  v8 = 0;
  v4 = (ImsPrefs *)SipStack::prefs(*a2);
  FatalSmsErrorsKey = (void **)ImsPrefs::getFatalSmsErrorsKey(v4);
  ImsPrefs::stringValue(v4, FatalSmsErrorsKey);
  v3 += 192;
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)v3, &SipResponse::kStatusBadRequest, &SipResponse::kStatusBadRequest);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)v3, &SipResponse::kStatusNotFound, &SipResponse::kStatusNotFound);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)v3, &SipResponse::kStatusServerInternalError, &SipResponse::kStatusServerInternalError);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)v3, &SipResponse::kStatusBadGateway, &SipResponse::kStatusBadGateway);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)v3, &SipResponse::kStatusServiceUnavailable, &SipResponse::kStatusServiceUnavailable);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)v3, &SipResponse::kStatusNotImplemented, &SipResponse::kStatusNotImplemented);
}

void sub_1BF0BBA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  *(_QWORD *)(v18 - 40) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 40));
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t SipMessageManager::handleNewServerTransaction(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (!v3 || (v4 = *a2, v5 = *(_QWORD *)(a1 + 128), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v5 + 8;
  if (!v5)
    v7 = 0;
  v12 = v7;
  v13 = v6;
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v4 + 344), &v12);
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return 1;
}

void SipMessageManager::handleRequestError(SipMessageManager *this)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::string v8;

  v1 = *((_QWORD *)this + 19);
  if (!v1)
    return;
  v2 = *((_QWORD *)this + 18);
  v3 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v3)
  {
    v4 = 0;
    goto LABEL_6;
  }
  v4 = std::__shared_weak_count::lock(v3);
  if (!v4)
  {
LABEL_6:
    v5 = 0;
    goto LABEL_7;
  }
  v5 = *(_QWORD *)(v2 + 8);
LABEL_7:
  if (*(char *)(v5 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(v5 + 4136), *(_QWORD *)(v5 + 4144));
  else
    v8 = *(std::string *)(v5 + 4136);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v1 + 56))(v1, &v8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF0BBC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipMessageManager::handleRequest(uint64_t a1, const SipRequest *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::string::size_type v10;
  std::string::size_type v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  char v28;
  char v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  SipUri *v33;
  char *v34;
  char *v35;
  SipUri *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  ImsResult *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  const void *v49;
  size_t v50;
  size_t v51;
  _BYTE *v52;
  size_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  unsigned int v57;
  size_t v58;
  size_t v59;
  _BYTE *v60;
  size_t v61;
  char v62;
  _QWORD *v63;
  uint64_t v64;
  _BYTE *v65;
  unsigned __int8 *v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  __int128 *v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  std::string::size_type size;
  _QWORD *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  uint64_t **v81;
  uint64_t v82;
  SipHeader *v83;
  void **v84;
  uint64_t **v85;
  void **v86;
  void **v87;
  BOOL v88;
  uint64_t v89;
  _QWORD *v90;
  char *v92;
  __int128 *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  __int128 *v104;
  __int128 *v105;
  unint64_t *v106;
  unint64_t v107;
  SipUri *v108;
  char v109[72];
  _QWORD v110[9];
  _BYTE v111[32];
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  void *__p[2];
  uint64_t v117;
  char v118;
  char v119;
  char v120;
  char v121;
  void *v122;
  std::__shared_weak_count *v123;
  char v124;
  std::string v125;

  v6 = *(_QWORD *)(a1 + 152);
  if (!v6)
    goto LABEL_17;
  v7 = *(_QWORD *)(a1 + 144);
  *(_OWORD *)&v125.__r_.__value_.__l.__data_ = 0uLL;
  v8 = *(std::__shared_weak_count **)(v7 + 16);
  if (!v8)
  {
    v9 = 0;
    goto LABEL_6;
  }
  v9 = std::__shared_weak_count::lock(v8);
  v125.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  if (!v9)
  {
LABEL_6:
    v10 = 0;
    goto LABEL_7;
  }
  v10 = *(_QWORD *)(v7 + 8);
  v125.__r_.__value_.__r.__words[0] = v10;
LABEL_7:
  if (*(char *)(v10 + 4159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v111, *(const std::string::value_type **)(v10 + 4136), *(_QWORD *)(v10 + 4144));
  }
  else
  {
    v11 = v10 + 4136;
    *(_OWORD *)v111 = *(_OWORD *)v11;
    *(_QWORD *)&v111[16] = *(_QWORD *)(v11 + 16);
  }
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 48))(v6, v111);
  if ((v111[23] & 0x80000000) != 0)
    operator delete(*(void **)v111);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_17:
  v14 = a1 + 24;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Received SMS message request ", 29);
  *(_BYTE *)(v15 + 17) = 0;
  v16 = (char *)SipMessage::header<SipCallIdHeader>((uint64_t)a2);
  if (v16)
    v17 = (__int128 *)(v16 + 64);
  else
    v17 = &ims::kEmptyString;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v15 + 32))(v15, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" on stack ", 10);
  *(_BYTE *)(v15 + 17) = 0;
  v18 = *(_QWORD *)(a1 + 144);
  *(_OWORD *)&v125.__r_.__value_.__l.__data_ = 0uLL;
  v19 = *(std::__shared_weak_count **)(v18 + 16);
  if (v19)
  {
    v20 = std::__shared_weak_count::lock(v19);
    v125.__r_.__value_.__l.__size_ = (std::string::size_type)v20;
    if (v20)
    {
      v21 = *(_QWORD *)(v18 + 8);
      v125.__r_.__value_.__r.__words[0] = v21;
      goto LABEL_25;
    }
  }
  else
  {
    v20 = 0;
  }
  v21 = 0;
LABEL_25:
  if (*(char *)(v21 + 4159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v111, *(const std::string::value_type **)(v21 + 4136), *(_QWORD *)(v21 + 4144));
  }
  else
  {
    v22 = v21 + 4136;
    *(_OWORD *)v111 = *(_OWORD *)v22;
    *(_QWORD *)&v111[16] = *(_QWORD *)(v22 + 16);
  }
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v15 + 32))(v15, v111);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
  if ((v111[23] & 0x80000000) != 0)
    operator delete(*(void **)v111);
  if (v20)
  {
    v23 = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (*(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(a1 + 144)) + 1154)
    && !*(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(a1 + 144)) + 456))
  {
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 64))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(a1 + 24, v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)"Secondary device should not receive SMS.  Faking timeout.", 57);
    *(_BYTE *)(v39 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v39 + 17) = 0;
    v40 = (_QWORD *)*a3;
    std::string::basic_string[abi:ne180100]<0>(v111, "");
    SipServerTransaction::sendResponse(v40, 408, (std::string *)v111);
    v41 = (ImsResult *)&v121;
    goto LABEL_155;
  }
  v25 = *(_QWORD *)(a1 + 144);
  *(_OWORD *)v111 = 0uLL;
  v26 = *(std::__shared_weak_count **)(v25 + 16);
  if (v26)
  {
    v26 = std::__shared_weak_count::lock(v26);
    v27 = v26;
    *(_QWORD *)&v111[8] = v26;
    if (v26)
    {
      v26 = *(std::__shared_weak_count **)(v25 + 8);
      *(_QWORD *)v111 = v26;
    }
  }
  else
  {
    v27 = 0;
  }
  v28 = SipStack::registeredForSms((SipStack *)v26);
  v29 = v28;
  if (v27)
  {
    v30 = (unint64_t *)&v27->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if ((v29 & 1) != 0)
        goto LABEL_46;
LABEL_58:
      v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(a1 + 24);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(a1 + 24, v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)"not registered for SMS.  Rejecting incoming message.", 52);
      *(_BYTE *)(v42 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v42 + 17) = 0;
      v43 = (_QWORD *)*a3;
      std::string::basic_string[abi:ne180100]<0>(v111, "");
      SipServerTransaction::sendResponse(v43, 488, (std::string *)v111);
      v41 = (ImsResult *)&v120;
      goto LABEL_155;
    }
  }
  if ((v28 & 1) == 0)
    goto LABEL_58;
LABEL_46:
  v32 = SipUserAgent::config(*(SipUserAgent **)(a1 + 144));
  v33 = SipRequest::bestSenderIdentity((uint64_t)a2, *(_DWORD *)(v32 + 804));
  v34 = SipMessage::assertedIdentity((uint64_t)a2, 1);
  v35 = (char *)SipMessage::header<SipToHeader>((uint64_t)a2);
  v36 = (SipUri *)(v35 + 104);
  if (v35)
    v37 = v35 + 104;
  else
    v37 = 0;
  if (v35)
  {
    v38 = v35;
    if (!*(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(a1 + 144)) + 918) || !*(_QWORD *)(a1 + 152))
      goto LABEL_127;
    if (!SipUri::isValidUri(v36))
    {
      std::string::basic_string[abi:ne180100]<0>(v111, "sms");
      std::string::basic_string[abi:ne180100]<0>(&v125, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v46 = ImsLogger::error(ims::_logger, (uint64_t)v111, (uint64_t)&v125);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v46 + 8), (uint64_t)"Failed to validate recipient for MT SMS- Invalid URI", 52);
      *(_BYTE *)(v46 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v46 + 17) = 0;
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v125.__r_.__value_.__l.__data_);
      if ((v111[23] & 0x80000000) != 0)
        operator delete(*(void **)v111);
LABEL_154:
      v89 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(a1 + 24);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(a1 + 24, v89);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v89 + 8), (uint64_t)"incoming Message not destined for UE. Intended Recipient:", 57);
      *(_BYTE *)(v89 + 17) = 0;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v37 + 40))(v37, v89);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v89 + 64))(v89, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v89 + 17) = 0;
      v90 = (_QWORD *)*a3;
      std::string::basic_string[abi:ne180100]<0>(v111, "");
      SipServerTransaction::sendResponse(v90, 404, (std::string *)v111);
      v41 = (ImsResult *)&v118;
      goto LABEL_155;
    }
    if (*(char *)(a1 + 247) < 0)
    {
      if (!*(_QWORD *)(a1 + 232))
        goto LABEL_127;
    }
    else if (!*(_BYTE *)(a1 + 247))
    {
      goto LABEL_127;
    }
    v47 = *(char *)(a1 + 271);
    if (v47 < 0)
      v48 = *(_QWORD *)(a1 + 256);
    else
      v48 = *(unsigned __int8 *)(a1 + 271);
    if (!v48)
      goto LABEL_127;
    memset(v111, 0, 24);
    if (v38[255] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v111, *((const std::string::value_type **)v38 + 29), *((_QWORD *)v38 + 30));
      LOBYTE(v47) = *(_BYTE *)(a1 + 271);
    }
    else
    {
      *(_OWORD *)v111 = *(_OWORD *)(v38 + 232);
      *(_QWORD *)&v111[16] = *((_QWORD *)v38 + 31);
    }
    v108 = v33;
    if ((v47 & 0x80) != 0)
    {
      v49 = *(const void **)(a1 + 248);
      v50 = *(_QWORD *)(a1 + 256);
    }
    else
    {
      v49 = (const void *)(a1 + 248);
      v50 = v47;
    }
    if (v111[23] >= 0)
      v51 = v111[23];
    else
      v51 = *(_QWORD *)&v111[8];
    if (v111[23] >= 0)
      v52 = v111;
    else
      v52 = *(_BYTE **)v111;
    if (v51 >= v50)
      v53 = v50;
    else
      v53 = v51;
    if (!memcmp(v49, v52, v53) && v51 == v50)
    {
      std::string::basic_string[abi:ne180100]<0>(&v125, "sms");
      std::string::basic_string[abi:ne180100]<0>(&v122, "");
      v33 = v108;
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v54 = ImsLogger::debug(ims::_logger, (uint64_t)&v125, (uint64_t)&v122);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)"Validated recipient for MT SMS - IMSI match", 43);
      *(_BYTE *)(v54 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_108:
      *(_BYTE *)(v54 + 17) = 0;
      if (v124 < 0)
        operator delete(v122);
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v125.__r_.__value_.__l.__data_);
      v62 = 1;
      goto LABEL_124;
    }
    if (SipUri::isTelUri(v36))
    {
      SipUri::normalizedPhoneNumber(v36, &v125);
      if ((v111[23] & 0x80000000) != 0)
        operator delete(*(void **)v111);
      *(std::string *)v111 = v125;
    }
    v55 = (_QWORD *)(a1 + 224);
    if (*(char *)(a1 + 247) < 0)
    {
      v56 = *(_QWORD *)(a1 + 232);
      if (v56 < 4)
      {
        v57 = v111[23];
        v58 = *(_QWORD *)&v111[8];
        v55 = (_QWORD *)*v55;
LABEL_96:
        if ((v57 & 0x80u) == 0)
          v59 = v57;
        else
          v59 = v58;
        if ((v57 & 0x80u) == 0)
          v60 = v111;
        else
          v60 = *(_BYTE **)v111;
        if (v59 >= v56)
          v61 = v56;
        else
          v61 = v59;
        if (memcmp(v55, v60, v61) || v59 != v56)
        {
LABEL_119:
          std::string::basic_string[abi:ne180100]<0>(&v125, "sms");
          std::string::basic_string[abi:ne180100]<0>(&v122, "");
          v33 = v108;
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v70 = ImsLogger::error(ims::_logger, (uint64_t)&v125, (uint64_t)&v122);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v70 + 8), (uint64_t)"Failed to validate recipient for MT SMS - MDN mismatch", 54);
          *(_BYTE *)(v70 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v70 + 64))(v70, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v70 + 17) = 0;
          if (v124 < 0)
            operator delete(v122);
          if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v125.__r_.__value_.__l.__data_);
          v62 = 0;
LABEL_124:
          if ((v111[23] & 0x80000000) != 0)
            operator delete(*(void **)v111);
          if ((v62 & 1) != 0)
          {
LABEL_127:
            memset(&v125, 0, sizeof(v125));
            v71 = *((_QWORD *)a2 + 9);
            if (v71)
              v72 = (__int128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 40))(v71);
            else
              v72 = &SipBody::kGenericContentType;
            if (*((char *)v72 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)v72, *((_QWORD *)v72 + 1));
            }
            else
            {
              v73 = *v72;
              v125.__r_.__value_.__r.__words[2] = *((_QWORD *)v72 + 2);
              *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v73;
            }
            v74 = SipUserAgent::config(*(SipUserAgent **)(a1 + 144));
            v75 = v74;
            if (*(_QWORD *)(v74 + 1144))
            {
              size = HIBYTE(v125.__r_.__value_.__r.__words[2]);
              if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                size = v125.__r_.__value_.__l.__size_;
              if (!size
                || (void **)(v74 + 1136) == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v74 + 1128, (void **)&v125.__r_.__value_.__l.__data_))
              {
                v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(a1 + 24);
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(a1 + 24, v82);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v82 + 8), (uint64_t)"unsupported SMS content type ", 29);
                *(_BYTE *)(v82 + 17) = 0;
                (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v82 + 32))(v82, &v125);
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v82 + 64))(v82, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(_BYTE *)(v82 + 17) = 0;
                v117 = 0;
                v115 = 0u;
                *(_OWORD *)__p = 0u;
                v113 = 0u;
                v114 = 0u;
                v112 = 0u;
                memset(v111, 0, sizeof(v111));
                SipResponse::SipResponse((SipResponse *)v111, 415, a2);
                v83 = SipMessage::header<SipAcceptHeader>((SipMessage *)v111, 1);
                v84 = *(void ***)(v75 + 1128);
                if (v84 != (void **)(v75 + 1136))
                {
                  v85 = (uint64_t **)((char *)v83 + 64);
                  do
                  {
                    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v85, v84 + 4, (uint64_t)(v84 + 4));
                    v86 = (void **)v84[1];
                    if (v86)
                    {
                      do
                      {
                        v87 = v86;
                        v86 = (void **)*v86;
                      }
                      while (v86);
                    }
                    else
                    {
                      do
                      {
                        v87 = (void **)v84[2];
                        v88 = *v87 == v84;
                        v84 = v87;
                      }
                      while (!v88);
                    }
                    v84 = v87;
                  }
                  while (v87 != (void **)(v75 + 1136));
                }
                (*(void (**)(_QWORD *__return_ptr, _QWORD, _BYTE *, uint64_t))(*(_QWORD *)*a3 + 168))(v110, *a3, v111, 1);
                ImsResult::~ImsResult((ImsResult *)v110);
                SipMessageManager::handleRequestError((SipMessageManager *)a1);
                *(_QWORD *)v111 = off_1E78E40E8;
                if (SHIBYTE(v117) < 0)
                  operator delete(__p[0]);
                SipMessage::~SipMessage((SipMessage *)v111);
                goto LABEL_191;
              }
            }
            v77 = (_QWORD *)*a3;
            std::string::basic_string[abi:ne180100]<0>(v111, "");
            SipServerTransaction::sendResponse(v77, 200, (std::string *)v111);
            ImsResult::~ImsResult((ImsResult *)v109);
            if ((v111[23] & 0x80000000) != 0)
              operator delete(*(void **)v111);
            v78 = *(_QWORD *)(a1 + 144);
            *(_OWORD *)v111 = 0uLL;
            v79 = *(std::__shared_weak_count **)(v78 + 16);
            if (v79)
            {
              v80 = std::__shared_weak_count::lock(v79);
              *(_QWORD *)&v111[8] = v80;
              if (v80)
              {
                v81 = *(uint64_t ***)(v78 + 8);
                *(_QWORD *)v111 = v81;
                goto LABEL_161;
              }
            }
            else
            {
              v80 = 0;
            }
            v81 = 0;
LABEL_161:
            v92 = (char *)SipMessage::header<SipCallIdHeader>((uint64_t)a2);
            if (v92)
              v93 = (__int128 *)(v92 + 64);
            else
              v93 = &ims::kEmptyString;
            SipStack::saveEmergencyMessageCallId(v81, v93);
            if (v80)
            {
              v94 = (unint64_t *)&v80->__shared_owners_;
              do
                v95 = __ldaxr(v94);
              while (__stlxr(v95 - 1, v94));
              if (!v95)
              {
                ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                std::__shared_weak_count::__release_weak(v80);
              }
            }
            v96 = *(_QWORD *)(a1 + 152);
            if (!v96)
              goto LABEL_191;
            v97 = *(_QWORD *)(a1 + 144);
            v122 = 0;
            v123 = 0;
            v98 = *(std::__shared_weak_count **)(v97 + 16);
            if (v98)
            {
              v99 = std::__shared_weak_count::lock(v98);
              v123 = v99;
              if (v99)
              {
                v100 = *(_QWORD *)(v97 + 8);
                v122 = (void *)v100;
LABEL_175:
                if (*(char *)(v100 + 4159) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v111, *(const std::string::value_type **)(v100 + 4136), *(_QWORD *)(v100 + 4144));
                }
                else
                {
                  v101 = v100 + 4136;
                  *(_OWORD *)v111 = *(_OWORD *)v101;
                  *(_QWORD *)&v111[16] = *(_QWORD *)(v101 + 16);
                }
                v102 = (char *)SipMessage::header<SipCallIdHeader>((uint64_t)a2);
                v103 = (char *)SipMessage::header<SipInReplyToContributionIdHeader>((uint64_t)a2);
                if (v102)
                  v104 = (__int128 *)(v102 + 64);
                else
                  v104 = &ims::kEmptyString;
                if (v103)
                  v105 = (__int128 *)(v103 + 64);
                else
                  v105 = &ims::kEmptyString;
                (*(void (**)(uint64_t, _BYTE *, SipUri *, char *, __int128 *, __int128 *, _QWORD))(*(_QWORD *)v96 + 16))(v96, v111, v33, v34, v104, v105, *((_QWORD *)a2 + 9));
                if ((v111[23] & 0x80000000) != 0)
                  operator delete(*(void **)v111);
                if (v99)
                {
                  v106 = (unint64_t *)&v99->__shared_owners_;
                  do
                    v107 = __ldaxr(v106);
                  while (__stlxr(v107 - 1, v106));
                  if (!v107)
                  {
                    ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                    std::__shared_weak_count::__release_weak(v99);
                  }
                }
LABEL_191:
                if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v125.__r_.__value_.__l.__data_);
                return 1;
              }
            }
            else
            {
              v99 = 0;
            }
            v100 = 0;
            goto LABEL_175;
          }
          goto LABEL_154;
        }
        goto LABEL_107;
      }
      v55 = (_QWORD *)*v55;
    }
    else
    {
      v56 = *(unsigned __int8 *)(a1 + 247);
      if (*(unsigned __int8 *)(a1 + 247) <= 3u)
      {
        v57 = v111[23];
        v58 = *(_QWORD *)&v111[8];
        goto LABEL_96;
      }
    }
    v63 = (_QWORD *)((char *)v55 + v56);
    v64 = v111[23];
    v65 = v111;
    if (v111[23] < 0)
    {
      v64 = *(_QWORD *)&v111[8];
      v65 = *(_BYTE **)v111;
    }
    v66 = &v65[v64 - 1];
    while (v63 != (_QWORD *)((char *)v55 + v56 - 4))
    {
      v68 = *((unsigned __int8 *)v63 - 1);
      v63 = (_QWORD *)((char *)v63 - 1);
      v67 = v68;
      v69 = *v66--;
      if (v67 != v69)
        goto LABEL_119;
    }
LABEL_107:
    std::string::basic_string[abi:ne180100]<0>(&v125, "sms");
    std::string::basic_string[abi:ne180100]<0>(&v122, "");
    v33 = v108;
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v54 = ImsLogger::debug(ims::_logger, (uint64_t)&v125, (uint64_t)&v122);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)"Validated recipient for MT SMS - MDN match", 42);
    *(_BYTE *)(v54 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_108;
  }
  v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(a1 + 24, v44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"incoming Message missing To: header.", 36);
  *(_BYTE *)(v44 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v44 + 17) = 0;
  v45 = (_QWORD *)*a3;
  std::string::basic_string[abi:ne180100]<0>(v111, "Missing To header");
  SipServerTransaction::sendResponse(v45, 400, (std::string *)v111);
  v41 = (ImsResult *)&v119;
LABEL_155:
  ImsResult::~ImsResult(v41);
  if ((v111[23] & 0x80000000) != 0)
    operator delete(*(void **)v111);
  SipMessageManager::handleRequestError((SipMessageManager *)a1);
  return 1;
}

void sub_1BF0BCA50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (*(char *)(v34 - 89) < 0)
    operator delete(*(void **)(v34 - 112));
  if (a34 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'SipMessageManager::handleRequest(uint64_t a1, const SipRequest *a2, _QWORD *a3)
{
  SipMessageManager::handleRequest(a1 - 8, a2, a3);
  return 1;
}

void SipMessageManager::processSendQueue(SipMessageManager *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  _BOOL4 isRegistrationLimitedAccess;
  _BOOL4 v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ImsPowerAssertion *v17;
  uint64_t v18;
  int v19;
  _BYTE v20[72];
  void (**v21)(ImsResult *__hidden);
  uint64_t *v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  if (!*((_QWORD *)this + 27))
  {
    v2 = (char *)this + 24;
    v3 = *((_QWORD *)this + 23);
    v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 64))((char *)this + 24);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v4);
    v5 = *(_QWORD **)(v4 + 8);
    if (!v3)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"send queue is empty", 19);
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v4 + 17) = 0;
      return;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"processing send queue", 21);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    v6 = (uint64_t *)*((_QWORD *)this + 22);
    *((_QWORD *)this + 27) = v6[2];
    v7 = *v6;
    *(_QWORD *)(v7 + 8) = v6[1];
    *(_QWORD *)v6[1] = v7;
    --*((_QWORD *)this + 23);
    operator delete(v6);
    v8 = *((_QWORD *)this + 18);
    v21 = 0;
    v22 = 0;
    v9 = *(std::__shared_weak_count **)(v8 + 16);
    if (v9)
    {
      v9 = std::__shared_weak_count::lock(v9);
      v10 = v9;
      v22 = (uint64_t *)v9;
      if (v9)
      {
        v9 = *(std::__shared_weak_count **)(v8 + 8);
        v21 = (void (**)(ImsResult *__hidden))v9;
      }
    }
    else
    {
      v10 = 0;
    }
    isRegistrationLimitedAccess = SipStack::isRegistrationLimitedAccess((SipStack *)v9);
    v12 = isRegistrationLimitedAccess;
    if (!v10)
      goto LABEL_12;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (v12)
        goto LABEL_13;
    }
    else
    {
LABEL_12:
      if (isRegistrationLimitedAccess)
      {
LABEL_13:
        v15 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 64))(v2);
        (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 3) + 16))(v2, v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Dropping message in Limited Access mode", 39);
        *(_BYTE *)(v15 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v15 + 17) = 0;
        v16 = *(unsigned int *)(*((_QWORD *)this + 27) + 16);
        v24 = 0u;
        v25 = 0u;
        v26 = 0u;
        v21 = &off_1E78B7238;
        v22 = &SipResultDomain::_domain;
        v23 = 503;
        SipMessageManager::generateError(this, v16, (const ImsResult *)&v21);
        ImsResult::~ImsResult((ImsResult *)&v21);
        return;
      }
    }
    v17 = (ImsPowerAssertion *)(*((_QWORD *)this + 27) + 56);
    v18 = SipUserAgent::config(*((SipUserAgent **)this + 18));
    v19 = SipTimers::timerValue((SipTimers *)(v18 + 512), (const SipTimer *)&SipTimers::kTimerF, 0);
    ImsPowerAssertion::initialize(v17, (double)(v19 + 30), 0, (uint64_t)v20);
    ImsResult::~ImsResult((ImsResult *)v20);
    SipMessageManager::OutgoingMessage::send(*((SipMessageManager::OutgoingMessage **)this + 27));
  }
}

void sub_1BF0BCE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void SipMessageManager::handleAuthChallengeResponse(SipMessageManager *this, const SipAuthInfo *a2)
{
  SipRequest **v3;
  char *v4;
  uint64_t v5;
  _BYTE v6[72];

  v3 = (SipRequest **)*((_QWORD *)this + 27);
  if (v3 && *((_BYTE *)v3 + 48))
  {
    SipAuthClient::addAuthorizationToRequest(*(SipAuthClient **)(*((_QWORD *)*v3 + 18) + 280), v3[3], 1, (uint64_t)v6);
    ImsResult::~ImsResult((ImsResult *)v6);
    SipMessageManager::OutgoingMessage::send((SipMessageManager::OutgoingMessage *)v3);
  }
  else
  {
    v4 = (char *)this + 24;
    v5 = (*(uint64_t (**)(char *, const SipAuthInfo *))(*((_QWORD *)this + 3) + 56))((char *)this + 24, a2);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))((char *)this + 24, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"received unexpected auth response.  Ignoring it, but checking queue.", 68);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    SipMessageManager::processSendQueue(this);
  }
}

void `non-virtual thunk to'SipMessageManager::handleAuthChallengeResponse(SipMessageManager *this, const SipAuthInfo *a2)
{
  SipMessageManager::handleAuthChallengeResponse((SipMessageManager *)((char *)this - 16), a2);
}

void SipMessageManager::handleAuthChallengeTimeout(SipMessageManager *this, const SipAuthInfo *a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v9[2];
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v3 = *((_QWORD *)this + 27);
  if (v3 && *(_BYTE *)(v3 + 48))
  {
    v4 = (char *)this + 24;
    v5 = (*(uint64_t (**)(char *, const SipAuthInfo *))(*((_QWORD *)this + 3) + 56))((char *)this + 24, a2);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))((char *)this + 24, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"auth challenge timed out.  Failing current message.", 51);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    v6 = *(unsigned int *)(*((_QWORD *)this + 27) + 16);
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v9[0] = &off_1E78B7238;
    v9[1] = &SipResultDomain::_domain;
    v10 = 401;
    SipMessageManager::generateError(this, v6, (const ImsResult *)v9);
    ImsResult::~ImsResult((ImsResult *)v9);
    SipMessageManager::processSendQueue(this);
  }
  else
  {
    v7 = (char *)this + 24;
    v8 = (*(uint64_t (**)(char *, const SipAuthInfo *))(*((_QWORD *)this + 3) + 56))((char *)this + 24, a2);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v7 + 16))((char *)this + 24, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"received unexpected auth challenge timeout.  Ignoring it, but checking queue.", 77);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    SipMessageManager::processSendQueue(this);
  }
}

void sub_1BF0BD07C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipMessageManager::handleAuthChallengeTimeout(SipMessageManager *this, const SipAuthInfo *a2)
{
  SipMessageManager::handleAuthChallengeTimeout((SipMessageManager *)((char *)this - 16), a2);
}

uint64_t SipMessageManager::handleResponse(SipMessageManager *this, const SipResponse *a2, _QWORD *a3)
{
  uint64_t v3;
  unsigned int v6;
  std::__shared_weak_count *size;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::string __p[3];
  uint64_t v21;
  std::__shared_weak_count *v22;

  v3 = *((_QWORD *)this + 27);
  if (!v3)
    return 1;
  if (*a3 != *(_QWORD *)(v3 + 32))
    return 1;
  v6 = *((_DWORD *)a2 + 22);
  if (v6 - 100 < 0x64)
    return 1;
  if (v6 != 401)
  {
    if (v6 - 200 > 0x63)
    {
      if (v6 < 0x12C)
      {
LABEL_36:
        SipMessageManager::processSendQueue(this);
        return 1;
      }
      goto LABEL_19;
    }
    v11 = *((_QWORD *)this + 19);
    if (!v11)
    {
LABEL_34:
      SipMessageManager::OutgoingMessage::~OutgoingMessage((SipMessageManager::OutgoingMessage *)v3);
      MEMORY[0x1C3B87100]();
LABEL_35:
      *((_QWORD *)this + 27) = 0;
      goto LABEL_36;
    }
    v12 = *((_QWORD *)this + 18);
    v21 = 0;
    v22 = 0;
    v13 = *(std::__shared_weak_count **)(v12 + 16);
    if (v13)
    {
      v14 = std::__shared_weak_count::lock(v13);
      v22 = v14;
      if (v14)
      {
        v15 = *(_QWORD *)(v12 + 8);
        v21 = v15;
        goto LABEL_23;
      }
    }
    else
    {
      v14 = 0;
    }
    v15 = 0;
LABEL_23:
    if (*(char *)(v15 + 4159) < 0)
      std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)(v15 + 4136), *(_QWORD *)(v15 + 4144));
    else
      __p[0] = *(std::string *)(v15 + 4136);
    (*(void (**)(uint64_t, std::string *, _QWORD))(*(_QWORD *)v11 + 40))(v11, __p, *(unsigned int *)(*((_QWORD *)this + 27) + 16));
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v3 = *((_QWORD *)this + 27);
    if (!v3)
      goto LABEL_35;
    goto LABEL_34;
  }
  if (*(_DWORD *)(v3 + 52) > 1u)
  {
LABEL_19:
    v16 = *(unsigned int *)(v3 + 16);
    SipResultDomain::makeResult(a2, (uint64_t)__p);
    SipMessageManager::generateError(this, v16, (const ImsResult *)__p);
    goto LABEL_20;
  }
  *(_BYTE *)(v3 + 48) = 1;
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](v3 + 32, (__int128 *)__p);
  size = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
  if (__p[0].__r_.__value_.__l.__size_)
  {
    v8 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  ++*(_DWORD *)(v3 + 52);
  if ((SipAuthClient::handleUnauthorizedResponse(*(SipAuthClient **)(*((_QWORD *)this + 18) + 280), a2, (SipMessageManager *)((char *)this + 16)) & 1) == 0)
  {
    v10 = *(unsigned int *)(*((_QWORD *)this + 27) + 16);
    SipResultDomain::makeResult(a2, (uint64_t)__p);
    SipMessageManager::generateError(this, v10, (const ImsResult *)__p);
LABEL_20:
    ImsResult::~ImsResult((ImsResult *)__p);
    goto LABEL_36;
  }
  return 1;
}

void sub_1BF0BD2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v14 - 48);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'SipMessageManager::handleResponse(uint64_t a1, const SipResponse *a2, _QWORD *a3)
{
  SipMessageManager::handleResponse((SipMessageManager *)(a1 - 8), a2, a3);
  return 1;
}

void SipMessageManager::deferError(uint64_t a1, int a2, const ImsResult *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[5];
  _DWORD v9[20];

  v6 = a1 + 24;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"deferring error: ", 17);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(const ImsResult *, uint64_t))(*(_QWORD *)a3 + 16))(a3, v7);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN17SipMessageManager10deferErrorEj9ImsResult_block_invoke;
  v8[3] = &__block_descriptor_tmp_36;
  v8[4] = a1;
  v9[18] = a2;
  ImsResult::ImsResult((ImsResult *)v9, a3);
  ims::performBlock((IMSClientManager *)v8);
  ImsResult::~ImsResult((ImsResult *)v9);
}

void sub_1BF0BD44C(_Unwind_Exception *a1)
{
  ImsResult *v1;

  ImsResult::~ImsResult(v1);
  _Unwind_Resume(a1);
}

void SipMessageManager::handleTransactionError(SipMessageManager *a1, const ImsResult *a2, uint64_t a3)
{
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  if (*(_QWORD *)a3
  {
    v7 = *(std::__shared_weak_count **)(a3 + 8);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v10 = *((_QWORD *)a1 + 27);
  if (v10 && v6 == *(void **)(v10 + 32))
    SipMessageManager::generateError(a1, *(unsigned int *)(v10 + 16), a2);
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1BF0BD564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipMessageManager::handleTransactionError(uint64_t a1, const ImsResult *a2, uint64_t a3)
{
  SipMessageManager::handleTransactionError((SipMessageManager *)(a1 - 8), a2, a3);
}

void SipMessageManager::transactionTerminated(SipMessageManager::OutgoingMessage **a1, uint64_t a2)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  SipMessageManager::OutgoingMessage *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (*(_QWORD *)a2
  {
    v5 = *(std::__shared_weak_count **)(a2 + 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v8 = a1[27];
  if (v8 && v4 == *((void **)v8 + 4))
  {
    SipMessageManager::OutgoingMessage::~OutgoingMessage(a1[27]);
    MEMORY[0x1C3B87100](v9, 0x1032C40BADE0BCALL);
    a1[27] = 0;
    SipMessageManager::processSendQueue((SipMessageManager *)a1);
  }
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BF0BD684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipMessageManager::transactionTerminated(uint64_t a1, uint64_t a2)
{
  SipMessageManager::transactionTerminated((SipMessageManager::OutgoingMessage **)(a1 - 8), a2);
}

uint64_t SipMessageManager::send(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  _BOOL4 isWifi;
  SipRequest *RequestFromTemplate;
  unint64_t *p_shared_owners;
  unint64_t v14;
  SipHeader *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  ImsPrefs *v19;
  void **UseAoRForSmsSenderIdentityKey;
  void *v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  SipUserAgent *v25;
  uint64_t v26;
  SipHeader *v27;
  SipHeader *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  ImsPrefs *v34;
  void **AddGeolocationSupportedHeaderKey;
  void *v36;
  int v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  SipHeader *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  void *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  void *__p;
  std::__shared_weak_count *v70;
  char v71;
  std::string __str;

  v8 = *(_QWORD *)(a1 + 144);
  v9 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v8 + 16));
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  __str.__r_.__value_.__r.__words[0] = *(_QWORD *)(v8 + 8);
  v10 = *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 144);
  isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(__str.__r_.__value_.__r.__words[0] + 3136));
  RequestFromTemplate = SipMessageEncodingMap::createRequestFromTemplate((SipMessageEncodingMap *)(v10 + 288), (const std::string *)"MESSAGE", isWifi, *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + 176));
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  SipUri::operator=((SipRequest *)((char *)RequestFromTemplate + 112), a2);
  ImsRandomStringGenerator::randomString((ImsRandomStringGenerator *)(*(_QWORD *)(a1 + 144) + 592), 24, &__str);
  v15 = SipMessage::header<SipCallIdHeader>(RequestFromTemplate, 1);
  std::string::operator=((std::string *)((char *)v15 + 64), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v16 = *(_QWORD *)(a1 + 144);
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
  v17 = *(std::__shared_weak_count **)(v16 + 16);
  if (v17)
  {
    v17 = std::__shared_weak_count::lock(v17);
    v18 = v17;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
    if (v17)
    {
      v17 = *(std::__shared_weak_count **)(v16 + 8);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    }
  }
  else
  {
    v18 = 0;
  }
  v19 = (ImsPrefs *)SipStack::prefs((SipStack *)v17);
  UseAoRForSmsSenderIdentityKey = (void **)ImsPrefs::getUseAoRForSmsSenderIdentityKey(v19);
  v21 = ImsPrefs::prefWithKey(v19, UseAoRForSmsSenderIdentityKey);
  if (v21)
  {
    v22 = (*(uint64_t (**)(void *))(*(_QWORD *)v21 + 40))(v21);
    if (!v18)
      goto LABEL_19;
  }
  else
  {
    v22 = *((_BYTE *)UseAoRForSmsSenderIdentityKey + 57) != 0;
    if (!v18)
      goto LABEL_19;
  }
  v23 = (unint64_t *)&v18->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_19:
  v25 = *(SipUserAgent **)(a1 + 144);
  if (v22)
    v26 = *((_QWORD *)v25 + 31) + 1184;
  else
    v26 = SipUserAgent::publicUri(v25);
  v27 = SipMessage::header<SipFromHeader>(RequestFromTemplate, 1);
  SipUri::operator=((SipHeader *)((char *)v27 + 104), v26);
  v28 = SipMessage::header<SipToHeader>(RequestFromTemplate, 1);
  SipUri::operator=((SipHeader *)((char *)v28 + 104), a2);
  v29 = (const void *)*((_QWORD *)RequestFromTemplate + 9);
  if (v29 != a4)
  {
    if (v29)
      (*(void (**)(const void *))(*(_QWORD *)v29 + 8))(v29);
    *((_QWORD *)RequestFromTemplate + 9) = a4;
  }
  if (a4
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "Geolocation");
    v30 = SipUserAgent::publicUri(*(SipUserAgent **)(a1 + 144));
    SipUri::asString(v30, 0, &__p);
    SipMessage::addHeader(RequestFromTemplate, (uint64_t)&__str, (uint64_t)&__p, 0);
    if (v71 < 0)
      operator delete(__p);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__str, "Geolocation-Routing");
    std::string::basic_string[abi:ne180100]<0>(&__p, "yes");
    SipMessage::addHeader(RequestFromTemplate, (uint64_t)&__str, (uint64_t)&__p, 0);
    if (v71 < 0)
      operator delete(__p);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v31 = *(_QWORD *)(a1 + 144);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
    v32 = *(std::__shared_weak_count **)(v31 + 16);
    if (v32)
    {
      v32 = std::__shared_weak_count::lock(v32);
      v33 = v32;
      __str.__r_.__value_.__l.__size_ = (std::string::size_type)v32;
      if (v32)
      {
        v32 = *(std::__shared_weak_count **)(v31 + 8);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
      }
    }
    else
    {
      v33 = 0;
    }
    v34 = (ImsPrefs *)SipStack::prefs((SipStack *)v32);
    AddGeolocationSupportedHeaderKey = (void **)ImsPrefs::getAddGeolocationSupportedHeaderKey(v34);
    v36 = ImsPrefs::prefWithKey(v34, AddGeolocationSupportedHeaderKey);
    if (v36)
    {
      v37 = (*(uint64_t (**)(void *))(*(_QWORD *)v36 + 40))(v36);
      if (!v33)
        goto LABEL_47;
    }
    else
    {
      v37 = *((_BYTE *)AddGeolocationSupportedHeaderKey + 57) != 0;
      if (!v33)
        goto LABEL_47;
    }
    v38 = (unint64_t *)&v33->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
      if (!v37)
        goto LABEL_51;
      goto LABEL_48;
    }
LABEL_47:
    if (!v37)
      goto LABEL_51;
LABEL_48:
    std::string::basic_string[abi:ne180100]<0>(&__str, "geolocation");
    SipMessage::addSupportedOption(RequestFromTemplate, (void **)&__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_51:
  v40 = *(unsigned __int8 *)(a3 + 23);
  if ((v40 & 0x80u) != 0)
    v40 = *(_QWORD *)(a3 + 8);
  if (v40)
    SipMessage::addHeader(RequestFromTemplate, (uint64_t)"In-Reply-To", a3, 0);
  std::string::basic_string[abi:ne180100]<0>(&__str, "no-fork");
  SipMessage::addHeader(RequestFromTemplate, (uint64_t)"Request-Disposition", (uint64_t)&__str, 0);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(a1 + 144)) + 547))
  {
    v41 = SipMessage::header<SipAcceptContactHeader>(RequestFromTemplate, 1);
    v42 = SipUserAgent::config(*(SipUserAgent **)(a1 + 144));
    SipAcceptContactHeader::addValueWithServiceMaskAndParams(v41, (BambiServices *)4, (const SipParameterMap *)(v42 + 552));
  }
  v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24, v43);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v43 + 8), (uint64_t)"Queuing SMS message request ", 28);
  *(_BYTE *)(v43 + 17) = 0;
  v44 = (char *)SipMessage::header<SipCallIdHeader>((uint64_t)RequestFromTemplate);
  if (v44)
    v45 = (__int128 *)(v44 + 64);
  else
    v45 = &ims::kEmptyString;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v43 + 32))(v43, v45);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v43 + 8), (uint64_t)" on stack ", 10);
  *(_BYTE *)(v43 + 17) = 0;
  v46 = *(_QWORD *)(a1 + 144);
  __p = 0;
  v70 = 0;
  v47 = *(std::__shared_weak_count **)(v46 + 16);
  if (v47)
  {
    v48 = std::__shared_weak_count::lock(v47);
    v70 = v48;
    if (v48)
    {
      v49 = *(_QWORD *)(v46 + 8);
      __p = (void *)v49;
      goto LABEL_67;
    }
  }
  else
  {
    v48 = 0;
  }
  v49 = 0;
LABEL_67:
  if (*(char *)(v49 + 4159) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v49 + 4136), *(_QWORD *)(v49 + 4144));
  else
    __str = *(std::string *)(v49 + 4136);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v43 + 32))(v43, &__str);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v43 + 17) = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v48)
  {
    v50 = (unint64_t *)&v48->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v52 = *(unsigned int *)(a1 + 164);
  *(_DWORD *)(a1 + 164) = v52 + 1;
  v53 = operator new();
  v54 = *(std::__shared_weak_count **)(a1 + 136);
  __p = *(void **)(a1 + 128);
  if (!v54)
  {
    v70 = 0;
LABEL_96:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v70 = std::__shared_weak_count::lock(v54);
  if (!v70)
    goto LABEL_96;
  *(_DWORD *)(v53 + 52) = 0;
  *(_QWORD *)v53 = 0;
  *(_QWORD *)(v53 + 8) = 0;
  *(_DWORD *)(v53 + 16) = 0;
  *(_QWORD *)(v53 + 32) = 0;
  *(_QWORD *)(v53 + 40) = 0;
  *(_QWORD *)(v53 + 24) = 0;
  *(_BYTE *)(v53 + 48) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "com.apple.ipTelephony.sms");
  ImsPowerAssertion::ImsPowerAssertion(v53 + 56, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v56 = __p;
  v55 = v70;
  if (v70)
  {
    v57 = (unint64_t *)&v70->__shared_owners_;
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  v59 = *(std::__shared_weak_count **)(v53 + 8);
  *(_QWORD *)v53 = v56;
  *(_QWORD *)(v53 + 8) = v55;
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  *(_DWORD *)(v53 + 16) = v52;
  *(_QWORD *)(v53 + 24) = RequestFromTemplate;
  v62 = operator new(0x18uLL);
  v62[1] = a1 + 168;
  v62[2] = v53;
  v63 = *(_QWORD *)(a1 + 168);
  *v62 = v63;
  *(_QWORD *)(v63 + 8) = v62;
  *(_QWORD *)(a1 + 168) = v62;
  ++*(_QWORD *)(a1 + 184);
  v64 = v70;
  if (v70)
  {
    v65 = (unint64_t *)&v70->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24, v67);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v67 + 8), (uint64_t)"queued message for send", 23);
  *(_BYTE *)(v67 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v67 + 64))(v67, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v67 + 17) = 0;
  SipMessageManager::processSendQueue((SipMessageManager *)a1);
  return v52;
}

void sub_1BF0BDE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipMessageManager::send(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const std::string *a5, double *a6)
{
  SipStringBody *Body;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  SipStringBody *v24;
  ImsPrefs *v25;
  void *PIDFConfidenceKey;
  void *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  ImsPrefs *v36;
  const ImsPrefsKeyEnum *PIDFGeoPrivShapeKey;
  std::string *p_str;
  char v39;
  std::string *v40;
  int v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  ImsPrefs *v51;
  void **UseBase64ForMultipartSMSKey;
  void *v53;
  int v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  ImsPrefs *v62;
  void **Allow3DPIDFInMessagesKey;
  void *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  SipStringBody *v69;
  SipGeoLocationBody *v70;
  double v71[8];
  char v72;
  void *v73;
  char v74;
  void *v75;
  char v76;
  void *__p;
  char v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  std::string v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  std::string __str;
  std::string v85;

  Body = SipMessageEncodingMap::createBody((SipMessageEncodingMap *)(*(_QWORD *)(a1 + 144) + 288), a5);
  if (!Body)
  {
    v21 = *(_QWORD *)(a1 + 24);
    v20 = a1 + 24;
    v22 = (*(uint64_t (**)(uint64_t))(v21 + 56))(v20);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"unknown content type ", 21);
    *(_BYTE *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v22 + 32))(v22, a5);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v23 = 0;
    *(_BYTE *)(v22 + 17) = 0;
    return v23;
  }
  v13 = (uint64_t)Body;
  memset(&v85, 0, sizeof(v85));
  if (a6[5] > 0.0)
  {
    v14 = operator new();
    SipMultiPartBody::SipMultiPartBody((SipMultiPartBody *)v14);
    std::string::basic_string[abi:ne180100]<0>(&__str, "MIME_boundary");
    std::string::operator=((std::string *)(v14 + 32), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v69 = (SipStringBody *)v14;
    v70 = (SipGeoLocationBody *)operator new();
    v15 = SipUserAgent::publicUri(*(SipUserAgent **)(a1 + 144));
    SipUserAgent::publicDomain(*(SipUserAgent **)(a1 + 144), (uint64_t)&__str);
    v16 = SipUserAgent::config(*(SipUserAgent **)(a1 + 144));
    v67 = a2;
    v68 = a3;
    v17 = *(_QWORD *)(a1 + 144);
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = 0uLL;
    v18 = *(std::__shared_weak_count **)(v17 + 16);
    if (v18)
    {
      v18 = std::__shared_weak_count::lock(v18);
      v19 = v18;
      v81.__r_.__value_.__l.__size_ = (std::string::size_type)v18;
      if (v18)
      {
        v18 = *(std::__shared_weak_count **)(v17 + 8);
        v81.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
      }
    }
    else
    {
      v19 = 0;
    }
    v25 = (ImsPrefs *)SipStack::prefs((SipStack *)v18);
    PIDFConfidenceKey = ImsPrefs::getPIDFConfidenceKey(v25);
    v27 = ImsPrefs::prefWithKey(v25, (void **)PIDFConfidenceKey);
    if (v27)
      v28 = (*(uint64_t (**)(void *))(*(_QWORD *)v27 + 56))(v27);
    else
      v28 = *((_DWORD *)PIDFConfidenceKey + 15);
    v29 = *(unsigned __int8 *)(SipUserAgent::config(*(SipUserAgent **)(a1 + 144)) + 919);
    v30 = *(unsigned __int8 *)(SipUserAgent::config(*(SipUserAgent **)(a1 + 144)) + 920);
    v31 = SipUserAgent::config(*(SipUserAgent **)(a1 + 144));
    SipGeoLocationBody::SipGeoLocationBody((uint64_t)v70, v15, &__str, (const std::string *)(v16 + 928), v28, v29 != 0, v30 != 0, *(_BYTE *)(v31 + 921));
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v34 = *(_QWORD *)(a1 + 144);
    v82 = 0;
    v83 = 0;
    v35 = *(std::__shared_weak_count **)(v34 + 16);
    if (v35)
    {
      v35 = std::__shared_weak_count::lock(v35);
      v83 = v35;
      if (v35)
      {
        v35 = *(std::__shared_weak_count **)(v34 + 8);
        v82 = v35;
      }
    }
    v36 = (ImsPrefs *)SipStack::prefs((SipStack *)v35);
    PIDFGeoPrivShapeKey = (const ImsPrefsKeyEnum *)ImsPrefs::getPIDFGeoPrivShapeKey(v36);
    ImsPrefs::stringValue(v36, PIDFGeoPrivShapeKey, &__str);
    std::string::basic_string[abi:ne180100]<0>(&v81, "ellipsoid");
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    v39 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = &v81;
    else
      v40 = (std::string *)v81.__r_.__value_.__r.__words[0];
    if (strcasecmp((const char *)p_str, (const char *)v40))
    {
      v41 = 0;
      if ((v39 & 0x80) == 0)
        goto LABEL_34;
      goto LABEL_33;
    }
    v48 = *(_QWORD *)(a1 + 144);
    v79 = 0;
    v80 = 0;
    v49 = *(std::__shared_weak_count **)(v48 + 16);
    if (v49)
    {
      v49 = std::__shared_weak_count::lock(v49);
      v50 = v49;
      v80 = v49;
      if (v49)
      {
        v49 = *(std::__shared_weak_count **)(v48 + 8);
        v79 = v49;
      }
    }
    else
    {
      v50 = 0;
    }
    v62 = (ImsPrefs *)SipStack::prefs((SipStack *)v49);
    Allow3DPIDFInMessagesKey = (void **)ImsPrefs::getAllow3DPIDFInMessagesKey(v62);
    v64 = ImsPrefs::prefWithKey(v62, Allow3DPIDFInMessagesKey);
    if (v64)
    {
      v41 = (*(uint64_t (**)(void *))(*(_QWORD *)v64 + 40))(v64);
      if (!v50)
        goto LABEL_97;
    }
    else
    {
      v41 = *((_BYTE *)Allow3DPIDFInMessagesKey + 57) != 0;
      if (!v50)
        goto LABEL_97;
    }
    v65 = (unint64_t *)&v50->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
LABEL_97:
    if ((*((_BYTE *)&v81.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_34:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v42 = v83;
      if (v83)
      {
        v43 = (unint64_t *)&v83->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = *(_QWORD *)(a1 + 144);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
      v46 = *(std::__shared_weak_count **)(v45 + 16);
      if (v46)
      {
        v46 = std::__shared_weak_count::lock(v46);
        v47 = v46;
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)v46;
        if (v46)
        {
          v46 = *(std::__shared_weak_count **)(v45 + 8);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
        }
      }
      else
      {
        v47 = 0;
      }
      v51 = (ImsPrefs *)SipStack::prefs((SipStack *)v46);
      UseBase64ForMultipartSMSKey = (void **)ImsPrefs::getUseBase64ForMultipartSMSKey(v51);
      v53 = ImsPrefs::prefWithKey(v51, UseBase64ForMultipartSMSKey);
      if (v53)
      {
        v54 = (*(uint64_t (**)(void *))(*(_QWORD *)v53 + 40))(v53);
        if (!v47)
          goto LABEL_55;
      }
      else
      {
        v54 = *((_BYTE *)UseBase64ForMultipartSMSKey + 57) != 0;
        if (!v47)
          goto LABEL_55;
      }
      v55 = (unint64_t *)&v47->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
        if (v41)
          goto LABEL_56;
        goto LABEL_65;
      }
LABEL_55:
      if (v41)
      {
LABEL_56:
        ims::LocationInfo::LocationInfo((ims::LocationInfo *)v71, (const ims::LocationInfo *)a6);
        v24 = v69;
        SipGeoLocationBody::setEllipsoid(v70, v71);
        if (v78 < 0)
          operator delete(__p);
        if (v76 < 0)
          operator delete(v75);
        if (v74 < 0)
          operator delete(v73);
        if (v72 < 0)
          operator delete(*(void **)&v71[6]);
LABEL_66:
        if (v54)
        {
          v57 = *(char *)(a4 + 23);
          if (v57 >= 0)
            v58 = a4;
          else
            v58 = *(_QWORD *)a4;
          if (v57 >= 0)
            v59 = *(unsigned __int8 *)(a4 + 23);
          else
            v59 = *(_QWORD *)(a4 + 8);
          base64Encode(v58, v59, &v85);
        }
        else
        {
          std::string::operator=(&v85, (const std::string *)a4);
        }
        if ((*(unsigned int (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v13 + 88))(v13, &v85, *(_QWORD *)(a1 + 144) + 288))
        {
          v60 = (unint64_t *)SipMultiPartBody::addPart(v24, v13);
          SipMultiPartBody::addPart(v24, (uint64_t)v70);
          std::string::basic_string[abi:ne180100]<0>(&__str, "Content-Transfer-Encoding");
          if (v54)
            std::string::basic_string[abi:ne180100]<0>(&v81, "base64");
          else
            std::string::basic_string[abi:ne180100]<0>(&v81, "binary");
          a2 = v67;
          a3 = v68;
          SipBodyPart::setHeader(v60, (uint64_t)&__str, &v81);
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v81.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          goto LABEL_84;
        }
LABEL_78:
        v23 = 0;
        goto LABEL_85;
      }
LABEL_65:
      SipGeoLocationBody::setCircle(v70, *a6, a6[1], a6[2], a6[5]);
      v24 = v69;
      goto LABEL_66;
    }
LABEL_33:
    operator delete(v81.__r_.__value_.__l.__data_);
    goto LABEL_34;
  }
  v24 = Body;
  if (((*(uint64_t (**)(SipStringBody *, uint64_t, uint64_t))(*(_QWORD *)Body + 88))(Body, a4, *(_QWORD *)(a1 + 144) + 288) & 1) == 0)goto LABEL_78;
LABEL_84:
  v23 = SipMessageManager::send(a1, a2, a3, v24);
LABEL_85:
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  return v23;
}

void sub_1BF0BE5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  if (*(char *)(v31 - 153) < 0)
    operator delete(*(void **)(v31 - 176));
  if (*(char *)(v31 - 113) < 0)
    operator delete(*(void **)(v31 - 136));
  if (*(char *)(v31 - 89) < 0)
    operator delete(*(void **)(v31 - 112));
  _Unwind_Resume(exception_object);
}

void SipMessageManager::logPrefix(SipMessageManager *this, ImsOutStream *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;

  v3 = *((_QWORD *)this + 18);
  if (!v3)
    goto LABEL_12;
  v5 = *(std::__shared_weak_count **)(v3 + 16);
  if (!v5)
    goto LABEL_12;
  v6 = std::__shared_weak_count::lock(v5);
  if (!v6)
    goto LABEL_12;
  v7 = v6;
  v8 = *(_QWORD *)(v3 + 8);
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
    if (v8)
      goto LABEL_8;
LABEL_12:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"SipMessageManager: ", 19);
    *((_BYTE *)a2 + 17) = 0;
    return;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  if (!v8)
    goto LABEL_12;
LABEL_8:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"SipMessageManager[", 18);
  *((_BYTE *)a2 + 17) = 0;
  v11 = *((_QWORD *)this + 18);
  v12 = *(std::__shared_weak_count **)(v11 + 16);
  if (!v12)
  {
    v13 = 0;
    goto LABEL_15;
  }
  v13 = std::__shared_weak_count::lock(v12);
  if (!v13)
  {
LABEL_15:
    v14 = 0;
    goto LABEL_16;
  }
  v14 = *(_QWORD *)(v11 + 8);
LABEL_16:
  if (*(char *)(v14 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(v14 + 4136), *(_QWORD *)(v14 + 4144));
  else
    v17 = *(std::string *)(v14 + 4136);
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 32))(a2, &v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"]: ", 3);
  *((_BYTE *)a2 + 17) = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1BF0BE880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipMessageManager::logPrefix(SipMessageManager *this, ImsOutStream *a2)
{
  SipMessageManager::logPrefix((SipMessageManager *)((char *)this - 24), a2);
}

void SipMessageManager::~SipMessageManager(SipMessageManager *this)
{
  SipMessageManager::~SipMessageManager(this);
  JUMPOUT(0x1C3B87100);
}

{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E78DC270;
  *((_QWORD *)this + 1) = &unk_1E78DC2D0;
  *((_QWORD *)this + 2) = &unk_1E78DC318;
  *((_QWORD *)this + 3) = &unk_1E78DC348;
  if (*((char *)this + 271) < 0)
    operator delete(*((void **)this + 31));
  if (*((char *)this + 247) < 0)
    operator delete(*((void **)this + 28));
  std::__tree<unsigned int>::destroy((uint64_t)this + 192, *((_QWORD **)this + 25));
  std::__list_imp<unsigned long long>::clear((_QWORD *)this + 21);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *((_QWORD *)this + 3) = off_1E78CFE68;
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
}

void `non-virtual thunk to'SipMessageManager::~SipMessageManager(SipMessageManager *this)
{
  SipMessageManager::~SipMessageManager((SipMessageManager *)((char *)this - 8));
}

{
  SipMessageManager::~SipMessageManager((SipMessageManager *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

{
  SipMessageManager::~SipMessageManager((SipMessageManager *)((char *)this - 16));
}

{
  SipMessageManager::~SipMessageManager((SipMessageManager *)((char *)this - 16));
  JUMPOUT(0x1C3B87100);
}

{
  SipMessageManager::~SipMessageManager((SipMessageManager *)((char *)this - 24));
}

{
  SipMessageManager::~SipMessageManager((SipMessageManager *)((char *)this - 24));
  JUMPOUT(0x1C3B87100);
}

void SipSessionServerUnconfirmedState::handleOutgoingResponse(SipSessionState *a1, _DWORD *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  SipSession *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  const BambiCallTerminationReason *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  SipSession *v39;
  std::__shared_weak_count *v40;

  v39 = 0;
  v40 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 27);
  if (v4)
  {
    v40 = std::__shared_weak_count::lock(v4);
    if (v40)
    {
      v7 = (SipSession *)*((_QWORD *)a1 + 26);
      v39 = v7;
      if (v7)
      {
        SipSession::serverInviteTransaction(v7, &v35);
        v8 = *a3;
        v10 = v35;
        v9 = v36;
        if (v36)
        {
          p_shared_owners = (unint64_t *)&v36->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        if (v8 == v10)
        {
          v16 = a2[22];
          if (v16 - 200 > 0x63)
          {
            if (v16 >= 0x12C)
            {
              v19 = (std::__shared_weak_count *)*((_QWORD *)v39 + 97);
              if (v19)
              {
                v20 = *((_QWORD *)v39 + 96);
                p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
                do
                  v22 = __ldxr(p_shared_weak_owners);
                while (__stxr(v22 + 1, p_shared_weak_owners));
                v37 = 0;
                v23 = std::__shared_weak_count::lock(v19);
                v38 = v23;
                if (v23)
                  v37 = v20;
                else
                  v20 = 0;
                std::__shared_weak_count::__release_weak(v19);
                bzero(&v35, 0x250uLL);
                v33 = v20;
                v34 = v23;
                if (v23)
                {
                  v24 = (unint64_t *)&v23->__shared_owners_;
                  do
                    v25 = __ldxr(v24);
                  while (__stxr(v25 + 1, v24));
                }
              }
              else
              {
                v37 = 0;
                v38 = 0;
                bzero(&v35, 0x250uLL);
                v33 = 0;
                v34 = 0;
              }
              BambiCallSessionTerminatedEvent::BambiCallSessionTerminatedEvent(&v35, &v33);
              v26 = v34;
              if (v34)
              {
                v27 = (unint64_t *)&v34->__shared_owners_;
                do
                  v28 = __ldaxr(v27);
                while (__stlxr(v28 - 1, v27));
                if (!v28)
                {
                  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                  std::__shared_weak_count::__release_weak(v26);
                }
              }
              BambiCallSessionTerminationBaseEvent::setReasonFromOutgoingResponse((uint64_t)&v35, a2);
              v29 = (const BambiCallTerminationReason *)*((_QWORD *)v39 + 194);
              if (v29)
                BambiCallSessionTerminationBaseEvent::setReason((BambiCallSessionTerminationBaseEvent *)&v35, v29);
              SipSessionState::terminateSessionWithEvent(a1, (BambiCallEvent *)&v35);
              BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&v35);
              v30 = v38;
              if (v38)
              {
                v31 = (unint64_t *)&v38->__shared_owners_;
                do
                  v32 = __ldaxr(v31);
                while (__stlxr(v32 - 1, v31));
                if (!v32)
                {
                  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                  std::__shared_weak_count::__release_weak(v30);
                }
              }
            }
          }
          else
          {
            v17 = (*(uint64_t (**)(SipSessionState *))(*(_QWORD *)a1 + 32))(a1);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17) <= 5)
            {
              v18 = (*(uint64_t (**)(SipSessionState *))(*(_QWORD *)a1 + 32))(a1);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 32))(v18, 6);
            }
          }
        }
      }
    }
  }
  v13 = v40;
  if (v40)
  {
    v14 = (unint64_t *)&v40->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1BF0BECA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3 - 80);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3 - 64);
  _Unwind_Resume(a1);
}

void SipSessionServerInviteState::handleOutgoingResponse(SipSessionState *a1, _DWORD *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  SipSession *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  SipUriHeader *v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[2];
  uint64_t v27;
  std::__shared_weak_count *v28;
  SipSession *v29;
  std::__shared_weak_count *v30;

  v29 = 0;
  v30 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 27);
  if (v4)
  {
    v30 = std::__shared_weak_count::lock(v4);
    if (v30)
    {
      v7 = (SipSession *)*((_QWORD *)a1 + 26);
      v29 = v7;
      if (v7)
      {
        SipSession::serverInviteTransaction(v7, &v27);
        v8 = *a3;
        v10 = v27;
        v9 = v28;
        if (v28)
        {
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        if (v8 == v10)
        {
          if ((a2[22] - 200) >= 0xFFFFFF9D)
          {
            v22 = (SipUriHeader *)SipMessage::header<SipToHeader>((uint64_t)a2);
            if (v22)
            {
              v23 = SipUriHeader::tag(v22);
              v24 = *((unsigned __int8 *)v23 + 23);
              if ((v24 & 0x80u) != 0)
                v24 = *((_QWORD *)v23 + 1);
              if (v24)
              {
                v25 = (*(uint64_t (**)(SipSessionState *))(*(_QWORD *)a1 + 32))(a1);
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 32))(v25, 5);
              }
            }
          }
          else
          {
            v16 = *a3;
            v17 = (std::__shared_weak_count *)a3[1];
            v26[0] = v16;
            v26[1] = (uint64_t)v17;
            if (v17)
            {
              v18 = (unint64_t *)&v17->__shared_owners_;
              do
                v19 = __ldxr(v18);
              while (__stxr(v19 + 1, v18));
            }
            SipSessionServerUnconfirmedState::handleOutgoingResponse(a1, a2, v26);
            if (v17)
            {
              v20 = (unint64_t *)&v17->__shared_owners_;
              do
                v21 = __ldaxr(v20);
              while (__stlxr(v21 - 1, v20));
              if (!v21)
              {
                ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                std::__shared_weak_count::__release_weak(v17);
              }
            }
          }
        }
      }
    }
  }
  v13 = v30;
  if (v30)
  {
    v14 = (unint64_t *)&v30->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1BF0BEE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void *SipMessage::header<SipToHeader>(uint64_t a1)
{
  unsigned __int8 *v1;
  const void *v2;

  v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 32), SipHeader::kHeaderTo);
  if (v1 && (v2 = (const void *)*((_QWORD *)v1 + 5)) != 0)
  else
    return 0;
}

void SipSessionServerCanceledState::handleOutgoingResponse(SipSessionState *a1, _DWORD *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  SipSession *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  SipSession *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  char v30;
  int v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::string __p;
  std::string v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  __int128 v48;
  char v49;
  std::string v50;
  std::string v51;
  int v52;
  std::string v53;
  int v54;
  char v55;
  std::string v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  SipSession *v61;
  std::__shared_weak_count *v62;

  v61 = 0;
  v62 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 27);
  if (v4)
  {
    v62 = std::__shared_weak_count::lock(v4);
    if (v62)
    {
      v7 = (SipSession *)*((_QWORD *)a1 + 26);
      v61 = v7;
      if (v7)
      {
        SipSession::serverInviteTransaction(v7, &v43);
        v8 = *a3;
        v10 = v43;
        v9 = v44;
        if (v44)
        {
          p_shared_owners = (unint64_t *)&v44->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        if (v8 == v10 && a2[22] >= 0x12Cu)
        {
          v13 = (std::__shared_weak_count *)*((_QWORD *)v61 + 97);
          if (v13)
          {
            v14 = *((_QWORD *)v61 + 96);
            p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
            do
              v16 = __ldxr(p_shared_weak_owners);
            while (__stxr(v16 + 1, p_shared_weak_owners));
            v59 = 0;
            v17 = std::__shared_weak_count::lock(v13);
            v60 = v17;
            if (v17)
              v59 = v14;
            else
              v14 = 0;
            std::__shared_weak_count::__release_weak(v13);
            bzero(&v43, 0x250uLL);
            v41 = v14;
            v42 = v17;
            if (v17)
            {
              v18 = (unint64_t *)&v17->__shared_owners_;
              do
                v19 = __ldxr(v18);
              while (__stxr(v19 + 1, v18));
            }
          }
          else
          {
            v59 = 0;
            v60 = 0;
            bzero(&v43, 0x250uLL);
            v41 = 0;
            v42 = 0;
          }
          BambiCallSessionTerminatedEvent::BambiCallSessionTerminatedEvent(&v43, &v41);
          v20 = v42;
          if (v42)
          {
            v21 = (unint64_t *)&v42->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          v23 = v61;
          v24 = *((_QWORD *)v61 + 195);
          if (v24)
          {
            LODWORD(v44) = *(_DWORD *)(v24 + 8);
            v26 = *(_QWORD *)(v24 + 16);
            v25 = *(std::__shared_weak_count **)(v24 + 24);
            if (v25)
            {
              v27 = (unint64_t *)&v25->__shared_weak_owners_;
              do
                v28 = __ldxr(v27);
              while (__stxr(v28 + 1, v27));
            }
            v29 = v46;
            v45 = v26;
            v46 = v25;
            if (v29)
              std::__shared_weak_count::__release_weak(v29);
            v47 = *(_QWORD *)(v24 + 32);
            v30 = *(_BYTE *)(v24 + 56);
            v48 = *(_OWORD *)(v24 + 40);
            v49 = v30;
            std::string::operator=(&v50, (const std::string *)(v24 + 64));
            std::string::operator=(&v51, (const std::string *)(v24 + 88));
            v52 = *(_DWORD *)(v24 + 112);
            std::string::operator=(&v53, (const std::string *)(v24 + 120));
            v31 = *(_DWORD *)(v24 + 144);
            v55 = *(_BYTE *)(v24 + 148);
            v54 = v31;
            std::string::operator=(&v56, (const std::string *)(v24 + 152));
            v57 = *(_DWORD *)(v24 + 176);
            SipUri::operator=((SipUri *)&v58, v24 + 184);
            v32 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)v23 + 64))(v23);
            (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)v23 + 16))(v23, v32);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"Using existing CancelReason: ", 29);
            *(_BYTE *)(v32 + 17) = 0;
            if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v40, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
            else
              v40 = v51;
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v32 + 32))(v32, &v40);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)": ", 2);
            *(_BYTE *)(v32 + 17) = 0;
            std::ostream::operator<<();
            *(_BYTE *)(v32 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)": ", 2);
            *(_BYTE *)(v32 + 17) = 0;
            if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&__p, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
            else
              __p = v50;
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v32 + 32))(v32, &__p);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v32 + 17) = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v40.__r_.__value_.__l.__data_);
            if (*((_QWORD *)&v48 + 1))
              (*(void (**)(_QWORD))(**((_QWORD **)&v48 + 1) + 8))(*((_QWORD *)&v48 + 1));
            *((_QWORD *)&v48 + 1) = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 32))(a2);
          }
          else
          {
            BambiCallSessionTerminationBaseEvent::setReasonFromOutgoingResponse((uint64_t)&v43, a2);
            LODWORD(v48) = 5;
          }
          SipSessionState::terminateSessionWithEvent(a1, (BambiCallEvent *)&v43);
          BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&v43);
          v33 = v60;
          if (v60)
          {
            v34 = (unint64_t *)&v60->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
        }
      }
    }
  }
  v36 = v62;
  if (v62)
  {
    v37 = (unint64_t *)&v62->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_1BF0BF354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  uint64_t v25;

  if (a21 < 0)
    operator delete(__p);
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&a25);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v25 - 96);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v25 - 80);
  _Unwind_Resume(a1);
}

void SipSessionServerTerminateAfterAckState::enterState(SipSessionServerTerminateAfterAckState *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  SipUserAgent *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  SipUserAgent *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *((_QWORD *)this + 26);
      if (!v5)
      {
LABEL_27:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v7 = *((_QWORD *)this + 24);
      v6 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
      if (v6)
      {
        p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
      }
      v11 = *(_QWORD *)(v5 + 240);
      if (v11 && (v12 = *(_QWORD *)(v11 + 208)) != 0)
        v13 = *(SipUserAgent **)(v12 + 136);
      else
        v13 = 0;
      if (*(_DWORD *)(SipUserAgent::config(v13) + 604))
      {
        if (v6)
        {
          v14 = (unint64_t *)&v6->__shared_weak_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        v16 = operator new(0x20uLL);
        *v16 = &off_1E78DC4A8;
        v16[1] = this;
        v16[2] = v7;
        v16[3] = v6;
        v26 = v16;
        v17 = *(_QWORD *)(v5 + 240);
        if (v17 && (v18 = *(_QWORD *)(v17 + 208)) != 0)
          v19 = *(SipUserAgent **)(v18 + 136);
        else
          v19 = 0;
        v20 = SipUserAgent::config(v19);
        SipTimerContainer::startTimer((_QWORD *)this + 3, (uint64_t)&kWaitForAckBeforeEndingCallTimerName, (uint64_t)v25, *(_DWORD *)(v20 + 604), 0);
        v21 = v26;
        if (v26 == v25)
        {
          v22 = 4;
          v21 = v25;
        }
        else
        {
          if (!v26)
            goto LABEL_25;
          v22 = 5;
        }
        (*(void (**)(void))(*v21 + 8 * v22))();
      }
LABEL_25:
      if (v6)
      {
        std::__shared_weak_count::__release_weak(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      goto LABEL_27;
    }
  }
}

void sub_1BF0BF58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::__shared_weak_count *v15;

  if (v15)
  {
    std::__shared_weak_count::__release_weak(v15);
    std::__shared_weak_count::__release_weak(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void SipSessionServerTerminateAfterAckState::handleTimer(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  SipSession *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = a2[23];
  if ((v2 & 0x80u) == 0)
    v3 = a2[23];
  else
    v3 = *((_QWORD *)a2 + 1);
  v4 = qword_1ED70E688;
  if (byte_1ED70E697 >= 0)
    v4 = byte_1ED70E697;
  if (v3 != v4)
    return;
  if (byte_1ED70E697 >= 0)
    v6 = &kWaitForAckBeforeEndingCallTimerName;
  else
    v6 = (uint64_t *)kWaitForAckBeforeEndingCallTimerName;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v6, *((_QWORD *)a2 + 1)))
      return;
    goto LABEL_16;
  }
  if (!a2[23])
  {
LABEL_16:
    v7 = (std::__shared_weak_count *)a1[27];
    if (v7)
    {
      v8 = std::__shared_weak_count::lock(v7);
      if (v8)
      {
        v9 = v8;
        v10 = (SipSession *)a1[26];
        if (v10)
        {
          v11 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)v10 + 64))(v10);
          (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)v10 + 16))(v10, v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"still haven't received an ACK. Terminating our call but keeping the SIP session around.", 87);
          *(_BYTE *)(v11 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v11 + 17) = 0;
          v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
          SipSession::performPendingTermination(v10, v12, 0);
        }
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    return;
  }
  while (*a2 == *(unsigned __int8 *)v6)
  {
    ++a2;
    v6 = (uint64_t *)((char *)v6 + 1);
    if (!--v2)
      goto LABEL_16;
  }
}

void sub_1BF0BF784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipSessionServerTerminateAfterAckState::handleRequest(uint64_t a1, const SipRequest *a2, uint64_t *a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v13;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::string __p;
  _BYTE v25[72];
  uint64_t v26;
  std::__shared_weak_count *v27;

  v6 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)a2 + 112))(a2);
  v7 = v6[23];
  if ((v7 & 0x80u) == 0)
    v8 = v6[23];
  else
    v8 = *((_QWORD *)v6 + 1);
  if (v8 == 3)
  {
    if ((v7 & 0x80) == 0)
    {
      if (v6[23])
      {
        v9 = &SipRequest::kMethodBye;
        while (*v6 == *(unsigned __int8 *)v9)
        {
          ++v6;
          v9 = (__int128 *)((char *)v9 + 1);
          if (!--v7)
            goto LABEL_16;
        }
        goto LABEL_12;
      }
LABEL_16:
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      v13 = *(std::__shared_weak_count **)(a1 + 216);
      if (v13
        && (__p.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v13)) != 0
        && (v14 = *(_QWORD *)(a1 + 208), (__p.__r_.__value_.__r.__words[0] = v14) != 0))
      {
        v15 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v14 + 64))(v14);
        (*(void (**)(std::string::size_type, uint64_t))(*(_QWORD *)v14 + 16))(v14, v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"received a BYE while waiting to send one of our own. Terminating session.", 73);
        *(_BYTE *)(v15 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v15 + 17) = 0;
        v16 = a3[1];
        v26 = *a3;
        v27 = (std::__shared_weak_count *)v16;
        if (v16)
        {
          v17 = (unint64_t *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v11 = SipSessionState::handleRequest(a1, a2, &v26);
        v19 = v27;
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v11 = 0;
      }
      if (__p.__r_.__value_.__l.__size_)
      {
        v22 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__size_ + 16))(__p.__r_.__value_.__l.__size_);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
      }
      return v11;
    }
    if (!memcmp(*(const void **)v6, &SipRequest::kMethodBye, *((_QWORD *)v6 + 1)))
      goto LABEL_16;
  }
LABEL_12:
  v10 = (_QWORD *)*a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipServerTransaction::sendResponse(v10, 487, &__p);
  ImsResult::~ImsResult((ImsResult *)v25);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1BF0BF9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v14 - 64);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void SipSessionServerTerminateAfterAckState::handleAck(SipSessionServerTerminateAfterAckState *this, const SipRequest *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  SipSession *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = (SipSession *)*((_QWORD *)this + 26);
      if (v6)
      {
        v7 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)v6 + 64))(v6);
        (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)v6 + 16))(v6, v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"received ACK, time to send pending BYE", 38);
        *(_BYTE *)(v7 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v7 + 17) = 0;
        SipSession::sendPendingBye(v6);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF0BFAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipSessionServerUnconfirmedState::~SipSessionServerUnconfirmedState(SipSessionServerUnconfirmedState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'SipSessionServerUnconfirmedState::~SipSessionServerUnconfirmedState(SipSessionServerUnconfirmedState *this)
{
  SipSessionState::~SipSessionState((SipSessionServerUnconfirmedState *)((char *)this - 8));
}

{
  SipSessionState::~SipSessionState((SipSessionServerUnconfirmedState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void SipSessionServerInviteState::~SipSessionServerInviteState(SipSessionServerInviteState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipSessionServerInviteState::id(SipSessionServerInviteState *this)
{
  return 3;
}

void `non-virtual thunk to'SipSessionServerInviteState::~SipSessionServerInviteState(SipSessionServerInviteState *this)
{
  SipSessionState::~SipSessionState((SipSessionServerInviteState *)((char *)this - 8));
}

{
  SipSessionState::~SipSessionState((SipSessionServerInviteState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void SipSessionServerCanceledState::~SipSessionServerCanceledState(SipSessionServerCanceledState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipSessionServerCanceledState::id(SipSessionServerCanceledState *this)
{
  return 9;
}

void `non-virtual thunk to'SipSessionServerCanceledState::~SipSessionServerCanceledState(SipSessionServerCanceledState *this)
{
  SipSessionState::~SipSessionState((SipSessionServerCanceledState *)((char *)this - 8));
}

{
  SipSessionState::~SipSessionState((SipSessionServerCanceledState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void SipSessionServerTerminateAfterAckState::~SipSessionServerTerminateAfterAckState(SipSessionServerTerminateAfterAckState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipSessionServerTerminateAfterAckState::id(SipSessionServerTerminateAfterAckState *this)
{
  return 11;
}

void `non-virtual thunk to'SipSessionServerTerminateAfterAckState::~SipSessionServerTerminateAfterAckState(SipSessionServerTerminateAfterAckState *this)
{
  SipSessionState::~SipSessionState((SipSessionServerTerminateAfterAckState *)((char *)this - 8));
}

{
  SipSessionState::~SipSessionState((SipSessionServerTerminateAfterAckState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0,std::allocator<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78DC4A8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0,std::allocator<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78DC4A8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0,std::allocator<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78DC4A8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0,std::allocator<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78DC4A8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0,std::allocator<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0,std::allocator<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0,std::allocator<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF0BFE64(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0,std::allocator<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0,std::allocator<SipSessionServerTerminateAfterAckState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t _GLOBAL__sub_I_SipSessionServerStates_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&kWaitForAckBeforeEndingCallTimerName, "WaitForAckBeforeEndingCallTimer");
  return __cxa_atexit(MEMORY[0x1E0DE44D0], &kWaitForAckBeforeEndingCallTimerName, &dword_1BEDF4000);
}

uint64_t std::map<XcapCDCondition::Condition,std::string const>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::destroy(*(char **)(a1 + 8));
  return a1;
}

uint64_t std::map<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::string const>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::destroy(*(char **)(a1 + 8));
  return a1;
}

uint64_t std::map<XcapCDCondition::Media,std::string const>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::destroy(*(char **)(a1 + 8));
  return a1;
}

void XcapCDCondition::XcapCDCondition(XcapCDCondition *this)
{
  char *v2;
  uint64_t **v3;
  unsigned __int8 v4;
  char *v5;

  *(_QWORD *)this = &off_1E78CE278;
  v2 = (char *)this + 8;
  v4 = 1;
  v5 = (char *)&v4;
  v3 = std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v4, (uint64_t)&std::piecewise_construct, &v5);
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)v2, (__int128 *)"conditions", (__int128 *)(v3 + 5));
  *(_QWORD *)this = &off_1E78DC8A8;
  *((_QWORD *)this + 1) = &unk_1E78DC920;
  *((_WORD *)this + 32) = 256;
  *((_BYTE *)this + 66) = 0;
}

XcapCDCondition *XcapCDCondition::clone(XcapCDCondition *this)
{
  XcapCDCondition *v2;

  v2 = (XcapCDCondition *)operator new();
  XcapCDCondition::XcapCDCondition(v2);
  *((_WORD *)v2 + 32) = *((_WORD *)this + 32);
  return v2;
}

void sub_1BF0C0084(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40BF0C0B6ALL);
  _Unwind_Resume(a1);
}

uint64_t XcapCDCondition::asString@<X0>(XcapCDCondition *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _OWORD v23[4];
  void *__p[2];
  __int128 v25;
  __int128 v26;
  _OWORD v27[9];
  uint64_t v28;
  _BYTE *v29;

  v28 = 0;
  v26 = 0u;
  memset(v27, 0, sizeof(v27));
  *(_OWORD *)__p = 0u;
  v25 = 0u;
  memset(v23, 0, sizeof(v23));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Conditions:[", 12);
  v29 = (char *)this + 64;
  v5 = std::__tree<std::__value_type<XcapCDCondition::Condition,std::string const>,std::__map_value_compare<XcapCDCondition::Condition,std::__value_type<XcapCDCondition::Condition,std::string const>,std::less<XcapCDCondition::Condition>,true>,std::allocator<std::__value_type<XcapCDCondition::Condition,std::string const>>>::__emplace_unique_key_args<XcapCDCondition::Condition,std::piecewise_construct_t const&,std::tuple<XcapCDCondition::Condition const&>,std::tuple<>>((uint64_t **)&XcapCDCondition::kConditionStrMap, (unsigned __int8 *)this + 64, (uint64_t)&std::piecewise_construct, &v29);
  v8 = v5[5];
  v6 = v5 + 5;
  v7 = (uint64_t)v8;
  v9 = *((char *)v6 + 23);
  if (v9 >= 0)
    v10 = (uint64_t)v6;
  else
    v10 = v7;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)v6 + 23);
  else
    v11 = (uint64_t)v6[1];
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v10, v11);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", Media: ", 9);
  v29 = (char *)this + 66;
  v14 = std::__tree<std::__value_type<XcapCDCondition::Condition,std::string const>,std::__map_value_compare<XcapCDCondition::Condition,std::__value_type<XcapCDCondition::Condition,std::string const>,std::less<XcapCDCondition::Condition>,true>,std::allocator<std::__value_type<XcapCDCondition::Condition,std::string const>>>::__emplace_unique_key_args<XcapCDCondition::Condition,std::piecewise_construct_t const&,std::tuple<XcapCDCondition::Condition const&>,std::tuple<>>((uint64_t **)&XcapCDCondition::kMediaStrMap, (unsigned __int8 *)this + 66, (uint64_t)&std::piecewise_construct, &v29);
  v17 = v14[5];
  v15 = v14 + 5;
  v16 = (uint64_t)v17;
  v18 = *((char *)v15 + 23);
  if (v18 >= 0)
    v19 = (uint64_t)v15;
  else
    v19 = v16;
  if (v18 >= 0)
    v20 = *((unsigned __int8 *)v15 + 23);
  else
    v20 = (uint64_t)v15[1];
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v19, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"], Active: ", 11);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v23 + 8, a2);
  *(_QWORD *)&v23[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v23 + *(_QWORD *)(*(_QWORD *)&v23[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v23[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v25) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v27);
}

void sub_1BF0C0250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void XcapCDCondition::parseChild(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::string::size_type size;
  std::string::size_type v8;
  std::string *p_n;
  const char *v10;
  std::string *v11;
  const char *v12;
  const std::string::value_type *v13;
  uint64_t *v14;
  char v15;
  std::string::size_type v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t *v22;
  std::string *p_s1;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  _BYTE *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;
  void *v33;
  size_t v34;
  _QWORD *v35;
  size_t v36;
  uint64_t *v37;
  size_t v38;
  void *v40;
  uint64_t *v41;
  std::string::size_type v42;
  uint64_t v43;
  int v44;
  uint64_t *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t *v48;
  std::string *v49;
  uint64_t v50;
  char v51;
  uint64_t *v52;
  std::string::size_type v53;
  uint64_t v54;
  int v55;
  uint64_t *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t *v59;
  std::string *v60;
  uint64_t v61;
  char v62;
  uint64_t *v63;
  uint64_t v64;
  std::string::size_type v65;
  uint64_t v66;
  int v67;
  uint64_t *v68;
  unsigned __int8 *v69;
  uint64_t v70;
  uint64_t *v71;
  std::string *v72;
  std::string __s1;
  _QWORD *v74;
  size_t v75;
  uint64_t v76;
  std::string __n;

  memset(&__n, 0, sizeof(__n));
  XcapNs::stripXcapNs(a2, &__n);
  v6 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  size = __n.__r_.__value_.__l.__size_;
  if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
  else
    v8 = __n.__r_.__value_.__l.__size_;
  if (v8 != 5)
  {
    if (v8 == 16)
    {
      if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v13 = (const std::string::value_type *)__n.__r_.__value_.__r.__words[0];
        if (memcmp(__n.__r_.__value_.__l.__data_, "rule-deactivated", __n.__r_.__value_.__l.__size_))
          goto LABEL_24;
      }
      else if (*((_BYTE *)&__n.__r_.__value_.__s + 23))
      {
        p_n = &__n;
        v10 = "rule-deactivated";
        while (p_n->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v10)
        {
          p_n = (std::string *)((char *)p_n + 1);
          ++v10;
          if (!--v6)
            goto LABEL_22;
        }
        goto LABEL_18;
      }
LABEL_22:
      a1[65] = 0;
      goto LABEL_126;
    }
LABEL_18:
    if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      __s1 = __n;
      goto LABEL_25;
    }
    v13 = (const std::string::value_type *)__n.__r_.__value_.__r.__words[0];
LABEL_24:
    std::string::__init_copy_ctor_external(&__s1, v13, size);
LABEL_25:
    LOBYTE(v74) = 1;
    v14 = std::__tree<std::__value_type<XcapCDCondition::Condition,std::string const>,std::__map_value_compare<XcapCDCondition::Condition,std::__value_type<XcapCDCondition::Condition,std::string const>,std::less<XcapCDCondition::Condition>,true>,std::allocator<std::__value_type<XcapCDCondition::Condition,std::string const>>>::__emplace_unique_key_args<XcapCDCondition::Condition,std::piecewise_construct_t const&,std::tuple<XcapCDCondition::Condition&&>,std::tuple<>>(1u, &v74);
    v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    else
      v16 = __s1.__r_.__value_.__l.__size_;
    v17 = *((unsigned __int8 *)v14 + 63);
    v18 = (char)v17;
    if ((v17 & 0x80u) != 0)
      v17 = v14[6];
    if (v16 != v17)
      goto LABEL_68;
    v21 = v14[5];
    v19 = v14 + 5;
    v20 = (unsigned __int8 *)v21;
    if (v18 >= 0)
      v22 = v19;
    else
      v22 = (uint64_t *)v20;
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(__s1.__r_.__value_.__l.__data_, v22, __s1.__r_.__value_.__l.__size_))
        goto LABEL_68;
    }
    else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      v24 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v22)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        v22 = (uint64_t *)((char *)v22 + 1);
        if (!--v24)
          goto LABEL_83;
      }
LABEL_68:
      LOBYTE(v74) = 2;
      v41 = std::__tree<std::__value_type<XcapCDCondition::Condition,std::string const>,std::__map_value_compare<XcapCDCondition::Condition,std::__value_type<XcapCDCondition::Condition,std::string const>,std::less<XcapCDCondition::Condition>,true>,std::allocator<std::__value_type<XcapCDCondition::Condition,std::string const>>>::__emplace_unique_key_args<XcapCDCondition::Condition,std::piecewise_construct_t const&,std::tuple<XcapCDCondition::Condition&&>,std::tuple<>>(2u, &v74);
      v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      else
        v42 = __s1.__r_.__value_.__l.__size_;
      v43 = *((unsigned __int8 *)v41 + 63);
      v44 = (char)v43;
      if ((v43 & 0x80u) != 0)
        v43 = v41[6];
      if (v42 != v43)
        goto LABEL_85;
      v47 = v41[5];
      v45 = v41 + 5;
      v46 = (unsigned __int8 *)v47;
      if (v44 >= 0)
        v48 = v45;
      else
        v48 = (uint64_t *)v46;
      if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(__s1.__r_.__value_.__l.__data_, v48, __s1.__r_.__value_.__l.__size_))
          goto LABEL_85;
      }
      else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
      {
        v49 = &__s1;
        v50 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        while (v49->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v48)
        {
          v49 = (std::string *)((char *)v49 + 1);
          v48 = (uint64_t *)((char *)v48 + 1);
          if (!--v50)
            goto LABEL_100;
        }
LABEL_85:
        LOBYTE(v74) = 3;
        v52 = std::__tree<std::__value_type<XcapCDCondition::Condition,std::string const>,std::__map_value_compare<XcapCDCondition::Condition,std::__value_type<XcapCDCondition::Condition,std::string const>,std::less<XcapCDCondition::Condition>,true>,std::allocator<std::__value_type<XcapCDCondition::Condition,std::string const>>>::__emplace_unique_key_args<XcapCDCondition::Condition,std::piecewise_construct_t const&,std::tuple<XcapCDCondition::Condition&&>,std::tuple<>>(3u, &v74);
        v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        else
          v53 = __s1.__r_.__value_.__l.__size_;
        v54 = *((unsigned __int8 *)v52 + 63);
        v55 = (char)v54;
        if ((v54 & 0x80u) != 0)
          v54 = v52[6];
        if (v53 == v54)
        {
          v58 = v52[5];
          v56 = v52 + 5;
          v57 = (unsigned __int8 *)v58;
          if (v55 >= 0)
            v59 = v56;
          else
            v59 = (uint64_t *)v57;
          if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
          {
            if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
            {
              v60 = &__s1;
              v61 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
              while (v60->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v59)
              {
                v60 = (std::string *)((char *)v60 + 1);
                v59 = (uint64_t *)((char *)v59 + 1);
                if (!--v61)
                  goto LABEL_117;
              }
              goto LABEL_102;
            }
            goto LABEL_117;
          }
          if (!memcmp(__s1.__r_.__value_.__l.__data_, v59, __s1.__r_.__value_.__l.__size_))
          {
LABEL_117:
            v62 = 3;
            goto LABEL_118;
          }
        }
LABEL_102:
        LOBYTE(v74) = 4;
        v63 = std::__tree<std::__value_type<XcapCDCondition::Condition,std::string const>,std::__map_value_compare<XcapCDCondition::Condition,std::__value_type<XcapCDCondition::Condition,std::string const>,std::less<XcapCDCondition::Condition>,true>,std::allocator<std::__value_type<XcapCDCondition::Condition,std::string const>>>::__emplace_unique_key_args<XcapCDCondition::Condition,std::piecewise_construct_t const&,std::tuple<XcapCDCondition::Condition&&>,std::tuple<>>(4u, &v74);
        v64 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v65 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        else
          v65 = __s1.__r_.__value_.__l.__size_;
        v66 = *((unsigned __int8 *)v63 + 63);
        v67 = (char)v66;
        if ((v66 & 0x80u) != 0)
          v66 = v63[6];
        if (v65 != v66)
          goto LABEL_119;
        v70 = v63[5];
        v68 = v63 + 5;
        v69 = (unsigned __int8 *)v70;
        if (v67 >= 0)
          v71 = v68;
        else
          v71 = (uint64_t *)v69;
        if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (memcmp(__s1.__r_.__value_.__l.__data_, v71, __s1.__r_.__value_.__l.__size_))
          {
LABEL_124:
            v40 = (void *)__s1.__r_.__value_.__r.__words[0];
            goto LABEL_125;
          }
        }
        else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
        {
          v72 = &__s1;
          while (v72->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v71)
          {
            v72 = (std::string *)((char *)v72 + 1);
            v71 = (uint64_t *)((char *)v71 + 1);
            if (!--v64)
              goto LABEL_122;
          }
LABEL_119:
          if ((v15 & 0x80) == 0)
            goto LABEL_126;
          goto LABEL_124;
        }
LABEL_122:
        v51 = 4;
LABEL_123:
        a1[64] = v51;
        if ((v15 & 0x80) == 0)
          goto LABEL_126;
        goto LABEL_124;
      }
LABEL_100:
      v62 = 2;
LABEL_118:
      a1[64] = v62;
      goto LABEL_119;
    }
LABEL_83:
    v51 = 1;
    goto LABEL_123;
  }
  if ((*((_BYTE *)&__n.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v13 = (const std::string::value_type *)__n.__r_.__value_.__r.__words[0];
    if (memcmp(__n.__r_.__value_.__l.__data_, "media", __n.__r_.__value_.__l.__size_))
      goto LABEL_24;
  }
  else if (*((_BYTE *)&__n.__r_.__value_.__s + 23))
  {
    v11 = &__n;
    v12 = "media";
    while (v11->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v12)
    {
      v11 = (std::string *)((char *)v11 + 1);
      ++v12;
      if (!--v6)
        goto LABEL_40;
    }
    goto LABEL_18;
  }
LABEL_40:
  v74 = 0;
  v75 = 0;
  v76 = 0;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)a1 + 72))(a1, a2, a3, &v74);
  v25 = &qword_1ED70DB40;
  while (1)
  {
    v26 = (uint64_t *)*v25;
    if (!*v25)
      break;
    v25 = (uint64_t *)*v25;
    if (!*((_BYTE *)v26 + 32))
      goto LABEL_45;
  }
  v27 = operator new(0x40uLL);
  v27[32] = 0;
  *((_QWORD *)v27 + 6) = 0;
  *((_QWORD *)v27 + 7) = 0;
  *((_QWORD *)v27 + 5) = 0;
  std::__tree<unsigned int>::__insert_node_at((uint64_t **)&XcapCDCondition::kMediaStrMap, (uint64_t)v25, (uint64_t **)v25, (uint64_t *)v27);
  v25 = (uint64_t *)v27;
LABEL_45:
  v30 = v25[5];
  v29 = v25 + 5;
  v28 = (uint64_t *)v30;
  v31 = *((char *)v29 + 23);
  v32 = SHIBYTE(v76);
  v33 = v74;
  if (v76 >= 0)
    v34 = HIBYTE(v76);
  else
    v34 = v75;
  if (v76 >= 0)
    v35 = &v74;
  else
    v35 = v74;
  if (v31 >= 0)
    v36 = *((unsigned __int8 *)v29 + 23);
  else
    v36 = v29[1];
  if (v31 >= 0)
    v37 = v29;
  else
    v37 = v28;
  if (v36 >= v34)
    v38 = v34;
  else
    v38 = v36;
  if (memcmp(v35, v37, v38) || v36 != v34)
    a1[66] = 1;
  if (v32 < 0)
  {
    v40 = v33;
LABEL_125:
    operator delete(v40);
  }
LABEL_126:
  if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__n.__r_.__value_.__l.__data_);
}

void sub_1BF0C071C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void XcapCDCondition::constructTree(XcapCDCondition *this@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t **v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unsigned __int8 v34;
  unsigned __int8 *v35;

  *a2 = 0;
  a2[1] = 0;
  v4 = (char *)this + 8;
  bambi::XmlTreeItem::makeNode((XcapCDCondition *)((char *)this + 8), a2);
  if (*((unsigned __int8 *)this + 64) - 1 <= 3)
  {
    v5 = a2[1];
    v30 = *a2;
    v31 = (std::__shared_weak_count *)v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v35 = (unsigned __int8 *)this + 64;
    v8 = std::__tree<std::__value_type<XcapCDCondition::Condition,std::string const>,std::__map_value_compare<XcapCDCondition::Condition,std::__value_type<XcapCDCondition::Condition,std::string const>,std::less<XcapCDCondition::Condition>,true>,std::allocator<std::__value_type<XcapCDCondition::Condition,std::string const>>>::__emplace_unique_key_args<XcapCDCondition::Condition,std::piecewise_construct_t const&,std::tuple<XcapCDCondition::Condition const&>,std::tuple<>>((uint64_t **)&XcapCDCondition::kConditionStrMap, (unsigned __int8 *)this + 64, (uint64_t)&std::piecewise_construct, &v35);
    v34 = 0;
    v35 = &v34;
    v9 = std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v34, (uint64_t)&std::piecewise_construct, (char **)&v35);
    (*(void (**)(uint64_t *__return_ptr, char *, uint64_t *, uint64_t **, uint64_t **))(*(_QWORD *)v4 + 64))(&v32, v4, &v30, v8 + 5, v9 + 5);
    v10 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v31;
    if (v31)
    {
      v14 = (unint64_t *)&v31->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  if (!*((_BYTE *)this + 65))
  {
    v16 = a2[1];
    v26 = *a2;
    v27 = (std::__shared_weak_count *)v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v34 = 0;
    v35 = &v34;
    v19 = std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v34, (uint64_t)&std::piecewise_construct, (char **)&v35);
    (*(void (**)(uint64_t *__return_ptr, char *, uint64_t *, const char *, uint64_t **))(*(_QWORD *)v4 + 64))(&v28, v4, &v26, "rule-deactivated", v19 + 5);
    v20 = v29;
    if (v29)
    {
      v21 = (unint64_t *)&v29->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v27;
    if (v27)
    {
      v24 = (unint64_t *)&v27->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
}

void sub_1BF0C09A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'XcapCDCondition::constructTree(XcapCDCondition *this@<X0>, uint64_t *a2@<X8>)
{
  XcapCDCondition::constructTree((XcapCDCondition *)((char *)this - 8), a2);
}

void XcapCDCondition::~XcapCDCondition(void **this)
{
  bambi::XmlTreeItem::~XmlTreeItem(this + 1);
}

{
  bambi::XmlTreeItem::~XmlTreeItem(this + 1);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'XcapCDCondition::~XcapCDCondition(void **this)
{
  bambi::XmlTreeItem::~XmlTreeItem(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t **std::__tree<std::__value_type<XcapCDCondition::Condition,std::string const>,std::__map_value_compare<XcapCDCondition::Condition,std::__value_type<XcapCDCondition::Condition,std::string const>,std::less<XcapCDCondition::Condition>,true>,std::allocator<std::__value_type<XcapCDCondition::Condition,std::string const>>>::__emplace_unique_key_args<XcapCDCondition::Condition,std::piecewise_construct_t const&,std::tuple<XcapCDCondition::Condition const&>,std::tuple<>>(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _BYTE *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int8 *)v6 + 32);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[32] = **a4;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *std::__tree<std::__value_type<XcapCDCondition::Condition,std::string const>,std::__map_value_compare<XcapCDCondition::Condition,std::__value_type<XcapCDCondition::Condition,std::string const>,std::less<XcapCDCondition::Condition>,true>,std::allocator<std::__value_type<XcapCDCondition::Condition,std::string const>>>::__emplace_unique_key_args<XcapCDCondition::Condition,std::piecewise_construct_t const&,std::tuple<XcapCDCondition::Condition&&>,std::tuple<>>(unsigned __int8 a1, _BYTE *a2)
{
  uint64_t **v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  _BYTE *v7;

  v3 = (uint64_t **)&qword_1ED70C8F8;
  v4 = qword_1ED70C8F8;
  if (qword_1ED70C8F8)
  {
    while (1)
    {
      while (1)
      {
        v5 = (uint64_t *)v4;
        v6 = *(unsigned __int8 *)(v4 + 32);
        if (v6 <= a1)
          break;
        v4 = *v5;
        v3 = (uint64_t **)v5;
        if (!*v5)
          goto LABEL_9;
      }
      if (v6 >= a1)
        break;
      v4 = v5[1];
      if (!v4)
      {
        v3 = (uint64_t **)(v5 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v5 = &qword_1ED70C8F8;
LABEL_9:
    v7 = operator new(0x40uLL);
    v7[32] = *a2;
    *((_QWORD *)v7 + 6) = 0;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 5) = 0;
    std::__tree<unsigned int>::__insert_node_at((uint64_t **)&XcapCDCondition::kConditionStrMap, (uint64_t)v5, v3, (uint64_t *)v7);
    return (uint64_t *)v7;
  }
  return v5;
}

uint64_t _GLOBAL__sub_I_XcapCDCondition_cpp()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  unsigned __int8 *v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  std::string *v12;
  _WORD *v13;
  const std::string::value_type **v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  char v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  char v34;
  uint64_t *v35;
  char v36;
  char *v37;
  std::string *v38;
  _WORD *v39;
  const std::string::value_type **v40;
  uint64_t j;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t **v50;
  uint64_t v51;
  unsigned int v52;
  char *v53;
  std::string *v54;
  _WORD *v55;
  const std::string::value_type **v56;
  uint64_t k;
  _WORD v59[16];
  _QWORD v60[3];
  __int16 v61;
  _QWORD v62[3];
  __int16 v63;
  _QWORD v64[3];
  __int16 v65;
  _QWORD v66[3];
  __int16 v67;
  _QWORD v68[3];
  char v69;
  uint64_t v70[3];
  char v71;
  _QWORD v72[5];

  v72[3] = *MEMORY[0x1E0C80C00];
  LOBYTE(v59[0]) = 0;
  std::string::basic_string[abi:ne180100]<0>(v60, "unconditional");
  LOBYTE(v61) = 1;
  std::string::basic_string[abi:ne180100]<0>(v62, "busy");
  LOBYTE(v63) = 2;
  std::string::basic_string[abi:ne180100]<0>(v64, "no-answer");
  LOBYTE(v65) = 3;
  std::string::basic_string[abi:ne180100]<0>(v66, "not-reachable");
  LOBYTE(v67) = 4;
  std::string::basic_string[abi:ne180100]<0>(v68, "not-registered");
  v69 = 5;
  std::string::basic_string[abi:ne180100]<0>(v70, "all");
  v71 = 6;
  std::string::basic_string[abi:ne180100]<0>(v72, "allConditional");
  v0 = 0;
  v1 = 0;
  qword_1ED70C900 = 0;
  qword_1ED70C8F8 = 0;
  v2 = &qword_1ED70C8F8;
  XcapCDCondition::kConditionStrMap = (uint64_t)&qword_1ED70C8F8;
  while (1)
  {
    v3 = (unsigned __int8 *)&v59[16 * v1];
    v4 = *v3;
    if (v2 == &qword_1ED70C8F8)
    {
      v6 = &qword_1ED70C8F8;
LABEL_10:
      if (v0)
      {
        v8 = (uint64_t **)(v6 + 1);
        if (v6[1])
          goto LABEL_26;
      }
      else
      {
LABEL_21:
        v8 = (uint64_t **)&qword_1ED70C8F8;
        v6 = &qword_1ED70C8F8;
      }
LABEL_22:
      v11 = (char *)operator new(0x40uLL);
      v11[32] = v4;
      v12 = (std::string *)(v11 + 40);
      v13 = &v59[16 * v1];
      v14 = (const std::string::value_type **)(v13 + 4);
      if ((char)v3[31] < 0)
      {
        std::string::__init_copy_ctor_external(v12, *v14, *((_QWORD *)v13 + 2));
      }
      else
      {
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)v14;
        *((_QWORD *)v11 + 7) = *((_QWORD *)v13 + 3);
      }
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)&XcapCDCondition::kConditionStrMap, (uint64_t)v6, v8, (uint64_t *)v11);
      goto LABEL_26;
    }
    v5 = (uint64_t *)v0;
    if (v0)
    {
      do
      {
        v6 = v5;
        v5 = (uint64_t *)v5[1];
      }
      while (v5);
    }
    else
    {
      v7 = &qword_1ED70C8F8;
      do
      {
        v6 = (uint64_t *)v7[2];
        v26 = *v6 == (_QWORD)v7;
        v7 = v6;
      }
      while (v26);
    }
    if (*((unsigned __int8 *)v6 + 32) < v4)
      goto LABEL_10;
    if (!v0)
      goto LABEL_21;
    v9 = v0;
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t *)v9;
        v10 = *(unsigned __int8 *)(v9 + 32);
        if (v10 <= v4)
          break;
        v9 = *v6;
        v8 = (uint64_t **)v6;
        if (!*v6)
          goto LABEL_22;
      }
      if (v10 >= v4)
        break;
      v9 = v6[1];
      if (!v9)
      {
        v8 = (uint64_t **)(v6 + 1);
        goto LABEL_22;
      }
    }
LABEL_26:
    if (++v1 == 7)
      break;
    v2 = (uint64_t *)XcapCDCondition::kConditionStrMap;
    v0 = qword_1ED70C8F8;
  }
  for (i = 0; i != -28; i -= 4)
  {
    if (SHIBYTE(v72[i + 2]) < 0)
      operator delete((void *)v72[i]);
  }
  __cxa_atexit((void (*)(void *))std::map<XcapCDCondition::Condition,std::string const>::~map[abi:ne180100], &XcapCDCondition::kConditionStrMap, &dword_1BEDF4000);
  v59[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v60, "CFU");
  v61 = 1;
  std::string::basic_string[abi:ne180100]<0>(v62, "CFB");
  v63 = 2;
  std::string::basic_string[abi:ne180100]<0>(v64, "CFNR");
  v65 = 3;
  std::string::basic_string[abi:ne180100]<0>(v66, "CFNRc");
  v67 = 4;
  std::string::basic_string[abi:ne180100]<0>(v68, "CFNL");
  v16 = 0;
  v17 = 0;
  qword_1ED70C8E0 = 0;
  v18 = &qword_1ED70C8E0;
  qword_1ED70C8E8 = 0;
  XcapCDCondition::kDefaultRuleIds = (uint64_t)&qword_1ED70C8E0;
  while (2)
  {
    v19 = (unsigned __int8 *)&v59[16 * v17];
    if (v18 == &qword_1ED70C8E0)
    {
      v21 = &qword_1ED70C8E0;
    }
    else
    {
      v20 = (uint64_t *)v16;
      if (v16)
      {
        do
        {
          v21 = v20;
          v20 = (uint64_t *)v20[1];
        }
        while (v20);
      }
      else
      {
        v22 = &qword_1ED70C8E0;
        do
        {
          v21 = (uint64_t *)v22[2];
          v26 = *v21 == (_QWORD)v22;
          v22 = v21;
        }
        while (v26);
      }
      v23 = *v19;
      v24 = v19[1];
      v25 = *((unsigned __int8 *)v21 + 32);
      v26 = v25 == v23;
      if (v25 >= v23)
        v27 = 1;
      else
        v27 = -1;
      if (v26)
      {
        v28 = *((unsigned __int8 *)v21 + 33);
        v29 = v28 == v24;
        v27 = v28 >= v24 ? 1 : -1;
        if (v29)
          v27 = 0;
      }
      if ((v27 & 0x80) == 0)
      {
        if (v16)
        {
          v30 = v16;
          while (1)
          {
            v21 = (uint64_t *)v30;
            v31 = *(unsigned __int8 *)(v30 + 32);
            if (v31 == v23)
            {
              v32 = *((unsigned __int8 *)v21 + 33);
              v33 = v32 == v24;
              if (v32 <= v24)
              {
                if (v32 >= v24)
                  v34 = 1;
                else
                  v34 = -1;
                if (v33)
                  v34 = 0;
                if ((v34 & 0x80) == 0)
                  goto LABEL_81;
                goto LABEL_69;
              }
LABEL_63:
              v30 = *v21;
              v35 = v21;
              if (!*v21)
                goto LABEL_75;
            }
            else
            {
              if (v31 > v23)
                goto LABEL_63;
              if (v31 >= v23)
                v36 = 1;
              else
                v36 = -1;
              if ((v36 & 0x80) == 0)
                goto LABEL_81;
LABEL_69:
              v30 = v21[1];
              if (!v30)
              {
                v35 = v21 + 1;
                goto LABEL_75;
              }
            }
          }
        }
LABEL_74:
        v35 = &qword_1ED70C8E0;
        v21 = &qword_1ED70C8E0;
        goto LABEL_75;
      }
    }
    if (!v16)
      goto LABEL_74;
    v35 = v21 + 1;
    if (!v21[1])
    {
LABEL_75:
      v37 = (char *)operator new(0x40uLL);
      *((_WORD *)v37 + 16) = *(_WORD *)v19;
      v38 = (std::string *)(v37 + 40);
      v39 = &v59[16 * v17];
      v40 = (const std::string::value_type **)(v39 + 4);
      if ((char)v19[31] < 0)
      {
        std::string::__init_copy_ctor_external(v38, *v40, *((_QWORD *)v39 + 2));
      }
      else
      {
        *(_OWORD *)&v38->__r_.__value_.__l.__data_ = *(_OWORD *)v40;
        *((_QWORD *)v37 + 7) = *((_QWORD *)v39 + 3);
      }
      *(_QWORD *)v37 = 0;
      *((_QWORD *)v37 + 1) = 0;
      *((_QWORD *)v37 + 2) = v21;
      *v35 = (uint64_t)v37;
      if (*(_QWORD *)XcapCDCondition::kDefaultRuleIds)
      {
        XcapCDCondition::kDefaultRuleIds = *(_QWORD *)XcapCDCondition::kDefaultRuleIds;
        v37 = (char *)*v35;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1ED70C8E0, (uint64_t *)v37);
      ++qword_1ED70C8E8;
    }
LABEL_81:
    if (++v17 != 5)
    {
      v18 = (uint64_t *)XcapCDCondition::kDefaultRuleIds;
      v16 = qword_1ED70C8E0;
      continue;
    }
    break;
  }
  for (j = 0; j != -20; j -= 4)
  {
    if (SHIBYTE(v68[j + 2]) < 0)
      operator delete((void *)v68[j]);
  }
  __cxa_atexit((void (*)(void *))std::map<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::string const>::~map[abi:ne180100], &XcapCDCondition::kDefaultRuleIds, &dword_1BEDF4000);
  LOBYTE(v59[0]) = 0;
  std::string::basic_string[abi:ne180100]<0>(v60, "audio");
  LOBYTE(v61) = 1;
  std::string::basic_string[abi:ne180100]<0>(v62, "video");
  v42 = 0;
  v43 = 0;
  qword_1ED70DB48 = 0;
  qword_1ED70DB40 = 0;
  v44 = &qword_1ED70DB40;
  XcapCDCondition::kMediaStrMap = (uint64_t)&qword_1ED70DB40;
  while (2)
  {
    v45 = (unsigned __int8 *)&v59[16 * v43];
    v46 = *v45;
    if (v44 == &qword_1ED70DB40)
    {
      v48 = &qword_1ED70DB40;
      goto LABEL_96;
    }
    v47 = (uint64_t *)v42;
    if (v42)
    {
      do
      {
        v48 = v47;
        v47 = (uint64_t *)v47[1];
      }
      while (v47);
    }
    else
    {
      v49 = &qword_1ED70DB40;
      do
      {
        v48 = (uint64_t *)v49[2];
        v26 = *v48 == (_QWORD)v49;
        v49 = v48;
      }
      while (v26);
    }
    if (*((unsigned __int8 *)v48 + 32) >= v46)
    {
      if (v42)
      {
        v51 = v42;
        while (1)
        {
          while (1)
          {
            v48 = (uint64_t *)v51;
            v52 = *(unsigned __int8 *)(v51 + 32);
            if (v52 <= v46)
              break;
            v51 = *v48;
            v50 = (uint64_t **)v48;
            if (!*v48)
              goto LABEL_108;
          }
          if (v52 >= v46)
            goto LABEL_112;
          v51 = v48[1];
          if (!v51)
          {
            v50 = (uint64_t **)(v48 + 1);
            goto LABEL_108;
          }
        }
      }
LABEL_107:
      v50 = (uint64_t **)&qword_1ED70DB40;
      v48 = &qword_1ED70DB40;
      goto LABEL_108;
    }
LABEL_96:
    if (!v42)
      goto LABEL_107;
    v50 = (uint64_t **)(v48 + 1);
    if (!v48[1])
    {
LABEL_108:
      v53 = (char *)operator new(0x40uLL);
      v53[32] = v46;
      v54 = (std::string *)(v53 + 40);
      v55 = &v59[16 * v43];
      v56 = (const std::string::value_type **)(v55 + 4);
      if ((char)v45[31] < 0)
      {
        std::string::__init_copy_ctor_external(v54, *v56, *((_QWORD *)v55 + 2));
      }
      else
      {
        *(_OWORD *)&v54->__r_.__value_.__l.__data_ = *(_OWORD *)v56;
        *((_QWORD *)v53 + 7) = *((_QWORD *)v55 + 3);
      }
      std::__tree<unsigned int>::__insert_node_at((uint64_t **)&XcapCDCondition::kMediaStrMap, (uint64_t)v48, v50, (uint64_t *)v53);
    }
LABEL_112:
    if (++v43 != 2)
    {
      v44 = (uint64_t *)XcapCDCondition::kMediaStrMap;
      v42 = qword_1ED70DB40;
      continue;
    }
    break;
  }
  for (k = 0; k != -8; k -= 4)
  {
    if (SHIBYTE(v62[k + 2]) < 0)
      operator delete((void *)v62[k]);
  }
  return __cxa_atexit((void (*)(void *))std::map<XcapCDCondition::Media,std::string const>::~map[abi:ne180100], &XcapCDCondition::kMediaStrMap, &dword_1BEDF4000);
}

void sub_1BF0C12DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void LazuliContentTypeHeader::create(uint64_t a1@<X0>, std::__shared_weak_count **a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v4 = (std::__shared_weak_count *)operator new(0x90uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DCA40;
  v6 = v4 + 1;
  LazuliStringParameterHeader::LazuliStringParameterHeader((uint64_t)&v4[1], &LazuliHeader::kHeaderContentType, a1);
  LOBYTE(v4[3].__vftable) = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E78DCA90;
  shared_weak_owners = (std::__shared_weak_count *)v4[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    v4[1].__shared_owners_ = (uint64_t)v6;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v4[1].__shared_owners_ = (uint64_t)v6;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_14:
  *a2 = v6;
  a2[1] = v4;
}

void sub_1BF0C1578(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void LazuliContentTypeHeader::~LazuliContentTypeHeader(void **this)
{
  *this = off_1E78F03B8;
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  *this = off_1E78BFB08;
  this[7] = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 8), this[9]);
  LazuliHeader::~LazuliHeader(this);
}

{
  *this = off_1E78F03B8;
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  *this = off_1E78BFB08;
  this[7] = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 8), this[9]);
  LazuliHeader::~LazuliHeader(this);
  JUMPOUT(0x1C3B87100);
}

double LazuliContentTypeHeader::clone@<D0>(LazuliContentTypeHeader *this@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *v4;
  double result;
  __int128 v6;

  v4 = operator new(0x90uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E78C7E68;
  LazuliStringParameterHeader::LazuliStringParameterHeader((LazuliStringParameterHeader *)(v4 + 3), this);
  v4[3] = off_1E78DC9D0;
  *((_BYTE *)v4 + 72) = 0;
  *(_QWORD *)&v6 = v4 + 3;
  *((_QWORD *)&v6 + 1) = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v6, v4 + 4, (uint64_t)(v4 + 3));
  result = *(double *)&v6;
  *a2 = v6;
  return result;
}

void sub_1BF0C16EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliContentTypeHeader::create(std::string const&)::HeaderWrapper,std::allocator<LazuliContentTypeHeader::create(std::string const&)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DCA40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliContentTypeHeader::create(std::string const&)::HeaderWrapper,std::allocator<LazuliContentTypeHeader::create(std::string const&)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DCA40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<LazuliContentTypeHeader::create(std::string const&)::HeaderWrapper,std::allocator<LazuliContentTypeHeader::create(std::string const&)::HeaderWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void LazuliContentTypeHeader::create(std::string const&)::HeaderWrapper::~HeaderWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E78F03B8;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  *(_QWORD *)a1 = off_1E78BFB08;
  *(_QWORD *)(a1 + 56) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 64, *(_QWORD **)(a1 + 72));
  LazuliHeader::~LazuliHeader((void **)a1);
}

{
  *(_QWORD *)a1 = off_1E78F03B8;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  *(_QWORD *)a1 = off_1E78BFB08;
  *(_QWORD *)(a1 + 56) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 64, *(_QWORD **)(a1 + 72));
  LazuliHeader::~LazuliHeader((void **)a1);
  JUMPOUT(0x1C3B87100);
}

void DeferredInit::DeferredInit(std::string *this, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 v7;
  __int128 v8;
  ims::NetworkConfig *v9;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v8;
  }
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  v9 = ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)&this[3]);
  *(_OWORD *)&this[30].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[31].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[29].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[29].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[27].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[28].__r_.__value_.__r.__words[1] = 0u;
  LOWORD(this[31].__r_.__value_.__r.__words[2]) = 257;
  HIDWORD(this[32].__r_.__value_.__r.__words[0]) = 0;
  LOWORD(this[32].__r_.__value_.__r.__words[1]) = 256;
  this[32].__r_.__value_.__s.__data_[10] = 1;
  this[246].__r_.__value_.__s.__data_[0] = 0;
  this[32].__r_.__value_.__s.__data_[16] = 0;
  ims::NetworkConfig::operator=((uint64_t)v9, a4 + 24);
  std::string::operator=((std::string *)((char *)this + 664), (const std::string *)(a4 + 616));
  std::string::operator=((std::string *)((char *)this + 688), (const std::string *)(a4 + 640));
  std::string::operator=((std::string *)((char *)this + 712), (const std::string *)(a4 + 664));
  std::string::operator=((std::string *)((char *)this + 736), (const std::string *)(a4 + 688));
  LOWORD(this[31].__r_.__value_.__r.__words[2]) = *(_WORD *)(a4 + 712);
  HIDWORD(this[32].__r_.__value_.__r.__words[0]) = *(_DWORD *)(a4 + 724);
  LOWORD(this[32].__r_.__value_.__r.__words[1]) = *(_WORD *)(a4 + 728);
}

void sub_1BF0C1960(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *DeferredInit::operator=(std::string *this, uint64_t a2)
{
  const std::string *v4;
  void **v5;
  std::string *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (this != (std::string *)a2)
  {
    std::string::operator=(this, (const std::string *)a2);
    std::string::operator=(this + 1, (const std::string *)(a2 + 24));
    ims::NetworkConfig::operator=((uint64_t)&this[3], a2 + 72);
    std::string::operator=((std::string *)((char *)this + 664), (const std::string *)(a2 + 664));
    std::string::operator=((std::string *)((char *)this + 688), (const std::string *)(a2 + 688));
    std::string::operator=((std::string *)((char *)this + 712), (const std::string *)(a2 + 712));
    std::string::operator=((std::string *)((char *)this + 736), (const std::string *)(a2 + 736));
    LOWORD(this[31].__r_.__value_.__r.__words[2]) = *(_WORD *)(a2 + 760);
    HIDWORD(this[32].__r_.__value_.__r.__words[0]) = *(_DWORD *)(a2 + 772);
    LOWORD(this[32].__r_.__value_.__r.__words[1]) = *(_WORD *)(a2 + 776);
    v4 = (const std::string *)(a2 + 784);
    v5 = (void **)&this[32].__r_.__value_.__r.__words[2];
    v6 = this + 246;
    if (this[246].__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)(a2 + 5904))
    {
      if (this[246].__r_.__value_.__s.__data_[0])
      {
        std::string::operator=((std::string *)((char *)this + 784), v4);
        LOWORD(this[33].__r_.__value_.__r.__words[2]) = *(_WORD *)(a2 + 808);
        std::string::operator=((std::string *)((char *)this + 824), (const std::string *)(a2 + 824));
        LOWORD(this[35].__r_.__value_.__r.__words[1]) = *(_WORD *)(a2 + 848);
        std::string::operator=((std::string *)((char *)this + 856), (const std::string *)(a2 + 856));
        v8 = *(_OWORD *)(a2 + 896);
        v7 = *(_OWORD *)(a2 + 912);
        v9 = *(_OWORD *)(a2 + 880);
        *(std::string::size_type *)((char *)&this[38].__r_.__value_.__r.__words[1] + 5) = *(_QWORD *)(a2 + 925);
        *(_OWORD *)&this[37].__r_.__value_.__r.__words[1] = v8;
        *(_OWORD *)&this[38].__r_.__value_.__l.__data_ = v7;
        *(_OWORD *)&this[36].__r_.__value_.__r.__words[2] = v9;
        std::string::operator=(this + 39, (const std::string *)(a2 + 936));
        std::string::operator=(this + 40, (const std::string *)(a2 + 960));
        this[41].__r_.__value_.__s.__data_[0] = *(_BYTE *)(a2 + 984);
        v10 = *(_OWORD *)(a2 + 992);
        v11 = *(_OWORD *)(a2 + 1024);
        *(_OWORD *)&this[42].__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 1008);
        *(_OWORD *)&this[42].__r_.__value_.__r.__words[2] = v11;
        *(_OWORD *)&this[41].__r_.__value_.__r.__words[1] = v10;
        std::string::operator=((std::string *)((char *)this + 1040), (const std::string *)(a2 + 1040));
        std::string::operator=((std::string *)((char *)this + 1064), (const std::string *)(a2 + 1064));
        std::string::operator=((std::string *)((char *)this + 1088), (const std::string *)(a2 + 1088));
        std::string::operator=((std::string *)((char *)this + 1112), (const std::string *)(a2 + 1112));
        std::string::operator=((std::string *)((char *)this + 1136), (const std::string *)(a2 + 1136));
        this[48].__r_.__value_.__s.__data_[8] = *(_BYTE *)(a2 + 1160);
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)((char *)this + 1168), (const std::string *)(a2 + 1168));
        BambiEmergencyCallOptions::operator=((uint64_t)&this[50], a2 + 1200);
        std::string::operator=(this + 245, (const std::string *)(a2 + 5880));
      }
    }
    else if (this[246].__r_.__value_.__s.__data_[0])
    {
      IMSCallOptions::~IMSCallOptions((void **)&this[33].__r_.__value_.__r.__words[2]);
      if (this[33].__r_.__value_.__s.__data_[15] < 0)
        operator delete(*v5);
      v6->__r_.__value_.__s.__data_[0] = 0;
    }
    else
    {
      if (*(char *)(a2 + 807) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)this + 784), *(const std::string::value_type **)(a2 + 784), *(_QWORD *)(a2 + 792));
      }
      else
      {
        v12 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
        this[33].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 800);
        *(_OWORD *)v5 = v12;
      }
      IMSCallOptions::IMSCallOptions((IMSCallOptions *)&this[33].__r_.__value_.__r.__words[2], (const IMSCallOptions *)(a2 + 808));
      v6->__r_.__value_.__s.__data_[0] = 1;
    }
  }
  return this;
}

void sub_1BF0C1BCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 807) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::createManagers(IPTelephonyManager *this)
{
  IMSClientManager *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  IMSDialogEventManager *v59;
  unint64_t v60;
  IMSDialogEventManager **v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  IMSDialogEventManager **v69;
  unint64_t v70;
  char *v71;
  char *v72;
  IMSDialogEventManager *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  std::string::size_type v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  unint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  _QWORD *v134;
  std::__shared_weak_count *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *size;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  ImsLogger *v161;
  std::string __p;
  uint64_t v163;
  std::__shared_weak_count *v164;
  std::string::size_type v165;
  std::__shared_weak_count *v166;
  uint64_t v167[2];
  uint64_t v168;
  std::__shared_weak_count *v169;
  uint64_t v170;
  std::__shared_weak_count *v171;

  v2 = IMSClientManager::instance(this);
  IPTelephonyManager::setLoggingEnabled(v2, 1);
  v3 = (std::__shared_weak_count *)operator new(0x378uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DCF68;
  v5 = v3 + 1;
  BambiClient::BambiClient((BambiClient *)&v3[1]);
  v6 = (std::__shared_weak_count *)v3[7].__vftable;
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v3[6].__shared_weak_owners_ = (uint64_t)v5;
    v3[7].__vftable = (std::__shared_weak_count_vtbl *)v3;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v3[6].__shared_weak_owners_ = (uint64_t)v5;
    v3[7].__vftable = (std::__shared_weak_count_vtbl *)v3;
  }
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_14:
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 21) = v5;
  *((_QWORD *)this + 22) = v3;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *((_QWORD *)this + 21);
  *(_QWORD *)(v17 + 248) = this;
  *(_QWORD *)(v17 + 264) = (char *)this + 16;
  v18 = operator new();
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  v170 = *((_QWORD *)this + 18);
  if (!v19)
  {
    v171 = 0;
LABEL_192:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v171 = std::__shared_weak_count::lock(v19);
  if (!v171)
    goto LABEL_192;
  IPSecurityManager::IPSecurityManager(v18, &v170);
  *((_QWORD *)this + 29) = v18;
  v20 = v171;
  if (v171)
  {
    v21 = (unint64_t *)&v171->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *((_QWORD *)this + 29);
  *(_QWORD *)(*((_QWORD *)this + 21) + 808) = v23;
  if (v23)
    v24 = v23 + 8;
  else
    v24 = 0;
  v26 = (_QWORD *)*((_QWORD *)this + 31);
  v25 = *((_QWORD *)this + 32);
  if ((unint64_t)v26 >= v25)
  {
    v28 = *((_QWORD *)this + 30);
    v29 = ((uint64_t)v26 - v28) >> 3;
    if ((unint64_t)(v29 + 1) >> 61)
      goto LABEL_187;
    v30 = v25 - v28;
    v31 = v30 >> 2;
    if (v30 >> 2 <= (unint64_t)(v29 + 1))
      v31 = v29 + 1;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
      v32 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v32 = v31;
    if (v32)
      v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v32);
    else
      v33 = 0;
    v34 = (_QWORD *)(v32 + 8 * v29);
    v35 = v32 + 8 * v33;
    *v34 = v24;
    v27 = v34 + 1;
    v37 = (char *)*((_QWORD *)this + 30);
    v36 = (char *)*((_QWORD *)this + 31);
    if (v36 != v37)
    {
      do
      {
        v38 = *((_QWORD *)v36 - 1);
        v36 -= 8;
        *--v34 = v38;
      }
      while (v36 != v37);
      v36 = (char *)*((_QWORD *)this + 30);
    }
    *((_QWORD *)this + 30) = v34;
    *((_QWORD *)this + 31) = v27;
    *((_QWORD *)this + 32) = v35;
    if (v36)
      operator delete(v36);
  }
  else
  {
    *v26 = v24;
    v27 = v26 + 1;
  }
  *((_QWORD *)this + 31) = v27;
  v39 = (_QWORD *)operator new();
  v40 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  v168 = *((_QWORD *)this + 18);
  if (!v40)
  {
    v169 = 0;
LABEL_194:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v169 = std::__shared_weak_count::lock(v40);
  if (!v169)
    goto LABEL_194;
  IMSRegistrationManager::IMSRegistrationManager(v39, &v168);
  *((_QWORD *)this + 23) = v39;
  v41 = v169;
  if (v169)
  {
    v42 = (unint64_t *)&v169->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = *((_QWORD *)this + 23);
  v46 = (_QWORD *)*((_QWORD *)this + 31);
  v45 = *((_QWORD *)this + 32);
  if ((unint64_t)v46 >= v45)
  {
    v48 = *((_QWORD *)this + 30);
    v49 = ((uint64_t)v46 - v48) >> 3;
    if ((unint64_t)(v49 + 1) >> 61)
      goto LABEL_187;
    v50 = v45 - v48;
    v51 = v50 >> 2;
    if (v50 >> 2 <= (unint64_t)(v49 + 1))
      v51 = v49 + 1;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
      v52 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v52 = v51;
    if (v52)
      v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v52);
    else
      v53 = 0;
    v54 = (_QWORD *)(v52 + 8 * v49);
    v55 = v52 + 8 * v53;
    *v54 = v44;
    v47 = v54 + 1;
    v57 = (char *)*((_QWORD *)this + 30);
    v56 = (char *)*((_QWORD *)this + 31);
    if (v56 != v57)
    {
      do
      {
        v58 = *((_QWORD *)v56 - 1);
        v56 -= 8;
        *--v54 = v58;
      }
      while (v56 != v57);
      v56 = (char *)*((_QWORD *)this + 30);
    }
    *((_QWORD *)this + 30) = v54;
    *((_QWORD *)this + 31) = v47;
    *((_QWORD *)this + 32) = v55;
    if (v56)
      operator delete(v56);
  }
  else
  {
    *v46 = v44;
    v47 = v46 + 1;
  }
  *((_QWORD *)this + 31) = v47;
  v59 = (IMSDialogEventManager *)operator new();
  IMSDialogEventManager::IMSDialogEventManager(v59);
  *((_QWORD *)this + 24) = v59;
  v61 = (IMSDialogEventManager **)*((_QWORD *)this + 31);
  v60 = *((_QWORD *)this + 32);
  if ((unint64_t)v61 >= v60)
  {
    v63 = *((_QWORD *)this + 30);
    v64 = ((uint64_t)v61 - v63) >> 3;
    if ((unint64_t)(v64 + 1) >> 61)
      goto LABEL_187;
    v65 = v60 - v63;
    v66 = v65 >> 2;
    if (v65 >> 2 <= (unint64_t)(v64 + 1))
      v66 = v64 + 1;
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
      v67 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v67 = v66;
    if (v67)
      v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v67);
    else
      v68 = 0;
    v69 = (IMSDialogEventManager **)(v67 + 8 * v64);
    v70 = v67 + 8 * v68;
    *v69 = v59;
    v62 = v69 + 1;
    v72 = (char *)*((_QWORD *)this + 30);
    v71 = (char *)*((_QWORD *)this + 31);
    if (v71 != v72)
    {
      do
      {
        v73 = (IMSDialogEventManager *)*((_QWORD *)v71 - 1);
        v71 -= 8;
        *--v69 = v73;
      }
      while (v71 != v72);
      v71 = (char *)*((_QWORD *)this + 30);
    }
    *((_QWORD *)this + 30) = v69;
    *((_QWORD *)this + 31) = v62;
    *((_QWORD *)this + 32) = v70;
    if (v71)
      operator delete(v71);
  }
  else
  {
    *v61 = v59;
    v62 = v61 + 1;
  }
  *((_QWORD *)this + 31) = v62;
  v74 = operator new();
  v75 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  v167[0] = *((_QWORD *)this + 18);
  if (!v75 || (v76 = std::__shared_weak_count::lock(v75), (v167[1] = (uint64_t)v76) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v77 = v76;
  IMSCallManager::IMSCallManager(v74, v167);
  *((_QWORD *)this + 25) = v74;
  v78 = (unint64_t *)&v77->__shared_owners_;
  do
    v79 = __ldaxr(v78);
  while (__stlxr(v79 - 1, v78));
  if (!v79)
  {
    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
    std::__shared_weak_count::__release_weak(v77);
  }
  v80 = *((_QWORD *)this + 25);
  v81 = v80 + 8;
  if (!v80)
    v81 = 0;
  *(_QWORD *)(*((_QWORD *)this + 21) + 256) = v81;
  v83 = (_QWORD *)*((_QWORD *)this + 31);
  v82 = *((_QWORD *)this + 32);
  if ((unint64_t)v83 >= v82)
  {
    v85 = *((_QWORD *)this + 30);
    v86 = ((uint64_t)v83 - v85) >> 3;
    if ((unint64_t)(v86 + 1) >> 61)
      goto LABEL_187;
    v87 = v82 - v85;
    v88 = v87 >> 2;
    if (v87 >> 2 <= (unint64_t)(v86 + 1))
      v88 = v86 + 1;
    if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
      v89 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v89 = v88;
    if (v89)
      v89 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v89);
    else
      v90 = 0;
    v91 = (_QWORD *)(v89 + 8 * v86);
    v92 = v89 + 8 * v90;
    *v91 = v80;
    v84 = v91 + 1;
    v94 = (char *)*((_QWORD *)this + 30);
    v93 = (char *)*((_QWORD *)this + 31);
    if (v93 != v94)
    {
      do
      {
        v95 = *((_QWORD *)v93 - 1);
        v93 -= 8;
        *--v91 = v95;
      }
      while (v93 != v94);
      v93 = (char *)*((_QWORD *)this + 30);
    }
    *((_QWORD *)this + 30) = v91;
    *((_QWORD *)this + 31) = v84;
    *((_QWORD *)this + 32) = v92;
    if (v93)
      operator delete(v93);
  }
  else
  {
    *v83 = v80;
    v84 = v83 + 1;
  }
  *((_QWORD *)this + 31) = v84;
  v97 = *((_QWORD *)this + 18);
  v96 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  v165 = v97;
  if (!v96 || (v98 = std::__shared_weak_count::lock(v96), (v166 = v98) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v99 = v98;
  v100 = (std::__shared_weak_count *)operator new(0x220uLL);
  v100->__shared_owners_ = 0;
  v101 = (unint64_t *)&v100->__shared_owners_;
  v100->__shared_weak_owners_ = 0;
  v100->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DCFB8;
  v102 = v100 + 1;
  __p.__r_.__value_.__r.__words[0] = v97;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v99;
  v165 = 0;
  v166 = 0;
  IMSSMSManager::IMSSMSManager((uint64_t)&v100[1], &__p);
  v103 = (unint64_t *)&v99->__shared_owners_;
  do
    v104 = __ldaxr(v103);
  while (__stlxr(v104 - 1, v103));
  if (!v104)
  {
    ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
    std::__shared_weak_count::__release_weak(v99);
  }
  shared_weak_owners = (std::__shared_weak_count *)v100[2].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_127;
    do
      v106 = __ldxr(v101);
    while (__stxr(v106 + 1, v101));
    v107 = (unint64_t *)&v100->__shared_weak_owners_;
    do
      v108 = __ldxr(v107);
    while (__stxr(v108 + 1, v107));
    v100[2].__shared_owners_ = (uint64_t)v102;
    v100[2].__shared_weak_owners_ = (uint64_t)v100;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v109 = __ldxr(v101);
    while (__stxr(v109 + 1, v101));
    v110 = (unint64_t *)&v100->__shared_weak_owners_;
    do
      v111 = __ldxr(v110);
    while (__stxr(v111 + 1, v110));
    v100[2].__shared_owners_ = (uint64_t)v102;
    v100[2].__shared_weak_owners_ = (uint64_t)v100;
  }
  do
    v112 = __ldaxr(v101);
  while (__stlxr(v112 - 1, v101));
  if (!v112)
  {
    ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
    std::__shared_weak_count::__release_weak(v100);
  }
LABEL_127:
  v113 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 26) = v102;
  *((_QWORD *)this + 27) = v100;
  if (v113)
  {
    v114 = (unint64_t *)&v113->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v166;
  if (v166)
  {
    v117 = (unint64_t *)&v166->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = *((_QWORD *)this + 26);
  v121 = (_QWORD *)*((_QWORD *)this + 31);
  v120 = *((_QWORD *)this + 32);
  if ((unint64_t)v121 < v120)
  {
    *v121 = v119;
    v122 = v121 + 1;
    goto LABEL_153;
  }
  v123 = *((_QWORD *)this + 30);
  v124 = ((uint64_t)v121 - v123) >> 3;
  if ((unint64_t)(v124 + 1) >> 61)
LABEL_187:
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  v125 = v120 - v123;
  v126 = v125 >> 2;
  if (v125 >> 2 <= (unint64_t)(v124 + 1))
    v126 = v124 + 1;
  if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8)
    v127 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v127 = v126;
  if (v127)
    v127 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v127);
  else
    v128 = 0;
  v129 = (_QWORD *)(v127 + 8 * v124);
  v130 = v127 + 8 * v128;
  *v129 = v119;
  v122 = v129 + 1;
  v132 = (char *)*((_QWORD *)this + 30);
  v131 = (char *)*((_QWORD *)this + 31);
  if (v131 != v132)
  {
    do
    {
      v133 = *((_QWORD *)v131 - 1);
      v131 -= 8;
      *--v129 = v133;
    }
    while (v131 != v132);
    v131 = (char *)*((_QWORD *)this + 30);
  }
  *((_QWORD *)this + 30) = v129;
  *((_QWORD *)this + 31) = v122;
  *((_QWORD *)this + 32) = v130;
  if (v131)
    operator delete(v131);
LABEL_153:
  *((_QWORD *)this + 31) = v122;
  v134 = (_QWORD *)operator new();
  v135 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (!v135 || (v136 = *((_QWORD *)this + 18), (v137 = std::__shared_weak_count::lock(v135)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v138 = v137;
  *v134 = &off_1E78E4D38;
  v134[1] = &unk_1E78E4D80;
  v134[2] = v136;
  v134[3] = v137;
  v139 = (unint64_t *)&v137->__shared_owners_;
  do
    v140 = __ldxr(v139);
  while (__stxr(v140 + 1, v139));
  v134[6] = 0;
  v134[5] = 0;
  v134[4] = v134 + 5;
  *((_QWORD *)this + 28) = v134;
  do
    v141 = __ldaxr(v139);
  while (__stlxr(v141 - 1, v139));
  if (!v141)
  {
    ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
    std::__shared_weak_count::__release_weak(v138);
  }
  v142 = (_QWORD *)operator new();
  *v142 = &off_1E78C1D60;
  v142[1] = 0;
  v142[4] = 0;
  v142[2] = 0;
  v142[3] = v142 + 4;
  v142[7] = 0;
  v142[8] = 0;
  v142[9] = 0;
  v142[5] = 0;
  v142[6] = v142 + 7;
  *((_BYTE *)v142 + 72) = 1;
  *((_QWORD *)this + 41) = v142;
  v143 = *((_QWORD *)this + 21);
  *(_QWORD *)(v143 + 240) = v142;
  v144 = *((_QWORD *)this + 25);
  v145 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  v163 = v143;
  v164 = v145;
  if (v145)
  {
    v146 = (unint64_t *)&v145->__shared_owners_;
    do
      v147 = __ldxr(v146);
    while (__stxr(v147 + 1, v146));
  }
  IMSMetricsManager::create(v144, &v163, (std::__shared_weak_count **)&__p);
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 288, (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v149 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v151 = v164;
  if (v164)
  {
    v152 = (unint64_t *)&v164->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v154 = *((_QWORD *)this + 21);
  v155 = *((_QWORD *)this + 36);
  v156 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (v156)
  {
    v157 = (unint64_t *)&v156->__shared_owners_;
    do
      v158 = __ldxr(v157);
    while (__stxr(v158 + 1, v157));
    std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)(v154 + 648), v155, (uint64_t)v156);
    do
      v159 = __ldaxr(v157);
    while (__stlxr(v159 - 1, v157));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  else
  {
    std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)(v154 + 648), v155, 0);
  }
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v160 = ims::_logger;
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_19_6);
  ImsLogger::setPriority(v160, 8, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v161 = (ImsLogger *)ims::_logger;
  std::string::basic_string[abi:ne180100]<0>(&__p, "oslog:ims");
  ImsLogger::addDestination(v161, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF0C2680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::IPTelephonyManager(IPTelephonyManager *this)
{
  std::string __p;

  *(_QWORD *)this = &off_1E78DCE38;
  *((_QWORD *)this + 1) = &unk_1E78DCED8;
  *((_QWORD *)this + 2) = &unk_1E78DCF00;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ipt");
  ImsLogContainer::ImsLogContainer((uint64_t)this + 24, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *(_QWORD *)this = &off_1E78DCB18;
  *((_QWORD *)this + 1) = &unk_1E78DCC00;
  *((_QWORD *)this + 2) = &unk_1E78DCC28;
  *((_QWORD *)this + 3) = &unk_1E78DCC40;
  *((_QWORD *)this + 16) = &unk_1E78DCCA0;
  *((_QWORD *)this + 17) = &unk_1E78DCCC8;
  *((_DWORD *)this + 40) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = (char *)this + 264;
  *((_QWORD *)this + 34) = (char *)this + 264;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = (char *)this + 312;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 40) = 0;
  IMSiRatClient::IMSiRatClient((IPTelephonyManager *)((char *)this + 344));
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = (char *)this + 376;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = (char *)this + 400;
}

void sub_1BF0C28A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v21;
  std::__shared_weak_count *v22;

  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(char **)(v15 + 312));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v15 + 288);
  std::__list_imp<unsigned long long>::clear(v19);
  v21 = *(void **)(v15 + 240);
  if (v21)
  {
    *(_QWORD *)(v15 + 248) = v21;
    operator delete(v21);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v18);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v17);
  v22 = *(std::__shared_weak_count **)(v15 + 152);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  ImsLogContainer::~ImsLogContainer(v16);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::setLoggingEnabled(IPTelephonyManager *this, int a2)
{
  uint64_t v3;
  ImsLogger *v4;
  std::string __p;

  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  if (a2)
  {
    if (*(_BYTE *)(ims::_logger + 484))
      return;
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    *(_BYTE *)(ims::_logger + 484) = 1;
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ims::_logger;
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_19_6);
    ImsLogger::setPriority(v3, 8, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    ImsLogger::clearDestinations((ImsLogger *)ims::_logger);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = (ImsLogger *)ims::_logger;
    std::string::basic_string[abi:ne180100]<0>(&__p, "oslog:ims");
    ImsLogger::addDestination(v4, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    *(_BYTE *)(ims::_logger + 484) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "ImsLoggingEnabled");
  IPTelephonyPrefs::setBoolValueInRuntimeConfig((uint64_t)&__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF0C2A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::~IPTelephonyManager(IPTelephonyManager *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)this = &off_1E78DCB18;
  *((_QWORD *)this + 1) = &unk_1E78DCC00;
  *((_QWORD *)this + 2) = &unk_1E78DCC28;
  *((_QWORD *)this + 3) = &unk_1E78DCC40;
  *((_QWORD *)this + 16) = &unk_1E78DCCA0;
  *((_QWORD *)this + 17) = &unk_1E78DCCC8;
  IPTelephonyManager::deinitialize((uint64_t)this, (uint64_t)&IMSClientManager::kEmergencyStack, 1, 1);
  v2 = *((_QWORD *)this + 29);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 29) = 0;
  }
  v3 = *((_QWORD *)this + 23);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    *((_QWORD *)this + 23) = 0;
  }
  v4 = *((_QWORD *)this + 25);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    *((_QWORD *)this + 25) = 0;
  }
  v5 = *((_QWORD *)this + 24);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    *((_QWORD *)this + 24) = 0;
  }
  *((_QWORD *)this + 26) = 0;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *((_QWORD *)this + 28);
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    *((_QWORD *)this + 28) = 0;
  }
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)this + 21) + 648), 0, 0);
  v10 = *((_QWORD *)this + 36);
  v11 = v10 + 152;
  for (i = *(_QWORD *)(v10 + 160); i != v11; i = *(_QWORD *)(i + 8))
    (*(void (**)(_QWORD))(**(_QWORD **)(i + 16) + 16))(*(_QWORD *)(i + 16));
  v13 = *((_QWORD *)this + 41);
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    *((_QWORD *)this + 41) = 0;
  }
  std::__tree<std::__value_type<std::string,DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DeferredInit>>>::destroy(*((_QWORD **)this + 50));
  std::__tree<std::string>::destroy((uint64_t)this + 368, *((char **)this + 47));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 352);
  IMSiRatClient::~IMSiRatClient((char ***)this + 43);
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 39));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 288);
  std::__list_imp<unsigned long long>::clear((_QWORD *)this + 33);
  v14 = (void *)*((_QWORD *)this + 30);
  if (v14)
  {
    *((_QWORD *)this + 31) = v14;
    operator delete(v14);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 208);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 168);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  *((_QWORD *)this + 3) = off_1E78CFE68;
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
}

{
  IPTelephonyManager::~IPTelephonyManager(this);
  JUMPOUT(0x1C3B87100);
}

void IPTelephonyManager::deinitialize(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const void **v15;
  unsigned __int8 *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v8 = a1 + 264;
  v9 = *(uint64_t **)(a1 + 272);
  if (v9 != (uint64_t *)(a1 + 264))
  {
    do
    {
      v10 = v9[2];
      if (v10)
      {
        v11 = *(unsigned __int8 *)(v10 + 55);
        if ((v11 & 0x80u) == 0)
          v12 = *(unsigned __int8 *)(v10 + 55);
        else
          v12 = *(_QWORD *)(v10 + 40);
        v13 = *(unsigned __int8 *)(a2 + 23);
        v14 = (char)v13;
        if ((v13 & 0x80u) != 0)
          v13 = *(_QWORD *)(a2 + 8);
        if (v12 == v13)
        {
          v15 = (const void **)(v10 + 32);
          if (v14 >= 0)
            v16 = (unsigned __int8 *)a2;
          else
            v16 = *(unsigned __int8 **)a2;
          if ((v11 & 0x80) != 0)
          {
            if (!memcmp(*v15, v16, *(_QWORD *)(v10 + 40)))
            {
LABEL_21:
              v18 = AuthQueueItem<BambiClient>::~AuthQueueItem((uint64_t *)v10);
              MEMORY[0x1C3B87100](v18, 0x1032C403FAF6B48);
              v19 = *v9;
              v17 = (uint64_t *)v9[1];
              *(_QWORD *)(v19 + 8) = v17;
              *(_QWORD *)v9[1] = v19;
              --*(_QWORD *)(a1 + 280);
              operator delete(v9);
              goto LABEL_19;
            }
          }
          else
          {
            if (!*(_BYTE *)(v10 + 55))
              goto LABEL_21;
            while (*(unsigned __int8 *)v15 == *v16)
            {
              v15 = (const void **)((char *)v15 + 1);
              ++v16;
              if (!--v11)
                goto LABEL_21;
            }
          }
        }
      }
      v17 = (uint64_t *)v9[1];
LABEL_19:
      v9 = v17;
    }
    while (v17 != (uint64_t *)v8);
  }
  if (IMSRegistrationManager::getRegistrationState(*(_QWORD *)(a1 + 184), (void **)a2))
  {
    v20 = *(_QWORD *)(a1 + 288);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 168) + 192))(&v24, *(_QWORD *)(a1 + 168), a2);
    IMSMetricsManager::logDeRegistration(v20, &v24);
    v21 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  BambiClient::deinitializeStack(*(_QWORD **)(a1 + 168), a2, a4 ^ 1, a3);
  IPTelephonyManager::deinitializeNasClient(a1, (void **)a2);
}

void sub_1BF0C2E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IPTelephonyManager::~IPTelephonyManager(IPTelephonyManager *this)
{
  IPTelephonyManager::~IPTelephonyManager((IPTelephonyManager *)((char *)this - 24));
}

{
  IPTelephonyManager::~IPTelephonyManager((IPTelephonyManager *)((char *)this - 128));
}

{
  IPTelephonyManager::~IPTelephonyManager((IPTelephonyManager *)((char *)this - 24));
  JUMPOUT(0x1C3B87100);
}

{
  IPTelephonyManager::~IPTelephonyManager((IPTelephonyManager *)((char *)this - 128));
  JUMPOUT(0x1C3B87100);
}

void IPTelephonyManager::getBBServerConnection(IPTelephonyManager *this@<X0>, _QWORD *a2@<X8>)
{
  NSObject *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v4 = sImsDispatchQueue;
  if (!sImsDispatchQueue)
  {
    v4 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v4;
  }
  dispatch_assert_queue_V2(v4);
  v5 = *((_QWORD *)this + 45);
  *a2 = *((_QWORD *)this + 44);
  a2[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
}

void IPTelephonyManager::addCallEndInfo(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v2;
  xpc_object_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 288);
  v3 = *a2;
  v4 = v3;
  if (v3)
  {
    xpc_retain(v3);
  }
  else
  {
    v3 = xpc_null_create();
    v4 = v3;
  }
  IMSMetricsManager::addCallEndInfo(v2, &v4);
  xpc_release(v3);
}

void sub_1BF0C2FDC(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::initializeNasClient(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  NSObject *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  dispatch_object_t object[3];
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;

  v4 = a1[41];
  if (v4)
  {
    v6 = a1[18];
    v5 = (std::__shared_weak_count *)a1[19];
    object[1] = v6;
    if (!v5 || (v10 = std::__shared_weak_count::lock(v5), (object[2] = v10) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v11 = (std::__shared_weak_count *)v10;
    v12 = (std::__shared_weak_count *)&v6[17];
    if (!v6)
      v12 = 0;
    v18 = v12;
    v19 = (std::__shared_weak_count *)v10;
    v13 = (unint64_t *)&v10[2];
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    IMSClientManager::instance((IMSClientManager *)v10);
    IMSClientManager::queue(object);
    IMSNasDeviceClient::initializeNasClient(v4, a2, a3, &v18, object, a4);
    if (object[0])
      dispatch_release(object[0]);
    if (v19)
      std::__shared_weak_count::__release_weak(v19);
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF0C30F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (object)
    dispatch_release(object);
  if (a14)
    std::__shared_weak_count::__release_weak(a14);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::deinitializeNasClient(uint64_t a1, void **a2)
{
  uint64_t v3;
  uint64_t **v5;
  void **v6;
  uint64_t *v7;
  uint64_t v8;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;

  v3 = *(_QWORD *)(a1 + 328);
  if (v3)
  {
    IMSNasDeviceClient::deinitializeNasClient(v3, a2);
    std::__tree<std::string>::__erase_unique<std::string>((uint64_t **)(a1 + 368), a2);
    v5 = (uint64_t **)(a1 + 392);
    v6 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 392, a2);
    if ((void **)(a1 + 400) != v6)
    {
      v7 = (uint64_t *)v6;
      std::string::basic_string[abi:ne180100]<0>(v11, "ipt");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_19_6);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::warn(ims::_logger, (uint64_t)v11, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"We were waiting to initialize stack ", 36);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 32))(v8, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)", but it is being deinitialized!", 32);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (v10 < 0)
        operator delete(__p[0]);
      if (v12 < 0)
        operator delete(v11[0]);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v5, v7);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,DeferredInit>,0>((uint64_t)(v7 + 4));
      operator delete(v7);
    }
  }
}

void sub_1BF0C3278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::nasSystemInitialized()
{
  uint64_t v0;
  void **v1;
  void **v2;
  uint64_t v3;
  void **v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void *v9[637];
  void *v10[2];
  char v11;
  void *v12[2];
  char v13;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v3 = v0;
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(v0 + 368), v1, (uint64_t)v1);
  v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v3 + 392, v2);
  if ((void **)(v3 + 400) != v4)
  {
    v5 = v4;
    std::string::basic_string[abi:ne180100]<0>(v12, "ipt");
    std::string::basic_string[abi:ne180100]<0>(v10, (char *)&str_19_6);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, (uint64_t)v12, (uint64_t)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Continuing deferred initialization for stack ", 45);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 32))(v6, v2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (v11 < 0)
      operator delete(v10[0]);
    if (v13 < 0)
      operator delete(v12[0]);
    if (*((_BYTE *)v5 + 5960))
    {
      IMSCallOptions::IMSCallOptions((IMSCallOptions *)v9, (const IMSCallOptions *)(v5 + 108));
      IMSCallManager::initializeEmergencyCall();
      IMSCallOptions::~IMSCallOptions(v9);
    }
    else
    {
      IPTelephonyManager::_initializeFromSIM();
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer((uint64_t **)(v3 + 392), (uint64_t *)v5);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,DeferredInit>,0>((uint64_t)(v5 + 4));
    v8 = v5;
    goto LABEL_14;
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "ipt");
  std::string::basic_string[abi:ne180100]<0>(v10, (char *)&str_19_6);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::error(ims::_logger, (uint64_t)v12, (uint64_t)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"The NAS system has been initialized for an untracked stack ", 59);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 32))(v7, v2);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v11 < 0)
    operator delete(v10[0]);
  if (v13 < 0)
  {
    v8 = (void **)v12[0];
LABEL_14:
    operator delete(v8);
  }
}

void sub_1BF0C3510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  if (*(char *)(v10 + 47) < 0)
    operator delete(*(void **)(v11 - 88));
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::_initializeFromSIM()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  ImsPrefs *v14;
  ImsPrefs *v15;
  void **DeviceIMEIKey;
  ImsPrefs *v17;
  ImsPrefs *v18;
  void **FeatureTagsEnabledKey;
  void *v20;
  std::string::size_type size;
  ImsPrefs *v22;
  ImsPrefs *v23;
  void **DisableDeviceSVNKey;
  void *v25;
  ImsPrefs *v26;
  void **v27;
  void *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  ImsOutStream *v32;
  SipStack *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  ImsPrefs *v37;
  void **PcscfOverrideKey;
  void *v39;
  uint64_t v40;
  uint64_t i;
  uint64_t v42;
  ImsPrefs *v43;
  void **ImpuKey;
  std::vector<std::string>::pointer value_high;
  std::string *v46;
  std::string *j;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  ImsPrefs *v51;
  void **ImpiKey;
  std::string::size_type v53;
  uint64_t v54;
  std::string::size_type v55;
  uint64_t v56;
  ImsPrefs *v57;
  void **DomainKey;
  std::string::size_type v59;
  char v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::string::size_type v64;
  SipStack *v65;
  SipStack *v66;
  unint64_t *v67;
  unint64_t v68;
  ImsPrefs *v69;
  void **CompressIPv6AddressesKey;
  void *v71;
  uint64_t v72;
  ImsPrefs *v73;
  void **LegacyImpuRankKey;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  std::string *v82;
  std::string *v83;
  char v84;
  _BYTE *v85;
  BambiPrefsManager *v86;
  uint64_t **v87;
  uint64_t *v88;
  std::string::size_type v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t k;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const ImsPrefs *v104;
  std::string *v105;
  uint64_t v106;
  std::vector<std::string>::pointer end;
  std::string *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  ImsPrefs *v112;
  void **EnableATCommandModeKey;
  void *v114;
  uint64_t v115;
  uint64_t m;
  const ImsPrefs *v117;
  __int128 v118;
  std::string::size_type v119;
  std::string::size_type v120;
  ImsPrefs *v121;
  void **MediaAddressTypeKey;
  uint64_t v123;
  _DWORD *v124;
  int v125;
  ImsPrefs *v126;
  void **v127;
  void *v128;
  ImsPrefs *v129;
  void **v130;
  std::string::size_type v131;
  std::string *v132;
  ImsPrefs *v133;
  void **v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  const char *v139;
  uint64_t v140;
  _BOOL4 isWifi;
  int v142;
  ImsPrefs *v143;
  void **UseAPMediaStackKey;
  void *v145;
  ImsPrefs *v146;
  void **DropIncomingKey;
  std::string::size_type v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  std::string::size_type v156;
  std::string::size_type v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  SipStack *v169;
  ImsPrefs *v170;
  void **DropOutgoingKey;
  ims::StackConfig *v172;
  std::string::size_type v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  std::string::size_type v181;
  std::string::size_type v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  _QWORD *v194;
  _OWORD *v195;
  char *v196;
  std::string::size_type v197;
  unsigned __int8 *v198;
  unsigned __int8 *v199;
  int v200;
  unsigned __int8 *v201;
  unsigned __int8 *v202;
  void **v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  ImsPrefs *v207;
  void **DisplayNameKey;
  std::string::size_type v209;
  char v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t *v216;
  SipStack *v217;
  void *v218[3];
  std::string v219;
  std::string v220;
  __int128 v221;
  char v222;
  std::string v223;
  std::string v224;
  __int128 v225;
  char v226;
  std::string v227;
  std::string v228;
  __int128 v229;
  char v230;
  ims::Services *v231;
  std::string v232;
  std::string v233;
  __int128 *v234;
  __int128 *v235;
  int v236;
  int v237;
  std::string v238;
  unsigned __int8 v239[24];
  std::string v240;
  std::string v241;
  std::string *v242;
  std::string *v243;
  unint64_t v244;
  std::string *v245;
  uint64_t v246;
  int v247;
  BOOL v248;
  char v249;
  std::string v250;
  std::string v251;
  BOOL v252;
  BOOL v253;
  std::string v254[2];
  std::string v255[2];
  __int16 v256;
  int v257;
  __int16 v258;
  char v259;
  void (**v260)(ImsResult *__hidden);
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD v269[10];
  uint64_t v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  uint64_t v285;
  uint64_t v286;
  void (**v287)(SipParameterMap *__hidden);
  _QWORD *v288;
  _QWORD v289[5];
  _QWORD v290[3];
  std::string v291;
  std::string v292;
  std::string v293;
  SipStack *v294;
  std::__shared_weak_count *v295;
  std::string v296;
  std::string v297;
  int v298;
  std::string v299;
  std::string v300;
  void *v301;
  uint64_t v302;
  uint64_t v303;
  void *__p[2];
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  uint64_t v329;
  char v330;
  std::string v331;
  std::string v332[37];
  std::string v333[26];
  char v334;
  int v335;
  std::string v336;
  int v337;
  BOOL v338;
  std::vector<std::string> __s;
  int v340;
  uint64_t v341;
  std::string v342;
  __int128 v343;
  uint64_t v344;
  std::string v345[3];
  std::string v346;
  std::string v347;
  __int128 v348;
  char v349;
  std::string v350;
  std::string v351;
  __int128 v352;
  char v353;
  std::string v354;
  std::string v355;
  __int128 v356;
  char v357;
  BOOL v358;
  char v359;
  char v360;
  std::string v361;
  std::string v362;
  std::string v363[3];
  std::string v364;
  std::string v365;
  std::string v366;
  SipStack *v367[2];
  std::string __str;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v5 = (uint64_t *)v0;
  v295 = 0;
  v294 = 0;
  (*(void (**)(SipStack **__return_ptr))(**(_QWORD **)(v0 + 168) + 192))(&v294);
  v216 = v5;
  v7 = v5[3];
  v6 = v5 + 3;
  v8 = (*(uint64_t (**)(uint64_t *))(v7 + 64))(v6);
  (*(void (**)(uint64_t *, uint64_t))(*v6 + 16))(v6, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"got initialization request for ", 31);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v4);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  v9 = SipStack::prefs(v294);
  std::string::basic_string[abi:ne180100]<0>(__p, "MNC");
  ImsPrefs::setRuntimeVar(v9, (uint64_t)__p, (const std::string *)(v2 + 360), 1);
  if (SBYTE7(v305) < 0)
    operator delete(__p[0]);
  v10 = SipStack::prefs(v294);
  std::string::basic_string[abi:ne180100]<0>(__p, "MCC");
  ImsPrefs::setRuntimeVar(v10, (uint64_t)__p, (const std::string *)(v2 + 336), 1);
  if (SBYTE7(v305) < 0)
    operator delete(__p[0]);
  v11 = SipStack::prefs(v294);
  std::string::basic_string[abi:ne180100]<0>(__p, "MDN");
  ImsPrefs::setRuntimeVar(v11, (uint64_t)__p, (const std::string *)(v2 + 384), 1);
  if (SBYTE7(v305) < 0)
    operator delete(__p[0]);
  v12 = SipStack::prefs(v294);
  std::string::basic_string[abi:ne180100]<0>(__p, "DEVICE_ID");
  ImsPrefs::setRuntimeVar(v12, (uint64_t)__p, (const std::string *)(v2 + 616), 1);
  if (SBYTE7(v305) < 0)
    operator delete(__p[0]);
  v13 = SipStack::prefs(v294);
  std::string::basic_string[abi:ne180100]<0>(__p, "DEVICE_REF_ID");
  ImsPrefs::setRuntimeVar(v13, (uint64_t)__p, (const std::string *)(v2 + 640), 1);
  if (SBYTE7(v305) < 0)
    operator delete(__p[0]);
  memset(&v293, 0, sizeof(v293));
  v14 = (ImsPrefs *)SipStack::prefs(v294);
  v15 = (ImsPrefs *)SipStack::prefs(v294);
  DeviceIMEIKey = (void **)ImsPrefs::getDeviceIMEIKey(v15);
  ImsPrefs::stringValue(v14, DeviceIMEIKey);
  memset(&v292, 0, sizeof(v292));
  v17 = (ImsPrefs *)SipStack::prefs(v294);
  v18 = (ImsPrefs *)SipStack::prefs(v294);
  FeatureTagsEnabledKey = (void **)ImsPrefs::getFeatureTagsEnabledKey(v18);
  v20 = ImsPrefs::prefWithKey(v17, FeatureTagsEnabledKey);
  if (v20)
  {
    if (!(*(unsigned int (**)(void *))(*(_QWORD *)v20 + 40))(v20))
      goto LABEL_24;
  }
  else if (!*((_BYTE *)FeatureTagsEnabledKey + 57))
  {
    goto LABEL_24;
  }
  size = HIBYTE(v293.__r_.__value_.__r.__words[2]);
  if ((v293.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v293.__r_.__value_.__l.__size_;
  if (!size)
    std::string::operator=(&v293, (const std::string *)(v2 + 616));
  v22 = (ImsPrefs *)SipStack::prefs(v294);
  v23 = (ImsPrefs *)SipStack::prefs(v294);
  DisableDeviceSVNKey = (void **)ImsPrefs::getDisableDeviceSVNKey(v23);
  v25 = ImsPrefs::prefWithKey(v22, DisableDeviceSVNKey);
  if (!v25)
  {
    if (*((_BYTE *)DisableDeviceSVNKey + 57))
      goto LABEL_24;
    goto LABEL_23;
  }
  if (((*(uint64_t (**)(void *))(*(_QWORD *)v25 + 40))(v25) & 1) == 0)
LABEL_23:
    std::string::operator=(&v292, (const std::string *)(v2 + 664));
LABEL_24:
  memset(&v291, 0, sizeof(v291));
  v290[2] = 257;
  v289[2] = 257;
  v286 = 0;
  v271 = 0u;
  memset(&v269[2], 0, 48);
  *(_QWORD *)&v271 = 0;
  v270 = 0;
  v269[8] = &off_1E78B82D8;
  v269[9] = &v270;
  v269[1] = &off_1E78D08F8;
  v269[0] = &off_1E78BFCE8;
  v282 = 0u;
  v283 = 0u;
  v284 = 0u;
  v272 = 0u;
  v273 = 0u;
  v274 = 0u;
  v275 = 0u;
  v276 = 0u;
  v277 = 0u;
  v278 = 0u;
  v279 = 0u;
  v280 = 0u;
  v281 = 0u;
  v285 = 0;
  v287 = &off_1E78B82D8;
  v289[1] = 0;
  v289[0] = 0;
  v288 = v289;
  v290[1] = 0;
  v290[0] = 0;
  v289[3] = &off_1E78B82D8;
  v289[4] = v290;
  WORD4(v271) = 257;
  v263 = 0;
  v262 = 0;
  v268 = 0;
  v266 = 0;
  v267 = 0;
  v260 = &off_1E78B7238;
  v261 = &_bambiDomain;
  v265 = 0;
  v264 = 0;
  bzero(v218, 0x2E0uLL);
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)&v219);
  memset(v255, 0, sizeof(v255));
  memset(v254, 0, sizeof(v254));
  v256 = 257;
  v257 = 0;
  v258 = 256;
  v259 = 1;
  ims::NetworkConfig::operator=((uint64_t)&v219, v2 + 24);
  std::string::operator=(v254, (const std::string *)(v2 + 616));
  std::string::operator=(&v254[1], (const std::string *)(v2 + 640));
  std::string::operator=(v255, (const std::string *)(v2 + 664));
  std::string::operator=(&v255[1], (const std::string *)(v2 + 688));
  v256 = *(_WORD *)(v2 + 712);
  v257 = *(_DWORD *)(v2 + 724);
  LOBYTE(v258) = *(_BYTE *)(v2 + 728);
  if ((_BYTE)v256)
  {
    v26 = (ImsPrefs *)SipStack::prefs(v294);
    v27 = (void **)ImsPrefs::getUseDummyImeiCheckDigitKey(v26);
    v28 = ImsPrefs::prefWithKey(v26, v27);
    if (v28)
      v29 = (*(uint64_t (**)(void *))(*(_QWORD *)v28 + 40))(v28);
    else
      v29 = *((_BYTE *)v27 + 57) != 0;
    ims::makeUrnFromImei((uint64_t)&v293, (uint64_t)&v292, v29, (uint64_t)v269, (uint64_t)__p);
    ImsResult::operator=((uint64_t)&v260, (uint64_t)__p);
  }
  else
  {
    ims::makeUrnFromUuid((uint64_t)&v293, (uint64_t)v269, (uint64_t)__p);
    ImsResult::operator=((uint64_t)&v260, (uint64_t)__p);
  }
  ImsResult::~ImsResult((ImsResult *)__p);
  if (((*(uint64_t (**)(uint64_t *, _QWORD))(*v261 + 24))(v261, v262) & 1) == 0)
  {
    SipUri::asString((uint64_t)v269, (uint64_t)&v291, 0);
    v30 = SipStack::prefs(v294);
    std::string::basic_string[abi:ne180100]<0>(__p, "INSTANCE_URN");
    ImsPrefs::setRuntimeVar(v30, (uint64_t)__p, &v291, 1);
    if (SBYTE7(v305) < 0)
      operator delete(__p[0]);
  }
  v31 = SipStack::prefs(v294);
  std::string::basic_string[abi:ne180100]<0>(__p, "ipt");
  std::string::basic_string[abi:ne180100]<0>(&__s, (char *)&str_19_6);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v32 = (ImsOutStream *)ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&__s);
  ImsPrefs::logRuntimeVars(v31, v32);
  if (SHIBYTE(__s.__end_cap_.__value_) < 0)
    operator delete(__s.__begin_);
  if (SBYTE7(v305) < 0)
    operator delete(__p[0]);
  v33 = v294;
  v34 = v295;
  if (v295)
  {
    p_shared_owners = (unint64_t *)&v295->__shared_owners_;
    do
      v36 = __ldxr(p_shared_owners);
    while (__stxr(v36 + 1, p_shared_owners));
  }
  __p[1] = 0;
  __p[0] = 0;
  *(_QWORD *)&v305 = 0;
  v37 = (ImsPrefs *)SipStack::prefs(v33);
  PcscfOverrideKey = (void **)ImsPrefs::getPcscfOverrideKey(v37);
  ImsPrefs::stringValue(v37, PcscfOverrideKey);
  v39 = (void *)BYTE7(v305);
  if (SBYTE7(v305) < 0)
    v39 = __p[1];
  if (v39)
  {
    v40 = (uint64_t)v245;
    for (i = v246; i != v40; i -= 24)
    {
      if (*(char *)(i - 1) < 0)
        operator delete(*(void **)(i - 24));
    }
    v246 = v40;
    ims::tokenize((std::string *)__p, (uint64_t *)&v245, 0x2Cu);
    std::string::basic_string[abi:ne180100]<0>(&__s, "ipt");
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&str_19_6);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v42 = ImsLogger::debug(ims::_logger, (uint64_t)&__s, (uint64_t)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)"using P-CSCF list from prefs", 28);
    *(_BYTE *)(v42 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v42 + 17) = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__s.__end_cap_.__value_) < 0)
      operator delete(__s.__begin_);
  }
  memset(&__s, 0, sizeof(__s));
  v43 = (ImsPrefs *)SipStack::prefs(v33);
  ImpuKey = (void **)ImsPrefs::getImpuKey(v43);
  ImsPrefs::stringValue(v43, ImpuKey);
  value_high = (std::vector<std::string>::pointer)HIBYTE(__s.__end_cap_.__value_);
  if (SHIBYTE(__s.__end_cap_.__value_) < 0)
    value_high = __s.__end_;
  if (value_high)
  {
    v46 = v242;
    for (j = v243; j != v46; --j)
    {
      if (SHIBYTE(j[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(j[-1].__r_.__value_.__l.__data_);
    }
    v243 = v46;
    if ((unint64_t)v46 >= v244)
    {
      v49 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v242, (__int128 *)&__s);
    }
    else
    {
      if (SHIBYTE(__s.__end_cap_.__value_) < 0)
      {
        std::string::__init_copy_ctor_external(v46, (const std::string::value_type *)__s.__begin_, (std::string::size_type)__s.__end_);
      }
      else
      {
        v48 = *(_OWORD *)&__s.__begin_;
        v46->__r_.__value_.__r.__words[2] = (std::string::size_type)__s.__end_cap_.__value_;
        *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v48;
      }
      v49 = (uint64_t)&v46[1];
    }
    v243 = (std::string *)v49;
    std::string::basic_string[abi:ne180100]<0>(&__str, "ipt");
    std::string::basic_string[abi:ne180100]<0>(&v366, (char *)&str_19_6);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v50 = ImsLogger::debug(ims::_logger, (uint64_t)&__str, (uint64_t)&v366);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v50 + 8), (uint64_t)"using IMPU list from prefs", 26);
    *(_BYTE *)(v50 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v50 + 17) = 0;
    if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v366.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  memset(&__str, 0, sizeof(__str));
  v51 = (ImsPrefs *)SipStack::prefs(v33);
  ImpiKey = (void **)ImsPrefs::getImpiKey(v51);
  ImsPrefs::stringValue(v51, ImpiKey);
  v53 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v53 = __str.__r_.__value_.__l.__size_;
  if (v53)
  {
    std::string::operator=(&v240, &__str);
    std::string::basic_string[abi:ne180100]<0>(&v366, "ipt");
    std::string::basic_string[abi:ne180100]<0>(&v365, (char *)&str_19_6);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v54 = ImsLogger::debug(ims::_logger, (uint64_t)&v366, (uint64_t)&v365);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)"using IMPI list from prefs", 26);
    *(_BYTE *)(v54 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v54 + 17) = 0;
    if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v365.__r_.__value_.__l.__data_);
    if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v366.__r_.__value_.__l.__data_);
  }
  v55 = HIBYTE(v240.__r_.__value_.__r.__words[2]);
  if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v55 = v240.__r_.__value_.__l.__size_;
  if (!v55)
  {
    std::string::operator=(&v240, (const std::string *)&__s);
    std::string::basic_string[abi:ne180100]<0>(&v366, "ipt");
    std::string::basic_string[abi:ne180100]<0>(&v365, (char *)&str_19_6);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v56 = ImsLogger::debug(ims::_logger, (uint64_t)&v366, (uint64_t)&v365);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v56 + 8), (uint64_t)"no IMPI specified.  Using IMPU for IMPI", 39);
    *(_BYTE *)(v56 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v56 + 64))(v56, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v56 + 17) = 0;
    if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v365.__r_.__value_.__l.__data_);
    if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v366.__r_.__value_.__l.__data_);
  }
  memset(&v366, 0, sizeof(v366));
  v57 = (ImsPrefs *)SipStack::prefs(v33);
  DomainKey = (void **)ImsPrefs::getDomainKey(v57);
  ImsPrefs::stringValue(v57, DomainKey);
  v59 = HIBYTE(v366.__r_.__value_.__r.__words[2]);
  v60 = HIBYTE(v366.__r_.__value_.__r.__words[2]);
  if ((v366.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v59 = v366.__r_.__value_.__l.__size_;
  if (v59)
  {
    std::string::operator=(&v241, &v366);
    std::string::basic_string[abi:ne180100]<0>(&v365, "ipt");
    std::string::basic_string[abi:ne180100]<0>(&v364, (char *)&str_19_6);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v61 = ImsLogger::debug(ims::_logger, (uint64_t)&v365, (uint64_t)&v364);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v61 + 8), (uint64_t)"using domain from prefs", 23);
    *(_BYTE *)(v61 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v61 + 64))(v61, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v61 + 17) = 0;
    if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v364.__r_.__value_.__l.__data_);
    if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v365.__r_.__value_.__l.__data_);
    v60 = HIBYTE(v366.__r_.__value_.__r.__words[2]);
  }
  if (v60 < 0)
    operator delete(v366.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__end_cap_.__value_) < 0)
    operator delete(__s.__begin_);
  if (SBYTE7(v305) < 0)
    operator delete(__p[0]);
  if (v34)
  {
    v62 = (unint64_t *)&v34->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v252)
  {
    v64 = HIBYTE(v238.__r_.__value_.__r.__words[2]);
    if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v64 = v238.__r_.__value_.__l.__size_;
    if (!v64 && v243 != v242)
    {
      v329 = 0;
      v328 = 0u;
      v327 = 0u;
      v326 = 0u;
      v325 = 0u;
      v324 = 0u;
      v323 = 0u;
      v322 = 0u;
      v321 = 0u;
      v320 = 0u;
      v319 = 0u;
      v318 = 0u;
      v317 = 0u;
      v316 = 0u;
      v315 = 0u;
      v314 = 0u;
      v313 = 0u;
      v312 = 0u;
      v311 = 0u;
      v310 = 0u;
      v309 = 0u;
      v308 = 0u;
      v307 = 0u;
      v306 = 0u;
      v305 = 0u;
      *(_OWORD *)__p = 0u;
      SipUri::SipUri((uint64_t)__p, v242);
      std::string::operator=(&v238, (const std::string *)&v312);
      SipUri::~SipUri((SipUri *)__p);
    }
  }
  v65 = v294;
  v66 = (SipStack *)v295;
  v217 = v294;
  if (v295)
  {
    v67 = (unint64_t *)&v295->__shared_owners_;
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  if (v249)
  {
    IpAddress::_alwaysCompressIPv6Addresses = 1;
    memset(&__str, 0, sizeof(__str));
  }
  else
  {
    v69 = (ImsPrefs *)SipStack::prefs(v65);
    CompressIPv6AddressesKey = (void **)ImsPrefs::getCompressIPv6AddressesKey(v69);
    v71 = ImsPrefs::prefWithKey(v69, CompressIPv6AddressesKey);
    if (v71)
      LOBYTE(v72) = (*(uint64_t (**)(void *))(*(_QWORD *)v71 + 40))(v71);
    else
      v72 = *((_BYTE *)CompressIPv6AddressesKey + 57) != 0;
    IpAddress::_alwaysCompressIPv6Addresses = v72;
    memset(&__str, 0, sizeof(__str));
    if (!v249)
    {
      v73 = (ImsPrefs *)SipStack::prefs(v65);
      LegacyImpuRankKey = (void **)ImsPrefs::getLegacyImpuRankKey(v73);
      ImsPrefs::stringValue(v73, LegacyImpuRankKey);
      std::string::operator=(&__str, (const std::string *)__p);
      if (SBYTE7(v305) < 0)
        operator delete(__p[0]);
    }
  }
  v367[0] = v65;
  v367[1] = v66;
  if (v66)
  {
    v75 = (unint64_t *)((char *)v66 + 8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v366, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  else
    v366 = __str;
  IPTelephonyManager::initializeImpuRankings((uint64_t)v216, v367, (uint64_t)&v366);
  if (SHIBYTE(v366.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v366.__r_.__value_.__l.__data_);
  if (v66)
  {
    v77 = (unint64_t *)((char *)v66 + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      (*(void (**)(SipStack *))(*(_QWORD *)v66 + 16))(v66);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v66);
    }
  }
  v79 = (*(uint64_t (**)(uint64_t *))(*v6 + 64))(v6);
  (*(void (**)(uint64_t *, uint64_t))(*v6 + 16))(v6, v79);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v79 + 8), (uint64_t)"picking IMPU ", 13);
  *(_BYTE *)(v79 + 17) = 0;
  if (v247)
    v80 = "USIM";
  else
    v80 = "ISIM";
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v79 + 8), (uint64_t)v80, 4);
  *(_BYTE *)(v79 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v79 + 8), (uint64_t)" from list: ", 12);
  *(_BYTE *)(v79 + 17) = 0;
  v81 = (*(uint64_t (**)(uint64_t *))(*v6 + 64))(v6);
  std::string::basic_string[abi:ne180100]<0>(__p, ",");
  v82 = v242;
  v83 = v243;
  if (v242 != v243)
  {
    v84 = 1;
    do
    {
      if ((v84 & 1) == 0)
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v81 + 32))(v81, __p);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v81 + 32))(v81, v82);
      v84 = 0;
      ++v82;
    }
    while (v82 != v83);
  }
  if (SBYTE7(v305) < 0)
    operator delete(__p[0]);
  v85 = (_BYTE *)(*(uint64_t (**)(uint64_t *))(*v6 + 64))(v6);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v85 + 64))(v85, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v85[17] = 0;
  memset(&v365, 0, sizeof(v365));
  SipStack::carrierIdentifier(v217, (std::string *)__p);
  v87 = (uint64_t **)BambiPrefsManager::instance(v86);
  __s.__begin_ = (std::vector<std::string>::pointer)__p;
  v88 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v87, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&__s);
  SipImpuRank::preferredImpu(v88 + 29, (uint64_t *)&v242, (unsigned __int8 *)&v241, v239, (uint64_t)&v238, &v365);
  if (SBYTE7(v305) < 0)
    operator delete(__p[0]);
  if ((v365.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v89 = HIBYTE(v365.__r_.__value_.__r.__words[2]);
  else
    v89 = v365.__r_.__value_.__l.__size_;
  v90 = *v6;
  if (!v89)
  {
    v92 = (*(uint64_t (**)(uint64_t *))(v90 + 56))(v6);
    (*(void (**)(uint64_t *, uint64_t))(*v6 + 16))(v6, v92);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v92 + 8), (uint64_t)"no valid IMPU in IPTelephonyConfig", 34);
    *(_BYTE *)(v92 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v92 + 64))(v92, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v92 + 17) = 0;
    goto LABEL_353;
  }
  v91 = (*(uint64_t (**)(uint64_t *))(v90 + 32))(v6);
  (*(void (**)(uint64_t *, uint64_t))(*v6 + 16))(v6, v91);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v91 + 8), (uint64_t)"initializing SIP stack ", 23);
  *(_BYTE *)(v91 + 17) = 0;
  if (*((char *)v217 + 4159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)v217 + 517), *((_QWORD *)v217 + 518));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)((char *)v217 + 4136);
    *(_QWORD *)&v305 = *((_QWORD *)v217 + 519);
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v91 + 32))(v91, __p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v91 + 64))(v91, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v91 + 17) = 0;
  if (SBYTE7(v305) < 0)
    operator delete(__p[0]);
  v93 = (*(uint64_t (**)(uint64_t *))(*v6 + 64))(v6);
  (*(void (**)(uint64_t *, uint64_t))(*v6 + 16))(v6, v93);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v93 + 8), (uint64_t)"P-CSCF   : ", 11);
  *(_BYTE *)(v93 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v364, ",");
  ims::join<std::__wrap_iter<std::string const*>>((uint64_t)v245, v246, (uint64_t)&v364, &__s);
  LoggableString::LoggableString((std::string *)__p, (const std::string *)&__s);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v93 + 40))(v93, __p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v93 + 64))(v93, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v93 + 17) = 0;
  if (SBYTE7(v305) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__s.__end_cap_.__value_) < 0)
    operator delete(__s.__begin_);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v364.__r_.__value_.__l.__data_);
  v94 = (*(uint64_t (**)(uint64_t *))(*v6 + 64))(v6);
  (*(void (**)(uint64_t *, uint64_t))(*v6 + 16))(v6, v94);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v94 + 8), (uint64_t)"IMPU     : ", 11);
  *(_BYTE *)(v94 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v94 + 32))(v94, &v365);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v94 + 64))(v94, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v94 + 17) = 0;
  v95 = (*(uint64_t (**)(uint64_t *))(*v6 + 64))(v6);
  (*(void (**)(uint64_t *, uint64_t))(*v6 + 16))(v6, v95);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v95 + 8), (uint64_t)"IMPI     : ", 11);
  *(_BYTE *)(v95 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v95 + 32))(v95, &v240);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v95 + 64))(v95, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v95 + 17) = 0;
  v96 = (*(uint64_t (**)(uint64_t *))(*v6 + 64))(v6);
  (*(void (**)(uint64_t *, uint64_t))(*v6 + 16))(v6, v96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v96 + 8), (uint64_t)"Domain   : ", 11);
  *(_BYTE *)(v96 + 17) = 0;
  LoggableString::LoggableString((std::string *)__p, &v241);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v96 + 40))(v96, __p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v96 + 64))(v96, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v96 + 17) = 0;
  if (SBYTE7(v305) < 0)
    operator delete(__p[0]);
  v97 = v216[36];
  v98 = v97 + 152;
  for (k = *(_QWORD *)(v97 + 160); k != v98; k = *(_QWORD *)(k + 8))
    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(k + 16) + 24))(*(_QWORD *)(k + 16), &v241);
  v100 = (*(uint64_t (**)(uint64_t *))(*v6 + 64))(v6);
  (*(void (**)(uint64_t *, uint64_t))(*v6 + 16))(v6, v100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v100 + 8), (uint64_t)"Services Mask: ", 15);
  *(_BYTE *)(v100 + 17) = 0;
  ims::Services::namesForMask((ims::Services *)v231, (std::string *)__p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v100 + 32))(v100, __p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v100 + 64))(v100, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v100 + 17) = 0;
  if (SBYTE7(v305) < 0)
    operator delete(__p[0]);
  v101 = (*(uint64_t (**)(uint64_t *))(*v6 + 64))(v6);
  (*(void (**)(uint64_t *, uint64_t))(*v6 + 16))(v6, v101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v101 + 8), (uint64_t)"MDN: ", 5);
  *(_BYTE *)(v101 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v101 + 32))(v101, &v238);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v101 + 64))(v101, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v101 + 17) = 0;
  v102 = (*(uint64_t (**)(uint64_t *))(*v6 + 64))(v6);
  (*(void (**)(uint64_t *, uint64_t))(*v6 + 16))(v6, v102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v102 + 8), (uint64_t)"Instance: ", 10);
  *(_BYTE *)(v102 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v102 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v102 + 64))(v102, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v102 + 17) = 0;
  v103 = (*(uint64_t (**)(uint64_t *))(*v6 + 64))(v6);
  (*(void (**)(uint64_t *, uint64_t))(*v6 + 16))(v6, v103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v103 + 8), (uint64_t)"Lazuli enabled: ", 16);
  *(_BYTE *)(v103 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v103 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v103 + 64))(v103, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v103 + 17) = 0;
  bzero(&__s, 0x688uLL);
  SipRegistrationConfig::SipRegistrationConfig((SipRegistrationConfig *)&__s);
  v104 = (const ImsPrefs *)SipStack::prefs(v217);
  v358 = v252;
  SipRegistrationConfig::initializeFromPrefs(&__s, v104);
  v105 = v245;
  v106 = v246;
  while (v105 != (std::string *)v106)
  {
    v329 = 0;
    v328 = 0u;
    v327 = 0u;
    v326 = 0u;
    v325 = 0u;
    v324 = 0u;
    v323 = 0u;
    v322 = 0u;
    v321 = 0u;
    v320 = 0u;
    v319 = 0u;
    v318 = 0u;
    v317 = 0u;
    v316 = 0u;
    v315 = 0u;
    v314 = 0u;
    v313 = 0u;
    v312 = 0u;
    v311 = 0u;
    v310 = 0u;
    v309 = 0u;
    v308 = 0u;
    v307 = 0u;
    v306 = 0u;
    v305 = 0u;
    *(_OWORD *)__p = 0u;
    SipUri::SipUri((uint64_t)__p, v105);
    if (SipUri::isValidUri((SipUri *)__p))
    {
      end = __s.__end_;
      if (__s.__end_ >= __s.__end_cap_.__value_)
      {
        v108 = (std::string *)std::vector<SipUri>::__push_back_slow_path<SipUri const&>((uint64_t *)&__s, (const SipUri *)__p);
      }
      else
      {
        SipUri::SipUri((SipUri *)__s.__end_, (const SipUri *)__p);
        v108 = end + 17;
      }
      __s.__end_ = v108;
    }
    SipUri::~SipUri((SipUri *)__p);
    ++v105;
  }
  std::string::operator=(&v342, &v241);
  std::string::operator=(&v346, &v219);
  std::string::operator=(&v347, &v220);
  v348 = v221;
  v349 = v222;
  std::string::operator=(&v350, &v223);
  std::string::operator=(&v351, &v224);
  v352 = v225;
  v353 = v226;
  std::string::operator=(&v354, &v227);
  std::string::operator=(&v355, &v228);
  v356 = v229;
  v357 = v230;
  std::string::operator=(v345, &v240);
  SipUri::fromString((uint64_t)&v341, &v365);
  v340 = (int)v231;
  v359 = v249;
  IPTelephonyManager::updateContactUser((unsigned __int16 *)&v343, (uint64_t)&v238, (uint64_t)v239, (std::string *)__p);
  if (SHIBYTE(v344) < 0)
    operator delete((void *)v343);
  v343 = *(_OWORD *)__p;
  v344 = v305;
  if (v360)
  {
    std::string::operator=(&v361, &v250);
    std::string::operator=(&v362, &v251);
    std::string::operator=(v363, &v238);
  }
  v109 = v216[23];
  if (*((char *)v217 + 4159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)v217 + 517), *((_QWORD *)v217 + 518));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)((char *)v217 + 4136);
    *(_QWORD *)&v305 = *((_QWORD *)v217 + 519);
  }
  v364.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v110 = std::__tree<std::__value_type<std::string,SipRegistrationConfig>,std::__map_value_compare<std::string,std::__value_type<std::string,SipRegistrationConfig>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipRegistrationConfig>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v109 + 144), __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v364);
  SipRegistrationConfig::operator=((uint64_t)(v110 + 7), (uint64_t)&__s);
  if (SBYTE7(v305) < 0)
    operator delete(__p[0]);
  v111 = v216[36];
  v112 = (ImsPrefs *)SipStack::prefs(v217);
  EnableATCommandModeKey = (void **)ImsPrefs::getEnableATCommandModeKey(v112);
  v114 = ImsPrefs::prefWithKey(v112, EnableATCommandModeKey);
  if (v114)
    v115 = (*(uint64_t (**)(void *))(*(_QWORD *)v114 + 40))(v114);
  else
    v115 = *((_BYTE *)EnableATCommandModeKey + 57) != 0;
  for (m = *(_QWORD *)(v111 + 184); m != v111 + 176; m = *(_QWORD *)(m + 8))
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(m + 16) + 248))(*(_QWORD *)(m + 16), v115);
  *(_BYTE *)(v111 + 224) = v115;
  bzero(__p, 0x9B8uLL);
  SipStackConfig::SipStackConfig((SipStackConfig *)__p);
  v117 = (const ImsPrefs *)SipStack::prefs(v217);
  SipStackConfig::initializeFromPrefs((SipStackConfig *)__p, v117, v248, v252, v253);
  memset(&v364, 0, sizeof(v364));
  if (*((char *)v234 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v364, *(const std::string::value_type **)v234, *((_QWORD *)v234 + 1));
  }
  else
  {
    v118 = *v234;
    v364.__r_.__value_.__r.__words[2] = *((_QWORD *)v234 + 2);
    *(_OWORD *)&v364.__r_.__value_.__l.__data_ = v118;
  }
  v119 = HIBYTE(v364.__r_.__value_.__r.__words[2]);
  if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v119 = v364.__r_.__value_.__l.__size_;
  if (v119)
    std::string::operator=(v333, &v364);
  v120 = HIBYTE(v336.__r_.__value_.__r.__words[2]);
  if ((v336.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v120 = v336.__r_.__value_.__l.__size_;
  if (!v120)
    std::string::operator=(&v336, v333);
  v302 = 0;
  v301 = 0;
  v303 = 0;
  v121 = (ImsPrefs *)SipStack::prefs(v217);
  MediaAddressTypeKey = (void **)ImsPrefs::getMediaAddressTypeKey(v121);
  ImsPrefs::stringValue(v121, MediaAddressTypeKey);
  v123 = HIBYTE(v303);
  if (v303 < 0)
    v123 = v302;
  if (v123 == 4)
  {
    v124 = &v301;
    if (v303 < 0)
      v124 = v301;
    if (*v124 == 913723465)
    {
      v125 = 2;
    }
    else
    {
      if (*v124 != 880169033)
        goto LABEL_213;
      v125 = 1;
    }
    v337 = v125;
  }
LABEL_213:
  v334 = v237;
  v330 = v256;
  v126 = (ImsPrefs *)SipStack::prefs(v217);
  v127 = (void **)ImsPrefs::getFeatureTagsEnabledKey(v126);
  v128 = ImsPrefs::prefWithKey(v126, v127);
  if (v128)
  {
    if (!(*(unsigned int (**)(void *))(*(_QWORD *)v128 + 40))(v128))
      goto LABEL_229;
LABEL_217:
    memset(&v300, 0, sizeof(v300));
    v129 = (ImsPrefs *)SipStack::prefs(v217);
    v130 = (void **)ImsPrefs::getDeviceIMEIKey(v129);
    ImsPrefs::stringValue(v129, v130);
    v131 = HIBYTE(v300.__r_.__value_.__r.__words[2]);
    if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v131 = v300.__r_.__value_.__l.__size_;
    if (v131)
      v132 = &v300;
    else
      v132 = v254;
    std::string::operator=(&v331, v132);
    v133 = (ImsPrefs *)SipStack::prefs(v217);
    v134 = (void **)ImsPrefs::getDisableDeviceSVNKey(v133);
    v135 = ImsPrefs::prefWithKey(v133, v134);
    if (v135)
    {
      if (((*(uint64_t (**)(void *))(*(_QWORD *)v135 + 40))(v135) & 1) != 0)
      {
LABEL_227:
        if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v300.__r_.__value_.__l.__data_);
        goto LABEL_229;
      }
    }
    else if (*((_BYTE *)v134 + 57))
    {
      goto LABEL_227;
    }
    std::string::operator=(v332, v255);
    goto LABEL_227;
  }
  if (*((_BYTE *)v127 + 57))
    goto LABEL_217;
LABEL_229:
  v136 = (*(uint64_t (**)(uint64_t *))(*v6 + 64))(v6);
  (*(void (**)(uint64_t *, uint64_t))(*v6 + 16))(v6, v136);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v136 + 8), (uint64_t)"Signaling Interface: ", 21);
  *(_BYTE *)(v136 + 17) = 0;
  LoggableString::LoggableString(&v300, v333);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v136 + 40))(v136, &v300);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v136 + 64))(v136, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v136 + 17) = 0;
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v300.__r_.__value_.__l.__data_);
  v137 = (*(uint64_t (**)(uint64_t *))(*v6 + 64))(v6);
  (*(void (**)(uint64_t *, uint64_t))(*v6 + 16))(v6, v137);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v137 + 8), (uint64_t)"Application Id: ", 16);
  *(_BYTE *)(v137 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v137 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v137 + 64))(v137, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v137 + 17) = 0;
  v338 = v248;
  v138 = (*(uint64_t (**)(uint64_t *))(*v6 + 64))(v6);
  (*(void (**)(uint64_t *, uint64_t))(*v6 + 16))(v6, v138);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v138 + 8), (uint64_t)"Roaming: ", 9);
  *(_BYTE *)(v138 + 17) = 0;
  if (v338)
    v139 = "yes";
  else
    v139 = "no";
  if (v338)
    v140 = 3;
  else
    v140 = 2;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v138 + 8), (uint64_t)v139, v140);
  *(_BYTE *)(v138 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v138 + 64))(v138, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v138 + 17) = 0;
  if (!v236)
    goto LABEL_244;
  isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)&v219);
  if (isWifi)
    v142 = 1;
  else
    v142 = 2;
  v335 = v142;
  if (isWifi)
    goto LABEL_245;
  v143 = (ImsPrefs *)SipStack::prefs(v217);
  UseAPMediaStackKey = (void **)ImsPrefs::getUseAPMediaStackKey(v143);
  v145 = ImsPrefs::prefWithKey(v143, UseAPMediaStackKey);
  if (!v145)
  {
    if (!*((_BYTE *)UseAPMediaStackKey + 57))
      goto LABEL_245;
    goto LABEL_244;
  }
  if ((*(unsigned int (**)(void *))(*(_QWORD *)v145 + 40))(v145))
LABEL_244:
    v335 = 1;
LABEL_245:
  std::string::operator=((std::string *)((char *)v217 + 4088), &v232);
  std::string::operator=((std::string *)((char *)v217 + 4112), &v233);
  memset(&v300, 0, sizeof(v300));
  v146 = (ImsPrefs *)SipStack::prefs(v217);
  DropIncomingKey = (void **)ImsPrefs::getDropIncomingKey(v146);
  ImsPrefs::stringValue(v146, DropIncomingKey);
  v148 = HIBYTE(v300.__r_.__value_.__r.__words[2]);
  if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v148 = v300.__r_.__value_.__l.__size_;
  if (v148)
  {
    v149 = *((_QWORD *)v217 + 20);
    v150 = (std::__shared_weak_count *)*((_QWORD *)v217 + 21);
    v299.__r_.__value_.__r.__words[0] = v149;
    v299.__r_.__value_.__l.__size_ = (std::string::size_type)v150;
    if (v150)
    {
      v151 = (unint64_t *)&v150->__shared_owners_;
      do
        v152 = __ldxr(v151);
      while (__stxr(v152 + 1, v151));
    }
    SipTransportLayer::setDropMaskFromString(v149, &v300, 1);
    if (v150)
    {
      v153 = (unint64_t *)&v150->__shared_owners_;
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 - 1, v153));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
        std::__shared_weak_count::__release_weak(v150);
      }
    }
    v155 = v216[21];
    v156 = *(_QWORD *)(v155 + 168);
    v157 = *(_QWORD *)(v155 + 176);
    v297.__r_.__value_.__r.__words[0] = v156;
    v297.__r_.__value_.__l.__size_ = v157;
    if (v157)
    {
      v158 = (unint64_t *)(v157 + 8);
      do
        v159 = __ldxr(v158);
      while (__stxr(v159 + 1, v158));
    }
    v160 = *(_QWORD *)(v156 + 160);
    v161 = *(std::__shared_weak_count **)(v156 + 168);
    v299.__r_.__value_.__r.__words[0] = v160;
    v299.__r_.__value_.__l.__size_ = (std::string::size_type)v161;
    if (v161)
    {
      v162 = (unint64_t *)&v161->__shared_owners_;
      do
        v163 = __ldxr(v162);
      while (__stxr(v163 + 1, v162));
    }
    SipTransportLayer::setDropMaskFromString(v160, &v300, 1);
    if (v161)
    {
      v164 = (unint64_t *)&v161->__shared_owners_;
      do
        v165 = __ldaxr(v164);
      while (__stlxr(v165 - 1, v164));
      if (!v165)
      {
        ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
        std::__shared_weak_count::__release_weak(v161);
      }
    }
    v166 = (std::__shared_weak_count *)v297.__r_.__value_.__l.__size_;
    if (v297.__r_.__value_.__l.__size_)
    {
      v167 = (unint64_t *)(v297.__r_.__value_.__l.__size_ + 8);
      do
        v168 = __ldaxr(v167);
      while (__stlxr(v168 - 1, v167));
      if (!v168)
      {
        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
        std::__shared_weak_count::__release_weak(v166);
      }
    }
  }
  v169 = v217;
  v170 = (ImsPrefs *)SipStack::prefs(v217);
  DropOutgoingKey = (void **)ImsPrefs::getDropOutgoingKey(v170);
  ImsPrefs::stringValue(v170, DropOutgoingKey);
  std::string::operator=(&v300, &v299);
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v299.__r_.__value_.__l.__data_);
  v173 = HIBYTE(v300.__r_.__value_.__r.__words[2]);
  if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v173 = v300.__r_.__value_.__l.__size_;
  if (v173)
  {
    v174 = *((_QWORD *)v217 + 20);
    v175 = (std::__shared_weak_count *)*((_QWORD *)v217 + 21);
    v299.__r_.__value_.__r.__words[0] = v174;
    v299.__r_.__value_.__l.__size_ = (std::string::size_type)v175;
    if (v175)
    {
      v176 = (unint64_t *)&v175->__shared_owners_;
      do
        v177 = __ldxr(v176);
      while (__stxr(v177 + 1, v176));
    }
    SipTransportLayer::setDropMaskFromString(v174, &v300, 0);
    if (v175)
    {
      v178 = (unint64_t *)&v175->__shared_owners_;
      do
        v179 = __ldaxr(v178);
      while (__stlxr(v179 - 1, v178));
      if (!v179)
      {
        ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
        std::__shared_weak_count::__release_weak(v175);
      }
    }
    v180 = v216[21];
    v181 = *(_QWORD *)(v180 + 168);
    v182 = *(_QWORD *)(v180 + 176);
    v297.__r_.__value_.__r.__words[0] = v181;
    v297.__r_.__value_.__l.__size_ = v182;
    if (v182)
    {
      v183 = (unint64_t *)(v182 + 8);
      do
        v184 = __ldxr(v183);
      while (__stxr(v184 + 1, v183));
    }
    v185 = *(_QWORD *)(v181 + 160);
    v186 = *(std::__shared_weak_count **)(v181 + 168);
    v299.__r_.__value_.__r.__words[0] = v185;
    v299.__r_.__value_.__l.__size_ = (std::string::size_type)v186;
    if (v186)
    {
      v187 = (unint64_t *)&v186->__shared_owners_;
      do
        v188 = __ldxr(v187);
      while (__stxr(v188 + 1, v187));
    }
    SipTransportLayer::setDropMaskFromString(v185, &v300, 0);
    if (v186)
    {
      v189 = (unint64_t *)&v186->__shared_owners_;
      do
        v190 = __ldaxr(v189);
      while (__stlxr(v190 - 1, v189));
      if (!v190)
      {
        ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
        std::__shared_weak_count::__release_weak(v186);
      }
    }
    v191 = (std::__shared_weak_count *)v297.__r_.__value_.__l.__size_;
    if (v297.__r_.__value_.__l.__size_)
    {
      v192 = (unint64_t *)(v297.__r_.__value_.__l.__size_ + 8);
      do
        v193 = __ldaxr(v192);
      while (__stlxr(v193 - 1, v192));
      if (!v193)
      {
        ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
        std::__shared_weak_count::__release_weak(v191);
      }
    }
    v169 = v217;
  }
  SipStack::setSimConfig(v169, (SipStack *)v218, v172);
  v298 = 0x10000;
  BambiClient::bootstrap(v216[21], &v298);
  v194 = (_QWORD *)v216[21];
  v195 = (_OWORD *)((char *)v169 + 4136);
  v196 = (char *)v169 + 4159;
  if (v252)
  {
    if (*v196 < 0)
    {
      std::string::__init_copy_ctor_external(&v299, *((const std::string::value_type **)v169 + 517), *((_QWORD *)v169 + 518));
    }
    else
    {
      *(_OWORD *)&v299.__r_.__value_.__l.__data_ = *v195;
      v299.__r_.__value_.__r.__words[2] = *((_QWORD *)v169 + 519);
    }
    BambiClient::initializeLazuliStack(v194, (unsigned __int8 *)&v299, (const SipStackConfig *)__p);
  }
  else
  {
    if (*v196 < 0)
    {
      std::string::__init_copy_ctor_external(&v299, *((const std::string::value_type **)v169 + 517), *((_QWORD *)v169 + 518));
    }
    else
    {
      *(_OWORD *)&v299.__r_.__value_.__l.__data_ = *v195;
      v299.__r_.__value_.__r.__words[2] = *((_QWORD *)v169 + 519);
    }
    BambiClient::initializeStack(v194, (unsigned __int8 *)&v299, (const SipStackConfig *)__p);
  }
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v299.__r_.__value_.__l.__data_);
  if (*v196 < 0)
  {
    std::string::__init_copy_ctor_external(&v299, *((const std::string::value_type **)v169 + 517), *((_QWORD *)v169 + 518));
  }
  else
  {
    *(_OWORD *)&v299.__r_.__value_.__l.__data_ = *v195;
    v299.__r_.__value_.__r.__words[2] = *((_QWORD *)v169 + 519);
  }
  IPTelephonyManager::setDelegates(v216, (uint64_t)&v299, 0);
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v299.__r_.__value_.__l.__data_);
  memset(&v299, 0, sizeof(v299));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v299, v234, v235, 0xAAAAAAAAAAAAAAABLL * (((char *)v235 - (char *)v234) >> 3));
  v197 = v299.__r_.__value_.__l.__size_;
  v198 = (unsigned __int8 *)v299.__r_.__value_.__r.__words[0];
  if (v299.__r_.__value_.__r.__words[0] != v299.__r_.__value_.__l.__size_)
  {
    do
    {
      v199 = v198 + 24;
      if (v198 + 24 == (unsigned __int8 *)v197)
      {
        v198 = (unsigned __int8 *)v197;
        goto LABEL_334;
      }
      v200 = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v297, v198, v198 + 24);
      v198 += 24;
    }
    while (!v200);
    v201 = v199 + 24;
    v202 = v199 - 24;
    if (v201 == (unsigned __int8 *)v197)
    {
      v203 = (void **)v202;
    }
    else
    {
      do
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v297, v202, v201) & 1) != 0)
        {
          v203 = (void **)v202;
        }
        else
        {
          v203 = (void **)(v202 + 24);
          if ((char)v202[47] < 0)
            operator delete(*v203);
          v204 = *(_OWORD *)v201;
          *((_QWORD *)v202 + 5) = *((_QWORD *)v201 + 2);
          *(_OWORD *)v203 = v204;
          v201[23] = 0;
          *v201 = 0;
          v202 += 24;
        }
        v201 += 24;
      }
      while (v201 != (unsigned __int8 *)v197);
    }
    v198 = (unsigned __int8 *)(v203 + 3);
  }
LABEL_334:
  memset(&v297, 0, sizeof(v297));
  v205 = v299.__r_.__value_.__r.__words[0];
  std::string::basic_string[abi:ne180100]<0>(&v296, ",");
  ims::join<std::__wrap_iter<std::string *>>(v205, (uint64_t)v198, (uint64_t)&v296, &v297);
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v296.__r_.__value_.__l.__data_);
  v206 = (*(uint64_t (**)(uint64_t *))(*v6 + 64))(v6);
  (*(void (**)(uint64_t *, uint64_t))(*v6 + 16))(v6, v206);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v206 + 8), (uint64_t)"Bringing up security policies for ", 34);
  *(_BYTE *)(v206 + 17) = 0;
  LoggableString::LoggableString(&v296, &v297);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v206 + 40))(v206, &v296);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v206 + 64))(v206, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v206 + 17) = 0;
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v296.__r_.__value_.__l.__data_);
  IPTelephonyManager::updatePolicyInterfaceList((uint64_t)v216, &v297);
  memset(&v296, 0, sizeof(v296));
  v207 = (ImsPrefs *)SipStack::prefs(v217);
  DisplayNameKey = (void **)ImsPrefs::getDisplayNameKey(v207);
  ImsPrefs::stringValue(v207, DisplayNameKey);
  v209 = HIBYTE(v296.__r_.__value_.__r.__words[2]);
  v210 = HIBYTE(v296.__r_.__value_.__r.__words[2]);
  if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v209 = v296.__r_.__value_.__l.__size_;
  if (v209)
  {
    std::string::operator=((std::string *)(*((_QWORD *)v217 + 18) + 560), &v296);
    v210 = HIBYTE(v296.__r_.__value_.__r.__words[2]);
  }
  if (v210 < 0)
    operator delete(v296.__r_.__value_.__l.__data_);
  if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v297.__r_.__value_.__l.__data_);
  v297.__r_.__value_.__r.__words[0] = (std::string::size_type)&v299;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v297);
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v300.__r_.__value_.__l.__data_);
  if (SHIBYTE(v303) < 0)
    operator delete(v301);
  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v364.__r_.__value_.__l.__data_);
  SipStackConfig::~SipStackConfig(__p);
  SipRegistrationConfig::~SipRegistrationConfig((void **)&__s.__begin_);
LABEL_353:
  if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v365.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v66)
  {
    v211 = (unint64_t *)((char *)v66 + 8);
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      (*(void (**)(SipStack *))(*(_QWORD *)v66 + 16))(v66);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v66);
    }
  }
  ims::StackConfig::~StackConfig(v218);
  ImsResult::~ImsResult((ImsResult *)&v260);
  SipUri::~SipUri((SipUri *)v269);
  if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v291.__r_.__value_.__l.__data_);
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v292.__r_.__value_.__l.__data_);
  if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v293.__r_.__value_.__l.__data_);
  v213 = v295;
  if (v295)
  {
    v214 = (unint64_t *)&v295->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
}

void sub_1BF0C5A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  if (SLOBYTE(STACK[0x5D7]) < 0)
    operator delete((void *)STACK[0x5C0]);
  if (SLOBYTE(STACK[0x5EF]) < 0)
    operator delete((void *)STACK[0x5D8]);
  if (SLOBYTE(STACK[0x1647]) < 0)
    operator delete(*(void **)(v7 - 208));
  SipStackConfig::~SipStackConfig((void **)&STACK[0x5F0]);
  SipRegistrationConfig::~SipRegistrationConfig((void **)&STACK[0xFA8]);
  if (SLOBYTE(STACK[0x165F]) < 0)
    operator delete(*(void **)(v7 - 184));
  if (SLOBYTE(STACK[0x169F]) < 0)
    operator delete(*(void **)(v7 - 120));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ims::StackConfig::~StackConfig((void **)va1);
  ImsResult::~ImsResult((ImsResult *)&STACK[0x330]);
  SipUri::~SipUri((SipUri *)&STACK[0x378]);
  if (SLOBYTE(STACK[0x527]) < 0)
    operator delete((void *)STACK[0x510]);
  if (SLOBYTE(STACK[0x53F]) < 0)
    operator delete((void *)STACK[0x528]);
  if (SLOBYTE(STACK[0x557]) < 0)
    operator delete((void *)STACK[0x540]);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x558]);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IPTelephonyManager::nasSystemInitialized()
{
  IPTelephonyManager::nasSystemInitialized();
}

void IPTelephonyManager::_deferInit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::string __p;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  __int128 *v15[2];
  char v16;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = v0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ipt");
  std::string::basic_string[abi:ne180100]<0>(v15, (char *)&str_19_6);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Deferring initialization for stack ", 35);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v8 + 32))(v8, v6);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v16 < 0)
    operator delete(v15[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  DeferredInit::DeferredInit(&__p, v6, v4, v2);
  v15[0] = v6;
  v9 = std::__tree<std::__value_type<std::string,DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DeferredInit>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v7 + 392), (void **)v6, v15);
  DeferredInit::operator=((std::string *)(v9 + 56), (uint64_t)&__p);
  std::__optional_destruct_base<DeferredEmergency,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v14);
  ims::StackConfig::~StackConfig(&v13);
  if (v12 < 0)
    operator delete(v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF0C6148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void DeferredInit::~DeferredInit(void **this)
{
  std::__optional_destruct_base<DeferredEmergency,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 98));
  ims::StackConfig::~StackConfig(this + 6);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void DeferredEmergency::~DeferredEmergency(void **this)
{
  IMSCallOptions::~IMSCallOptions(this + 3);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void IPTelephonyManager::auditCarrierPrefs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  SipStack **v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  __int128 v28;
  int64x2_t v29;
  uint64_t v30;
  SipStack **v31;
  uint64_t v32;
  SipStack *v33;
  uint64_t v34;
  BambiPrefsManager *v35;
  __int128 v36;
  std::string v37;
  std::string v38;
  SipStack *v39;
  std::__shared_weak_count *v40;
  char v41;
  std::string v42;
  void *__p[2];
  _QWORD v44[2];
  void **i;
  int64x2_t v46;
  uint64_t v47;
  _QWORD *v48;

  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v39 = 0;
    v40 = 0;
    (*(void (**)(SipStack **__return_ptr))(**(_QWORD **)(a1 + 168) + 192))(&v39);
    std::string::basic_string[abi:ne180100]<0>(&i, "audit");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_19_6);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::info(ims::_logger, (uint64_t)&i, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Performing audit due to ", 24);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" for carrier ", 13);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, a3);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (SHIBYTE(v44[0]) < 0)
      operator delete(__p[0]);
    if (v46.i8[15] < 0)
      operator delete(i);
    if (v39)
    {
      std::string::basic_string[abi:ne180100]<0>(&i, "audit");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_19_6);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::info(ims::_logger, (uint64_t)&i, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Stack ", 6);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" is using ", 10);
      *(_BYTE *)(v8 + 17) = 0;
      SipStack::carrierIdentifier(v39, &v42);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v8 + 32))(v8, &v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" and wants ", 11);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a3);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&i, "audit");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_19_6);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v9 = ImsLogger::warn(ims::_logger, (uint64_t)&i, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"No stack for ", 13);
      *(_BYTE *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, a2);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v9 + 17) = 0;
    }
    if (SHIBYTE(v44[0]) < 0)
      operator delete(__p[0]);
    if (v46.i8[15] < 0)
      operator delete(i);
    v10 = v40;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&i, "audit");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_19_6);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v13 = ImsLogger::info(ims::_logger, (uint64_t)&i, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Stack Audit:", 12);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  if (SHIBYTE(v44[0]) < 0)
    operator delete(__p[0]);
  if (v46.i8[15] < 0)
    operator delete(i);
  __p[0] = 0;
  __p[1] = 0;
  v44[0] = 0;
  BambiClient::sipStacks(*(BambiClient **)(a1 + 168), (uint64_t)__p);
  v14 = *(_OWORD *)(*(_QWORD *)(a1 + 168) + 168);
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v14;
  if (*((_QWORD *)&v14 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = __p[1];
  if (__p[1] >= (void *)v44[0])
  {
    v36 = v14;
    v19 = ((char *)__p[1] - (char *)__p[0]) >> 4;
    if ((unint64_t)(v19 + 1) >> 60)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v20 = (uint64_t)(v44[0] - (unint64_t)__p[0]) >> 3;
    if (v20 <= v19 + 1)
      v20 = v19 + 1;
    if (v44[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF0)
      v21 = 0xFFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    v48 = v44;
    v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)v44, v21);
    v24 = &v22[16 * v19];
    *(_OWORD *)v24 = v36;
    v26 = __p[0];
    v25 = __p[1];
    if (__p[1] == __p[0])
    {
      v29 = vdupq_n_s64((unint64_t)__p[1]);
      v27 = &v22[16 * v19];
    }
    else
    {
      v27 = &v22[16 * v19];
      do
      {
        v28 = *((_OWORD *)v25 - 1);
        v25 -= 2;
        *((_OWORD *)v27 - 1) = v28;
        v27 -= 16;
        *v25 = 0;
        v25[1] = 0;
      }
      while (v25 != v26);
      v29 = *(int64x2_t *)__p;
    }
    v18 = (SipStack **)(v24 + 16);
    __p[0] = v27;
    __p[1] = v24 + 16;
    v46 = v29;
    v30 = v44[0];
    v44[0] = &v22[16 * v23];
    v47 = v30;
    i = (void **)v29.i64[0];
    std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((uint64_t)&i);
  }
  else
  {
    *(_QWORD *)__p[1] = v14;
    v17[1] = *((_QWORD *)&v14 + 1);
    v18 = (SipStack **)(v17 + 2);
  }
  __p[1] = v18;
  v31 = (SipStack **)__p[0];
  v46 = 0uLL;
  for (i = (void **)&v46; v31 != v18; v31 += 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v42, "audit");
    std::string::basic_string[abi:ne180100]<0>(&v39, (char *)&str_19_6);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v32 = ImsLogger::info(ims::_logger, (uint64_t)&v42, (uint64_t)&v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"  ", 2);
    *(_BYTE *)(v32 + 17) = 0;
    v33 = *v31;
    if (*((char *)*v31 + 4159) < 0)
      std::string::__init_copy_ctor_external(&v38, *((const std::string::value_type **)v33 + 517), *((_QWORD *)v33 + 518));
    else
      v38 = *(std::string *)((char *)v33 + 4136);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v32 + 32))(v32, &v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v32 + 17) = 0;
    SipStack::carrierIdentifier(*v31, &v37);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v32 + 32))(v32, &v37);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v32 + 17) = 0;
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (v41 < 0)
      operator delete(v39);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    SipStack::carrierIdentifier(*v31, &v42);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&i, (void **)&v42.__r_.__value_.__l.__data_, (uint64_t)&v42);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v42, "audit");
  std::string::basic_string[abi:ne180100]<0>(&v39, (char *)&str_19_6);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v34 = ImsLogger::info(ims::_logger, (uint64_t)&v42, (uint64_t)&v39);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v34 + 8), (uint64_t)"Bundle Audit:", 13);
  *(_BYTE *)(v34 + 17) = 0;
  v35 = (BambiPrefsManager *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v34 + 17) = 0;
  if (v41 < 0)
    operator delete(v39);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  BambiPrefsManager::audit(v35);
  std::__tree<std::string>::destroy((uint64_t)&i, (char *)v46.i64[0]);
  i = __p;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&i);
}

void sub_1BF0C69A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (*(char *)(v42 - 105) < 0)
    operator delete(*(void **)(v42 - 128));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::initializeFromSIM(uint64_t a1, uint64_t a2, std::string *a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BambiPrefsManager *v19;
  BambiPrefsManager *v20;
  uint64_t v21;
  BambiPrefsManager *v22;
  void **v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v12 = *(_QWORD *)(a1 + 288);
  if (v12)
  {
    v13 = v12 + 152;
    v14 = *(_QWORD *)(v12 + 160);
    if (v14 != v12 + 152)
    {
      v15 = *(unsigned __int8 *)(a4 + 730);
      do
      {
        (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(v14 + 16) + 8))(*(_QWORD *)(v14 + 16), v15 != 0);
        v14 = *(_QWORD *)(v14 + 8);
      }
      while (v14 != v13);
    }
  }
  v28 = 0;
  v29 = 0;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 168) + 192))(&v28, *(_QWORD *)(a1 + 168), a2);
  v17 = a1 + 24;
  v16 = *(_QWORD *)(a1 + 24);
  if (v28)
  {
    v18 = (*(uint64_t (**)(uint64_t))(v16 + 64))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(a1 + 24, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"Using SIP stack ", 16);
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 32))(v18, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v18 + 17) = 0;
    v19 = (BambiPrefsManager *)std::string::operator=((std::string *)(v28 + 4160), a3);
    if (*(_BYTE *)(a4 + 729)
      || (v22 = BambiPrefsManager::instance(v19),
          v23 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v22, (void **)&a3->__r_.__value_.__l.__data_), v19 = BambiPrefsManager::instance((BambiPrefsManager *)v23), (void **)((char *)v19 + 8) == v23))
    {
      v20 = BambiPrefsManager::instance(v19);
      BambiPrefsManager::loadPrefs((uint64_t)v20, (BambiPrefsManager *)a3, a5, a6, *(unsigned __int8 *)(a4 + 712), *(unsigned __int8 *)(a4 + 556));
    }
    else
    {
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 48))(a1 + 24);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(a1 + 24, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"skipping loading prefs for carrier ", 35);
      *(_BYTE *)(v24 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v24 + 32))(v24, a3);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v24 + 17) = 0;
    }
    IPTelephonyManager::auditCarrierPrefs(a1, a2, (uint64_t)a3);
    IPTelephonyManager::_deferInit();
    IPTelephonyManager::initializeNasClient((_QWORD *)a1, a2, *(unsigned int *)(a4 + 724), *(unsigned __int8 *)(a4 + 730));
  }
  else
  {
    v21 = (*(uint64_t (**)(uint64_t))(v16 + 56))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(a1 + 24, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"Unable to initialize SIP stack which hasn't been allocated", 58);
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v21 + 17) = 0;
  }
  v25 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1BF0C6DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::initializeFromSIM(uint64_t a1, uint64_t a2, std::string *a3, uint64_t a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  uint64_t v19;
  BambiPrefsManager *v20;
  BambiPrefsManager *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  BambiPrefsManager *v25;
  void **v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  v10 = *(_QWORD *)(a1 + 288);
  if (v10)
  {
    v11 = v10 + 152;
    v12 = *(_QWORD *)(v10 + 160);
    if (v12 != v10 + 152)
    {
      v13 = *(unsigned __int8 *)(a4 + 730);
      do
      {
        (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(v12 + 16) + 8))(*(_QWORD *)(v12 + 16), v13 != 0);
        v12 = *(_QWORD *)(v12 + 8);
      }
      while (v12 != v11);
    }
  }
  v14 = a1 + 24;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"loading prefs for normal IPTelephony initialization", 51);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
  v31 = 0;
  v32 = 0;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 168) + 192))(&v31, *(_QWORD *)(a1 + 168), a2);
  v16 = *(_QWORD *)(a1 + 24);
  if (!v31)
  {
    v22 = (*(uint64_t (**)(uint64_t))(v16 + 56))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(a1 + 24, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"Unable to initialize SIP stack which hasn't been allocated", 58);
    *(_BYTE *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v22 + 17) = 0;
    goto LABEL_15;
  }
  v17 = (*(uint64_t (**)(uint64_t))(v16 + 64))(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(a1 + 24, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Using SIP stack ", 16);
  *(_BYTE *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 32))(v17, a2);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v17 + 17) = 0;
  v18 = std::string::operator=((std::string *)(v31 + 4160), a3);
  if (!a5)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(a1 + 24, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"Carrier prefs already in use for ", 33);
    *(_BYTE *)(v23 + 17) = 0;
    v24 = (_BYTE *)(v23 + 17);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v23 + 32))(v23, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)".  Skipping prefs", 17);
    *(_BYTE *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_13:
    *v24 = 0;
    goto LABEL_14;
  }
  if (!*(_BYTE *)(a4 + 729))
  {
    v25 = BambiPrefsManager::instance((BambiPrefsManager *)v18);
    v26 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v25, (void **)&a3->__r_.__value_.__l.__data_);
    if ((void **)((char *)BambiPrefsManager::instance((BambiPrefsManager *)v26) + 8) != v26)
    {
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(a1 + 24);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(a1 + 24, v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"skipping loading prefs for carrier ", 35);
      *(_BYTE *)(v27 + 17) = 0;
      v24 = (_BYTE *)(v27 + 17);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v27 + 32))(v27, a3);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_13;
    }
  }
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(a1 + 24, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"Loading prefs from specified dictionary reference", 49);
  *(_BYTE *)(v19 + 17) = 0;
  v20 = (BambiPrefsManager *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v19 + 17) = 0;
  v21 = BambiPrefsManager::instance(v20);
  BambiPrefsManager::loadPrefs((uint64_t)v21, (BambiPrefsManager *)a3, a5, *(unsigned __int8 *)(a4 + 712), *(unsigned __int8 *)(a4 + 556));
LABEL_14:
  IPTelephonyManager::auditCarrierPrefs(a1, a2, (uint64_t)a3);
  IPTelephonyManager::_deferInit();
  IPTelephonyManager::initializeNasClient((_QWORD *)a1, a2, *(unsigned int *)(a4 + 724), *(unsigned __int8 *)(a4 + 730));
LABEL_15:
  v28 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_1BF0C71DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::initializeEmergency()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const IMSCallOptions *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::string::size_type v22;
  std::string *v23;
  BambiPrefsManager *v24;
  std::__shared_weak_count *size;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  const ImsPrefs *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  BambiPrefsManager *v34;
  BambiPrefsManager *v35;
  void **v36;
  void **v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  std::string *v48;
  void **v49;
  void **v50;
  __int128 v51;
  void **v52;
  void **v53;
  __int128 v54;
  void **v55;
  void **v56;
  void **v57;
  void **v58;
  void **v59;
  void **v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int16 v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  void **v166;
  void **v167;
  void **v168;
  __int128 v169;
  void **v170;
  void **v171;
  void **v172;
  _QWORD *v173;
  void *v174;
  void **v175;
  void **v176;
  void **v177;
  void **v178;
  void **v179;
  void **v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  void **v187;
  void **v188;
  __int128 v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  void **v205;
  void **v206;
  void **v207;
  void **v208;
  void **v209;
  __int128 v210;
  void **v211;
  void **v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  __int128 v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  void **v226;
  void **v227;
  void **v228;
  void **v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  void **v254;
  void **v255;
  void **v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  __int128 v260;
  void **v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  void **v265;
  void **v266;
  void **v267;
  _BYTE *v268;
  uint64_t v269;
  uint64_t v270;
  void *v271[637];
  std::string v272;
  SipStack *v273;
  std::__shared_weak_count *v274;
  std::string v275;
  int v276;
  __int128 v277;
  std::string __p;
  void *v279[2];
  __int128 v280;
  uint64_t v281;
  __int16 v282;
  __int128 v283;
  uint64_t v284;
  __int128 v285;
  __int128 v286;
  _BYTE v287[21];
  __int128 v288;
  uint64_t v289;
  __int128 v290;
  uint64_t v291;
  char v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  uint64_t v297;
  __int128 v298;
  uint64_t v299;
  __int128 v300;
  uint64_t v301;
  __int128 v302;
  uint64_t v303;
  __int128 v304;
  uint64_t v305;
  char v306;
  __int128 v307;
  uint64_t v308;
  char v309;
  __int128 v310;
  uint64_t v311;
  __int128 v312;
  uint64_t v313;
  __int128 v314;
  uint64_t v315;
  char v316;
  __int128 v317;
  uint64_t v318;
  __int128 v319;
  _OWORD v320[2];
  _BYTE v321[216];
  uint64_t v322;
  _BYTE v323[408];
  __int128 v324;
  _BYTE v325[32];
  __int128 v326;
  uint64_t v327;
  __int128 v328;
  uint64_t v329;
  __int128 v330;
  uint64_t v331;
  __int128 v332;
  uint64_t v333;
  __int128 v334;
  uint64_t v335;
  __int128 v336;
  char v337;
  __int128 v338;
  uint64_t v339;
  __int128 v340;
  uint64_t v341;
  __int128 v342;
  char v343;
  __int128 v344;
  uint64_t v345;
  __int128 v346;
  uint64_t v347;
  __int128 v348;
  char v349;
  __int16 v350;
  char v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t *v355;
  uint64_t v356;
  uint64_t v357;
  __int128 v358;
  uint64_t v359;
  uint64_t v360;
  __int128 v361;
  uint64_t v362;
  __int128 v363;
  _OWORD v364[2];
  uint64_t *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  char v380;
  _OWORD v381[3];
  __int128 v382;
  uint64_t v383;
  char v384;
  __int128 v385;
  uint64_t v386;
  uint64_t v387;
  __int16 v388;
  __int128 v389;
  _OWORD v390[2];
  _BYTE v391[408];
  char v392;
  __int128 v393;
  uint64_t v394;
  __int128 v395;
  uint64_t v396;
  _QWORD *v397;
  uint64_t v398;
  int v399;
  char v400;
  __int128 *v401;
  __int128 v402;
  char v403;
  __int128 v404;
  _QWORD v405[7];
  __int128 v406;
  uint64_t v407;
  __int16 v408;
  uint64_t *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t *v415;
  uint64_t v416;
  uint64_t v417;
  __int128 v418;
  __int128 v419;
  uint64_t *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  _OWORD v424[3];
  uint64_t v425;
  __int16 v426;
  __int128 v427;
  uint64_t v428;
  __int16 v429;
  __int128 v430;
  uint64_t v431;
  int v432;
  uint64_t *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t *v446;
  uint64_t v447;
  uint64_t v448;
  int v449;
  char v450;
  uint64_t *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t *v454;
  uint64_t v455;
  uint64_t v456;
  char v457;
  _QWORD *v458;
  uint64_t v459;
  __int128 v460;
  __int128 v461;
  char v462;
  uint64_t *v463;
  uint64_t v464;
  uint64_t v465;
  _BYTE v466[24];
  __int128 v467;
  uint64_t v468;
  int v469;
  __int128 v470;
  uint64_t v471;
  _BYTE v472[408];
  __int128 v473;
  __int128 v474;
  __int128 v475;
  uint64_t v476;
  uint64_t v477;
  int v478;
  __int128 v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t *v482;
  uint64_t v483;
  uint64_t v484;
  __int128 v485;
  int v486;
  __int128 v487;
  __int128 v488;
  int v489;
  uint64_t v490;
  int v491;
  _BYTE v492[168];
  _BYTE v493[192];
  __int128 v494;
  uint64_t v495;
  uint64_t v496;
  char v497;
  uint64_t *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  __int16 v502;
  __int16 v503;
  __int128 v504;
  uint64_t v505;
  _BYTE v506[408];
  __int128 v507;
  uint64_t v508;
  char v509;
  __int128 v510;
  uint64_t v511;
  std::string __str;

  v0 = MEMORY[0x1E0C80A78]();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = (const IMSCallOptions *)v1;
  v12 = v11;
  v13 = v0;
  memset(&v275, 0, sizeof(v275));
  if (*(char *)(v1 + 5095) < 0)
    std::string::__init_copy_ctor_external(&v275, *(const std::string::value_type **)(v1 + 5072), *(_QWORD *)(v1 + 5080));
  else
    v275 = *(std::string *)(v1 + 5072);
  v274 = 0;
  v273 = 0;
  (*(void (**)(SipStack **__return_ptr, _QWORD, std::string *))(**(_QWORD **)(v13 + 168) + 192))(&v273, *(_QWORD *)(v13 + 168), &v275);
  if (!v273)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&str_19_6);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v15 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"No sip stack ", 13);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v15 + 32))(v15, &v275);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
    goto LABEL_61;
  }
  v269 = v9;
  v270 = v13;
  v14 = *(unsigned __int8 *)(v7 + 23);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(v7 + 8);
  if (v14)
  {
    std::string::operator=((std::string *)((char *)v273 + 4160), (const std::string *)v7);
    if (*((char *)v273 + 4159) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v273 + 517), *((_QWORD *)v273 + 518));
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)((char *)v273 + 4136);
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v273 + 519);
    }
    IPTelephonyManager::setDelegates((uint64_t *)v13, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = *(_QWORD *)(v13 + 288);
    if (v16)
    {
      v17 = v16 + 152;
      for (i = *(_QWORD *)(v16 + 160); i != v17; i = *(_QWORD *)(i + 8))
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(i + 16) + 8))(*(_QWORD *)(i + 16), 0);
    }
    v20 = *(_QWORD *)(v13 + 24);
    v19 = v13 + 24;
    v21 = (*(uint64_t (**)(uint64_t))(v20 + 64))(v19);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"loading prefs for SIM-less emergency", 36);
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v21 + 17) = 0;
    *(_OWORD *)&v272.__r_.__value_.__l.__data_ = 0uLL;
    (*(void (**)(std::string *__return_ptr, _QWORD, std::string *))(**(_QWORD **)(v270 + 168) + 192))(&v272, *(_QWORD *)(v270 + 168), &v275);
    v22 = v272.__r_.__value_.__r.__words[0];
    ImsUuid::generate((ImsUuid *)&__p);
    if (SHIBYTE(v279[0]) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2]);
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
      __str.__r_.__value_.__r.__words[2] = (std::string::size_type)v279[0];
    }
    v23 = std::string::operator=((std::string *)(v22 + 4160), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78C0288;
    if (SHIBYTE(v279[0]) < 0)
      operator delete((void *)__p.__r_.__value_.__l.__size_);
    if (*(_QWORD *)(v270 + 336))
    {
      SipStack::carrierIdentifier((SipStack *)v272.__r_.__value_.__l.__data_, &__p);
      BambiPrefsManager::setPrefsForCarrier((BambiPrefsManager *)&__p, *(ImsPrefs **)(v270 + 336), 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *(_QWORD *)(v270 + 336) = 0;
    }
    else
    {
      v24 = BambiPrefsManager::instance((BambiPrefsManager *)v23);
      SipStack::carrierIdentifier((SipStack *)v272.__r_.__value_.__l.__data_, &__p);
      BambiPrefsManager::loadPrefs((uint64_t)v24, (BambiPrefsManager *)&__p, v5, v3, 1, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    size = (std::__shared_weak_count *)v272.__r_.__value_.__l.__size_;
    v277 = *(_OWORD *)&v272.__r_.__value_.__l.__data_;
    if (v272.__r_.__value_.__l.__size_)
    {
      v26 = (unint64_t *)(v272.__r_.__value_.__l.__size_ + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&str_19_6);
    IPTelephonyManager::initializeImpuRankings(v270, (SipStack **)&v277, (uint64_t)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (size)
    {
      p_shared_owners = (unint64_t *)&size->__shared_owners_;
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    bzero(&__p, 0x9B8uLL);
    SipStackConfig::SipStackConfig((SipStackConfig *)&__p);
    v30 = (const ImsPrefs *)SipStack::prefs((SipStack *)v272.__r_.__value_.__l.__data_);
    SipStackConfig::initializeFromPrefs((SipStackConfig *)&__p, v30, 0, 0, *(_BYTE *)(v272.__r_.__value_.__r.__words[0] + 2665));
    v276 = 0x10000;
    BambiClient::bootstrap(*(_QWORD *)(v270 + 168), &v276);
    IPTelephonyManager::setDelegates((uint64_t *)v270, (uint64_t)&v275, 1);
    SipStackConfig::~SipStackConfig((void **)&__p.__r_.__value_.__l.__data_);
    v31 = (std::__shared_weak_count *)v272.__r_.__value_.__l.__size_;
    if (v272.__r_.__value_.__l.__size_)
    {
      v32 = (unint64_t *)(v272.__r_.__value_.__l.__size_ + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
  SipStack::carrierIdentifier(v273, &__p);
  v35 = BambiPrefsManager::instance(v34);
  v36 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v35, (void **)&__p.__r_.__value_.__l.__data_);
  v37 = (void **)((char *)BambiPrefsManager::instance((BambiPrefsManager *)v36) + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v37 == v36)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "call");
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&str_19_6);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v42 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)"unable to resolve preferences for given identifier: ", 52);
    *(_BYTE *)(v42 + 17) = 0;
    SipStack::carrierIdentifier(v273, &v272);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v42 + 32))(v42, &v272);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v42 + 17) = 0;
    if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v272.__r_.__value_.__l.__data_);
LABEL_61:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_64;
    goto LABEL_65;
  }
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)v271, v10);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ipt");
  v38 = v269;
  v39 = (_QWORD *)v270;
  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&str_19_6);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v40 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&__str);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)"Deferring emergency initialization for stack ", 45);
  *(_BYTE *)(v40 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v40 + 32))(v40, &v275);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v40 + 17) = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  DeferredInit::DeferredInit(&__p, (__int128 *)&v275, (__int128 *)v7, v269);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v275;
  v41 = std::__tree<std::__value_type<std::string,DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DeferredInit>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v270 + 392), (void **)&v275.__r_.__value_.__l.__data_, (__int128 **)&__str);
  DeferredInit::operator=((std::string *)(v41 + 56), (uint64_t)&__p);
  std::__optional_destruct_base<DeferredEmergency,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v322);
  ims::StackConfig::~StackConfig((void **)&v280 + 1);
  if (SBYTE7(v280) < 0)
    operator delete(v279[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(char *)(v12 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v12, *(_QWORD *)(v12 + 8));
  else
    __p = *(std::string *)v12;
  IMSCallOptions::IMSCallOptions((IMSCallOptions *)v279, (const IMSCallOptions *)v271);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v275;
  v46 = std::__tree<std::__value_type<std::string,DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DeferredInit>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v270 + 392), (void **)&v275.__r_.__value_.__l.__data_, (__int128 **)&__str);
  v47 = v46;
  v48 = (std::string *)(v46 + 840);
  if (v46[5960])
  {
    if (v46[863] < 0)
      operator delete(v48->__r_.__value_.__l.__data_);
    *v48 = __p;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    *((_WORD *)v47 + 432) = v279[0];
    v49 = (void **)(v47 + 880);
    if (v47[903] < 0)
      operator delete(*v49);
    *(_OWORD *)v49 = v280;
    *((_QWORD *)v47 + 112) = v281;
    HIBYTE(v281) = 0;
    LOBYTE(v280) = 0;
    *((_WORD *)v47 + 452) = v282;
    v50 = (void **)(v47 + 912);
    if (v47[935] < 0)
      operator delete(*v50);
    *(_OWORD *)v50 = v283;
    *((_QWORD *)v47 + 116) = v284;
    HIBYTE(v284) = 0;
    LOBYTE(v283) = 0;
    v51 = v286;
    *(_OWORD *)(v47 + 936) = v285;
    *(_OWORD *)(v47 + 952) = v51;
    *(_OWORD *)(v47 + 968) = *(_OWORD *)v287;
    *(_QWORD *)(v47 + 981) = *(_QWORD *)&v287[13];
    v52 = (void **)(v47 + 992);
    if (v47[1015] < 0)
      operator delete(*v52);
    *((_QWORD *)v47 + 126) = v289;
    *(_OWORD *)v52 = v288;
    HIBYTE(v289) = 0;
    LOBYTE(v288) = 0;
    v53 = (void **)(v47 + 1016);
    if (v47[1039] < 0)
      operator delete(*v53);
    *(_OWORD *)v53 = v290;
    *((_QWORD *)v47 + 129) = v291;
    HIBYTE(v291) = 0;
    LOBYTE(v290) = 0;
    v47[1040] = v292;
    v54 = v294;
    *(_OWORD *)(v47 + 1048) = v293;
    *(_OWORD *)(v47 + 1064) = v54;
    *(_OWORD *)(v47 + 1080) = v295;
    v55 = (void **)(v47 + 1096);
    if (v47[1119] < 0)
      operator delete(*v55);
    *((_QWORD *)v47 + 139) = v297;
    *(_OWORD *)v55 = v296;
    HIBYTE(v297) = 0;
    LOBYTE(v296) = 0;
    v56 = (void **)(v47 + 1120);
    if (v47[1143] < 0)
      operator delete(*v56);
    *((_QWORD *)v47 + 142) = v299;
    *(_OWORD *)v56 = v298;
    HIBYTE(v299) = 0;
    LOBYTE(v298) = 0;
    v57 = (void **)(v47 + 1144);
    if (v47[1167] < 0)
      operator delete(*v57);
    *((_QWORD *)v47 + 145) = v301;
    *(_OWORD *)v57 = v300;
    HIBYTE(v301) = 0;
    LOBYTE(v300) = 0;
    v58 = (void **)(v47 + 1168);
    if (v47[1191] < 0)
      operator delete(*v58);
    *((_QWORD *)v47 + 148) = v303;
    *(_OWORD *)v58 = v302;
    HIBYTE(v303) = 0;
    LOBYTE(v302) = 0;
    v59 = (void **)(v47 + 1192);
    if (v47[1215] < 0)
      operator delete(*v59);
    *(_OWORD *)v59 = v304;
    *((_QWORD *)v47 + 151) = v305;
    HIBYTE(v305) = 0;
    LOBYTE(v304) = 0;
    v47[1216] = v306;
    v60 = (void **)(v47 + 1224);
    if (v47[1248] == v309)
    {
      if (v47[1248])
      {
        if (v47[1247] < 0)
          operator delete(*v60);
        *(_OWORD *)v60 = v307;
        *((_QWORD *)v47 + 155) = v308;
        HIBYTE(v308) = 0;
        LOBYTE(v307) = 0;
      }
    }
    else if (v47[1248])
    {
      if (v47[1247] < 0)
        operator delete(*v60);
      v47[1248] = 0;
    }
    else
    {
      *(_OWORD *)v60 = v307;
      *((_QWORD *)v47 + 155) = v308;
      v308 = 0;
      v307 = 0uLL;
      v47[1248] = 1;
    }
    v166 = (void **)(v47 + 1256);
    if (v47[1279] < 0)
      operator delete(*v166);
    *((_QWORD *)v47 + 159) = v311;
    *(_OWORD *)v166 = v310;
    HIBYTE(v311) = 0;
    LOBYTE(v310) = 0;
    v167 = (void **)(v47 + 1280);
    if (v47[1303] < 0)
      operator delete(*v167);
    *((_QWORD *)v47 + 162) = v313;
    *(_OWORD *)v167 = v312;
    HIBYTE(v313) = 0;
    LOBYTE(v312) = 0;
    v168 = (void **)(v47 + 1304);
    if (v47[1327] < 0)
      operator delete(*v168);
    *(_OWORD *)v168 = v314;
    *((_QWORD *)v47 + 165) = v315;
    HIBYTE(v315) = 0;
    LOBYTE(v314) = 0;
    v47[1328] = v316;
    std::vector<SipUri>::__vdeallocate((_QWORD *)v47 + 167);
    *(_OWORD *)(v47 + 1336) = v317;
    v169 = v320[0];
    *((_OWORD *)v47 + 85) = v319;
    *((_QWORD *)v47 + 169) = v318;
    v318 = 0;
    v317 = 0uLL;
    *((_OWORD *)v47 + 86) = v169;
    *(_OWORD *)(v47 + 1389) = *(_OWORD *)((char *)v320 + 13);
    SipUri::operator=((SipUri *)(v47 + 1408), (uint64_t)v321);
    SipUri::operator=((SipUri *)(v47 + 1816), (uint64_t)v323);
    v170 = (void **)(v47 + 2224);
    if (v47[2247] < 0)
      operator delete(*v170);
    *((_QWORD *)v47 + 280) = *(_QWORD *)v325;
    *(_OWORD *)v170 = v324;
    v325[7] = 0;
    LOBYTE(v324) = 0;
    v171 = (void **)(v47 + 2248);
    if (v47[2271] < 0)
      operator delete(*v171);
    *((_QWORD *)v47 + 283) = *(_QWORD *)&v325[24];
    *(_OWORD *)v171 = *(_OWORD *)&v325[8];
    v325[31] = 0;
    v325[8] = 0;
    v172 = (void **)(v47 + 2272);
    if (v47[2295] < 0)
      operator delete(*v172);
    *((_QWORD *)v47 + 286) = v327;
    *(_OWORD *)v172 = v326;
    HIBYTE(v327) = 0;
    LOBYTE(v326) = 0;
    v173 = v47 + 2296;
    v174 = (void *)*((_QWORD *)v47 + 287);
    if (v174)
    {
      *((_QWORD *)v47 + 288) = v174;
      operator delete(v174);
      *v173 = 0;
      *((_QWORD *)v47 + 288) = 0;
      *((_QWORD *)v47 + 289) = 0;
    }
    *(_OWORD *)v173 = v328;
    *((_QWORD *)v47 + 289) = v329;
    v329 = 0;
    v328 = 0uLL;
    *((_QWORD *)v47 + 292) = v331;
    *((_OWORD *)v47 + 145) = v330;
    v175 = (void **)(v47 + 2344);
    if (v47[2367] < 0)
      operator delete(*v175);
    *((_QWORD *)v47 + 295) = v333;
    *(_OWORD *)v175 = v332;
    HIBYTE(v333) = 0;
    LOBYTE(v332) = 0;
    v176 = (void **)(v47 + 2368);
    if (v47[2391] < 0)
      operator delete(*v176);
    *((_QWORD *)v47 + 298) = v335;
    *(_OWORD *)v176 = v334;
    HIBYTE(v335) = 0;
    LOBYTE(v334) = 0;
    *(_OWORD *)(v47 + 2392) = v336;
    v47[2408] = v337;
    v177 = (void **)(v47 + 2416);
    if (v47[2439] < 0)
      operator delete(*v177);
    *((_QWORD *)v47 + 304) = v339;
    *(_OWORD *)v177 = v338;
    HIBYTE(v339) = 0;
    LOBYTE(v338) = 0;
    v178 = (void **)(v47 + 2440);
    if (v47[2463] < 0)
      operator delete(*v178);
    *(_OWORD *)v178 = v340;
    *((_QWORD *)v47 + 307) = v341;
    HIBYTE(v341) = 0;
    LOBYTE(v340) = 0;
    v47[2480] = v343;
    *((_OWORD *)v47 + 154) = v342;
    v179 = (void **)(v47 + 2488);
    if (v47[2511] < 0)
      operator delete(*v179);
    *((_QWORD *)v47 + 313) = v345;
    *(_OWORD *)v179 = v344;
    HIBYTE(v345) = 0;
    LOBYTE(v344) = 0;
    v180 = (void **)(v47 + 2512);
    if (v47[2535] < 0)
      operator delete(*v180);
    *((_QWORD *)v47 + 316) = v347;
    *(_OWORD *)v180 = v346;
    HIBYTE(v347) = 0;
    LOBYTE(v346) = 0;
    *(_OWORD *)(v47 + 2536) = v348;
    v47[2552] = v349;
    *((_WORD *)v47 + 1280) = v350;
    v47[2562] = v351;
    v181 = v47 + 2576;
    std::__tree<unsigned int>::destroy((uint64_t)(v47 + 2568), *((_QWORD **)v47 + 322));
    *((_QWORD *)v47 + 321) = v352;
    v182 = v353;
    *((_QWORD *)v47 + 322) = v353;
    v183 = v354;
    *((_QWORD *)v47 + 323) = v354;
    if (v183)
    {
      *(_QWORD *)(v182 + 16) = v181;
      v352 = &v353;
      v353 = 0;
      v354 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 321) = v181;
    }
    v184 = v47 + 2600;
    std::__tree<unsigned int>::destroy((uint64_t)(v47 + 2592), *((_QWORD **)v47 + 325));
    *((_QWORD *)v47 + 324) = v355;
    v185 = v356;
    *((_QWORD *)v47 + 325) = v356;
    v186 = v357;
    *((_QWORD *)v47 + 326) = v357;
    if (v186)
    {
      *(_QWORD *)(v185 + 16) = v184;
      v355 = &v356;
      v356 = 0;
      v357 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 324) = v184;
    }
    v187 = (void **)(v47 + 2616);
    if (v47[2639] < 0)
      operator delete(*v187);
    *(_OWORD *)v187 = v358;
    *((_QWORD *)v47 + 329) = v359;
    HIBYTE(v359) = 0;
    LOBYTE(v358) = 0;
    *((_QWORD *)v47 + 330) = v360;
    v188 = (void **)(v47 + 2648);
    if (v47[2671] < 0)
      operator delete(*v188);
    *(_OWORD *)v188 = v361;
    *((_QWORD *)v47 + 333) = v362;
    v189 = v364[0];
    *((_OWORD *)v47 + 167) = v363;
    HIBYTE(v362) = 0;
    LOBYTE(v361) = 0;
    *((_OWORD *)v47 + 168) = v189;
    *(_OWORD *)(v47 + 2699) = *(_OWORD *)((char *)v364 + 11);
    v190 = v47 + 2736;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v47 + 2728), *((_QWORD **)v47 + 342));
    *((_QWORD *)v47 + 341) = v365;
    v191 = v366;
    *((_QWORD *)v47 + 342) = v366;
    v192 = v367;
    *((_QWORD *)v47 + 343) = v367;
    if (v192)
    {
      *(_QWORD *)(v191 + 16) = v190;
      v365 = &v366;
      v366 = 0;
      v367 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 341) = v190;
    }
    v193 = v47 + 2768;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v47 + 2760), *((_QWORD **)v47 + 346));
    *((_QWORD *)v47 + 345) = v368;
    v194 = v369;
    *((_QWORD *)v47 + 346) = v369;
    v195 = v370;
    *((_QWORD *)v47 + 347) = v370;
    if (v195)
    {
      *(_QWORD *)(v194 + 16) = v193;
      v368 = &v369;
      v369 = 0;
      v370 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 345) = v193;
    }
    v196 = v47 + 2800;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v47 + 2792), *((_QWORD **)v47 + 350));
    *((_QWORD *)v47 + 349) = v371;
    v197 = v372;
    *((_QWORD *)v47 + 350) = v372;
    v198 = v373;
    *((_QWORD *)v47 + 351) = v373;
    if (v198)
    {
      *(_QWORD *)(v197 + 16) = v196;
      v371 = &v372;
      v372 = 0;
      v373 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 349) = v196;
    }
    v199 = v47 + 2832;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v47 + 2824), *((_QWORD **)v47 + 354));
    *((_QWORD *)v47 + 353) = v374;
    v200 = v375;
    *((_QWORD *)v47 + 354) = v375;
    v201 = v376;
    *((_QWORD *)v47 + 355) = v376;
    if (v201)
    {
      *(_QWORD *)(v200 + 16) = v199;
      v374 = &v375;
      v375 = 0;
      v376 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 353) = v199;
    }
    v202 = v47 + 2864;
    std::__tree<unsigned int>::destroy((uint64_t)(v47 + 2856), *((_QWORD **)v47 + 358));
    *((_QWORD *)v47 + 357) = v377;
    v203 = v378;
    *((_QWORD *)v47 + 358) = v378;
    v204 = v379;
    *((_QWORD *)v47 + 359) = v379;
    if (v204)
    {
      *(_QWORD *)(v203 + 16) = v202;
      v377 = &v378;
      v378 = 0;
      v379 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 357) = v202;
    }
    v47[2880] = v380;
    v205 = (void **)(v47 + 2888);
    if (v47[2911] < 0)
      operator delete(*v205);
    *((_QWORD *)v47 + 363) = *(_QWORD *)&v381[1];
    *(_OWORD *)v205 = v381[0];
    BYTE7(v381[1]) = 0;
    LOBYTE(v381[0]) = 0;
    v206 = (void **)(v47 + 2912);
    if (v47[2935] < 0)
      operator delete(*v206);
    *((_QWORD *)v47 + 366) = *((_QWORD *)&v381[2] + 1);
    *(_OWORD *)v206 = *(_OWORD *)((char *)&v381[1] + 8);
    HIBYTE(v381[2]) = 0;
    BYTE8(v381[1]) = 0;
    v207 = (void **)(v47 + 2936);
    if (v47[2959] < 0)
      operator delete(*v207);
    *(_OWORD *)v207 = v382;
    *((_QWORD *)v47 + 369) = v383;
    HIBYTE(v383) = 0;
    LOBYTE(v382) = 0;
    v47[2960] = v384;
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v47 + 2968));
    *(_OWORD *)(v47 + 2968) = v385;
    *((_QWORD *)v47 + 373) = v386;
    v386 = 0;
    v385 = 0u;
    *((_QWORD *)v47 + 374) = v387;
    *((_WORD *)v47 + 1500) = v388;
    *((_OWORD *)v47 + 188) = v389;
    *((_OWORD *)v47 + 189) = v390[0];
    *(_OWORD *)(v47 + 3034) = *(_OWORD *)((char *)v390 + 10);
    SipUri::operator=((SipUri *)(v47 + 3056), (uint64_t)v391);
    v47[3464] = v392;
    v208 = (void **)(v47 + 3472);
    if (v47[3495] < 0)
      operator delete(*v208);
    *((_QWORD *)v47 + 436) = v394;
    *(_OWORD *)v208 = v393;
    HIBYTE(v394) = 0;
    LOBYTE(v393) = 0;
    v209 = (void **)(v47 + 3496);
    if (v47[3519] < 0)
      operator delete(*v209);
    *(_OWORD *)v209 = v395;
    *((_QWORD *)v47 + 439) = v396;
    HIBYTE(v396) = 0;
    LOBYTE(v395) = 0;
    if (v48 != &__p)
    {
      std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,unsigned int>,std::__tree_node<std::__value_type<std::string,unsigned int>,void *> *,long>>((uint64_t *)v47 + 441, v397, &v398);
      *((_DWORD *)v47 + 888) = v399;
      v47[3556] = v400;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)v47 + 446, v401, &v402);
    }
    v210 = *(_OWORD *)v405;
    *((_OWORD *)v47 + 225) = v404;
    v47[3592] = v403;
    *((_OWORD *)v47 + 226) = v210;
    *(_OWORD *)(v47 + 3628) = *(_OWORD *)((char *)&v405[1] + 4);
    v211 = (void **)(v47 + 3648);
    if (v47[3671] < 0)
      operator delete(*v211);
    *((_QWORD *)v47 + 458) = v405[6];
    *(_OWORD *)v211 = *(_OWORD *)&v405[4];
    HIBYTE(v405[6]) = 0;
    LOBYTE(v405[4]) = 0;
    v212 = (void **)(v47 + 3672);
    if (v47[3695] < 0)
      operator delete(*v212);
    *(_OWORD *)v212 = v406;
    *((_QWORD *)v47 + 461) = v407;
    HIBYTE(v407) = 0;
    LOBYTE(v406) = 0;
    *((_WORD *)v47 + 1848) = v408;
    v213 = v47 + 3720;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v47 + 3712), *((_QWORD **)v47 + 465));
    *((_QWORD *)v47 + 464) = v409;
    v214 = v410;
    *((_QWORD *)v47 + 465) = v410;
    v215 = v411;
    *((_QWORD *)v47 + 466) = v411;
    if (v215)
    {
      *(_QWORD *)(v214 + 16) = v213;
      v409 = &v410;
      v410 = 0;
      v411 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 464) = v213;
    }
    v216 = v47 + 3752;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v47 + 3744), *((_QWORD **)v47 + 469));
    *((_QWORD *)v47 + 468) = v412;
    v217 = v413;
    *((_QWORD *)v47 + 469) = v413;
    v218 = v414;
    *((_QWORD *)v47 + 470) = v414;
    if (v218)
    {
      *(_QWORD *)(v217 + 16) = v216;
      v412 = &v413;
      v413 = 0;
      v414 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 468) = v216;
    }
    v219 = v47 + 3784;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v47 + 3776), *((_QWORD **)v47 + 473));
    *((_QWORD *)v47 + 472) = v415;
    v220 = v416;
    *((_QWORD *)v47 + 473) = v416;
    v221 = v417;
    *((_QWORD *)v47 + 474) = v417;
    if (v221)
    {
      *(_QWORD *)(v220 + 16) = v219;
      v415 = &v416;
      v416 = 0;
      v417 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 472) = v219;
    }
    v222 = v419;
    *(_OWORD *)(v47 + 3800) = v418;
    *(_OWORD *)(v47 + 3816) = v222;
    v223 = v47 + 3848;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v47 + 3840), *((_QWORD **)v47 + 481));
    *((_QWORD *)v47 + 480) = v420;
    v224 = v421;
    *((_QWORD *)v47 + 481) = v421;
    v225 = v422;
    *((_QWORD *)v47 + 482) = v422;
    if (v225)
    {
      *(_QWORD *)(v224 + 16) = v223;
      v420 = &v421;
      v421 = 0;
      v422 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 480) = v223;
    }
    *((_QWORD *)v47 + 483) = v423;
    v226 = (void **)(v47 + 3872);
    if (v47[3895] < 0)
      operator delete(*v226);
    *((_QWORD *)v47 + 486) = *(_QWORD *)&v424[1];
    *(_OWORD *)v226 = v424[0];
    BYTE7(v424[1]) = 0;
    LOBYTE(v424[0]) = 0;
    v227 = (void **)(v47 + 3896);
    if (v47[3919] < 0)
      operator delete(*v227);
    *(_OWORD *)v227 = *(_OWORD *)((char *)&v424[1] + 8);
    *((_QWORD *)v47 + 489) = *((_QWORD *)&v424[2] + 1);
    HIBYTE(v424[2]) = 0;
    BYTE8(v424[1]) = 0;
    *((_QWORD *)v47 + 490) = v425;
    *((_WORD *)v47 + 1964) = v426;
    v228 = (void **)(v47 + 3936);
    if (v47[3959] < 0)
      operator delete(*v228);
    *(_OWORD *)v228 = v427;
    *((_QWORD *)v47 + 494) = v428;
    HIBYTE(v428) = 0;
    LOBYTE(v427) = 0;
    *((_WORD *)v47 + 1980) = v429;
    v229 = (void **)(v47 + 3968);
    if (v47[3991] < 0)
      operator delete(*v229);
    *(_OWORD *)v229 = v430;
    *((_QWORD *)v47 + 498) = v431;
    HIBYTE(v431) = 0;
    LOBYTE(v430) = 0;
    *((_DWORD *)v47 + 998) = v432;
    v230 = v47 + 4016;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v47 + 4008), *((_QWORD **)v47 + 502));
    *((_QWORD *)v47 + 501) = v433;
    v231 = v434;
    *((_QWORD *)v47 + 502) = v434;
    v232 = v435;
    *((_QWORD *)v47 + 503) = v435;
    if (v232)
    {
      *(_QWORD *)(v231 + 16) = v230;
      v433 = &v434;
      v434 = 0;
      v435 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 501) = v230;
    }
    v233 = v47 + 4048;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v47 + 4040), *((_QWORD **)v47 + 506));
    *((_QWORD *)v47 + 505) = v436;
    v234 = v437;
    *((_QWORD *)v47 + 506) = v437;
    v235 = v438;
    *((_QWORD *)v47 + 507) = v438;
    if (v235)
    {
      *(_QWORD *)(v234 + 16) = v233;
      v436 = &v437;
      v437 = 0;
      v438 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 505) = v233;
    }
    v236 = v47 + 4080;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v47 + 4072), *((_QWORD **)v47 + 510));
    *((_QWORD *)v47 + 509) = v439;
    v237 = v440;
    *((_QWORD *)v47 + 510) = v440;
    v238 = v441;
    *((_QWORD *)v47 + 511) = v441;
    if (v238)
    {
      *(_QWORD *)(v237 + 16) = v236;
      v439 = &v440;
      v440 = 0;
      v441 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 509) = v236;
    }
    v239 = v47 + 4112;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v47 + 4104), *((_QWORD **)v47 + 514));
    *((_QWORD *)v47 + 513) = v442;
    v240 = v443;
    *((_QWORD *)v47 + 514) = v443;
    v241 = v444;
    *((_QWORD *)v47 + 515) = v444;
    if (v241)
    {
      *(_QWORD *)(v240 + 16) = v239;
      v442 = &v443;
      v443 = 0;
      v444 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 513) = v239;
    }
    *((_QWORD *)v47 + 516) = v445;
    v242 = v47 + 4144;
    std::__tree<std::string>::destroy((uint64_t)(v47 + 4136), *((char **)v47 + 518));
    *((_QWORD *)v47 + 517) = v446;
    v243 = v447;
    *((_QWORD *)v47 + 518) = v447;
    v244 = v448;
    *((_QWORD *)v47 + 519) = v448;
    if (v244)
    {
      *(_QWORD *)(v243 + 16) = v242;
      v446 = &v447;
      v447 = 0;
      v448 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 517) = v242;
    }
    v47[4164] = v450;
    *((_DWORD *)v47 + 1040) = v449;
    v245 = v47 + 4176;
    std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy((uint64_t)(v47 + 4168), *((_QWORD **)v47 + 522));
    *((_QWORD *)v47 + 521) = v451;
    v246 = v452;
    *((_QWORD *)v47 + 522) = v452;
    v247 = v453;
    *((_QWORD *)v47 + 523) = v453;
    if (v247)
    {
      *(_QWORD *)(v246 + 16) = v245;
      v451 = &v452;
      v452 = 0;
      v453 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 521) = v245;
    }
    v248 = v47 + 4208;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v47 + 4200), *((_QWORD **)v47 + 526));
    *((_QWORD *)v47 + 525) = v454;
    v249 = v455;
    *((_QWORD *)v47 + 526) = v455;
    v250 = v456;
    *((_QWORD *)v47 + 527) = v456;
    if (v250)
    {
      *(_QWORD *)(v249 + 16) = v248;
      v454 = &v455;
      v455 = 0;
      v456 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 525) = v248;
    }
    v47[4224] = v457;
    if (v48 != &__p)
      std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,ims::SpamCategory>,std::__tree_node<std::__value_type<std::string,ims::SpamCategory>,void *> *,long>>((uint64_t *)v47 + 529, v458, &v459);
    v47[4288] = v462;
    *((_OWORD *)v47 + 266) = v460;
    *((_OWORD *)v47 + 267) = v461;
    v251 = v47 + 4312;
    std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)(v47 + 4304), *((_QWORD **)v47 + 539));
    *((_QWORD *)v47 + 538) = v463;
    v252 = v464;
    *((_QWORD *)v47 + 539) = v464;
    v253 = v465;
    *((_QWORD *)v47 + 540) = v465;
    if (v253)
    {
      *(_QWORD *)(v252 + 16) = v251;
      v463 = &v464;
      v464 = 0;
      v465 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 538) = v251;
    }
    v254 = (void **)(v47 + 4328);
    if (v47[4351] < 0)
      operator delete(*v254);
    *(_OWORD *)v254 = *(_OWORD *)v466;
    *((_QWORD *)v47 + 543) = *(_QWORD *)&v466[16];
    v466[23] = 0;
    v466[0] = 0;
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v47 + 4352));
    *((_OWORD *)v47 + 272) = v467;
    *((_QWORD *)v47 + 546) = v468;
    v468 = 0;
    v467 = 0uLL;
    *((_DWORD *)v47 + 1094) = v469;
    v255 = (void **)(v47 + 4384);
    if (v47[4407] < 0)
      operator delete(*v255);
    *(_OWORD *)v255 = v470;
    *((_QWORD *)v47 + 550) = v471;
    HIBYTE(v471) = 0;
    LOBYTE(v470) = 0;
    SipUri::operator=((SipUri *)(v47 + 4408), (uint64_t)v472);
    *((_OWORD *)v47 + 301) = v473;
    *((_OWORD *)v47 + 302) = v474;
    v256 = (void **)(v47 + 4848);
    if (v47[4871] < 0)
      operator delete(*v256);
    *((_QWORD *)v47 + 608) = v476;
    *(_OWORD *)v256 = v475;
    HIBYTE(v476) = 0;
    LOBYTE(v475) = 0;
    *((_QWORD *)v47 + 609) = v477;
    *((_DWORD *)v47 + 1220) = v478;
    std::vector<SipSecurityAgreementConfig>::__vdeallocate((void **)v47 + 611);
    *(_OWORD *)(v47 + 4888) = v479;
    *((_QWORD *)v47 + 613) = v480;
    v480 = 0;
    v479 = 0uLL;
    *((_QWORD *)v47 + 614) = v481;
    v257 = v47 + 4936;
    std::__tree<unsigned int>::destroy((uint64_t)(v47 + 4928), *((_QWORD **)v47 + 617));
    *((_QWORD *)v47 + 616) = v482;
    v258 = v483;
    *((_QWORD *)v47 + 617) = v483;
    v259 = v484;
    *((_QWORD *)v47 + 618) = v484;
    if (v259)
    {
      *(_QWORD *)(v258 + 16) = v257;
      v482 = &v483;
      v483 = 0;
      v484 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 616) = v257;
    }
    *(_OWORD *)(v47 + 4952) = v485;
    *((_DWORD *)v47 + 1242) = v486;
    if (v48 != &__p)
    {
      v260 = v488;
      *(_OWORD *)(v47 + 4972) = v487;
      *(_OWORD *)(v47 + 4988) = v260;
      *((_DWORD *)v47 + 1251) = v489;
    }
    *((_QWORD *)v47 + 626) = v490;
    *((_DWORD *)v47 + 1254) = v491;
    BambiCallTerminationReasonsBase::assign((BambiCallTerminationReasonsBase *)(v47 + 5024), (const BambiCallTerminationReasonsBase *)v492);
    BambiCallIncomingTerminationReasons::assign((BambiCallIncomingTerminationReasons *)(v47 + 5192), (const BambiCallIncomingTerminationReasons *)v493);
    v261 = (void **)(v47 + 5384);
    if (v47[5407] < 0)
      operator delete(*v261);
    *(_OWORD *)v261 = v494;
    *((_QWORD *)v47 + 675) = v495;
    HIBYTE(v495) = 0;
    LOBYTE(v494) = 0;
    v47[5416] = v497;
    *((_QWORD *)v47 + 676) = v496;
    v262 = v47 + 5432;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v47 + 5424), *((_QWORD **)v47 + 679));
    *((_QWORD *)v47 + 678) = v498;
    v263 = v499;
    *((_QWORD *)v47 + 679) = v499;
    v264 = v500;
    *((_QWORD *)v47 + 680) = v500;
    if (v264)
    {
      *(_QWORD *)(v263 + 16) = v262;
      v498 = &v499;
      v499 = 0;
      v500 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 678) = v262;
    }
    *((_QWORD *)v47 + 681) = v501;
    *((_WORD *)v47 + 2728) = v502;
    *((_WORD *)v47 + 2732) = v503;
    v265 = (void **)(v47 + 5472);
    if (v47[5495] < 0)
      operator delete(*v265);
    *(_OWORD *)v265 = v504;
    *((_QWORD *)v47 + 686) = v505;
    HIBYTE(v505) = 0;
    LOBYTE(v504) = 0;
    SipUri::operator=((SipUri *)(v47 + 5496), (uint64_t)v506);
    v266 = (void **)(v47 + 5904);
    if (v47[5927] < 0)
      operator delete(*v266);
    *(_OWORD *)v266 = v507;
    *((_QWORD *)v47 + 740) = v508;
    HIBYTE(v508) = 0;
    v47[5928] = v509;
    LOBYTE(v507) = 0;
    v267 = (void **)(v47 + 5936);
    if (v47[5959] < 0)
      operator delete(*v267);
    *(_OWORD *)v267 = v510;
    *((_QWORD *)v47 + 744) = v511;
    HIBYTE(v511) = 0;
    LOBYTE(v510) = 0;
  }
  else
  {
    v268 = v46 + 5960;
    *(_OWORD *)&v48->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v46 + 107) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    *((_WORD *)v46 + 432) = v279[0];
    *((_QWORD *)v46 + 109) = off_1E78C0288;
    *((_OWORD *)v46 + 55) = v280;
    *((_QWORD *)v46 + 112) = v281;
    __p.__r_.__value_.__r.__words[2] = 0;
    v280 = 0uLL;
    v281 = 0;
    *((_WORD *)v46 + 452) = v282;
    v61 = v283;
    *((_QWORD *)v46 + 116) = v284;
    *((_OWORD *)v46 + 57) = v61;
    v283 = 0uLL;
    v62 = v285;
    v63 = v286;
    v64 = *(_OWORD *)v287;
    *(_QWORD *)(v46 + 981) = *(_QWORD *)&v287[13];
    *(_OWORD *)(v46 + 952) = v63;
    *(_OWORD *)(v46 + 968) = v64;
    *(_OWORD *)(v46 + 936) = v62;
    v65 = v288;
    *((_QWORD *)v46 + 126) = v289;
    *((_OWORD *)v46 + 62) = v65;
    v284 = 0;
    v288 = 0uLL;
    v289 = 0;
    v66 = v290;
    *((_QWORD *)v46 + 129) = v291;
    *(_OWORD *)(v46 + 1016) = v66;
    v290 = 0uLL;
    v46[1040] = v292;
    v67 = v299;
    *((_QWORD *)v46 + 139) = v297;
    *((_QWORD *)v46 + 142) = v67;
    v68 = v303;
    *((_QWORD *)v46 + 145) = v301;
    v69 = v295;
    v70 = v296;
    v71 = v293;
    *(_OWORD *)(v46 + 1064) = v294;
    *(_OWORD *)(v46 + 1080) = v69;
    *(_OWORD *)(v46 + 1048) = v71;
    *(_OWORD *)(v46 + 1096) = v70;
    v291 = 0;
    v296 = 0uLL;
    v297 = 0;
    *((_OWORD *)v46 + 70) = v298;
    v298 = 0uLL;
    v299 = 0;
    *(_OWORD *)(v46 + 1144) = v300;
    v300 = 0uLL;
    v72 = v302;
    *((_QWORD *)v46 + 148) = v68;
    *((_OWORD *)v46 + 73) = v72;
    v302 = 0uLL;
    v301 = 0;
    v73 = v304;
    *((_QWORD *)v46 + 151) = v305;
    *(_OWORD *)(v46 + 1192) = v73;
    v303 = 0;
    v304 = 0uLL;
    v305 = 0;
    v46[1216] = v306;
    v46[1224] = 0;
    v46[1248] = 0;
    if (v309)
    {
      *(_OWORD *)(v46 + 1224) = v307;
      *((_QWORD *)v46 + 155) = v308;
      v308 = 0;
      v307 = 0uLL;
      v46[1248] = 1;
    }
    v74 = v313;
    *((_QWORD *)v46 + 159) = v311;
    *(_OWORD *)(v46 + 1256) = v310;
    v75 = v312;
    *(_QWORD *)&v312 = 0;
    v310 = 0uLL;
    *((_QWORD *)v46 + 162) = v74;
    *((_OWORD *)v46 + 80) = v75;
    v311 = 0;
    *((_QWORD *)&v312 + 1) = 0;
    *((_QWORD *)v46 + 165) = v315;
    *(_OWORD *)(v46 + 1304) = v314;
    v313 = 0;
    v314 = 0uLL;
    v315 = 0;
    v46[1328] = v316;
    *(_OWORD *)(v46 + 1336) = v317;
    *((_QWORD *)v46 + 169) = v318;
    v317 = 0uLL;
    v318 = 0;
    v76 = v319;
    v77 = v320[0];
    *(_OWORD *)(v46 + 1389) = *(_OWORD *)((char *)v320 + 13);
    *((_OWORD *)v46 + 86) = v77;
    *((_OWORD *)v46 + 85) = v76;
    SipUri::SipUri((SipUri *)(v46 + 1408), (const SipUri *)v321);
    SipUri::SipUri((SipUri *)(v47 + 1816), (const SipUri *)v323);
    *((_OWORD *)v47 + 139) = v324;
    *((_QWORD *)v47 + 280) = *(_QWORD *)v325;
    v324 = 0u;
    v78 = *(_OWORD *)&v325[8];
    *(_OWORD *)v325 = 0u;
    *((_QWORD *)v47 + 283) = *(_QWORD *)&v325[24];
    *(_OWORD *)(v47 + 2248) = v78;
    *(_OWORD *)&v325[16] = 0u;
    *((_QWORD *)v47 + 286) = v327;
    *((_OWORD *)v47 + 142) = v326;
    v326 = 0u;
    v327 = 0;
    *(_OWORD *)(v47 + 2296) = v328;
    *((_QWORD *)v47 + 289) = v329;
    v328 = 0u;
    v329 = 0;
    v79 = v330;
    *((_QWORD *)v47 + 292) = v331;
    *((_OWORD *)v47 + 145) = v79;
    v80 = v332;
    *((_QWORD *)v47 + 295) = v333;
    *(_OWORD *)(v47 + 2344) = v80;
    v333 = 0;
    v332 = 0u;
    v81 = v334;
    *((_QWORD *)v47 + 298) = v335;
    *((_OWORD *)v47 + 148) = v81;
    v334 = 0uLL;
    v335 = 0;
    v82 = v336;
    v47[2408] = v337;
    *(_OWORD *)(v47 + 2392) = v82;
    v83 = v338;
    *((_QWORD *)v47 + 304) = v339;
    *((_OWORD *)v47 + 151) = v83;
    v338 = 0uLL;
    v339 = 0;
    v84 = v340;
    *((_QWORD *)v47 + 307) = v341;
    *(_OWORD *)(v47 + 2440) = v84;
    v340 = 0uLL;
    v341 = 0;
    v85 = v342;
    v47[2480] = v343;
    *((_OWORD *)v47 + 154) = v85;
    v86 = v344;
    *((_QWORD *)v47 + 313) = v345;
    *(_OWORD *)(v47 + 2488) = v86;
    v344 = 0uLL;
    v345 = 0;
    v87 = v346;
    *((_QWORD *)v47 + 316) = v347;
    *((_OWORD *)v47 + 157) = v87;
    v346 = 0uLL;
    v347 = 0;
    v88 = v348;
    v47[2552] = v349;
    *(_OWORD *)(v47 + 2536) = v88;
    v89 = v350;
    v47[2562] = v351;
    *((_WORD *)v47 + 1280) = v89;
    *((_QWORD *)v47 + 321) = v352;
    v90 = v47 + 2576;
    v91 = v353;
    *((_QWORD *)v47 + 322) = v353;
    v92 = v354;
    *((_QWORD *)v47 + 323) = v354;
    if (v92)
    {
      *(_QWORD *)(v91 + 16) = v90;
      v352 = &v353;
      v353 = 0;
      v354 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 321) = v90;
    }
    *((_QWORD *)v47 + 324) = v355;
    v93 = v47 + 2600;
    v94 = v356;
    *((_QWORD *)v47 + 325) = v356;
    v95 = v357;
    *((_QWORD *)v47 + 326) = v357;
    if (v95)
    {
      *(_QWORD *)(v94 + 16) = v93;
      v355 = &v356;
      v356 = 0;
      v357 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 324) = v93;
    }
    *((_QWORD *)v47 + 329) = v359;
    *(_OWORD *)(v47 + 2616) = v358;
    v358 = 0uLL;
    v359 = 0;
    *((_QWORD *)v47 + 330) = v360;
    *((_QWORD *)v47 + 333) = v362;
    *(_OWORD *)(v47 + 2648) = v361;
    v361 = 0uLL;
    v362 = 0;
    v96 = v363;
    v97 = v364[0];
    *(_OWORD *)(v47 + 2699) = *(_OWORD *)((char *)v364 + 11);
    *((_OWORD *)v47 + 168) = v97;
    *((_OWORD *)v47 + 167) = v96;
    *((_QWORD *)v47 + 340) = &off_1E78EB020;
    *((_QWORD *)v47 + 341) = v365;
    v98 = v47 + 2736;
    v99 = v366;
    *((_QWORD *)v47 + 342) = v366;
    v100 = v367;
    *((_QWORD *)v47 + 343) = v367;
    if (v100)
    {
      *(_QWORD *)(v99 + 16) = v98;
      v365 = &v366;
      v366 = 0;
      v367 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 341) = v98;
    }
    *((_QWORD *)v47 + 344) = &off_1E78EB020;
    *((_QWORD *)v47 + 345) = v368;
    v101 = v47 + 2768;
    v102 = v369;
    *((_QWORD *)v47 + 346) = v369;
    v103 = v370;
    *((_QWORD *)v47 + 347) = v370;
    if (v103)
    {
      *(_QWORD *)(v102 + 16) = v101;
      v368 = &v369;
      v369 = 0;
      v370 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 345) = v101;
    }
    *((_QWORD *)v47 + 348) = &off_1E78EB020;
    *((_QWORD *)v47 + 349) = v371;
    v104 = v47 + 2800;
    v105 = v372;
    *((_QWORD *)v47 + 350) = v372;
    v106 = v373;
    *((_QWORD *)v47 + 351) = v373;
    if (v106)
    {
      *(_QWORD *)(v105 + 16) = v104;
      v371 = &v372;
      v372 = 0;
      v373 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 349) = v104;
    }
    *((_QWORD *)v47 + 352) = &off_1E78EB020;
    *((_QWORD *)v47 + 353) = v374;
    v107 = v47 + 2832;
    v108 = v375;
    *((_QWORD *)v47 + 354) = v375;
    v109 = v376;
    *((_QWORD *)v47 + 355) = v376;
    if (v109)
    {
      *(_QWORD *)(v108 + 16) = v107;
      v374 = &v375;
      v375 = 0;
      v376 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 353) = v107;
    }
    *((_QWORD *)v47 + 356) = &off_1E78DD338;
    *((_QWORD *)v47 + 357) = v377;
    v110 = v47 + 2864;
    v111 = v378;
    *((_QWORD *)v47 + 358) = v378;
    v112 = v379;
    *((_QWORD *)v47 + 359) = v379;
    if (v112)
    {
      *(_QWORD *)(v111 + 16) = v110;
      v377 = &v378;
      v378 = 0;
      v379 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 357) = v110;
    }
    v47[2880] = v380;
    *((_QWORD *)v47 + 363) = *(_QWORD *)&v381[1];
    *(_OWORD *)(v47 + 2888) = v381[0];
    memset(v381, 0, 24);
    *((_QWORD *)v47 + 366) = *((_QWORD *)&v381[2] + 1);
    *((_OWORD *)v47 + 182) = *(_OWORD *)((char *)&v381[1] + 8);
    memset((char *)&v381[1] + 8, 0, 24);
    v113 = v382;
    *((_QWORD *)v47 + 369) = v383;
    *(_OWORD *)(v47 + 2936) = v113;
    v383 = 0;
    v382 = 0u;
    v47[2960] = v384;
    *(_OWORD *)(v47 + 2968) = v385;
    *((_QWORD *)v47 + 373) = v386;
    v385 = 0u;
    v386 = 0;
    v114 = v387;
    *((_WORD *)v47 + 1500) = v388;
    *((_QWORD *)v47 + 374) = v114;
    v115 = v389;
    v116 = v390[0];
    *(_OWORD *)(v47 + 3034) = *(_OWORD *)((char *)v390 + 10);
    *((_OWORD *)v47 + 189) = v116;
    *((_OWORD *)v47 + 188) = v115;
    SipUri::SipUri((SipUri *)(v47 + 3056), (const SipUri *)v391);
    v47[3464] = v392;
    *((_QWORD *)v47 + 436) = v394;
    *((_OWORD *)v47 + 217) = v393;
    v394 = 0;
    v393 = 0uLL;
    *((_QWORD *)v47 + 439) = v396;
    *(_OWORD *)(v47 + 3496) = v395;
    v395 = 0uLL;
    v396 = 0;
    *((_QWORD *)v47 + 440) = &off_1E78D0398;
    std::map<std::string,unsigned int>::map[abi:ne180100]((uint64_t *)v47 + 441, (uint64_t)&v397);
    *((_DWORD *)v47 + 888) = v399;
    v47[3556] = v400;
    *((_QWORD *)v47 + 445) = &off_1E78B82D8;
    std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)v47 + 446, (void **)v401, (void **)&v402);
    v47[3593] = 1;
    v47[3592] = v403;
    v117 = *(_OWORD *)v405;
    *((_OWORD *)v47 + 225) = v404;
    *((_OWORD *)v47 + 226) = v117;
    *(_OWORD *)(v47 + 3628) = *(_OWORD *)((char *)&v405[1] + 4);
    *((_QWORD *)v47 + 458) = v405[6];
    *((_OWORD *)v47 + 228) = *(_OWORD *)&v405[4];
    memset(&v405[4], 0, 24);
    v118 = v406;
    *((_QWORD *)v47 + 461) = v407;
    *(_OWORD *)(v47 + 3672) = v118;
    v407 = 0;
    v406 = 0u;
    *((_WORD *)v47 + 1848) = v408;
    *((_QWORD *)v47 + 463) = &off_1E78EB020;
    *((_QWORD *)v47 + 464) = v409;
    v119 = v47 + 3720;
    v120 = v410;
    *((_QWORD *)v47 + 465) = v410;
    v121 = v411;
    *((_QWORD *)v47 + 466) = v411;
    if (v121)
    {
      *(_QWORD *)(v120 + 16) = v119;
      v409 = &v410;
      v410 = 0;
      v411 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 464) = v119;
    }
    *((_QWORD *)v47 + 467) = &off_1E78EB020;
    *((_QWORD *)v47 + 468) = v412;
    v122 = v47 + 3752;
    v123 = v413;
    *((_QWORD *)v47 + 469) = v413;
    v124 = v414;
    *((_QWORD *)v47 + 470) = v414;
    if (v124)
    {
      *(_QWORD *)(v123 + 16) = v122;
      v412 = &v413;
      v413 = 0;
      v414 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 468) = v122;
    }
    *((_QWORD *)v47 + 471) = &off_1E78EB020;
    *((_QWORD *)v47 + 472) = v415;
    v125 = v47 + 3784;
    v126 = v416;
    *((_QWORD *)v47 + 473) = v416;
    v127 = v417;
    *((_QWORD *)v47 + 474) = v417;
    if (v127)
    {
      *(_QWORD *)(v126 + 16) = v125;
      v415 = &v416;
      v416 = 0;
      v417 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 472) = v125;
    }
    v128 = v419;
    *(_OWORD *)(v47 + 3800) = v418;
    *(_OWORD *)(v47 + 3816) = v128;
    *((_QWORD *)v47 + 479) = &off_1E78EB020;
    *((_QWORD *)v47 + 480) = v420;
    v129 = v47 + 3848;
    v130 = v421;
    *((_QWORD *)v47 + 481) = v421;
    v131 = v422;
    *((_QWORD *)v47 + 482) = v422;
    if (v131)
    {
      *(_QWORD *)(v130 + 16) = v129;
      v420 = &v421;
      v421 = 0;
      v422 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 480) = v129;
    }
    *((_QWORD *)v47 + 483) = v423;
    *((_QWORD *)v47 + 486) = *(_QWORD *)&v424[1];
    *((_OWORD *)v47 + 242) = v424[0];
    memset(v424, 0, 24);
    *((_QWORD *)v47 + 489) = *((_QWORD *)&v424[2] + 1);
    *(_OWORD *)(v47 + 3896) = *(_OWORD *)((char *)&v424[1] + 8);
    memset((char *)&v424[1] + 8, 0, 24);
    v132 = v425;
    *((_WORD *)v47 + 1964) = v426;
    *((_QWORD *)v47 + 490) = v132;
    v133 = v427;
    *((_QWORD *)v47 + 494) = v428;
    *((_OWORD *)v47 + 246) = v133;
    v427 = 0u;
    v428 = 0;
    *((_WORD *)v47 + 1980) = v429;
    v134 = v430;
    *((_QWORD *)v47 + 498) = v431;
    *((_OWORD *)v47 + 248) = v134;
    v430 = 0u;
    v431 = 0;
    *((_DWORD *)v47 + 998) = v432;
    *((_QWORD *)v47 + 500) = &off_1E78EB020;
    *((_QWORD *)v47 + 501) = v433;
    v135 = v47 + 4016;
    v136 = v434;
    *((_QWORD *)v47 + 502) = v434;
    v137 = v435;
    *((_QWORD *)v47 + 503) = v435;
    if (v137)
    {
      *(_QWORD *)(v136 + 16) = v135;
      v433 = &v434;
      v434 = 0;
      v435 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 501) = v135;
    }
    *((_QWORD *)v47 + 504) = &off_1E78EB020;
    *((_QWORD *)v47 + 505) = v436;
    v138 = v47 + 4048;
    v139 = v437;
    *((_QWORD *)v47 + 506) = v437;
    v140 = v438;
    *((_QWORD *)v47 + 507) = v438;
    if (v140)
    {
      *(_QWORD *)(v139 + 16) = v138;
      v436 = &v437;
      v437 = 0;
      v438 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 505) = v138;
    }
    *((_QWORD *)v47 + 508) = &off_1E78EB020;
    *((_QWORD *)v47 + 509) = v439;
    v141 = v47 + 4080;
    v142 = v440;
    *((_QWORD *)v47 + 510) = v440;
    v143 = v441;
    *((_QWORD *)v47 + 511) = v441;
    if (v143)
    {
      *(_QWORD *)(v142 + 16) = v141;
      v439 = &v440;
      v440 = 0;
      v441 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 509) = v141;
    }
    *((_QWORD *)v47 + 512) = &off_1E78EB020;
    *((_QWORD *)v47 + 513) = v442;
    v144 = v47 + 4112;
    v145 = v443;
    *((_QWORD *)v47 + 514) = v443;
    v146 = v444;
    *((_QWORD *)v47 + 515) = v444;
    if (v146)
    {
      *(_QWORD *)(v145 + 16) = v144;
      v442 = &v443;
      v443 = 0;
      v444 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 513) = v144;
    }
    *((_QWORD *)v47 + 516) = v445;
    *((_QWORD *)v47 + 517) = v446;
    v147 = v47 + 4144;
    v148 = v447;
    *((_QWORD *)v47 + 518) = v447;
    v149 = v448;
    *((_QWORD *)v47 + 519) = v448;
    if (v149)
    {
      *(_QWORD *)(v148 + 16) = v147;
      v446 = &v447;
      v447 = 0;
      v448 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 517) = v147;
    }
    v47[4164] = v450;
    *((_DWORD *)v47 + 1040) = v449;
    *((_QWORD *)v47 + 521) = v451;
    v150 = v47 + 4176;
    v151 = v452;
    *((_QWORD *)v47 + 522) = v452;
    v152 = v453;
    *((_QWORD *)v47 + 523) = v453;
    if (v152)
    {
      *(_QWORD *)(v151 + 16) = v150;
      v451 = &v452;
      v452 = 0;
      v453 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 521) = v150;
    }
    *((_QWORD *)v47 + 524) = &off_1E78EB020;
    *((_QWORD *)v47 + 525) = v454;
    v153 = v47 + 4208;
    v154 = v455;
    *((_QWORD *)v47 + 526) = v455;
    v155 = v456;
    *((_QWORD *)v47 + 527) = v456;
    if (v155)
    {
      *(_QWORD *)(v154 + 16) = v153;
      v454 = &v455;
      v455 = 0;
      v456 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 525) = v153;
    }
    v47[4224] = v457;
    std::map<std::string,ims::SpamCategory>::map[abi:ne180100]((uint64_t *)v47 + 529, (uint64_t)&v458);
    v47[4288] = v462;
    *((_OWORD *)v47 + 266) = v460;
    *((_OWORD *)v47 + 267) = v461;
    *((_QWORD *)v47 + 537) = &off_1E78EB020;
    *((_QWORD *)v47 + 538) = v463;
    v156 = v47 + 4312;
    v157 = v464;
    *((_QWORD *)v47 + 539) = v464;
    v158 = v465;
    *((_QWORD *)v47 + 540) = v465;
    if (v158)
    {
      *(_QWORD *)(v157 + 16) = v156;
      v463 = &v464;
      v464 = 0;
      v465 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 538) = v156;
    }
    v39 = (_QWORD *)v270;
    *(_OWORD *)(v47 + 4328) = *(_OWORD *)v466;
    *((_QWORD *)v47 + 543) = *(_QWORD *)&v466[16];
    memset(v466, 0, sizeof(v466));
    *((_OWORD *)v47 + 272) = v467;
    *((_QWORD *)v47 + 546) = v468;
    v468 = 0;
    v467 = 0u;
    *((_DWORD *)v47 + 1094) = v469;
    *((_QWORD *)v47 + 550) = v471;
    *((_OWORD *)v47 + 274) = v470;
    v470 = 0u;
    v471 = 0;
    SipUri::SipUri((SipUri *)(v47 + 4408), (const SipUri *)v472);
    *((_OWORD *)v47 + 301) = v473;
    *((_OWORD *)v47 + 302) = v474;
    *((_QWORD *)v47 + 608) = v476;
    *((_OWORD *)v47 + 303) = v475;
    v475 = 0uLL;
    v476 = 0;
    *((_QWORD *)v47 + 609) = v477;
    *((_DWORD *)v47 + 1220) = v478;
    *(_OWORD *)(v47 + 4888) = v479;
    *((_QWORD *)v47 + 613) = v480;
    v480 = 0;
    v479 = 0uLL;
    *((_QWORD *)v47 + 614) = v481;
    *((_QWORD *)v47 + 615) = &off_1E78DD338;
    *((_QWORD *)v47 + 616) = v482;
    v159 = v47 + 4936;
    v160 = v483;
    *((_QWORD *)v47 + 617) = v483;
    v161 = v484;
    *((_QWORD *)v47 + 618) = v484;
    if (v161)
    {
      *(_QWORD *)(v160 + 16) = v159;
      v482 = &v483;
      v483 = 0;
      v484 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 616) = v159;
    }
    *(_OWORD *)(v47 + 4952) = v485;
    *((_DWORD *)v47 + 1242) = v486;
    v162 = v488;
    *(_OWORD *)(v47 + 4972) = v487;
    *(_OWORD *)(v47 + 4988) = v162;
    *((_DWORD *)v47 + 1251) = v489;
    *((_QWORD *)v47 + 626) = v490;
    *((_DWORD *)v47 + 1254) = v491;
    BambiCallTerminationReasonsBase::BambiCallTerminationReasonsBase((BambiCallTerminationReasonsBase *)(v47 + 5024), (const BambiCallTerminationReasonsBase *)v492);
    *((_QWORD *)v47 + 628) = off_1E78E2830;
    BambiCallIncomingTerminationReasons::BambiCallIncomingTerminationReasons((BambiCallIncomingTerminationReasons *)(v47 + 5192), (const BambiCallIncomingTerminationReasons *)v493);
    *(_OWORD *)(v47 + 5384) = v494;
    *((_QWORD *)v47 + 675) = v495;
    v494 = 0uLL;
    v495 = 0;
    v47[5416] = v497;
    *((_QWORD *)v47 + 676) = v496;
    *((_QWORD *)v47 + 678) = v498;
    v163 = v47 + 5432;
    v164 = v499;
    *((_QWORD *)v47 + 679) = v499;
    v165 = v500;
    *((_QWORD *)v47 + 680) = v500;
    if (v165)
    {
      *(_QWORD *)(v164 + 16) = v163;
      v498 = &v499;
      v499 = 0;
      v500 = 0;
    }
    else
    {
      *((_QWORD *)v47 + 678) = v163;
    }
    *((_QWORD *)v47 + 681) = v501;
    *((_WORD *)v47 + 2728) = v502;
    *((_WORD *)v47 + 2732) = v503;
    *((_QWORD *)v47 + 686) = v505;
    *((_OWORD *)v47 + 342) = v504;
    v505 = 0;
    v504 = 0uLL;
    SipUri::SipUri((SipUri *)(v47 + 5496), (const SipUri *)v506);
    *((_QWORD *)v47 + 740) = v508;
    *((_OWORD *)v47 + 369) = v507;
    v507 = 0uLL;
    v508 = 0;
    v47[5928] = v509;
    *((_QWORD *)v47 + 744) = v511;
    *((_OWORD *)v47 + 371) = v510;
    v510 = 0uLL;
    v511 = 0;
    *v268 = 1;
    v38 = v269;
  }
  IMSCallOptions::~IMSCallOptions(v279);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  IMSCallOptions::~IMSCallOptions(v271);
  if (*((char *)v273 + 4159) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v273 + 517), *((_QWORD *)v273 + 518));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)((char *)v273 + 4136);
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v273 + 519);
  }
  IPTelephonyManager::initializeNasClient(v39, (uint64_t)&__p, *(unsigned int *)(v38 + 724), *(unsigned __int8 *)(v38 + 730));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_64:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_65:
  v43 = v274;
  if (v274)
  {
    v44 = (unint64_t *)&v274->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v275.__r_.__value_.__l.__data_);
}

void sub_1BF0C9F5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 111) < 0)
    operator delete((void *)STACK[0x1520]);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x14C8]);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x14E0]);
  if (*(char *)(v1 + 63) < 0)
    operator delete((void *)STACK[0x14F0]);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::setDelegates(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1[23];
  v5 = a1[24];
  if (v4)
    v6 = v4 + 8;
  else
    v6 = 0;
  if (v5)
    v7 = (uint64_t *)(v5 + 8);
  else
    v7 = 0;
  v8 = a1[26];
  v9 = v8 == 0;
  if (v8)
    v10 = v8 + 8;
  else
    v10 = 0;
  v11 = v8 + 16;
  if (v9)
    v12 = 0;
  else
    v12 = v11;
  BambiClient::setDelegatesForStack(a1[21], a2, v6, v7, a1[29], v10, v12, a3);
}

void IPTelephonyManager::initiateLimitedAccessRegister(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  ims::StackConfig *v10;
  std::string *v11;
  std::string *i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  std::string *begin;
  std::vector<std::string>::pointer j;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  SipUri *v35;
  SipUri *v36;
  BOOL v37;
  std::string *v38;
  std::string *v39;
  SipUri *v40;
  SipUri *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  ims::StackConfig *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _OWORD v49[25];
  uint64_t v50;
  SipUri *v51;
  SipUri *v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  void *v56[3];
  _DWORD v57[114];
  std::string *v58;
  uint64_t v59;
  unint64_t v60;
  std::vector<std::string> v61[4];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int16 v68;
  int v69;
  __int16 v70;
  char v71;
  SipStack *v72;
  std::__shared_weak_count *v73;

  v72 = 0;
  v73 = 0;
  (*(void (**)(SipStack **__return_ptr))(**(_QWORD **)(a1 + 168) + 192))(&v72);
  if (!v72)
  {
    v14 = *(_QWORD *)(a1 + 24);
    v13 = a1 + 24;
    v15 = (*(uint64_t (**)(uint64_t))(v14 + 48))(v13);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Unable to initiate limited access registration on invalid stack ", 64);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 32))(v15, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_10:
    *(_BYTE *)(v15 + 17) = 0;
    goto LABEL_53;
  }
  if (!SipStack::isRegistrationLimitedAccess(v72))
  {
    v17 = *(_QWORD *)(a1 + 24);
    v16 = a1 + 24;
    v15 = (*(uint64_t (**)(uint64_t))(v17 + 48))(v16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Not in limited access mode to try LimitedAccess Registration", 60);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_10;
  }
  bzero(v56, 0x2E0uLL);
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)v57);
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v68 = 257;
  v69 = 0;
  v70 = 256;
  v71 = 1;
  bzero(&v51, 0x688uLL);
  SipRegistrationConfig::SipRegistrationConfig((SipRegistrationConfig *)&v51);
  SipStack::copyStackConfigs((SipStack *)((char *)v72 + 3352), (const ims::StackConfig *)v56, v10);
  v57[54] = (a3 >> 2) & 1 | (2 * (a3 & 3));
  v11 = v58;
  for (i = (std::string *)v59; i != v11; --i)
  {
    if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(i[-1].__r_.__value_.__l.__data_);
  }
  v59 = (uint64_t)v11;
  if ((unint64_t)v11 >= v60)
  {
    v19 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v58, (__int128 *)a4);
  }
  else
  {
    if (*(char *)(a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      v18 = *(_OWORD *)a4;
      v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(a4 + 16);
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v18;
    }
    v19 = (uint64_t)&v11[1];
  }
  v59 = v19;
  begin = v61[0].__begin_;
  for (j = v61[0].__end_; j != begin; --j)
  {
    if (SHIBYTE(j[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(j[-1].__r_.__value_.__l.__data_);
  }
  v61[0].__end_ = begin;
  if (v61 != (std::vector<std::string> *)a5)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v61, *(std::string **)a5, *(__int128 **)(a5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3));
  v22 = *((_QWORD *)v72 + 18);
  if (v22)
  {
    v24 = *(_QWORD *)(v22 + 248);
    v23 = *(std::__shared_weak_count **)(v22 + 256);
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(p_shared_owners);
      while (__stxr(v26 + 1, p_shared_owners));
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v24)
    {
      v28 = *((_QWORD *)v72 + 18);
      v29 = *(_QWORD *)(v28 + 248);
      v30 = *(std::__shared_weak_count **)(v28 + 256);
      *(_QWORD *)&v49[0] = v29;
      *((_QWORD *)&v49[0] + 1) = v30;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      SipRegistrationConfig::operator=((uint64_t)&v51, v29 + 1112);
      if (v30)
      {
        v33 = (unint64_t *)&v30->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }
  }
  v35 = v51;
  if (v52 != v51)
  {
    v36 = (SipUri *)((char *)v52 - 408);
    do
    {
      (**(void (***)(SipUri *))v36)(v36);
      v37 = v36 == v35;
      v36 = (SipUri *)((char *)v36 - 408);
    }
    while (!v37);
  }
  v52 = v35;
  v38 = *(std::string **)a5;
  v39 = *(std::string **)(a5 + 8);
  while (v38 != v39)
  {
    v50 = 0;
    memset(v49, 0, sizeof(v49));
    SipUri::SipUri((uint64_t)v49, v38);
    if (SipUri::isValidUri((SipUri *)v49))
    {
      v40 = v52;
      if ((unint64_t)v52 >= v53)
      {
        v41 = (SipUri *)std::vector<SipUri>::__push_back_slow_path<SipUri const&>((uint64_t *)&v51, (const SipUri *)v49);
      }
      else
      {
        SipUri::SipUri(v52, (const SipUri *)v49);
        v41 = (SipUri *)((char *)v40 + 408);
      }
      v52 = v41;
    }
    SipUri::~SipUri((SipUri *)v49);
    ++v38;
  }
  SipUri::fromString((uint64_t)&v55, (std::string *)a4);
  v54 = a3;
  v43 = *(_QWORD *)(a1 + 24);
  v42 = a1 + 24;
  v44 = (*(uint64_t (**)(uint64_t))(v43 + 32))(v42);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"Start Limited Access registration", 33);
  *(_BYTE *)(v44 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v44 + 17) = 0;
  SipStack::setSimConfig(v72, (SipStack *)v56, v45);
  SipStack::startRegistration(v72, (const SipRegistrationConfig *)&v51);
  SipRegistrationConfig::~SipRegistrationConfig((void **)&v51);
  ims::StackConfig::~StackConfig(v56);
LABEL_53:
  v46 = v73;
  if (v73)
  {
    v47 = (unint64_t *)&v73->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_1BF0CA974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  unint64_t v60;
  uint64_t v61;

  STACK[0xA08] = v60;
  SipRegistrationConfig::~SipRegistrationConfig(&a60);
  ims::StackConfig::~StackConfig((void **)&STACK[0x820]);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v61 - 80);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::initializeImpuRankings(uint64_t a1, SipStack **a2, uint64_t a3)
{
  SipStack *v4;
  ImsPrefs *v7;
  void **ImpuRankKey;
  ImsPrefs *v9;
  void **EmergencyImpuRankKey;
  BambiPrefsManager *v11;
  uint64_t **v12;
  uint64_t *v13;
  SipImpuRank *v14;
  BambiPrefsManager *v15;
  uint64_t **v16;
  uint64_t *v17;
  BambiPrefsManager *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  BambiPrefsManager *v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  std::string __p;
  std::string __str;
  std::string *p_p;

  v4 = *a2;
  if (!*a2)
    return;
  if (*(char *)(a3 + 23) < 0)
  {
    if (!*(_QWORD *)(a3 + 8))
    {
LABEL_6:
      v7 = (ImsPrefs *)SipStack::prefs(v4);
      ImpuRankKey = (void **)ImsPrefs::getImpuRankKey(v7);
      ImsPrefs::stringValue(v7, ImpuRankKey);
      std::string::operator=((std::string *)a3, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v4 = *a2;
    }
  }
  else if (!*(_BYTE *)(a3 + 23))
  {
    goto LABEL_6;
  }
  memset(&__str, 0, sizeof(__str));
  v9 = (ImsPrefs *)SipStack::prefs(v4);
  EmergencyImpuRankKey = (void **)ImsPrefs::getEmergencyImpuRankKey(v9);
  ImsPrefs::stringValue(v9, EmergencyImpuRankKey);
  SipStack::carrierIdentifier(*a2, &__p);
  v12 = (uint64_t **)BambiPrefsManager::instance(v11);
  p_p = &__p;
  v13 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
  v14 = (SipImpuRank *)(v13 + 29);
  if (!SipImpuRank::_setRanksFromString((uint64_t)v13, (int **)v13 + 29, a3))
    SipImpuRank::resetNormalRanksToDefault(v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  SipStack::carrierIdentifier(*a2, &__p);
  v16 = (uint64_t **)BambiPrefsManager::instance(v15);
  p_p = &__p;
  v17 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
  if (!SipImpuRank::_setRanksFromString((uint64_t)v17, (int **)v17 + 32, (uint64_t)&__str))
    SipImpuRank::resetEmergencyRanksToDefault((SipImpuRank *)(v17 + 29));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  SipStack::carrierIdentifier(*a2, &__p);
  v19 = (uint64_t **)BambiPrefsManager::instance(v18);
  p_p = &__p;
  v20 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v19, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
  v22 = *(_QWORD *)(a1 + 24);
  v21 = a1 + 24;
  v23 = (*(uint64_t (**)(uint64_t))(v22 + 64))(v21);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"Normal IMPU ranking:", 20);
  *(_BYTE *)(v23 + 17) = 0;
  v24 = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v23 + 17) = 0;
  SipImpuRank::logRanks(v24, v23, v20 + 29, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v25 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 64))(v21);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v21 + 16))(v21, v25);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v25[17] = 0;
  SipStack::carrierIdentifier(*a2, &__p);
  v27 = (uint64_t **)BambiPrefsManager::instance(v26);
  p_p = &__p;
  v28 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 64))(v21);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"Emergency IMPU ranking:", 23);
  *(_BYTE *)(v29 + 17) = 0;
  v30 = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v29 + 17) = 0;
  SipImpuRank::logRanks(v30, v29, v28 + 32, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v31 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 64))(v21);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v21 + 16))(v21, v31);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v31[17] = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BF0CAD60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::updateContactUser(unsigned __int16 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, std::string *a4@<X8>)
{
  uint64_t v4;
  int v5;
  std::string::size_type v6;
  unsigned __int16 *v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  _DWORD *v12;
  std::string::size_type v13;
  unsigned __int16 *v14;
  int v15;
  int *v17;
  int v18;
  int v19;
  const std::string::value_type *v21;
  std::string *v22;
  std::string::size_type v23;

  v4 = *((unsigned __int8 *)a1 + 23);
  v5 = (char)v4;
  v6 = *((_QWORD *)a1 + 1);
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a1 + 1);
  switch(v4)
  {
    case 3:
      v7 = *(unsigned __int16 **)a1;
      if (v5 >= 0)
        v7 = a1;
      v8 = *v7;
      v9 = *((unsigned __int8 *)v7 + 2);
      v10 = v8 == 17485;
      v11 = 78;
      goto LABEL_16;
    case 4:
      v12 = *(_DWORD **)a1;
      if (v5 >= 0)
        v12 = a1;
      if (*v12 == 1313099051)
        goto LABEL_35;
      if (*v12 != 1230196041)
        goto LABEL_29;
      if ((*(char *)(a3 + 23) & 0x80000000) == 0)
      {
        *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
        v13 = *(_QWORD *)(a3 + 16);
        goto LABEL_31;
      }
      v21 = *(const std::string::value_type **)a3;
      v23 = *(_QWORD *)(a3 + 8);
LABEL_44:
      v22 = a4;
      goto LABEL_34;
    case 6:
      v14 = *(unsigned __int16 **)a1;
      if (v5 >= 0)
        v14 = a1;
      v15 = *(_DWORD *)v14;
      v9 = v14[2];
      v10 = v15 == 1397314381;
      v11 = 20036;
LABEL_16:
      if (!v10 || v9 != v11)
        goto LABEL_29;
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        goto LABEL_22;
      v21 = *(const std::string::value_type **)a2;
      v23 = *(_QWORD *)(a2 + 8);
      goto LABEL_44;
    case 7:
      v17 = *(int **)a1;
      if (v5 >= 0)
        v17 = (int *)a1;
      v18 = *v17;
      v19 = *(int *)((char *)v17 + 3);
      if (v18 != 1230196011 || v19 != 1313100617)
        goto LABEL_29;
LABEL_35:
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      {
        if (!*(_BYTE *)(a2 + 23) || *(_BYTE *)a2 == 43)
        {
LABEL_22:
          *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
          v13 = *(_QWORD *)(a2 + 16);
          goto LABEL_31;
        }
        goto LABEL_42;
      }
      v21 = *(const std::string::value_type **)a2;
      v6 = *(_QWORD *)(a2 + 8);
      if (v6 && *v21 != 43)
      {
LABEL_42:
        std::operator+<char>();
        return;
      }
LABEL_33:
      v22 = a4;
      v23 = v6;
LABEL_34:
      std::string::__init_copy_ctor_external(v22, v21, v23);
      return;
    default:
LABEL_29:
      if (v5 < 0)
      {
        v21 = *(const std::string::value_type **)a1;
        goto LABEL_33;
      }
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      v13 = *((_QWORD *)a1 + 2);
LABEL_31:
      a4->__r_.__value_.__r.__words[2] = v13;
      return;
  }
}

uint64_t ims::join<std::__wrap_iter<std::string *>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v10, 1);
  if (a1 != a2)
  {
    v8 = 1;
    do
    {
      if ((v8 & 1) == 0)
        (*(void (**)(__int128 *, uint64_t))(v10 + 32))(&v10, a3);
      (*(void (**)(__int128 *, uint64_t))(v10 + 32))(&v10, a1);
      v8 = 0;
      a1 += 24;
    }
    while (a1 != a2);
  }
  result = std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v11 + 1) + 8, a4);
  *(_QWORD *)&v10 = &off_1E78D7A10;
  if ((_BYTE)v11)
  {
    result = *((_QWORD *)&v10 + 1);
    if (*((_QWORD *)&v10 + 1))
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 8))(*((_QWORD *)&v10 + 1));
  }
  return result;
}

void sub_1BF0CB028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11)
  {
    if (a10)
      (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::handleClientStatusChange(_QWORD *a1, void **a2, std::string *a3)
{
  _QWORD **v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void (****v14)(_QWORD, void **);
  void (****v15)(_QWORD, void **);
  uint64_t v16;
  void (***v17)(_QWORD, void **);
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  int v29;

  v6 = (_QWORD **)(a1 + 3);
  v7 = (*(uint64_t (**)(_QWORD *))(a1[3] + 64))(a1 + 3);
  ((void (*)(_QWORD **, uint64_t))(*v6)[2])(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"ClientStatusChange for stack ", 29);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 32))(v7, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" with status ", 13);
  *(_BYTE *)(v7 + 17) = 0;
  v8 = operator<<(v7, a3);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  v28 = 0uLL;
  (*(void (**)(__int128 *__return_ptr, _QWORD *, void **))(*v6[18] + 192))(&v28, v6[18], a2);
  if ((_QWORD)v28)
  {
    v9 = *(_BYTE *)(v28 + 4313) != 0;
    v10 = *(unsigned int *)(v28 + 4268);
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, (unsigned __int8 *)BambiClientStatus::kStatusInitialized))
  {
    v14 = (void (****)(_QWORD, void **))a1[30];
    v15 = (void (****)(_QWORD, void **))a1[31];
    v16 = 7;
    while (v14 != v15)
    {
      v17 = *v14++;
      (**v17)(v17, a2);
    }
LABEL_21:
    v22 = IMSClientManager::delegateForStack(a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 + 8) + 8 * v16))(v22 + 8, v10);
    goto LABEL_22;
  }
  if (std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, (unsigned __int8 *)&BambiClientStatus::kStatusUninitialized)|| a3[1].__r_.__value_.__s.__data_[0])
  {
    v18 = (uint64_t *)a1[30];
    v19 = (uint64_t *)a1[31];
    while (v18 != v19)
    {
      v20 = *v18++;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v20 + 8))(v20, a2);
    }
    if (!v9)
    {
      v29 = 0;
      v28 = xmmword_1BF2A8BB0;
      v21 = IMSClientManager::delegateForStack(a2);
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(v21 + 8) + 32))(v21 + 8, &v28);
    }
    v16 = 8;
    goto LABEL_21;
  }
LABEL_22:
  if (std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, (unsigned __int8 *)&BambiClientStatus::kStatusInitFailed))
  {
    v23 = (*(uint64_t (**)(_QWORD **))(a1[3] + 56))(v6);
    (*(void (**)(_QWORD **, uint64_t))(a1[3] + 16))(v6, v23);
    v24 = *(_QWORD **)(v23 + 8);
    v25 = "failed to initialize BambiClient";
    v26 = 32;
LABEL_26:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
    *(_BYTE *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v23 + 17) = 0;
    IMSRegistrationManager::setRegistrationTerminated(a1[23], a2, 2, -1, 0);
    IPTelephonyManager::deinitialize((uint64_t)a1, (uint64_t)a2, 0, 0);
    return;
  }
  if (std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, BambiClientStatus::kStatusFatalError))
  {
    v23 = (*(uint64_t (**)(_QWORD **))(a1[3] + 56))(v6);
    (*(void (**)(_QWORD **, uint64_t))(a1[3] + 16))(v6, v23);
    v24 = *(_QWORD **)(v23 + 8);
    v25 = "received a fatal error from BambiClient";
    v26 = 39;
    goto LABEL_26;
  }
  if (std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, BambiClientStatus::kStatusMediaRequestTimedOut))
  {
    IPTelephonyManager::deinitialize((uint64_t)a1, (uint64_t)a2, 0, 0);
    v27 = (*(uint64_t (**)(_QWORD **))(a1[3] + 56))(v6);
    (*(void (**)(_QWORD **, uint64_t))(a1[3] + 16))(v6, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"received a fatal media error from BambiClient, going to request BB reset", 72);
    *(_BYTE *)(v27 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v27 + 17) = 0;
    IMSRegistrationManager::setRegistrationTerminated(a1[23], a2, 5, -1, 0);
  }
}

void IPTelephonyManager::handleDigestAuthChallenge(uint64_t a1, _QWORD *a2, const SipDigestAuthChallenge *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  ImsPrefs *v9;
  void **DigestUsernameKey;
  ImsPrefs *v11;
  void **DigestPasswordKey;
  SipAuthResponse *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p[2];
  char v18;
  std::string __str;
  SipStack *v20;
  std::__shared_weak_count *v21;
  std::string v22;
  std::string v23;

  memset(&v23, 0, sizeof(v23));
  memset(&v22, 0, sizeof(v22));
  v20 = 0;
  v21 = 0;
  (*(void (**)(SipStack **__return_ptr, _QWORD *, uint64_t))(*a2 + 192))(&v20, a2, a4);
  std::string::basic_string[abi:ne180100]<0>(&__str, "auth");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_19_6);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::debug(ims::_logger, (uint64_t)&__str, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"handleDigestAuthChallenge: handling challenge for ", 50);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, a4);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v18 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (*((char *)v20 + 3935) < 0)
  {
    if (!*((_QWORD *)v20 + 490))
      goto LABEL_13;
  }
  else if (!*((_BYTE *)v20 + 3935))
  {
    goto LABEL_13;
  }
  if (*((char *)v20 + 3959) < 0)
  {
    if (*((_QWORD *)v20 + 493))
      goto LABEL_11;
  }
  else if (*((_BYTE *)v20 + 3959))
  {
LABEL_11:
    std::string::operator=(&v23, (const std::string *)v20 + 163);
    std::string::operator=(&v22, (const std::string *)v20 + 164);
    std::string::basic_string[abi:ne180100]<0>(&__str, "auth");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_19_6);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)&__str, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"using Auth from stored config", 29);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_18;
  }
LABEL_13:
  v9 = (ImsPrefs *)SipStack::prefs(v20);
  DigestUsernameKey = (void **)ImsPrefs::getDigestUsernameKey(v9);
  ImsPrefs::stringValue(v9, DigestUsernameKey);
  std::string::operator=(&v23, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v11 = (ImsPrefs *)SipStack::prefs(v20);
  DigestPasswordKey = (void **)ImsPrefs::getDigestPasswordKey(v11);
  ImsPrefs::stringValue(v11, DigestPasswordKey);
  std::string::operator=(&v22, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "auth");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_19_6);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)&__str, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"using Auth from prefs", 21);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_18:
  *(_BYTE *)(v8 + 17) = 0;
  if (v18 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v13 = SipDigestAuthChallenge::createResponse(a3, &v23, &v22);
  BambiClient::setAuthResponse(a2, a4, v13);
  (*(void (**)(SipAuthResponse *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_1BF0CB78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  _Unwind_Resume(a1);
}

void IPTelephonyManager::handleAkaAuthChallenge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::string __p;

  v8 = operator new();
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 8) = a1 + 128;
  *(_QWORD *)v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  *(_QWORD *)(v8 + 16) = a2;
  std::string::operator=((std::string *)(v8 + 32), &__p);
  v9 = _NextAuthQueueId;
  LODWORD(_NextAuthQueueId) = _NextAuthQueueId + 1;
  *(_DWORD *)(v8 + 24) = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v10 = operator new(0x18uLL);
  v10[1] = a1 + 264;
  v10[2] = v8;
  v11 = *(_QWORD *)(a1 + 264);
  *v10 = v11;
  *(_QWORD *)(v11 + 8) = v10;
  *(_QWORD *)(a1 + 264) = v10;
  v12 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v12 + 1;
  if (!v12)
    AuthQueueItem<BambiClient>::sendChallenge((_QWORD *)v8);
}

void sub_1BF0CB940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1C3B87100](v14, 0x1032C403FAF6B48);
  _Unwind_Resume(a1);
}

void AuthQueueItem<BambiClient>::sendChallenge(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5[2];
  __int128 v6;
  void *v7[2];
  void *v8[2];
  __int128 v9;
  void *v10[2];
  void *__p[2];
  __int128 v12;
  uint64_t v13;

  v13 = 0;
  *(_OWORD *)__p = 0u;
  v12 = 0u;
  v9 = 0u;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)v5 = 0u;
  v6 = 0u;
  v2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v5[1], (char *)(v2 + 184), (char *)(v2 + 200), 0x10uLL);
  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v7, (char *)(v3 + 200), (char *)(v3 + 216), 0x10uLL);
  LODWORD(v13) = *((_DWORD *)a1 + 6);
  v4 = IMSClientManager::delegateForStack((void **)a1 + 4);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)(v4 + 8) + 96))(v4 + 8, v5);
  if (__p[1])
  {
    *(void **)&v12 = __p[1];
    operator delete(__p[1]);
  }
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
  if (v8[1])
  {
    *(void **)&v9 = v8[1];
    operator delete(v8[1]);
  }
  if (v7[0])
  {
    v7[1] = v7[0];
    operator delete(v7[0]);
  }
  if (v5[1])
  {
    *(void **)&v6 = v5[1];
    operator delete(v5[1]);
  }
}

void sub_1BF0CBA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ims::aka::Request::~Request((ims::aka::Request *)&a9);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::handleAkaAuthResponse(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  const void *v4;
  const ims::aka::Response *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  SipAkaAuthResponse *SyncFailureResponse;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  SipAkaAuthResponse *FailureResponse;
  uint64_t *v19;
  _QWORD v20[5];
  std::string v21;
  void (**v22)(ims::aka::Response *__hidden);
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *__p;
  void *v32;
  std::string v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[2];

  v4 = *(const void **)(a3 + 8);
  if (!v4
  {
    v8 = a1[3];
    v7 = a1 + 3;
    v9 = (*(uint64_t (**)(_QWORD *))(v8 + 56))(v7);
    (*(void (**)(_QWORD *, uint64_t))(*v7 + 16))(v7, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"received AKA response with wrong Response type", 46);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    return;
  }
  memset(v41, 0, sizeof(v41));
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v34 = 0u;
  ims::aka::Response::Response((ims::aka::Response *)&v34, v6);
  memset(&v33, 0, sizeof(v33));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v33 = *(std::string *)a2;
  if (BYTE8(v34) == 1)
  {
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 1174405120;
    v20[2] = ___ZN18IPTelephonyManager21handleAkaAuthResponseERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3ims21AuthChallengeResponseE_block_invoke;
    v20[3] = &__block_descriptor_tmp_37;
    v20[4] = a1;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v21, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
    else
      v21 = v33;
    ims::aka::Response::Response((ims::aka::Response *)&v22, (const ims::aka::Response *)&v34);
    dispatch_async(MEMORY[0x1E0C80D38], v20);
    v22 = &off_1E78EC228;
    if (__p)
    {
      v32 = __p;
      operator delete(__p);
    }
    if (v29)
    {
      v30 = v29;
      operator delete(v29);
    }
    if (v27)
    {
      v28 = v27;
      operator delete(v27);
    }
    if (v25)
    {
      v26 = v25;
      operator delete(v25);
    }
    if (v23)
    {
      v24 = v23;
      operator delete(v23);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    goto LABEL_37;
  }
  v10 = a1[35];
  if (v10)
  {
    v11 = (uint64_t *)a1[34];
    v12 = v11[2];
    v13 = *v11;
    *(_QWORD *)(v13 + 8) = v11[1];
    *(_QWORD *)v11[1] = v13;
    a1[35] = v10 - 1;
    operator delete(v11);
    if (HIDWORD(v34) == 3)
    {
      FailureResponse = SipAkaAuthChallenge::createFailureResponse(*(SipAkaAuthChallenge **)v12);
    }
    else
    {
      if (HIDWORD(v34) == 2)
      {
        SyncFailureResponse = SipAkaAuthChallenge::createSyncFailureResponse(*(const SipAkaAuthChallenge **)v12, (uint64_t **)v41);
      }
      else
      {
        if (HIDWORD(v34) != 1)
        {
          if (!v12)
            goto LABEL_35;
          goto LABEL_34;
        }
        SyncFailureResponse = SipAkaAuthChallenge::createSuccessResponse(*(const SipAkaAuthChallenge **)v12, (char **)&v35, (uint64_t)&v36 + 8, (uint64_t)&v38);
      }
      FailureResponse = SyncFailureResponse;
      if (!SyncFailureResponse)
      {
LABEL_34:
        v19 = AuthQueueItem<BambiClient>::~AuthQueueItem((uint64_t *)v12);
        MEMORY[0x1C3B87100](v19, 0x1032C403FAF6B48);
LABEL_35:
        if (a1[35])
          AuthQueueItem<BambiClient>::sendChallenge(*(_QWORD **)(a1[34] + 16));
        goto LABEL_37;
      }
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t, SipAkaAuthResponse *))(**(_QWORD **)(v12 + 8) + 16))(*(_QWORD *)(v12 + 8), *(_QWORD *)(v12 + 16), v12 + 32, FailureResponse);
    (*(void (**)(SipAkaAuthResponse *))(*(_QWORD *)FailureResponse + 8))(FailureResponse);
    goto LABEL_34;
  }
  v16 = a1[3];
  v15 = a1 + 3;
  v17 = (*(uint64_t (**)(_QWORD *))(v16 + 56))(v15);
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 16))(v15, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"received AKA response from ISIM but don't have any queued challenges", 68);
  *(_BYTE *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v17 + 17) = 0;
LABEL_37:
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  *(_QWORD *)&v34 = &off_1E78EC228;
  if (*(_QWORD *)&v41[0])
  {
    *((_QWORD *)&v41[0] + 1) = *(_QWORD *)&v41[0];
    operator delete(*(void **)&v41[0]);
  }
  if (*((_QWORD *)&v39 + 1))
  {
    *(_QWORD *)&v40 = *((_QWORD *)&v39 + 1);
    operator delete(*((void **)&v39 + 1));
  }
  if ((_QWORD)v38)
  {
    *((_QWORD *)&v38 + 1) = v38;
    operator delete((void *)v38);
  }
  if (*((_QWORD *)&v36 + 1))
  {
    *(_QWORD *)&v37 = *((_QWORD *)&v36 + 1);
    operator delete(*((void **)&v36 + 1));
  }
  if ((_QWORD)v35)
  {
    *((_QWORD *)&v35 + 1) = v35;
    operator delete((void *)v35);
  }
}

void sub_1BF0CBE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  ims::aka::Response::~Response((ims::aka::Response *)(v43 - 192));
  _Unwind_Resume(a1);
}

ims::aka::Response *ims::aka::Response::Response(ims::aka::Response *this, const ims::aka::Response *a2)
{
  uint64_t v4;

  *(_QWORD *)this = &off_1E78EC228;
  v4 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)this + 2, *((const void **)a2 + 2), *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2));
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)this + 5, *((const void **)a2 + 5), *((_QWORD *)a2 + 6), *((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5));
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)this + 8, *((const void **)a2 + 8), *((_QWORD *)a2 + 9), *((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8));
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)this + 11, *((const void **)a2 + 11), *((_QWORD *)a2 + 12), *((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11));
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)this + 14, *((const void **)a2 + 14), *((_QWORD *)a2 + 15), *((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14));
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  return this;
}

void sub_1BF0CBF8C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v7 = *v5;
  if (*v5)
  {
    v1[12] = v7;
    operator delete(v7);
  }
  v8 = *v4;
  if (*v4)
  {
    v1[9] = v8;
    operator delete(v8);
  }
  v9 = *v3;
  if (*v3)
  {
    v1[6] = v9;
    operator delete(v9);
  }
  v10 = *v2;
  if (*v2)
  {
    v1[3] = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18IPTelephonyManager21handleAkaAuthResponseERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3ims21AuthChallengeResponseE_block_invoke(uint64_t a1)
{
  IMSXcapManager::handleAuthChallengeResponse(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 224), (void **)(a1 + 40), a1 + 64);
}

ims::aka::Response *__copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c23_ZTSN3ims3aka8ResponseE(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  return ims::aka::Response::Response((ims::aka::Response *)(a1 + 64), (const ims::aka::Response *)(a2 + 64));
}

void sub_1BF0CC06C(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 63) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c23_ZTSN3ims3aka8ResponseE(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)(a1 + 64) = &off_1E78EC228;
  v2 = *(void **)(a1 + 176);
  if (v2)
  {
    *(_QWORD *)(a1 + 184) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 152);
  if (v3)
  {
    *(_QWORD *)(a1 + 160) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *(_QWORD *)(a1 + 136) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 104);
  if (v5)
  {
    *(_QWORD *)(a1 + 112) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 80);
  if (v6)
  {
    *(_QWORD *)(a1 + 88) = v6;
    operator delete(v6);
  }
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void ims::aka::Response::~Response(ims::aka::Response *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &off_1E78EC228;
  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 11);
  if (v3)
  {
    *((_QWORD *)this + 12) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 8);
  if (v4)
  {
    *((_QWORD *)this + 9) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 5);
  if (v5)
  {
    *((_QWORD *)this + 6) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 2);
  if (v6)
  {
    *((_QWORD *)this + 3) = v6;
    operator delete(v6);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &off_1E78EC228;
  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 11);
  if (v3)
  {
    *((_QWORD *)this + 12) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 8);
  if (v4)
  {
    *((_QWORD *)this + 9) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 5);
  if (v5)
  {
    *((_QWORD *)this + 6) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 2);
  if (v6)
  {
    *((_QWORD *)this + 3) = v6;
    operator delete(v6);
  }
  JUMPOUT(0x1C3B87100);
}

uint64_t IPTelephonyManager::handleTransportErrors(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
}

void IPTelephonyManager::handleEmergencyRegistrationError(IPTelephonyManager *this, const SipRegistrationErrorNotification *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v3 = *((_QWORD *)this + 36);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, __int128 *))(**((_QWORD **)this + 21) + 192))(&v7, *((_QWORD *)this + 21), &IMSClientManager::kEmergencyStack);
  IMSMetricsManager::logRegistrationError(v3, &v7, (uint64_t)a2);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF0CC234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::handleEmergencyRegistrationActive(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v3 = *(_QWORD *)(a1 + 288);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(a1 + 168) + 192))(&v7, *(_QWORD *)(a1 + 168), &IMSClientManager::kEmergencyStack);
  IMSMetricsManager::logRegistrationSuccess(v3, &v7, a2);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF0CC2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t IPTelephonyManager::handleEmergencyStateExited(uint64_t a1, void **a2)
{
  uint64_t v2;

  v2 = IMSClientManager::delegateForStack(a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 16) + 56))(v2 + 16);
}

uint64_t IPTelephonyManager::handleRequestNetworkReset(uint64_t a1, void **a2)
{
  uint64_t v2;

  v2 = IMSClientManager::delegateForStack(a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 80))(v2 + 8);
}

void IPTelephonyManager::handleRequestStateDump(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  uint64_t v9;
  std::string v10;

  memset(&v10, 0, sizeof(v10));
  std::string::basic_string[abi:ne180100]<0>(&v10, "IMS pre-alerting call failure");
  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    std::string::append(&v10, ": ", 2uLL);
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = (const std::string::value_type *)a2;
    else
      v7 = *(const std::string::value_type **)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    std::string::append(&v10, v7, v8);
  }
  v9 = IMSClientManager::delegateForStack(a3);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)(v9 + 8) + 88))(v9 + 8, &v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
}

void sub_1BF0CC3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t IPTelephonyManager::handleThumperAuthFailure(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v4;

  v4 = IMSClientManager::delegateForStack(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 16) + 64))(v4 + 16, a3);
}

void IPTelephonyManager::handleSystemWake(IPTelephonyManager *this)
{
  _QWORD *v1;
  uint64_t v2;
  IMSNasDeviceClient *v3;

  v1 = (_QWORD *)((char *)this + 24);
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 64))((char *)this + 24);
  (*(void (**)(_QWORD *, uint64_t))(*v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"handleSystemWake: requesting Barring Info", 41);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  v3 = (IMSNasDeviceClient *)v1[38];
  if (v3)
    IMSNasDeviceClient::requestCurrentBarringInfo(v3);
}

void IPTelephonyManager::internalDumpState(uint64_t a1, const std::string *a2, int a3, int a4)
{
  ImsOutStream *v8;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;

  std::string::basic_string[abi:ne180100]<0>(v11, "state");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_19_6);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = (ImsOutStream *)ImsLogger::info(ims::_logger, (uint64_t)v11, (uint64_t)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  BambiClient::dumpState(*(_QWORD *)(a1 + 168), a2, (uint64_t)v8, a3, a4);
  IMSCallManager::dumpState(*(IMSCallManager **)(a1 + 200), v8);
  IMSXcapManager::internalDumpState(*(IMSXcapManager **)(a1 + 224), v8);
}

void sub_1BF0CC594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::dumpState(uint64_t a1, const std::string *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = a1 + 24;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"dumping BambiClient state", 25);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a3 + 8);
  IPTelephonyManager::internalDumpState(a1, a2, v8 != 0, 1);
  v9 = *(unsigned __int8 *)(a3 + 23);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a3 + 8);
  if (v9)
  {
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    ImsLogger::dumpToPath(ims::_logger, a3);
  }
}

void IPTelephonyManager::handleAuthResponse(uint64_t a1, _QWORD *a2, uint64_t a3, SipAuthResponse *a4)
{
  if (a2)
    BambiClient::setAuthResponse(a2, a3, a4);
}

void `non-virtual thunk to'IPTelephonyManager::handleAuthResponse(uint64_t a1, _QWORD *a2, uint64_t a3, SipAuthResponse *a4)
{
  if (a2)
    BambiClient::setAuthResponse(a2, a3, a4);
}

uint64_t IPTelephonyManager::makeOutgoingUri(uint64_t a1, SipStack **a2, std::string *a3, SipUri *a4)
{
  SipStack *v5;
  ImsPrefs *v9;
  void **OutgoingUriKey;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  ImsPrefs *v15;
  void **UseOutgoingSipUriKey;
  void *v17;
  ImsPrefs *v18;
  void **OutgoingDomainKey;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  void *__p;
  uint64_t v31;
  uint64_t v32;

  v5 = *a2;
  if (!*a2)
  {
    v12 = *(_QWORD *)(a1 + 24);
    v11 = a1 + 24;
    v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Invalid SIP stack", 17);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v14 = 0;
    *(_BYTE *)(v13 + 17) = 0;
    return v14;
  }
  __p = 0;
  v31 = 0;
  v32 = 0;
  v9 = (ImsPrefs *)SipStack::prefs(v5);
  OutgoingUriKey = (void **)ImsPrefs::getOutgoingUriKey(v9);
  ImsPrefs::stringValue(v9, OutgoingUriKey);
  v15 = (ImsPrefs *)SipStack::prefs(*a2);
  UseOutgoingSipUriKey = (void **)ImsPrefs::getUseOutgoingSipUriKey(v15);
  v17 = ImsPrefs::prefWithKey(v15, UseOutgoingSipUriKey);
  if (v17)
  {
    if (((*(uint64_t (**)(void *))(*(_QWORD *)v17 + 40))(v17) & 1) != 0)
      goto LABEL_12;
  }
  else if (*((_BYTE *)UseOutgoingSipUriKey + 57))
  {
    goto LABEL_12;
  }
  v18 = (ImsPrefs *)SipStack::prefs(*a2);
  OutgoingDomainKey = (void **)ImsPrefs::getOutgoingDomainKey(v18);
  ImsPrefs::stringValue(v18, OutgoingDomainKey);
  if (SBYTE7(v26) < 0)
  {
    operator delete((void *)v25);
    if (!*((_QWORD *)&v25 + 1))
    {
LABEL_14:
      v14 = SipUri::fromString((uint64_t)a4, a3);
      goto LABEL_15;
    }
  }
  else if (!BYTE7(v26))
  {
    goto LABEL_14;
  }
LABEL_12:
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  SipStack::makeOutgoingSipUri(*a2, a3, a4, (uint64_t)&v25);
  if (((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)&v25 + 1) + 24))(*((_QWORD *)&v25 + 1), v26) & 1) != 0)
  {
    v21 = *(_QWORD *)(a1 + 24);
    v20 = a1 + 24;
    v22 = (*(uint64_t (**)(uint64_t))(v21 + 56))(v20);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"unable to create outgoing sip URI: ", 35);
    *(_BYTE *)(v22 + 17) = 0;
    (*(void (**)(__int128 *, uint64_t))(v25 + 16))(&v25, v22);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v22 + 17) = 0;
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 56))(v20);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"falling back to tel: URI", 24);
    *(_BYTE *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v23 + 17) = 0;
    ImsResult::~ImsResult((ImsResult *)&v25);
    goto LABEL_14;
  }
  ImsResult::~ImsResult((ImsResult *)&v25);
  v14 = 1;
LABEL_15:
  if (SHIBYTE(v32) < 0)
    operator delete(__p);
  return v14;
}

void sub_1BF0CC9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t IPTelephonyManager::makeOutgoingUriForPull(uint64_t a1, uint64_t a2, const std::string *a3, SipUri *a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v15;
  std::__shared_weak_count *v16;
  char v17;
  void *__p;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 168) + 192))(&v15);
  SipStack::makeOutgoingSipUriForPull(v15, (uint64_t)a3, a4, (uint64_t)&v20);
  v7 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)&v20 + 1) + 24))(*((_QWORD *)&v20 + 1), v21);
  if ((v10 & 1) != 0)
  {
    v12 = *(_QWORD *)(a1 + 24);
    v11 = a1 + 24;
    v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"unable to create outgoing sip URI for pull : ", 45);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(__int128 *, uint64_t))(v20 + 16))(&v20, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" , callId : ", 12);
    *(_BYTE *)(v13 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&v15, a3);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 56))(v13, &v15);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    if (v19 < 0)
      operator delete(__p);
    if (v17 < 0)
      operator delete(v15);
  }
  ImsResult::~ImsResult((ImsResult *)&v20);
  return v10 ^ 1u;
}

void sub_1BF0CCB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::sendUssdData(uint64_t a1, void **a2, const std::string *a3)
{
  uint64_t **v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE v10[72];
  std::string __p;
  _BYTE v12[79];

  v6 = (uint64_t **)(a1 + 304);
  v7 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 304, a2);
  if ((void **)(a1 + 312) == v7)
  {
    v8 = *(_QWORD *)(a1 + 168);
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_19_6);
    v9 = BambiClient::initializeUssdSession(v8, (uint64_t)a2, a3, &__p, a1 + 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v9)
    {
      SipUssdSession::startSession(*(SipUssdSession **)(v9 + 24), (uint64_t)v10);
      ImsResult::~ImsResult((ImsResult *)v10);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      std::__tree<std::__value_type<std::string,BambiUssdSession *>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiUssdSession *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiUssdSession *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)[7] = v9;
    }
  }
  else
  {
    SipUssdSession::sendAdditionalData(*((std::string **)v7[7] + 3), a3, (uint64_t)v12);
    ImsResult::~ImsResult((ImsResult *)v12);
  }
}

void sub_1BF0CCCB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::handleUssdData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string v14;
  _QWORD v15[2];

  v4 = *(unsigned __int8 *)(a3 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a3 + 8);
  if (v4)
  {
    v15[0] = &off_1E78B8138;
    v15[1] = 0;
    ims::CFMutableDictionary::setStringValue((ims::CFMutableDictionary *)v15, CFSTR("kIncomingUSSDData"), (char *)a3);
    if ((_DWORD)a4)
      ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v15, CFSTR("kFurtherInfoRequired"), (const void *)*MEMORY[0x1E0C9AE50]);
    v8 = *(std::__shared_weak_count **)(a2 + 16);
    if (v8)
    {
      v9 = std::__shared_weak_count::lock(v8);
      if (v9)
      {
        v10 = *(_QWORD *)(a2 + 8);
LABEL_11:
        if (*(char *)(v10 + 4159) < 0)
          std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(v10 + 4136), *(_QWORD *)(v10 + 4144));
        else
          v14 = *(std::string *)(v10 + 4136);
        v11 = IMSClientManager::delegateForStack((void **)&v14.__r_.__value_.__l.__data_);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 + 16) + 88))(v11 + 16, a3, a4);
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v14.__r_.__value_.__l.__data_);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        ims::CFType::~CFType((ims::CFType *)v15);
        return;
      }
    }
    else
    {
      v9 = 0;
    }
    v10 = 0;
    goto LABEL_11;
  }
}

void sub_1BF0CCE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ims::CFType::~CFType((ims::CFType *)&a18);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::handleUssdError(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string v14;
  _QWORD v15[2];

  v15[0] = &off_1E78B8138;
  v15[1] = 0;
  ims::CFMutableDictionary::setUintValue((ims::CFMutableDictionary *)v15, CFSTR("kIncomingUSSDError"), a4);
  v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a3 + 8);
  if (v7)
    ims::CFMutableDictionary::setStringValue((ims::CFMutableDictionary *)v15, CFSTR("kIncomingUSSDData"), (char *)a3);
  v8 = *(std::__shared_weak_count **)(a2 + 16);
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      v10 = *(_QWORD *)(a2 + 8);
      goto LABEL_10;
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = 0;
LABEL_10:
  if (*(char *)(v10 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(v10 + 4136), *(_QWORD *)(v10 + 4144));
  else
    v14 = *(std::string *)(v10 + 4136);
  v11 = IMSClientManager::delegateForStack((void **)&v14.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 + 16) + 96))(v11 + 16, a3, a4);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  ims::CFType::~CFType((ims::CFType *)v15);
}

void sub_1BF0CCFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ims::CFType::~CFType((ims::CFType *)&a18);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::handleUssdSessionInvalidated(IPTelephonyManager *this, BambiUssdSession *a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  void ***v13;
  void **v14;
  unint64_t *v15;
  unint64_t v16;
  void **v17;
  void **v18;
  void **v19;
  BOOL v20;
  uint64_t *v21;
  std::string v22;

  if (!a2)
    return;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4)
    return;
  v5 = std::__shared_weak_count::lock(v4);
  if (!v5)
    return;
  v6 = v5;
  v7 = *((_QWORD *)a2 + 1);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
    if (!v7)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return;
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v10)
  {
    v11 = 0;
    goto LABEL_14;
  }
  v11 = std::__shared_weak_count::lock(v10);
  if (!v11)
  {
LABEL_14:
    v12 = 0;
    goto LABEL_15;
  }
  v12 = *((_QWORD *)a2 + 1);
LABEL_15:
  if (*(char *)(v12 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(v12 + 4136), *(_QWORD *)(v12 + 4144));
  else
    v22 = *(std::string *)(v12 + 4136);
  v13 = (void ***)((char *)this + 304);
  v14 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 304, (void **)&v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if ((void **)((char *)this + 312) != v14)
  {
    v17 = (void **)v14[1];
    if (v17)
    {
      do
      {
        v18 = v17;
        v17 = (void **)*v17;
      }
      while (v17);
    }
    else
    {
      v19 = v14;
      do
      {
        v18 = (void **)v19[2];
        v20 = *v18 == v19;
        v19 = v18;
      }
      while (!v20);
    }
    if (*v13 == v14)
      *v13 = v18;
    v21 = (uint64_t *)*((_QWORD *)this + 39);
    --*((_QWORD *)this + 40);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v21, (uint64_t *)v14);
    if (*((char *)v14 + 55) < 0)
      operator delete(v14[4]);
    operator delete(v14);
  }
}

void sub_1BF0CD1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IPTelephonyManager::handleUssdSessionInvalidated(IPTelephonyManager *this, BambiUssdSession *a2)
{
  IPTelephonyManager::handleUssdSessionInvalidated((IPTelephonyManager *)((char *)this - 8), a2);
}

uint64_t **IPTelephonyManager::delegateForIncomingUssdSession(uint64_t **this, BambiClient *a2, BambiUssdSession *a3)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string v15;
  uint64_t v16;

  v5 = (std::__shared_weak_count *)*((_QWORD *)a3 + 2);
  if (v5)
  {
    v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      v7 = *((_QWORD *)a3 + 1);
      goto LABEL_6;
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = 0;
LABEL_6:
  if (*(char *)(v7 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(v7 + 4136), *(_QWORD *)(v7 + 4144));
  else
    v15 = *(std::string *)(v7 + 4136);
  v16 = 0;
  v8 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)(this + 38), &v16, (void **)&v15.__r_.__value_.__l.__data_);
  v9 = *v8;
  if (!*v8)
  {
    v9 = (uint64_t *)operator new(0x40uLL);
    *((_OWORD *)v9 + 2) = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
    v11 = v15.__r_.__value_.__r.__words[2];
    v10 = v16;
    memset(&v15, 0, sizeof(v15));
    v9[6] = v11;
    v9[7] = 0;
    std::__tree<unsigned int>::__insert_node_at(this + 38, v10, v8, v9);
  }
  v9[7] = (uint64_t)a3;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return this + 1;
}

void sub_1BF0CD340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t **`non-virtual thunk to'IPTelephonyManager::delegateForIncomingUssdSession(uint64_t **this, BambiClient *a2, BambiUssdSession *a3)
{
  return IPTelephonyManager::delegateForIncomingUssdSession(this - 2, a2, a3);
}

uint64_t IPTelephonyManager::cancelUssdSession(uint64_t a1, void **a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _BYTE v14[72];

  v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 304, a2);
  if ((void **)(a1 + 312) == v4)
  {
    v12 = *(_QWORD *)(a1 + 24);
    v11 = a1 + 24;
    v7 = (*(uint64_t (**)(uint64_t))(v12 + 64))(v11);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v7);
    v8 = *(_QWORD **)(v7 + 8);
    v9 = "IPTelephonyManager::cancelUssdSession: session not found for stack ";
    v10 = 67;
  }
  else
  {
    SipUssdSession::cancelSession(*((SipUssdSession **)v4[7] + 3));
    ImsResult::~ImsResult((ImsResult *)v14);
    v6 = *(_QWORD *)(a1 + 24);
    v5 = a1 + 24;
    v7 = (*(uint64_t (**)(uint64_t))(v6 + 64))(v5);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v7);
    v8 = *(_QWORD **)(v7 + 8);
    v9 = "IPTelephonyManager::cancelUssdSession: session canceled for stack ";
    v10 = 66;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 32))(v7, a2);
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  return result;
}

void IPTelephonyManager::handleDeviceEvents(uint64_t a1, uint64_t a2, int *a3)
{
  _QWORD *v4;
  int v7;
  uint64_t v8;
  unsigned int v9;

  v4 = *(_QWORD **)(a1 + 168);
  if (v4)
  {
    v7 = *a3;
    if ((*a3 & 0x10) != 0)
    {
      RTPManager::srvccHandoverStarted(v4[19], a2);
    }
    else
    {
      if ((v7 & 0x400) != 0)
      {
        v9 = 1;
      }
      else
      {
        if ((v7 & 0x800) == 0)
        {
          if ((v7 & 0x1000) != 0)
          {
            v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24, v8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"IPTelephonyManager::handleDeviceEvents: KeepAlive wakeup received", 65);
            *(_BYTE *)(v8 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v8 + 17) = 0;
            BambiClient::handleKeepAliveWake(*(BambiClient **)(a1 + 168));
          }
          goto LABEL_12;
        }
        v9 = 2;
      }
      BambiClient::handleNetworkEvents(v4, a2, v9);
    }
LABEL_12:
    BambiClient::handleDeviceEvents(*(_QWORD *)(a1 + 168), a2, *a3);
  }
}

void IPTelephonyManager::restoreLoggingState(IPTelephonyManager *this)
{
  IPTelephonyManager *BoolValueFromRuntimeConfig;
  int v2;
  void *__p[2];
  char v4;

  std::string::basic_string[abi:ne180100]<0>(__p, "ImsLoggingEnabled");
  BoolValueFromRuntimeConfig = (IPTelephonyManager *)IPTelephonyPrefs::getBoolValueFromRuntimeConfig((uint64_t)__p, 0);
  v2 = (int)BoolValueFromRuntimeConfig;
  if (v4 < 0)
    operator delete(__p[0]);
  IPTelephonyManager::setLoggingEnabled(BoolValueFromRuntimeConfig, v2);
}

void sub_1BF0CD5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::setAutoAnswer(uint64_t a1, uint64_t a2, int a3)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "enableAutoAnswer");
  IPTelephonyPrefs::setBoolValueInRuntimeConfig((uint64_t)__p, a3);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1BF0CD644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IPTelephonyManager::updateAccessBarringInfo(uint64_t a1, uint64_t a2, __int16 *a3)
{
  int v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[5];
  std::string v11;
  __int16 v12;
  int v13;
  char v14;
  int v15;
  char v16;
  std::string __p;
  std::string v18;
  std::string v19;

  v6 = *(_DWORD *)(a1 + 160);
  *(_DWORD *)(a1 + 160) = v6 + 1;
  LODWORD(__p.__r_.__value_.__l.__data_) = v6;
  ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()(&v18);
  v7 = std::string::insert(&v18, 0, "updateAccessBarringInfo.", 0x18uLL);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  memset(&v18, 0, sizeof(v18));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v18 = *(std::string *)a2;
  v9 = *(_QWORD *)(a1 + 168);
  LoggableString::LoggableString(&__p, &v19);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1174405120;
  v10[2] = ___ZN18IPTelephonyManager23updateAccessBarringInfoERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN18BambiAccessBarring4InfoE_block_invoke;
  v10[3] = &__block_descriptor_tmp_132;
  v10[4] = a1;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v11, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  else
    v11 = v18;
  v12 = *a3;
  v13 = *((_DWORD *)a3 + 1);
  v14 = *((_BYTE *)a3 + 8);
  v15 = *((_DWORD *)a3 + 3);
  v16 = *((_BYTE *)a3 + 16);
  (*(void (**)(uint64_t, std::string *, _QWORD *))(*(_QWORD *)v9 + 208))(v9, &__p, v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void sub_1BF0CD810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 73) < 0)
    operator delete(*(void **)(v28 - 96));
  if (*(char *)(v28 - 41) < 0)
    operator delete(*(void **)(v28 - 64));
  _Unwind_Resume(exception_object);
}

void ___ZN18IPTelephonyManager23updateAccessBarringInfoERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN18BambiAccessBarring4InfoE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int16 v10;
  int v11;
  char v12;
  int v13;
  char v14;
  _BYTE v15[72];
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = *(_QWORD *)(a1 + 32);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v2 + 168) + 192))(&v16, *(_QWORD *)(v2 + 168), a1 + 40);
  v4 = v16;
  v3 = v17;
  if (!v17)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!v4)
      return;
  }
  else
  {
LABEL_5:
    if (!v4)
      return;
  }
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v2 + 168) + 192))(&v16, *(_QWORD *)(v2 + 168), a1 + 40);
  v10 = *(_WORD *)(a1 + 64);
  v11 = *(_DWORD *)(a1 + 68);
  v12 = *(_BYTE *)(a1 + 72);
  v13 = *(_DWORD *)(a1 + 76);
  v14 = *(_BYTE *)(a1 + 80);
  BambiAccessBarring::updateVoiceInfo(v16 + 2904, &v10, (ImsResult *)v15);
  ImsResult::~ImsResult((ImsResult *)v15);
  v7 = v17;
  if (v17)
  {
    v8 = (unint64_t *)&v17->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1BF0CD9B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c31_ZTSN18BambiAccessBarring4InfoE(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 40);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_WORD *)(a1 + 64) = 100;
  *(_DWORD *)(a1 + 68) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void `non-virtual thunk to'IPTelephonyManager::updateAccessBarringInfo(uint64_t a1, uint64_t a2, __int16 *a3)
{
  IPTelephonyManager::updateAccessBarringInfo(a1 - 136, a2, a3);
}

void IPTelephonyManager::updateUacBarringInfo(uint64_t a1, unsigned __int8 *a2, int a3, unsigned __int16 *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  SipRegistrationClient *v21;
  std::string::size_type size;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  SipRegistrationClient *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  SipRegistrationClient *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::string::size_type v42;
  int v43;
  int v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unint64_t *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  SipRegistrationClient *v69;
  std::__shared_weak_count *v70;
  std::string __p;
  int v72;

  v72 = a3;
  v10 = a1 + 24;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Received UAC barring info for stack ", 36);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v11 + 32))(v11, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)": UAC resp=", 11);
  *(_BYTE *)(v11 + 17) = 0;
  ims::toString<UacAccessResponse>(&v72, &v60);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v11 + 32))(v11, &v60);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)", affected services=", 20);
  *(_BYTE *)(v11 + 17) = 0;
  ims::Services::namesForMask((ims::Services *)*((unsigned int *)a4 + 3), &__p);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 32))(v11, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)v60);
  v12 = *((_DWORD *)a4 + 3);
  if ((v12 & 1) != 0)
  {
    IMSCallManager::handleUacBarringResponse(*(_QWORD **)(a1 + 200), a2, a3);
    v12 = *((_DWORD *)a4 + 3);
  }
  if ((v12 & 4) != 0)
    IMSSMSManager::handleUacBarringResponse(*(IMSSMSManager **)(a1 + 208), (void **)a2, a3);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  (*(void (**)(std::string *__return_ptr, _QWORD, unsigned __int8 *))(**(_QWORD **)(a1 + 168) + 192))(&__p, *(_QWORD *)(a1 + 168), a2);
  if (!__p.__r_.__value_.__r.__words[0])
    goto LABEL_90;
  if ((a4[6] & 0x40) != 0)
  {
    v13 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 144);
    if (v13)
    {
      v15 = *(_QWORD *)(v13 + 248);
      v14 = *(std::__shared_weak_count **)(v13 + 256);
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (v15)
      {
        v19 = v72;
        if (v72 == 3)
        {
          v27 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 144);
          v28 = *(SipRegistrationClient **)(v27 + 248);
          v29 = *(std::__shared_weak_count **)(v27 + 256);
          *(_QWORD *)&v60 = v28;
          *((_QWORD *)&v60 + 1) = v29;
          if (v29)
          {
            v30 = (unint64_t *)&v29->__shared_owners_;
            do
              v31 = __ldxr(v30);
            while (__stxr(v31 + 1, v30));
          }
          SipRegistrationClient::handleBarringAccessAlleviated(v28);
          if (v29)
          {
            v32 = (unint64_t *)&v29->__shared_owners_;
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              v34 = v29;
LABEL_89:
              std::__shared_weak_count::__release_weak(v34);
              goto LABEL_90;
            }
          }
          goto LABEL_90;
        }
        if (v72 == 4)
        {
          v20 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 144);
          v21 = *(SipRegistrationClient **)(v20 + 248);
          size = *(_QWORD *)(v20 + 256);
          *(_QWORD *)&v60 = v21;
          *((_QWORD *)&v60 + 1) = size;
          if (size)
          {
            v23 = (unint64_t *)(size + 8);
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          SipRegistrationClient::handleAccessCongested(v21, *((unsigned int *)a4 + 1));
          if (size)
          {
            v25 = (unint64_t *)(size + 8);
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
LABEL_87:
            if (v26)
              goto LABEL_90;
            (*(void (**)(std::string::size_type))(*(_QWORD *)size + 16))(size);
            v34 = (std::__shared_weak_count *)size;
            goto LABEL_89;
          }
          goto LABEL_90;
        }
        v35 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 144);
        v36 = *(SipRegistrationClient **)(v35 + 248);
        v37 = *(std::__shared_weak_count **)(v35 + 256);
        v69 = v36;
        v70 = v37;
        if (v37)
        {
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        v67 = 0;
        v68 = 0;
        *(_QWORD *)&v60 = &off_1E78B7238;
        *((_QWORD *)&v60 + 1) = &_bambiDomain;
        v61 = (v19 != 0) << 30;
        v65 = 0;
        v66 = 0;
        v63 = 0;
        v64 = 0;
        SipRegistrationClient::handleAccessCheck(v36, (const ImsResult *)&v60, *((unsigned int *)a4 + 1));
        ImsResult::~ImsResult((ImsResult *)&v60);
        if (v37)
        {
          v40 = (unint64_t *)&v37->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
      }
    }
  }
  v42 = __p.__r_.__value_.__r.__words[0];
  if ((((*(_BYTE *)(__p.__r_.__value_.__r.__words[0] + 176) != 0) ^ a5) & 1) == 0)
  {
    v43 = *((_DWORD *)a4 + 3);
    size = __p.__r_.__value_.__l.__size_;
    v60 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v44 = v43;
    if (__p.__r_.__value_.__l.__size_)
    {
      v45 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
      v44 = *((_DWORD *)a4 + 3);
    }
    v47 = *a4;
    LOWORD(v61) = *a4;
    v48 = *((_DWORD *)a4 + 1);
    v62 = v48;
    LOBYTE(v63) = *((_BYTE *)a4 + 8);
    HIDWORD(v63) = v44;
    LOBYTE(v64) = *((_BYTE *)a4 + 16);
    if ((v43 & 1) != 0)
    {
      if (v47 == 100)
        v49 = 0;
      else
        v49 = v48;
      BambiAccessBarring::setUacBarring(v42 + 2904, 1, v49);
    }
    if ((v43 & 2) != 0)
    {
      if (v47 == 100)
        v50 = 0;
      else
        v50 = v48;
      BambiAccessBarring::setUacBarring(v42 + 2904, 2, v50);
    }
    if ((v43 & 4) != 0)
    {
      if (v47 == 100)
        v51 = 0;
      else
        v51 = v48;
      BambiAccessBarring::setUacBarring(v42 + 2904, 4, v51);
    }
    if ((v43 & 8) != 0)
    {
      if (v47 == 100)
        v52 = 0;
      else
        v52 = v48;
      BambiAccessBarring::setUacBarring(v42 + 2904, 8, v52);
    }
    if ((v43 & 0x10) != 0)
    {
      if (v47 == 100)
        v53 = 0;
      else
        v53 = v48;
      BambiAccessBarring::setUacBarring(v42 + 2904, 16, v53);
    }
    if ((v43 & 0x20) != 0)
    {
      if (v47 == 100)
        v54 = 0;
      else
        v54 = v48;
      BambiAccessBarring::setUacBarring(v42 + 2904, 32, v54);
    }
    if ((v43 & 0x40) != 0)
    {
      if (v47 == 100)
        v55 = 0;
      else
        v55 = v48;
      BambiAccessBarring::setUacBarring(v42 + 2904, 64, v55);
    }
    if (size)
    {
      v56 = (unint64_t *)(size + 8);
      do
        v26 = __ldaxr(v56);
      while (__stlxr(v26 - 1, v56));
      goto LABEL_87;
    }
  }
LABEL_90:
  v57 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v58 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
}

void sub_1BF0CDF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  ImsResult::~ImsResult((ImsResult *)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IPTelephonyManager::updateUacBarringInfo(uint64_t a1, unsigned __int8 *a2, int a3, unsigned __int16 *a4, int a5)
{
  IPTelephonyManager::updateUacBarringInfo(a1 - 136, a2, a3, a4, a5);
}

void IPTelephonyManager::sendCallStatusRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void *v26[2];
  void *v27[4];
  __int128 v28;
  uint64_t v29;
  void *__p[2];
  char v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  int v34;

  v34 = a3;
  v32 = 0;
  v33 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 168) + 192))(&v32);
  v12 = v32;
  if (!v32)
  {
    std::string::basic_string[abi:ne180100]<0>(v26, "call");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_19_6);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v14 = ImsLogger::error(ims::_logger, (uint64_t)v26, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Unable to send call status request for invalid stack ", 53);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    if ((v31 & 0x80000000) == 0)
      goto LABEL_29;
    v15 = __p[0];
    goto LABEL_28;
  }
  v13 = *(unsigned int *)(v32 + 4076);
  v29 = 0;
  v28 = 0u;
  *(_OWORD *)v26 = 0u;
  memset(v27, 0, sizeof(v27));
  if (*(char *)(v32 + 3159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v26, *(const std::string::value_type **)(v32 + 3136), *(_QWORD *)(v32 + 3144));
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)(v32 + 3136);
    v27[0] = *(void **)(v32 + 3152);
  }
  if (*(char *)(v12 + 3183) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v27[1], *(const std::string::value_type **)(v12 + 3160), *(_QWORD *)(v12 + 3168));
  }
  else
  {
    *(_OWORD *)&v27[1] = *(_OWORD *)(v12 + 3160);
    v27[3] = *(void **)(v12 + 3176);
  }
  v28 = *(_OWORD *)(v12 + 3184);
  LOBYTE(v29) = *(_BYTE *)(v12 + 3200);
  v16 = (a6 & 1) != 0 || *(_BYTE *)(v32 + 176) != 0;
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Reporting call status ", 22);
  *(_BYTE *)(v17 + 17) = 0;
  ims::toString<UacCallStatus>(&v34, __p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v17 + 32))(v17, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)" for ", 5);
  *(_BYTE *)(v17 + 17) = 0;
  if ((_DWORD)a5)
    v18 = "MO ";
  else
    v18 = "MT ";
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)v18, 3);
  *(_BYTE *)(v17 + 17) = 0;
  if ((_DWORD)v16)
    v19 = "emergency call";
  else
    v19 = "call";
  if ((_DWORD)v16)
    v20 = 14;
  else
    v20 = 4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)v19, v20);
  *(_BYTE *)(v17 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)" on stack ", 10);
  *(_BYTE *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 32))(v17, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)" with access network ", 21);
  *(_BYTE *)(v17 + 17) = 0;
  v21 = (_BYTE *)ims::operator<<(v17, (uint64_t)v26);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v21[17] = 0;
  if (v31 < 0)
    operator delete(__p[0]);
  v22 = *(_QWORD *)(a1 + 328);
  if (v22)
    IMSNasDeviceClient::reportCallStatus(v22, v13, a3, a4, (uint64_t)v26, a5, v16);
  if (SHIBYTE(v27[3]) < 0)
  {
    v15 = v27[1];
LABEL_28:
    operator delete(v15);
  }
LABEL_29:
  if (SHIBYTE(v27[0]) < 0)
    operator delete(v26[0]);
  v23 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1BF0CE360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::initializeXcap(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  std::string __p;
  std::string v11;
  _BYTE v12[72];
  void (**v13)(ImsResult *__hidden);
  uint64_t *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[24];
  uint64_t v20;

  v20 = 0;
  memset(v19, 0, sizeof(v19));
  ImsPrefs::ImsPrefs((ImsPrefs *)v19);
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v13 = &off_1E78B7238;
  v14 = &_bambiDomain;
  v15 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v11, "IMSConfig");
  std::string::basic_string[abi:ne180100]<0>(&__p, "default");
  ImsPrefs::loadPlist(v19, (uint64_t)&unk_1ED70EE60, &v11, &__p, 0, (uint64_t)v12);
  ImsResult::operator=((uint64_t)&v13, (uint64_t)v12);
  ImsResult::~ImsResult((ImsResult *)v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if ((*(unsigned int (**)(uint64_t *, _QWORD))(*v14 + 24))(v14, v15))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Unable to load default plist: ", 30);
    *(_BYTE *)(v8 + 17) = 0;
    ((void (*)(ImsResult *, ImsOutStream *))v13[2])((ImsResult *)&v13, (ImsOutStream *)v8);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v11, (char *)&str_19_6);
  std::string::basic_string[abi:ne180100]<0>(&__p, "carrier");
  ImsPrefs::loadDict(v19, a4, &v11, &__p, 0, (uint64_t)v12);
  ImsResult::operator=((uint64_t)&v13, (uint64_t)v12);
  ImsResult::~ImsResult((ImsResult *)v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if ((*(unsigned int (**)(uint64_t *, _QWORD))(*v14 + 24))(v14, v15))
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Failed to load carrier prefs from dictionary with error: ", 57);
    *(_BYTE *)(v9 + 17) = 0;
    ((void (*)(ImsResult *, ImsOutStream *))v13[2])((ImsResult *)&v13, (ImsOutStream *)v9);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
  }
  IMSXcapManager::initialize(*(_QWORD *)(a1 + 224), a3, a2, (ImsPrefs *)v19);
  ImsPrefs::clear((ImsPrefs *)v19);
  ImsResult::~ImsResult((ImsResult *)&v13);
  ImsPrefs::~ImsPrefs((ImsPrefs *)v19);
}

void sub_1BF0CE6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  ImsResult::~ImsResult((ImsResult *)&a21);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  ImsResult::~ImsResult((ImsResult *)&a30);
  ImsPrefs::~ImsPrefs((ImsPrefs *)&a39);
  _Unwind_Resume(a1);
}

uint64_t ims::AccessNetwork::isHandover(ims::AccessNetwork *this, const ims::AccessNetwork *a2)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL4 isWifi;

  if (*((char *)this + 23) < 0)
  {
    if (!*((_QWORD *)this + 1))
      return 0;
  }
  else if (!*((_BYTE *)this + 23))
  {
    return 0;
  }
  if (*((char *)this + 47) < 0)
  {
    if (!*((_QWORD *)this + 4))
      return 0;
  }
  else if (!*((_BYTE *)this + 47))
  {
    return 0;
  }
  v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *((_QWORD *)a2 + 1);
  if (v3)
  {
    v4 = *((unsigned __int8 *)a2 + 47);
    if ((v4 & 0x80u) != 0)
      v4 = *((_QWORD *)a2 + 4);
    if (v4)
    {
      isWifi = ims::AccessNetwork::isWifi(this);
      return isWifi ^ ims::AccessNetwork::isWifi(a2);
    }
  }
  return 0;
}

BOOL ims::AccessNetwork::isCellularHandover(ims::AccessNetwork *this, const ims::AccessNetwork *a2)
{
  _BOOL8 result;

  result = ims::AccessNetwork::networkTypeChanged(this, a2);
  if (result && (ims::AccessNetwork::isLTE(this) || (result = ims::AccessNetwork::isNR(this))))
    return ims::AccessNetwork::isLTE(a2) || ims::AccessNetwork::isNR(a2);
  return result;
}

void IPTelephonyManager::updateSimAccessClass(uint64_t a1, uint64_t a2, const unsigned int *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v7 = 0;
  v8 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 168) + 192))(&v7);
  if (v7)
    BambiAccessBarring::updateSimAccessClass((BambiAccessBarring *)(v7 + 2904), a3);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF0CE8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IPTelephonyManager::handleSipTimeoutReport(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  IMSiRatClient::reportSipTimeout((uint64_t *)(a1 + 344), a3);
}

_QWORD *IPTelephonyManager::logPrefix(IPTelephonyManager *this, ImsOutStream *a2)
{
  _QWORD *result;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"IPTelephonyManager: ", 20);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

_QWORD *`non-virtual thunk to'IPTelephonyManager::logPrefix(IPTelephonyManager *this, ImsOutStream *a2)
{
  _QWORD *result;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"IPTelephonyManager: ", 20);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

uint64_t std::__optional_destruct_base<DeferredEmergency,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 5120))
  {
    IMSCallOptions::~IMSCallOptions((void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

void BambiClientDelegate::~BambiClientDelegate(BambiClientDelegate *this)
{
  JUMPOUT(0x1C3B87100);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

void _ZNSt3__115allocate_sharedB8ne180100I18IPTelephonyManagerNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1@<X8>)
{
  _QWORD *v2;

  v2 = operator new(0x1B8uLL);
  _ZNSt3__120__shared_ptr_emplaceI18IPTelephonyManagerNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a1, v2 + 21, (uint64_t)(v2 + 3));
}

void sub_1BF0CEA74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceI18IPTelephonyManagerNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78DCF18;
  IPTelephonyManager::IPTelephonyManager((IPTelephonyManager *)(a1 + 3));
  return a1;
}

void sub_1BF0CEABC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<IPTelephonyManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DCF18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IPTelephonyManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DCF18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<IPTelephonyManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__tree<std::__value_type<std::string,DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DeferredInit>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DeferredInit>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DeferredInit>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,DeferredInit>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,DeferredInit>,0>(uint64_t a1)
{
  std::__optional_destruct_base<DeferredEmergency,false>::~__optional_destruct_base[abi:ne180100](a1 + 808);
  ims::StackConfig::~StackConfig((void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__shared_ptr_emplace<BambiClient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DCF68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiClient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DCF68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<BambiClient>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 288))(a1 + 24);
}

void std::__shared_ptr_emplace<IMSSMSManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DCFB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IMSSMSManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DCFB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<IMSSMSManager>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

char *std::__tree<std::__value_type<std::string,DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DeferredInit>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, __int128 **a3)
{
  char *v5;
  uint64_t **v6;
  char **v7;
  char **v8;
  _QWORD *v10;
  char *v11;
  __int128 *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t *v16;
  _QWORD v18[2];
  uint64_t v19;

  v6 = a1 + 1;
  v5 = (char *)a1[1];
  v7 = (char **)(a1 + 1);
  v8 = (char **)(a1 + 1);
  if (!v5)
    goto LABEL_10;
  v7 = (char **)(a1 + 1);
  while (1)
  {
    while (1)
    {
      v8 = (char **)v5;
      v10 = v5 + 32;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0)
        break;
      v5 = *v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2) & 0x80) == 0)
      break;
    v7 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    v12 = *a3;
    v19 = 0;
    v13 = (char *)operator new(0x1750uLL);
    v14 = v13;
    v18[0] = v13;
    v18[1] = v6;
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v13 + 32), *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v15 = *v12;
      *((_QWORD *)v13 + 6) = *((_QWORD *)v12 + 2);
      *((_OWORD *)v13 + 2) = v15;
    }
    bzero(v14 + 56, 0x1718uLL);
    ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)(v14 + 128));
    *((_OWORD *)v14 + 49) = 0u;
    *((_OWORD *)v14 + 50) = 0u;
    *((_OWORD *)v14 + 47) = 0u;
    *((_OWORD *)v14 + 48) = 0u;
    *((_OWORD *)v14 + 45) = 0u;
    *((_OWORD *)v14 + 46) = 0u;
    *((_WORD *)v14 + 408) = 257;
    *((_DWORD *)v14 + 207) = 0;
    *((_WORD *)v14 + 416) = 256;
    v14[834] = 1;
    v14[840] = 0;
    v14[5960] = 0;
    LOBYTE(v19) = 1;
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = v8;
    *v7 = v14;
    v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      v14 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v11 = (char *)v18[0];
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,DeferredInit>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,DeferredInit>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  return v11;
}

void sub_1BF0CEDFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,DeferredInit>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,DeferredInit>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,DeferredInit>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,DeferredInit>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,DeferredInit>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t *AuthQueueItem<BambiClient>::~AuthQueueItem(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)a1 + 55) < 0)
    operator delete((void *)a1[4]);
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,BambiUssdSession *>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiUssdSession *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiUssdSession *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::__value_type<std::string,BambiUssdSession *>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiUssdSession *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiUssdSession *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v8);
    std::__tree<unsigned int>::__insert_node_at(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void std::__tree<std::__value_type<std::string,BambiUssdSession *>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiUssdSession *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiUssdSession *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  v8 = (std::string *)(v7 + 32);
  v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v10 = *v9;
    *((_QWORD *)v7 + 6) = *((_QWORD *)v9 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
  }
  *((_QWORD *)v7 + 7) = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1BF0CF010(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_IPTelephonyManager_cpp()
{
  void (*v0)(void *);

  __cxa_atexit((void (*)(void *))std::shared_ptr<IPTelephonyManager>::~shared_ptr[abi:ne180100], &gIPTelephonyManager, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(_MergedGlobals_19, "CoreTelephonyTraceScratch/");
  v0 = (void (*)(void *))MEMORY[0x1E0DE44D0];
  __cxa_atexit(MEMORY[0x1E0DE44D0], _MergedGlobals_19, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&_MergedGlobals_19[3], "/var/mobile/Library/Preferences/com.apple.carrier.plist");
  __cxa_atexit(v0, &_MergedGlobals_19[3], &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&_MergedGlobals_19[6], "/var/mobile/Library/Preferences/com.apple.operator.plist");
  __cxa_atexit(v0, &_MergedGlobals_19[6], &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(qword_1ED70EE60, "/var/mobile/Library/Preferences/com.apple.carrier.default.plist");
  __cxa_atexit(v0, qword_1ED70EE60, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1ED70EE60[3], "/var/mobile/Library/Carrier Bundle.bundle");
  __cxa_atexit(v0, &qword_1ED70EE60[3], &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1ED70EE60[6], "/var/mobile/Library/Operator Bundle.bundle");
  __cxa_atexit(v0, &qword_1ED70EE60[6], &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1ED70EE60[9], "/var/mobile/Library/CarrierDefault.bundle");
  __cxa_atexit(v0, &qword_1ED70EE60[9], &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1ED70EE60[12], "/Preferences/com.apple.ims_config.plist");
  __cxa_atexit(v0, &qword_1ED70EE60[12], &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1ED70EE60[15], "/Preferences/com.apple.ipTelephony_override.plist");
  return __cxa_atexit(v0, &qword_1ED70EE60[15], &dword_1BEDF4000);
}

ImsOutStream *SipOfferAnswerExchange::log(std::__shared_weak_count **this, ImsOutStream *a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  const char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  const char *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  const std::string *v34;
  std::string __p;
  void *v37;
  char v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;

  if (SipOfferAnswerExchange::empty((SipOfferAnswerExchange *)this))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"none", 4);
    *((_BYTE *)a2 + 17) = 0;
    return a2;
  }
  v5 = this[5];
  v4 = this[6];
  if (!v4)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      goto LABEL_26;
  }
  else
  {
LABEL_8:
    if (!v5)
      goto LABEL_26;
  }
  v9 = this[5];
  v10 = this[1];
  if (v9 == v10)
    v11 = "local";
  else
    v11 = "remote";
  if (v9 == v10)
    v12 = 5;
  else
    v12 = 6;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)v11, v12);
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" offer (", 8);
  *((_BYTE *)a2 + 17) = 0;
  v13 = this[5];
  v14 = this[6];
  v39 = v13;
  v40 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  LoggableString::LoggableString(&__p, (const std::string *)&v13->__shared_weak_owners_);
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)")", 1);
  *((_BYTE *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  LODWORD(v5) = 1;
LABEL_26:
  v20 = this[7];
  v19 = this[8];
  if (!v19)
    goto LABEL_31;
  v21 = (unint64_t *)&v19->__shared_owners_;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  do
    v23 = __ldaxr(v21);
  while (__stlxr(v23 - 1, v21));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (v20)
      goto LABEL_32;
  }
  else
  {
LABEL_31:
    if (v20)
    {
LABEL_32:
      if ((_DWORD)v5)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" ", 1);
        *((_BYTE *)a2 + 17) = 0;
      }
      v24 = this[7];
      v25 = this[1];
      if (v24 == v25)
        v26 = "local";
      else
        v26 = "remote";
      if (v24 == v25)
        v27 = 5;
      else
        v27 = 6;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)v26, v27);
      *((_BYTE *)a2 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" answer (", 9);
      *((_BYTE *)a2 + 17) = 0;
      v28 = this[7];
      v29 = this[8];
      v39 = v28;
      v40 = v29;
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      LoggableString::LoggableString(&__p, (const std::string *)&v28->__shared_weak_owners_);
      (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)")", 1);
      *((_BYTE *)a2 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v29)
      {
        v32 = (unint64_t *)&v29->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      LODWORD(v5) = 1;
    }
  }
  if (*((char *)this + 95) < 0)
  {
    if (!this[10])
      return a2;
  }
  else if (!*((_BYTE *)this + 95))
  {
    return a2;
  }
  v34 = (const std::string *)(this + 9);
  if ((_DWORD)v5)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" ", 1);
    *((_BYTE *)a2 + 17) = 0;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"(txn ", 5);
  *((_BYTE *)a2 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&__p, v34);
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 56))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)")", 1);
  *((_BYTE *)a2 + 17) = 0;
  if (v38 < 0)
    operator delete(v37);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a2;
}

void sub_1BF0CF558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

BOOL SipOfferAnswerExchange::remoteAnswerPending(SipOfferAnswerExchange *this)
{
  _BOOL8 v1;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  if (*((_QWORD *)this + 5) != *((_QWORD *)this + 1))
    return 0;
  v3 = *((_QWORD *)this + 7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v4)
    return v3 == 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  v1 = v3 == 0;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v1;
}

BOOL SipOfferAnswerExchange::localAnswerPending(SipOfferAnswerExchange *this)
{
  _BOOL8 v1;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  if (*((_QWORD *)this + 5) != *((_QWORD *)this + 3))
    return 0;
  v3 = *((_QWORD *)this + 7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v4)
    return v3 == 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  v1 = v3 == 0;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v1;
}

BOOL SipOfferAnswerExchange::validateSdpSource(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  char v21;
  _BOOL8 result;
  uint64_t v23;
  __int128 *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char v29;
  __int128 *v30;

  v4 = a3[23];
  if ((v4 & 0x80u) == 0)
    v5 = a3[23];
  else
    v5 = *((_QWORD *)a3 + 1);
  v6 = *(unsigned __int8 *)(a1 + 95);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 80);
  if (v5 == v6)
  {
    v10 = *(unsigned __int8 **)(a1 + 72);
    v8 = (unsigned __int8 *)(a1 + 72);
    v9 = v10;
    if (v7 >= 0)
      v11 = v8;
    else
      v11 = v9;
    if ((v4 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)a3, v11, *((_QWORD *)a3 + 1)))
        return 1;
    }
    else
    {
      if (!a3[23])
        return 1;
      while (*a3 == *v11)
      {
        ++a3;
        ++v11;
        if (!--v4)
          return 1;
      }
    }
  }
  v12 = a2[23];
  if ((v12 & 0x80u) == 0)
    v13 = a2[23];
  else
    v13 = *((_QWORD *)a2 + 1);
  if (v13 != 3)
  {
    if (v13 != 5)
      return 0;
    if ((v12 & 0x80) == 0)
    {
      if (a2[23])
      {
        v14 = v12 - 1;
        v15 = "PRACK";
        do
        {
          v17 = *a2++;
          v16 = v17;
          v19 = *(unsigned __int8 *)v15++;
          v18 = v19;
          v20 = v14-- != 0;
          v21 = v20;
          result = v16 == v18;
        }
        while (v16 == v18 && (v21 & 1) != 0);
        return result;
      }
      return 1;
    }
    v30 = (__int128 *)"PRACK";
    return memcmp(*(const void **)a2, v30, *((_QWORD *)a2 + 1)) == 0;
  }
  if ((v12 & 0x80) != 0)
  {
    v30 = &SipRequest::kMethodAck;
    return memcmp(*(const void **)a2, v30, *((_QWORD *)a2 + 1)) == 0;
  }
  if (!a2[23])
    return 1;
  v23 = v12 - 1;
  v24 = &SipRequest::kMethodAck;
  do
  {
    v26 = *a2++;
    v25 = v26;
    v28 = *(unsigned __int8 *)v24;
    v24 = (__int128 *)((char *)v24 + 1);
    v27 = v28;
    v20 = v23-- != 0;
    v29 = v20;
    result = v25 == v27;
  }
  while (v25 == v27 && (v29 & 1) != 0);
  return result;
}

uint64_t SipOfferAnswer::SipOfferAnswer(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::string __p;
  std::string v12;

  *(_QWORD *)a1 = &off_1E78B7B60;
  v4 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(&v12, "sip.offer.answer");
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a2 + 40))(&__p);
  ImsLogContainer::ImsLogContainer(v4, &v12, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)a1 = &off_1E78DD048;
  *(_QWORD *)(a1 + 8) = &unk_1E78DD080;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 1;
  *(_QWORD *)(a1 + 152) = a1 + 152;
  *(_QWORD *)(a1 + 160) = a1 + 152;
  *(_QWORD *)(a1 + 168) = 0;
  v5 = *a2;
  v6 = a2[1];
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = *(std::__shared_weak_count **)(a1 + 136);
    *(_QWORD *)(a1 + 128) = v5;
    *(_QWORD *)(a1 + 136) = v6;
    if (v9)
      std::__shared_weak_count::__release_weak(v9);
  }
  else
  {
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 128) = v5;
  }
  SipOfferAnswer::startNewExchange((SipOfferAnswer *)a1);
  return a1;
}

void sub_1BF0CF92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void **v20;
  uint64_t v21;
  std::__shared_weak_count **v22;
  uint64_t *v23;
  std::__shared_weak_count **v24;
  std::__shared_weak_count *v26;

  v24 = v22;
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear(v23);
  if (*v24)
    std::__shared_weak_count::__release_weak(*v24);
  v26 = *(std::__shared_weak_count **)(v21 + 120);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  ImsLogContainer::~ImsLogContainer(v20);
  _Unwind_Resume(a1);
}

uint64_t SipOfferAnswer::startNewExchange(SipOfferAnswer *this)
{
  char *v2;
  uint64_t result;
  _QWORD *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;

  v2 = (char *)this + 152;
  if (!*((_QWORD *)this + 21)
    || (result = SipOfferAnswerExchange::empty(*(SipOfferAnswerExchange **)(*(_QWORD *)v2 + 16)), (result & 1) == 0))
  {
    v4 = operator new(0x80uLL);
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = off_1E78DD018;
    *v4 = &off_1E78DD1A0;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 6) = 0u;
    v4[14] = 0;
    v5 = (char *)operator new(0x40uLL);
    *((_QWORD *)v5 + 1) = 0;
    *((_QWORD *)v5 + 2) = 0;
    *(_QWORD *)v5 = &off_1E78DD150;
    *(_OWORD *)(v5 + 40) = 0u;
    *((_QWORD *)v5 + 7) = 0;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_QWORD *)&v14 = v5 + 24;
    *((_QWORD *)&v14 + 1) = v5;
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)(v4 + 4), &v14);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (char *)operator new(0x40uLL);
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)v9 = &off_1E78DD150;
    *(_OWORD *)(v9 + 40) = 0u;
    *((_QWORD *)v9 + 7) = 0;
    *(_OWORD *)(v9 + 24) = 0u;
    *(_QWORD *)&v14 = v9 + 24;
    *((_QWORD *)&v14 + 1) = v9;
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)(v4 + 6), &v14);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    result = (uint64_t)operator new(0x20uLL);
    *(_QWORD *)(result + 16) = v4 + 3;
    *(_QWORD *)(result + 24) = v4;
    v13 = *((_QWORD *)this + 19);
    *(_QWORD *)result = v13;
    *(_QWORD *)(result + 8) = v2;
    *(_QWORD *)(v13 + 8) = result;
    *((_QWORD *)this + 19) = result;
    ++*((_QWORD *)this + 21);
  }
  return result;
}

void sub_1BF0CFB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipOfferAnswer::~SipOfferAnswer(SipOfferAnswer *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78DD048;
  *((_QWORD *)this + 1) = &unk_1E78DD080;
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear((uint64_t *)this + 19);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  *((_QWORD *)this + 1) = off_1E78CFE68;
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

{
  SipOfferAnswer::~SipOfferAnswer(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'SipOfferAnswer::~SipOfferAnswer(SipOfferAnswer *this)
{
  SipOfferAnswer::~SipOfferAnswer((SipOfferAnswer *)((char *)this - 8));
}

{
  SipOfferAnswer::~SipOfferAnswer((SipOfferAnswer *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

_QWORD *SipOfferAnswer::logPrefix(SipOfferAnswer *this, ImsOutStream *a2)
{
  _QWORD *result;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"Offer/Answer: ", 14);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

_QWORD *`non-virtual thunk to'SipOfferAnswer::logPrefix(SipOfferAnswer *this, ImsOutStream *a2)
{
  _QWORD *result;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"Offer/Answer: ", 14);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

void SipOfferAnswer::revert(SipOfferAnswer *this)
{
  char *v2;
  uint64_t v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::string __p;

  v2 = (char *)this + 8;
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 64))((char *)this + 8);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"reverting exchange ", 19);
  *(_BYTE *)(v3 + 17) = 0;
  SipOfferAnswer::debugInfo(&__p, (uint64_t)this);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v3 + 40))(v3, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v4 = (uint64_t *)*((_QWORD *)this + 19);
  v5 = (std::__shared_weak_count *)v4[3];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v4 = (uint64_t *)*((_QWORD *)this + 19);
  }
  v8 = *v4;
  *(_QWORD *)(v8 + 8) = v4[1];
  *(_QWORD *)v4[1] = v8;
  --*((_QWORD *)this + 21);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(v4 + 2));
  operator delete(v4);
  if (!*((_QWORD *)this + 21))
    SipOfferAnswer::startNewExchange(this);
  v9 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 64))(v2);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"current state is ", 17);
  *(_BYTE *)(v9 + 17) = 0;
  SipOfferAnswer::debugInfo(&__p, (uint64_t)this);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v9 + 40))(v9, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BF0CFEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void SipOfferAnswer::debugInfo(std::string *this, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  v6 = 0;
  v4 = 0u;
  v5 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v4, 1);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 16))(a2, &v4);
  ImsStringOutStream::loggableStr((ImsStringOutStream *)&v4, this);
  *(_QWORD *)&v4 = &off_1E78D7A10;
  if ((_BYTE)v5)
  {
    if (*((_QWORD *)&v4 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v4 + 1) + 8))(*((_QWORD *)&v4 + 1));
  }
}

void sub_1BF0CFF98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11)
  {
    if (a10)
      (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void SipOfferAnswer::activeRemoteSdp(SipOfferAnswer *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (*((_QWORD *)this + 21))
  {
    v2 = (_QWORD *)((char *)this + 152);
    while (v2 != *((_QWORD **)this + 20))
    {
      v2 = (_QWORD *)*v2;
      v3 = (_QWORD *)v2[2];
      if (v3[5] && v3[7])
      {
        v4 = (uint64_t *)v3[3];
        v5 = (std::__shared_weak_count *)v3[4];
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        v9 = *v4;
        v8 = v4[1];
        *a2 = v9;
        a2[1] = v8;
        if (v8)
        {
          v10 = (unint64_t *)(v8 + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        if (v5)
        {
          v12 = (unint64_t *)&v5->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
}

void SipOfferAnswer::activeLocalSdp(SipOfferAnswer *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (*((_QWORD *)this + 21))
  {
    v2 = (_QWORD *)((char *)this + 152);
    while (v2 != *((_QWORD **)this + 20))
    {
      v2 = (_QWORD *)*v2;
      v3 = (_QWORD *)v2[2];
      if (v3[5] && v3[7])
      {
        v4 = (uint64_t *)v3[1];
        v5 = (std::__shared_weak_count *)v3[2];
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        v9 = *v4;
        v8 = v4[1];
        *a2 = v9;
        a2[1] = v8;
        if (v8)
        {
          v10 = (unint64_t *)(v8 + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        if (v5)
        {
          v12 = (unint64_t *)&v5->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
}

void SipOfferAnswer::updateWithIncomingRequest(SipOfferAnswer *a1@<X0>, SipMessage *a2@<X1>, std::string *a3@<X2>, uint64_t a4@<X8>)
{
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  std::string::size_type size;
  uint64_t v16;
  int v17;
  void **v18;
  uint64_t v19;
  std::string *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v26;
  _BOOL4 v27;
  char *v28;
  void *v29;
  uint64_t *v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  char *v35;
  __int128 *v36;
  const char *v37;
  char *v38;
  __int128 *v39;
  const char *v40;
  char *v41;
  __int128 *v42;
  const char *v43;
  std::string *p_p;
  _QWORD *v45;
  uint64_t v46;
  std::string *v47;
  const char *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  std::string *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  __int128 *v56;
  char *v57;
  __int128 *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _DWORD *v62;
  int v63;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  xpc_object_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  SipOfferAnswerExchange *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  _BOOL4 v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  void *v86;
  uint64_t v87[2];
  xpc_object_t v88;
  xpc_object_t v89;
  xpc_object_t v90;
  xpc_object_t v91;
  xpc_object_t v92;
  xpc_object_t v93;
  xpc_object_t *v94;
  const char *v95;
  std::string __p;
  xpc_object_t v97;
  xpc_object_t v98;
  xpc_object_t v99;
  xpc_object_t v100;
  xpc_object_t v101;
  xpc_object_t v102;
  xpc_object_t object;
  xpc_object_t v104;
  void **v105;
  uint64_t v106;
  uint64_t v107;
  std::string v108;
  xpc_object_t v109;
  uint64_t v110;
  uint64_t v111;

  v8 = SipMessage::body<SipSdpBody>((uint64_t)a2);
  if (v8)
  {
    v9 = *((_QWORD *)v8 + 2);
    v110 = *((_QWORD *)v8 + 1);
    v111 = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    v110 = 0;
    v111 = 0;
  }
  v109 = xpc_null_create();
  memset(&v108, 0, sizeof(v108));
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)a2 + 4, "P-Asserted-Service");
  v13 = MEMORY[0x1E0C812F8];
  if (v12)
  {
    v14 = *((_QWORD *)v12 + 5);
    if (v14)
    {
      if ((*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v14 + 40))(v14, &v108))
      {
        std::string::basic_string[abi:ne180100]<0>(&v105, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.session.group");
        if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v108.__r_.__value_.__r.__words[2]);
        else
          size = v108.__r_.__value_.__l.__size_;
        v16 = HIBYTE(v107);
        v17 = SHIBYTE(v107);
        if (v107 < 0)
          v16 = v106;
        if (size != v16)
        {
          v27 = 0;
          if ((SHIBYTE(v107) & 0x80000000) == 0)
            goto LABEL_32;
          goto LABEL_35;
        }
        if (v107 >= 0)
          v18 = (void **)&v105;
        else
          v18 = v105;
        if ((*((_BYTE *)&v108.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v27 = memcmp(v108.__r_.__value_.__l.__data_, v18, v108.__r_.__value_.__l.__size_) == 0;
        }
        else
        {
          if (!*((_BYTE *)&v108.__r_.__value_.__s + 23))
          {
            v27 = 1;
            if ((SHIBYTE(v107) & 0x80000000) == 0)
            {
LABEL_32:
              if (!v27)
                goto LABEL_106;
LABEL_36:
              v105 = 0;
              v106 = 0;
              v107 = 0;
              v28 = SipMessage::bodyWithContentType((uint64_t)a2, "multipart/mixed");
              if (v28)
              {
                if (v29)
                {
                  v30 = (uint64_t *)SipMultiPartBody::partWithContentType((uint64_t)v29, (unsigned __int8 *)&SipRecipientListBody::kContentType);
                  if (v30)
                    SipBodyPart::encodeToString(v30, (uint64_t)&v105);
                }
              }
              v31 = xpc_dictionary_create(0, 0, 0);
              if (v31 || (v31 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B87B98](v31) == v13)
                {
                  xpc_retain(v31);
                  v32 = v31;
                }
                else
                {
                  v32 = xpc_null_create();
                }
              }
              else
              {
                v32 = xpc_null_create();
                v31 = 0;
              }
              xpc_release(v31);
              v33 = xpc_null_create();
              v34 = v109;
              v109 = v32;
              xpc_release(v34);
              xpc_release(v33);
              v35 = (char *)SipMessage::header<SipConversationIdHeader>((uint64_t)a2);
              v36 = (__int128 *)(v35 + 64);
              if (!v35)
                v36 = &ims::kEmptyString;
              if (*((char *)v36 + 23) >= 0)
                v37 = (const char *)v36;
              else
                v37 = *(const char **)v36;
              object = xpc_string_create(v37);
              if (!object)
                object = xpc_null_create();
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)"kConversationId";
              xpc::dict::object_proxy::operator=((uint64_t)&__p, &object, &v104);
              xpc_release(v104);
              v104 = 0;
              xpc_release(object);
              object = 0;
              v38 = (char *)SipMessage::header<SipContributionIdHeader>((uint64_t)a2);
              v39 = (__int128 *)(v38 + 64);
              if (!v38)
                v39 = &ims::kEmptyString;
              if (*((char *)v39 + 23) >= 0)
                v40 = (const char *)v39;
              else
                v40 = *(const char **)v39;
              v101 = xpc_string_create(v40);
              if (!v101)
                v101 = xpc_null_create();
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)"kContributionId";
              xpc::dict::object_proxy::operator=((uint64_t)&__p, &v101, &v102);
              xpc_release(v102);
              v102 = 0;
              xpc_release(v101);
              v101 = 0;
              v41 = (char *)SipMessage::header<SipSubjectHeader>((uint64_t)a2);
              v42 = (__int128 *)(v41 + 64);
              if (!v41)
                v42 = &ims::kEmptyString;
              if (*((char *)v42 + 23) >= 0)
                v43 = (const char *)v42;
              else
                v43 = *(const char **)v42;
              v99 = xpc_string_create(v43);
              if (!v99)
                v99 = xpc_null_create();
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)"kSubject";
              xpc::dict::object_proxy::operator=((uint64_t)&__p, &v99, &v100);
              xpc_release(v100);
              v100 = 0;
              xpc_release(v99);
              v99 = 0;
              SipMessage::referredBy(a2, &__p);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_p = &__p;
              else
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              v97 = xpc_string_create((const char *)p_p);
              if (!v97)
                v97 = xpc_null_create();
              v94 = &v109;
              v95 = "kReferredBy";
              xpc::dict::object_proxy::operator=((uint64_t)&v94, &v97, &v98);
              xpc_release(v98);
              v98 = 0;
              xpc_release(v97);
              v97 = 0;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              v45 = SipMessage::header<SipContactHeader>((uint64_t)a2);
              if (v45)
              {
                v46 = v45[9];
                if (v46 == v45[10])
                  v46 = 0;
              }
              else
              {
                v46 = 0;
              }
              SipUri::asString(v46 + 8, 2, &__p);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v47 = &__p;
              else
                v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
              v92 = xpc_string_create((const char *)v47);
              if (!v92)
                v92 = xpc_null_create();
              v94 = &v109;
              v95 = "kConferenceFocus";
              xpc::dict::object_proxy::operator=((uint64_t)&v94, &v92, &v93);
              xpc_release(v93);
              v93 = 0;
              xpc_release(v92);
              v92 = 0;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v107 >= 0)
                v48 = (const char *)&v105;
              else
                v48 = (const char *)v105;
              v90 = xpc_string_create(v48);
              if (!v90)
                v90 = xpc_null_create();
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)"kResourceXml";
              xpc::dict::object_proxy::operator=((uint64_t)&__p, &v90, &v91);
              xpc_release(v91);
              v91 = 0;
              xpc_release(v90);
              v90 = 0;
              memset(&__p, 0, sizeof(__p));
              v49 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)a2 + 4, "Referred-By");
              if (!v49)
                goto LABEL_102;
              v50 = *((_QWORD *)v49 + 5);
              if (!v50 || !(*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v50 + 40))(v50, &__p))
                goto LABEL_102;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                if (__p.__r_.__value_.__l.__size_)
                {
                  v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  goto LABEL_99;
                }
              }
              else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
              {
                v51 = &__p;
LABEL_99:
                v88 = xpc_string_create((const char *)v51);
                if (!v88)
                  v88 = xpc_null_create();
                v94 = &v109;
                v95 = "kRemoteUri";
                xpc::dict::object_proxy::operator=((uint64_t)&v94, &v88, &v89);
                xpc_release(v89);
                v89 = 0;
                xpc_release(v88);
                v88 = 0;
              }
LABEL_102:
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v107) < 0)
                operator delete(v105);
              goto LABEL_106;
            }
LABEL_35:
            operator delete(v105);
            if (!v27)
              goto LABEL_106;
            goto LABEL_36;
          }
          v19 = HIBYTE(v108.__r_.__value_.__r.__words[2]) - 1;
          v20 = &v108;
          do
          {
            v22 = v20->__r_.__value_.__s.__data_[0];
            v20 = (std::string *)((char *)v20 + 1);
            v21 = v22;
            v24 = *(unsigned __int8 *)v18;
            v18 = (void **)((char *)v18 + 1);
            v23 = v24;
            v26 = v19-- != 0;
            v27 = v21 == v23;
          }
          while (v21 == v23 && v26);
        }
        if ((v17 & 0x80000000) == 0)
          goto LABEL_32;
        goto LABEL_35;
      }
    }
  }
LABEL_106:
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v108.__r_.__value_.__l.__data_);
  v52 = MEMORY[0x1C3B87B98](v109);
  v53 = v110;
  if (v52 == v13)
  {
    if (!v110)
      goto LABEL_124;
    v54 = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)a1 + 1) + 64))((_QWORD *)a1 + 1);
    (*(void (**)(_QWORD *, uint64_t))(*((_QWORD *)a1 + 1) + 16))((_QWORD *)a1 + 1, v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)"GroupChat Incoming ", 19);
    *(_BYTE *)(v54 + 17) = 0;
    v55 = (char *)SipMessage::header<SipConversationIdHeader>((uint64_t)a2);
    if (v55)
      v56 = (__int128 *)(v55 + 64);
    else
      v56 = &ims::kEmptyString;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v54 + 32))(v54, v56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)" Subject ", 9);
    *(_BYTE *)(v54 + 17) = 0;
    v57 = (char *)SipMessage::header<SipSubjectHeader>((uint64_t)a2);
    if (v57)
      v58 = (__int128 *)(v57 + 64);
    else
      v58 = &ims::kEmptyString;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v54 + 32))(v54, v58);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v54 + 17) = 0;
  }
  else if (!v110)
  {
LABEL_124:
    v64 = (unsigned __int8 *)(*(uint64_t (**)(SipMessage *))(*(_QWORD *)a2 + 112))(a2);
    v65 = v64[23];
    if ((v65 & 0x80u) == 0)
      v66 = v64[23];
    else
      v66 = *((_QWORD *)v64 + 1);
    if (v66 != 6)
      goto LABEL_162;
    if ((v65 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v64, "INVITE", *((_QWORD *)v64 + 1)))
        goto LABEL_162;
    }
    else if (v64[23])
    {
      v67 = "INVITE";
      while (*v64 == *(unsigned __int8 *)v67)
      {
        ++v64;
        ++v67;
        if (!--v65)
          goto LABEL_146;
      }
      goto LABEL_162;
    }
LABEL_146:
    v71 = *((_QWORD *)a1 + 19);
    v73 = *(SipOfferAnswerExchange **)(v71 + 16);
    v72 = *(std::__shared_weak_count **)(v71 + 24);
    v108.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
    v108.__r_.__value_.__l.__size_ = (std::string::size_type)v72;
    if (v72)
    {
      p_shared_owners = (unint64_t *)&v72->__shared_owners_;
      do
        v75 = __ldxr(p_shared_owners);
      while (__stxr(v75 + 1, p_shared_owners));
    }
    v76 = SipOfferAnswerExchange::remoteAnswerPending(v73) || SipOfferAnswerExchange::localAnswerPending(v73);
    if (v72)
    {
      v77 = (unint64_t *)&v72->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    v80 = (_QWORD *)((char *)a1 + 8);
    v79 = *((_QWORD *)a1 + 1);
    if (v76)
    {
      v81 = (*(uint64_t (**)(_QWORD *))(v79 + 32))((_QWORD *)a1 + 1);
      (*(void (**)(_QWORD *, uint64_t))(*v80 + 16))((_QWORD *)a1 + 1, v81);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v81 + 8), (uint64_t)"received INVITE w/ no SDP while in state: ", 42);
      *(_BYTE *)(v81 + 17) = 0;
      SipOfferAnswer::debugInfo(&v108, (uint64_t)a1);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v81 + 40))(v81, &v108);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v81 + 64))(v81, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v81 + 17) = 0;
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v108.__r_.__value_.__l.__data_);
      *(_OWORD *)(a4 + 24) = 0u;
      *(_OWORD *)(a4 + 40) = 0u;
      *(_OWORD *)(a4 + 56) = 0u;
      *(_QWORD *)a4 = &off_1E78B7238;
      *(_QWORD *)(a4 + 8) = &SipResultDomain::_domain;
      *(_DWORD *)(a4 + 16) = 491;
      goto LABEL_163;
    }
    v82 = (*(uint64_t (**)(_QWORD *))(v79 + 64))((_QWORD *)a1 + 1);
    (*(void (**)(_QWORD *, uint64_t))(*v80 + 16))((_QWORD *)a1 + 1, v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v82 + 8), (uint64_t)"received INVITE w/ no SDP. Starting new offer/answer exchange so we can send an offer", 85);
    *(_BYTE *)(v82 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v82 + 64))(v82, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v82 + 17) = 0;
    SipOfferAnswer::startNewExchange(a1);
LABEL_162:
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0;
    goto LABEL_163;
  }
  v59 = (std::__shared_weak_count *)v111;
  v87[0] = v53;
  v87[1] = v111;
  if (v111)
  {
    v60 = (unint64_t *)(v111 + 8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  (*(void (**)(std::string *__return_ptr, SipMessage *))(*(_QWORD *)a2 + 48))(&v108, a2);
  v62 = SipMessage::header<SipCSeqHeader>((uint64_t)a2);
  if (v62)
    v63 = v62[15];
  else
    v63 = 0;
  v68 = v109;
  v86 = v109;
  if (v109)
  {
    xpc_retain(v109);
  }
  else
  {
    v68 = xpc_null_create();
    v86 = v68;
  }
  SipOfferAnswer::updateWithIncomingSdp(a4, a1, v87, &v108, a3, v63, &v86);
  xpc_release(v68);
  v86 = 0;
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v108.__r_.__value_.__l.__data_);
  if (v59)
  {
    v69 = (unint64_t *)&v59->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
LABEL_163:
  xpc_release(v109);
  v83 = (std::__shared_weak_count *)v111;
  if (v111)
  {
    v84 = (unint64_t *)(v111 + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
}

void sub_1BF0D0BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  xpc_release(*(xpc_object_t *)(v26 - 104));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v26 - 96);
  _Unwind_Resume(a1);
}

void SipOfferAnswer::updateWithIncomingSdp(uint64_t a1, SipOfferAnswer *this, uint64_t *a3, std::string *a4, std::string *a5, int a6, void **a7)
{
  _QWORD *v12;
  char v13;
  unsigned __int8 *size;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  const void **v19;
  std::string *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::string::size_type *v24;
  char *v25;
  uint64_t v26;
  _BYTE *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  BOOL v64;
  BOOL v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;
  std::string::size_type v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  void *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::string::size_type v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  char *v83;
  uint64_t v84;
  _BYTE *v85;
  int v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  uint64_t *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  std::string::size_type v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  _BYTE *v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count *v139;
  std::string::size_type v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::string::size_type v146;
  std::string::size_type v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _BYTE *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v175;
  xpc_object_t object;
  uint64_t v177;
  std::__shared_weak_count *v178;
  std::string::size_type v179;
  std::__shared_weak_count *v180;
  xpc_object_t v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  std::string v188;
  __int128 __p;
  __int128 v190;
  __int128 v191;
  std::string v192;
  uint64_t v193;
  std::__shared_weak_count *v194;

  if (!SipOfferAnswer::satisfied(this))
    goto LABEL_46;
  v12 = (_QWORD *)*((_QWORD *)this + 20);
  if (v12 == (_QWORD *)((char *)this + 152))
  {
LABEL_21:
    v193 = 0;
    v194 = 0;
LABEL_35:
    v29 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 64))((char *)this + 8);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 1) + 16))((char *)this + 8, v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"starting new offer/answer exchange", 34);
    *(_BYTE *)(v29 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v29 + 17) = 0;
    SipOfferAnswer::startNewExchange(this);
    goto LABEL_36;
  }
  v13 = HIBYTE(a5->__r_.__value_.__r.__words[2]);
  if (v13 >= 0)
    size = (unsigned __int8 *)HIBYTE(a5->__r_.__value_.__r.__words[2]);
  else
    size = (unsigned __int8 *)a5->__r_.__value_.__l.__size_;
  if (v13 >= 0)
    v15 = a5;
  else
    v15 = (std::string *)a5->__r_.__value_.__r.__words[0];
  while (1)
  {
    v16 = v12[2];
    v17 = *(unsigned __int8 *)(v16 + 95);
    if ((v17 & 0x80u) == 0)
      v18 = (unsigned __int8 *)*(unsigned __int8 *)(v16 + 95);
    else
      v18 = *(unsigned __int8 **)(v16 + 80);
    if (v18 != size)
      goto LABEL_20;
    v19 = (const void **)(v16 + 72);
    if ((v17 & 0x80) != 0)
      break;
    if (!*(_BYTE *)(v16 + 95))
      goto LABEL_22;
    v20 = v15;
    while (*(unsigned __int8 *)v19 == v20->__r_.__value_.__s.__data_[0])
    {
      v19 = (const void **)((char *)v19 + 1);
      v20 = (std::string *)((char *)v20 + 1);
      if (!--v17)
        goto LABEL_22;
    }
LABEL_20:
    v12 = (_QWORD *)v12[1];
    if (v12 == (_QWORD *)((char *)this + 152))
      goto LABEL_21;
  }
  if (memcmp(*v19, v15, *(_QWORD *)(v16 + 80)))
    goto LABEL_20;
LABEL_22:
  v21 = (std::__shared_weak_count *)v12[3];
  v193 = v16;
  v194 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  if (!v16)
    goto LABEL_35;
  if (!*(_QWORD *)(v16 + 40) || (v24 = *(std::string::size_type **)(v16 + 56)) == 0)
  {
    v30 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 56))((char *)this + 8);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 1) + 16))((char *)this + 8, v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"received SDP for previous unsatisfied exchange ", 47);
    *(_BYTE *)(v30 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v30);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v30 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v192, "InvalidSdp");
    __p = 0u;
    v190 = 0u;
    v191 = 0u;
    v188.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
    v188.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v188.__r_.__value_.__r.__words[2]) = 1073741826;
    BambiCallTerminationResult::makeResult((ImsResult *)a1, (uint64_t)&v192, (ImsResult *)&v188);
    goto LABEL_38;
  }
  if (v24 == *(std::string::size_type **)(v16 + 24))
  {
    *(_OWORD *)&v192.__r_.__value_.__l.__data_ = 0uLL;
    v143 = *(std::__shared_weak_count **)(v16 + 32);
    if (v143)
    {
      v144 = (unint64_t *)&v143->__shared_owners_;
      do
        v145 = __ldxr(v144);
      while (__stxr(v145 + 1, v144));
    }
    v147 = *v24;
    v146 = v24[1];
    v192.__r_.__value_.__r.__words[0] = v147;
    v192.__r_.__value_.__l.__size_ = v146;
    if (v146)
    {
      v148 = (unint64_t *)(v146 + 8);
      do
        v149 = __ldxr(v148);
      while (__stxr(v149 + 1, v148));
    }
    if (v143)
    {
      v150 = (unint64_t *)&v143->__shared_owners_;
      do
        v151 = __ldaxr(v150);
      while (__stlxr(v151 - 1, v150));
      if (!v151)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
    if (v192.__r_.__value_.__r.__words[0])
    {
      v152 = SDPOrigin::valid((SDPOrigin *)(v192.__r_.__value_.__r.__words[0] + 40))
           ? *(_QWORD *)(v192.__r_.__value_.__r.__words[0] + 144)
           : 0;
      v166 = *a3;
      v167 = SDPOrigin::valid((SDPOrigin *)(*a3 + 40)) ? *(_QWORD *)(v166 + 144) : 0;
      if (v152 == v167)
      {
        v168 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 64))((char *)this + 8);
        (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 1) + 16))((char *)this + 8, v168);
        v169 = ImsOutStream::operator<<(v168, "ignoring duplicate SDP answer in txn ");
        ObfuscatedString::ObfuscatedString((uint64_t)&v188, a5);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v169 + 56))(v169, &v188);
        v170 = (_BYTE *)ImsOutStream::operator<<(v169, " with the same session version");
        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v170 + 64))(v170, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v170[17] = 0;
        ims::AccessNetwork::~AccessNetwork((void **)&v188.__r_.__value_.__l.__data_);
        *(_OWORD *)(a1 + 24) = 0u;
        *(_OWORD *)(a1 + 40) = 0u;
        *(_OWORD *)(a1 + 56) = 0u;
        *(_QWORD *)a1 = &off_1E78B7238;
        *(_QWORD *)(a1 + 8) = &_bambiDomain;
        *(_DWORD *)(a1 + 16) = 0;
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v192);
LABEL_40:
        v28 = 0;
        goto LABEL_41;
      }
    }
    if (v192.__r_.__value_.__l.__size_)
    {
      v171 = (unint64_t *)(v192.__r_.__value_.__l.__size_ + 8);
      do
        v172 = __ldaxr(v171);
      while (__stlxr(v172 - 1, v171));
      if (!v172)
      {
        (*(void (**)(std::string::size_type))(*(_QWORD *)v192.__r_.__value_.__l.__size_ + 16))(v192.__r_.__value_.__l.__size_);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v192.__r_.__value_.__l.__size_);
      }
    }
LABEL_36:
    v28 = 1;
    goto LABEL_41;
  }
  v25 = (char *)this + 8;
  v26 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 48))((char *)this + 8);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 1) + 16))((char *)this + 8, v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"already have offer and answer for transaction ", 46);
  *(_BYTE *)(v26 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&v188, a5);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v26 + 56))(v26, &v188);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v26 + 17) = 0;
  if (SBYTE7(v190) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v188.__r_.__value_.__l.__data_);
  v27 = (_BYTE *)(*(uint64_t (**)(char *))(*(_QWORD *)v25 + 48))((char *)this + 8);
  (*(void (**)(char *, _BYTE *))(*(_QWORD *)v25 + 16))((char *)this + 8, v27);
  (*(void (**)(SipOfferAnswer *, _BYTE *))(*(_QWORD *)this + 16))(this, v27);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v27[17] = 0;
  if (!*((_BYTE *)this + 144))
  {
    std::string::basic_string[abi:ne180100]<0>(&v192, "InvalidSdp");
    __p = 0u;
    v190 = 0u;
    v191 = 0u;
    v188.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
    v188.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v188.__r_.__value_.__r.__words[2]) = 1073741826;
    BambiCallTerminationResult::makeResult((ImsResult *)a1, (uint64_t)&v192, (ImsResult *)&v188);
LABEL_38:
    ImsResult::~ImsResult((ImsResult *)&v188);
    if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v192.__r_.__value_.__l.__data_);
    goto LABEL_40;
  }
  v28 = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_1E78B7238;
  *(_QWORD *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0;
LABEL_41:
  v31 = v194;
  if (!v194)
    goto LABEL_45;
  v32 = (unint64_t *)&v194->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
  {
LABEL_45:
    if ((v28 & 1) != 0)
      goto LABEL_46;
    return;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  if ((v28 & 1) == 0)
    return;
LABEL_46:
  SipOfferAnswer::remote(this, &v188);
  v34 = *(std::__shared_weak_count **)(v188.__r_.__value_.__r.__words[0] + 8);
  v193 = *(_QWORD *)v188.__r_.__value_.__l.__data_;
  v194 = v34;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v37 = (std::__shared_weak_count *)v188.__r_.__value_.__l.__size_;
  if (v188.__r_.__value_.__l.__size_)
  {
    v38 = (unint64_t *)(v188.__r_.__value_.__l.__size_ + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v193;
  if (v193)
  {
    if (SDPOrigin::valid((SDPOrigin *)(v193 + 40)))
      v41 = *(_QWORD *)(v40 + 144);
    else
      v41 = 0;
    v42 = *a3;
    if (SDPOrigin::valid((SDPOrigin *)(*a3 + 40)))
      v43 = *(_QWORD *)(v42 + 144);
    else
      v43 = 0;
    v45 = (char *)this + 8;
    v44 = *((_QWORD *)this + 1);
    if (v41 == v43)
    {
      v46 = (*(uint64_t (**)(char *))(v44 + 64))((char *)this + 8);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v45 + 16))((char *)this + 8, v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v46 + 8), (uint64_t)"ignoring duplicate SDP offer with the same session version", 58);
      *(_BYTE *)(v46 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v46 + 17) = 0;
      goto LABEL_66;
    }
    v47 = (*(uint64_t (**)(char *))(v44 + 48))((char *)this + 8);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v45 + 16))((char *)this + 8, v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v47 + 8), (uint64_t)"received duplicate remote offer from ", 37);
    *(_BYTE *)(v47 + 17) = 0;
    LoggableString::LoggableString(&v188, a4);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v47 + 40))(v47, &v188);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v47 + 17) = 0;
    if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v188.__r_.__value_.__l.__data_);
    v48 = (_BYTE *)(*(uint64_t (**)(char *))(*(_QWORD *)v45 + 48))((char *)this + 8);
    (*(void (**)(char *, _BYTE *))(*(_QWORD *)v45 + 16))((char *)this + 8, v48);
    (*(void (**)(SipOfferAnswer *, _BYTE *))(*(_QWORD *)this + 16))(this, v48);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v48[17] = 0;
    v49 = (*(uint64_t (**)(char *))(*(_QWORD *)v45 + 48))((char *)this + 8);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v45 + 16))((char *)this + 8, v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v49 + 8), (uint64_t)"ignoreDuplicateSdp == ", 22);
    *(_BYTE *)(v49 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v49 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v49 + 17) = 0;
    if (*((_BYTE *)this + 144))
    {
LABEL_66:
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_QWORD *)a1 = &off_1E78B7238;
      *(_QWORD *)(a1 + 8) = &_bambiDomain;
      *(_DWORD *)(a1 + 16) = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v192, "InvalidSdp");
      __p = 0u;
      v190 = 0u;
      v191 = 0u;
      v188.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
      v188.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(v188.__r_.__value_.__r.__words[2]) = 1073741826;
      BambiCallTerminationResult::makeResult((ImsResult *)a1, (uint64_t)&v192, (ImsResult *)&v188);
      ImsResult::~ImsResult((ImsResult *)&v188);
      if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v192.__r_.__value_.__l.__data_);
    }
  }
  v50 = v194;
  if (!v194)
    goto LABEL_71;
  v51 = (unint64_t *)&v194->__shared_owners_;
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
    if (v40)
      return;
  }
  else
  {
LABEL_71:
    if (v40)
      return;
  }
  SipOfferAnswer::local(this, &v188);
  v53 = *(std::__shared_weak_count **)(v188.__r_.__value_.__r.__words[0] + 8);
  v186 = *(_QWORD *)v188.__r_.__value_.__l.__data_;
  v187 = v53;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v56 = (std::__shared_weak_count *)v188.__r_.__value_.__l.__size_;
  if (v188.__r_.__value_.__l.__size_)
  {
    v57 = (unint64_t *)(v188.__r_.__value_.__l.__size_ + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (!v186)
  {
    *(_OWORD *)&v188.__r_.__value_.__l.__data_ = 0uLL;
    v76 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
    if (v76)
    {
      v77 = std::__shared_weak_count::lock(v76);
      v188.__r_.__value_.__l.__size_ = (std::string::size_type)v77;
      if (v77)
      {
        v78 = *((_QWORD *)this + 16);
        v188.__r_.__value_.__r.__words[0] = v78;
        if (v78)
        {
          *(_QWORD *)(a1 + 64) = 0;
          *(_OWORD *)(a1 + 32) = 0u;
          *(_OWORD *)(a1 + 48) = 0u;
          *(_OWORD *)a1 = 0u;
          *(_OWORD *)(a1 + 16) = 0u;
          v79 = (std::__shared_weak_count *)a3[1];
          v177 = *a3;
          v178 = v79;
          if (v79)
          {
            v80 = (unint64_t *)&v79->__shared_owners_;
            do
              v81 = __ldxr(v80);
            while (__stxr(v81 + 1, v80));
          }
          v82 = *a7;
          object = v82;
          if (v82)
            xpc_retain(v82);
          else
            object = xpc_null_create();
          (*(void (**)(std::string::size_type, uint64_t *, xpc_object_t *))(*(_QWORD *)v78 + 16))(v78, &v177, &object);
          xpc_release(object);
          object = 0;
          v153 = v178;
          if (v178)
          {
            v154 = (unint64_t *)&v178->__shared_owners_;
            do
              v155 = __ldaxr(v154);
            while (__stlxr(v155 - 1, v154));
            if (!v155)
            {
              ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
              std::__shared_weak_count::__release_weak(v153);
            }
          }
          if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16)) & 1) != 0)
          {
            v156 = (std::__shared_weak_count *)v188.__r_.__value_.__l.__size_;
            if (v188.__r_.__value_.__l.__size_)
            {
              v157 = (unint64_t *)(v188.__r_.__value_.__l.__size_ + 8);
              do
                v158 = __ldaxr(v157);
              while (__stlxr(v158 - 1, v157));
LABEL_250:
              if (!v158)
              {
                ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                std::__shared_weak_count::__release_weak(v156);
              }
            }
LABEL_252:
            v86 = 0;
            goto LABEL_189;
          }
          ImsResult::~ImsResult((ImsResult *)a1);
          v77 = (std::__shared_weak_count *)v188.__r_.__value_.__l.__size_;
          if (!v188.__r_.__value_.__l.__size_)
            goto LABEL_127;
          goto LABEL_123;
        }
      }
    }
    else
    {
      v77 = 0;
    }
    v87 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 56))((char *)this + 8);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 1) + 16))((char *)this + 8, v87);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v87 + 8), (uint64_t)"no delegate to handle incoming offer", 36);
    *(_BYTE *)(v87 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v87 + 64))(v87, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v87 + 17) = 0;
    if (!v77)
    {
LABEL_127:
      v90 = *((_QWORD *)this + 19);
      v92 = *(_QWORD *)(v90 + 16);
      v91 = *(std::__shared_weak_count **)(v90 + 24);
      v175 = v91;
      if (v91)
      {
        v93 = (unint64_t *)&v91->__shared_owners_;
        do
          v94 = __ldxr(v93);
        while (__stxr(v94 + 1, v93));
      }
      v96 = *a3;
      v95 = (std::__shared_weak_count *)a3[1];
      if (v95)
      {
        v97 = (unint64_t *)&v95->__shared_owners_;
        do
          v98 = __ldxr(v97);
        while (__stxr(v98 + 1, v97));
      }
      v99 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 64))((char *)this + 8);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 1) + 16))((char *)this + 8, v99);
      std::string::operator=((std::string *)(v92 + 72), a5);
      *(_DWORD *)(v92 + 96) = a6;
      v100 = *(_QWORD *)(v92 + 24);
      v193 = v96;
      v194 = v95;
      if (v95)
      {
        v101 = (unint64_t *)&v95->__shared_owners_;
        do
          v102 = __ldxr(v101);
        while (__stxr(v102 + 1, v101));
      }
      std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)v100, &v193);
      std::string::operator=((std::string *)(v100 + 16), a4);
      v103 = v194;
      if (v194)
      {
        v104 = (unint64_t *)&v194->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)(v92 + 40), *(_QWORD *)(v92 + 24), *(_QWORD *)(v92 + 32));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v99 + 8), (uint64_t)"setting remote offer from ", 26);
      *(_BYTE *)(v99 + 17) = 0;
      LoggableString::LoggableString(&v192, a4);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v99 + 40))(v99, &v192);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v99 + 8), (uint64_t)" in transaction ", 16);
      *(_BYTE *)(v99 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)&v188, a5);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v99 + 56))(v99, &v188);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v99 + 64))(v99, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v99 + 17) = 0;
      if (SBYTE7(v190) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v188.__r_.__value_.__l.__data_);
      if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v192.__r_.__value_.__l.__data_);
      if (v95)
      {
        v106 = (unint64_t *)&v95->__shared_owners_;
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      v108 = v175;
      if (!v175)
        goto LABEL_188;
      v109 = (unint64_t *)&v175->__shared_owners_;
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      goto LABEL_186;
    }
LABEL_123:
    v88 = (unint64_t *)&v77->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
    goto LABEL_127;
  }
  v59 = *((_QWORD *)this + 19);
  v60 = *(_QWORD *)(v59 + 16);
  v61 = *(std::__shared_weak_count **)(v59 + 24);
  if (!v61)
  {
    if (!SipOfferAnswerExchange::validateSdpSource(v60, (unsigned __int8 *)a4, (unsigned __int8 *)a5))
      goto LABEL_114;
    goto LABEL_88;
  }
  v62 = (unint64_t *)&v61->__shared_owners_;
  do
    v63 = __ldxr(v62);
  while (__stxr(v63 + 1, v62));
  v64 = SipOfferAnswerExchange::validateSdpSource(v60, (unsigned __int8 *)a4, (unsigned __int8 *)a5);
  v65 = v64;
  do
    v66 = __ldaxr(v62);
  while (__stlxr(v66 - 1, v62));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
    if (!v65)
      goto LABEL_114;
LABEL_88:
    *(_OWORD *)&v188.__r_.__value_.__l.__data_ = 0uLL;
    v67 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
    if (v67)
    {
      v68 = std::__shared_weak_count::lock(v67);
      v188.__r_.__value_.__l.__size_ = (std::string::size_type)v68;
      if (v68)
      {
        v69 = *((_QWORD *)this + 16);
        v188.__r_.__value_.__r.__words[0] = v69;
        if (v69)
        {
          *(_QWORD *)(a1 + 64) = 0;
          *(_OWORD *)(a1 + 32) = 0u;
          *(_OWORD *)(a1 + 48) = 0u;
          *(_OWORD *)a1 = 0u;
          *(_OWORD *)(a1 + 16) = 0u;
          v184 = v186;
          v185 = v187;
          if (v187)
          {
            v70 = (unint64_t *)&v187->__shared_owners_;
            do
              v71 = __ldxr(v70);
            while (__stxr(v71 + 1, v70));
          }
          v72 = (std::__shared_weak_count *)a3[1];
          v182 = *a3;
          v183 = v72;
          if (v72)
          {
            v73 = (unint64_t *)&v72->__shared_owners_;
            do
              v74 = __ldxr(v73);
            while (__stxr(v74 + 1, v73));
          }
          v75 = *a7;
          v181 = v75;
          if (v75)
            xpc_retain(v75);
          else
            v181 = xpc_null_create();
          (*(void (**)(std::string::size_type, uint64_t *, uint64_t *, xpc_object_t *))(*(_QWORD *)v69 + 24))(v69, &v184, &v182, &v181);
          xpc_release(v181);
          v181 = 0;
          v159 = v183;
          if (v183)
          {
            v160 = (unint64_t *)&v183->__shared_owners_;
            do
              v161 = __ldaxr(v160);
            while (__stlxr(v161 - 1, v160));
            if (!v161)
            {
              ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
              std::__shared_weak_count::__release_weak(v159);
            }
          }
          v162 = v185;
          if (v185)
          {
            v163 = (unint64_t *)&v185->__shared_owners_;
            do
              v164 = __ldaxr(v163);
            while (__stlxr(v164 - 1, v163));
            if (!v164)
            {
              ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
              std::__shared_weak_count::__release_weak(v162);
            }
          }
          if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16)) & 1) != 0)
          {
            v156 = (std::__shared_weak_count *)v188.__r_.__value_.__l.__size_;
            if (v188.__r_.__value_.__l.__size_)
            {
              v165 = (unint64_t *)(v188.__r_.__value_.__l.__size_ + 8);
              do
                v158 = __ldaxr(v165);
              while (__stlxr(v158 - 1, v165));
              goto LABEL_250;
            }
            goto LABEL_252;
          }
          ImsResult::~ImsResult((ImsResult *)a1);
          v68 = (std::__shared_weak_count *)v188.__r_.__value_.__l.__size_;
          if (!v188.__r_.__value_.__l.__size_)
            goto LABEL_162;
          goto LABEL_158;
        }
      }
    }
    else
    {
      v68 = 0;
    }
    v111 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 56))((char *)this + 8);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 1) + 16))((char *)this + 8, v111);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v111 + 8), (uint64_t)"no delegate to handle incoming answer", 37);
    *(_BYTE *)(v111 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v111 + 64))(v111, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v111 + 17) = 0;
    if (!v68)
    {
LABEL_162:
      v114 = *((_QWORD *)this + 19);
      v116 = *(uint64_t **)(v114 + 16);
      v115 = *(std::__shared_weak_count **)(v114 + 24);
      v193 = (uint64_t)v116;
      v194 = v115;
      if (v115)
      {
        v117 = (unint64_t *)&v115->__shared_owners_;
        do
          v118 = __ldxr(v117);
        while (__stxr(v118 + 1, v117));
      }
      v120 = *a3;
      v119 = (std::__shared_weak_count *)a3[1];
      v179 = v120;
      v180 = v119;
      if (v119)
      {
        v121 = (unint64_t *)&v119->__shared_owners_;
        do
          v122 = __ldxr(v121);
        while (__stxr(v122 + 1, v121));
      }
      v123 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 64))((char *)this + 8);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 1) + 16))((char *)this + 8, v123);
      v124 = v116[3];
      v192.__r_.__value_.__r.__words[0] = v120;
      v192.__r_.__value_.__l.__size_ = (std::string::size_type)v119;
      if (v119)
      {
        v125 = (unint64_t *)&v119->__shared_owners_;
        do
          v126 = __ldxr(v125);
        while (__stxr(v126 + 1, v125));
      }
      std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)v124, (uint64_t *)&v192);
      std::string::operator=((std::string *)(v124 + 16), a4);
      v127 = (std::__shared_weak_count *)v192.__r_.__value_.__l.__size_;
      if (v192.__r_.__value_.__l.__size_)
      {
        v128 = (unint64_t *)(v192.__r_.__value_.__l.__size_ + 8);
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
      std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100](v116 + 7, v116[3], v116[4]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v123 + 8), (uint64_t)"setting remote answer from ", 27);
      *(_BYTE *)(v123 + 17) = 0;
      LoggableString::LoggableString(&v188, a4);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v123 + 40))(v123, &v188);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v123 + 64))(v123, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v123 + 17) = 0;
      if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v188.__r_.__value_.__l.__data_);
      if (v119)
      {
        v130 = (unint64_t *)&v119->__shared_owners_;
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 - 1, v130));
        if (!v131)
        {
          ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
          std::__shared_weak_count::__release_weak(v119);
        }
      }
      v108 = v194;
      if (!v194)
        goto LABEL_188;
      v132 = (unint64_t *)&v194->__shared_owners_;
      do
        v110 = __ldaxr(v132);
      while (__stlxr(v110 - 1, v132));
LABEL_186:
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
LABEL_188:
      v86 = 1;
      goto LABEL_189;
    }
LABEL_158:
    v112 = (unint64_t *)&v68->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
    goto LABEL_162;
  }
  if (v64)
    goto LABEL_88;
LABEL_114:
  v83 = (char *)this + 8;
  v84 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 48))((char *)this + 8);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 1) + 16))((char *)this + 8, v84);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v84 + 8), (uint64_t)"received answer in unexpected transaction ", 42);
  *(_BYTE *)(v84 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&v188, a5);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v84 + 56))(v84, &v188);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v84 + 64))(v84, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v84 + 17) = 0;
  if (SBYTE7(v190) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v188.__r_.__value_.__l.__data_);
  v85 = (_BYTE *)(*(uint64_t (**)(char *))(*(_QWORD *)v83 + 48))((char *)this + 8);
  (*(void (**)(char *, _BYTE *))(*(_QWORD *)v83 + 16))((char *)this + 8, v85);
  (*(void (**)(SipOfferAnswer *, _BYTE *))(*(_QWORD *)this + 16))(this, v85);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v85 + 64))(v85, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v86 = 0;
  v85[17] = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_1E78B7238;
  *(_QWORD *)(a1 + 8) = &SipResultDomain::_domain;
  *(_DWORD *)(a1 + 16) = 491;
LABEL_189:
  v133 = v187;
  if (!v187)
    goto LABEL_193;
  v134 = (unint64_t *)&v187->__shared_owners_;
  do
    v135 = __ldaxr(v134);
  while (__stlxr(v135 - 1, v134));
  if (!v135)
  {
    ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
    std::__shared_weak_count::__release_weak(v133);
    if (!v86)
      return;
  }
  else
  {
LABEL_193:
    if (!v86)
      return;
  }
  v136 = (_BYTE *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 64))((char *)this + 8);
  (*(void (**)(char *, _BYTE *))(*((_QWORD *)this + 1) + 16))((char *)this + 8, v136);
  (*(void (**)(SipOfferAnswer *, _BYTE *))(*(_QWORD *)this + 16))(this, v136);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v136 + 64))(v136, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v136[17] = 0;
  v137 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (v137)
  {
    v138 = std::__shared_weak_count::lock(v137);
    v188.__r_.__value_.__l.__size_ = (std::string::size_type)v138;
    if (v138)
    {
      v139 = v138;
      v140 = *((_QWORD *)this + 16);
      v188.__r_.__value_.__r.__words[0] = v140;
      if (v140 && SipOfferAnswer::satisfied(this))
        (*(void (**)(std::string::size_type))(*(_QWORD *)v140 + 32))(v140);
      v141 = (unint64_t *)&v139->__shared_owners_;
      do
        v142 = __ldaxr(v141);
      while (__stlxr(v142 - 1, v141));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
      }
    }
  }
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_1E78B7238;
  *(_QWORD *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0;
}

void sub_1BF0D2180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, xpc_object_t a16, char a17, uint64_t a18, char a19, uint64_t a20,xpc_object_t object,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v33 - 128);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v33 - 104);
  _Unwind_Resume(a1);
}

void SipOfferAnswer::updateWithIncomingResponse(SipOfferAnswer *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, uint64_t a4@<X8>)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::string::size_type v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::string::size_type v19;
  std::__shared_weak_count *size;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string::size_type v27;
  std::string::size_type v28;
  std::string *v29;
  std::string *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  void *v35;
  std::string::size_type v36;
  int v37;
  std::string *v38;
  uint64_t v39;
  void **v40;
  int v41;
  int v42;
  int v43;
  int v44;
  BOOL v46;
  _BOOL4 v47;
  uint64_t v48;
  char v49;
  xpc_object_t v50;
  xpc_object_t v51;
  xpc_object_t v52;
  xpc_object_t v53;
  char *v54;
  __int128 *v55;
  const char *v56;
  char *v57;
  __int128 *v58;
  const char *v59;
  _QWORD *v60;
  uint64_t v61;
  std::string *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _DWORD *v66;
  int v67;
  xpc_object_t v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::string::size_type v73;
  uint64_t v74;
  int v75;
  unsigned __int8 *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  void *__s1[2];
  _BYTE v84[56];
  xpc_object_t v85;
  uint64_t v86[2];
  _QWORD v87[2];
  xpc_object_t v88;
  xpc_object_t v89;
  xpc_object_t v90;
  xpc_object_t v91;
  xpc_object_t v92;
  xpc_object_t v93;
  xpc_object_t v94;
  xpc_object_t v95;
  xpc_object_t object;
  std::string v97;
  std::string v98;
  std::string v99;
  uint64_t v100;
  uint64_t v101;

  v8 = SipMessage::body<SipSdpBody>(a2);
  if (!v8)
  {
    v100 = 0;
    v101 = 0;
LABEL_46:
    v31 = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)a1 + 1) + 64))((_QWORD *)a1 + 1);
    (*(void (**)(_QWORD *, uint64_t))(*((_QWORD *)a1 + 1) + 16))((_QWORD *)a1 + 1, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)"Remote answers no SDP", 21);
    *(_BYTE *)(v31 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v31 + 17) = 0;
    goto LABEL_135;
  }
  v9 = *((_QWORD *)v8 + 1);
  v10 = *((_QWORD *)v8 + 2);
  v100 = v9;
  v101 = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (!v9)
    goto LABEL_46;
  memset(&v99, 0, sizeof(v99));
  SipOfferAnswer::remote(a1, __s1);
  v13 = *((_QWORD *)__s1[0] + 1);
  v97.__r_.__value_.__r.__words[0] = *(_QWORD *)__s1[0];
  v97.__r_.__value_.__l.__size_ = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)__s1[1];
  if (__s1[1])
  {
    v17 = (unint64_t *)((char *)__s1[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v97.__r_.__value_.__r.__words[0];
  if (v97.__r_.__value_.__r.__words[0])
  {
    *(_OWORD *)__s1 = 0u;
    memset(v84, 0, 24);
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)__s1, 1);
    (*(void (**)(std::string::size_type, void **))(*(_QWORD *)(v19 + 40) + 16))(v19 + 40, __s1);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*(_QWORD *)&v84[8] + 8, &v98);
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v99.__r_.__value_.__l.__data_);
    v99 = v98;
    __s1[0] = &off_1E78D7A10;
    if (v84[0] && __s1[1])
      (*(void (**)(void *))(*(_QWORD *)__s1[1] + 8))(__s1[1]);
  }
  size = (std::__shared_weak_count *)v97.__r_.__value_.__l.__size_;
  if (v97.__r_.__value_.__l.__size_)
  {
    v21 = (unint64_t *)(v97.__r_.__value_.__l.__size_ + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  memset(&v98, 0, sizeof(v98));
  *(_OWORD *)__s1 = 0u;
  memset(v84, 0, 24);
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)__s1, 1);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)(v100 + 40) + 16))(v100 + 40, __s1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*(_QWORD *)&v84[8] + 8, &v97);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  v98 = v97;
  __s1[0] = &off_1E78D7A10;
  if (v84[0] && __s1[1])
    (*(void (**)(void *))(*(_QWORD *)__s1[1] + 8))(__s1[1]);
  v23 = (_QWORD *)((char *)a1 + 8);
  v24 = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)a1 + 1) + 64))((_QWORD *)a1 + 1);
  (*(void (**)(_QWORD *, uint64_t))(*((_QWORD *)a1 + 1) + 16))((_QWORD *)a1 + 1, v24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"currentRemoteOriginStr =", 24);
  *(_BYTE *)(v24 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v24 + 32))(v24, &v99);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v24 + 17) = 0;
  v25 = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)a1 + 1) + 64))((_QWORD *)a1 + 1);
  (*(void (**)(_QWORD *, uint64_t))(*((_QWORD *)a1 + 1) + 16))((_QWORD *)a1 + 1, v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"incomingRemoteOriginStr=", 24);
  *(_BYTE *)(v25 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v25 + 32))(v25, &v98);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v25 + 17) = 0;
  v26 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
  if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
  else
    v27 = v98.__r_.__value_.__l.__size_;
  v28 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
  if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v28 = v99.__r_.__value_.__l.__size_;
  if (v27 == v28)
  {
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v99;
    else
      v29 = (std::string *)v99.__r_.__value_.__r.__words[0];
    if ((*((_BYTE *)&v98.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      if (*((_BYTE *)&v98.__r_.__value_.__s + 23))
      {
        v30 = &v98;
        while (v30->__r_.__value_.__s.__data_[0] == v29->__r_.__value_.__s.__data_[0])
        {
          v30 = (std::string *)((char *)v30 + 1);
          v29 = (std::string *)((char *)v29 + 1);
          if (!--v26)
            goto LABEL_69;
        }
        goto LABEL_48;
      }
LABEL_69:
      v48 = (*(uint64_t (**)(_QWORD *, std::string *))(*v23 + 64))((_QWORD *)a1 + 1, v29);
      (*(void (**)(_QWORD *, uint64_t))(*v23 + 16))((_QWORD *)a1 + 1, v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v48 + 8), (uint64_t)"Remote answers the same SDP as its last one", 43);
      *(_BYTE *)(v48 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v48 + 17) = 0;
      v49 = 1;
      goto LABEL_129;
    }
    if (!memcmp(v98.__r_.__value_.__l.__data_, v29, v98.__r_.__value_.__l.__size_))
      goto LABEL_69;
  }
LABEL_48:
  v32 = (*(uint64_t (**)(_QWORD *))(*v23 + 64))((_QWORD *)a1 + 1);
  (*(void (**)(_QWORD *, uint64_t))(*v23 + 16))((_QWORD *)a1 + 1, v32);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"Remote answers a different SDP", 30);
  *(_BYTE *)(v32 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v32 + 17) = 0;
  object = 0;
  object = xpc_null_create();
  __s1[0] = 0;
  __s1[1] = 0;
  *(_QWORD *)v84 = 0;
  v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a2 + 32), "P-Asserted-Service");
  if (v33)
  {
    v34 = *((_QWORD *)v33 + 5);
    if (v34)
    {
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v34 + 40))(v34, __s1))
      {
        std::string::basic_string[abi:ne180100]<0>(&v97, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.session.group");
        if (v84[7] >= 0)
          v35 = (void *)v84[7];
        else
          v35 = __s1[1];
        v36 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
        v37 = SHIBYTE(v97.__r_.__value_.__r.__words[2]);
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v36 = v97.__r_.__value_.__l.__size_;
        if (v35 == (void *)v36)
        {
          if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v38 = &v97;
          else
            v38 = (std::string *)v97.__r_.__value_.__r.__words[0];
          if ((v84[7] & 0x80) != 0)
          {
            v47 = memcmp(__s1[0], v38, (size_t)__s1[1]) == 0;
          }
          else if (v84[7])
          {
            v39 = v84[7] - 1;
            v40 = __s1;
            do
            {
              v42 = *(unsigned __int8 *)v40;
              v40 = (void **)((char *)v40 + 1);
              v41 = v42;
              v44 = v38->__r_.__value_.__s.__data_[0];
              v38 = (std::string *)((char *)v38 + 1);
              v43 = v44;
              v46 = v39-- != 0;
              v47 = v41 == v43;
            }
            while (v41 == v43 && v46);
          }
          else
          {
            v47 = 1;
          }
        }
        else
        {
          v47 = 0;
        }
        if (v37 < 0)
          operator delete(v97.__r_.__value_.__l.__data_);
        if (v47)
        {
          v50 = xpc_dictionary_create(0, 0, 0);
          if (v50 || (v50 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C3B87B98](v50) == MEMORY[0x1E0C812F8])
            {
              xpc_retain(v50);
              v51 = v50;
            }
            else
            {
              v51 = xpc_null_create();
            }
          }
          else
          {
            v51 = xpc_null_create();
            v50 = 0;
          }
          xpc_release(v50);
          v52 = xpc_null_create();
          v53 = object;
          object = v51;
          xpc_release(v53);
          xpc_release(v52);
          v94 = xpc_BOOL_create(1);
          if (!v94)
            v94 = xpc_null_create();
          v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
          v97.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsSuccess";
          xpc::dict::object_proxy::operator=((uint64_t)&v97, &v94, &v95);
          xpc_release(v95);
          v95 = 0;
          xpc_release(v94);
          v94 = 0;
          v54 = (char *)SipMessage::header<SipConversationIdHeader>(a2);
          v55 = (__int128 *)(v54 + 64);
          if (!v54)
            v55 = &ims::kEmptyString;
          if (*((char *)v55 + 23) >= 0)
            v56 = (const char *)v55;
          else
            v56 = *(const char **)v55;
          v92 = xpc_string_create(v56);
          if (!v92)
            v92 = xpc_null_create();
          v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
          v97.__r_.__value_.__l.__size_ = (std::string::size_type)"kConversationId";
          xpc::dict::object_proxy::operator=((uint64_t)&v97, &v92, &v93);
          xpc_release(v93);
          v93 = 0;
          xpc_release(v92);
          v92 = 0;
          v57 = (char *)SipMessage::header<SipContributionIdHeader>(a2);
          v58 = (__int128 *)(v57 + 64);
          if (!v57)
            v58 = &ims::kEmptyString;
          if (*((char *)v58 + 23) >= 0)
            v59 = (const char *)v58;
          else
            v59 = *(const char **)v58;
          v90 = xpc_string_create(v59);
          if (!v90)
            v90 = xpc_null_create();
          v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
          v97.__r_.__value_.__l.__size_ = (std::string::size_type)"kContributionId";
          xpc::dict::object_proxy::operator=((uint64_t)&v97, &v90, &v91);
          xpc_release(v91);
          v91 = 0;
          xpc_release(v90);
          v90 = 0;
          v60 = SipMessage::header<SipContactHeader>(a2);
          if (v60)
          {
            v61 = v60[9];
            if (v61 == v60[10])
              v61 = 0;
          }
          else
          {
            v61 = 0;
          }
          SipUri::asString(v61 + 8, 2, &v97);
          if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v62 = &v97;
          else
            v62 = (std::string *)v97.__r_.__value_.__r.__words[0];
          v88 = xpc_string_create((const char *)v62);
          if (!v88)
            v88 = xpc_null_create();
          v87[0] = &object;
          v87[1] = "kConferenceFocus";
          xpc::dict::object_proxy::operator=((uint64_t)v87, &v88, &v89);
          xpc_release(v89);
          v89 = 0;
          xpc_release(v88);
          v88 = 0;
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v97.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  if ((v84[7] & 0x80000000) != 0)
    operator delete(__s1[0]);
  v63 = (std::__shared_weak_count *)v101;
  v86[0] = v100;
  v86[1] = v101;
  if (v101)
  {
    v64 = (unint64_t *)(v101 + 8);
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(__s1, a2);
  v66 = SipMessage::header<SipCSeqHeader>(a2);
  if (v66)
    v67 = v66[15];
  else
    v67 = 0;
  v68 = object;
  v85 = object;
  if (object)
  {
    xpc_retain(object);
  }
  else
  {
    v68 = xpc_null_create();
    v85 = v68;
  }
  SipOfferAnswer::updateWithIncomingSdp(a4, a1, v86, (std::string *)__s1, a3, v67, &v85);
  xpc_release(v68);
  v85 = 0;
  if ((v84[7] & 0x80000000) != 0)
    operator delete(__s1[0]);
  if (v63)
  {
    p_shared_owners = (unint64_t *)&v63->__shared_owners_;
    do
      v70 = __ldaxr(p_shared_owners);
    while (__stlxr(v70 - 1, p_shared_owners));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  xpc_release(object);
  v49 = 0;
LABEL_129:
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v99.__r_.__value_.__l.__data_);
    if ((v49 & 1) == 0)
      goto LABEL_153;
  }
  else if ((v49 & 1) == 0)
  {
    goto LABEL_153;
  }
LABEL_135:
  if ((*(_DWORD *)(a2 + 88) - 200) > 0xFFFFFF9B || !SipOfferAnswer::remoteAnswerPending(a1))
    goto LABEL_152;
  v71 = SipOfferAnswer::transactionId(a1);
  v72 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((v72 & 0x80u) == 0)
    v73 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  else
    v73 = a3->__r_.__value_.__l.__size_;
  v74 = *(unsigned __int8 *)(v71 + 23);
  v75 = (char)v74;
  if ((v74 & 0x80u) != 0)
    v74 = *(_QWORD *)(v71 + 8);
  if (v73 != v74)
    goto LABEL_152;
  if (v75 >= 0)
    v76 = (unsigned __int8 *)v71;
  else
    v76 = *(unsigned __int8 **)v71;
  if ((v72 & 0x80) != 0)
  {
    if (!memcmp(a3->__r_.__value_.__l.__data_, v76, a3->__r_.__value_.__l.__size_))
      goto LABEL_159;
LABEL_152:
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0;
    goto LABEL_153;
  }
  if (*((_BYTE *)&a3->__r_.__value_.__s + 23))
  {
    while (a3->__r_.__value_.__s.__data_[0] == *v76)
    {
      a3 = (std::string *)((char *)a3 + 1);
      ++v76;
      if (!--v72)
        goto LABEL_159;
    }
    goto LABEL_152;
  }
LABEL_159:
  v81 = *((_QWORD *)a1 + 1);
  v80 = (_QWORD *)((char *)a1 + 8);
  v82 = (*(uint64_t (**)(_QWORD *, unsigned __int8 *))(v81 + 48))(v80, v76);
  (*(void (**)(_QWORD *, uint64_t))(*v80 + 16))(v80, v82);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v82 + 8), (uint64_t)"expected SDP answer in incoming ", 32);
  *(_BYTE *)(v82 + 17) = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v99, a2);
  LoggableString::LoggableString((std::string *)__s1, &v99);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v82 + 40))(v82, __s1);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v82 + 64))(v82, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v82 + 17) = 0;
  if ((v84[7] & 0x80000000) != 0)
    operator delete(__s1[0]);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v99, "MissingSdp");
  memset(&v84[8], 0, 48);
  __s1[0] = &off_1E78B7238;
  __s1[1] = &_bambiDomain;
  *(_DWORD *)v84 = 1073741826;
  BambiCallTerminationResult::makeResult((ImsResult *)a4, (uint64_t)&v99, (ImsResult *)__s1);
  ImsResult::~ImsResult((ImsResult *)__s1);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
LABEL_153:
  v77 = (std::__shared_weak_count *)v101;
  if (v101)
  {
    v78 = (unint64_t *)(v101 + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
}

void sub_1BF0D2F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, char a11, int a12, __int16 a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,xpc_object_t object,xpc_object_t a34)
{
  uint64_t v34;

  if (SHIBYTE(a12) < 0)
    operator delete(__p);
  xpc_release(object);
  if (*(char *)(v34 - 121) < 0)
    operator delete(*(void **)(v34 - 144));
  if (*(char *)(v34 - 89) < 0)
    operator delete(*(void **)(v34 - 112));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v34 - 80);
  _Unwind_Resume(a1);
}

void BambiCallTerminationResult::makeResult(ImsResult *this, uint64_t a2, ImsResult *a3)
{
  uint64_t v5;
  uint64_t v6;
  void (**v7)(BambiCallTerminationResult *__hidden);
  std::string __p;

  v7 = off_1E78DD1F0;
  memset(&__p, 0, sizeof(__p));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ImsResult::ImsResult(this, a3);
  v5 = ((uint64_t (*)(_QWORD))v7[4])(&v7);
  v6 = *((_QWORD *)this + 5);
  if (v6 != v5)
  {
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    *((_QWORD *)this + 5) = v5;
  }
  v7 = off_1E78DD1F0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF0D3178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  ImsResult *v15;

  ImsResult::~ImsResult(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void SipOfferAnswer::updateWithOutgoingMessage(SipOfferAnswer *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, uint64_t a4@<X8>)
{
  char *v8;
  std::string::size_type v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _DWORD *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::string::size_type v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  std::string *v26;
  uint64_t v27;
  std::string::size_type v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *size;
  unint64_t *v32;
  unint64_t v33;
  std::string::size_type v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  std::string::size_type v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _BYTE *v77;
  int v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  std::string::size_type v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  int v98;
  _QWORD *v99;
  uint64_t v100;
  _BYTE *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  _BYTE *v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count *v108;
  std::string::size_type v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::string __str;
  std::string::size_type v118;
  std::__shared_weak_count *v119;
  std::string::size_type v120;
  std::__shared_weak_count *v121;
  std::string::size_type v122;
  std::__shared_weak_count *v123;
  std::string::size_type v124;
  std::__shared_weak_count *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  std::string __p;
  void *v129;
  char v130;
  std::string v131;
  uint64_t v132;
  std::__shared_weak_count *v133;

  v8 = SipMessage::body<SipSdpBody>(a2);
  if (v8)
  {
    v9 = *((_QWORD *)v8 + 1);
    v10 = (std::__shared_weak_count *)*((_QWORD *)v8 + 2);
    v120 = v9;
    v121 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    if (v9)
    {
      v118 = v9;
      v119 = v10;
      if (v10)
      {
        v13 = (unint64_t *)&v10->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&__str, a2);
      v15 = SipMessage::header<SipCSeqHeader>(a2);
      if (v15)
        v16 = v15[15];
      else
        v16 = 0;
      if (!SipOfferAnswer::satisfied(a1))
      {
LABEL_36:
        SipOfferAnswer::local(a1, &__p);
        v28 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8);
        v131.__r_.__value_.__r.__words[0] = *(_QWORD *)__p.__r_.__value_.__l.__data_;
        v131.__r_.__value_.__l.__size_ = v28;
        if (v28)
        {
          v29 = (unint64_t *)(v28 + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v32 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        v34 = v131.__r_.__value_.__r.__words[0];
        if (v131.__r_.__value_.__r.__words[0])
        {
          v35 = (_QWORD *)((char *)a1 + 8);
          v36 = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)a1 + 1) + 56))((_QWORD *)a1 + 1);
          (*(void (**)(_QWORD *, uint64_t))(*((_QWORD *)a1 + 1) + 16))((_QWORD *)a1 + 1, v36);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"received duplicate local offer from ", 36);
          *(_BYTE *)(v36 + 17) = 0;
          LoggableString::LoggableString(&__p, &__str);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v36 + 40))(v36, &__p);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v36 + 17) = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v37 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v35 + 56))((_QWORD *)a1 + 1);
          (*(void (**)(_QWORD *, _BYTE *))(*v35 + 16))((_QWORD *)a1 + 1, v37);
          (*(void (**)(SipOfferAnswer *, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v37);
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v37[17] = 0;
          *(_OWORD *)(a4 + 24) = 0u;
          *(_OWORD *)(a4 + 40) = 0u;
          *(_OWORD *)(a4 + 56) = 0u;
          *(_QWORD *)a4 = &off_1E78B7238;
          *(_QWORD *)(a4 + 8) = &_bambiDomain;
          *(_DWORD *)(a4 + 16) = 1073741826;
        }
        v38 = (std::__shared_weak_count *)v131.__r_.__value_.__l.__size_;
        if (!v131.__r_.__value_.__l.__size_)
          goto LABEL_52;
        v39 = (unint64_t *)(v131.__r_.__value_.__l.__size_ + 8);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
          if (!v34)
          {
LABEL_53:
            SipOfferAnswer::remote(a1, &__p);
            v41 = *(std::__shared_weak_count **)(__p.__r_.__value_.__r.__words[0] + 8);
            v126 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
            v127 = v41;
            if (v41)
            {
              v42 = (unint64_t *)&v41->__shared_owners_;
              do
                v43 = __ldxr(v42);
              while (__stxr(v43 + 1, v42));
            }
            v44 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
            {
              v45 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v46 = __ldaxr(v45);
              while (__stlxr(v46 - 1, v45));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                std::__shared_weak_count::__release_weak(v44);
              }
            }
            if (!v126)
            {
              v79 = *((_QWORD *)a1 + 19);
              v81 = *(_QWORD *)(v79 + 16);
              v80 = *(std::__shared_weak_count **)(v79 + 24);
              v124 = v81;
              v125 = v80;
              if (v80)
              {
                v82 = (unint64_t *)&v80->__shared_owners_;
                do
                  v83 = __ldxr(v82);
                while (__stxr(v83 + 1, v82));
              }
              v85 = v118;
              v84 = v119;
              v122 = v118;
              v123 = v119;
              if (v119)
              {
                v86 = (unint64_t *)&v119->__shared_owners_;
                do
                  v87 = __ldxr(v86);
                while (__stxr(v87 + 1, v86));
              }
              v88 = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)a1 + 1) + 64))((_QWORD *)a1 + 1);
              (*(void (**)(_QWORD *, uint64_t))(*((_QWORD *)a1 + 1) + 16))((_QWORD *)a1 + 1, v88);
              std::string::operator=((std::string *)(v81 + 72), a3);
              *(_DWORD *)(v81 + 96) = v16;
              v89 = *(_QWORD *)(v81 + 8);
              v132 = v85;
              v133 = v84;
              if (v84)
              {
                v90 = (unint64_t *)&v84->__shared_owners_;
                do
                  v91 = __ldxr(v90);
                while (__stxr(v91 + 1, v90));
              }
              std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)v89, &v132);
              std::string::operator=((std::string *)(v89 + 16), &__str);
              v92 = v133;
              if (v133)
              {
                v93 = (unint64_t *)&v133->__shared_owners_;
                do
                  v94 = __ldaxr(v93);
                while (__stlxr(v94 - 1, v93));
                if (!v94)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
              std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)(v81 + 40), *(_QWORD *)(v81 + 8), *(_QWORD *)(v81 + 16));
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v88 + 8), (uint64_t)"setting local offer from ", 25);
              *(_BYTE *)(v88 + 17) = 0;
              LoggableString::LoggableString(&v131, &__str);
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v88 + 40))(v88, &v131);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v88 + 8), (uint64_t)" in transaction ", 16);
              *(_BYTE *)(v88 + 17) = 0;
              ObfuscatedString::ObfuscatedString((uint64_t)&__p, a3);
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v88 + 56))(v88, &__p);
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v88 + 64))(v88, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v88 + 17) = 0;
              if (v130 < 0)
                operator delete(v129);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v131.__r_.__value_.__l.__data_);
              if (v84)
              {
                v95 = (unint64_t *)&v84->__shared_owners_;
                do
                  v96 = __ldaxr(v95);
                while (__stlxr(v96 - 1, v95));
                if (!v96)
                {
                  ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                  std::__shared_weak_count::__release_weak(v84);
                }
              }
              v72 = v125;
              if (!v125)
                goto LABEL_132;
              v97 = (unint64_t *)&v125->__shared_owners_;
              do
                v74 = __ldaxr(v97);
              while (__stlxr(v74 - 1, v97));
              goto LABEL_130;
            }
            v47 = *((_QWORD *)a1 + 19);
            v48 = *(_QWORD *)(v47 + 16);
            v49 = *(std::__shared_weak_count **)(v47 + 24);
            if (v49)
            {
              v50 = (unint64_t *)&v49->__shared_owners_;
              do
                v51 = __ldxr(v50);
              while (__stxr(v51 + 1, v50));
              v52 = SipOfferAnswerExchange::validateSdpSource(v48, (unsigned __int8 *)&__str, (unsigned __int8 *)a3);
              do
                v53 = __ldaxr(v50);
              while (__stlxr(v53 - 1, v50));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
              if (v52)
                goto LABEL_70;
            }
            else if (SipOfferAnswerExchange::validateSdpSource(v48, (unsigned __int8 *)&__str, (unsigned __int8 *)a3))
            {
LABEL_70:
              v54 = *((_QWORD *)a1 + 19);
              v56 = *(uint64_t **)(v54 + 16);
              v55 = *(std::__shared_weak_count **)(v54 + 24);
              v132 = (uint64_t)v56;
              v133 = v55;
              if (v55)
              {
                v57 = (unint64_t *)&v55->__shared_owners_;
                do
                  v58 = __ldxr(v57);
                while (__stxr(v58 + 1, v57));
              }
              v60 = v118;
              v59 = v119;
              v124 = v118;
              v125 = v119;
              if (v119)
              {
                v61 = (unint64_t *)&v119->__shared_owners_;
                do
                  v62 = __ldxr(v61);
                while (__stxr(v62 + 1, v61));
              }
              v63 = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)a1 + 1) + 64))((_QWORD *)a1 + 1);
              (*(void (**)(_QWORD *, uint64_t))(*((_QWORD *)a1 + 1) + 16))((_QWORD *)a1 + 1, v63);
              v64 = v56[1];
              v131.__r_.__value_.__r.__words[0] = v60;
              v131.__r_.__value_.__l.__size_ = (std::string::size_type)v59;
              if (v59)
              {
                v65 = (unint64_t *)&v59->__shared_owners_;
                do
                  v66 = __ldxr(v65);
                while (__stxr(v66 + 1, v65));
              }
              std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)v64, (uint64_t *)&v131);
              std::string::operator=((std::string *)(v64 + 16), &__str);
              v67 = (std::__shared_weak_count *)v131.__r_.__value_.__l.__size_;
              if (v131.__r_.__value_.__l.__size_)
              {
                v68 = (unint64_t *)(v131.__r_.__value_.__l.__size_ + 8);
                do
                  v69 = __ldaxr(v68);
                while (__stlxr(v69 - 1, v68));
                if (!v69)
                {
                  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                  std::__shared_weak_count::__release_weak(v67);
                }
              }
              std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100](v56 + 7, v56[1], v56[2]);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v63 + 8), (uint64_t)"setting local answer from ", 26);
              *(_BYTE *)(v63 + 17) = 0;
              LoggableString::LoggableString(&__p, &__str);
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v63 + 40))(v63, &__p);
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v63 + 64))(v63, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v63 + 17) = 0;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v59)
              {
                v70 = (unint64_t *)&v59->__shared_owners_;
                do
                  v71 = __ldaxr(v70);
                while (__stlxr(v71 - 1, v70));
                if (!v71)
                {
                  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                  std::__shared_weak_count::__release_weak(v59);
                }
              }
              v72 = v133;
              if (!v133)
                goto LABEL_132;
              v73 = (unint64_t *)&v133->__shared_owners_;
              do
                v74 = __ldaxr(v73);
              while (__stlxr(v74 - 1, v73));
LABEL_130:
              if (!v74)
              {
                ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                std::__shared_weak_count::__release_weak(v72);
              }
LABEL_132:
              v98 = 1;
LABEL_139:
              v102 = v127;
              if (v127)
              {
                v103 = (unint64_t *)&v127->__shared_owners_;
                do
                  v104 = __ldaxr(v103);
                while (__stlxr(v104 - 1, v103));
                if (!v104)
                {
                  ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                  std::__shared_weak_count::__release_weak(v102);
                }
              }
              if (!v98)
                goto LABEL_156;
              v105 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)a1 + 1) + 64))((_QWORD *)a1 + 1);
              (*(void (**)(_QWORD *, _BYTE *))(*((_QWORD *)a1 + 1) + 16))((_QWORD *)a1 + 1, v105);
              (*(void (**)(SipOfferAnswer *, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v105);
              (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v105 + 64))(v105, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v105[17] = 0;
              v106 = (std::__shared_weak_count *)*((_QWORD *)a1 + 17);
              if (v106)
              {
                v107 = std::__shared_weak_count::lock(v106);
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)v107;
                if (v107)
                {
                  v108 = v107;
                  v109 = *((_QWORD *)a1 + 16);
                  __p.__r_.__value_.__r.__words[0] = v109;
                  if (v109 && SipOfferAnswer::satisfied(a1))
                    (*(void (**)(std::string::size_type))(*(_QWORD *)v109 + 32))(v109);
                  v110 = (unint64_t *)&v108->__shared_owners_;
                  do
                    v111 = __ldaxr(v110);
                  while (__stlxr(v111 - 1, v110));
                  if (!v111)
                  {
                    ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                    std::__shared_weak_count::__release_weak(v108);
                  }
                }
              }
              v78 = 0;
              goto LABEL_155;
            }
            v99 = (_QWORD *)((char *)a1 + 8);
            v100 = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)a1 + 1) + 56))((_QWORD *)a1 + 1);
            (*(void (**)(_QWORD *, uint64_t))(*((_QWORD *)a1 + 1) + 16))((_QWORD *)a1 + 1, v100);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v100 + 8), (uint64_t)"unexpected transaction for local answer: ", 41);
            *(_BYTE *)(v100 + 17) = 0;
            ObfuscatedString::ObfuscatedString((uint64_t)&__p, a3);
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v100 + 56))(v100, &__p);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v100 + 64))(v100, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v100 + 17) = 0;
            if (v130 < 0)
              operator delete(v129);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v101 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v99 + 56))((_QWORD *)a1 + 1);
            (*(void (**)(_QWORD *, _BYTE *))(*v99 + 16))((_QWORD *)a1 + 1, v101);
            (*(void (**)(SipOfferAnswer *, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v101);
            (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v101 + 64))(v101, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v98 = 0;
            v101[17] = 0;
            *(_OWORD *)(a4 + 24) = 0u;
            *(_OWORD *)(a4 + 40) = 0u;
            *(_OWORD *)(a4 + 56) = 0u;
            *(_QWORD *)a4 = &off_1E78B7238;
            *(_QWORD *)(a4 + 8) = &_bambiDomain;
            *(_DWORD *)(a4 + 16) = 1073741826;
            goto LABEL_139;
          }
        }
        else
        {
LABEL_52:
          if (!v34)
            goto LABEL_53;
        }
LABEL_156:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (v10)
        {
          v112 = (unint64_t *)&v10->__shared_owners_;
          do
            v113 = __ldaxr(v112);
          while (__stlxr(v113 - 1, v112));
          if (!v113)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        goto LABEL_163;
      }
      v20 = SipOfferAnswer::transactionId(a1);
      v21 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      if ((v21 & 0x80u) == 0)
        v22 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      else
        v22 = a3->__r_.__value_.__l.__size_;
      v23 = *(unsigned __int8 *)(v20 + 23);
      v24 = (char)v23;
      if ((v23 & 0x80u) != 0)
        v23 = *(_QWORD *)(v20 + 8);
      if (v22 == v23)
      {
        if (v24 >= 0)
          v25 = (unsigned __int8 *)v20;
        else
          v25 = *(unsigned __int8 **)v20;
        if ((v21 & 0x80) == 0)
        {
          if (*((_BYTE *)&a3->__r_.__value_.__s + 23))
          {
            v26 = a3;
            while (v26->__r_.__value_.__s.__data_[0] == *v25)
            {
              v26 = (std::string *)((char *)v26 + 1);
              ++v25;
              if (!--v21)
                goto LABEL_97;
            }
            goto LABEL_35;
          }
LABEL_97:
          v75 = (_QWORD *)((char *)a1 + 8);
          v76 = (*(uint64_t (**)(_QWORD *, unsigned __int8 *))(*((_QWORD *)a1 + 1) + 56))((_QWORD *)a1 + 1, v25);
          (*(void (**)(_QWORD *, uint64_t))(*((_QWORD *)a1 + 1) + 16))((_QWORD *)a1 + 1, v76);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v76 + 8), (uint64_t)"already have offer and answer for transaction ", 46);
          *(_BYTE *)(v76 + 17) = 0;
          ObfuscatedString::ObfuscatedString((uint64_t)&__p, a3);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v76 + 56))(v76, &__p);
          if (v130 < 0)
            operator delete(v129);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v77 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v75 + 56))((_QWORD *)a1 + 1);
          (*(void (**)(_QWORD *, _BYTE *))(*v75 + 16))((_QWORD *)a1 + 1, v77);
          (*(void (**)(SipOfferAnswer *, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v77);
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v77 + 64))(v77, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v77[17] = 0;
          v78 = 1073741826;
LABEL_155:
          *(_OWORD *)(a4 + 24) = 0u;
          *(_OWORD *)(a4 + 40) = 0u;
          *(_OWORD *)(a4 + 56) = 0u;
          *(_QWORD *)a4 = &off_1E78B7238;
          *(_QWORD *)(a4 + 8) = &_bambiDomain;
          *(_DWORD *)(a4 + 16) = v78;
          goto LABEL_156;
        }
        if (!memcmp(a3->__r_.__value_.__l.__data_, v25, a3->__r_.__value_.__l.__size_))
          goto LABEL_97;
      }
LABEL_35:
      v27 = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)a1 + 1) + 64))((_QWORD *)a1 + 1);
      (*(void (**)(_QWORD *, uint64_t))(*((_QWORD *)a1 + 1) + 16))((_QWORD *)a1 + 1, v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"starting new offer/answer", 25);
      *(_BYTE *)(v27 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v27 + 17) = 0;
      SipOfferAnswer::startNewExchange(a1);
      goto LABEL_36;
    }
  }
  else
  {
    v120 = 0;
    v121 = 0;
  }
  v18 = *((_QWORD *)a1 + 1);
  v17 = (_QWORD *)((char *)a1 + 8);
  v19 = (*(uint64_t (**)(_QWORD *))(v18 + 64))(v17);
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 16))(v17, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"outgoing ", 9);
  *(_BYTE *)(v19 + 17) = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v131, a2);
  LoggableString::LoggableString(&__p, &v131);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v19 + 40))(v19, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)" message does not contain SDP", 29);
  *(_BYTE *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v19 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131.__r_.__value_.__l.__data_);
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_QWORD *)a4 = &off_1E78B7238;
  *(_QWORD *)(a4 + 8) = &_bambiDomain;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_163:
  v114 = v121;
  if (v121)
  {
    v115 = (unint64_t *)&v121->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
}

void sub_1BF0D3E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t SipOfferAnswer::log(SipOfferAnswer *this, ImsOutStream *a2)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = *((_QWORD *)this + 19);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(std::__shared_weak_count **)(v2 + 24);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (*(uint64_t (**)(uint64_t, ImsOutStream *))(*(_QWORD *)v3 + 16))(v3, a2);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v7;
}

void sub_1BF0D4094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipOfferAnswerExchange::~SipOfferAnswerExchange(void **this)
{
  *this = off_1E78DD018;
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 7));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 5));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 3));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
}

{
  *this = off_1E78DD018;
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 7));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 5));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 3));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
  JUMPOUT(0x1C3B87100);
}

void SipOfferAnswerExchange::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "OfferAnswerExchange");
}

void SipOfferAnswer::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "OfferAnswerExchange");
}

void BambiCallTerminationResult::~BambiCallTerminationResult(void **this)
{
  *this = off_1E78DD1F0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78DD1F0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

_QWORD *BambiCallTerminationResult::clone(BambiCallTerminationResult *this)
{
  _QWORD *v2;
  std::string *v3;

  v2 = (_QWORD *)operator new();
  *v2 = off_1E78DD1F0;
  v3 = (std::string *)(v2 + 1);
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    v2[3] = *((_QWORD *)this + 3);
  }
  return v2;
}

void sub_1BF0D4288(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1093C402D7449D9);
  _Unwind_Resume(a1);
}

void BambiCallTerminationResult::resultDescription(BambiCallTerminationResult *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
}

void std::__shared_ptr_emplace<SipOfferAnswerItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DD150;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipOfferAnswerItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DD150;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipOfferAnswerItem>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 24);
}

void std::__shared_ptr_emplace<SipOfferAnswerExchange>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DD1A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipOfferAnswerExchange>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DD1A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipOfferAnswerExchange>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t SDPPrecondition::parse(unsigned int *a1, std::string *a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int data_low;
  int v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char **v21;
  const char **v22;
  const char **v23;
  const char **v24;
  const char **v25;
  std::string v27;
  std::string v28;
  std::string __p;
  std::string v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;

  v31 = 0;
  v32 = 0;
  v33 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v30, " ");
  v4 = ims::tokenize(a2, (uint64_t *)&v31, (char *)&v30);
  v5 = v4;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v30.__r_.__value_.__l.__data_);
    if (v5)
    {
LABEL_3:
      memset(&v30, 0, sizeof(v30));
      if (*((char *)v31 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v31, *((_QWORD *)v31 + 1));
      }
      else
      {
        v6 = *v31;
        v30.__r_.__value_.__r.__words[2] = *((_QWORD *)v31 + 2);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v6;
      }
      size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v30.__r_.__value_.__l.__size_;
      if (size != 3)
        goto LABEL_21;
      v10 = &v30;
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v10 = (std::string *)v30.__r_.__value_.__r.__words[0];
      data_low = LOWORD(v10->__r_.__value_.__l.__data_);
      v12 = v10->__r_.__value_.__s.__data_[2];
      if (data_low == 28529 && v12 == 115)
      {
        v15 = 1;
      }
      else
      {
LABEL_21:
        std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.parse");
        std::string::basic_string[abi:ne180100]<0>(&v28, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v14 = ImsLogger::warn(ims::_logger, (uint64_t)&__p, (uint64_t)&v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Precondition has unsupported type: ", 35);
        *(_BYTE *)(v14 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v14 + 32))(v14, &v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" for status: ", 13);
        *(_BYTE *)(v14 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v14 + 32))(v14, &v27);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v14 + 17) = 0;
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v27.__r_.__value_.__l.__data_);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v15 = 0;
      }
      a1[1] = v15;
      v16 = *a1;
      if (*a1 != 2)
      {
        if (v16 == 1)
        {
          v18 = (uint64_t)v31;
          if (v32 - (_QWORD)v31 == 96)
          {
            memset(&__p, 0, sizeof(__p));
            if (*((char *)v31 + 47) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v31 + 3), *((_QWORD *)v31 + 4));
              v18 = (uint64_t)v31;
            }
            else
            {
              __p = *(std::string *)((_BYTE *)v31 + 1);
            }
            memset(&v28, 0, sizeof(v28));
            if (*(char *)(v18 + 71) < 0)
            {
              std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(v18 + 48), *(_QWORD *)(v18 + 56));
              v18 = (uint64_t)v31;
            }
            else
            {
              v28 = *(std::string *)(v18 + 48);
            }
            memset(&v27, 0, sizeof(v27));
            if (*(char *)(v18 + 95) < 0)
              std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(v18 + 72), *(_QWORD *)(v18 + 80));
            else
              v27 = *(std::string *)(v18 + 72);
            {
              v8 = 0;
            }
            else
            {
              v8 = 1;
            }
            if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v27.__r_.__value_.__l.__data_);
            goto LABEL_69;
          }
          goto LABEL_40;
        }
        if (v16)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.parse");
          std::string::basic_string[abi:ne180100]<0>(&v28, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v19 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v28);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"Precondition has invalid status: ", 33);
          *(_BYTE *)(v19 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v19 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v19 + 17) = 0;
LABEL_42:
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v28.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v8 = 0;
          goto LABEL_73;
        }
      }
      v17 = (uint64_t)v31;
      if (v32 - (_QWORD)v31 == 72)
      {
        memset(&__p, 0, sizeof(__p));
        if (*((char *)v31 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v31 + 3), *((_QWORD *)v31 + 4));
          v17 = (uint64_t)v31;
        }
        else
        {
          __p = *(std::string *)((_BYTE *)v31 + 1);
        }
        memset(&v28, 0, sizeof(v28));
        if (*(char *)(v17 + 71) < 0)
          std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(v17 + 48), *(_QWORD *)(v17 + 56));
        else
          v28 = *(std::string *)(v17 + 48);
        {
          v8 = 0;
        }
        else
        {
          v8 = 1;
        }
        a1[2] = 0;
LABEL_69:
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
LABEL_73:
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v30.__r_.__value_.__l.__data_);
        goto LABEL_75;
      }
LABEL_40:
      std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.parse");
      std::string::basic_string[abi:ne180100]<0>(&v28, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v20 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"Precondition has invalid number of tokens: ", 43);
      *(_BYTE *)(v20 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v20 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)" for status: ", 13);
      *(_BYTE *)(v20 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v20 + 32))(v20, &v27);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v20 + 17) = 0;
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      goto LABEL_42;
    }
  }
  else if (v4)
  {
    goto LABEL_3;
  }
  std::string::basic_string[abi:ne180100]<0>(&v30, "sdp.parse");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::error(ims::_logger, (uint64_t)&v30, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Precondition has no tokens", 26);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  v8 = 0;
LABEL_75:
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  return v8;
}

void sub_1BF0D4B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  *(_QWORD *)(v28 - 80) = v28 - 56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 80));
  _Unwind_Resume(a1);
}

uint64_t operator<<(uint64_t a1, unsigned int *a2)
{
  int v4;
  uint64_t v5;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p[2];
  char v12;

  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 32))(a1, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 8), (uint64_t)":", 1);
  *(_BYTE *)(a1 + 17) = 0;
  if (v12 < 0)
    operator delete(__p[0]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 8), (uint64_t)"qos", 3);
  *(_BYTE *)(a1 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 8), (uint64_t)" ", 1);
  *(_BYTE *)(a1 + 17) = 0;
  v4 = *a2;
  if (*a2 == 2)
    goto LABEL_6;
  if (v4 == 1)
  {
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 32))(a1, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 8), (uint64_t)" ", 1);
    *(_BYTE *)(a1 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 32))(a1, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 8), (uint64_t)" ", 1);
    *(_BYTE *)(a1 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 32))(a1, v7);
    if (v8 < 0)
      operator delete(v7[0]);
  }
  else
  {
    if (!v4)
    {
LABEL_6:
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 32))(a1, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 8), (uint64_t)" ", 1);
      *(_BYTE *)(a1 + 17) = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 32))(a1, v9);
      goto LABEL_10;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "sdp");
    std::string::basic_string[abi:ne180100]<0>(v9, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Precondition has invalid status: ", 33);
    *(_BYTE *)(v5 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
  }
LABEL_10:
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(__p[0]);
  return a1;
}

{
  std::string __p;

  LoggableString::LoggableString(&__p, (const std::string *)&registrationModeNames[24 * *a2]);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 40))(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0D4EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void SDPPreconditionTable::SDPPreconditionTable(SDPPreconditionTable *this, int a2)
{
  char **v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  __int128 v40;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v3 = (char **)((char *)this + 16);
  if (a2)
  {
    v4 = (char *)operator new(0x14uLL);
    *(_DWORD *)v4 = 0;
    *(_OWORD *)(v4 + 4) = xmmword_1BF2A8CE0;
    *((_QWORD *)this + 1) = v4 + 20;
    *((_QWORD *)this + 2) = v4 + 20;
    *(_QWORD *)this = v4;
    v5 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SDPPreconditionRow>>((uint64_t)v3, 2uLL);
    *((_DWORD *)v5 + 5) = 0;
    v6 = v5 + 20;
    v8 = &v5[20 * v7];
    *(_OWORD *)(v5 + 24) = xmmword_1BF2A8CF0;
    v9 = v5 + 40;
    v11 = *(char **)this;
    v10 = (char *)*((_QWORD *)this + 1);
    if (v10 != *(char **)this)
    {
      do
      {
        v12 = *(_OWORD *)(v10 - 20);
        *((_DWORD *)v6 - 1) = *((_DWORD *)v10 - 1);
        *(_OWORD *)(v6 - 20) = v12;
        v6 -= 20;
        v10 -= 20;
      }
      while (v10 != v11);
      v10 = *(char **)this;
    }
    *(_QWORD *)this = v6;
    *((_QWORD *)this + 1) = v9;
    *((_QWORD *)this + 2) = v8;
    if (v10)
    {
      operator delete(v10);
      v8 = *v3;
    }
    *((_QWORD *)this + 1) = v9;
    if (v9 >= v8)
    {
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v9[-*(_QWORD *)this] >> 2);
      if (v23 + 1 > 0xCCCCCCCCCCCCCCCLL)
        goto LABEL_43;
      v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v8[-*(_QWORD *)this] >> 2);
      v25 = 2 * v24;
      if (2 * v24 <= v23 + 1)
        v25 = v23 + 1;
      if (v24 >= 0x666666666666666)
        v26 = 0xCCCCCCCCCCCCCCCLL;
      else
        v26 = v25;
      if (v26)
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SDPPreconditionRow>>((uint64_t)v3, v26);
      else
        v27 = 0;
      v28 = &v27[20 * v23];
      v29 = &v27[20 * v26];
      *(_DWORD *)v28 = 0;
      *(_OWORD *)(v28 + 4) = xmmword_1BF2A8D00;
      v13 = v28 + 20;
      v31 = *(char **)this;
      v30 = (char *)*((_QWORD *)this + 1);
      if (v30 != *(char **)this)
      {
        do
        {
          v32 = *(_OWORD *)(v30 - 20);
          *((_DWORD *)v28 - 1) = *((_DWORD *)v30 - 1);
          *(_OWORD *)(v28 - 20) = v32;
          v28 -= 20;
          v30 -= 20;
        }
        while (v30 != v31);
        v30 = *(char **)this;
      }
      *(_QWORD *)this = v28;
      *((_QWORD *)this + 1) = v13;
      *((_QWORD *)this + 2) = v29;
      if (v30)
        operator delete(v30);
    }
    else
    {
      *((_DWORD *)v5 + 10) = 0;
      *(_OWORD *)(v5 + 44) = xmmword_1BF2A8D00;
      v13 = v5 + 60;
    }
    *((_QWORD *)this + 1) = v13;
    v33 = *((_QWORD *)this + 2);
    if ((unint64_t)v13 < v33)
    {
      *(_DWORD *)v13 = 0;
      *(_OWORD *)(v13 + 4) = xmmword_1BF2A8D10;
      v19 = v13 + 20;
      goto LABEL_42;
    }
    v34 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v13[-*(_QWORD *)this] >> 2);
    if (v34 + 1 <= 0xCCCCCCCCCCCCCCCLL)
    {
      v35 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v33 - *(_QWORD *)this) >> 2);
      v36 = 2 * v35;
      if (2 * v35 <= v34 + 1)
        v36 = v34 + 1;
      if (v35 >= 0x666666666666666)
        v37 = 0xCCCCCCCCCCCCCCCLL;
      else
        v37 = v36;
      if (v37)
        v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SDPPreconditionRow>>((uint64_t)v3, v37);
      else
        v38 = 0;
      v16 = &v38[20 * v34];
      v18 = &v38[20 * v37];
      *(_DWORD *)v16 = 0;
      *(_OWORD *)(v16 + 4) = xmmword_1BF2A8D10;
      v19 = v16 + 20;
      v39 = *(char **)this;
      v20 = (char *)*((_QWORD *)this + 1);
      if (v20 == *(char **)this)
        goto LABEL_40;
      do
      {
        v40 = *(_OWORD *)(v20 - 20);
        *((_DWORD *)v16 - 1) = *((_DWORD *)v20 - 1);
        *(_OWORD *)(v16 - 20) = v40;
        v16 -= 20;
        v20 -= 20;
      }
      while (v20 != v39);
      goto LABEL_39;
    }
LABEL_43:
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  v14 = (char *)operator new(0x14uLL);
  *(_DWORD *)v14 = 0;
  *(_OWORD *)(v14 + 4) = xmmword_1BF2A8CC0;
  *((_QWORD *)this + 1) = v14 + 20;
  *((_QWORD *)this + 2) = v14 + 20;
  *(_QWORD *)this = v14;
  v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SDPPreconditionRow>>((uint64_t)v3, 2uLL);
  *((_DWORD *)v15 + 5) = 0;
  v16 = v15 + 20;
  v18 = &v15[20 * v17];
  *(_OWORD *)(v15 + 24) = xmmword_1BF2A8CD0;
  v19 = v15 + 40;
  v21 = *(char **)this;
  v20 = (char *)*((_QWORD *)this + 1);
  if (v20 == *(char **)this)
    goto LABEL_40;
  do
  {
    v22 = *(_OWORD *)(v20 - 20);
    *((_DWORD *)v16 - 1) = *((_DWORD *)v20 - 1);
    *(_OWORD *)(v16 - 20) = v22;
    v16 -= 20;
    v20 -= 20;
  }
  while (v20 != v21);
LABEL_39:
  v20 = *(char **)this;
LABEL_40:
  *(_QWORD *)this = v16;
  *((_QWORD *)this + 1) = v19;
  *((_QWORD *)this + 2) = v18;
  if (v20)
    operator delete(v20);
LABEL_42:
  *((_QWORD *)this + 1) = v19;
}

void sub_1BF0D52AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void SDPPreconditionTable::SDPPreconditionTable(SDPPreconditionTable *this, const SDPPreconditionTable *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (this != a2)
    std::vector<SDPPreconditionRow>::__assign_with_size[abi:ne180100]<SDPPreconditionRow*,SDPPreconditionRow*>((char *)this, *(char **)a2, *((_QWORD *)a2 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 2));
}

void sub_1BF0D531C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPPreconditionTable::rowsAreSatisfied(_QWORD *a1, int a2)
{
  _DWORD *v3;
  _DWORD *v4;
  char v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;
  void *v16[2];
  char v17;

  v3 = (_DWORD *)a1[1];
  if ((_DWORD *)*a1 != v3)
  {
    v4 = (_DWORD *)(*a1 + 16);
    v5 = 1;
    while (1)
    {
      v6 = v4 - 4;
      if (*(v4 - 2) == a2)
      {
        if (*v4 == 3)
        {
          if (!*(v4 - 3))
          {
            v5 = 0;
            return v5 & 1;
          }
          v5 &= *((_BYTE *)v4 - 16);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v16, "sdp.precon");
          std::string::basic_string[abi:ne180100]<0>(v14, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v7 = ImsLogger::debug(ims::_logger, (uint64_t)v16, (uint64_t)v14);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 32))(v7, __p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" row is not mandatory", 21);
          *(_BYTE *)(v7 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v7 + 17) = 0;
          if (v13 < 0)
            operator delete(__p[0]);
          if (v15 < 0)
            operator delete(v14[0]);
          if (v17 < 0)
            operator delete(v16[0]);
        }
      }
      v4 += 5;
      if (v6 + 5 == v3)
        goto LABEL_16;
    }
  }
  v5 = 1;
LABEL_16:
  std::string::basic_string[abi:ne180100]<0>(v16, "sdp.precon");
  std::string::basic_string[abi:ne180100]<0>(v14, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)v16, (uint64_t)v14);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 32))(v8, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" rows of precondition table are ", 32);
  *(_BYTE *)(v8 + 17) = 0;
  if ((v5 & 1) != 0)
    v9 = "";
  else
    v9 = "not ";
  if ((v5 & 1) != 0)
    v10 = 0;
  else
    v10 = 4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)v9, v10);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"satisfied", 9);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v13 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  return v5 & 1;
}

void sub_1BF0D55E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t SDPPreconditionTable::processPrecondition(void **a1, int *a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  char *v8;
  char *v9;
  char v10;
  BOOL v11;
  uint64_t v13;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  void *__p[2];
  char v30;
  void *v31[2];
  char v32;

  v4 = *a2;
  v3 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = (char *)*a1;
  v9 = (char *)a1[1];
  if (*a1 == v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      if (*((_DWORD *)v8 + 1) == v3)
      {
        v11 = *((_DWORD *)v8 + 3) == v7 || v7 == 3;
        if (v11 && *((_DWORD *)v8 + 2) == v6)
        {
          if (v4)
          {
            if (v4 == 2)
            {
              v8[1] = 1;
            }
            else if (v4 == 1)
            {
              if (*((_DWORD *)v8 + 4) < v5)
              {
                *((_DWORD *)v8 + 4) = v5;
                v10 = 1;
              }
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v31, "sdp.precon");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v13 = ImsLogger::warn(ims::_logger, (uint64_t)v31, (uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Received an unknown precondition type, not sure what to do", 58);
              *(_BYTE *)(v13 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v13 + 17) = 0;
              if (v30 < 0)
                operator delete(__p[0]);
              if (v32 < 0)
                operator delete(v31[0]);
            }
          }
          else
          {
            v10 = 1;
            *v8 = 1;
          }
        }
      }
      v8 += 20;
    }
    while (v8 != v9);
  }
  if ((v10 & 1) == 0 && !v3 && v4 == 1)
  {
    v15 = (char *)a1[2];
    v16 = (char *)a1[1];
    if (v16 >= v15)
    {
      v18 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - (_BYTE *)*a1) >> 2);
      v19 = v18 + 1;
      if (v18 + 1 > 0xCCCCCCCCCCCCCCCLL)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v20 = 0xCCCCCCCCCCCCCCCDLL * ((v15 - (_BYTE *)*a1) >> 2);
      if (2 * v20 > v19)
        v19 = 2 * v20;
      if (v20 >= 0x666666666666666)
        v21 = 0xCCCCCCCCCCCCCCCLL;
      else
        v21 = v19;
      if (v21)
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SDPPreconditionRow>>((uint64_t)(a1 + 2), v21);
      else
        v22 = 0;
      v23 = &v22[20 * v18];
      v24 = &v22[20 * v21];
      *(_QWORD *)v23 = 0;
      *((_DWORD *)v23 + 2) = v6;
      *((_DWORD *)v23 + 3) = v7;
      *((_DWORD *)v23 + 4) = v5;
      v17 = v23 + 20;
      v26 = (char *)*a1;
      v25 = (char *)a1[1];
      if (v25 != *a1)
      {
        do
        {
          v27 = *(_OWORD *)(v25 - 20);
          *((_DWORD *)v23 - 1) = *((_DWORD *)v25 - 1);
          *(_OWORD *)(v23 - 20) = v27;
          v23 -= 20;
          v25 -= 20;
        }
        while (v25 != v26);
        v25 = (char *)*a1;
      }
      *a1 = v23;
      a1[1] = v17;
      a1[2] = v24;
      if (v25)
        operator delete(v25);
    }
    else
    {
      *(_QWORD *)v16 = 0;
      *((_DWORD *)v16 + 2) = v6;
      *((_DWORD *)v16 + 3) = v7;
      v17 = v16 + 20;
      *((_DWORD *)v16 + 4) = v5;
    }
    a1[1] = v17;
    v10 = 1;
  }
  return v10 & 1;
}

void sub_1BF0D58D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operator<<(uint64_t a1, unsigned __int8 **this)
{
  uint64_t i;
  _QWORD *v4;
  _QWORD *v5;
  _BYTE v7[21];
  __int16 v8;
  char v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  SDPPreconditionTable::getPreconditions(this, &v10);
  for (i = v11; (unsigned __int8 **)i != &v10; i = *(_QWORD *)(i + 8))
  {
    v9 = 0;
    v8 = 0;
    *(_OWORD *)v7 = *(_OWORD *)(i + 16);
    *(_QWORD *)&v7[13] = *(_QWORD *)(i + 29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 8), (uint64_t)"\r\n", 2);
    *(_BYTE *)(a1 + 17) = 0;
    v4 = *(_QWORD **)(a1 + 8);
    v13 = 97;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v13, 1);
    *(_BYTE *)(a1 + 17) = 0;
    v5 = *(_QWORD **)(a1 + 8);
    v13 = 61;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v13, 1);
    *(_BYTE *)(a1 + 17) = 0;
    operator<<(a1, (unsigned int *)v7);
  }
  std::__list_imp<unsigned long long>::clear(&v10);
  return a1;
}

void sub_1BF0D59FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::__list_imp<unsigned long long>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 **SDPPreconditionTable::getPreconditions@<X0>(unsigned __int8 **this@<X0>, unsigned __int8 **a2@<X8>)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;

  *a2 = (unsigned __int8 *)a2;
  a2[1] = (unsigned __int8 *)a2;
  a2[2] = 0;
  v3 = *this;
  v19 = this[1];
  if (*this != v19)
  {
    v20 = 0;
    v4 = (unsigned __int8 *)a2;
    do
    {
      v5 = *((_DWORD *)v3 + 4);
      if (v5 >= 1)
      {
        v6 = *v3;
        v18 = v3[1];
        v7 = *((_DWORD *)v3 + 1);
        v8 = *((_DWORD *)v3 + 2);
        v9 = *((_DWORD *)v3 + 3);
        v10 = v7 != 0;
        this = (unsigned __int8 **)operator new(0x28uLL);
        v11 = (unsigned __int8 *)this;
        *((_DWORD *)this + 4) = 1;
        *((_DWORD *)this + 5) = v7;
        *((_DWORD *)this + 6) = v5;
        *((_DWORD *)this + 7) = v8;
        *((_DWORD *)this + 8) = v9;
        *((_BYTE *)this + 36) = v7 != 0;
        *this = v4;
        this[1] = (unsigned __int8 *)a2;
        *((_QWORD *)v4 + 1) = this;
        *a2 = (unsigned __int8 *)this;
        a2[2] = v20 + 1;
        if (v5 == 4)
        {
          ++v20;
          v4 = (unsigned __int8 *)this;
        }
        else
        {
          this = (unsigned __int8 **)operator new(0x28uLL);
          v4 = (unsigned __int8 *)this;
          *((_DWORD *)this + 4) = 0;
          *((_DWORD *)this + 5) = v7;
          *((_DWORD *)this + 6) = 0;
          *((_DWORD *)this + 7) = v8;
          *((_DWORD *)this + 8) = (v6 << 31 >> 31) & v9;
          *((_BYTE *)this + 36) = v10;
          *this = v11;
          this[1] = (unsigned __int8 *)a2;
          *((_QWORD *)v11 + 1) = this;
          *a2 = (unsigned __int8 *)this;
          a2[2] = v20 + 2;
          if ((v18 & 1) != 0)
          {
            this = (unsigned __int8 **)operator new(0x28uLL);
            *((_DWORD *)this + 4) = 2;
            *((_DWORD *)this + 5) = v7;
            *((_DWORD *)this + 6) = v5;
            *((_DWORD *)this + 7) = v8;
            *((_DWORD *)this + 8) = v9;
            *((_BYTE *)this + 36) = v10;
            *this = v4;
            this[1] = (unsigned __int8 *)a2;
            *((_QWORD *)v4 + 1) = this;
            *a2 = (unsigned __int8 *)this;
            v4 = (unsigned __int8 *)this;
            v20 += 3;
            a2[2] = v20;
          }
          else
          {
            v20 += 2;
          }
        }
      }
      v3 += 20;
    }
    while (v3 != v19);
    v12 = a2[1];
    if (v12 != (unsigned __int8 *)a2)
    {
LABEL_11:
      this = (unsigned __int8 **)*((_QWORD *)v12 + 1);
      if (this == a2)
        return this;
      while (*((_DWORD *)v12 + 4) == *((_DWORD *)this + 4)
           && *((_DWORD *)v12 + 5) == *((_DWORD *)this + 5)
           && *((_DWORD *)v12 + 6) == *((_DWORD *)this + 6)
           && *((_DWORD *)v12 + 7) == *((_DWORD *)this + 7))
      {
        v13 = *((_DWORD *)v12 + 8);
        if (v13 != *((_DWORD *)this + 8))
        {
          if (v13 > 3)
            v16 = 0;
          else
            v16 = dword_1BF2A8D20[v13];
          v17 = *((_DWORD *)this + 8);
          if (v16 == v17)
          {
            *((_DWORD *)v12 + 8) = 3;
          }
          else
          {
            if (v13)
            {
              if (v17)
                break;
            }
            else
            {
              v13 = *((_DWORD *)this + 8);
            }
            *((_DWORD *)v12 + 8) = v13;
          }
        }
        v14 = *this;
        v15 = this[1];
        *((_QWORD *)v14 + 1) = v15;
        *(_QWORD *)this[1] = v14;
        --a2[2];
        operator delete(this);
        this = (unsigned __int8 **)v15;
LABEL_29:
        if (this == a2)
        {
          v12 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
          if (v12 == (unsigned __int8 *)a2)
            return this;
          goto LABEL_11;
        }
      }
      this = (unsigned __int8 **)this[1];
      goto LABEL_29;
    }
  }
  return this;
}

void sub_1BF0D5C74(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<unsigned long long>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SDPPreconditionRow>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(20 * a2);
}

char *std::vector<SDPPreconditionRow>::__assign_with_size[abi:ne180100]<SDPPreconditionRow*,SDPPreconditionRow*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *(_QWORD *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xCCCCCCCCCCCCCCCLL)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x666666666666666)
      v12 = 0xCCCCCCCCCCCCCCCLL;
    else
      v12 = v11;
    result = std::vector<SDPPreconditionRow>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v15 - v9) >> 2) >= a4)
    goto LABEL_16;
  v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *std::vector<SDPPreconditionRow>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xCCCCCCCCCCCCCCDLL)
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SDPPreconditionRow>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[20 * v4];
  return result;
}

const char **std::__find_impl[abi:ne180100]<char const* const*,char const* const*,std::string,std::__identity>(const char **a1, const char **a2, const void **a3)
{
  const char **v3;
  char v5;
  size_t v6;
  const void *v7;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)a3 + 23);
    else
      v6 = (size_t)a3[1];
    if (v5 >= 0)
      v7 = a3;
    else
      v7 = *a3;
    while (v6 != strlen(*v3) || memcmp(v7, *v3, v6))
    {
      if (++v3 == a2)
        return a2;
    }
  }
  return v3;
}

void SipReplacesHeader::~SipReplacesHeader(void **this)
{
  *this = off_1E78C5CF8;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  *this = off_1E78E5828;
  this[8] = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
}

{
  *this = off_1E78C5CF8;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  *this = off_1E78E5828;
  this[8] = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C3B87100);
}

SipStringParameterHeader *SipReplacesHeader::clone(SipReplacesHeader *this)
{
  SipStringParameterHeader *v2;

  v2 = (SipStringParameterHeader *)operator new();
  SipStringParameterHeader::SipStringParameterHeader(v2, this);
  *(_QWORD *)v2 = off_1E78DD2B0;
  *((_DWORD *)v2 + 32) = 1;
  return v2;
}

void sub_1BF0D6014(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C4070BFB248);
  _Unwind_Resume(a1);
}

uint64_t ImsResultSet::fromString(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const char *v10;
  int v11;
  const char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  v3 = (_QWORD *)(a1 + 16);
  v4 = (uint64_t **)(a1 + 8);
  std::__tree<unsigned int>::destroy(a1 + 8, *(_QWORD **)(a1 + 16));
  *(v3 - 1) = v3;
  *v3 = 0;
  v3[1] = 0;
  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    ims::tokenize((std::string *)a2, &v14, 0x2Cu);
    v6 = v14;
    v7 = v15;
    while (v6 != v7)
    {
      LODWORD(v17) = 0;
      v8 = *(unsigned __int8 *)(v6 + 23);
      v9 = (char)v8;
      if ((v8 & 0x80u) != 0)
        v8 = *(_QWORD *)(v6 + 8);
      if (v8 != 1)
        goto LABEL_13;
      v10 = *(const char **)v6;
      if (v9 >= 0)
        v10 = (const char *)v6;
      if (*v10 == 42)
      {
        v11 = -1;
      }
      else
      {
LABEL_13:
        v12 = (const char *)v6;
        if (v9 < 0)
          v12 = *(const char **)v6;
        v11 = strtoul(v12, 0, 10);
      }
      LODWORD(v17) = v11;
      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v4, (unsigned int *)&v17, &v17);
      v6 += 24;
    }
    v17 = (void **)&v14;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
  }
  return 1;
}

void sub_1BF0D6144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

BOOL ImsResultSet::containsResult(ImsResultSet *this, unsigned int a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unsigned int v8;
  BOOL v9;
  char **v10;
  int v11;
  BOOL v12;
  char **v13;

  v4 = (char *)*((_QWORD *)this + 2);
  v2 = (char *)this + 16;
  v3 = v4;
  v5 = v2;
  if (!v4)
    return v5 != v2;
  v6 = v2;
  v7 = v3;
  do
  {
    v8 = *((_DWORD *)v7 + 7);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = (char **)v7;
    else
      v10 = (char **)(v7 + 8);
    if (v9)
      v6 = v7;
    v7 = *v10;
  }
  while (*v10);
  if (v6 == v2 || *((_DWORD *)v6 + 7) > a2)
  {
    do
    {
      v11 = *((_DWORD *)v3 + 7);
      v12 = v11 == -1;
      if (v11 == -1)
        v13 = (char **)v3;
      else
        v13 = (char **)(v3 + 8);
      if (v12)
        v5 = v3;
      v3 = *v13;
    }
    while (*v13);
    return v5 != v2;
  }
  return 1;
}

ImsOutStream *ImsResultSet::log(ImsResultSet *this, ImsOutStream *a2)
{
  char *v4;
  char *v5;
  char v6;
  char *v7;
  char *v8;
  BOOL v9;
  void *v11[2];
  char v12;
  void *__p[2];
  char v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  std::string::basic_string[abi:ne180100]<0>(__p, ",");
  v4 = (char *)*((_QWORD *)this + 1);
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v15, 1);
  v5 = (char *)this + 16;
  if (v4 != v5)
  {
    v6 = 1;
    do
    {
      if ((v6 & 1) == 0)
        (*(void (**)(__int128 *, void **))(v15 + 32))(&v15, __p);
      std::ostream::operator<<();
      BYTE1(v16) = 0;
      v7 = (char *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v6 = 0;
      v4 = v8;
    }
    while (v8 != v5);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v16 + 1) + 8, v11);
  *(_QWORD *)&v15 = &off_1E78D7A10;
  if ((_BYTE)v16 && *((_QWORD *)&v15 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v15 + 1) + 8))(*((_QWORD *)&v15 + 1));
  if (v14 < 0)
    operator delete(__p[0]);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 32))(a2, v11);
  if (v12 < 0)
    operator delete(v11[0]);
  return a2;
}

void sub_1BF0D631C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ImsResultSet::operator==(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  int v6;
  _BOOL8 result;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;

  if (a1[3] != *(_QWORD *)(a2 + 24))
    return 0;
  v2 = (_QWORD *)a1[1];
  v3 = a1 + 2;
  if (v2 == a1 + 2)
    return 1;
  v4 = *(_QWORD **)(a2 + 8);
  do
  {
    v5 = *((_DWORD *)v2 + 7);
    v6 = *((_DWORD *)v4 + 7);
    result = v5 == v6;
    if (v5 != v6)
      break;
    v8 = (_QWORD *)v2[1];
    v9 = v2;
    if (v8)
    {
      do
      {
        v2 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v2 = (_QWORD *)v9[2];
        v10 = *v2 == (_QWORD)v9;
        v9 = v2;
      }
      while (!v10);
    }
    v11 = (_QWORD *)v4[1];
    if (v11)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        v12 = (_QWORD *)v4[2];
        v10 = *v12 == (_QWORD)v4;
        v4 = v12;
      }
      while (!v10);
    }
    v4 = v12;
  }
  while (v2 != v3);
  return result;
}

void ImsResultSet::~ImsResultSet(ImsResultSet *this)
{
  *(_QWORD *)this = &off_1E78DD338;
  std::__tree<unsigned int>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

{
  *(_QWORD *)this = &off_1E78DD338;
  std::__tree<unsigned int>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
  JUMPOUT(0x1C3B87100);
}

void ImsResultSet::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "ImsResultSet");
}

BOOL SipPLastAccessNetworkInfoHeader::setAccessNetworkInfo(SipPLastAccessNetworkInfoHeader *this, std::string *a2, uint64_t a3)
{
  _BOOL8 v6;
  _BOOL8 v7;
  char *v8;
  void *__p[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_47);
  v6 = SipPAccessNetworkInfoHeader::setAccessNetworkInfo((uint64_t)this, a2, (uint64_t)__p, 0);
  v7 = v6;
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if (!v7)
      return v7;
    goto LABEL_3;
  }
  if (v6)
  {
LABEL_3:
    *((_QWORD *)this + 17) = a2[2].__r_.__value_.__l.__size_;
    *((_DWORD *)this + 36) = 0;
    *((_DWORD *)this + 52) = 0;
    gmtime_r((const time_t *)this + 17, (tm *)((char *)this + 152));
    *((_QWORD *)this + 27) = a3;
    v8 = (char *)this + 216;
    *((_DWORD *)v8 + 2) = 0;
    *((_DWORD *)v8 + 18) = 0;
    gmtime_r((const time_t *)v8, (tm *)(v8 + 16));
  }
  return v7;
}

void sub_1BF0D656C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipPLastAccessNetworkInfoHeader::encode(SipPLastAccessNetworkInfoHeader *this, ImsOutStream *a2, int a3)
{
  ImsInternetDateTime *v5;
  ImsInternetDateTime *v6;
  uint64_t v7;
  void *__p;
  uint64_t v9;
  uint64_t v10;

  SipHeader::encode(this, a2, a3);
  SipParameterMap::toStream((SipPLastAccessNetworkInfoHeader *)((char *)this + 64), a2, 0, 0, 0, 0);
  v5 = (SipPLastAccessNetworkInfoHeader *)((char *)this + 216);
  if (*((_QWORD *)this + 27))
  {
    v7 = *((_QWORD *)this + 17);
    v6 = (SipPLastAccessNetworkInfoHeader *)((char *)this + 136);
    if (v7)
    {
      __p = 0;
      v9 = 0;
      v10 = 0;
      ImsInternetDateTime::toString(v6, &__p);
      ims::addPercentEscapes((uint64_t)&__p, 0, 0);
      ims::addQuotes((uint64_t)&__p, 0);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)";", 1);
      *((_BYTE *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 32))(a2, &__p);
      if (SHIBYTE(v10) < 0)
        operator delete(__p);
    }
    __p = 0;
    v9 = 0;
    v10 = 0;
    ImsInternetDateTime::toString(v5, &__p);
    ims::addPercentEscapes((uint64_t)&__p, 0, 0);
    ims::addQuotes((uint64_t)&__p, 0);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)";", 1);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 32))(a2, &__p);
    if (SHIBYTE(v10) < 0)
      operator delete(__p);
  }
}

void sub_1BF0D66C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipPLastAccessNetworkInfoHeader::decode(uint64_t a1, std::string *__str)
{
  std::string *v2;
  int v4;
  BOOL v5;
  std::string *v6;
  std::string::size_type size;
  char *v8;
  int v9;
  std::string *v10;
  uint64_t v11;
  std::string::size_type v12;
  std::string *p_stra;
  std::string::size_type v14;
  std::string::size_type v15;
  int v16;
  std::string::size_type v17;
  uint64_t v18;
  uint64_t v19;
  std::string v21[3];
  void *__p[2];
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  std::string v29;
  std::string __stra;

  v2 = __str;
  v4 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  v5 = v4 < 0;
  if (v4 >= 0)
    v6 = __str;
  else
    v6 = (std::string *)__str->__r_.__value_.__r.__words[0];
  if (v5)
    size = __str->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (size)
  {
    v8 = (char *)&v6[-1].__r_.__value_.__r.__words[2] + 7;
    while (size)
    {
      v9 = v8[size--];
      if (v9 == 59)
        goto LABEL_13;
    }
  }
  size = -1;
LABEL_13:
  memset(&__stra, 0, sizeof(__stra));
  std::string::basic_string(&__stra, __str, 0, size, (std::allocator<char> *)&v24);
  memset(&v29, 0, sizeof(v29));
  v10 = std::string::basic_string(&v29, v2, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v24);
  ims::chomp(v10, "\r\n\t ", 3);
  ims::removeQuotes((uint64_t)&v29);
  ims::removePercentEscapes((uint64_t)&v29);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  ImsInternetDateTime::fromString(&v29, a1 + 216, (uint64_t)&v24);
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v24 + 1) + 24))(*((_QWORD *)&v24 + 1), v25))
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "sip.parse");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_47);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Unable to parse P-Last-Access-Network-Info header reg timestamp: ", 65);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(__int128 *, uint64_t))(v24 + 16))(&v24, v11);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (v23 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v21[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21[0].__r_.__value_.__l.__data_);
  }
  else
  {
    v12 = HIBYTE(__stra.__r_.__value_.__r.__words[2]);
    p_stra = &__stra;
    if ((__stra.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v12 = __stra.__r_.__value_.__l.__size_;
      p_stra = (std::string *)__stra.__r_.__value_.__r.__words[0];
    }
    if (v12)
    {
      v14 = v12 + 1;
      while (1)
      {
        v15 = v14 - 1;
        if (v14 == 1)
          break;
        v16 = p_stra->__r_.__value_.__s.__data_[v14-- - 2];
        if (v16 == 59)
        {
          if (v15)
          {
            v17 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
            if ((v17 & 0x80u) != 0)
              v17 = v2->__r_.__value_.__l.__size_;
            if (v17 != v15)
            {
              std::string::basic_string(v21, &__stra, v15, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)__p);
              if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v29.__r_.__value_.__l.__data_);
              v29 = v21[0];
              ims::chomp(&v29, "\r\n\t ", 3);
              ims::removeQuotes((uint64_t)&v29);
              ims::removePercentEscapes((uint64_t)&v29);
              ImsInternetDateTime::fromString(&v29, a1 + 136, (uint64_t)v21);
              ImsResult::operator=((uint64_t)&v24, (uint64_t)v21);
              ImsResult::~ImsResult((ImsResult *)v21);
              if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v24 + 1) + 24))(*((_QWORD *)&v24 + 1), v25))
              {
                std::string::basic_string[abi:ne180100]<0>(v21, "sip.parse");
                std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_47);
                pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
                v18 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"Unable to parse P-Last-Access-Network-Info header timestamp: ", 61);
                *(_BYTE *)(v18 + 17) = 0;
                (*(void (**)(__int128 *, uint64_t))(v24 + 16))(&v24, v18);
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(_BYTE *)(v18 + 17) = 0;
                if (v23 < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v21[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v21[0].__r_.__value_.__l.__data_);
              }
              else
              {
                std::string::basic_string(v21, &__stra, 0, v15 - 1, (std::allocator<char> *)__p);
                if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__stra.__r_.__value_.__l.__data_);
                __stra = v21[0];
              }
            }
          }
          break;
        }
      }
    }
    v2 = &__stra;
  }
  v19 = SipParameterHeader::decode(a1, v2);
  ImsResult::~ImsResult((ImsResult *)&v24);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  return v19;
}

void sub_1BF0D6AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;

  ImsResult::~ImsResult((ImsResult *)&a27);
  if (*(char *)(v27 - 73) < 0)
    operator delete(*(void **)(v27 - 96));
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  _Unwind_Resume(a1);
}

void SipPLastAccessNetworkInfoHeader::~SipPLastAccessNetworkInfoHeader(void **this)
{
  *this = off_1E78C5CF8;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  *this = off_1E78E5828;
  this[8] = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
}

{
  *this = off_1E78C5CF8;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  *this = off_1E78E5828;
  this[8] = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipPLastAccessNetworkInfoHeader::clone(SipPLastAccessNetworkInfoHeader *this)
{
  uint64_t v2;

  v2 = operator new();
  SipStringParameterHeader::SipStringParameterHeader((SipStringParameterHeader *)v2, this);
  *(_DWORD *)(v2 + 128) = 2;
  *(_QWORD *)v2 = off_1E78DD380;
  *(_QWORD *)(v2 + 136) = 0;
  *(_DWORD *)(v2 + 144) = 0;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 196) = 0u;
  *(_QWORD *)(v2 + 216) = 0;
  *(_DWORD *)(v2 + 224) = 0;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 276) = 0u;
  return v2;
}

void sub_1BF0D6CD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C4032491B5CLL);
  _Unwind_Resume(a1);
}

ImsOutStream *SipSecurityAgreementConfig::log(SipSecurityAgreementConfig *this, ImsOutStream *a2)
{
  _QWORD *v4;
  std::string __p;
  char v7;

  LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 8));
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  v4 = (_QWORD *)*((_QWORD *)a2 + 1);
  v7 = 59;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v7, 1);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(char *, ImsOutStream *))(*((_QWORD *)this + 4) + 16))((char *)this + 32, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a2;
}

void sub_1BF0D6D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipTransportLayerConfig::initializeFromPrefs(SipTransportLayerConfig *this, const ImsPrefs *a2)
{
  SipTransportLayerConfig *v3;
  void **MaxUdpMessageSizeKey;
  void *v5;
  ImsPrefs *v6;
  void **ForceTcpKey;
  void *v8;
  unint64_t v9;
  void **ForceTlsKey;
  void *v11;
  unint64_t v12;
  void **TLSIdlePingIntervalSecondsKey;
  void *v14;
  ImsPrefs *v15;
  void **TCPIdlePingIntervalSecondsKey;
  void *v17;
  ImsPrefs *v18;
  void **CRLFMinimumPingIntervalSecondsKey;
  void *v20;
  ImsPrefs *v21;
  void **CRLFIdlePingThresholdCapSecondsKey;
  void *v23;
  ImsPrefs *v24;
  void **UseCrlfIntervalFromRegistrationKeepKey;
  void *v26;
  unint64_t v27;
  void **TLSKeepAliveIntervalSecondsKey;
  void *v29;
  ImsPrefs *v30;
  void **PCSCFDomainNameKey;
  ImsPrefs *v32;
  void **v33;
  void **AllowResponsesOverDifferentTransportKey;
  void *v35;
  unint64_t v36;
  void **TcpIdleTimeoutSecondsKey;
  void *v38;
  ImsPrefs *v39;
  void **ShutdownWaitTimeSecondsKey;
  void *v41;
  ImsPrefs *v42;
  void **UseIPSecKey;
  void *v44;
  unint64_t v45;
  void **EnableLastAccessNetworkInfoKey;
  void *v47;
  unint64_t v48;
  void **EnableCellularNetworkInfoKey;
  void *v50;
  unint64_t v51;
  void **DefaultRemoteSipPortKey;
  void *v53;
  ImsPrefs *v54;
  void **DefaultLocalSipPortKey;
  void *v56;
  ImsPrefs *v57;
  void **UseEphemeralSipSourcePortForTcpKey;
  void *v59;
  unint64_t v60;
  void **MaxTransportErrorsKey;
  void *v62;
  ImsPrefs *v63;
  void **FatalTransportErrorsKey;
  ImsPrefs *v65;
  void **SecurityAgreementOptionsKey;
  uint64_t v67;
  ImsPrefs *v68;
  void *SecurityAgreementAlgsKey;
  ImsPrefs *v70;
  void *SecurityAgreementEalgsKey;
  std::string::size_type i;
  std::string::size_type size;
  std::string::size_type v74;
  std::string::size_type j;
  _BYTE *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  std::string *v90;
  std::string::size_type v91;
  _QWORD *v92;
  __guard *v93;
  uint64_t v94;
  _QWORD *v95;
  const std::string *v96;
  std::string::size_type v97;
  __int128 *v98;
  char *v99;
  std::string::size_type v100;
  std::string::size_type v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  char *v108;
  std::string::size_type v109;
  __int128 *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  SipTransportLayerConfig *v118;
  uint64_t k;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  ImsPrefs *v125;
  void **TransportInitTimeoutSecondsKey;
  void *v127;
  ImsPrefs *v128;
  void **DisableAccessNetworkInfoForAckAndCancelKey;
  void *v130;
  unint64_t v131;
  void **AddAccessNetworkInfoToInsecureMessagesKey;
  void *v133;
  unint64_t v134;
  void **EnableRportKey;
  void *v136;
  unint64_t v137;
  void **ResetConnectionsWhenClosedByPeerKey;
  void *v139;
  unint64_t v140;
  void **RequireExplicitPortsForEmergencyRoutesKey;
  void *v142;
  unint64_t v143;
  void **IPSecSegmentOffsetKey;
  void *v145;
  ImsPrefs *v146;
  void **DeferIncomingMessagesUntilWakeKey;
  void *v148;
  unint64_t v149;
  void **SystemWakeWaitTimeoutMillisecondsKey;
  void *v151;
  ImsPrefs *v152;
  void **NetworkInterfaceKey;
  ImsPrefs *v154;
  void *ServiceClassKey;
  const void *v156;
  uint64_t v157;
  int *v158;
  void *v159;
  const void *v160;
  uint64_t v161;
  int *v162;
  void *v163;
  const void *v164;
  uint64_t v165;
  const ImsPrefs *v166;
  uint64_t v167;
  unint64_t v168;
  SipTransportLayerConfig *v169;
  std::string v170;
  std::string v171;
  void *__p[4];
  __int128 v173;
  __int128 v174;
  void *v175[2];
  __int128 v176;
  __int128 v177;
  _BYTE v178[144];
  uint64_t v179;
  std::string v180;
  std::string v181;
  std::string v182;
  _BYTE __str[32];
  uint64_t v184;

  v3 = this;
  MaxUdpMessageSizeKey = (void **)ImsPrefs::getMaxUdpMessageSizeKey(this);
  v5 = ImsPrefs::prefWithKey(a2, MaxUdpMessageSizeKey);
  if (v5)
    v6 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v5 + 56))(v5);
  else
    v6 = (ImsPrefs *)*((unsigned int *)MaxUdpMessageSizeKey + 15);
  *((_DWORD *)v3 + 124) = (_DWORD)v6;
  ForceTcpKey = (void **)ImsPrefs::getForceTcpKey(v6);
  v8 = ImsPrefs::prefWithKey(a2, ForceTcpKey);
  if (v8)
    v9 = (*(uint64_t (**)(void *))(*(_QWORD *)v8 + 40))(v8);
  else
    v9 = *((_BYTE *)ForceTcpKey + 57) != 0;
  *((_BYTE *)v3 + 439) = v9;
  ForceTlsKey = (void **)ImsPrefs::getForceTlsKey((ImsPrefs *)v9);
  v11 = ImsPrefs::prefWithKey(a2, ForceTlsKey);
  if (v11)
    v12 = (*(uint64_t (**)(void *))(*(_QWORD *)v11 + 40))(v11);
  else
    v12 = *((_BYTE *)ForceTlsKey + 57) != 0;
  *((_BYTE *)v3 + 441) = v12;
  TLSIdlePingIntervalSecondsKey = (void **)ImsPrefs::getTLSIdlePingIntervalSecondsKey((ImsPrefs *)v12);
  v14 = ImsPrefs::prefWithKey(a2, TLSIdlePingIntervalSecondsKey);
  if (v14)
    v15 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v14 + 56))(v14);
  else
    v15 = (ImsPrefs *)*((unsigned int *)TLSIdlePingIntervalSecondsKey + 15);
  *((_DWORD *)v3 + 111) = (_DWORD)v15;
  TCPIdlePingIntervalSecondsKey = (void **)ImsPrefs::getTCPIdlePingIntervalSecondsKey(v15);
  v17 = ImsPrefs::prefWithKey(a2, TCPIdlePingIntervalSecondsKey);
  if (v17)
    v18 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 56))(v17);
  else
    v18 = (ImsPrefs *)*((unsigned int *)TCPIdlePingIntervalSecondsKey + 15);
  *((_DWORD *)v3 + 112) = (_DWORD)v18;
  CRLFMinimumPingIntervalSecondsKey = (void **)ImsPrefs::getCRLFMinimumPingIntervalSecondsKey(v18);
  v20 = ImsPrefs::prefWithKey(a2, CRLFMinimumPingIntervalSecondsKey);
  if (v20)
    v21 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v20 + 56))(v20);
  else
    v21 = (ImsPrefs *)*((unsigned int *)CRLFMinimumPingIntervalSecondsKey + 15);
  *((_DWORD *)v3 + 113) = (_DWORD)v21;
  CRLFIdlePingThresholdCapSecondsKey = (void **)ImsPrefs::getCRLFIdlePingThresholdCapSecondsKey(v21);
  v23 = ImsPrefs::prefWithKey(a2, CRLFIdlePingThresholdCapSecondsKey);
  if (v23)
    v24 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v23 + 56))(v23);
  else
    v24 = (ImsPrefs *)*((unsigned int *)CRLFIdlePingThresholdCapSecondsKey + 15);
  *((_DWORD *)v3 + 114) = (_DWORD)v24;
  UseCrlfIntervalFromRegistrationKeepKey = (void **)ImsPrefs::getUseCrlfIntervalFromRegistrationKeepKey(v24);
  v26 = ImsPrefs::prefWithKey(a2, UseCrlfIntervalFromRegistrationKeepKey);
  if (v26)
    v27 = (*(uint64_t (**)(void *))(*(_QWORD *)v26 + 40))(v26);
  else
    v27 = *((_BYTE *)UseCrlfIntervalFromRegistrationKeepKey + 57) != 0;
  *((_BYTE *)v3 + 442) = v27;
  TLSKeepAliveIntervalSecondsKey = (void **)ImsPrefs::getTLSKeepAliveIntervalSecondsKey((ImsPrefs *)v27);
  v29 = ImsPrefs::prefWithKey(a2, TLSKeepAliveIntervalSecondsKey);
  if (v29)
    v30 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v29 + 56))(v29);
  else
    v30 = (ImsPrefs *)*((unsigned int *)TLSKeepAliveIntervalSecondsKey + 15);
  *((_DWORD *)v3 + 115) = (_DWORD)v30;
  PCSCFDomainNameKey = (void **)ImsPrefs::getPCSCFDomainNameKey(v30);
  v32 = (ImsPrefs *)ImsPrefs::stringValue(a2, PCSCFDomainNameKey);
  v33 = (void **)((char *)v3 + 464);
  if (*((char *)v3 + 487) < 0)
    operator delete(*v33);
  *(_OWORD *)v33 = *(_OWORD *)__p;
  *((void **)v3 + 60) = __p[2];
  AllowResponsesOverDifferentTransportKey = (void **)ImsPrefs::getAllowResponsesOverDifferentTransportKey(v32);
  v35 = ImsPrefs::prefWithKey(a2, AllowResponsesOverDifferentTransportKey);
  if (v35)
    v36 = (*(uint64_t (**)(void *))(*(_QWORD *)v35 + 40))(v35);
  else
    v36 = *((_BYTE *)AllowResponsesOverDifferentTransportKey + 57) != 0;
  *((_BYTE *)v3 + 440) = v36;
  TcpIdleTimeoutSecondsKey = (void **)ImsPrefs::getTcpIdleTimeoutSecondsKey((ImsPrefs *)v36);
  v38 = ImsPrefs::prefWithKey(a2, TcpIdleTimeoutSecondsKey);
  if (v38)
    v39 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v38 + 56))(v38);
  else
    v39 = (ImsPrefs *)*((unsigned int *)TcpIdleTimeoutSecondsKey + 15);
  *((_DWORD *)v3 + 122) = (_DWORD)v39;
  ShutdownWaitTimeSecondsKey = (void **)ImsPrefs::getShutdownWaitTimeSecondsKey(v39);
  v41 = ImsPrefs::prefWithKey(a2, ShutdownWaitTimeSecondsKey);
  if (v41)
    v42 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 56))(v41);
  else
    v42 = (ImsPrefs *)*((unsigned int *)ShutdownWaitTimeSecondsKey + 15);
  *((_DWORD *)v3 + 123) = (_DWORD)v42;
  UseIPSecKey = (void **)ImsPrefs::getUseIPSecKey(v42);
  v44 = ImsPrefs::prefWithKey(a2, UseIPSecKey);
  if (v44)
    v45 = (*(uint64_t (**)(void *))(*(_QWORD *)v44 + 40))(v44);
  else
    v45 = *((_BYTE *)UseIPSecKey + 57) != 0;
  *((_BYTE *)v3 + 438) = v45;
  EnableLastAccessNetworkInfoKey = (void **)ImsPrefs::getEnableLastAccessNetworkInfoKey((ImsPrefs *)v45);
  v47 = ImsPrefs::prefWithKey(a2, EnableLastAccessNetworkInfoKey);
  if (v47)
    v48 = (*(uint64_t (**)(void *))(*(_QWORD *)v47 + 40))(v47);
  else
    v48 = *((_BYTE *)EnableLastAccessNetworkInfoKey + 57) != 0;
  *((_BYTE *)v3 + 529) = v48;
  EnableCellularNetworkInfoKey = (void **)ImsPrefs::getEnableCellularNetworkInfoKey((ImsPrefs *)v48);
  v50 = ImsPrefs::prefWithKey(a2, EnableCellularNetworkInfoKey);
  if (v50)
    v51 = (*(uint64_t (**)(void *))(*(_QWORD *)v50 + 40))(v50);
  else
    v51 = *((_BYTE *)EnableCellularNetworkInfoKey + 57) != 0;
  *((_BYTE *)v3 + 530) = v51;
  DefaultRemoteSipPortKey = (void **)ImsPrefs::getDefaultRemoteSipPortKey((ImsPrefs *)v51);
  v53 = ImsPrefs::prefWithKey(a2, DefaultRemoteSipPortKey);
  if (v53)
    v54 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v53 + 56))(v53);
  else
    v54 = (ImsPrefs *)*((unsigned int *)DefaultRemoteSipPortKey + 15);
  *((_WORD *)v3 + 217) = (_WORD)v54;
  DefaultLocalSipPortKey = (void **)ImsPrefs::getDefaultLocalSipPortKey(v54);
  v56 = ImsPrefs::prefWithKey(a2, DefaultLocalSipPortKey);
  if (v56)
    v57 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v56 + 56))(v56);
  else
    v57 = (ImsPrefs *)*((unsigned int *)DefaultLocalSipPortKey + 15);
  *((_WORD *)v3 + 216) = (_WORD)v57;
  UseEphemeralSipSourcePortForTcpKey = (void **)ImsPrefs::getUseEphemeralSipSourcePortForTcpKey(v57);
  v59 = ImsPrefs::prefWithKey(a2, UseEphemeralSipSourcePortForTcpKey);
  if (v59)
    v60 = (*(uint64_t (**)(void *))(*(_QWORD *)v59 + 40))(v59);
  else
    v60 = *((_BYTE *)UseEphemeralSipSourcePortForTcpKey + 57) != 0;
  *((_BYTE *)v3 + 436) = v60;
  MaxTransportErrorsKey = (void **)ImsPrefs::getMaxTransportErrorsKey((ImsPrefs *)v60);
  v62 = ImsPrefs::prefWithKey(a2, MaxTransportErrorsKey);
  if (v62)
    v63 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v62 + 56))(v62);
  else
    v63 = (ImsPrefs *)*((unsigned int *)MaxTransportErrorsKey + 15);
  *((_DWORD *)v3 + 133) = (_DWORD)v63;
  FatalTransportErrorsKey = (void **)ImsPrefs::getFatalTransportErrorsKey(v63);
  ImsPrefs::stringValue(a2, FatalTransportErrorsKey);
  v65 = (ImsPrefs *)ImsResultSet::fromString((uint64_t)v3 + 536, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  memset(&v171, 0, sizeof(v171));
  SecurityAgreementOptionsKey = (void **)ImsPrefs::getSecurityAgreementOptionsKey(v65);
  ImsPrefs::stringValue(a2, SecurityAgreementOptionsKey);
  v166 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "sip.tport");
  std::string::basic_string[abi:ne180100]<0>(__str, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v67 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)__str);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v67 + 8), (uint64_t)"generating SecurityAgreementOptions", 35);
  *(_BYTE *)(v67 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v67 + 64))(v67, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v67 + 17) = 0;
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  memset(__str, 0, 24);
  std::string::basic_string[abi:ne180100]<0>(__str, "ipsec-3gpp");
  memset(&v182, 0, sizeof(v182));
  v68 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(&v182, "mod=trans;prot=esp");
  memset(&v181, 0, sizeof(v181));
  memset(&v180, 0, sizeof(v180));
  SecurityAgreementAlgsKey = ImsPrefs::getSecurityAgreementAlgsKey(v68);
  v70 = (ImsPrefs *)ImsPrefs::stringArrayValues(a2, (uint64_t)SecurityAgreementAlgsKey, (std::vector<std::string> *)&v181);
  SecurityAgreementEalgsKey = ImsPrefs::getSecurityAgreementEalgsKey(v70);
  ImsPrefs::stringArrayValues(a2, (uint64_t)SecurityAgreementEalgsKey, (std::vector<std::string> *)&v180);
  v169 = v3;
  v179 = 0;
  v177 = 0u;
  memset(v178, 0, sizeof(v178));
  v176 = 0u;
  v174 = 0u;
  *(_OWORD *)v175 = 0u;
  v173 = 0u;
  memset(__p, 0, sizeof(__p));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  size = v181.__r_.__value_.__l.__size_;
  for (i = v181.__r_.__value_.__r.__words[0]; i != size; i += 24)
  {
    v74 = v180.__r_.__value_.__l.__size_;
    for (j = v180.__r_.__value_.__r.__words[0]; j != v74; j += 24)
    {
      if (__str[23] >= 0)
        v76 = __str;
      else
        v76 = *(_BYTE **)__str;
      if (__str[23] >= 0)
        v77 = __str[23];
      else
        v77 = *(_QWORD *)&__str[8];
      v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v76, v77);
      v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)";alg=", 5);
      v80 = *(char *)(i + 23);
      if (v80 >= 0)
        v81 = i;
      else
        v81 = *(_QWORD *)i;
      if (v80 >= 0)
        v82 = *(unsigned __int8 *)(i + 23);
      else
        v82 = *(_QWORD *)(i + 8);
      v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, v81, v82);
      v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)";ealg=", 6);
      v85 = *(char *)(j + 23);
      if (v85 >= 0)
        v86 = j;
      else
        v86 = *(_QWORD *)j;
      if (v85 >= 0)
        v87 = *(unsigned __int8 *)(j + 23);
      else
        v87 = *(_QWORD *)(j + 8);
      v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, v86, v87);
      v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)";", 1);
      if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v90 = &v182;
      else
        v90 = (std::string *)v182.__r_.__value_.__r.__words[0];
      if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v91 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
      else
        v91 = v182.__r_.__value_.__l.__size_;
      v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)v90, v91);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)",", 1);
    }
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[1], &v170);
  __p[0] = *(void **)MEMORY[0x1E0DE4F60];
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  __p[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  if (SHIBYTE(v176) < 0)
    operator delete(v175[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B8707C](v178);
  __p[0] = &v180;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v181;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v182.__r_.__value_.__l.__data_);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v171.__r_.__value_.__l.__data_);
  v171 = v170;
  std::string::basic_string[abi:ne180100]<0>(__p, "sip.tport");
  std::string::basic_string[abi:ne180100]<0>(__str, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v94 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)__str);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v94 + 8), (uint64_t)"configured SecurityAgreementOptions : ", 38);
  *(_BYTE *)(v94 + 17) = 0;
  LoggableString::LoggableString(&v182, &v171);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v94 + 40))(v94, &v182);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v94 + 64))(v94, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v94 + 17) = 0;
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v182.__r_.__value_.__l.__data_);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  memset(&v182, 0, sizeof(v182));
  ims::tokenize(&v171, (uint64_t *)&v182, 0x2Cu);
  v95 = (_QWORD *)((char *)v3 + 504);
  v97 = v182.__r_.__value_.__l.__size_;
  v96 = (const std::string *)v182.__r_.__value_.__r.__words[0];
  if (v182.__r_.__value_.__r.__words[0] != v182.__r_.__value_.__l.__size_)
  {
    v98 = &v173;
    v99 = (char *)&v173 + 8;
    v167 = (uint64_t)v3 + 520;
    do
    {
      v100 = std::string::find(v96, 59, 0);
      if (v100 == -1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "sip.tport");
        std::string::basic_string[abi:ne180100]<0>(__str, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v105 = ImsLogger::error(v93[140], (uint64_t)__p, (uint64_t)__str);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v105 + 8), (uint64_t)"no semicolon in security agreement option ", 42);
        *(_BYTE *)(v105 + 17) = 0;
        LoggableString::LoggableString(&v181, v96);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v105 + 40))(v105, &v181);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v105 + 64))(v105, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v105 + 17) = 0;
        if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v181.__r_.__value_.__l.__data_);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
          goto LABEL_148;
        v106 = __p[0];
      }
      else
      {
        v101 = v100;
        memset(&__p[1], 0, 24);
        __p[0] = off_1E78DD420;
        v174 = 0uLL;
        v175[0] = (void *)256;
        *(_QWORD *)&v173 = &off_1E78B82D8;
        *((_QWORD *)&v173 + 1) = &v174;
        std::string::basic_string((std::string *)__str, v96, 0, v100, (std::allocator<char> *)&v181);
        if (SHIBYTE(__p[3]) < 0)
          operator delete(__p[1]);
        *(_OWORD *)&__p[1] = *(_OWORD *)__str;
        __p[3] = *(void **)&__str[16];
        std::string::basic_string((std::string *)__str, v96, v101 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v181);
        SipParameterMap::fromString((uint64_t)v98, (std::string *)__str, 0, 0);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        if (*((_QWORD *)&v174 + 1))
        {
          v102 = *((_QWORD *)v3 + 64);
          v103 = *((_QWORD *)v3 + 65);
          if (v102 >= v103)
          {
            v108 = v99;
            v109 = v97;
            v110 = v98;
            v111 = 0x8E38E38E38E38E39 * ((uint64_t)(v102 - *v95) >> 3);
            v112 = v111 + 1;
            if (v111 + 1 > 0x38E38E38E38E38ELL)
              std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
            v113 = 0x8E38E38E38E38E39 * ((uint64_t)(v103 - *v95) >> 3);
            if (2 * v113 > v112)
              v112 = 2 * v113;
            if (v113 >= 0x1C71C71C71C71C7)
              v114 = 0x38E38E38E38E38ELL;
            else
              v114 = v112;
            v184 = v167;
            if (v114)
              v115 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipSecurityAgreementConfig>>(v167, v114);
            else
              v115 = 0;
            *(_QWORD *)__str = v115;
            *(_QWORD *)&__str[8] = &v115[72 * v111];
            *(_QWORD *)&__str[16] = *(_QWORD *)&__str[8];
            *(_QWORD *)&__str[24] = &v115[72 * v114];
            std::construct_at[abi:ne180100]<SipSecurityAgreementConfig,SipSecurityAgreementConfig const&,SipSecurityAgreementConfig*>(*(uint64_t *)&__str[8], (uint64_t)__p);
            v116 = 0;
            v117 = *(_QWORD *)&__str[8];
            *(_QWORD *)&__str[16] += 72;
            v118 = v3;
            v121 = (char *)v3 + 504;
            v120 = *((_QWORD *)v3 + 63);
            for (k = *((_QWORD *)v121 + 1);
                  k + v116 != v120;
                  std::construct_at[abi:ne180100]<SipSecurityAgreementConfig,SipSecurityAgreementConfig const&,SipSecurityAgreementConfig*>(v116 + v117, v116 + k))
            {
              v116 -= 72;
            }
            v3 = v118;
            v122 = *((_QWORD *)v118 + 65);
            v168 = *(_QWORD *)&__str[16];
            v123 = *(_OWORD *)&__str[16];
            v124 = *(_OWORD *)v95;
            *((_QWORD *)v118 + 63) = v117 + v116;
            *(_OWORD *)&__str[8] = v124;
            *((_OWORD *)v118 + 32) = v123;
            *(_QWORD *)&__str[24] = v122;
            *(_QWORD *)__str = v124;
            std::__split_buffer<SipSecurityAgreementConfig>::~__split_buffer((uint64_t)__str);
            v104 = v168;
            v98 = v110;
            v97 = v109;
            v99 = v108;
          }
          else
          {
            std::construct_at[abi:ne180100]<SipSecurityAgreementConfig,SipSecurityAgreementConfig const&,SipSecurityAgreementConfig*>(*((_QWORD *)v3 + 64), (uint64_t)__p);
            v104 = v102 + 72;
            *((_QWORD *)v3 + 64) = v102 + 72;
          }
          *((_QWORD *)v3 + 64) = v104;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__str, "sip.tport");
          std::string::basic_string[abi:ne180100]<0>(&v181, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v107 = ImsLogger::error(v93[140], (uint64_t)__str, (uint64_t)&v181);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v107 + 8), (uint64_t)"no params in security agreement option ", 39);
          *(_BYTE *)(v107 + 17) = 0;
          LoggableString::LoggableString(&v180, v96);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v107 + 40))(v107, &v180);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v107 + 64))(v107, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v107 + 17) = 0;
          if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v180.__r_.__value_.__l.__data_);
          if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v181.__r_.__value_.__l.__data_);
          if ((__str[23] & 0x80000000) != 0)
            operator delete(*(void **)__str);
        }
        __p[0] = off_1E78DD420;
        *(_QWORD *)&v173 = &off_1E78B82D8;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v99, (_QWORD *)v174);
        if ((SHIBYTE(__p[3]) & 0x80000000) == 0)
          goto LABEL_148;
        v106 = __p[1];
      }
      operator delete(v106);
LABEL_148:
      ++v96;
    }
    while (v96 != (const std::string *)v97);
  }
  __p[0] = &v182;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v171.__r_.__value_.__l.__data_);
  TransportInitTimeoutSecondsKey = (void **)ImsPrefs::getTransportInitTimeoutSecondsKey(v125);
  v127 = ImsPrefs::prefWithKey(v166, TransportInitTimeoutSecondsKey);
  if (v127)
    v128 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v127 + 56))(v127);
  else
    v128 = (ImsPrefs *)*((unsigned int *)TransportInitTimeoutSecondsKey + 15);
  *((_DWORD *)v3 + 142) = (_DWORD)v128;
  DisableAccessNetworkInfoForAckAndCancelKey = (void **)ImsPrefs::getDisableAccessNetworkInfoForAckAndCancelKey(v128);
  v130 = ImsPrefs::prefWithKey(v166, DisableAccessNetworkInfoForAckAndCancelKey);
  if (v130)
    v131 = (*(uint64_t (**)(void *))(*(_QWORD *)v130 + 40))(v130);
  else
    v131 = *((_BYTE *)DisableAccessNetworkInfoForAckAndCancelKey + 57) != 0;
  *((_BYTE *)v3 + 572) = v131;
  AddAccessNetworkInfoToInsecureMessagesKey = (void **)ImsPrefs::getAddAccessNetworkInfoToInsecureMessagesKey((ImsPrefs *)v131);
  v133 = ImsPrefs::prefWithKey(v166, AddAccessNetworkInfoToInsecureMessagesKey);
  if (v133)
    v134 = (*(uint64_t (**)(void *))(*(_QWORD *)v133 + 40))(v133);
  else
    v134 = *((_BYTE *)AddAccessNetworkInfoToInsecureMessagesKey + 57) != 0;
  *((_BYTE *)v3 + 580) = v134;
  EnableRportKey = (void **)ImsPrefs::getEnableRportKey((ImsPrefs *)v134);
  v136 = ImsPrefs::prefWithKey(v166, EnableRportKey);
  if (v136)
    v137 = (*(uint64_t (**)(void *))(*(_QWORD *)v136 + 40))(v136);
  else
    v137 = *((_BYTE *)EnableRportKey + 57) != 0;
  *((_BYTE *)v3 + 581) = v137;
  ResetConnectionsWhenClosedByPeerKey = (void **)ImsPrefs::getResetConnectionsWhenClosedByPeerKey((ImsPrefs *)v137);
  v139 = ImsPrefs::prefWithKey(v166, ResetConnectionsWhenClosedByPeerKey);
  if (v139)
    v140 = (*(uint64_t (**)(void *))(*(_QWORD *)v139 + 40))(v139);
  else
    v140 = *((_BYTE *)ResetConnectionsWhenClosedByPeerKey + 57) != 0;
  *((_BYTE *)v3 + 573) = v140;
  RequireExplicitPortsForEmergencyRoutesKey = (void **)ImsPrefs::getRequireExplicitPortsForEmergencyRoutesKey((ImsPrefs *)v140);
  v142 = ImsPrefs::prefWithKey(v166, RequireExplicitPortsForEmergencyRoutesKey);
  if (v142)
    v143 = (*(uint64_t (**)(void *))(*(_QWORD *)v142 + 40))(v142);
  else
    v143 = *((_BYTE *)RequireExplicitPortsForEmergencyRoutesKey + 57) != 0;
  *((_BYTE *)v3 + 574) = v143;
  IPSecSegmentOffsetKey = (void **)ImsPrefs::getIPSecSegmentOffsetKey((ImsPrefs *)v143);
  v145 = ImsPrefs::prefWithKey(v166, IPSecSegmentOffsetKey);
  if (v145)
    v146 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v145 + 56))(v145);
  else
    v146 = (ImsPrefs *)*((unsigned int *)IPSecSegmentOffsetKey + 15);
  *((_DWORD *)v3 + 144) = (_DWORD)v146;
  DeferIncomingMessagesUntilWakeKey = (void **)ImsPrefs::getDeferIncomingMessagesUntilWakeKey(v146);
  v148 = ImsPrefs::prefWithKey(v166, DeferIncomingMessagesUntilWakeKey);
  if (v148)
    v149 = (*(uint64_t (**)(void *))(*(_QWORD *)v148 + 40))(v148);
  else
    v149 = *((_BYTE *)DeferIncomingMessagesUntilWakeKey + 57) != 0;
  *((_BYTE *)v3 + 582) = v149;
  SystemWakeWaitTimeoutMillisecondsKey = (void **)ImsPrefs::getSystemWakeWaitTimeoutMillisecondsKey((ImsPrefs *)v149);
  v151 = ImsPrefs::prefWithKey(v166, SystemWakeWaitTimeoutMillisecondsKey);
  if (v151)
    v152 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v151 + 56))(v151);
  else
    v152 = (ImsPrefs *)*((unsigned int *)SystemWakeWaitTimeoutMillisecondsKey + 15);
  *((_DWORD *)v3 + 146) = (_DWORD)v152;
  NetworkInterfaceKey = (void **)ImsPrefs::getNetworkInterfaceKey(v152);
  v154 = (ImsPrefs *)ImsPrefs::stringValue(v166, NetworkInterfaceKey);
  if (*((char *)v3 + 23) < 0)
    operator delete(*(void **)v3);
  *(_OWORD *)v3 = *(_OWORD *)__p;
  *((void **)v3 + 2) = __p[2];
  ServiceClassKey = ImsPrefs::getServiceClassKey(v154);
  v156 = ImsPrefs::typedPrefWithKey<ImsDictPref>(v166, (void **)ServiceClassKey);
  if (v156)
    v157 = (uint64_t)v156;
  else
    v157 = *((_QWORD *)ServiceClassKey + 11);
  std::string::basic_string[abi:ne180100]<0>(__p, "Hotspot");
  v158 = ImsServiceClass::ImsServiceClass((int *)__str, v157, (uint64_t)__p);
  if ((char *)v169 + 588 != __str)
  {
    *(_QWORD *)((char *)v169 + 588) = *(_QWORD *)__str;
    *((_DWORD *)v3 + 149) = *(_DWORD *)&__str[8];
  }
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v159 = ImsPrefs::getServiceClassKey((ImsPrefs *)v158);
  v160 = ImsPrefs::typedPrefWithKey<ImsDictPref>(v166, (void **)v159);
  if (v160)
    v161 = (uint64_t)v160;
  else
    v161 = *((_QWORD *)v159 + 11);
  std::string::basic_string[abi:ne180100]<0>(__p, "Cellular");
  v162 = ImsServiceClass::ImsServiceClass((int *)__str, v161, (uint64_t)__p);
  if ((char *)v169 + 612 != __str)
  {
    *(_QWORD *)((char *)v169 + 612) = *(_QWORD *)__str;
    *((_DWORD *)v3 + 155) = *(_DWORD *)&__str[8];
  }
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v163 = ImsPrefs::getServiceClassKey((ImsPrefs *)v162);
  v164 = ImsPrefs::typedPrefWithKey<ImsDictPref>(v166, (void **)v163);
  if (v164)
    v165 = (uint64_t)v164;
  else
    v165 = *((_QWORD *)v163 + 11);
  std::string::basic_string[abi:ne180100]<0>(__p, "WiFi");
  ImsServiceClass::ImsServiceClass((int *)__str, v165, (uint64_t)__p);
  if ((char *)v3 + 600 != __str)
  {
    *((_QWORD *)v3 + 75) = *(_QWORD *)__str;
    *((_DWORD *)v3 + 152) = *(_DWORD *)&__str[8];
  }
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_1BF0D7E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  std::ostringstream::~ostringstream((uint64_t)&a26);
  a26 = (void *)(v31 - 216);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  a26 = (void *)(v31 - 192);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v31 - 145) < 0)
    operator delete(*(void **)(v31 - 168));
  if (*(char *)(v31 - 113) < 0)
    operator delete(*(void **)(v31 - 136));
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void SipSecurityAgreementConfig::~SipSecurityAgreementConfig(SipSecurityAgreementConfig *this)
{
  *(_QWORD *)this = off_1E78DD420;
  *((_QWORD *)this + 4) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 40, *((_QWORD **)this + 6));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  *(_QWORD *)this = off_1E78DD420;
  *((_QWORD *)this + 4) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 40, *((_QWORD **)this + 6));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1C3B87100);
}

void SipSecurityAgreementConfig::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "SipSecurityAgreementConfig");
}

uint64_t std::construct_at[abi:ne180100]<SipSecurityAgreementConfig,SipSecurityAgreementConfig const&,SipSecurityAgreementConfig*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = off_1E78DD420;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_QWORD *)(a1 + 32) = &off_1E78B82D8;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)(a1 + 40), *(void ***)(a2 + 40), (void **)(a2 + 48));
  *(_BYTE *)(a1 + 65) = 1;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

void sub_1BF0D81A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<SipSecurityAgreementConfig>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 72);
    *(_QWORD *)(a1 + 16) = i - 72;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void SipRegistrationMetrics::registrationAttemptStarted(uint64_t a1, _DWORD *a2)
{
  timeval v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4.tv_sec = 0;
  *(_QWORD *)&v4.tv_usec = 0;
  gettimeofday(&v4, 0);
  *(_QWORD *)a1 = 1000 * v4.tv_sec + v4.tv_usec / 1000 + 2208988800000;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v4.tv_sec = (__darwin_time_t)&off_1E78B7238;
  *(_QWORD *)&v4.tv_usec = &_bambiDomain;
  v5 = 0;
  ImsResult::operator=(a1 + 16, (uint64_t)&v4);
  ImsResult::~ImsResult((ImsResult *)&v4);
  *(_BYTE *)(a1 + 88) = *a2 == 2;
  *(_BYTE *)(a1 + 89) = 0;
  *(_BYTE *)(a1 + 92) = 0;
}

void sub_1BF0D82DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationMetrics::registrationAttemptCompleted(SipRegistrationMetrics *this, const ImsResult *a2, int a3)
{
  uint64_t result;
  timeval v6;

  ImsResult::operator=((uint64_t)this + 16, (uint64_t)a2);
  v6.tv_sec = 0;
  *(_QWORD *)&v6.tv_usec = 0;
  result = gettimeofday(&v6, 0);
  *((_QWORD *)this + 1) = 1000 * v6.tv_sec + v6.tv_usec / 1000 + 2208988800000;
  *((_DWORD *)this + 31) = a3;
  return result;
}

void SipPPreferredIdentityHeader::~SipPPreferredIdentityHeader(void **this)
{
  *this = off_1E78C3C20;
  SipRouteSet::~SipRouteSet((SipRouteSet *)(this + 8));
  SipHeader::~SipHeader(this);
}

{
  *this = off_1E78C3C20;
  SipRouteSet::~SipRouteSet((SipRouteSet *)(this + 8));
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C3B87100);
}

SipRouteSetHeader *SipPPreferredIdentityHeader::clone(SipPPreferredIdentityHeader *this)
{
  SipRouteSetHeader *v2;

  v2 = (SipRouteSetHeader *)operator new();
  SipRouteSetHeader::SipRouteSetHeader(v2, this);
  *(_QWORD *)v2 = &off_1E78DD468;
  return v2;
}

void sub_1BF0D8438(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1093C40B808BD88);
  _Unwind_Resume(a1);
}

void sub_1BF0D84CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t SipAuthResponse::encode(SipAuthResponse *this, ImsOutStream *a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(SipAuthResponse *))(*(_QWORD *)this + 32))(this);
  return (*(uint64_t (**)(uint64_t, ImsOutStream *, uint64_t))(*(_QWORD *)v3 + 48))(v3, a2, 1);
}

uint64_t SipAuthResponse::log(SipAuthResponse *this, ImsOutStream *a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(SipAuthResponse *))(*(_QWORD *)this + 32))(this);
  return (*(uint64_t (**)(uint64_t, ImsOutStream *))(*(_QWORD *)v3 + 56))(v3, a2);
}

void ims::analytics::CoreLocationState::create(_QWORD *a1@<X8>)
{
  char *v3;
  NSObject *v4;
  dispatch_queue_t v5;
  CoreLocationDelegate *v6;
  id v7;
  uint64_t v8;
  void *v9;

  v3 = (char *)operator new(0x30uLL);
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = &off_1E78DD568;
  *((_QWORD *)v3 + 3) = &off_1E78DD5B8;
  *((_QWORD *)v3 + 4) = 0;
  dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = dispatch_queue_create("com.apple.ipTelephony.locationListener", v4);

  *((_QWORD *)v3 + 5) = v5;
  v6 = [CoreLocationDelegate alloc];
  v7 = *((id *)v3 + 5);
  v8 = -[CoreLocationDelegate initWithQueue:](v6, "initWithQueue:", v7);
  v9 = (void *)*((_QWORD *)v3 + 4);
  *((_QWORD *)v3 + 4) = v8;

  *a1 = v3 + 24;
  a1[1] = v3;
}

void sub_1BF0D8638(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v4;
  void *v5;

  v4 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<`anonymous namespace'::CoreLocationStateImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DD568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<`anonymous namespace'::CoreLocationStateImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DD568;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<`anonymous namespace'::CoreLocationStateImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void `anonymous namespace'::CoreLocationStateImpl::~CoreLocationStateImpl(_anonymous_namespace_::CoreLocationStateImpl *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E78DD5B8;
  v2 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;

}

{
  JUMPOUT(0x1C3B87100);
}

uint64_t `anonymous namespace'::CoreLocationStateImpl::isLocationAuthorized(id *this)
{
  return objc_msgSend(this[1], "isLocationAuthorized");
}

void SipAuthInfo::SipAuthInfo(SipAuthInfo *this, SipAuthClient *a2, SipAuthenticateHeader *a3, SipAuthChallengeSource *a4)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  const char *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v20;
  BOOL v21;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E78DD608;
  SipTimerContainer::SipTimerContainer((SipAuthInfo *)((char *)this + 64));
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = a3;
  *((_QWORD *)this + 5) = a4;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 21) = this;
  std::string::operator=((std::string *)((char *)this + 112), (const std::string *)((char *)a2 + 8));
  std::string::operator=((std::string *)((char *)this + 136), (const std::string *)((char *)a2 + 32));
  v8 = *((_QWORD *)this + 4);
  v9 = *(unsigned __int8 *)(v8 + 31);
  v10 = *(_QWORD *)(v8 + 16);
  if ((v9 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(v8 + 31);
  else
    v11 = *(_QWORD *)(v8 + 16);
  if (v11 == 18)
  {
    v12 = (const void **)(v8 + 8);
    if ((v9 & 0x80) != 0)
    {
      v21 = memcmp(*v12, "Proxy-Authenticate", v10) == 0;
    }
    else if ((_DWORD)v9)
    {
      v13 = v9 - 1;
      v14 = "Proxy-Authenticate";
      do
      {
        v16 = *(unsigned __int8 *)v12;
        v12 = (const void **)((char *)v12 + 1);
        v15 = v16;
        v18 = *(unsigned __int8 *)v14++;
        v17 = v18;
        v20 = v13-- != 0;
        v21 = v15 == v17;
      }
      while (v21 && v20);
    }
    else
    {
      v21 = 1;
    }
  }
  else
  {
    v21 = 0;
  }
  *((_BYTE *)this + 208) = v21;
}

void sub_1BF0D8844(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void SipAuthInfo::~SipAuthInfo(SipAuthInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(_QWORD *)this = &off_1E78DD608;
  v2 = *((_QWORD *)this + 4);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 6);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  SipTimerContainer::~SipTimerContainer((SipAuthInfo *)((char *)this + 64));
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

{
  SipAuthInfo::~SipAuthInfo(this);
  JUMPOUT(0x1C3B87100);
}

void SipAuthInfo::loggableName(SipAuthInfo *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  std::string v5;
  void *__p;
  char v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = *(_QWORD *)(v3 + 64);
  else
    v4 = 0;
  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v8, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v8 + 1), (uint64_t)"SipAuthInfo", 11);
  BYTE1(v9) = 0;
  if (v4)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v8 + 1), (uint64_t)" ", 1);
    BYTE1(v9) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&v5, (const std::string *)(v4 + 32));
    (*(void (**)(__int128 *, std::string *))(v8 + 56))(&v8, &v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v8 + 1), (uint64_t)" ", 1);
    BYTE1(v9) = 0;
    std::ostream::operator<<();
    BYTE1(v9) = 0;
    if (v7 < 0)
      operator delete(__p);
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v9 + 1) + 8, &v5);
  LoggableString::LoggableString(a2, &v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  *(_QWORD *)&v8 = &off_1E78D7A10;
  if ((_BYTE)v9)
  {
    if (*((_QWORD *)&v8 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v8 + 1) + 8))(*((_QWORD *)&v8 + 1));
  }
}

void sub_1BF0D8A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a20)
  {
    if (a19)
      (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
  }
  _Unwind_Resume(exception_object);
}

void SipAuthInfo::sendChallengeToDelegate(SipAuthInfo *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  void *v34;
  void *v35;
  std::string v36;
  _BYTE v37[24];
  _BYTE *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
  v3 = *(std::__shared_weak_count **)(v2 + 16);
  if (v3 && (v4 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v5 = v4;
    v6 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 136);
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v6 = MEMORY[0x88];
  }
  v9 = *(_QWORD *)(v6 + 248);
  memset(&v36, 0, sizeof(v36));
  v10 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
  v11 = *(std::__shared_weak_count **)(v10 + 16);
  if (v11)
  {
    v12 = std::__shared_weak_count::lock(v11);
    if (v12)
    {
      v13 = *(_QWORD *)(v10 + 8);
      goto LABEL_13;
    }
  }
  else
  {
    v12 = 0;
  }
  v13 = 0;
LABEL_13:
  if (*(char *)(v13 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(v13 + 4136), *(_QWORD *)(v13 + 4144));
  else
    v36 = *(std::string *)(v13 + 4136);
  if (!v12)
    goto LABEL_20;
  v14 = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_20:
    if (v9)
      goto LABEL_21;
LABEL_30:
    v30 = *((_QWORD *)this + 3);
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 56))(v30);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)"no BambiClientDelegate to handle auth challenge", 47);
    *(_BYTE *)(v31 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v31 + 17) = 0;
    SipAuthInfo::triggerTimeout(this);
    goto LABEL_41;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (!v9)
    goto LABEL_30;
LABEL_21:
  v17 = *((_QWORD *)this + 1);
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v16)
  {
    p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
    do
      v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
    do
      v21 = __ldxr(p_shared_weak_owners);
    while (__stxr(v21 + 1, p_shared_weak_owners));
  }
  v38 = 0;
  v22 = operator new(0x20uLL);
  *v22 = &off_1E78DD688;
  v22[1] = this;
  v22[2] = v17;
  v22[3] = v16;
  v38 = v22;
  v23 = SipUserAgent::config(*(SipUserAgent **)(*((_QWORD *)this + 3) + 112));
  SipTimerContainer::startTimer((_QWORD *)this + 8, (uint64_t)"AuthResponseTimeout", (uint64_t)v37, *(_DWORD *)(v23 + 1368), 0);
  v28 = v38;
  if (v38 == v37)
  {
    v29 = 4;
    v28 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_33;
    v29 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v28 + 8 * v29))(v28, v24, v25, v26, v27);
LABEL_33:
  v32 = *((_QWORD *)this + 4);
  if (v32)
  {
    v33 = *(const void **)(v32 + 64);
    if (v33)
    {
      if (v34)
      {
        (*(void (**)(uint64_t, uint64_t, void *, std::string *))(*(_QWORD *)v9 + 24))(v9, v6, v34, &v36);
      }
      else
      {
        if (v35)
          (*(void (**)(uint64_t, uint64_t, void *, std::string *))(*(_QWORD *)v9 + 32))(v9, v6, v35, &v36);
      }
    }
  }
  if (v16)
  {
    std::__shared_weak_count::__release_weak(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
LABEL_41:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
}

void sub_1BF0D8DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  std::__shared_weak_count *v20;

  if (v20)
  {
    std::__shared_weak_count::__release_weak(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipAuthInfo::triggerTimeout(SipAuthInfo *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  _QWORD *v3;
  char *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];

  if (!*((_QWORD *)this + 6))
  {
    v1 = *((_QWORD *)this + 1);
    v4 = (char *)this + 16;
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    v3 = (_QWORD *)*((_QWORD *)v4 + 1);
    v9[0] = v1;
    if (!v2 || (v5 = std::__shared_weak_count::lock(v2), (v9[1] = v5) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v6 = v5;
    SipAuthClient::handleAuthChallengeTimeout(v3, v9);
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BF0D8F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipAuthInfo::setResponse(SipAuthInfo *this, const SipAuthResponse *a2)
{
  uint64_t v4;
  uint64_t result;

  SipTimerContainer::cancelAllTimers((SipAuthInfo *)((char *)this + 64));
  v4 = *((_QWORD *)this + 6);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 6) = (*(uint64_t (**)(const SipAuthResponse *))(*(_QWORD *)a2 + 16))(a2);
  result = *((_QWORD *)this + 5);
  if (result)
    return (*(uint64_t (**)(uint64_t, SipAuthInfo *))(*(_QWORD *)result + 16))(result, this);
  return result;
}

void SipAuthInfo::handleTimer(SipAuthInfo *this, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  const char *v5;

  v2 = a2[23];
  if ((v2 & 0x80u) == 0)
    v3 = a2[23];
  else
    v3 = *((_QWORD *)a2 + 1);
  if (v3 != 19)
    return;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, "AuthResponseTimeout", *((_QWORD *)a2 + 1)))
      return;
LABEL_13:
    SipAuthInfo::triggerTimeout(this);
    return;
  }
  if (!a2[23])
    goto LABEL_13;
  v5 = "AuthResponseTimeout";
  while (*a2 == *(unsigned __int8 *)v5)
  {
    ++a2;
    ++v5;
    if (!--v2)
      goto LABEL_13;
  }
}

_DWORD *SipAuthInfo::updateNonceCount(SipAuthInfo *this)
{
  _DWORD *result;
  const void *v3;
  uint64_t v4;
  uint64_t v5;

  result = (_DWORD *)*((_QWORD *)this + 6);
  if (result)
  {
    v3 = (const void *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 24))(result);
    if (v3
    {
      ++result[12];
    }
    else
    {
      v4 = *((_QWORD *)this + 3);
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"current AuthInfo doesn't have a Digest auth scheme", 50);
      *(_BYTE *)(v5 + 17) = 0;
      result = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
    }
  }
  return result;
}

void SipAuthInfo::addAuthorizationToRequest(SipAuthInfo *this@<X0>, SipRequest *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v6;
  uint64_t v7;
  SipHeader *v8;
  uint64_t v9;
  const ImsResult *v10;
  _QWORD v11[2];
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v6 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 120))(*((_QWORD *)this + 4));
  SipMessage::removeHeadersWithName(a2, v6);
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
  if (((*(uint64_t (**)(uint64_t, SipRequest *))(*(_QWORD *)v7 + 40))(v7, a2) & 1) != 0)
  {
    SipAuthInfo::updateNonceCount(this);
    v8 = (SipHeader *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 112))(*((_QWORD *)this + 4));
    v9 = *((_QWORD *)v8 + 8);
    if (v9 != v7)
    {
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      *((_QWORD *)v8 + 8) = v7;
    }
    SipMessage::addHeader(a2, v8, 0);
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v11[0] = &off_1E78B7238;
    v11[1] = &_bambiDomain;
    v12 = 1073741848;
    v10 = (const ImsResult *)ImsResult::operator<<<char [24]>((uint64_t)v11, "compute response failed");
    ImsResult::ImsResult((ImsResult *)a3, v10);
    ImsResult::~ImsResult((ImsResult *)v11);
  }
}

void sub_1BF0D9240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void *SipAuthInfo::hasAuthSyncResponse(SipAuthInfo *this)
{
  void *result;
  void *v2;

  result = (void *)*((_QWORD *)this + 6);
  if (result)
  {
    if (result)
    {
      v2 = result;
      result = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 32))(result);
      if (result)
        return (void *)(*(_BYTE *)((*(uint64_t (**)(void *))(*(_QWORD *)v2 + 32))(v2) + 313) != 0);
    }
  }
  return result;
}

_QWORD *std::__function::__func<SipAuthInfo::sendChallengeToDelegate(void)::$_0,std::allocator<SipAuthInfo::sendChallengeToDelegate(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78DD688;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipAuthInfo::sendChallengeToDelegate(void)::$_0,std::allocator<SipAuthInfo::sendChallengeToDelegate(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78DD688;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipAuthInfo::sendChallengeToDelegate(void)::$_0,std::allocator<SipAuthInfo::sendChallengeToDelegate(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78DD688;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipAuthInfo::sendChallengeToDelegate(void)::$_0,std::allocator<SipAuthInfo::sendChallengeToDelegate(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78DD688;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipAuthInfo::sendChallengeToDelegate(void)::$_0,std::allocator<SipAuthInfo::sendChallengeToDelegate(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipAuthInfo::sendChallengeToDelegate(void)::$_0,std::allocator<SipAuthInfo::sendChallengeToDelegate(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipAuthInfo::sendChallengeToDelegate(void)::$_0,std::allocator<SipAuthInfo::sendChallengeToDelegate(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF0D94A4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipAuthInfo::sendChallengeToDelegate(void)::$_0,std::allocator<SipAuthInfo::sendChallengeToDelegate(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipAuthInfo::sendChallengeToDelegate(void)::$_0,std::allocator<SipAuthInfo::sendChallengeToDelegate(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void SipLegacyUssdDataBody::encode(SipLegacyUssdDataBody *this, ImsOutStream *a2, int a3)
{
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *__p[2];
  char v10;

  if (a3)
  {
    if (*((_QWORD *)this + 2) != *((_QWORD *)this + 1))
    {
      v5 = 0;
      do
      {
        v6 = (_QWORD *)*((_QWORD *)a2 + 1);
        LOBYTE(__p[0]) = 32;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)__p, 1);
        *((_BYTE *)a2 + 17) = 0;
        std::ostream::operator<<();
        *((_BYTE *)a2 + 17) = 0;
        v7 = (_QWORD *)*((_QWORD *)a2 + 1);
        *(_DWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 8) = *(_DWORD *)((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
        *((_BYTE *)a2 + 17) = 0;
        LOBYTE(__p[0]) = 48;
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, (char *)__p);
        v8 = (_QWORD *)*((_QWORD *)a2 + 1);
        *(_QWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 24) = 2;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
        *((_BYTE *)a2 + 17) = 0;
        std::ostream::operator<<();
        *((_BYTE *)a2 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)")", 1);
        *((_BYTE *)a2 + 17) = 0;
        if (80 * (v5 / 0x50) == v5)
        {
          (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *((_BYTE *)a2 + 17) = 0;
        }
        ++v5;
      }
      while (v5 < *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
    }
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(__p, *((char **)this + 1), *((char **)this + 2), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
    (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 32))(a2, __p);
    if (v10 < 0)
      operator delete(__p[0]);
  }
}

void sub_1BF0D96D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipLegacyUssdDataBody::decode(uint64_t a1, const void **a2)
{
  char *v3;
  uint64_t v4;
  void **v5;
  unint64_t v6;
  int v7;
  size_t v8;
  const void *v9;

  v3 = (char *)*((unsigned __int8 *)a2 + 23);
  if ((char)v3 < 0)
    v3 = (char *)a2[1];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = (void **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16) - v4;
  if ((unint64_t)v3 <= v6)
  {
    if ((unint64_t)v3 < v6)
      *(_QWORD *)(a1 + 16) = &v3[v4];
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)(a1 + 8), (size_t)&v3[-v6]);
  }
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  if (v8)
  {
    if (v7 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    memmove(*v5, v9, v8);
  }
  return 1;
}

void SipLegacyUssdDataBody::~SipLegacyUssdDataBody(SipLegacyUssdDataBody *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E78DD708;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E78DD708;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C3B87100);
}

_QWORD *SipLegacyUssdDataBody::clone(SipLegacyUssdDataBody *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  *v2 = &off_1E78DD708;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v2 + 1, *((const void **)this + 1), *((_QWORD *)this + 2), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  return v2;
}

void sub_1BF0D9864(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x91C4089455612);
  _Unwind_Resume(a1);
}

const char *SipLegacyUssdDataBody::contentType(SipLegacyUssdDataBody *this)
{
  return "application/ussd";
}

uint64_t SipLegacyUssdDataBody::contentLength(SipLegacyUssdDataBody *this)
{
  return *((_QWORD *)this + 2) - *((_QWORD *)this + 1);
}

uint64_t SipLegacyUssdDataBody::decode()
{
  return 1;
}

uint64_t TMORegistrationPolicy::TMORegistrationPolicy(uint64_t a1, std::__shared_weak_count **a2, char a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v9[2];

  *(_QWORD *)(a1 + 104) = &off_1E78B7B60;
  v5 = a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }
  Rfc5626RegistrationPolicy::Rfc5626RegistrationPolicy(a1, (uint64_t *)&off_1E78DDA60, v9);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  *(_QWORD *)a1 = &off_1E78DD7A0;
  *(_QWORD *)(a1 + 104) = &unk_1E78DDA08;
  *(_QWORD *)(a1 + 176) = &unk_1E78DDA50;
  *(_QWORD *)(a1 + 2360) = 0;
  *(_QWORD *)(a1 + 2376) = 0;
  *(_QWORD *)(a1 + 2368) = 0;
  *(_BYTE *)(a1 + 2384) = 0;
  *(_BYTE *)(a1 + 2385) = a3;
  *(_QWORD *)(a1 + 2400) = 0;
  *(_DWORD *)(a1 + 2408) = 0;
  *(_OWORD *)(a1 + 2416) = 0u;
  *(_OWORD *)(a1 + 2432) = 0u;
  *(_QWORD *)(a1 + 2448) = 0;
  *(_QWORD *)(a1 + 2392) = &off_1E78BCB68;
  *(_QWORD *)(a1 + 2456) = 0x7800001C20;
  return a1;
}

void sub_1BF0D9988(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

void TMORegistrationPolicy::clearFailureFlags(TMORegistrationPolicy *this)
{
  SipRegistrationPolicy::clearFailureFlags(this);
  *((_DWORD *)this + 588) = 0;
  *((_BYTE *)this + 2384) = 0;
}

uint64_t TMORegistrationPolicy::handleForbiddenUser(TMORegistrationPolicy *this, const SipResponse *a2)
{
  uint64_t v3;
  _BYTE v5[72];

  SipResultDomain::makeResult(a2, (uint64_t)v5);
  v3 = SipRegistrationPolicy::handleGeneralError(this, (const ImsResult *)v5);
  ImsResult::~ImsResult((ImsResult *)v5);
  return v3;
}

void sub_1BF0D9A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

uint64_t TMORegistrationPolicy::handleGeneralErrorFromAllProxies(TMORegistrationPolicy *this, const ImsResult *a2)
{
  *((_BYTE *)this + 2384) = 1;
  if (*((_BYTE *)this + 2385))
    return -1;
  else
    return Rfc5626RegistrationPolicy::handleGeneralErrorFromAllProxies(this, a2);
}

time_t TMORegistrationPolicy::handleGeneralErrorFromOneProxy(TMORegistrationPolicy *this, const ImsResult *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;

  v4 = SipRegistrationPolicy::retryTimeFromResult(this, a2);
  if (v4 == -1)
  {
    if (*((_BYTE *)this + 2384))
      v5 = Rfc5626RegistrationPolicy::computeRetryInterval(this);
    else
      v5 = (*(uint64_t (**)(TMORegistrationPolicy *))(*(_QWORD *)this + 208))(this);
    v4 = v5;
  }
  v6 = (*(uint64_t (**)(TMORegistrationPolicy *))(*(_QWORD *)this + 328))(this);
  v7 = (*(uint64_t (**)(TMORegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(TMORegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v7);
  if ((v6 & 1) != 0)
  {
    v8 = "time to switch proxies";
    v9 = 22;
  }
  else
  {
    v8 = "will try again with the same proxy.";
    v9 = 35;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)v8, v9);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  return SipRegistrationPolicy::scheduleRetry(this, a2, v4, v6);
}

uint64_t TMORegistrationPolicy::maxRetryInterval(TMORegistrationPolicy *this)
{
  if (*((_BYTE *)this + 2384))
    return *((unsigned int *)this + 458);
  else
    return *(_QWORD *)(*((_QWORD *)this + 296) - 16) + *(unsigned int *)(*((_QWORD *)this + 296) - 8);
}

uint64_t TMORegistrationPolicy::generalErrorRetryInterval(TMORegistrationPolicy *this)
{
  uint64_t v1;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  if (*((_BYTE *)this + 2384))
    return 0;
  v3 = *((_DWORD *)this + 50);
  if (!v3)
    return 0;
  v4 = (v3 - 1);
  v5 = *((_QWORD *)this + 296);
  v6 = *((_QWORD *)this + 295);
  v7 = v5 - v6;
  v8 = (uint64_t *)(v6 + 16 * v4);
  v9 = (uint64_t *)(v5 - 16);
  if (v4 >= v7 >> 4)
    v10 = v9;
  else
    v10 = v8;
  v1 = *v10;
  if (*((_DWORD *)v10 + 2))
    v1 += random() % *((unsigned int *)v10 + 2);
  return v1;
}

uint64_t TMORegistrationPolicy::fatalErrorRetryInterval(TMORegistrationPolicy *this)
{
  uint64_t v1;
  uint64_t *v2;

  if (*((_BYTE *)this + 2384))
    return 0;
  v2 = (uint64_t *)*((_QWORD *)this + 295);
  v1 = *v2;
  if (*((_DWORD *)v2 + 2))
    v1 += random() % *((unsigned int *)v2 + 2);
  return v1;
}

uint64_t TMORegistrationPolicy::forbiddenErrorRetryInterval(TMORegistrationPolicy *this)
{
  uint64_t v1;
  uint64_t *v2;

  if (*((_BYTE *)this + 2384))
    return 0;
  v2 = (uint64_t *)*((_QWORD *)this + 295);
  v1 = *v2;
  if (*((_DWORD *)v2 + 2))
    v1 += random() % *((unsigned int *)v2 + 2);
  return v1;
}

void TMORegistrationPolicy::updateConfig(TMORegistrationPolicy *this, const SipRegistrationConfig *a2)
{
  _DWORD **v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  std::__shared_weak_count *v18;
  std::string::size_type v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::string::size_type v26;
  std::string::size_type v27[2];

  v4 = (_DWORD **)((char *)this + 2360);
  if ((char *)this + 2360 != (char *)a2 + 960)
    std::vector<SipRetryInfo>::__assign_with_size[abi:ne180100]<SipRetryInfo*,SipRetryInfo*>((char *)this + 2360, *((char **)a2 + 120), *((_QWORD *)a2 + 121), (uint64_t)(*((_QWORD *)a2 + 121) - *((_QWORD *)a2 + 120)) >> 4);
  v5 = *((_QWORD *)this + 295);
  if (v5 == *((_QWORD *)this + 296))
  {
    v6 = *((_QWORD *)this + 297);
    if (v5 >= v6)
    {
      v8 = v6 - v5;
      v9 = v8 >> 3;
      if ((unint64_t)(v8 >> 3) <= 1)
        v9 = 1;
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
        v10 = 0xFFFFFFFFFFFFFFFLL;
      else
        v10 = v9;
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)this + 2376, v10);
      v12 = (_DWORD *)*((_QWORD *)this + 296);
      v13 = (_DWORD *)*((_QWORD *)this + 295);
      v15 = &v11[16 * v14];
      *(_QWORD *)v11 = 30;
      *((_DWORD *)v11 + 2) = 0;
      v7 = v11 + 16;
      if (v12 != v13)
      {
        do
        {
          v16 = *((_QWORD *)v12 - 2);
          v12 -= 4;
          v17 = v12[2];
          *((_QWORD *)v11 - 2) = v16;
          v11 -= 16;
          *((_DWORD *)v11 + 2) = v17;
        }
        while (v12 != v13);
        v12 = *v4;
      }
      *((_QWORD *)this + 295) = v11;
      *((_QWORD *)this + 296) = v7;
      *((_QWORD *)this + 297) = v15;
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_QWORD *)v5 = 30;
      *(_DWORD *)(v5 + 8) = 0;
      v7 = (char *)(v5 + 16);
    }
    *((_QWORD *)this + 296) = v7;
  }
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v25, (_QWORD *)this + 23);
  v18 = (std::__shared_weak_count *)v26;
  if (v25)
    v19 = v25 + 176;
  else
    v19 = 0;
  v27[0] = v19;
  v27[1] = v26;
  v25 = 0;
  v26 = 0;
  Rfc5626BackoffTimer::initialize((uint64_t)this + 2392, (std::string::size_type)this + 224, v27, (std::string *)&SipRegistrationPolicy::kSubscriptionRetryTimerName, *((_DWORD *)a2 + 338), *((_DWORD *)a2 + 339));
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v22 = (std::__shared_weak_count *)v26;
  if (v26)
  {
    v23 = (unint64_t *)(v26 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  SipRegistrationPolicy::updateConfig(this, a2);
}

void sub_1BF0D9E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void TMORegistrationPolicy::~TMORegistrationPolicy(TMORegistrationPolicy *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E78DD7A0;
  *((_QWORD *)this + 13) = &unk_1E78DDA08;
  *((_QWORD *)this + 22) = &unk_1E78DDA50;
  SipBackoffTimer::~SipBackoffTimer((TMORegistrationPolicy *)((char *)this + 2392));
  v2 = (void *)*((_QWORD *)this + 295);
  if (v2)
  {
    *((_QWORD *)this + 296) = v2;
    operator delete(v2);
  }
  SipRegistrationPolicy::~SipRegistrationPolicy(this, (uint64_t *)&off_1E78DDA68);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E78DD7A0;
  *((_QWORD *)this + 13) = &unk_1E78DDA08;
  *((_QWORD *)this + 22) = &unk_1E78DDA50;
  SipBackoffTimer::~SipBackoffTimer((TMORegistrationPolicy *)((char *)this + 2392));
  v2 = (void *)*((_QWORD *)this + 295);
  if (v2)
  {
    *((_QWORD *)this + 296) = v2;
    operator delete(v2);
  }
  SipRegistrationPolicy::~SipRegistrationPolicy(this, (uint64_t *)&off_1E78DDA68);
  JUMPOUT(0x1C3B87100);
}

uint64_t TMORegistrationPolicy::subscriptionRetryTimer(TMORegistrationPolicy *this)
{
  return (uint64_t)this + 2392;
}

char *TMORegistrationPolicy::name(TMORegistrationPolicy *this)
{
  return &TMORegistrationPolicy::kPolicyName;
}

void `non-virtual thunk to'TMORegistrationPolicy::~TMORegistrationPolicy(TMORegistrationPolicy *this)
{
  SipRegistrationPolicy *v2;
  void *v3;

  *((_QWORD *)this - 13) = &off_1E78DD7A0;
  v2 = (TMORegistrationPolicy *)((char *)this - 104);
  *(_QWORD *)this = &unk_1E78DDA08;
  *((_QWORD *)this + 9) = &unk_1E78DDA50;
  SipBackoffTimer::~SipBackoffTimer((TMORegistrationPolicy *)((char *)this + 2288));
  v3 = (void *)*((_QWORD *)this + 282);
  if (v3)
  {
    *((_QWORD *)this + 283) = v3;
    operator delete(v3);
  }
  SipRegistrationPolicy::~SipRegistrationPolicy(v2, (uint64_t *)&off_1E78DDA68);
}

{
  SipRegistrationPolicy *v2;
  void *v3;

  *((_QWORD *)this - 13) = &off_1E78DD7A0;
  v2 = (TMORegistrationPolicy *)((char *)this - 104);
  *(_QWORD *)this = &unk_1E78DDA08;
  *((_QWORD *)this + 9) = &unk_1E78DDA50;
  SipBackoffTimer::~SipBackoffTimer((TMORegistrationPolicy *)((char *)this + 2288));
  v3 = (void *)*((_QWORD *)this + 282);
  if (v3)
  {
    *((_QWORD *)this + 283) = v3;
    operator delete(v3);
  }
  SipRegistrationPolicy::~SipRegistrationPolicy(v2, (uint64_t *)&off_1E78DDA68);
  JUMPOUT(0x1C3B87100);
}

uint64_t HttpClient::HttpClient(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, __int128 *a5)
{
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  *(_QWORD *)(a1 + 16) = &unk_1E78DE158;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)a1 = &off_1E78DE0A8;
  *(_QWORD *)(a1 + 8) = &unk_1E78DE120;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v8 = *a4;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 32) = v8;
  }
  *(_QWORD *)(a1 + 56) = a2;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 96), *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v9 = *a5;
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(a1 + 96) = v9;
  }
  *(_DWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 124) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  std::string::basic_string[abi:ne180100]<0>(v14, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::debug(ims::_logger, (uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Creating HttpClient: ", 21);
  *(_BYTE *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (v13 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  return a1;
}

void sub_1BF0DA1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  void **v21;

  if (*(char *)(v20 + 95) < 0)
    operator delete(*(void **)(v20 + 72));
  if (*(char *)(v20 + 55) < 0)
    operator delete(*v21);
  _Unwind_Resume(exception_object);
}

void HttpClient::~HttpClient(HttpClient *this)
{
  uint64_t v2;
  void *v3;
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  *(_QWORD *)this = &off_1E78DE0A8;
  *((_QWORD *)this + 1) = &unk_1E78DE120;
  *((_QWORD *)this + 2) = &unk_1E78DE158;
  std::string::basic_string[abi:ne180100]<0>(v6, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v6, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Deleting HttpClient: ", 21);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  HttpClient::deinitialize(this);
  v3 = (void *)*((_QWORD *)this + 17);
  if (v3)
  {
    *((_QWORD *)this + 18) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
}

{
  HttpClient::~HttpClient(this);
  JUMPOUT(0x1C3B87100);
}

void HttpClient::deinitialize(HttpClient *this)
{
  uint64_t v2;
  uint64_t v3;
  HttpStreamPair *v4;
  _QWORD *v5;
  _QWORD *v6;
  const void *v7;

  v2 = *((_QWORD *)this + 16);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2);
    v3 = *((_QWORD *)this + 16);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *((_QWORD *)this + 16) = 0;
  }
  v4 = (HttpStreamPair *)*((_QWORD *)this + 8);
  if (v4)
  {
    HttpStreamPair::~HttpStreamPair(v4);
    MEMORY[0x1C3B87100]();
    *((_QWORD *)this + 8) = 0;
  }
  v5 = (_QWORD *)*((_QWORD *)this + 17);
  v6 = (_QWORD *)*((_QWORD *)this + 18);
  if (v5 != v6)
  {
    do
    {
      if (*v5)
        (*(void (**)(_QWORD))(*(_QWORD *)*v5 + 8))(*v5);
      ++v5;
    }
    while (v5 != v6);
    v5 = (_QWORD *)*((_QWORD *)this + 17);
  }
  *((_QWORD *)this + 18) = v5;
  v7 = (const void *)*((_QWORD *)this + 20);
  if (v7)
  {
    CFRelease(v7);
    *((_QWORD *)this + 20) = 0;
  }
}

void `non-virtual thunk to'HttpClient::~HttpClient(HttpClient *this)
{
  HttpClient::~HttpClient((HttpClient *)((char *)this - 8));
}

{
  HttpClient::~HttpClient((HttpClient *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

BOOL HttpClient::initialize(uint64_t a1, int a2, const std::string *a3, int a4)
{
  uint64_t v8;
  std::string *v9;
  _QWORD *v10;
  _BOOL8 v11;
  uint64_t v12;
  _QWORD v14[2];
  void *__p[2];
  char v16;

  HttpClient::deinitialize((HttpClient *)a1);
  std::string::operator=((std::string *)(a1 + 72), a3);
  *(_DWORD *)(a1 + 120) = a4;
  v8 = operator new();
  *(_QWORD *)v8 = a1 + 16;
  v9 = (std::string *)(v8 + 8);
  if (*(char *)(a1 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a1 + 96), *(_QWORD *)(a1 + 104));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 96);
    *(_QWORD *)(v8 + 24) = *(_QWORD *)(a1 + 112);
  }
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(a1 + 64) = v8;
  if (!HttpStreamPair::initialize((CFReadStreamRef *)v8, (const char *)a3, (unsigned __int16)a4))
    return 0;
  *(_BYTE *)(a1 + 124) = a2;
  if (a2)
  {
    v10 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    ImsSSLContextBase::ImsSSLContextBase(v10, a1 + 8, (__int128 *)__p);
    *v10 = &off_1E78C0CF8;
    v10[17] = 0;
  }
  else
  {
    v10 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    ImsSSLContextBase::ImsSSLContextBase(v10, a1 + 8, (__int128 *)__p);
  }
  *(_QWORD *)(a1 + 128) = v10;
  if (v16 < 0)
    operator delete(__p[0]);
  v12 = *(_QWORD *)(a1 + 128);
  v14[0] = &off_1E78B7BD8;
  v14[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v11 = (*(unsigned int (**)(uint64_t, _QWORD, _QWORD *, void **))(*(_QWORD *)v12 + 80))(v12, 0, v14, __p) == 0;
  if (v16 < 0)
    operator delete(__p[0]);
  ims::CFType::~CFType((ims::CFType *)v14);
  return v11;
}

void sub_1BF0DA664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x1C3B87100](v17, 0x10B3C4074CAE73CLL);
  _Unwind_Resume(a1);
}

uint64_t HttpClient::sendRequest(HttpClient *this, const HttpRequest *a2)
{
  HttpRequest *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;

  if (CFWriteStreamCanAcceptBytes(*(CFWriteStreamRef *)(*((_QWORD *)this + 8) + 40)))
  {
    v4 = (HttpRequest *)(*(uint64_t (**)(const HttpRequest *))(*(_QWORD *)a2 + 16))(a2);
    HttpClient::_sendRequest(this, v4);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v22, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::info(ims::_logger, (uint64_t)v22, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Stream not ready for data to be written. Buffering request..", 60);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (v21 < 0)
      operator delete(__p[0]);
    if (v23 < 0)
      operator delete(v22[0]);
    v6 = (*(uint64_t (**)(const HttpRequest *))(*(_QWORD *)a2 + 16))(a2);
    v7 = v6;
    v9 = (uint64_t *)*((_QWORD *)this + 18);
    v8 = *((_QWORD *)this + 19);
    if ((unint64_t)v9 >= v8)
    {
      v11 = (_QWORD *)*((_QWORD *)this + 17);
      v12 = v9 - v11;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v14 = v8 - (_QWORD)v11;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v16 = (char *)operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = (uint64_t *)&v16[8 * v12];
      *v17 = v7;
      v10 = v17 + 1;
      if (v9 != v11)
      {
        do
        {
          v18 = *--v9;
          *--v17 = v18;
        }
        while (v9 != v11);
        v9 = (uint64_t *)*((_QWORD *)this + 17);
      }
      *((_QWORD *)this + 17) = v17;
      *((_QWORD *)this + 18) = v10;
      *((_QWORD *)this + 19) = &v16[8 * v15];
      if (v9)
        operator delete(v9);
    }
    else
    {
      *v9 = v6;
      v10 = v9 + 1;
    }
    *((_QWORD *)this + 18) = v10;
  }
  return 1;
}

void sub_1BF0DA900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HttpClient::_sendRequest(HttpClient *this, HttpRequest *a2)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  if (a2)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    HttpMessage::copySerializedMessage(a2, &v13);
    v4 = v14;
    if (v15 >= 0)
      v4 = HIBYTE(v15);
    if (v4)
    {
      std::string::basic_string[abi:ne180100]<0>(v11, (char *)kXcapLoggingFacility);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)v11, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)": ", 2);
      *(_BYTE *)(v5 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Sending HTTP request", 20);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v10 < 0)
        operator delete(__p[0]);
      if (v12 < 0)
        operator delete(v11[0]);
      HttpClient::_logMsg(this, a2);
      (*(void (**)(_QWORD, void **))(**((_QWORD **)this + 16) + 136))(*((_QWORD *)this + 16), &v13);
      v6 = (const void *)*((_QWORD *)this + 20);
      if (v6)
      {
        CFRelease(v6);
        *((_QWORD *)this + 20) = 0;
      }
      goto LABEL_16;
    }
    std::string::basic_string[abi:ne180100]<0>(v11, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Failed to serialize HTTP request", 32);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v10 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v11, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)&v13, (uint64_t)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"NULL HTTP request!", 18);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
  }
  if (v12 < 0)
    operator delete(v11[0]);
LABEL_16:
  if (SHIBYTE(v15) < 0)
    operator delete(v13);
}

void sub_1BF0DABE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  char v27;

  if (a21 < 0)
    operator delete(__p);
  if (v27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t HttpClient::getConnectionServiceType(HttpClient *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 24))(*((_QWORD *)this + 7));
}

uint64_t `non-virtual thunk to'HttpClient::getConnectionServiceType(HttpClient *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 24))(*((_QWORD *)this + 5));
}

void HttpClient::bytesAvailable(HttpClient *this)
{
  HttpClient *v1;
  const void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  std::string::size_type size;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  size_t v12;
  std::string *v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  void *v20;
  std::string::size_type v21;
  size_t v23;
  std::string::value_type *v24;
  std::string *v26;
  BOOL v28;
  __CFHTTPMessage **v29;
  __CFHTTPMessage *v30;
  std::string *v31;
  CFIndex v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v39;
  __CFHTTPMessage *Empty;
  std::string *v41;
  CFIndex v42;
  unint64_t *v43;
  HttpClient *v44;
  int v45;
  uint64_t i;
  int v47;
  std::string v48;
  std::string v49;
  void *__p[2];
  char v51;
  unint64_t v52;
  uint64_t v53;
  std::string v54;
  _QWORD v55[9];

  v1 = this;
  v55[7] = *MEMORY[0x1E0C80C00];
  v2 = (const void *)*((_QWORD *)this + 16);
  if (v2)
  {
    if (v3)
    {
      v4 = v3;
      if (((*(uint64_t (**)(void *))(*(_QWORD *)v3 + 104))(v3) & 1) == 0
        && !(*(unsigned int (**)(void *))(*(_QWORD *)v4 + 112))(v4))
      {
        *((_WORD *)v1 + 84) = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 120))(v4);
        std::string::basic_string[abi:ne180100]<0>(&v54, (char *)kXcapLoggingFacility);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v5 = ImsLogger::debug(ims::_logger, (uint64_t)&v54, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)": ", 2);
        *(_BYTE *)(v5 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Negotiated Cipher: ", 19);
        *(_BYTE *)(v5 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v5 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v5 + 17) = 0;
        if (v51 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v54.__r_.__value_.__l.__data_);
      }
    }
  }
  memset(&v49, 0, sizeof(v49));
  v6 = (*(uint64_t (**)(_QWORD, std::string *))(**((_QWORD **)v1 + 16) + 128))(*((_QWORD *)v1 + 16), &v49);
  size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v49.__r_.__value_.__l.__size_;
  if (size)
  {
    std::string::basic_string[abi:ne180100]<0>(&v54, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)&v54, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"***** INCOMING DATA *****", 25);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v51 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v54, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::debug(ims::_logger, (uint64_t)&v54, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v9 + 32))(v9, &v49);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (v51 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v54, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::debug(ims::_logger, (uint64_t)&v54, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"*************************", 25);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (v51 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v48, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
    else
      v48 = v49;
    v52 = 0;
    v53 = 0;
    v11 = atomic_load((unsigned __int8 *)&_MergedGlobals_20);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_20))
    {
      v44 = v1;
      v45 = v6;
      std::string::basic_string[abi:ne180100]<0>(&v54, "1.0");
      std::string::basic_string[abi:ne180100]<0>(v55, "1.1");
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)&qword_1ED70EEF8, (__int128 *)&v54, 2uLL);
      for (i = 0; i != -6; i -= 3)
      {
        if (SHIBYTE(v55[i + 2]) < 0)
          operator delete(*(void **)((char *)&v54 + i * 8 + 24));
      }
      __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &qword_1ED70EEF8, &dword_1BEDF4000);
      __cxa_guard_release(&_MergedGlobals_20);
      v6 = v45;
      v1 = v44;
    }
    v47 = v6;
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    {
      v13 = (std::string *)v48.__r_.__value_.__r.__words[0];
      if (v48.__r_.__value_.__l.__size_ >= 4)
        v12 = 4;
      else
        v12 = v48.__r_.__value_.__l.__size_;
    }
    else
    {
      if ((*((_BYTE *)&v48.__r_.__value_.__s + 23) & 0xFC) != 0)
        v12 = 4;
      else
        v12 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
      v13 = &v48;
    }
    v14 = memcmp(v13, "HTTP", v12);
    v15 = v12 >= 4 && v14 == 0;
    if (!v15 || (v16 = qword_1ED70EEF8, v17 = unk_1ED70EF00, qword_1ED70EEF8 == unk_1ED70EF00))
    {
LABEL_80:
      v29 = (__CFHTTPMessage **)v1;
      v30 = (__CFHTTPMessage *)*((_QWORD *)v1 + 20);
      if (!v30)
      {
        std::string::basic_string[abi:ne180100]<0>(&v54, (char *)kXcapLoggingFacility);
        v6 = v47;
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v34 = ImsLogger::error(ims::_logger, (uint64_t)&v54, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v34 + 8), (uint64_t)": ", 2);
        *(_BYTE *)(v34 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v34 + 8), (uint64_t)"Ignoring body without HTTP response", 35);
        *(_BYTE *)(v34 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v34 + 17) = 0;
        if (v51 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v54.__r_.__value_.__l.__data_);
        v35 = *((_QWORD *)v1 + 7);
        v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
        v54.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
        LODWORD(v54.__r_.__value_.__r.__words[2]) = 0x40000000;
        memset(v55, 0, 48);
        (*(void (**)(uint64_t, HttpClient *, std::string *))(*(_QWORD *)v35 + 64))(v35, v1, &v54);
        ImsResult::~ImsResult((ImsResult *)&v54);
        goto LABEL_103;
      }
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = &v48;
      else
        v31 = (std::string *)v48.__r_.__value_.__r.__words[0];
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
      else
        v32 = v48.__r_.__value_.__l.__size_;
      CFHTTPMessageAppendBytes(v30, (const UInt8 *)v31, v32);
      v6 = v47;
      if (CFHTTPMessageIsHeaderComplete(*((CFHTTPMessageRef *)v1 + 20)))
      {
        if (!HttpClient::_isFullBodyPresentInMessage((CFHTTPMessageRef *)v1, (__CFHTTPMessage *)&v53, (CFIndex *)&v52, v33))goto LABEL_128;
        goto LABEL_89;
      }
    }
    else
    {
      while (1)
      {
        memset(&v54, 0, sizeof(v54));
        if (*(char *)(v16 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)v16, *(_QWORD *)(v16 + 8));
        }
        else
        {
          v18 = *(_OWORD *)v16;
          v54.__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 16);
          *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v18;
        }
        v19 = SHIBYTE(v54.__r_.__value_.__r.__words[2]);
        v20 = (void *)v54.__r_.__value_.__r.__words[0];
        v21 = (v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(v54.__r_.__value_.__r.__words[2])
            : v54.__r_.__value_.__l.__size_;
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v21 == -1 || v48.__r_.__value_.__l.__size_ < 5)
LABEL_130:
            std::string::__throw_out_of_range[abi:ne180100]();
          v23 = v48.__r_.__value_.__l.__size_ - 5 >= v21 ? v21 : v48.__r_.__value_.__l.__size_ - 5;
          v24 = (std::string::value_type *)(v48.__r_.__value_.__r.__words[0] + 5);
        }
        else
        {
          if (v21 == -1 || HIBYTE(v48.__r_.__value_.__r.__words[2]) < 5u)
            goto LABEL_130;
          v23 = (unint64_t)HIBYTE(v48.__r_.__value_.__r.__words[2]) - 5 >= v21
              ? v21
              : HIBYTE(v48.__r_.__value_.__r.__words[2]) - 5;
          v24 = &v48.__r_.__value_.__s.__data_[5];
        }
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26 = &v54;
        else
          v26 = (std::string *)v54.__r_.__value_.__r.__words[0];
        v28 = !memcmp(v24, v26, v23) && v23 == v21;
        if (v19 < 0)
          operator delete(v20);
        if (v28)
          break;
        v16 += 24;
        if (v16 == v17)
          goto LABEL_80;
      }
      if (*((_QWORD *)v1 + 20))
      {
        std::string::basic_string[abi:ne180100]<0>(&v54, (char *)kXcapLoggingFacility);
        v6 = v47;
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v36 = ImsLogger::error(ims::_logger, (uint64_t)&v54, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)": ", 2);
        *(_BYTE *)(v36 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"Ignoring HTTP response since one is already pending", 51);
        *(_BYTE *)(v36 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        goto LABEL_99;
      }
      v29 = (__CFHTTPMessage **)v1;
      Empty = CFHTTPMessageCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
      v6 = v47;
      *((_QWORD *)v1 + 20) = Empty;
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v48;
      else
        v41 = (std::string *)v48.__r_.__value_.__r.__words[0];
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
      else
        v42 = v48.__r_.__value_.__l.__size_;
      CFHTTPMessageAppendBytes(Empty, (const UInt8 *)v41, v42);
      if (CFHTTPMessageIsHeaderComplete(*((CFHTTPMessageRef *)v1 + 20)))
      {
        if (!HttpClient::_isFullBodyPresentInMessage((CFHTTPMessageRef *)v1, (__CFHTTPMessage *)&v53, (CFIndex *)&v52, v43))
        {
LABEL_128:
          std::string::basic_string[abi:ne180100]<0>(&v54, (char *)kXcapLoggingFacility);
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v36 = ImsLogger::debug(ims::_logger, (uint64_t)&v54, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)": ", 2);
          *(_BYTE *)(v36 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"HTTP response doesn't have full body. Waiting for more data. Expected:", 70);
          *(_BYTE *)(v36 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v36 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)", Actual:", 9);
          *(_BYTE *)(v36 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v36 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          goto LABEL_99;
        }
LABEL_89:
        HttpClient::_handleHttpResponse((HttpClient *)v29, v29[20]);
LABEL_103:
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v48.__r_.__value_.__l.__data_);
        goto LABEL_105;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v54, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v36 = ImsLogger::warn(ims::_logger, (uint64_t)&v54, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v36 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"Incomplete headers for HTTP response. Waiting for more data", 59);
    *(_BYTE *)(v36 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_99:
    *(_BYTE *)(v36 + 17) = 0;
    if (v51 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    goto LABEL_103;
  }
LABEL_105:
  if (v6 != -9805 && v6 != -9803 && v6 != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v54, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v39 = ImsLogger::error(ims::_logger, (uint64_t)&v54, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v39 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)"App data read from transport failed. Error: ", 44);
    *(_BYTE *)(v39 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v39 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v39 + 17) = 0;
    if (v51 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
}

void sub_1BF0DB920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v39;

  v39 = 0;
  while (1)
  {
    if (*(char *)(v37 + v39 + 47) < 0)
      operator delete(*(void **)(v37 + v39 + 24));
    v39 -= 24;
    if (v39 == -48)
    {
      __cxa_guard_abort(&_MergedGlobals_20);
      if (a16 < 0)
        operator delete(__p);
      if (a23 < 0)
        operator delete(a18);
      _Unwind_Resume(a1);
    }
  }
}

void `non-virtual thunk to'HttpClient::bytesAvailable(HttpClient *this)
{
  HttpClient::bytesAvailable((HttpClient *)((char *)this - 16));
}

void HttpClient::canAcceptBytes(HttpClient *this)
{
  const void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  HttpRequest **v6;
  HttpRequest **v7;
  HttpRequest *v8;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;

  v2 = (const void *)*((_QWORD *)this + 16);
  if (v2)
  {
    if (v3)
    {
      v4 = v3;
      if (((*(uint64_t (**)(void *))(*(_QWORD *)v3 + 104))(v3) & 1) == 0
        && !(*(unsigned int (**)(void *))(*(_QWORD *)v4 + 112))(v4))
      {
        *((_WORD *)this + 84) = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 120))(v4);
        std::string::basic_string[abi:ne180100]<0>(v11, (char *)kXcapLoggingFacility);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v5 = ImsLogger::debug(ims::_logger, (uint64_t)v11, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)": ", 2);
        *(_BYTE *)(v5 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Negotiated Cipher: ", 19);
        *(_BYTE *)(v5 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v5 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v5 + 17) = 0;
        if (v10 < 0)
          operator delete(__p[0]);
        if (v12 < 0)
          operator delete(v11[0]);
      }
    }
  }
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 16) + 104))(*((_QWORD *)this + 16)))
  {
    v6 = (HttpRequest **)*((_QWORD *)this + 17);
    v7 = (HttpRequest **)*((_QWORD *)this + 18);
    if (v6 != v7)
    {
      do
      {
        v8 = *v6;
        HttpClient::_sendRequest(this, *v6);
        if (v8)
          (*(void (**)(HttpRequest *))(*(_QWORD *)v8 + 8))(v8);
        ++v6;
      }
      while (v6 != v7);
      v6 = (HttpRequest **)*((_QWORD *)this + 17);
    }
    *((_QWORD *)this + 18) = v6;
  }
}

void sub_1BF0DBC58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'HttpClient::canAcceptBytes(HttpClient *this)
{
  HttpClient::canAcceptBytes((HttpClient *)((char *)this - 16));
}

void HttpClient::errorOccured(uint64_t a1, int a2, __CFError *a3)
{
  char *v5;
  std::string *v6;
  __int128 v7;
  const __CFString *Domain;
  const __CFString *v9;
  const __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int Code;
  std::string v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void *v19[2];
  std::string::size_type v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  std::string v25;

  if (a2)
    v5 = "Write";
  else
    v5 = "Read";
  std::string::basic_string[abi:ne180100]<0>(&v15, v5);
  v6 = std::string::append(&v15, "Stream Callback", 0xFuLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v20 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)v19 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    if (!a3)
      goto LABEL_24;
  }
  else if (!a3)
  {
    goto LABEL_24;
  }
  memset(&v15, 0, sizeof(v15));
  memset(&v25, 0, sizeof(v25));
  Domain = CFErrorGetDomain(a3);
  if (Domain)
    ims::convertCFString(Domain, &v15, 0x8000100u);
  CFErrorGetCode(a3);
  v9 = CFErrorCopyFailureReason(a3);
  v10 = v9;
  if (v9)
  {
    ims::convertCFString(v9, &v25, 0x8000100u);
    CFRelease(v10);
  }
  std::string::basic_string[abi:ne180100]<0>(v23, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v11 = ImsLogger::error(ims::_logger, (uint64_t)v23, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Error while connecting to ", 26);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, a1 + 72);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)":", 1);
  *(_BYTE *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  if (v22 < 0)
    operator delete(__p[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  std::string::basic_string[abi:ne180100]<0>(v23, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v12 = ImsLogger::error(ims::_logger, (uint64_t)v23, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Context: ", 9);
  *(_BYTE *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 32))(v12, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)" - Domain: ", 11);
  *(_BYTE *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v12 + 32))(v12, &v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)", Code: ", 8);
  *(_BYTE *)(v12 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)", Reason: ", 10);
  *(_BYTE *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v12 + 32))(v12, &v25);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v12 + 17) = 0;
  if (v22 < 0)
    operator delete(__p[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
LABEL_24:
  v13 = *(_QWORD *)(a1 + 56);
  Code = CFErrorGetCode(a3);
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
  v15.__r_.__value_.__l.__size_ = (std::string::size_type)&_posixDomain;
  LODWORD(v15.__r_.__value_.__r.__words[2]) = Code;
  (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v13 + 64))(v13, a1, &v15);
  ImsResult::~ImsResult((ImsResult *)&v15);
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
}

void sub_1BF0DC050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 73) < 0)
    operator delete(*(void **)(v33 - 96));
  if (*(char *)(v33 - 49) < 0)
    operator delete(*(void **)(v33 - 72));
  if (a15 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'HttpClient::errorOccured(uint64_t a1, int a2, __CFError *a3)
{
  HttpClient::errorOccured(a1 - 16, a2, a3);
}

void HttpClient::endEncountered(uint64_t a1, int a2)
{
  uint64_t v3;
  char *v4;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;

  std::string::basic_string[abi:ne180100]<0>(v9, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(v7, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v3 = ImsLogger::debug(ims::_logger, (uint64_t)v9, (uint64_t)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"End of ", 7);
  *(_BYTE *)(v3 + 17) = 0;
  if (a2)
    v4 = "Write";
  else
    v4 = "Read";
  std::string::basic_string[abi:ne180100]<0>(__p, v4);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 32))(v3, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" stream", 7);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1BF0DC240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void HttpClient::_logMsg(HttpClient *this, const HttpMessage *a2)
{
  int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint64_t v14;
  _QWORD *v15;
  const char *v16;
  uint64_t v17;
  _QWORD *v18;
  void *locale;
  uint64_t v20;
  _QWORD *v21;
  const char *v22;
  _QWORD *v23;
  void **v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  const std::locale::facet *v34;
  void **v35;
  uint64_t v36;
  const std::locale::facet *v37;
  _QWORD *v38;
  const std::locale::facet *v39;
  _BYTE *v40;
  void *v41[2];
  char v42;
  void *v43[2];
  unsigned __int8 v44;
  void *__p[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  void *v49[2];
  __int128 v50;
  __int128 v51;
  _OWORD v52[9];
  uint64_t v53;
  std::locale v54;
  uint64_t v55;
  unsigned __int8 v56;
  void **v57;
  uint64_t v58;
  uint64_t v59;

  v57 = 0;
  v58 = 0;
  v59 = 0;
  HttpMessage::copySerializedMessage(a2, &v57);
  v4 = (*(uint64_t (**)(const HttpMessage *))(*(_QWORD *)a2 + 24))(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(&v54, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if ((char)v56 < 0)
    operator delete(v54.__locale_);
  if (SBYTE7(v46) < 0)
    operator delete(__p[0]);
  v53 = 0;
  v51 = 0u;
  memset(v52, 0, sizeof(v52));
  *(_OWORD *)v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  *(_OWORD *)__p = 0u;
  v46 = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"==================== ", 21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"[SID:", 5);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = *((char *)this + 55);
  if (v8 >= 0)
    v9 = (char *)this + 32;
  else
    v9 = (char *)*((_QWORD *)this + 4);
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)this + 55);
  else
    v10 = *((_QWORD *)this + 5);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"] ", 2);
  if (*((_BYTE *)this + 124))
    v13 = "HTTPS";
  else
    v13 = "HTTP";
  if (*((_BYTE *)this + 124))
    v14 = 5;
  else
    v14 = 4;
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
  if (v4)
    v16 = " Request ";
  else
    v16 = " Response ";
  if (v4)
    v17 = 9;
  else
    v17 = 10;
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
  HttpStreamPair::_hostPortInfo(*((_QWORD *)this + 8), (int (*)(int, sockaddr *, unsigned int *))MEMORY[0x1E0C83810], &v54);
  if ((v56 & 0x80u) == 0)
    locale = &v54;
  else
    locale = v54.__locale_;
  if ((v56 & 0x80u) == 0)
    v20 = v56;
  else
    v20 = v55;
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)locale, v20);
  if (v4)
    v22 = " -----> ";
  else
    v22 = " <----- ";
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, 8);
  HttpStreamPair::_hostPortInfo(*((_QWORD *)this + 8), MEMORY[0x1E0C83748], v43);
  if ((v44 & 0x80u) == 0)
    v24 = v43;
  else
    v24 = (void **)v43[0];
  if ((v44 & 0x80u) == 0)
    v25 = v44;
  else
    v25 = (uint64_t)v43[1];
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
  v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" [", 2);
  v28 = *((char *)this + 95);
  if (v28 >= 0)
    v29 = (char *)this + 72;
  else
    v29 = (char *)*((_QWORD *)this + 9);
  if (v28 >= 0)
    v30 = *((unsigned __int8 *)this + 95);
  else
    v30 = *((_QWORD *)this + 10);
  v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v29, v30);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)":", 1);
  v32 = (_QWORD *)std::ostream::operator<<();
  v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"] ====================", 22);
  std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(_QWORD *)(*v33 - 24)));
  v34 = std::locale::use_facet((const std::locale *)v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale((std::locale *)v41);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v44 < 0)
    operator delete(v43[0]);
  if ((char)v56 < 0)
    operator delete(v54.__locale_);
  if (v59 >= 0)
    v35 = (void **)&v57;
  else
    v35 = v57;
  if (v59 >= 0)
    v36 = HIBYTE(v59);
  else
    v36 = v58;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v35, v36);
  std::ios_base::getloc((const std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3)));
  v37 = std::locale::use_facet(&v54, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
  std::locale::~locale(&v54);
  std::ostream::put();
  std::ostream::flush();
  v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"==============================================================================================================================================", 142);
  std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(_QWORD *)(*v38 - 24)));
  v39 = std::locale::use_facet(&v54, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
  std::locale::~locale(&v54);
  std::ostream::put();
  std::ostream::flush();
  std::string::basic_string[abi:ne180100]<0>(&v54, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(v43, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v40 = (_BYTE *)ImsLogger::debug(ims::_logger, (uint64_t)&v54, (uint64_t)v43);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)v40 + 1), (uint64_t)": ", 2);
  v40[17] = 0;
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v40[17] = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[1], v41);
  (*(void (**)(_BYTE *, void **))(*(_QWORD *)v40 + 32))(v40, v41);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v40[17] = 0;
  if (v42 < 0)
    operator delete(v41[0]);
  if ((char)v44 < 0)
    operator delete(v43[0]);
  if ((char)v56 < 0)
    operator delete(v54.__locale_);
  __p[0] = *(void **)MEMORY[0x1E0DE4F60];
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  __p[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  if (SHIBYTE(v50) < 0)
    operator delete(v49[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B8707C](v52);
  if (SHIBYTE(v59) < 0)
    operator delete(v57);
}

void sub_1BF0DC828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 97) < 0)
    operator delete(*(void **)(v26 - 120));
  std::ostringstream::~ostringstream((uint64_t)&a21);
  if (*(char *)(v26 - 73) < 0)
    operator delete(*(void **)(v26 - 96));
  _Unwind_Resume(a1);
}

BOOL HttpClient::_isFullBodyPresentInMessage(CFHTTPMessageRef *this, __CFHTTPMessage *a2, CFIndex *a3, unint64_t *a4)
{
  const __CFString *v7;
  int v8;
  const __CFData *v9;
  CFIndex Length;
  _BOOL8 v11;
  std::string __str;
  _QWORD v14[2];

  v7 = CFHTTPMessageCopyHeaderFieldValue(this[20], CFSTR("Content-Length"));
  v14[0] = &off_1E78EAB58;
  v14[1] = v7;
  if (!v7)
  {
    ims::CFType::~CFType((ims::CFType *)v14);
    *(_QWORD *)a2 = 0;
    return 1;
  }
  ims::CFString::asString(v7, (const void *)0x8000100, &__str);
  v8 = std::stoi(&__str, 0, 10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  ims::CFType::~CFType((ims::CFType *)v14);
  *(_QWORD *)a2 = v8;
  if (!v8)
    return 1;
  v9 = CFHTTPMessageCopyBody(this[20]);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78D9E48;
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  if (v9)
  {
    Length = CFDataGetLength(v9);
    *a3 = Length;
    v11 = Length == *(_QWORD *)a2;
  }
  else
  {
    v11 = 0;
  }
  ims::CFType::~CFType((ims::CFType *)&__str);
  return v11;
}

void sub_1BF0DCA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  ims::CFType::~CFType((ims::CFType *)&__p);
  _Unwind_Resume(a1);
}

void HttpClient::_handleHttpResponse(HttpClient *this, __CFHTTPMessage *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  std::string::size_type size;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[5];
  void *v14[2];
  __int128 v15;
  std::string __p;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void *v20[2];
  char v21;
  std::string v22;
  std::string v23;

  *(_OWORD *)v14 = 0u;
  v15 = 0u;
  memset(v13, 0, sizeof(v13));
  std::string::basic_string[abi:ne180100]<0>(&__p, "1.1");
  HttpMessage::HttpMessage(v13, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v13[0] = off_1E78D2950;
  v14[1] = 0;
  v15 = 0uLL;
  v14[0] = (void *)CFHTTPMessageGetResponseStatusCode(a2);
  if ((HttpMessage::deserialize((HttpMessage *)v13, a2) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(&v23, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Failed to deserialize Http response", 35);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_12;
  }
  HttpClient::_logMsg(this, (const HttpMessage *)v13);
  v4 = (char *)v14[0];
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(&v23, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Received ", 9);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" response", 9);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((unint64_t)(v4 - 200) <= 0x63)
  {
    v6 = *((_QWORD *)this + 7);
    if (SHIBYTE(v13[4]) < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)&v13[3] + 1), *(std::string::size_type *)&v13[4]);
    else
      __p = *(std::string *)((char *)&v13[3] + 8);
    (*(void (**)(uint64_t, HttpClient *, std::string *))(*(_QWORD *)v6 + 40))(v6, this, &__p);
LABEL_29:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_32;
    v9 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_31;
  }
  if ((unint64_t)(v4 - 300) <= 0x63)
  {
    memset(&__p, 0, sizeof(__p));
    std::string::basic_string[abi:ne180100]<0>(&v23, "Location");
    HttpMessage::findHeader((uint64_t)v13, (uint64_t)&v23, &__p);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v23, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(&v22, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)&v23, (uint64_t)&v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"HTTP request to be redirected: ", 31);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v8 + 32))(v8, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    (*(void (**)(_QWORD, HttpClient *, std::string *))(**((_QWORD **)this + 7) + 56))(*((_QWORD *)this + 7), this, &__p);
    goto LABEL_29;
  }
  if (v4 != (char *)407 && v4 != (char *)401)
  {
    if ((unint64_t)(v4 - 400) <= 0x12B)
    {
      v17 = 0u;
      v18 = 0u;
      v19 = 0u;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&SipResultDomain::_domain;
      LODWORD(__p.__r_.__value_.__r.__words[2]) = (_DWORD)v4;
      (*(void (**)(_QWORD, HttpClient *, std::string *))(**((_QWORD **)this + 7) + 64))(*((_QWORD *)this + 7), this, &__p);
      ImsResult::~ImsResult((ImsResult *)&__p);
      goto LABEL_32;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(&v23, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"HTTP Response code ", 19);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" not handled", 12);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_12:
    *(_BYTE *)(v7 + 17) = 0;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    goto LABEL_29;
  }
  memset(&v23, 0, sizeof(v23));
  memset(&v22, 0, sizeof(v22));
  if (v14[0] == (void *)407)
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "Proxy-Authenticate");
    HttpMessage::findHeader((uint64_t)v13, (uint64_t)v20, &__p);
  }
  else
  {
    if (v14[0] != (void *)401)
      goto LABEL_40;
    std::string::basic_string[abi:ne180100]<0>(v20, "WWW-Authenticate");
    HttpMessage::findHeader((uint64_t)v13, (uint64_t)v20, &__p);
  }
  v23 = __p;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (v21 < 0)
    operator delete(v20[0]);
LABEL_40:
  std::string::basic_string[abi:ne180100]<0>(v20, "Set-Cookie");
  HttpMessage::findHeader((uint64_t)v13, (uint64_t)v20, &__p);
  v22 = __p;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (v21 < 0)
    operator delete(v20[0]);
  size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v23.__r_.__value_.__l.__size_;
  if (size)
  {
    (*(void (**)(_QWORD, HttpClient *, std::string *, std::string *))(**((_QWORD **)this + 7) + 48))(*((_QWORD *)this + 7), this, &v23, &v22);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v20, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Challenge response doesn't have WWW/Proxy authentication header", 63);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (v21 < 0)
      operator delete(v20[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v12 = *((_QWORD *)this + 7);
    v19 = 0uLL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 0x40000000;
    v18 = 0uLL;
    v17 = 0uLL;
    (*(void (**)(uint64_t, HttpClient *, std::string *))(*(_QWORD *)v12 + 64))(v12, this, &__p);
    ImsResult::~ImsResult((ImsResult *)&__p);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = (void *)v23.__r_.__value_.__r.__words[0];
LABEL_31:
    operator delete(v9);
  }
LABEL_32:
  *(_QWORD *)&v13[0] = off_1E78D2950;
  if (SHIBYTE(v15) < 0)
    operator delete(v14[1]);
  HttpMessage::~HttpMessage((void **)v13);
}

void sub_1BF0DD17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  HttpResponse::~HttpResponse((void **)&a9);
  _Unwind_Resume(a1);
}

uint64_t HttpClient::readDataFromStream(HttpStreamPair **this, void *a2, unint64_t *a3)
{
  uint64_t v6;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(v10, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"readDataFromStream: Expected length: ", 37);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  return HttpStreamPair::readData(this[8], a2, a3);
}

void sub_1BF0DD3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'HttpClient::readDataFromStream(HttpStreamPair **this, void *a2, unint64_t *a3)
{
  return HttpClient::readDataFromStream(this - 1, a2, a3);
}

uint64_t HttpClient::writeDataToStream(HttpStreamPair **this, const UInt8 *a2, CFIndex *a3)
{
  uint64_t v6;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(v10, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"writeDataToStream: Max length: ", 31);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  return HttpStreamPair::writeData(this[8], a2, a3);
}

void sub_1BF0DD51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'HttpClient::writeDataToStream(HttpStreamPair **this, const UInt8 *a2, CFIndex *a3)
{
  return HttpClient::writeDataToStream(this - 1, a2, a3);
}

void HttpClient::onConnected(HttpClient *this)
{
  uint64_t v2;
  HttpRequest **v3;
  HttpRequest **v4;
  HttpRequest *v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;

  *((_WORD *)this + 84) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 120))(*((_QWORD *)this + 16));
  std::string::basic_string[abi:ne180100]<0>(v8, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Negotiated Cipher: ", 19);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  v3 = (HttpRequest **)*((_QWORD *)this + 17);
  v4 = (HttpRequest **)*((_QWORD *)this + 18);
  if (v3 != v4)
  {
    do
    {
      v5 = *v3;
      HttpClient::_sendRequest(this, *v3);
      if (v5)
        (*(void (**)(HttpRequest *))(*(_QWORD *)v5 + 8))(v5);
      ++v3;
    }
    while (v3 != v4);
    v3 = (HttpRequest **)*((_QWORD *)this + 17);
  }
  *((_QWORD *)this + 18) = v3;
}

void sub_1BF0DD6A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'HttpClient::onConnected(HttpClient *this)
{
  HttpClient::onConnected((HttpClient *)((char *)this - 8));
}

uint64_t HttpClient::fetchNegotiatedCipher(HttpClient *this)
{
  return *((unsigned __int16 *)this + 84);
}

void AVCRTPStackController::initialize(uint64_t a1, __int128 *a2, char a3)
{
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  capabilities::radio *v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  _QWORD v41[5];
  std::string v42;
  char v43;
  char v44;
  mach_msg_type_number_t task_info_outCnt[2];
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  dispatch_object_t object;
  void *v52[2];
  char v53;
  __int128 task_info_out;
  __int128 v55;
  void *__p[2];
  char v57;
  _QWORD v58[5];
  std::string v59;
  char v60;
  _QWORD v61[2];
  _QWORD v62[2];
  uint64_t v63;
  _QWORD v64[4];

  v64[1] = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1))
  {
    task_info_out = 0uLL;
    *(_QWORD *)&v55 = 0;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&task_info_out, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      task_info_out = *a2;
      *(_QWORD *)&v55 = *((_QWORD *)a2 + 2);
    }
    v58[0] = MEMORY[0x1E0C809B0];
    v58[1] = 3321888768;
    v58[2] = ___ZN21AVCRTPStackController10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEh_block_invoke;
    v58[3] = &__block_descriptor_65_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e5_v8__0l;
    v58[4] = a1;
    if (SBYTE7(v55) < 0)
    {
      std::string::__init_copy_ctor_external(&v59, (const std::string::value_type *)task_info_out, *((std::string::size_type *)&task_info_out + 1));
    }
    else
    {
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = task_info_out;
      v59.__r_.__value_.__r.__words[2] = v55;
    }
    v60 = a3;
    ims::performBlock((IMSClientManager *)v58);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    {
      v10 = (void *)v59.__r_.__value_.__r.__words[0];
LABEL_85:
      operator delete(v10);
      goto LABEL_86;
    }
    goto LABEL_86;
  }
  std::string::basic_string[abi:ne180100]<0>(&task_info_out, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_3_16);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&task_info_out, (uint64_t)__p);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" created", 8);
  *(_BYTE *)(v6 + 17) = 0;
  v8 = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v57 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v55) < 0)
    operator delete((void *)task_info_out);
  v9 = (void *)MEMORY[0x1C3B876AC](v8);
  task_info_out = 0u;
  v55 = 0u;
  task_info_outCnt[0] = 8;
  if (!task_info(*MEMORY[0x1E0C83DA0], 0xFu, (task_info_t)&task_info_out, task_info_outCnt)
    && (v11 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", &task_info_out, 32)) != 0
    && (v12 = *MEMORY[0x1E0D49DF0]) != 0
    && (v13 = *MEMORY[0x1E0D49E08]) != 0
    && (v14 = *MEMORY[0x1E0D497E0]) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "avc.rtp.controller");
    std::string::basic_string[abi:ne180100]<0>(v52, (char *)&str_3_16);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v15 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"initialize", 10);
    *(_BYTE *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" [HostProcessAttribution=", 25);
    *(_BYTE *)(v15 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" AuditToken=", 12);
    *(_BYTE *)(v15 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" BundleID=", 10);
    *(_BYTE *)(v15 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
    if (v53 < 0)
      operator delete(v52[0]);
    if (v57 < 0)
      operator delete(__p[0]);
    v61[0] = v12;
    v61[1] = v13;
    v62[0] = v11;
    v62[1] = CFSTR("com.apple.mobilephone");
    v63 = v14;
    v64[0] = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v62, v61, 2);
    v16 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v64, &v63, 1);
    objc_msgSend(MEMORY[0x1E0CF2248], "setAudioSessionProperties:", v16);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "avc.rtp.controller");
    std::string::basic_string[abi:ne180100]<0>(v52, (char *)&str_3_16);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v17 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"initialize", 10);
    *(_BYTE *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)" auditTokenData is null", 23);
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    if (v53 < 0)
      operator delete(v52[0]);
    if (v57 < 0)
      operator delete(__p[0]);
  }
  objc_autoreleasePoolPop(v9);
  v18 = (void *)objc_msgSend(MEMORY[0x1E0CF2278], "getDaemonProcessInfo");
  v19 = (capabilities::radio *)objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", *MEMORY[0x1E0CF2240]), "longLongValue");
  *(_QWORD *)(a1 + 120) = v19;
  if (!*(_BYTE *)(a1 + 161) || *(_BYTE *)(a1 + 160) || !capabilities::radio::mav20Plus(v19))
    goto LABEL_76;
  std::string::basic_string[abi:ne180100]<0>(__p, "ims::AVCRTPStackController::Audio");
  v20 = sImsDispatchQueue;
  if (sImsDispatchQueue)
  {
    object = (dispatch_object_t)sImsDispatchQueue;
  }
  else
  {
    v20 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v20;
    object = v20;
    if (!v20)
      goto LABEL_36;
  }
  dispatch_retain(v20);
LABEL_36:
  std::string::basic_string[abi:ne180100]<0>(v52, "ims");
  v21 = *(std::__shared_weak_count **)(a1 + 16);
  if (v21)
  {
    v22 = *(_QWORD *)(a1 + 8);
    p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
    do
      v24 = __ldxr(p_shared_weak_owners);
    while (__stxr(v24 + 1, p_shared_weak_owners));
    v49 = 0;
    v50 = 0;
    v25 = std::__shared_weak_count::lock(v21);
    v26 = v25;
    if (v25)
    {
      v27 = (unint64_t *)&v25->__shared_weak_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    else
    {
      v22 = 0;
    }
    v29 = v50;
    v49 = v22;
    v50 = v26;
    if (v29)
      std::__shared_weak_count::__release_weak(v29);
    std::__shared_weak_count::__release_weak(v21);
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  else
  {
    v49 = 0;
    v50 = 0;
  }
  IPTelephonyManager::getInstance((uint64_t *)task_info_outCnt);
  IPTelephonyManager::getBBServerConnection(*(IPTelephonyManager **)task_info_outCnt, &v47);
  qmi::Client::createWithQueueLocal();
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 144, &v55);
  qmi::Client::~Client((qmi::Client *)&task_info_out);
  v32 = v48;
  if (v48)
  {
    v33 = (unint64_t *)&v48->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v46;
  if (v46)
  {
    v36 = (unint64_t *)&v46->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v50)
    std::__shared_weak_count::__release_weak(v50);
  if (v53 < 0)
    operator delete(v52[0]);
  if (object)
    dispatch_release(object);
  if (v57 < 0)
    operator delete(__p[0]);
  if (*(_QWORD *)(a1 + 144))
  {
    std::string::basic_string[abi:ne180100]<0>(&task_info_out, "avc.rtp.controller");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_3_16);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v38 = ImsLogger::debug(ims::_logger, (uint64_t)&task_info_out, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"AVC AUDIO client successfully created", 37);
    *(_BYTE *)(v38 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v38 + 17) = 0;
    if (v57 < 0)
      operator delete(__p[0]);
    if (SBYTE7(v55) < 0)
      operator delete((void *)task_info_out);
    qmi::Client::start((qmi::Client *)(a1 + 128));
    *(_BYTE *)(a1 + 160) = 1;
LABEL_76:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, 2);
    v39 = 1;
    goto LABEL_77;
  }
  std::string::basic_string[abi:ne180100]<0>(&task_info_out, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_3_16);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v40 = ImsLogger::error(ims::_logger, (uint64_t)&task_info_out, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)"AVC Audio client creation failed", 32);
  *(_BYTE *)(v40 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v40 + 17) = 0;
  if (v57 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v55) < 0)
    operator delete((void *)task_info_out);
  v39 = 0;
LABEL_77:
  task_info_out = 0uLL;
  *(_QWORD *)&v55 = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&task_info_out, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    task_info_out = *a2;
    *(_QWORD *)&v55 = *((_QWORD *)a2 + 2);
  }
  v41[0] = MEMORY[0x1E0C809B0];
  v41[1] = 3321888768;
  v41[2] = ___ZN21AVCRTPStackController10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEh_block_invoke_17;
  v41[3] = &__block_descriptor_66_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e5_v8__0l;
  v41[4] = a1;
  if (SBYTE7(v55) < 0)
  {
    std::string::__init_copy_ctor_external(&v42, (const std::string::value_type *)task_info_out, *((std::string::size_type *)&task_info_out + 1));
  }
  else
  {
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = task_info_out;
    v42.__r_.__value_.__r.__words[2] = v55;
  }
  v43 = a3;
  v44 = v39;
  ims::performBlock((IMSClientManager *)v41);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
  {
    v10 = (void *)v42.__r_.__value_.__r.__words[0];
    goto LABEL_85;
  }
LABEL_86:
  if (SBYTE7(v55) < 0)
    operator delete((void *)task_info_out);
}

void sub_1BF0DE024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,dispatch_object_t object,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a40 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN21AVCRTPStackController10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEh_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  void (***v4)(_QWORD, uint64_t *, uint64_t, uint64_t, _QWORD *);
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[2];
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void (***v22)(_QWORD, _QWORD *, uint64_t, _QWORD, _QWORD *);
  std::__shared_weak_count *v23;

  v2 = *(_QWORD **)(a1 + 32);
  v22 = 0;
  v23 = 0;
  v3 = (std::__shared_weak_count *)v2[4];
  if (v3)
  {
    v23 = std::__shared_weak_count::lock(v3);
    if (v23)
    {
      v4 = (void (***)(_QWORD, uint64_t *, uint64_t, uint64_t, _QWORD *))v2[3];
      v22 = v4;
      if (v4)
      {
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v20, v2 + 1);
        v5 = *(unsigned __int8 *)(a1 + 64);
        v18 = 0;
        v19 = 0;
        v12[0] = &off_1E78B7238;
        v12[1] = &_bambiDomain;
        v13 = 0;
        v16 = 0;
        v17 = 0;
        v14 = 0;
        v15 = 0;
        (**v4)(v4, &v20, a1 + 40, v5, v12);
        ImsResult::~ImsResult((ImsResult *)v12);
        v6 = v21;
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
      }
    }
  }
  v9 = v23;
  if (v23)
  {
    v10 = (unint64_t *)&v23->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BF0DE248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 64);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 48);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

uint64_t AVCRTPStackController::getClientUniquePID(AVCRTPStackController *this)
{
  void *v2;
  uint64_t result;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CF2278], "getDaemonProcessInfo");
  result = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0CF2240]), "longLongValue");
  *((_QWORD *)this + 15) = result;
  return result;
}

void ___ZN21AVCRTPStackController10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEh_block_invoke_17(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  void (***v4)(_QWORD, uint64_t *, uint64_t, uint64_t, _QWORD *);
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[2];
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void (***v23)(_QWORD, _QWORD *, uint64_t, _QWORD, _QWORD *);
  std::__shared_weak_count *v24;

  v2 = *(_QWORD **)(a1 + 32);
  v23 = 0;
  v24 = 0;
  v3 = (std::__shared_weak_count *)v2[4];
  if (v3)
  {
    v24 = std::__shared_weak_count::lock(v3);
    if (v24)
    {
      v4 = (void (***)(_QWORD, uint64_t *, uint64_t, uint64_t, _QWORD *))v2[3];
      v23 = v4;
      if (v4)
      {
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v21, v2 + 1);
        v5 = *(unsigned __int8 *)(a1 + 64);
        v6 = *(_BYTE *)(a1 + 65) == 0;
        v19 = 0;
        v20 = 0;
        v13[0] = &off_1E78B7238;
        v13[1] = &_bambiDomain;
        v14 = v6 << 30;
        v17 = 0;
        v18 = 0;
        v15 = 0;
        v16 = 0;
        (**v4)(v4, &v21, a1 + 40, v5, v13);
        ImsResult::~ImsResult((ImsResult *)v13);
        v7 = v22;
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
      }
    }
  }
  v10 = v24;
  if (v24)
  {
    v11 = (unint64_t *)&v24->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1BF0DE424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 64);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 48);
  _Unwind_Resume(a1);
}

void AVCRTPStackController::~AVCRTPStackController(AVCRTPStackController *this)
{
  uint64_t v2;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;

  *(_QWORD *)this = &off_1E78DE3B0;
  std::string::basic_string[abi:ne180100]<0>(v5, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_3_16);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"~AVCRTPStackController", 22);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  qmi::Client::~Client((qmi::Client *)((char *)this + 128));
  std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::destroy((uint64_t)this + 96, *((_QWORD **)this + 13));
  std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  RTPStackController::~RTPStackController((RTPStackController *)this);
}

{
  AVCRTPStackController::~AVCRTPStackController(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t AVCRTPStackController::getClientUniquePIDStatic(AVCRTPStackController *this)
{
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CF2278], "getDaemonProcessInfo");
  return objc_msgSend((id)objc_msgSend(v1, "objectForKeyedSubscript:", *MEMORY[0x1E0CF2240]), "longLongValue");
}

void AVCRTPStackController::sendNotifyIpVersionReq(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  void *__p[2];
  char v35;
  void *v36[2];
  char v37;

  std::string::basic_string[abi:ne180100]<0>(v36, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_3_16);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v36, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"sendNotifyIpVersionReq", 22);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v35 < 0)
    operator delete(__p[0]);
  if (v37 < 0)
    operator delete(v36[0]);
  if (*(_BYTE *)(a1 + 160))
  {
    v8 = (std::__shared_weak_count *)a2[1];
    if (v8)
    {
      v9 = std::__shared_weak_count::lock(v8);
      v33 = v9;
      if (v9)
      {
        v10 = *a2;
        if (*a2)
        {
          if (*(_BYTE *)(v10 + 584))
          {
            v11 = v10 + 152;
          }
          else
          {
            if (!*(_BYTE *)(v10 + 1328))
            {
              std::string::basic_string[abi:ne180100]<0>(v36, "avc.rtp.controller");
              std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_3_16);
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v26 = ImsLogger::warn(ims::_logger, (uint64_t)v36, (uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"Not enough information to configure with", 40);
              *(_BYTE *)(v26 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v26 + 17) = 0;
              if (v35 < 0)
                operator delete(__p[0]);
              if (v37 < 0)
                operator delete(v36[0]);
              goto LABEL_22;
            }
            v11 = v10 + 1032;
          }
          v16 = *(_QWORD *)(v11 + 8);
          v17 = *(std::__shared_weak_count **)(v11 + 16);
          v32 = v17;
          if (v17)
          {
            p_shared_owners = (unint64_t *)&v17->__shared_owners_;
            do
              v19 = __ldxr(p_shared_owners);
            while (__stxr(v19 + 1, p_shared_owners));
          }
          if (!v16)
          {
            std::string::basic_string[abi:ne180100]<0>(v36, "avc.rtp.controller");
            std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_3_16);
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v25 = ImsLogger::error(ims::_logger, (uint64_t)v36, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"local address is null", 21);
            *(_BYTE *)(v25 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v25 + 17) = 0;
            if (v35 < 0)
              operator delete(__p[0]);
            if (v37 < 0)
              operator delete(v36[0]);
LABEL_59:
            if (v17)
            {
              v30 = (unint64_t *)&v17->__shared_owners_;
              do
                v31 = __ldaxr(v30);
              while (__stlxr(v31 - 1, v30));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                std::__shared_weak_count::__release_weak(v17);
              }
            }
            v9 = v33;
            if (!v33)
              return;
LABEL_22:
            v14 = (unint64_t *)&v9->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
            return;
          }
          v20 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 128))(v16);
          v21 = v20[23];
          if ((v21 & 0x80u) == 0)
            v22 = v20[23];
          else
            v22 = *((_QWORD *)v20 + 1);
          if (v22 == 3)
          {
            if ((v21 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v20, &IpAddress::kAddressTypeIPv6, *((_QWORD *)v20 + 1)))
                v24 = 1;
              else
                v24 = 2;
              goto LABEL_54;
            }
            if (!v20[23])
            {
LABEL_41:
              v24 = 1;
              goto LABEL_54;
            }
            v23 = &IpAddress::kAddressTypeIPv6;
            while (*v20 == *(unsigned __int8 *)v23)
            {
              ++v20;
              v23 = (__int128 *)((char *)v23 + 1);
              if (!--v21)
                goto LABEL_41;
            }
          }
          v24 = 2;
LABEL_54:
          v27 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v10 + 128));
          v36[0] = *(void **)(v10 + 120);
          v36[1] = v27;
          AVCRTPStackController::sendNotifyIpVersionReq((AVCRTPStackController *)a1, *((_DWORD *)v36[0] + 1019), v24);
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
          v17 = v32;
          goto LABEL_59;
        }
      }
    }
    else
    {
      v9 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(v36, "avc.rtp.controller");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_3_16);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v13 = ImsLogger::error(ims::_logger, (uint64_t)v36, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"SDPSession expired in AVCRTPStackController::sendNotifyIpVersionReq", 67);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    if (v35 < 0)
      operator delete(__p[0]);
    if (v37 < 0)
      operator delete(v36[0]);
    if (v9)
      goto LABEL_22;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v36, "avc.rtp.controller");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_3_16);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v12 = ImsLogger::error(ims::_logger, (uint64_t)v36, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"SVC_AUDIO service is not initialized.", 37);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    if (v35 < 0)
      operator delete(__p[0]);
    if (v37 < 0)
      operator delete(v36[0]);
  }
}

void sub_1BF0DEB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void AVCRTPStackController::sendNotifyIpVersionReq(AVCRTPStackController *this, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  const void **v10;
  char *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  _QWORD v28[5];
  void *__p;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  void *v34;
  void *v35[2];
  __int128 v36;
  void *aBlock[2];
  void (*v38)(uint64_t, QMIServiceMsg *);
  void *v39;
  _QWORD *v40;

  std::string::basic_string[abi:ne180100]<0>(aBlock, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_3_16);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)aBlock, (uint64_t)&__p);
  if (!this)
    __cxa_bad_typeid();
  v7 = v6;
  v8 = *(_QWORD **)(v6 + 8);
  v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"sendNotifyIpVersionReq", 22);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v32 < 0)
    operator delete(__p);
  if (SHIBYTE(v38) < 0)
    operator delete(aBlock[0]);
  if (*((_BYTE *)this + 160))
  {
    *(_OWORD *)v35 = 0u;
    v36 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v35);
    v10 = (const void **)v35[1];
    if (v35[1] != (void *)v36)
    {
      while (*((_BYTE *)*v10 + 8) != 1)
      {
        if (++v10 == (const void **)v36)
          goto LABEL_18;
      }
    }
    if (v10 == (const void **)v36)
    {
LABEL_18:
      v14 = operator new();
      v15 = v14;
      *(_BYTE *)(v14 + 8) = 1;
      *(_QWORD *)v14 = &off_1E78DE2B0;
      *(_DWORD *)(v14 + 12) = 0;
      v12 = (_DWORD *)(v14 + 12);
      *(_DWORD *)(v14 + 16) = 0;
      v16 = v36;
      if ((unint64_t)v36 >= *((_QWORD *)&v36 + 1))
      {
        v18 = (uint64_t)(v36 - (unint64_t)v35[1]) >> 3;
        if ((unint64_t)(v18 + 1) >> 61)
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        v19 = (uint64_t)(*((_QWORD *)&v36 + 1) - (unint64_t)v35[1]) >> 2;
        if (v19 <= v18 + 1)
          v19 = v18 + 1;
        if (*((_QWORD *)&v36 + 1) - (unint64_t)v35[1] >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        if (v20)
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v36 + 8, v20);
        else
          v21 = 0;
        v22 = (uint64_t *)&v21[8 * v18];
        v23 = &v21[8 * v20];
        *v22 = v15;
        v17 = v22 + 1;
        v25 = (char *)v35[1];
        v24 = (char *)v36;
        if ((void *)v36 != v35[1])
        {
          do
          {
            v26 = *((_QWORD *)v24 - 1);
            v24 -= 8;
            *--v22 = v26;
          }
          while (v24 != v25);
          v24 = (char *)v35[1];
        }
        v35[1] = v22;
        *(_QWORD *)&v36 = v17;
        *((_QWORD *)&v36 + 1) = v23;
        if (v24)
          operator delete(v24);
      }
      else
      {
        *(_QWORD *)v36 = v14;
        v17 = (_QWORD *)(v16 + 8);
      }
      *(_QWORD *)&v36 = v17;
    }
    else
    {
      if (!v11)
        __cxa_bad_cast();
      v12 = v11 + 12;
    }
    *v12 = a3;
    v12[1] = a2;
    __p = (char *)this + 128;
    v30 = QMIServiceMsg::create();
    v31 = 25000;
    v33 = 0;
    v34 = 0;
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = ___ZN21AVCRTPStackController22sendNotifyIpVersionReqEjj_block_invoke_2;
    v28[3] = &__block_descriptor_40_e10_v16__0r_v8l;
    v28[4] = this;
    aBlock[0] = (void *)MEMORY[0x1E0C809B0];
    aBlock[1] = (void *)3221225472;
    v38 = ___ZNO3qmi6Client9SendProxy8callbackIRKN5audio15NotifyIpVersion8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    v39 = &unk_1E78DE2E0;
    v40 = v28;
    v27 = _Block_copy(aBlock);
    v34 = v27;
    if (v30)
    {
      qmi::Client::send();
      v27 = v34;
    }
    if (v27)
      _Block_release(v27);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v35);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(aBlock, "avc.rtp.controller");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_3_16);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v13 = ImsLogger::error(ims::_logger, (uint64_t)aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"SVC_AUDIO service is not initialized.", 37);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    if (v32 < 0)
      operator delete(__p);
    if (SHIBYTE(v38) < 0)
      operator delete(aBlock[0]);
  }
}

void sub_1BF0DEFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 81) < 0)
    operator delete(*(void **)(v22 - 104));
  _Unwind_Resume(exception_object);
}

void AVCRTPStackController::sendNotifyIpVersionReq(AVCRTPStackController *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(v10, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_3_16);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v10, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"sendNotifyIpVersionReq", 22);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  AVCRTPStackController::sendNotifyIpVersionReq(this, a2, 0);
}

void sub_1BF0DF180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN21AVCRTPStackController22sendNotifyIpVersionReqEjj_block_invoke_2(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  BOOL v8;
  char *v9;
  void *v10[2];
  void (*v11)(uint64_t);
  void *v12;
  _QWORD *v13;
  std::string v14;
  BOOL v15;
  std::string __p;

  v3 = *(_QWORD **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(v10, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_3_16);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v10, (uint64_t)&__p);
  if (!v3)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*v3 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*v3 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"handleNotifyIpVersionResp", 25);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11) < 0)
    operator delete(v10[0]);
  v8 = *(_DWORD *)(a2 + 4) != 0;
  memset(&__p, 0, sizeof(__p));
  v9 = (char *)qmi::asString();
  std::string::basic_string[abi:ne180100]<0>(&__p, v9);
  v10[0] = (void *)MEMORY[0x1E0C809B0];
  v10[1] = (void *)3321888768;
  v11 = ___ZN21AVCRTPStackController25handleNotifyIpVersionRespERKN5audio15NotifyIpVersion8ResponseE_block_invoke;
  v12 = &__block_descriptor_65_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e5_v8__0l;
  v13 = v3;
  v15 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v14 = __p;
  ims::performBlock((IMSClientManager *)v10);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF0DF38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN21AVCRTPStackController25handleNotifyIpVersionRespERKN5audio15NotifyIpVersion8ResponseE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  _QWORD *v10;
  size_t v11;
  _QWORD v12[2];
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 64))
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "avc.rtp.controller");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_3_16);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::error(ims::_logger, (uint64_t)v19, (uint64_t)__p);
    if (!v1)
      __cxa_bad_typeid();
    v4 = v3;
    v5 = *(_QWORD **)(v3 + 8);
    v6 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v6);
    *(_BYTE *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"handleNotifyIpVersionResp_block_invoke", 38);
    *(_BYTE *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" Error  ", 8);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, a1 + 40);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if (v18 < 0)
      operator delete(__p[0]);
    if (v20 < 0)
      operator delete(v19[0]);
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v12[0] = &off_1E78B7238;
    v12[1] = &_bambiDomain;
    v13 = 0x40000000;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 48))(v1, v12);
    ImsResult::~ImsResult((ImsResult *)v12);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "avc.rtp.controller");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_3_16);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::debug(ims::_logger, (uint64_t)v19, (uint64_t)__p);
    if (!v1)
      __cxa_bad_typeid();
    v8 = v7;
    v9 = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v10 = *(_QWORD **)(v7 + 8);
    v11 = strlen(v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v9, v11);
    *(_BYTE *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"handleNotifyIpVersionResp_block_invoke", 38);
    *(_BYTE *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" Success", 8);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v18 < 0)
      operator delete(__p[0]);
    if (v20 < 0)
      operator delete(v19[0]);
  }
}

void sub_1BF0DF6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (*(char *)(v24 - 49) < 0)
    operator delete(*(void **)(v24 - 72));
  _Unwind_Resume(exception_object);
}

void AVCRTPStackController::stackError(_QWORD *a1, const ImsResult *a2)
{
  _BYTE v4[72];
  _QWORD v5[5];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___ZN21AVCRTPStackController10stackErrorE9ImsResult_block_invoke;
  v5[3] = &__block_descriptor_40_e5_v8__0l;
  v5[4] = a1;
  ims::performBlock((IMSClientManager *)v5);
  ImsResult::ImsResult((ImsResult *)v4, a2);
  RTPStackController::stackError(a1, (const ImsResult *)v4);
  ImsResult::~ImsResult((ImsResult *)v4);
}

void sub_1BF0DF76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ImsResult::~ImsResult((ImsResult *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN21AVCRTPStackController10stackErrorE9ImsResult_block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (void *)objc_msgSend(MEMORY[0x1E0CF2278], "getDaemonProcessInfo");
  result = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0CF2240]), "longLongValue");
  *(_QWORD *)(v1 + 120) = result;
  return result;
}

void AVCRTPStackController::cleanup(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  BOOL v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  _QWORD *v46;
  void **v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  void **v51;
  uint64_t *v52;
  uint64_t **v53;
  uint64_t **v54;
  void *v55;
  uint64_t v56;
  void *__p;
  std::__shared_weak_count *v58;
  char v59;
  void *v60;
  std::__shared_weak_count *v61;
  char v62;

  std::string::basic_string[abi:ne180100]<0>(&v60, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_3_16);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v60, (uint64_t)&__p);
  if (!a1)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"cleanup", 7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [stackId=", 10);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *))(*(_QWORD *)v5 + 32))(v5, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v59 < 0)
    operator delete(__p);
  if (v62 < 0)
    operator delete(v60);
  v55 = a2;
  v56 = a1;
  v60 = a2;
  v53 = (uint64_t **)(a1 + 72);
  v8 = std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 72), (void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v60);
  v9 = (uint64_t *)v8[7];
  v10 = v8 + 8;
  if (v9 != v8 + 8)
  {
    do
    {
      v11 = v9[5];
      v12 = (std::__shared_weak_count *)v9[6];
      if (v12)
      {
        p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
        do
          v14 = __ldxr(p_shared_weak_owners);
        while (__stxr(v14 + 1, p_shared_weak_owners));
      }
      std::string::basic_string[abi:ne180100]<0>(&v60, "avc.rtp.controller");
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_3_16);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v15 = ImsLogger::debug(ims::_logger, (uint64_t)&v60, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Removing cached audio session ", 30);
      *(_BYTE *)(v15 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v15 + 17) = 0;
      if (v59 < 0)
        operator delete(__p);
      if (v62 < 0)
      {
        operator delete(v60);
        if (v12)
        {
LABEL_16:
          v16 = std::__shared_weak_count::lock(v12);
          v61 = v16;
          if (v16)
          {
            v17 = v16;
            v60 = (void *)v11;
            if (!v11)
              goto LABEL_25;
            __p = (void *)(v11 + 24);
            v58 = v16;
            p_shared_owners = (unint64_t *)&v16->__shared_owners_;
            do
              v19 = __ldxr(p_shared_owners);
            while (__stxr(v19 + 1, p_shared_owners));
            MediaSessionDriver::cancelAllTimers((void ***)(v11 + 24));
            do
              v20 = __ldaxr(p_shared_owners);
            while (__stlxr(v20 - 1, p_shared_owners));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
            v17 = v61;
            if (v61)
            {
LABEL_25:
              v21 = (unint64_t *)&v17->__shared_owners_;
              do
                v22 = __ldaxr(v21);
              while (__stlxr(v22 - 1, v21));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                std::__shared_weak_count::__release_weak(v17);
              }
            }
          }
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      else if (v12)
      {
        goto LABEL_16;
      }
      v23 = (uint64_t *)v9[1];
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (uint64_t *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (uint64_t *)v9[2];
          v25 = *v24 == (_QWORD)v9;
          v9 = v24;
        }
        while (!v25);
      }
      v9 = v24;
    }
    while (v24 != v10);
  }
  if ((void **)(v56 + 80) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v53, (void **)v55))
  {
    v60 = v55;
    v26 = std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v53, (void **)v55, (uint64_t)&std::piecewise_construct, (__int128 **)&v60);
    v27 = v26 + 8;
    std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::destroy((uint64_t)(v26 + 7), (_QWORD *)v26[8]);
    *(v27 - 1) = v27;
    *v27 = 0;
    v27[1] = 0;
    std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__erase_unique<std::string>((void ***)v53, (void **)v55);
  }
  v60 = v55;
  v54 = (uint64_t **)(v56 + 96);
  v28 = std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v56 + 96), (void **)v55, (__int128 **)&v60);
  v29 = (uint64_t *)v28[7];
  v30 = v28 + 8;
  if (v29 != v28 + 8)
  {
    do
    {
      v31 = v29[5];
      v32 = (std::__shared_weak_count *)v29[6];
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_weak_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      std::string::basic_string[abi:ne180100]<0>(&v60, "avc.rtp.controller");
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_3_16);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v35 = ImsLogger::debug(ims::_logger, (uint64_t)&v60, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"Removing cached text session ", 29);
      *(_BYTE *)(v35 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v35 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v35 + 17) = 0;
      if (v59 < 0)
        operator delete(__p);
      if (v62 < 0)
      {
        operator delete(v60);
        if (v32)
        {
LABEL_48:
          v36 = std::__shared_weak_count::lock(v32);
          v61 = v36;
          if (v36)
          {
            v37 = v36;
            v60 = (void *)v31;
            if (!v31)
              goto LABEL_57;
            __p = (void *)(v31 + 24);
            v58 = v36;
            v38 = (unint64_t *)&v36->__shared_owners_;
            do
              v39 = __ldxr(v38);
            while (__stxr(v39 + 1, v38));
            MediaSessionDriver::cancelAllTimers((void ***)(v31 + 24));
            do
              v40 = __ldaxr(v38);
            while (__stlxr(v40 - 1, v38));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
            v37 = v61;
            if (v61)
            {
LABEL_57:
              v41 = (unint64_t *)&v37->__shared_owners_;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
          }
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      else if (v32)
      {
        goto LABEL_48;
      }
      v43 = (uint64_t *)v29[1];
      if (v43)
      {
        do
        {
          v44 = v43;
          v43 = (uint64_t *)*v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          v44 = (uint64_t *)v29[2];
          v25 = *v44 == (_QWORD)v29;
          v29 = v44;
        }
        while (!v25);
      }
      v29 = v44;
    }
    while (v44 != v30);
  }
  if ((void **)(v56 + 104) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v54, (void **)v55))
  {
    v60 = v55;
    v45 = std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v54, (void **)v55, (__int128 **)&v60);
    v46 = v45 + 8;
    std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::destroy((uint64_t)(v45 + 7), (_QWORD *)v45[8]);
    *(v46 - 1) = v46;
    *v46 = 0;
    v46[1] = 0;
    v47 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v54, (void **)v55);
    if ((void **)(v56 + 104) != v47)
    {
      v48 = (uint64_t *)v47;
      v49 = (uint64_t *)v47[1];
      if (v49)
      {
        do
        {
          v50 = v49;
          v49 = (uint64_t *)*v49;
        }
        while (v49);
      }
      else
      {
        v51 = v47;
        do
        {
          v50 = (uint64_t *)v51[2];
          v25 = *v50 == (_QWORD)v51;
          v51 = (void **)v50;
        }
        while (!v25);
      }
      if (*v54 == (uint64_t *)v47)
        *v54 = v50;
      v52 = *(uint64_t **)(v56 + 104);
      --*(_QWORD *)(v56 + 112);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v52, v48);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,0>((uint64_t)(v48 + 4));
      operator delete(v48);
    }
  }
}

void sub_1BF0DFE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AVCRTPStackController::cleanupAfterHandover(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  BOOL v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t v29;
  void *v30;
  void *__p[2];
  char v32;
  void *v33;
  std::__shared_weak_count *v34;
  char v35;

  std::string::basic_string[abi:ne180100]<0>(&v33, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_3_16);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v33, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"cleanupAfterHandover", 20);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [stackId=", 10);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *))(*(_QWORD *)v5 + 32))(v5, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v32 < 0)
    operator delete(__p[0]);
  if (v35 < 0)
    operator delete(v33);
  v33 = a2;
  v28 = (uint64_t **)(a1 + 72);
  v29 = a1;
  v30 = a2;
  v8 = std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 72), (void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v33);
  v9 = (uint64_t *)v8[7];
  v10 = v8 + 8;
  if (v9 != v8 + 8)
  {
    do
    {
      v11 = v9[5];
      v12 = (std::__shared_weak_count *)v9[6];
      if (v12)
      {
        p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
        do
          v14 = __ldxr(p_shared_weak_owners);
        while (__stxr(v14 + 1, p_shared_weak_owners));
      }
      std::string::basic_string[abi:ne180100]<0>(&v33, "avc.rtp.controller");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_3_16);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v15 = ImsLogger::debug(ims::_logger, (uint64_t)&v33, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Removing cached audio session ", 30);
      *(_BYTE *)(v15 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v15 + 17) = 0;
      if (v32 < 0)
        operator delete(__p[0]);
      if (v35 < 0)
      {
        operator delete(v33);
        if (v12)
        {
LABEL_16:
          v16 = std::__shared_weak_count::lock(v12);
          v34 = v16;
          if (v16)
          {
            v17 = v16;
            v33 = (void *)v11;
            if (!v11)
              goto LABEL_25;
            __p[0] = (void *)(v11 + 24);
            __p[1] = v16;
            p_shared_owners = (unint64_t *)&v16->__shared_owners_;
            do
              v19 = __ldxr(p_shared_owners);
            while (__stxr(v19 + 1, p_shared_owners));
            MediaSessionDriver::cancelAllTimers((void ***)(v11 + 24));
            do
              v20 = __ldaxr(p_shared_owners);
            while (__stlxr(v20 - 1, p_shared_owners));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
            v17 = v34;
            if (v34)
            {
LABEL_25:
              v21 = (unint64_t *)&v17->__shared_owners_;
              do
                v22 = __ldaxr(v21);
              while (__stlxr(v22 - 1, v21));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                std::__shared_weak_count::__release_weak(v17);
              }
            }
          }
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      else if (v12)
      {
        goto LABEL_16;
      }
      v23 = (uint64_t *)v9[1];
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (uint64_t *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (uint64_t *)v9[2];
          v25 = *v24 == (_QWORD)v9;
          v9 = v24;
        }
        while (!v25);
      }
      v9 = v24;
    }
    while (v24 != v10);
  }
  if ((void **)(v29 + 80) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v28, (void **)v30))
  {
    v33 = v30;
    v26 = std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v28, (void **)v30, (uint64_t)&std::piecewise_construct, (__int128 **)&v33);
    v27 = v26 + 8;
    std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::destroy((uint64_t)(v26 + 7), (_QWORD *)v26[8]);
    *(v27 - 1) = v27;
    *v27 = 0;
    v27[1] = 0;
    std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__erase_unique<std::string>((void ***)v28, (void **)v30);
  }
}

void sub_1BF0E0304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AVCRTPStackController::createRTPSession(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, int a5@<W4>, __int128 *a6@<X5>, dispatch_object_t *a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  size_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  ImsPrefs *v21;
  std::__shared_weak_count *v22;
  __int128 *v23;
  __int128 *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t **v55;
  uint64_t **v56;
  unint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  ImsPrefs *v63;
  std::__shared_weak_count *v64;
  __int128 *v65;
  __int128 *v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t *v90;
  unint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t **v97;
  unint64_t v98;
  uint64_t **v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  unint64_t v112;
  BOOL v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  unint64_t v118;
  BOOL v119;
  _QWORD *v120;
  uint64_t v121;
  int64x2_t *v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count *v131;
  ImsPrefs *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  uint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count *v160;
  ImsPrefs *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t *v171;
  __int128 *v172;
  __int128 *v175;
  std::__shared_weak_count *v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  __int128 *v181;
  std::__shared_weak_count *v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  __int128 *v185;
  std::__shared_weak_count *v186;
  std::__shared_weak_count *v187;
  std::__shared_weak_count *v188;
  std::__shared_weak_count *v189;
  std::__shared_weak_count *v190;
  uint64_t v191;
  std::__shared_weak_count *v192;
  void *v193;
  std::__shared_weak_count *v194;
  char v195;
  __int128 *v196;
  std::__shared_weak_count *v197;
  char v198;
  __int128 *v199;
  std::__shared_weak_count *v200;

  std::string::basic_string[abi:ne180100]<0>(&v196, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(&v193, (char *)&str_3_16);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v14 = ImsLogger::debug(ims::_logger, (uint64_t)&v196, (uint64_t)&v193);
  if (!a1)
    __cxa_bad_typeid();
  v15 = v14;
  v16 = *(_QWORD **)(v14 + 8);
  v17 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v17);
  *(_BYTE *)(v15 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v15 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"createRTPSession", 16);
  *(_BYTE *)(v15 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v15 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v15 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" stackId=", 9);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v15 + 32))(v15, a6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
  if (v195 < 0)
    operator delete(v193);
  v172 = a6;
  if (v198 < 0)
    operator delete(v196);
  v191 = 0;
  v192 = 0;
  v18 = (std::__shared_weak_count *)a4[1];
  if (!v18 || (v192 = std::__shared_weak_count::lock(v18)) == 0 || (v19 = *a4, (v191 = v19) == 0))
  {
    std::string::basic_string[abi:ne180100]<0>(&v196, "avc.rtp.controller");
    std::string::basic_string[abi:ne180100]<0>(&v193, (char *)&str_3_16);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v58 = ImsLogger::error(ims::_logger, (uint64_t)&v196, (uint64_t)&v193);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v58 + 8), (uint64_t)"SDPSession expired in AVCRTPStackController::createRTPSession", 61);
    *(_BYTE *)(v58 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v58 + 17) = 0;
    if (v195 < 0)
      operator delete(v193);
    if (v198 < 0)
      operator delete(v196);
    *a8 = 0;
    a8[1] = 0;
    goto LABEL_66;
  }
  if (a5 == 4)
  {
    v189 = 0;
    v190 = 0;
    v187 = 0;
    v188 = 0;
    v20 = *(std::__shared_weak_count **)(v19 + 128);
    if (v20)
    {
      v20 = std::__shared_weak_count::lock(v20);
      v188 = v20;
      if (v20)
      {
        v20 = *(std::__shared_weak_count **)(v19 + 120);
        v187 = v20;
      }
    }
    v21 = (ImsPrefs *)SipStack::prefs((SipStack *)v20);
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v196, (_QWORD *)(a1 + 8));
    v23 = v196;
    v22 = v197;
    v185 = v196;
    v186 = v197;
    v24 = *(__int128 **)a2;
    v25 = *(std::__shared_weak_count **)(a2 + 8);
    v26 = (std::__shared_weak_count *)operator new(0x298uLL);
    v26->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    v26->__shared_weak_owners_ = 0;
    v26->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DE310;
    v196 = v24;
    v197 = v25;
    if (v25)
    {
      p_shared_weak_owners = (unint64_t *)&v25->__shared_weak_owners_;
      do
        v29 = __ldxr(p_shared_weak_owners);
      while (__stxr(v29 + 1, p_shared_weak_owners));
    }
    v30 = *(std::__shared_weak_count **)(a1 + 56);
    v193 = *(void **)(a1 + 48);
    v194 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v199 = v23;
    v200 = v22;
    v185 = 0;
    v186 = 0;
    v33 = v26 + 1;
    AVCRTTSession::AVCRTTSession((uint64_t)&v26[1], (uint64_t *)&v196, a3, (uint64_t *)&v193, v21, (uint64_t *)&v199, v172, a7);
    v34 = v200;
    if (v200)
    {
      v35 = (unint64_t *)&v200->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = v194;
    if (v194)
    {
      v38 = (unint64_t *)&v194->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (v197)
      std::__shared_weak_count::__release_weak(v197);
    v189 = v26 + 1;
    v190 = v26;
    shared_weak_owners = (std::__shared_weak_count *)v26[1].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      if (shared_weak_owners->__shared_owners_ != -1)
        goto LABEL_44;
      do
        v41 = __ldxr(p_shared_owners);
      while (__stxr(v41 + 1, p_shared_owners));
      v42 = (unint64_t *)&v26->__shared_weak_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
      v26[1].__shared_owners_ = (uint64_t)v33;
      v26[1].__shared_weak_owners_ = (uint64_t)v26;
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
    else
    {
      do
        v44 = __ldxr(p_shared_owners);
      while (__stxr(v44 + 1, p_shared_owners));
      v45 = (unint64_t *)&v26->__shared_weak_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
      v26[1].__shared_owners_ = (uint64_t)v33;
      v26[1].__shared_weak_owners_ = (uint64_t)v26;
    }
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
LABEL_44:
    if (v186)
    {
      v48 = &v186->__shared_owners_;
      do
        v49 = __ldaxr((unint64_t *)v48);
      while (__stlxr(v49 - 1, (unint64_t *)v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
        std::__shared_weak_count::__release_weak(v186);
      }
    }
    if (v188)
    {
      v50 = &v188->__shared_owners_;
      do
        v51 = __ldaxr((unint64_t *)v50);
      while (__stlxr(v51 - 1, (unint64_t *)v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
        std::__shared_weak_count::__release_weak(v188);
      }
    }
    v196 = v172;
    v52 = std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 96), (void **)v172, &v196);
    v53 = v52;
    v55 = (uint64_t **)(v52 + 8);
    v54 = (uint64_t *)v52[8];
    if (v54)
    {
      while (1)
      {
        while (1)
        {
          v56 = (uint64_t **)v54;
          v57 = v54[4];
          if (v57 <= a3)
            break;
          v54 = *v56;
          v55 = v56;
          if (!*v56)
            goto LABEL_124;
        }
        if (v57 >= a3)
          break;
        v54 = v56[1];
        if (!v54)
        {
          v55 = v56 + 1;
          goto LABEL_124;
        }
      }
      v100 = (uint64_t *)v56;
    }
    else
    {
      v56 = (uint64_t **)(v52 + 8);
LABEL_124:
      v100 = (uint64_t *)operator new(0x38uLL);
      v100[5] = 0;
      v100[6] = 0;
      v100[4] = a3;
      *v100 = 0;
      v100[1] = 0;
      v100[2] = (uint64_t)v56;
      *v55 = v100;
      v101 = *(_QWORD *)v53[7];
      v102 = v100;
      if (v101)
      {
        v53[7] = v101;
        v102 = *v55;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v53[8], v102);
      ++v53[9];
    }
    v152 = v189;
    v151 = v190;
    if (v190)
    {
      v153 = (unint64_t *)&v190->__shared_weak_owners_;
      do
        v154 = __ldxr(v153);
      while (__stxr(v154 + 1, v153));
    }
    v155 = (std::__shared_weak_count *)v100[6];
    v100[5] = (uint64_t)v189;
    v100[6] = (uint64_t)v151;
    if (v155)
      std::__shared_weak_count::__release_weak(v155);
    *a8 = 0;
    a8[1] = 0;
    v156 = (uint64_t)&v152[1];
    if (!v152)
      v156 = 0;
    v183 = v156;
    v184 = v151;
    if (v151)
    {
      v157 = (unint64_t *)&v151->__shared_owners_;
      do
        v158 = __ldxr(v157);
      while (__stxr(v158 + 1, v157));
    }
    v196 = 0;
    v197 = 0;
    v159 = *(std::__shared_weak_count **)(v191 + 128);
    if (v159)
    {
      v159 = std::__shared_weak_count::lock(v159);
      v160 = v159;
      v197 = v159;
      if (v159)
      {
        v159 = *(std::__shared_weak_count **)(v191 + 120);
        v196 = (__int128 *)v159;
      }
    }
    else
    {
      v160 = 0;
    }
    v161 = (ImsPrefs *)SipStack::prefs((SipStack *)v159);
    ims::rtp::createMediaSessionStateMachine(&v183, v161, 0, a8);
    if (v160)
    {
      v162 = (unint64_t *)&v160->__shared_owners_;
      do
        v163 = __ldaxr(v162);
      while (__stlxr(v163 - 1, v162));
      if (!v163)
      {
        ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
        std::__shared_weak_count::__release_weak(v160);
      }
    }
    v164 = v184;
    if (v184)
    {
      v165 = (unint64_t *)&v184->__shared_owners_;
      do
        v166 = __ldaxr(v165);
      while (__stlxr(v166 - 1, v165));
      if (!v166)
      {
        ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
        std::__shared_weak_count::__release_weak(v164);
      }
    }
    v167 = v189 + 1;
    v168 = *(std::__shared_weak_count **)(a2 + 8);
    v181 = *(__int128 **)a2;
    v182 = v168;
    if (v168)
    {
      v169 = (unint64_t *)&v168->__shared_weak_owners_;
      do
        v170 = __ldxr(v169);
      while (__stxr(v170 + 1, v169));
    }
    ((void (*)(std::__shared_weak_count *, __int128 **))v167->__vftable[4].~__shared_weak_count)(v167, &v181);
    if (v182)
      std::__shared_weak_count::__release_weak(v182);
    v148 = v190;
    if (v190)
    {
      v171 = (unint64_t *)&v190->__shared_owners_;
      do
        v150 = __ldaxr(v171);
      while (__stlxr(v150 - 1, v171));
      goto LABEL_236;
    }
    goto LABEL_66;
  }
  v189 = 0;
  v190 = 0;
  v187 = 0;
  v188 = 0;
  v62 = *(std::__shared_weak_count **)(v19 + 128);
  if (v62)
  {
    v62 = std::__shared_weak_count::lock(v62);
    v188 = v62;
    if (v62)
    {
      v62 = *(std::__shared_weak_count **)(v19 + 120);
      v187 = v62;
    }
  }
  v63 = (ImsPrefs *)SipStack::prefs((SipStack *)v62);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v196, (_QWORD *)(a1 + 8));
  v65 = v196;
  v64 = v197;
  v185 = v196;
  v186 = v197;
  v66 = *(__int128 **)a2;
  v67 = *(std::__shared_weak_count **)(a2 + 8);
  v68 = (std::__shared_weak_count *)operator new(0x2C0uLL);
  v68->__shared_owners_ = 0;
  v69 = (unint64_t *)&v68->__shared_owners_;
  v68->__shared_weak_owners_ = 0;
  v68->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DE360;
  v196 = v66;
  v197 = v67;
  if (v67)
  {
    v70 = (unint64_t *)&v67->__shared_weak_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *(std::__shared_weak_count **)(a1 + 56);
  v193 = *(void **)(a1 + 48);
  v194 = v72;
  if (v72)
  {
    v73 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  v199 = v65;
  v200 = v64;
  v185 = 0;
  v186 = 0;
  v75 = v68 + 1;
  AVCAudioSession::AVCAudioSession((uint64_t)&v68[1], (uint64_t *)&v196, a3, (uint64_t *)&v193, v63, (uint64_t *)&v199, v172, a7);
  v76 = v200;
  if (v200)
  {
    v77 = (unint64_t *)&v200->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = v194;
  if (v194)
  {
    v80 = (unint64_t *)&v194->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if (v197)
    std::__shared_weak_count::__release_weak(v197);
  v189 = v68 + 1;
  v190 = v68;
  v82 = (std::__shared_weak_count *)v68[1].__shared_weak_owners_;
  if (v82)
  {
    if (v82->__shared_owners_ != -1)
      goto LABEL_106;
    do
      v83 = __ldxr(v69);
    while (__stxr(v83 + 1, v69));
    v84 = (unint64_t *)&v68->__shared_weak_owners_;
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 1, v84));
    v68[1].__shared_owners_ = (uint64_t)v75;
    v68[1].__shared_weak_owners_ = (uint64_t)v68;
    std::__shared_weak_count::__release_weak(v82);
  }
  else
  {
    do
      v86 = __ldxr(v69);
    while (__stxr(v86 + 1, v69));
    v87 = (unint64_t *)&v68->__shared_weak_owners_;
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
    v68[1].__shared_owners_ = (uint64_t)v75;
    v68[1].__shared_weak_owners_ = (uint64_t)v68;
  }
  do
    v89 = __ldaxr(v69);
  while (__stlxr(v89 - 1, v69));
  if (!v89)
  {
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
  }
LABEL_106:
  if (v186)
  {
    v90 = &v186->__shared_owners_;
    do
      v91 = __ldaxr((unint64_t *)v90);
    while (__stlxr(v91 - 1, (unint64_t *)v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  if (v188)
  {
    v92 = &v188->__shared_owners_;
    do
      v93 = __ldaxr((unint64_t *)v92);
    while (__stlxr(v93 - 1, (unint64_t *)v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  v196 = v172;
  v94 = std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 72), (void **)v172, (uint64_t)&std::piecewise_construct, &v196);
  v96 = v94 + 8;
  v95 = (uint64_t *)v94[8];
  if (v95)
  {
    while (1)
    {
      while (1)
      {
        v97 = (uint64_t **)v95;
        v98 = v95[4];
        if (v98 <= a3)
          break;
        v95 = *v97;
        v99 = v97;
        if (!*v97)
          goto LABEL_128;
      }
      if (v98 >= a3)
        break;
      v95 = v97[1];
      if (!v95)
      {
        v99 = v97 + 1;
        goto LABEL_128;
      }
    }
  }
  else
  {
    v99 = (uint64_t **)(v94 + 8);
    v97 = (uint64_t **)(v94 + 8);
LABEL_128:
    v103 = (uint64_t *)operator new(0x38uLL);
    v103[5] = 0;
    v103[6] = 0;
    v103[4] = a3;
    std::__tree<unsigned int>::__insert_node_at((uint64_t **)v96 - 1, (uint64_t)v97, v99, v103);
    v97 = (uint64_t **)v103;
  }
  v105 = v189;
  v104 = v190;
  if (v190)
  {
    v106 = (unint64_t *)&v190->__shared_weak_owners_;
    do
      v107 = __ldxr(v106);
    while (__stxr(v107 + 1, v106));
  }
  v108 = (std::__shared_weak_count *)v97[6];
  v97[5] = (uint64_t *)v189;
  v97[6] = (uint64_t *)v104;
  if (v108)
    std::__shared_weak_count::__release_weak(v108);
  v109 = *(_QWORD *)(a1 + 48);
  v110 = *(_QWORD **)(v109 + 232);
  if (!v110)
    goto LABEL_145;
  v111 = (_QWORD *)(v109 + 232);
  do
  {
    v112 = v110[4];
    v113 = v112 >= a3;
    if (v112 >= a3)
      v114 = v110;
    else
      v114 = v110 + 1;
    if (v113)
      v111 = v110;
    v110 = (_QWORD *)*v114;
  }
  while (*v114);
  if (v111 == (_QWORD *)(v109 + 232) || v111[4] > a3)
  {
LABEL_145:
    v115 = *(_QWORD **)(v109 + 256);
    if (!v115)
      goto LABEL_156;
    v116 = (_QWORD *)(v109 + 256);
    v117 = (_QWORD *)(v109 + 256);
    do
    {
      v118 = v115[4];
      v119 = v118 >= a3;
      if (v118 >= a3)
        v120 = v115;
      else
        v120 = v115 + 1;
      if (v119)
        v117 = v115;
      v115 = (_QWORD *)*v120;
    }
    while (*v120);
    if (v117 == v116 || v117[4] > a3)
    {
LABEL_156:
      std::string::basic_string[abi:ne180100]<0>(&v196, "avc.rtp.controller");
      std::string::basic_string[abi:ne180100]<0>(&v193, (char *)&str_3_16);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v121 = ImsLogger::debug(ims::_logger, (uint64_t)&v196, (uint64_t)&v193);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v121 + 8), (uint64_t)"Protecting WiFi call with a delayed start", 41);
      *(_BYTE *)(v121 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v121 + 64))(v121, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v121 + 17) = 0;
      if (v195 < 0)
        operator delete(v193);
      if (v198 < 0)
        operator delete(v196);
      v122 = *(int64x2_t **)(a1 + 48);
      v123 = (uint64_t)&v105[23];
      if (!v105)
        v123 = 0;
      v179 = v123;
      v180 = v104;
      if (v104)
      {
        v124 = (unint64_t *)&v104->__shared_weak_owners_;
        do
          v125 = __ldxr(v124);
        while (__stxr(v125 + 1, v124));
      }
      RTPManager::registerAudioReadyHandler(v122, &v179);
      if (v180)
        std::__shared_weak_count::__release_weak(v180);
    }
  }
  *a8 = 0;
  a8[1] = 0;
  v126 = (uint64_t)&v105[1];
  if (!v105)
    v126 = 0;
  v177 = v126;
  v178 = v104;
  if (v104)
  {
    v127 = (unint64_t *)&v104->__shared_owners_;
    do
      v128 = __ldxr(v127);
    while (__stxr(v128 + 1, v127));
  }
  v129 = v191;
  v196 = 0;
  v197 = 0;
  v130 = *(std::__shared_weak_count **)(v191 + 128);
  if (v130)
  {
    v130 = std::__shared_weak_count::lock(v130);
    v131 = v130;
    v197 = v130;
    if (v130)
    {
      v130 = *(std::__shared_weak_count **)(v129 + 120);
      v196 = (__int128 *)v130;
    }
  }
  else
  {
    v131 = 0;
  }
  v132 = (ImsPrefs *)SipStack::prefs((SipStack *)v130);
  ims::rtp::createMediaSessionStateMachine(&v177, v132, 1, a8);
  if (v131)
  {
    v133 = (unint64_t *)&v131->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v135 = v178;
  if (v178)
  {
    v136 = (unint64_t *)&v178->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = &v189->__vftable;
  v139 = *a8;
  v140 = (std::__shared_weak_count *)a8[1];
  if (v140)
  {
    v141 = (unint64_t *)&v140->__shared_weak_owners_;
    do
      v142 = __ldxr(v141);
    while (__stxr(v142 + 1, v141));
    do
      v143 = __ldxr(v141);
    while (__stxr(v143 + 1, v141));
  }
  v138[71] = v139;
  v144 = (std::__shared_weak_count *)v138[72];
  v138[72] = v140;
  if (v144)
    std::__shared_weak_count::__release_weak(v144);
  if (v140)
    std::__shared_weak_count::__release_weak(v140);
  v145 = *(std::__shared_weak_count **)(a2 + 8);
  v175 = *(__int128 **)a2;
  v176 = v145;
  if (v145)
  {
    v146 = (unint64_t *)&v145->__shared_weak_owners_;
    do
      v147 = __ldxr(v146);
    while (__stxr(v147 + 1, v146));
  }
  (*(void (**)(_QWORD *, __int128 **))(v138[3] + 160))(v138 + 3, &v175);
  if (v176)
    std::__shared_weak_count::__release_weak(v176);
  v148 = v190;
  if (v190)
  {
    v149 = (unint64_t *)&v190->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
LABEL_236:
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
LABEL_66:
  v59 = v192;
  if (v192)
  {
    v60 = (unint64_t *)&v192->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
}

void sub_1BF0E1120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  if (a17)
    std::__shared_weak_count::__release_weak(a17);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t AVCRTPStackController::audioSessionCount(AVCRTPStackController *this)
{
  __int128 *v1;
  char *v2;
  uint64_t v3;
  __int128 *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  void *__p[2];
  __int128 v17;
  __int128 v18;

  v1 = (__int128 *)*((_QWORD *)this + 9);
  v2 = (char *)this + 80;
  if (v1 == (__int128 *)((char *)this + 80))
    return 0;
  v3 = 0;
  do
  {
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    std::pair<std::string const,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>::pair[abi:ne180100]((std::string *)__p, v1 + 2);
    v4 = (__int128 *)*((_QWORD *)&v17 + 1);
    if (*((__int128 **)&v17 + 1) != &v18)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v4 + 6);
        if (v5)
        {
          v6 = std::__shared_weak_count::lock(v5);
          if (v6)
          {
            v7 = v6;
            if (*((_QWORD *)v4 + 5))
              ++v3;
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        v10 = (__int128 *)*((_QWORD *)v4 + 1);
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = *(__int128 **)v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (__int128 *)*((_QWORD *)v4 + 2);
            v12 = *(_QWORD *)v11 == (_QWORD)v4;
            v4 = v11;
          }
          while (!v12);
        }
        v4 = v11;
      }
      while (v11 != &v18);
    }
    std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::destroy((uint64_t)&v17 + 8, (_QWORD *)v18);
    if (SBYTE7(v17) < 0)
      operator delete(__p[0]);
    v13 = (__int128 *)*((_QWORD *)v1 + 1);
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = *(__int128 **)v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = (__int128 *)*((_QWORD *)v1 + 2);
        v12 = *(_QWORD *)v14 == (_QWORD)v1;
        v1 = v14;
      }
      while (!v12);
    }
    v1 = v14;
  }
  while (v14 != (__int128 *)v2);
  return v3;
}

char *AVCRTPStackController::removeSessionFromCache(uint64_t a1, void **a2, unint64_t a3)
{
  uint64_t **v6;
  char *result;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t *v16;
  unint64_t v17;
  void **v18;

  v17 = a3;
  v6 = (uint64_t **)(a1 + 72);
  result = (char *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 72, a2);
  if ((char *)(a1 + 80) != result)
  {
    v18 = a2;
    v8 = std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v18);
    v11 = v8[8];
    v9 = v8 + 8;
    v10 = (_QWORD *)v11;
    if (!v11)
      goto LABEL_13;
    v12 = v9;
    do
    {
      v13 = v10[4];
      v14 = v13 >= a3;
      if (v13 >= a3)
        v15 = v10;
      else
        v15 = v10 + 1;
      if (v14)
        v12 = v10;
      v10 = (_QWORD *)*v15;
    }
    while (*v15);
    if (v12 == v9 || v12[4] > a3)
LABEL_13:
      v12 = v9;
    v18 = a2;
    result = (char *)std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v18);
    if (v12 != (uint64_t *)(result + 64))
    {
      v18 = a2;
      v16 = std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v18);
      return (char *)std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::__erase_unique<unsigned long long>((uint64_t)(v16 + 7), &v17);
    }
  }
  return result;
}

BOOL AVCRTPStackController::sessionExists(uint64_t a1, void **a2, unint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v7;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _BOOL8 v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  v3 = (_QWORD *)(a1 + 80);
  v4 = *(_QWORD **)(a1 + 80);
  if (!v4)
    return 0;
  v7 = (_QWORD *)(a1 + 80);
  do
  {
    v8 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4 + 4, a2);
    if (v8 >= 0)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (v8 >= 0)
      v7 = v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v7 == v3)
    return 0;
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v7 + 4) & 0x80) != 0)
    return 0;
  v12 = (_QWORD *)v7[8];
  v11 = v7 + 8;
  v10 = v12;
  if (!v12)
    return 0;
  v13 = v11;
  do
  {
    v14 = v10[4];
    v15 = v14 >= a3;
    if (v14 >= a3)
      v16 = v10;
    else
      v16 = v10 + 1;
    if (v15)
      v13 = v10;
    v10 = (_QWORD *)*v16;
  }
  while (*v16);
  if (v13 == v11)
    return 0;
  if (v13[4] > a3)
    return 0;
  v17 = (std::__shared_weak_count *)v13[6];
  if (!v17)
    return 0;
  v18 = std::__shared_weak_count::lock(v17);
  if (!v18)
    return 0;
  v19 = v18;
  v20 = v13[5] != 0;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  return v20;
}

void AVCRTPStackController::setRelayMode(uint64_t a1, void **a2, unint64_t a3, char a4)
{
  uint64_t v8;
  void **v9;
  void **v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  AVCAudioSession *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void *__p[2];
  char v24;
  void *v25[2];
  char v26;

  std::string::basic_string[abi:ne180100]<0>(v25, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_3_16);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)v25, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"setRelayMode", 12);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" [stackId=", 10);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 32))(v8, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" sessionId=", 11);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" isRelayMode=", 13);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v24 < 0)
    operator delete(__p[0]);
  if (v26 < 0)
    operator delete(v25[0]);
  v9 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 72, a2);
  if ((void **)(a1 + 80) != v9)
  {
    v12 = v9[8];
    v10 = v9 + 8;
    v11 = v12;
    if (v12)
    {
      v13 = v10;
      do
      {
        v14 = v11[4];
        v15 = v14 >= a3;
        if (v14 >= a3)
          v16 = v11;
        else
          v16 = v11 + 1;
        if (v15)
          v13 = (void **)v11;
        v11 = (_QWORD *)*v16;
      }
      while (*v16);
      if (v13 != v10 && (unint64_t)v13[4] <= a3)
      {
        v17 = (std::__shared_weak_count *)v13[6];
        if (v17)
        {
          v18 = std::__shared_weak_count::lock(v17);
          v25[1] = v18;
          if (v18)
          {
            v19 = v18;
            v20 = (AVCAudioSession *)v13[5];
            v25[0] = v20;
            if (v20)
              AVCAudioSession::setRelayMode(v20, a4);
            p_shared_owners = (unint64_t *)&v19->__shared_owners_;
            do
              v22 = __ldaxr(p_shared_owners);
            while (__stlxr(v22 - 1, p_shared_owners));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
        }
      }
    }
  }
}

void sub_1BF0E1870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void AVCRTPStackController::setScreeningMode(uint64_t a1, void **a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void **v9;
  void **v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  AVCAudioSession *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void *__p[2];
  char v24;
  void *v25[2];
  char v26;

  std::string::basic_string[abi:ne180100]<0>(v25, "avc.rtp.controller");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_3_16);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)v25, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"setScreeningMode", 16);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" [stackId=", 10);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 32))(v8, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" sessionId=", 11);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" isScreeningMode=", 17);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v24 < 0)
    operator delete(__p[0]);
  if (v26 < 0)
    operator delete(v25[0]);
  v9 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 72, a2);
  if ((void **)(a1 + 80) != v9)
  {
    v12 = v9[8];
    v10 = v9 + 8;
    v11 = v12;
    if (v12)
    {
      v13 = v10;
      do
      {
        v14 = v11[4];
        v15 = v14 >= a3;
        if (v14 >= a3)
          v16 = v11;
        else
          v16 = v11 + 1;
        if (v15)
          v13 = (void **)v11;
        v11 = (_QWORD *)*v16;
      }
      while (*v16);
      if (v13 != v10 && (unint64_t)v13[4] <= a3)
      {
        v17 = (std::__shared_weak_count *)v13[6];
        if (v17)
        {
          v18 = std::__shared_weak_count::lock(v17);
          v25[1] = v18;
          if (v18)
          {
            v19 = v18;
            v20 = (AVCAudioSession *)v13[5];
            v25[0] = v20;
            if (v20)
              AVCAudioSession::setScreeningMode(v20, a4);
            p_shared_owners = (unint64_t *)&v19->__shared_owners_;
            do
              v22 = __ldaxr(p_shared_owners);
            while (__stlxr(v22 - 1, p_shared_owners));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
        }
      }
    }
  }
}

void sub_1BF0E1AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>::map[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_1BF0E1B74(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__tree_node<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1BF0E1BCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__tree_node<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::__emplace_hint_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::weak_ptr<AVCAudioSession>> const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::__emplace_hint_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::weak_ptr<AVCAudioSession>> const&>(uint64_t **a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t *v17;
  BOOL v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;

  v5 = a2;
  v7 = *a3;
  v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2 || (v9 = a2[4], v9 > v7))
  {
    v10 = *a2;
    if (*a1 == a2)
    {
      v12 = a2;
      goto LABEL_16;
    }
    if (v10)
    {
      v11 = (uint64_t *)*a2;
      do
      {
        v12 = v11;
        v11 = (uint64_t *)v11[1];
      }
      while (v11);
    }
    else
    {
      v17 = a2;
      do
      {
        v12 = (uint64_t *)v17[2];
        v18 = *v12 == (_QWORD)v17;
        v17 = v12;
      }
      while (v18);
    }
    if (v12[4] < v7)
    {
LABEL_16:
      if (v10)
        v15 = (uint64_t **)v12;
      else
        v15 = (uint64_t **)a2;
      if (v10)
        v14 = (uint64_t **)(v12 + 1);
      else
        v14 = (uint64_t **)a2;
      v5 = *v14;
      if (*v14)
        return v5;
      goto LABEL_43;
    }
    v19 = *v8;
    v14 = a1 + 1;
    v15 = a1 + 1;
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          v15 = (uint64_t **)v19;
          v20 = v19[4];
          if (v20 <= v7)
            break;
          v19 = (uint64_t *)*v19;
          v14 = v15;
          if (!*v15)
            goto LABEL_43;
        }
        if (v20 >= v7)
          return (uint64_t *)v15;
        v19 = (uint64_t *)v19[1];
        if (!v19)
          goto LABEL_30;
      }
    }
  }
  else
  {
    if (v9 >= v7)
      return v5;
    v14 = (uint64_t **)(a2 + 1);
    v13 = (uint64_t *)a2[1];
    if (v13)
    {
      do
      {
        v14 = (uint64_t **)v13;
        v13 = (uint64_t *)*v13;
        v15 = v14;
        v16 = v14;
      }
      while (v13);
    }
    else
    {
      v16 = (uint64_t **)a2;
      do
      {
        v21 = v16;
        v16 = (uint64_t **)v16[2];
      }
      while (*v16 != (uint64_t *)v21);
      v15 = (uint64_t **)a2;
    }
    if (v16 != v8 && (unint64_t)v16[4] <= v7)
    {
      v22 = *v8;
      v14 = a1 + 1;
      v15 = a1 + 1;
      if (*v8)
      {
        while (1)
        {
          while (1)
          {
            v15 = (uint64_t **)v22;
            v23 = v22[4];
            if (v23 <= v7)
              break;
            v22 = (uint64_t *)*v22;
            v14 = v15;
            if (!*v15)
              goto LABEL_43;
          }
          if (v23 >= v7)
            return (uint64_t *)v15;
          v22 = (uint64_t *)v22[1];
          if (!v22)
          {
LABEL_30:
            v14 = v15 + 1;
            break;
          }
        }
      }
    }
  }
LABEL_43:
  v5 = (uint64_t *)operator new(0x38uLL);
  v24 = a4[1];
  v5[4] = *a4;
  v5[5] = v24;
  v25 = a4[2];
  v5[6] = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 16);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v15, v14, v5);
  return v5;
}

void std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::destroy(a1, a2[1]);
    v4 = (std::__shared_weak_count *)a2[6];
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::IpVersionInfo>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::IpVersionInfo>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::IpVersionInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *(_DWORD *)(v3 + 7) = *(_DWORD *)(result + 16);
  *a2 = v3 + 11;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 8;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::IpVersionInfo>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78DE2B0;
  *(_QWORD *)(result + 12) = *(_QWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5audio15NotifyIpVersion8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1BF0E2098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v11 = 0;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1BF0E2210(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>>>::__erase_unique<std::string>(void ***a1, void **a2)
{
  void **v3;
  uint64_t *v4;
  void **v5;
  void **v6;
  void **v7;
  BOOL v8;
  uint64_t *v9;

  v3 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != (void ***)v3)
  {
    v4 = (uint64_t *)v3;
    v5 = (void **)v3[1];
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = (void **)*v5;
      }
      while (v5);
    }
    else
    {
      v7 = v3;
      do
      {
        v6 = (void **)v7[2];
        v8 = *v6 == v7;
        v7 = v6;
      }
      while (!v8);
    }
    if (*a1 == v3)
      *a1 = v6;
    v9 = (uint64_t *)a1[1];
    a1[2] = (void **)((char *)a1[2] - 1);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v9, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, __int128 **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  _QWORD *v10;
  uint64_t *v11;
  __int128 *v12;
  uint64_t *v13;
  std::string *v14;
  __int128 v15;
  uint64_t *v16;
  _QWORD v18[2];
  uint64_t v19;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (!v5)
    goto LABEL_10;
  v7 = a1 + 1;
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v10 = v5 + 4;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0)
        break;
      v5 = *v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2) & 0x80) == 0)
      break;
    v7 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    v12 = *a3;
    v19 = 0;
    v13 = (uint64_t *)operator new(0x50uLL);
    v18[0] = v13;
    v18[1] = v6;
    v14 = (std::string *)(v13 + 4);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v15 = *v12;
      v13[6] = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    }
    v13[9] = 0;
    v13[8] = 0;
    v13[7] = (uint64_t)(v13 + 8);
    LOBYTE(v19) = 1;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v8;
    *v7 = v13;
    v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v11 = (uint64_t *)v18[0];
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  return v11;
}

void sub_1BF0E245C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<unsigned long long,std::weak_ptr<AVCRTTSession>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<unsigned long long,std::weak_ptr<AVCAudioSession>>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__shared_ptr_emplace<AVCRTTSession>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DE310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AVCRTTSession>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DE310;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<AVCRTTSession>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<AVCAudioSession>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DE360;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AVCAudioSession>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DE360;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<AVCAudioSession>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::__erase_unique<unsigned long long>(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::erase((uint64_t **)a1, v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::weak_ptr<AVCAudioSession>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;

  v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(a1, a2);
  v4 = (std::__shared_weak_count *)a2[6];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a2);
  return v3;
}

void SipAkaAuthChallenge::SipAkaAuthChallenge(SipAkaAuthChallenge *this, SipAkaDigestAuthScheme *a2)
{
  SipAkaDigestAuthScheme *v2;

  v2 = a2;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E78DE448;
  if (!a2)
  {
    v2 = (SipAkaDigestAuthScheme *)operator new();
    *(_OWORD *)((char *)v2 + 24) = 0u;
    *(_OWORD *)((char *)v2 + 8) = 0u;
    *((_DWORD *)v2 + 10) = 1065353216;
    *((_QWORD *)v2 + 21) = 0;
    *((_QWORD *)v2 + 22) = 0;
    *((_QWORD *)v2 + 20) = 0;
    *((_DWORD *)v2 + 12) = 0;
    *(_OWORD *)((char *)v2 + 56) = 0u;
    *(_OWORD *)((char *)v2 + 72) = 0u;
    *(_OWORD *)((char *)v2 + 88) = 0u;
    *(_OWORD *)((char *)v2 + 104) = 0u;
    *(_OWORD *)((char *)v2 + 120) = 0u;
    *(_OWORD *)((char *)v2 + 136) = 0u;
    *((_BYTE *)v2 + 152) = 0;
    *(_QWORD *)v2 = &off_1E78C5E10;
    *(_OWORD *)((char *)v2 + 264) = 0u;
    *(_OWORD *)((char *)v2 + 280) = 0u;
    *(_OWORD *)((char *)v2 + 296) = 0u;
    *((_DWORD *)v2 + 80) = 2;
    SipDigestAuthScheme::clear(v2);
    *(_OWORD *)((char *)v2 + 246) = 0u;
    *(_OWORD *)((char *)v2 + 232) = 0u;
    *(_OWORD *)((char *)v2 + 216) = 0u;
    *(_OWORD *)((char *)v2 + 200) = 0u;
    *(_OWORD *)((char *)v2 + 184) = 0u;
    *((_QWORD *)v2 + 34) = *((_QWORD *)v2 + 33);
    *((_QWORD *)v2 + 37) = *((_QWORD *)v2 + 36);
    *((_DWORD *)v2 + 78) = 0;
    *((_BYTE *)v2 + 316) = 0;
  }
  *((_QWORD *)this + 8) = v2;
}

void sub_1BF0E26E8(_Unwind_Exception *a1)
{
  void **v1;

  SipAuthChallenge::~SipAuthChallenge(v1);
  _Unwind_Resume(a1);
}

void SipAuthChallenge::~SipAuthChallenge(void **this)
{
  *this = off_1E78DE4A0;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void SipAuthChallenge::SipAuthChallenge(SipAuthChallenge *this, const SipAuthChallenge *a2)
{
  *(_QWORD *)this = off_1E78DE4A0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  std::string::operator=((std::string *)((char *)this + 8), (const std::string *)((char *)a2 + 8));
}

void sub_1BF0E279C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*(void **)(v1 + 32));
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void SipAkaAuthChallenge::~SipAkaAuthChallenge(SipAkaAuthChallenge *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E78DE448;
  v2 = *((_QWORD *)this + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  SipAuthChallenge::~SipAuthChallenge((void **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E78DE448;
  v2 = *((_QWORD *)this + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  SipAuthChallenge::~SipAuthChallenge((void **)this);
  JUMPOUT(0x1C3B87100);
}

SipAkaAuthResponse *SipAkaAuthChallenge::createSuccessResponse(const SipAkaAuthChallenge *a1, char **a2, uint64_t a3, uint64_t a4)
{
  SipAkaAuthResponse *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;

  v8 = (SipAkaAuthResponse *)operator new();
  SipAkaAuthResponse::SipAkaAuthResponse(v8, a1);
  v9 = (char **)(*(uint64_t (**)(SipAkaAuthResponse *))(*(_QWORD *)v8 + 24))(v8);
  SipAkaDigestAuthScheme::setRes(v9, a2);
  v10 = (*(uint64_t (**)(SipAkaAuthResponse *))(*(_QWORD *)v8 + 24))(v8);
  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 >= 0x10uLL)
  {
    *(_OWORD *)(v10 + 246) = *(_OWORD *)*(_QWORD *)a3;
    *(_BYTE *)(v10 + 316) = 1;
  }
  v11 = (*(uint64_t (**)(SipAkaAuthResponse *))(*(_QWORD *)v8 + 24))(v8);
  if (*(_QWORD *)(a4 + 8) - *(_QWORD *)a4 >= 0x10uLL)
  {
    *(_OWORD *)(v11 + 230) = *(_OWORD *)*(_QWORD *)a4;
    *(_BYTE *)(v11 + 315) = 1;
  }
  return v8;
}

void sub_1BF0E2934(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40E7B9B157);
  _Unwind_Resume(a1);
}

SipAkaAuthResponse *SipAkaAuthChallenge::createSyncFailureResponse(const SipAkaAuthChallenge *a1, uint64_t **a2)
{
  SipAkaAuthResponse *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v4 = (SipAkaAuthResponse *)operator new();
  SipAkaAuthResponse::SipAkaAuthResponse(v4, a1);
  v5 = (*(uint64_t (**)(SipAkaAuthResponse *))(*(_QWORD *)v4 + 24))(v4);
  v6 = *a2;
  if ((unint64_t)((char *)a2[1] - (char *)*a2) >= 0xE)
  {
    v7 = *v6;
    v8 = *((_DWORD *)v6 + 2);
    *(_WORD *)(v5 + 228) = *((_WORD *)v6 + 6);
    *(_DWORD *)(v5 + 224) = v8;
    *(_QWORD *)(v5 + 216) = v7;
    *(_WORD *)(v5 + 313) = 1;
  }
  return v4;
}

void sub_1BF0E29EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40E7B9B157);
  _Unwind_Resume(a1);
}

SipAkaAuthResponse *SipAkaAuthChallenge::createFailureResponse(SipAkaAuthChallenge *this)
{
  SipAkaAuthResponse *v2;

  v2 = (SipAkaAuthResponse *)operator new();
  SipAkaAuthResponse::SipAkaAuthResponse(v2, this);
  return v2;
}

void sub_1BF0E2A54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40E7B9B157);
  _Unwind_Resume(a1);
}

uint64_t SipAkaAuthChallenge::scheme(SipAkaAuthChallenge *this)
{
  return *((_QWORD *)this + 8);
}

{
  return *((_QWORD *)this + 8);
}

SipAuthChallenge *SipAkaAuthChallenge::clone(SipAkaAuthChallenge *this)
{
  SipAuthChallenge *v2;

  v2 = (SipAuthChallenge *)operator new();
  SipAuthChallenge::SipAuthChallenge(v2, this);
  *(_QWORD *)v2 = &off_1E78DE448;
  *((_QWORD *)v2 + 8) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 32))(*((_QWORD *)this + 8));
  return v2;
}

void sub_1BF0E2AEC(_Unwind_Exception *a1)
{
  void **v1;

  SipAuthChallenge::~SipAuthChallenge(v1);
  MEMORY[0x1C3B87100](v1, 0x10B3C40E7B9B157);
  _Unwind_Resume(a1);
}

uint64_t SipAkaAuthChallenge::isValid(SipAkaAuthChallenge *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
  return result;
}

uint64_t SipTransactionLayer::SipTransactionLayer(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::string __p;
  std::string v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = (std::__shared_weak_count *)a2[1];
  v17 = *a2;
  v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  SipStackLayer::SipStackLayer((_QWORD *)a1, &v17);
  v7 = v18;
  if (v18)
  {
    v8 = (unint64_t *)&v18->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)(a1 + 24) = off_1E78DE630;
  std::string::basic_string[abi:ne180100]<0>(&v16, "sip.txn");
  v10 = *a2;
  if (*(char *)(*a2 + 4159) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v10 + 4136), *(_QWORD *)(v10 + 4144));
  else
    __p = *(std::string *)(v10 + 4136);
  ImsLogContainer::ImsLogContainer(a1 + 32, &v16, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_1E78DE4E0;
  *(_QWORD *)(a1 + 24) = &unk_1E78DE518;
  *(_QWORD *)(a1 + 32) = &unk_1E78DE548;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 184) = 1065353216;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 136, (__int128 *)&v16);
  size = (std::__shared_weak_count *)v16.__r_.__value_.__l.__size_;
  if (v16.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v16.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  return a1;
}

void sub_1BF0E2CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _QWORD *v20;
  std::__shared_weak_count *v22;

  if (a20 < 0)
    operator delete(__p);
  *v20 = &off_1E78C16F0;
  v22 = (std::__shared_weak_count *)v20[2];
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  _Unwind_Resume(exception_object);
}

void SipTransactionLayer::~SipTransactionLayer(SipTransactionLayer *this)
{
  uint64_t v2;
  char *v3;
  std::__shared_weak_count *v4;

  *(_QWORD *)this = &off_1E78DE4E0;
  *((_QWORD *)this + 3) = &unk_1E78DE518;
  *((_QWORD *)this + 4) = &unk_1E78DE548;
  v3 = (char *)this + 136;
  v2 = *((_QWORD *)this + 17);
  if (v2)
    *(_QWORD *)(v2 + 272) = 0;
  SipTransactionLayer::deinitialize(this);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)this + 192);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)this + 152);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  *((_QWORD *)this + 4) = off_1E78CFE68;
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  *(_QWORD *)this = &off_1E78C16F0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

{
  SipTransactionLayer::~SipTransactionLayer(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipTransactionLayer::deinitialize(SipTransactionLayer *this)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t j;
  void *__p[2];
  char v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v2 = (_QWORD *)((char *)this + 152);
  std::unordered_map<std::string,std::shared_ptr<SipClientTransaction>>::unordered_map((uint64_t)&v33, (uint64_t)this + 152);
  v32 = 0;
  v30 = 0u;
  v31 = 0u;
  std::unordered_map<std::string,std::shared_ptr<SipServerTransaction>>::unordered_map((uint64_t)&v30, (uint64_t)this + 192);
  v3 = (_QWORD *)v34;
  if ((_QWORD)v34)
  {
    v4 = (char *)this + 32;
    do
    {
      v6 = v3[5];
      v5 = (std::__shared_weak_count *)v3[6];
      v28 = v6;
      v29 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v9 = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 64))((char *)this + 32);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))((char *)this + 32, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"forcing termination of transaction ", 35);
      *(_BYTE *)(v9 + 17) = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v6 + 152))(__p, v6);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v9 + 40))(v9, __p);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v9 + 17) = 0;
      if (v27 < 0)
        operator delete(__p[0]);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, 7);
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  v12 = (_QWORD *)v31;
  if ((_QWORD)v31)
  {
    v13 = (char *)this + 32;
    do
    {
      v15 = v12[5];
      v14 = (std::__shared_weak_count *)v12[6];
      v28 = v15;
      v29 = v14;
      if (v14)
      {
        v16 = (unint64_t *)&v14->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = (*(uint64_t (**)(char *))(*(_QWORD *)v13 + 64))((char *)this + 32);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v13 + 16))((char *)this + 32, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"forcing termination of transaction ", 35);
      *(_BYTE *)(v18 + 17) = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v15 + 160))(__p, v15);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v18 + 40))(v18, __p);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v18 + 17) = 0;
      if (v27 < 0)
        operator delete(__p[0]);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 32))(v15, 7);
      if (v14)
      {
        v19 = (unint64_t *)&v14->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  if (*((_QWORD *)this + 22))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__deallocate_node((uint64_t)v2, *((_QWORD **)this + 21));
    *((_QWORD *)this + 21) = 0;
    v21 = *((_QWORD *)this + 20);
    if (v21)
    {
      for (i = 0; i != v21; ++i)
        *(_QWORD *)(*v2 + 8 * i) = 0;
    }
    *((_QWORD *)this + 22) = 0;
  }
  if (*((_QWORD *)this + 27))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__deallocate_node((uint64_t)this + 192, *((_QWORD **)this + 26));
    *((_QWORD *)this + 26) = 0;
    v23 = *((_QWORD *)this + 25);
    if (v23)
    {
      for (j = 0; j != v23; ++j)
        *(_QWORD *)(*((_QWORD *)this + 24) + 8 * j) = 0;
    }
    *((_QWORD *)this + 27) = 0;
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v30);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v33);
}

void sub_1BF0E3118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipTransactionLayer::~SipTransactionLayer(SipTransactionLayer *this)
{
  SipTransactionLayer::~SipTransactionLayer((SipTransactionLayer *)((char *)this - 24));
}

{
  SipTransactionLayer::~SipTransactionLayer((SipTransactionLayer *)((char *)this - 32));
}

{
  SipTransactionLayer::~SipTransactionLayer((SipTransactionLayer *)((char *)this - 24));
  JUMPOUT(0x1C3B87100);
}

{
  SipTransactionLayer::~SipTransactionLayer((SipTransactionLayer *)((char *)this - 32));
  JUMPOUT(0x1C3B87100);
}

void SipTransactionLayer::initialize(SipTransactionLayer *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *((_QWORD *)this + 1);
      if (v5)
      {
        v7 = *(_QWORD *)(v5 + 160);
        v6 = *(_QWORD *)(v5 + 168);
        *(_QWORD *)&v15 = v7;
        *((_QWORD *)&v15 + 1) = v6;
        if (v6)
        {
          v8 = (unint64_t *)(v6 + 8);
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 1, v8));
        }
        std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 136, &v15);
        v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
        if (*((_QWORD *)&v15 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        *(_QWORD *)(*((_QWORD *)this + 17) + 272) = (char *)this + 24;
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

uint64_t SipTransactionLayer::errorOutAllTransactions(SipTransactionLayer *this, const ImsResult *a2)
{
  _QWORD *v4;
  char *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t (*v13)(char *);
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t (*v27)(char *);
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p[2];
  char v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = 0;
  v38 = 0u;
  v39 = 0u;
  std::unordered_map<std::string,std::shared_ptr<SipClientTransaction>>::unordered_map((uint64_t)&v38, (uint64_t)this + 152);
  v37 = 0;
  v35 = 0u;
  v36 = 0u;
  std::unordered_map<std::string,std::shared_ptr<SipServerTransaction>>::unordered_map((uint64_t)&v35, (uint64_t)this + 192);
  v4 = (_QWORD *)v39;
  if ((_QWORD)v39)
  {
    v5 = (char *)this + 32;
    do
    {
      v7 = v4[5];
      v6 = (std::__shared_weak_count *)v4[6];
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 144))(v7);
      v13 = *(uint64_t (**)(char *))(*(_QWORD *)v5 + 64);
      if (v12)
      {
        v14 = v13((char *)this + 32);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v5 + 16))((char *)this + 32, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"forcing termination of completed transaction ", 45);
        *(_BYTE *)(v14 + 17) = 0;
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v7 + 152))(__p, v7);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v14 + 40))(v14, __p);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v14 + 17) = 0;
        if (v34 < 0)
          operator delete(__p[0]);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, 7);
      }
      else
      {
        v15 = v13((char *)this + 32);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v5 + 16))((char *)this + 32, v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Error out transaction ", 22);
        *(_BYTE *)(v15 + 17) = 0;
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v7 + 152))(__p, v7);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v15 + 40))(v15, __p);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v15 + 17) = 0;
        if (v34 < 0)
          operator delete(__p[0]);
        (*(void (**)(uint64_t, const ImsResult *))(*(_QWORD *)v7 + 112))(v7, a2);
      }
      if (v6)
      {
        v16 = (unint64_t *)&v6->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v4 = (_QWORD *)*v4;
    }
    while (v4);
  }
  v18 = (_QWORD *)v36;
  if ((_QWORD)v36)
  {
    v19 = (char *)this + 32;
    do
    {
      v21 = v18[5];
      v20 = (std::__shared_weak_count *)v18[6];
      if (v20)
      {
        v22 = (unint64_t *)&v20->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
        do
          v24 = __ldxr(v22);
        while (__stxr(v24 + 1, v22));
        do
          v25 = __ldaxr(v22);
        while (__stlxr(v25 - 1, v22));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 144))(v21);
      v27 = *(uint64_t (**)(char *))(*(_QWORD *)v19 + 64);
      if (v26)
      {
        v28 = v27(v19);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v19 + 16))(v19, v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"forcing termination of completed transaction ", 45);
        *(_BYTE *)(v28 + 17) = 0;
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v21 + 160))(__p, v21);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v28 + 40))(v28, __p);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v28 + 17) = 0;
        if (v34 < 0)
          operator delete(__p[0]);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 32))(v21, 7);
      }
      else
      {
        v29 = v27(v19);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v19 + 16))(v19, v29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"Error out transaction ", 22);
        *(_BYTE *)(v29 + 17) = 0;
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v21 + 160))(__p, v21);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v29 + 40))(v29, __p);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v29 + 17) = 0;
        if (v34 < 0)
          operator delete(__p[0]);
        (*(void (**)(uint64_t, const ImsResult *))(*(_QWORD *)v21 + 112))(v21, a2);
      }
      if (v20)
      {
        v30 = (unint64_t *)&v20->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v18 = (_QWORD *)*v18;
    }
    while (v18);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v35);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v38);
}

void sub_1BF0E3794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void SipTransactionLayer::clientTransactionFromFirstViaHop(SipTransactionLayer *this, const SipMessage *a2, uint64_t a3)
{
  void *HeaderWith;
  SipViaHop **v7;
  SipViaHop *v8;
  __int128 *v9;
  uint64_t v10;
  __int128 *v11;
  char *v12;
  __int128 *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  const char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  HeaderWith = SipMessage::firstHeaderWithType<SipViaHeader>(a3);
  if (!HeaderWith
    || (v7 = (SipViaHop **)*((_QWORD *)HeaderWith + 8), v7 == *((SipViaHop ***)HeaderWith + 9))
    || (v8 = *v7) == 0)
  {
    v15 = *((_QWORD *)a2 + 4);
    v14 = (char *)a2 + 32;
    v16 = (*(uint64_t (**)(char *))(v15 + 56))(v14);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v14 + 16))(v14, v16);
    v17 = *(_QWORD **)(v16 + 8);
    v18 = "couldn't get first via header from message";
    v19 = 42;
LABEL_12:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    return;
  }
  v9 = SipViaHop::branch(*v7);
  v10 = *((unsigned __int8 *)v9 + 23);
  if ((v10 & 0x80u) != 0)
    v10 = *((_QWORD *)v9 + 1);
  if (!v10)
  {
    v21 = *((_QWORD *)a2 + 4);
    v20 = (char *)a2 + 32;
    v16 = (*(uint64_t (**)(char *))(v21 + 56))(v20);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v20 + 16))(v20, v16);
    v17 = *(_QWORD **)(v16 + 8);
    v18 = "no branch param in Via header";
    v19 = 29;
    goto LABEL_12;
  }
  v11 = SipViaHop::branch(v8);
  v12 = (char *)SipMessage::header<SipCSeqHeader>(a3);
  if (v12)
    v13 = (__int128 *)(v12 + 64);
  else
    v13 = &ims::kEmptyString;
  SipTransactionLayer::clientTransactionWithIdAndMethod(this, (uint64_t)a2, (uint64_t)v11, (uint64_t)v13);
}

void SipTransactionLayer::clientTransactionWithIdAndMethod(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p[2];
  uint64_t v16;

  __p[0] = 0;
  __p[1] = 0;
  v16 = 0;
  SipTransaction::transactionMapKey(a3, a4, (uint64_t)__p);
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>((_QWORD *)(a2 + 152), (unsigned __int8 *)__p);
  if (v8)
  {
    v9 = *((_QWORD *)v8 + 6);
    *a1 = *((_QWORD *)v8 + 5);
    a1[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    v13 = *(_QWORD *)(a2 + 32);
    v12 = a2 + 32;
    v14 = (*(uint64_t (**)(uint64_t))(v13 + 56))(v12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"can't find client transaction with id ", 38);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" and method ", 12);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, a4);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    *a1 = 0;
    a1[1] = 0;
  }
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
}

void sub_1BF0E3ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipTransactionLayer::serverTransactionFromFirstViaHop(SipTransactionLayer *this, const SipMessage *a2, uint64_t a3)
{
  void *HeaderWith;
  SipViaHop **v7;
  SipViaHop *v8;
  __int128 *v9;
  uint64_t v10;
  __int128 *v11;
  char *v12;
  __int128 *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  const char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  uint64_t v30;
  std::string v31;

  HeaderWith = SipMessage::firstHeaderWithType<SipViaHeader>(a3);
  if (!HeaderWith
    || (v7 = (SipViaHop **)*((_QWORD *)HeaderWith + 8), v7 == *((SipViaHop ***)HeaderWith + 9))
    || (v8 = *v7) == 0)
  {
    v16 = *((_QWORD *)a2 + 4);
    v15 = (char *)a2 + 32;
    v17 = (*(uint64_t (**)(char *))(v16 + 56))(v15);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v15 + 16))(v15, v17);
    v18 = *(_QWORD **)(v17 + 8);
    v19 = "couldn't get first via header from message";
    v20 = 42;
LABEL_13:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    return;
  }
  v9 = SipViaHop::branch(*v7);
  v10 = *((unsigned __int8 *)v9 + 23);
  if ((v10 & 0x80u) != 0)
    v10 = *((_QWORD *)v9 + 1);
  if (!v10)
  {
    v22 = *((_QWORD *)a2 + 4);
    v21 = (char *)a2 + 32;
    v17 = (*(uint64_t (**)(char *))(v22 + 56))(v21);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v21 + 16))(v21, v17);
    v18 = *(_QWORD **)(v17 + 8);
    v19 = "no branch param in Via header";
    v20 = 29;
    goto LABEL_13;
  }
  v11 = SipViaHop::branch(v8);
  v12 = (char *)SipMessage::header<SipCSeqHeader>(a3);
  if (v12)
    v13 = (__int128 *)(v12 + 64);
  else
    v13 = &ims::kEmptyString;
  memset(&v31, 0, sizeof(v31));
  LODWORD(v14) = *((unsigned __int8 *)v13 + 23);
  if ((v14 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
    LODWORD(v14) = *((unsigned __int8 *)v13 + 23);
  }
  else
  {
    v31 = *(std::string *)v13;
  }
  __p[1] = 0;
  v30 = 0;
  __p[0] = 0;
  v14 = v14;
  if ((v14 & 0x80u) == 0)
    v23 = v14;
  else
    v23 = *((_QWORD *)v13 + 1);
  if (v23 != 3)
    goto LABEL_29;
  if ((v14 & 0x80) == 0)
  {
    if ((_DWORD)v14)
    {
      v24 = &SipRequest::kMethodAck;
      while (*(unsigned __int8 *)v13 == *(unsigned __int8 *)v24)
      {
        v13 = (__int128 *)((char *)v13 + 1);
        v24 = (__int128 *)((char *)v24 + 1);
        if (!--v14)
          goto LABEL_28;
      }
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (!memcmp(*(const void **)v13, &SipRequest::kMethodAck, *((_QWORD *)v13 + 1)))
LABEL_28:
    std::string::operator=(&v31, (const std::string *)"INVITE");
LABEL_29:
  SipTransaction::transactionMapKey((uint64_t)v11, (uint64_t)&v31, (uint64_t)__p);
  v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>((_QWORD *)a2 + 24, (unsigned __int8 *)__p);
  if (v25)
  {
    v26 = *((_QWORD *)v25 + 6);
    *(_QWORD *)this = *((_QWORD *)v25 + 5);
    *((_QWORD *)this + 1) = v26;
    if (v26)
    {
      v27 = (unint64_t *)(v26 + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  if (SHIBYTE(v30) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
}

void sub_1BF0E3D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

std::string::size_type SipTransactionLayer::updateViaHeaderForRequest(SipTransactionLayer *this, SipRequest *a2)
{
  SipHeader *HeaderWith;
  std::string::size_type *v5;
  std::string::size_type v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  SipHeader *v21;
  std::string __p;

  HeaderWith = SipMessage::firstHeaderWithType<SipViaHeader>(a2, 0);
  if (!HeaderWith
    || (v5 = (std::string::size_type *)*((_QWORD *)HeaderWith + 8), v5 == *((std::string::size_type **)HeaderWith + 9)))
  {
    v6 = 0;
  }
  else
  {
    v6 = *v5;
  }
  if (((*(uint64_t (**)(SipRequest *))(*(_QWORD *)a2 + 72))(a2) & 1) != 0 || !v6)
  {
    SipMessage::removeHeadersWithName(a2, SipHeader::kHeaderVia);
    v6 = operator new();
    *(_QWORD *)(v6 + 48) = 0;
    *(_QWORD *)(v6 + 56) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 8) = &off_1E78D08F8;
    *(_QWORD *)(v6 + 16) = 0;
    *(_WORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 88) = 0;
    *(_QWORD *)(v6 + 80) = 0;
    *(_QWORD *)(v6 + 64) = &off_1E78B82D8;
    *(_QWORD *)(v6 + 72) = v6 + 80;
    *(_WORD *)(v6 + 96) = 256;
    *(_QWORD *)v6 = &off_1E78E28F0;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_QWORD *)(v6 + 136) = 0;
    v7 = SipTransportLayer::userAgent(this);
    ImsRandomStringGenerator::makeBranchParameter((ImsRandomStringGenerator *)(v7 + 592), &__p);
    SipViaHop::setBranch(v6, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 17) + 16))(*((_QWORD *)this + 17));
    SipHop::setSupportsCompression((uint64_t **)v6, *(unsigned __int8 *)(v8 + 437));
    v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 17) + 16))(*((_QWORD *)this + 17));
    SipViaHop::setSupportsRport((uint64_t **)v6, *(unsigned __int8 *)(v9 + 581));
    if (!*(_BYTE *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 17) + 16))(*((_QWORD *)this + 17)) + 442))
      goto LABEL_29;
    v10 = (unsigned __int8 *)(*(uint64_t (**)(SipRequest *))(*(_QWORD *)a2 + 112))(a2);
    v11 = v10[23];
    v12 = (v11 & 0x80u) == 0 ? v10[23] : *((_QWORD *)v10 + 1);
    if (v12 != 8)
      goto LABEL_29;
    if ((v11 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v10, "REGISTER", *((_QWORD *)v10 + 1)))
      {
LABEL_29:
        v21 = SipMessage::firstHeaderWithType<SipViaHeader>(a2, 1);
        __p.__r_.__value_.__r.__words[0] = v6;
        std::vector<SipViaHop *>::insert((char **)v21 + 8, *((char **)v21 + 8), (char *)&__p);
        return v6;
      }
    }
    else if (v10[23])
    {
      v13 = "REGISTER";
      while (*v10 == *(unsigned __int8 *)v13)
      {
        ++v10;
        ++v13;
        if (!--v11)
          goto LABEL_21;
      }
      goto LABEL_29;
    }
LABEL_21:
    v14 = *((_QWORD *)this + 17);
    v15 = *(std::__shared_weak_count **)(v14 + 16);
    if (v15)
    {
      v16 = std::__shared_weak_count::lock(v15);
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
      if (v16)
      {
        v17 = v16;
        v18 = *(_QWORD *)(v14 + 8);
        __p.__r_.__value_.__r.__words[0] = v18;
        if (v18)
          SipViaHop::setSupportsKeep((uint64_t **)v6, *(unsigned __int8 *)(v18 + 2657));
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    goto LABEL_29;
  }
  return v6;
}

void sub_1BF0E3FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void SipTransactionLayer::sendRequest(uint64_t a1@<X0>, const SipMessage *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  SipMessage *v10;
  SipUriHeader *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  SipHeader *v15;
  SipViaHop *v16;
  __int128 *v17;
  __int128 v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t HopForMessage;
  uint64_t v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  std::string::size_type v38;
  std::string::size_type v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint8x8_t v57;
  unint64_t v58;
  unint64_t v59;
  std::string::size_type *v60;
  std::string::size_type i;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  std::string *v65;
  float v66;
  float v67;
  _BOOL8 v68;
  unint64_t v69;
  unint64_t v70;
  size_t v71;
  _QWORD *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  __int128 v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t *v92;
  const SipMessage *v93;
  uint64_t *v94;
  uint64_t v95;
  _QWORD v96[5];
  std::string v97;
  std::string v98;
  _BYTE v99[72];
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  void *__p[2];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::string v115;
  __int128 v116;
  uint64_t v117;
  std::string v118;

  v10 = (SipMessage *)(*(uint64_t (**)(const SipMessage *))(*(_QWORD *)a2 + 32))(a2);
  v11 = (SipUriHeader *)SipMessage::header<SipFromHeader>((uint64_t)v10);
  if (v11)
    v12 = SipUriHeader::tag(v11);
  else
    v12 = &ims::kEmptyString;
  v13 = *((unsigned __int8 *)v12 + 23);
  if ((v13 & 0x80u) != 0)
    v13 = *((_QWORD *)v12 + 1);
  if (!v13)
  {
    v14 = SipTransportLayer::userAgent((SipTransportLayer *)a1);
    ImsRandomStringGenerator::randomString((ImsRandomStringGenerator *)(v14 + 592), 10, (std::string *)__p);
    v15 = SipMessage::header<SipFromHeader>(v10, 1);
    SipUriHeader::setTag((uint64_t)v15, (uint64_t)__p);
    if (SBYTE7(v109) < 0)
      operator delete(__p[0]);
  }
  v16 = (SipViaHop *)SipTransactionLayer::updateViaHeaderForRequest((SipTransactionLayer *)a1, v10);
  memset(&v115, 0, sizeof(v115));
  v17 = SipViaHop::branch(v16);
  if (*((char *)v17 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v115, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
  }
  else
  {
    v18 = *v17;
    v115.__r_.__value_.__r.__words[2] = *((_QWORD *)v17 + 2);
    *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v18;
  }
  v19 = a4[1];
  v113 = *a4;
  v114 = (std::__shared_weak_count *)v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v112 = 0;
  v110 = 0u;
  v111 = 0u;
  *(_OWORD *)__p = 0u;
  v109 = 0u;
  SipTransportLayer::sendMessage(*(_QWORD *)(a1 + 136), v10, a4, &v113, (ImsResult *)__p);
  v106 = 0;
  v107 = 0;
  v93 = a2;
  if (*a4)
  {
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a4 + 112))(&v118);
    HopForMessage = SipTransportGroup::copyNextHopForMessage((SipTransportGroup *)v118.__r_.__value_.__l.__data_, a2);
    v23 = HopForMessage;
    size = (std::__shared_weak_count *)v118.__r_.__value_.__l.__size_;
    if (!v118.__r_.__value_.__l.__size_)
      goto LABEL_20;
    v25 = (unint64_t *)(v118.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
      if (!v23)
        goto LABEL_28;
    }
    else
    {
LABEL_20:
      if (!HopForMessage)
        goto LABEL_28;
    }
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v23 + 48))(&v118, v23);
    std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v106, (uint64_t *)&v118);
    v27 = (std::__shared_weak_count *)v118.__r_.__value_.__l.__size_;
    if (v118.__r_.__value_.__l.__size_)
    {
      v28 = (unint64_t *)(v118.__r_.__value_.__l.__size_ + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
LABEL_28:
    if (v106)
      goto LABEL_34;
    goto LABEL_29;
  }
  v23 = 0;
LABEL_29:
  v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 120))(*(_QWORD *)(a1 + 136));
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v30 + 48))(&v118);
  std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v106, (uint64_t *)&v118);
  v31 = (std::__shared_weak_count *)v118.__r_.__value_.__l.__size_;
  if (v118.__r_.__value_.__l.__size_)
  {
    v32 = (unint64_t *)(v118.__r_.__value_.__l.__size_ + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
LABEL_34:
  v95 = v23;
  *a5 = 0;
  a5[1] = 0;
  v34 = (unsigned __int8 *)(*(uint64_t (**)(SipMessage *))(*(_QWORD *)v10 + 112))(v10);
  v35 = v34[23];
  if ((v35 & 0x80u) == 0)
    v36 = v34[23];
  else
    v36 = *((_QWORD *)v34 + 1);
  if (v36 == 6)
  {
    if ((v35 & 0x80) == 0)
    {
      if (v34[23])
      {
        v37 = "INVITE";
        while (*v34 == *(unsigned __int8 *)v37)
        {
          ++v34;
          ++v37;
          if (!--v35)
            goto LABEL_46;
        }
        goto LABEL_45;
      }
LABEL_46:
      SipClientInviteTransaction::create(a1, (uint64_t)v10, (uint64_t)&v106, &v115, (SipClientInviteTransaction **)&v118);
      goto LABEL_47;
    }
    if (!memcmp(*(const void **)v34, "INVITE", *((_QWORD *)v34 + 1)))
      goto LABEL_46;
  }
LABEL_45:
  SipClientNonInviteTransaction::create(a1, (uint64_t)v10, (uint64_t)&v106, &v115, (SipClientNonInviteTransaction **)&v118);
LABEL_47:
  v38 = v118.__r_.__value_.__r.__words[0];
  *(_OWORD *)a5 = *(_OWORD *)&v118.__r_.__value_.__l.__data_;
  v39 = v38;
  v40 = *a4;
  if (*a4)
    goto LABEL_48;
  if (v113)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v113 + 72))(v113))
    {
      *(_BYTE *)(v39 + 360) = 0;
      v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 64))(a1 + 32);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32, v47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v47 + 8), (uint64_t)"transport is gone but reliable one was used for transaciton - forcing retransmits off", 85);
      *(_BYTE *)(v47 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v47 + 17) = 0;
    }
    v40 = *a4;
    if (*a4)
    {
LABEL_48:
      v41 = a4[1];
      v104 = v40;
      v105 = (std::__shared_weak_count *)v41;
      if (v41)
      {
        v42 = (unint64_t *)(v41 + 8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      (*(void (**)(std::string::size_type, uint64_t *, uint64_t))(*(_QWORD *)(v39 + 72) + 48))(v39 + 72, &v104, 1);
      v44 = v105;
      if (v105)
      {
        p_shared_owners = (unint64_t *)&v105->__shared_owners_;
        do
          v46 = __ldaxr(p_shared_owners);
        while (__stlxr(v46 - 1, p_shared_owners));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
    }
  }
  v48 = *a5;
  v49 = (std::__shared_weak_count *)a5[1];
  v102 = *a5;
  v103 = v49;
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v94 = a3;
  (*(void (**)(uint64_t))(*(_QWORD *)v48 + 96))(v48);
  v116 = 0uLL;
  v117 = 0;
  v52 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v102 + 288) + 112))(*(_QWORD *)(v102 + 288));
  SipTransaction::transactionMapKey(v102 + 320, v52, (uint64_t)&v116);
  v53 = (_QWORD *)(a1 + 152);
  v54 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 176, (uint64_t)&v116);
  v55 = v54;
  v56 = *(_QWORD *)(a1 + 160);
  if (v56)
  {
    v57 = (uint8x8_t)vcnt_s8((int8x8_t)v56);
    v57.i16[0] = vaddlv_u8(v57);
    v58 = v57.u32[0];
    if (v57.u32[0] > 1uLL)
    {
      v59 = v54;
      if (v54 >= v56)
        v59 = v54 % v56;
    }
    else
    {
      v59 = (v56 - 1) & v54;
    }
    v60 = *(std::string::size_type **)(*v53 + 8 * v59);
    if (v60)
    {
      for (i = *v60; i; i = *(_QWORD *)i)
      {
        v62 = *(_QWORD *)(i + 8);
        if (v62 == v55)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 184, (unsigned __int8 *)(i + 16), (unsigned __int8 *)&v116) & 1) != 0)
          {
            v92 = v94;
            goto LABEL_104;
          }
        }
        else
        {
          if (v58 > 1)
          {
            if (v62 >= v56)
              v62 %= v56;
          }
          else
          {
            v62 &= v56 - 1;
          }
          if (v62 != v59)
            break;
        }
      }
    }
  }
  else
  {
    v59 = 0;
  }
  v118.__r_.__value_.__r.__words[2] = 0;
  v63 = operator new(0x38uLL);
  v64 = (_QWORD *)(a1 + 168);
  v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
  v118.__r_.__value_.__l.__size_ = a1 + 168;
  v118.__r_.__value_.__s.__data_[16] = 0;
  *v63 = 0;
  v63[1] = v55;
  v65 = (std::string *)(v63 + 2);
  if (SHIBYTE(v117) < 0)
  {
    std::string::__init_copy_ctor_external(v65, (const std::string::value_type *)v116, *((std::string::size_type *)&v116 + 1));
  }
  else
  {
    *(_OWORD *)&v65->__r_.__value_.__l.__data_ = v116;
    v63[4] = v117;
  }
  v63[5] = 0;
  v63[6] = 0;
  v118.__r_.__value_.__s.__data_[16] = 1;
  v66 = (float)(unint64_t)(*(_QWORD *)(a1 + 176) + 1);
  v67 = *(float *)(a1 + 184);
  if (!v56 || (float)(v67 * (float)v56) < v66)
  {
    v68 = 1;
    if (v56 >= 3)
      v68 = (v56 & (v56 - 1)) != 0;
    v69 = v68 | (2 * v56);
    v70 = vcvtps_u32_f32(v66 / v67);
    if (v69 <= v70)
      v71 = v70;
    else
      v71 = v69;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1 + 152, v71);
    v56 = *(_QWORD *)(a1 + 160);
    if ((v56 & (v56 - 1)) != 0)
    {
      if (v55 >= v56)
        v59 = v55 % v56;
      else
        v59 = v55;
    }
    else
    {
      v59 = (v56 - 1) & v55;
    }
  }
  v72 = *(_QWORD **)(*v53 + 8 * v59);
  if (v72)
  {
    *(_QWORD *)v118.__r_.__value_.__l.__data_ = *v72;
    *v72 = v118.__r_.__value_.__r.__words[0];
    v92 = v94;
  }
  else
  {
    *(_QWORD *)v118.__r_.__value_.__l.__data_ = *v64;
    *v64 = v118.__r_.__value_.__r.__words[0];
    *(_QWORD *)(*v53 + 8 * v59) = v64;
    v92 = v94;
    if (*(_QWORD *)v118.__r_.__value_.__l.__data_)
    {
      v73 = *(_QWORD *)(*(_QWORD *)v118.__r_.__value_.__l.__data_ + 8);
      if ((v56 & (v56 - 1)) != 0)
      {
        if (v73 >= v56)
          v73 %= v56;
      }
      else
      {
        v73 &= v56 - 1;
      }
      *(_QWORD *)(*v53 + 8 * v73) = v118.__r_.__value_.__r.__words[0];
    }
  }
  i = v118.__r_.__value_.__r.__words[0];
  v118.__r_.__value_.__r.__words[0] = 0;
  ++*(_QWORD *)(a1 + 176);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v118, 0);
LABEL_104:
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(i + 40), &v102);
  if (SHIBYTE(v117) < 0)
    operator delete((void *)v116);
  v74 = v103;
  if (v103)
  {
    v75 = (unint64_t *)&v103->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = *a5;
  v78 = v92[1];
  v100 = *v92;
  v101 = (std::__shared_weak_count *)v78;
  if (v78)
  {
    v79 = (unint64_t *)(v78 + 8);
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
  }
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v77 + 344), &v100);
  v81 = v101;
  if (v101)
  {
    v82 = (unint64_t *)&v101->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if ((*(unsigned int (**)(void *, _QWORD))(*(_QWORD *)__p[1] + 24))(__p[1], v109))
  {
    memset(&v118, 0, sizeof(v118));
    v84 = (*(uint64_t (**)(const SipMessage *))(*(_QWORD *)v93 + 112))(v93);
    if (*(char *)(v84 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)v84, *(_QWORD *)(v84 + 8));
    }
    else
    {
      v85 = *(_OWORD *)v84;
      v118.__r_.__value_.__r.__words[2] = *(_QWORD *)(v84 + 16);
      *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v85;
    }
    v96[0] = MEMORY[0x1E0C809B0];
    v96[1] = 1174405120;
    v96[2] = ___ZN19SipTransactionLayer11sendRequestERK10SipRequestNSt3__110shared_ptrI18SipTransactionUserEENS4_I21SipTransportInterfaceEE_block_invoke;
    v96[3] = &__block_descriptor_tmp_38;
    v96[4] = a1;
    if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v97, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
    else
      v97 = v115;
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v98, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
    else
      v98 = v118;
    ImsResult::ImsResult((ImsResult *)v99, (const ImsResult *)__p);
    ims::performBlock((IMSClientManager *)v96);
    ImsResult::~ImsResult((ImsResult *)v99);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v97.__r_.__value_.__l.__data_);
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v118.__r_.__value_.__l.__data_);
  }
  if (v95)
    (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
  v86 = v107;
  if (v107)
  {
    v87 = (unint64_t *)&v107->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  ImsResult::~ImsResult((ImsResult *)__p);
  v89 = v114;
  if (v114)
  {
    v90 = (unint64_t *)&v114->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
}

void sub_1BF0E49B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (a23 < 0)
    operator delete(__p);
  if (*(char *)(v52 - 89) < 0)
    operator delete(*(void **)(v52 - 112));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a11);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  ImsResult::~ImsResult((ImsResult *)&a47);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v52 - 176);
  if (*(char *)(v52 - 137) < 0)
    operator delete(*(void **)(v52 - 160));
  _Unwind_Resume(a1);
}

void ___ZN19SipTransactionLayer11sendRequestERK10SipRequestNSt3__110shared_ptrI18SipTransactionUserEENS4_I21SipTransportInterfaceEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a1 + 40;
  v4 = a1 + 64;
  v5 = v2 + 32;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 32) + 64))(v2 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"triggering error in client transaction ", 39);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" method ", 8);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)": ", 2);
  v8 = *(_QWORD *)(a1 + 88);
  v7 = a1 + 88;
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v7, v6);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  v13 = 0;
  v14 = 0;
  SipTransactionLayer::clientTransactionWithIdAndMethod(&v13, v2, v3, v4);
  if (v13)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 112))(v13, v7);
  }
  else
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"triggerClientTransactionError: client transaction ", 50);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" no longer exists", 17);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
  }
  v10 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1BF0E4D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c14_ZTS9ImsResult(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v5;
  }
  ImsResult::ImsResult((ImsResult *)(a1 + 88), (const ImsResult *)(a2 + 88));
}

void sub_1BF0E4DEC(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 63) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c14_ZTS9ImsResult(uint64_t a1)
{
  ImsResult::~ImsResult((ImsResult *)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void SipTransactionLayer::processMessageFromTransportLayer(uint64_t a1, _QWORD *lpsrc, uint64_t a3, SipServerTransaction **a4)
{
  const SipRequest *v7;
  const SipRequest *v8;
  SipServerTransaction *v9;
  SipServerTransaction *v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  const SipResponse *v17;
  const SipResponse *v18;
  SipServerTransaction *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  size_t v30;
  SipServerTransaction *v31;
  unint64_t *v32;
  unint64_t v33;
  void *HeaderWith;
  SipViaHop **v35;
  SipViaHop *v36;
  __int128 *v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t *v72;
  uint64_t v73;
  __int128 *v74;
  __int128 v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  __int128 *v79;
  __int128 v80;
  unint64_t *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint8x8_t v91;
  unint64_t v92;
  unint64_t v93;
  SipServerTransaction **v94;
  SipServerTransaction *v95;
  unint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  std::string *v99;
  float v100;
  float v101;
  _BOOL8 v102;
  unint64_t v103;
  unint64_t v104;
  size_t v105;
  _QWORD *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  SipServerTransaction *v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  void *__p[2];
  uint64_t v127;
  SipServerTransaction *v128[2];
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;

  if (v7)
  {
    v8 = v7;
    v10 = *a4;
    v9 = a4[1];
    if (v9)
    {
      v11 = (unint64_t *)((char *)v9 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)v7 + 112))(v7);
    v14 = v13[23];
    if ((v14 & 0x80u) == 0)
      v15 = v13[23];
    else
      v15 = *((_QWORD *)v13 + 1);
    if (v15 != 3)
      goto LABEL_23;
    if ((v14 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v13, &SipRequest::kMethodAck, *((_QWORD *)v13 + 1)))
        goto LABEL_23;
    }
    else if (v13[23])
    {
      v16 = &SipRequest::kMethodAck;
      while (*v13 == *(unsigned __int8 *)v16)
      {
        ++v13;
        v16 = (__int128 *)((char *)v16 + 1);
        if (!--v14)
          goto LABEL_43;
      }
LABEL_23:
      v124 = 0uLL;
      SipTransactionLayer::serverTransactionFromFirstViaHop((SipTransactionLayer *)&v124, (const SipMessage *)a1, (uint64_t)v8);
      v31 = (SipServerTransaction *)v124;
      if ((_QWORD)v124)
        goto LABEL_65;
      v122 = v10;
      if (v9)
      {
        v32 = (unint64_t *)((char *)v9 + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      HeaderWith = SipMessage::firstHeaderWithType<SipViaHeader>((uint64_t)v8);
      if (HeaderWith
        && (v35 = (SipViaHop **)*((_QWORD *)HeaderWith + 8), v35 != *((SipViaHop ***)HeaderWith + 9))
        && (v36 = *v35) != 0)
      {
        v37 = SipViaHop::branch(*v35);
        v38 = *((unsigned __int8 *)v37 + 23);
        if ((v38 & 0x80u) != 0)
          v38 = *((_QWORD *)v37 + 1);
        if (v38)
        {
          v39 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)v8 + 112))(v8);
          v40 = v39[23];
          if ((v40 & 0x80u) == 0)
            v41 = v39[23];
          else
            v41 = *((_QWORD *)v39 + 1);
          if (v41 != 6)
            goto LABEL_107;
          if ((v40 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v39, "INVITE", *((_QWORD *)v39 + 1)))
              goto LABEL_107;
          }
          else if (v39[23])
          {
            v42 = "INVITE";
            while (*v39 == *(unsigned __int8 *)v42)
            {
              ++v39;
              ++v42;
              if (!--v40)
                goto LABEL_111;
            }
LABEL_107:
            (*(void (**)(void **__return_ptr, SipViaHop *))(*(_QWORD *)v36 + 48))(__p, v36);
            v74 = SipViaHop::branch(v36);
            SipServerNonInviteTransaction::create(a1, (uint64_t)v8, (uint64_t)__p, (const std::string *)v74, v128);
            v75 = *(_OWORD *)v128;
            v128[0] = 0;
            v128[1] = 0;
            v123 = v75;
            v76 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v77 = (unint64_t *)((char *)__p[1] + 8);
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
LABEL_114:
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
              goto LABEL_116;
            }
            goto LABEL_116;
          }
LABEL_111:
          (*(void (**)(void **__return_ptr, SipViaHop *))(*(_QWORD *)v36 + 48))(__p, v36);
          v79 = SipViaHop::branch(v36);
          SipServerInviteTransaction::create(a1, (uint64_t)v8, (uint64_t)__p, (const std::string *)v79, v128);
          v80 = *(_OWORD *)v128;
          v128[0] = 0;
          v128[1] = 0;
          v123 = v80;
          v76 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v81 = (unint64_t *)((char *)__p[1] + 8);
            do
              v78 = __ldaxr(v81);
            while (__stlxr(v78 - 1, v81));
            goto LABEL_114;
          }
LABEL_116:
          v125 = v123;
          if (*((_QWORD *)&v123 + 1))
          {
            v82 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
            do
              v83 = __ldxr(v82);
            while (__stxr(v83 + 1, v82));
          }
          (*(void (**)(_QWORD))(*(_QWORD *)v123 + 96))(v123);
          __p[0] = 0;
          __p[1] = 0;
          v127 = 0;
          v84 = v125;
          v85 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v125 + 288) + 112))(*(_QWORD *)(v125 + 288));
          SipTransaction::transactionMapKey(v84 + 320, v85, (uint64_t)__p);
          v86 = (_QWORD *)(a1 + 192);
          v87 = (_QWORD *)(a1 + 216);
          v88 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 216, (uint64_t)__p);
          v89 = v88;
          v90 = *(_QWORD *)(a1 + 200);
          if (!v90)
          {
            v93 = 0;
            goto LABEL_138;
          }
          v91 = (uint8x8_t)vcnt_s8((int8x8_t)v90);
          v91.i16[0] = vaddlv_u8(v91);
          v92 = v91.u32[0];
          if (v91.u32[0] > 1uLL)
          {
            v93 = v88;
            if (v88 >= v90)
              v93 = v88 % v90;
          }
          else
          {
            v93 = (v90 - 1) & v88;
          }
          v94 = *(SipServerTransaction ***)(*v86 + 8 * v93);
          if (!v94)
            goto LABEL_138;
          v95 = *v94;
          if (!*v94)
            goto LABEL_137;
          while (1)
          {
            v96 = *((_QWORD *)v95 + 1);
            if (v96 == v89)
            {
              if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 224, (unsigned __int8 *)v95 + 16, (unsigned __int8 *)__p) & 1) != 0)goto LABEL_162;
            }
            else
            {
              if (v92 > 1)
              {
                if (v96 >= v90)
                  v96 %= v90;
              }
              else
              {
                v96 &= v90 - 1;
              }
              if (v96 != v93)
              {
LABEL_136:
                v87 = (_QWORD *)(a1 + 216);
LABEL_137:
                v86 = (_QWORD *)(a1 + 192);
LABEL_138:
                *(_QWORD *)&v129 = 0;
                v97 = operator new(0x38uLL);
                v98 = (_QWORD *)(a1 + 208);
                v128[0] = (SipServerTransaction *)v97;
                v128[1] = (SipServerTransaction *)(a1 + 208);
                LOBYTE(v129) = 0;
                *v97 = 0;
                v97[1] = v89;
                v99 = (std::string *)(v97 + 2);
                if (SHIBYTE(v127) < 0)
                {
                  std::string::__init_copy_ctor_external(v99, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
                }
                else
                {
                  *(_OWORD *)&v99->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
                  v97[4] = v127;
                }
                v97[5] = 0;
                v97[6] = 0;
                LOBYTE(v129) = 1;
                v100 = (float)(unint64_t)(*(_QWORD *)(a1 + 216) + 1);
                v101 = *(float *)(a1 + 224);
                if (!v90 || (float)(v101 * (float)v90) < v100)
                {
                  v102 = 1;
                  if (v90 >= 3)
                    v102 = (v90 & (v90 - 1)) != 0;
                  v103 = v102 | (2 * v90);
                  v104 = vcvtps_u32_f32(v100 / v101);
                  if (v103 <= v104)
                    v105 = v104;
                  else
                    v105 = v103;
                  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>((uint64_t)v86, v105);
                  v90 = *(_QWORD *)(a1 + 200);
                  if ((v90 & (v90 - 1)) != 0)
                  {
                    if (v89 >= v90)
                      v93 = v89 % v90;
                    else
                      v93 = v89;
                  }
                  else
                  {
                    v93 = (v90 - 1) & v89;
                  }
                }
                v106 = *(_QWORD **)(*v86 + 8 * v93);
                if (v106)
                {
                  *(_QWORD *)v128[0] = *v106;
                  *v106 = v128[0];
                }
                else
                {
                  *(_QWORD *)v128[0] = *v98;
                  *v98 = v128[0];
                  *(_QWORD *)(*v86 + 8 * v93) = v98;
                  if (*(_QWORD *)v128[0])
                  {
                    v107 = *(_QWORD *)(*(_QWORD *)v128[0] + 8);
                    if ((v90 & (v90 - 1)) != 0)
                    {
                      if (v107 >= v90)
                        v107 %= v90;
                    }
                    else
                    {
                      v107 &= v90 - 1;
                    }
                    *(SipServerTransaction **)(*v86 + 8 * v107) = v128[0];
                  }
                }
                v95 = v128[0];
                v128[0] = 0;
                ++*v87;
                std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)v128, 0);
LABEL_162:
                std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)v95 + 5, (uint64_t *)&v125);
                if (SHIBYTE(v127) < 0)
                  operator delete(__p[0]);
                v108 = (std::__shared_weak_count *)*((_QWORD *)&v125 + 1);
                if (*((_QWORD *)&v125 + 1))
                {
                  v109 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
                  do
                    v110 = __ldaxr(v109);
                  while (__stlxr(v110 - 1, v109));
                  if (!v110)
                  {
                    ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                    std::__shared_weak_count::__release_weak(v108);
                  }
                }
                if (v122)
                {
                  v128[0] = v122;
                  v128[1] = v9;
                  if (v9)
                  {
                    v111 = (unint64_t *)((char *)v9 + 8);
                    do
                      v112 = __ldxr(v111);
                    while (__stxr(v112 + 1, v111));
                  }
                  (*(void (**)(uint64_t, SipServerTransaction **, uint64_t))(*(_QWORD *)(v123 + 72) + 48))(v123 + 72, v128, 1);
                  v113 = (std::__shared_weak_count *)v128[1];
                  if (v128[1])
                  {
                    v114 = (unint64_t *)((char *)v128[1] + 8);
                    do
                      v115 = __ldaxr(v114);
                    while (__stlxr(v115 - 1, v114));
                    if (!v115)
                    {
                      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                      std::__shared_weak_count::__release_weak(v113);
                    }
                  }
                }
                v116 = SipTransportLayer::userAgent((SipTransportLayer *)a1);
                *(_OWORD *)__p = v123;
                if (*((_QWORD *)&v123 + 1))
                {
                  v117 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
                  do
                    v118 = __ldxr(v117);
                  while (__stxr(v118 + 1, v117));
                }
                SipUserAgent::handleNewServerTransaction(v116, (uint64_t *)__p);
                v119 = (std::__shared_weak_count *)__p[1];
                if (__p[1])
                {
                  v120 = (unint64_t *)((char *)__p[1] + 8);
                  do
                    v121 = __ldaxr(v120);
                  while (__stlxr(v121 - 1, v120));
                  if (!v121)
                  {
                    ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                    std::__shared_weak_count::__release_weak(v119);
                  }
                }
LABEL_54:
                v49 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
                v124 = v123;
                if (v49)
                {
                  p_shared_owners = (unint64_t *)&v49->__shared_owners_;
                  do
                    v51 = __ldaxr(p_shared_owners);
                  while (__stlxr(v51 - 1, p_shared_owners));
                  if (!v51)
                  {
                    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                    std::__shared_weak_count::__release_weak(v49);
                  }
                }
                if (v9)
                {
                  v52 = (unint64_t *)((char *)v9 + 8);
                  do
                    v53 = __ldaxr(v52);
                  while (__stlxr(v53 - 1, v52));
                  if (!v53)
                  {
                    (*(void (**)(SipServerTransaction *))(*(_QWORD *)v9 + 16))(v9);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v9);
                  }
                }
                v31 = (SipServerTransaction *)v124;
                if ((_QWORD)v124)
                {
LABEL_65:
                  v132 = 0;
                  v130 = 0u;
                  v131 = 0u;
                  *(_OWORD *)v128 = 0u;
                  v129 = 0u;
                  (*(void (**)(SipServerTransaction **__return_ptr, const SipRequest *))(*(_QWORD *)v8 + 88))(v128, v8);
                  if ((*(unsigned int (**)(SipServerTransaction *, _QWORD))(*(_QWORD *)v128[1] + 24))(v128[1], v129))
                  {
                    v55 = *(_QWORD *)(a1 + 32);
                    v54 = a1 + 32;
                    v56 = (*(uint64_t (**)(uint64_t))(v55 + 64))(v54);
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v54 + 16))(v54, v56);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v56 + 8), (uint64_t)"request is not valid: ", 22);
                    *(_BYTE *)(v56 + 17) = 0;
                    (*((void (**)(SipServerTransaction **, uint64_t))v128[0] + 2))(v128, v56);
                    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v56 + 64))(v56, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    *(_BYTE *)(v56 + 17) = 0;
                    std::string::basic_string[abi:ne180100]<0>(__p, "");
                    SipServerTransaction::rejectTransactionWithStatus((uint64_t)v31, 400, (uint64_t)__p);
LABEL_90:
                    if (SHIBYTE(v127) < 0)
                      operator delete(__p[0]);
                  }
                  else
                  {
                    if (!SipUri::isValidUri((const SipRequest *)((char *)v8 + 112)))
                    {
                      v69 = *(_QWORD *)(a1 + 32);
                      v68 = a1 + 32;
                      v70 = (*(uint64_t (**)(uint64_t))(v69 + 64))(v68);
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 16))(v68, v70);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v70 + 8), (uint64_t)"request URI is not valid", 24);
                      *(_BYTE *)(v70 + 17) = 0;
                      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v70 + 64))(v70, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                      *(_BYTE *)(v70 + 17) = 0;
                      std::string::basic_string[abi:ne180100]<0>(__p, "");
                      SipServerTransaction::rejectTransactionWithStatus((uint64_t)v31, 416, (uint64_t)__p);
                      goto LABEL_90;
                    }
                    SipServerTransaction::handleRequest(v31, v8);
                  }
                  ImsResult::~ImsResult((ImsResult *)v128);
                }
                v45 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
                if (!*((_QWORD *)&v124 + 1))
                  goto LABEL_97;
                v71 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
                do
                  v47 = __ldaxr(v71);
                while (__stlxr(v47 - 1, v71));
LABEL_96:
                if (!v47)
                {
                  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                  std::__shared_weak_count::__release_weak(v45);
                  if (v9)
                    goto LABEL_98;
                }
                else
                {
LABEL_97:
                  if (v9)
                  {
LABEL_98:
                    v72 = (unint64_t *)((char *)v9 + 8);
                    do
                      v67 = __ldaxr(v72);
                    while (__stlxr(v67 - 1, v72));
                    goto LABEL_100;
                  }
                }
                return;
              }
            }
            v95 = *(SipServerTransaction **)v95;
            if (!v95)
              goto LABEL_136;
          }
        }
        v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 48))(a1 + 32);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32, v73);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v73 + 8), (uint64_t)"incoming request has no branch in via header: ", 46);
        *(_BYTE *)(v73 + 17) = 0;
        (*(void (**)(SipViaHop *, uint64_t))(*(_QWORD *)v36 + 40))(v36, v73);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v73 + 64))(v73, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v73 + 17) = 0;
      }
      else
      {
        v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 48))(a1 + 32);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32, v48);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v48 + 8), (uint64_t)"incoming request has no via header", 34);
        *(_BYTE *)(v48 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v48 + 17) = 0;
      }
      v123 = 0uLL;
      goto LABEL_54;
    }
LABEL_43:
    v128[0] = 0;
    v128[1] = 0;
    SipTransactionLayer::serverTransactionFromFirstViaHop((SipTransactionLayer *)v128, (const SipMessage *)a1, (uint64_t)v8);
    if (v128[0] && (v43 = *((_QWORD *)v128[0] + 70)) != 0 && *(_DWORD *)(v43 + 88) >= 0x12Cu)
    {
      SipServerTransaction::handleRequest(v128[0], v8);
    }
    else
    {
      v44 = SipTransportLayer::userAgent((SipTransportLayer *)a1);
      SipDialogManager::handleAck(*(SipDialogManager **)(v44 + 176), v8);
    }
    v45 = (std::__shared_weak_count *)v128[1];
    if (v128[1])
    {
      v46 = (unint64_t *)((char *)v128[1] + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      goto LABEL_96;
    }
    goto LABEL_97;
  }
  if (v17)
  {
    v18 = v17;
    v19 = *a4;
    v9 = a4[1];
    if (v9)
    {
      v20 = (unint64_t *)((char *)v9 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    (*(void (**)(SipServerTransaction **__return_ptr, const SipResponse *))(*(_QWORD *)v17 + 88))(v128, v17);
    v22 = (*(uint64_t (**)(SipServerTransaction *, _QWORD))(*(_QWORD *)v128[1] + 24))(v128[1], v129);
    ImsResult::~ImsResult((ImsResult *)v128);
    if (v22)
    {
      v24 = *(_QWORD *)(a1 + 32);
      v23 = a1 + 32;
      v25 = (*(uint64_t (**)(uint64_t))(v24 + 48))(v23);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"dropping invalid response", 25);
      *(_BYTE *)(v25 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v25 + 17) = 0;
    }
    else
    {
      v128[0] = 0;
      v128[1] = 0;
      SipTransactionLayer::clientTransactionFromFirstViaHop((SipTransactionLayer *)v128, (const SipMessage *)a1, (uint64_t)v18);
      if (v128[0])
      {
        if (v19)
        {
          v57 = (char *)v128[0] + 72;
          __p[0] = v19;
          __p[1] = v9;
          if (v9)
          {
            v58 = (unint64_t *)((char *)v9 + 8);
            do
              v59 = __ldxr(v58);
            while (__stxr(v59 + 1, v58));
          }
          (*(void (**)(char *, void **, uint64_t))(*(_QWORD *)v57 + 48))(v57, __p, 1);
          v60 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v61 = (unint64_t *)((char *)__p[1] + 8);
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
        }
        SipClientTransaction::handleResponse(v128[0], v18);
      }
      v63 = (std::__shared_weak_count *)v128[1];
      if (v128[1])
      {
        v64 = (unint64_t *)((char *)v128[1] + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
    }
    if (v9)
    {
      v66 = (unint64_t *)((char *)v9 + 8);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
LABEL_100:
      if (!v67)
      {
        (*(void (**)(SipServerTransaction *))(*(_QWORD *)v9 + 16))(v9);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v9);
      }
    }
  }
  else
  {
    v27 = *(_QWORD *)(a1 + 32);
    v26 = a1 + 32;
    v28 = (*(uint64_t (**)(uint64_t))(v27 + 56))(v26);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"unknown sip message type: ", 26);
    *(_BYTE *)(v28 + 17) = 0;
    v29 = (const char *)(*(_QWORD *)(*(_QWORD *)(*lpsrc - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v30 = strlen(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)v29, v30);
    *(_BYTE *)(v28 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v28 + 17) = 0;
  }
}

void sub_1BF0E5B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipTransactionLayer::processMessageFromTransportLayer(uint64_t a1, _QWORD *a2, uint64_t a3, SipServerTransaction **a4)
{
  SipTransactionLayer::processMessageFromTransportLayer(a1 - 24, a2, a3, a4);
}

uint64_t SipTransactionLayer::determineIncomingMessageCategory(SipTransactionLayer *this, const SipMessage *a2)
{
  char *v4;
  uint64_t v5;
  const SipRequest *v6;
  const SipRequest *v7;
  uint64_t v8;
  char *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  const SipResponse *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  unsigned __int8 v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 *v40;
  char *v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  size_t v51;
  void **p_s1;
  const char *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  uint64_t v69;
  uint64_t v70;
  const char *i;
  unsigned __int8 *v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  char *v76;
  __int128 *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 *v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  SipDialogManager **v85;
  SipDialogManager **v86;
  std::__shared_weak_count *v87;
  unint64_t *p_shared_owners;
  unint64_t v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  unsigned __int8 *v94;
  SipDialogManager **v95;
  _QWORD v97[11];
  void *__s1;
  size_t __n;
  unsigned __int8 v100;
  uint64_t v101;
  uint64_t v102;
  std::__shared_weak_count *v103;

  v4 = (char *)this + 32;
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 4) + 64))((char *)this + 32);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"SipTransactionLayer::determineIncomingMessageCategory", 53);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (!v6)
  {
    v23 = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 64))(v4);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))(v4, v23);
    v24 = *(_QWORD **)(v23 + 8);
    if (!v22)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Not a SipRequest or SipResponse", 31);
      *(_BYTE *)(v23 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v36 = 0;
      *(_BYTE *)(v23 + 17) = 0;
      return v36;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Is a SipResponse", 16);
    *(_BYTE *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v23 + 17) = 0;
    v102 = 0;
    v103 = 0;
    SipTransactionLayer::clientTransactionFromFirstViaHop((SipTransactionLayer *)&v102, this, (uint64_t)v22);
    v25 = v102;
    if (!v102)
    {
      v45 = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 64))(v4);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))(v4, v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v45 + 8), (uint64_t)"Didn't get a client transaction", 31);
      *(_BYTE *)(v45 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v36 = 0;
      *(_BYTE *)(v45 + 17) = 0;
LABEL_161:
      v87 = v103;
      if (v103)
      {
        p_shared_owners = (unint64_t *)&v103->__shared_owners_;
        do
          v89 = __ldaxr(p_shared_owners);
        while (__stlxr(v89 - 1, p_shared_owners));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      return v36;
    }
    bzero(v97, 0x210uLL);
    SipRequest::SipRequest((SipRequest *)v97, *(const SipRequest **)(v25 + 288));
    v26 = (char *)SipMessage::header<SipConversationIdHeader>((uint64_t)v97);
    v27 = (__int128 *)(v26 + 64);
    if (!v26)
      v27 = &ims::kEmptyString;
    v28 = *((unsigned __int8 *)v27 + 23);
    v29 = *((_QWORD *)v27 + 1);
    if ((v28 & 0x80u) == 0)
      v29 = v28;
    if (v29)
      goto LABEL_35;
    v30 = (char *)SipMessage::header<SipContributionIdHeader>((uint64_t)v97);
    v31 = (__int128 *)(v30 + 64);
    if (!v30)
      v31 = &ims::kEmptyString;
    v32 = *((unsigned __int8 *)v31 + 23);
    v33 = *((_QWORD *)v31 + 1);
    if ((v32 & 0x80u) == 0)
      v33 = v32;
    if (v33)
    {
LABEL_35:
      v34 = 1;
    }
    else
    {
      v76 = (char *)SipMessage::header<SipInReplyToContributionIdHeader>((uint64_t)v97);
      v77 = (__int128 *)(v76 + 64);
      if (!v76)
        v77 = &ims::kEmptyString;
      v78 = *((unsigned __int8 *)v77 + 23);
      v79 = *((_QWORD *)v77 + 1);
      if ((v78 & 0x80u) == 0)
        v79 = v78;
      v34 = v79 != 0;
    }
    v35 = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 64))(v4);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))(v4, v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"Has Lazuli headers? : ", 22);
    *(_BYTE *)(v35 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v35 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v35 + 17) = 0;
    if (v34)
    {
      v36 = 3;
LABEL_158:
      v97[0] = off_1E78DA7B8;
      SipUri::~SipUri((SipUri *)&v101);
      if ((char)v100 < 0)
        operator delete(__s1);
      SipMessage::~SipMessage((SipMessage *)v97);
      goto LABEL_161;
    }
    v50 = v100;
    if ((v100 & 0x80u) == 0)
      v51 = v100;
    else
      v51 = __n;
    if (v51 == 7)
    {
      if ((v100 & 0x80) == 0)
      {
        if (v100)
        {
          p_s1 = &__s1;
          v53 = "MESSAGE";
          while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v53)
          {
            p_s1 = (void **)((char *)p_s1 + 1);
            ++v53;
            if (!--v50)
              goto LABEL_154;
          }
          goto LABEL_152;
        }
LABEL_154:
        v36 = 1;
        goto LABEL_158;
      }
      if (!memcmp(__s1, "MESSAGE", __n))
        goto LABEL_154;
    }
LABEL_152:
    v84 = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 64))(v4);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))(v4, v84);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v84 + 8), (uint64_t)"determining based on transaction", 32);
    *(_BYTE *)(v84 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v84 + 64))(v84, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v84 + 17) = 0;
    v85 = (SipDialogManager **)SipTransportLayer::userAgent(this);
    v86 = v85;
    if (v85)
      LOBYTE(v85) = SipUserAgent::determineIncomingMessageCategory(v85, (const SipRequest *)v97, v22);
    if (v86)
      v36 = v85;
    else
      v36 = 0;
    goto LABEL_158;
  }
  v7 = v6;
  v8 = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 64))(v4);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))(v4, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Is a SipRequest", 15);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  v9 = (char *)SipMessage::header<SipConversationIdHeader>((uint64_t)a2);
  v10 = (__int128 *)(v9 + 64);
  if (!v9)
    v10 = &ims::kEmptyString;
  v11 = *((unsigned __int8 *)v10 + 23);
  v12 = *((_QWORD *)v10 + 1);
  if ((v11 & 0x80u) == 0)
    v12 = v11;
  if (v12)
    goto LABEL_12;
  v13 = (char *)SipMessage::header<SipContributionIdHeader>((uint64_t)a2);
  v14 = (__int128 *)(v13 + 64);
  if (!v13)
    v14 = &ims::kEmptyString;
  v15 = *((unsigned __int8 *)v14 + 23);
  v16 = *((_QWORD *)v14 + 1);
  if ((v15 & 0x80u) == 0)
    v16 = v15;
  if (v16)
  {
LABEL_12:
    v17 = 1;
  }
  else
  {
    v41 = (char *)SipMessage::header<SipInReplyToContributionIdHeader>((uint64_t)a2);
    v42 = (__int128 *)(v41 + 64);
    if (!v41)
      v42 = &ims::kEmptyString;
    v43 = *((unsigned __int8 *)v42 + 23);
    v44 = *((_QWORD *)v42 + 1);
    if ((v43 & 0x80u) == 0)
      v44 = v43;
    v17 = v44 != 0;
  }
  v18 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)v7 + 112))(v7);
  v19 = v18[23];
  if ((v19 & 0x80u) == 0)
    v20 = v18[23];
  else
    v20 = *((_QWORD *)v18 + 1);
  if (v20 == 6)
  {
    if ((v19 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v18, "INVITE", *((_QWORD *)v18 + 1)))
        goto LABEL_110;
    }
    else
    {
      if (!v18[23])
        goto LABEL_110;
      v21 = "INVITE";
      while (*v18 == *(unsigned __int8 *)v21)
      {
        ++v18;
        ++v21;
        if (!--v19)
          goto LABEL_110;
      }
    }
  }
  v37 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)v7 + 112))(v7);
  v38 = v37[23];
  if ((v38 & 0x80u) == 0)
    v39 = v37[23];
  else
    v39 = *((_QWORD *)v37 + 1);
  if (v39 == 3)
  {
    if ((v38 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v37, &SipRequest::kMethodBye, *((_QWORD *)v37 + 1)))
        goto LABEL_110;
    }
    else
    {
      if (!v37[23])
        goto LABEL_110;
      v40 = &SipRequest::kMethodBye;
      while (*v37 == *(unsigned __int8 *)v40)
      {
        ++v37;
        v40 = (__int128 *)((char *)v40 + 1);
        if (!--v38)
          goto LABEL_110;
      }
    }
  }
  v46 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)v7 + 112))(v7);
  v47 = v46[23];
  if ((v47 & 0x80u) == 0)
    v48 = v46[23];
  else
    v48 = *((_QWORD *)v46 + 1);
  if (v48 == 5)
  {
    if ((v47 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v46, "REFER", *((_QWORD *)v46 + 1)))
        goto LABEL_110;
    }
    else
    {
      if (!v46[23])
        goto LABEL_110;
      v49 = "REFER";
      while (*v46 == *(unsigned __int8 *)v49)
      {
        ++v46;
        ++v49;
        if (!--v47)
          goto LABEL_110;
      }
    }
  }
  v54 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)v7 + 112))(v7);
  v55 = v54[23];
  if ((v55 & 0x80u) == 0)
    v56 = v54[23];
  else
    v56 = *((_QWORD *)v54 + 1);
  if (v56 == 6)
  {
    if ((v55 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v54, "CANCEL", *((_QWORD *)v54 + 1)))
        goto LABEL_110;
    }
    else
    {
      if (!v54[23])
        goto LABEL_110;
      v57 = "CANCEL";
      while (*v54 == *(unsigned __int8 *)v57)
      {
        ++v54;
        ++v57;
        if (!--v55)
          goto LABEL_110;
      }
    }
  }
  v58 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)v7 + 112))(v7);
  v59 = v58[23];
  if ((v59 & 0x80u) == 0)
    v60 = v58[23];
  else
    v60 = *((_QWORD *)v58 + 1);
  if (v60 != 7)
    goto LABEL_100;
  if ((v59 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v58, "MESSAGE", *((_QWORD *)v58 + 1)))
      goto LABEL_100;
LABEL_110:
    v66 = (*(uint64_t (**)(char *))(*(_QWORD *)v4 + 64))(v4);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))(v4, v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v66 + 8), (uint64_t)"Is a ", 5);
    *(_BYTE *)(v66 + 17) = 0;
    v67 = (*(uint64_t (**)(const SipRequest *))(*(_QWORD *)v7 + 112))(v7);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 32))(v66, v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v66 + 8), (uint64_t)". HasLazuliHeaders: ", 20);
    *(_BYTE *)(v66 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v66 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v66 + 64))(v66, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v66 + 17) = 0;
    if (v17)
      return 3;
    v68 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)v7 + 112))(v7);
    v69 = v68[23];
    if ((v69 & 0x80u) == 0)
      v70 = v68[23];
    else
      v70 = *((_QWORD *)v68 + 1);
    if (v70 == 7)
    {
      if ((v69 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v68, "MESSAGE", *((_QWORD *)v68 + 1)))
          return 2;
      }
      else if (v68[23])
      {
        for (i = "MESSAGE"; *v68 == *(unsigned __int8 *)i; ++i)
        {
          ++v68;
          if (!--v69)
            return 1;
        }
        return 2;
      }
      return 1;
    }
    return 2;
  }
  if (!v58[23])
    goto LABEL_110;
  v61 = "MESSAGE";
  while (*v58 == *(unsigned __int8 *)v61)
  {
    ++v58;
    ++v61;
    if (!--v59)
      goto LABEL_110;
  }
LABEL_100:
  v62 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)v7 + 112))(v7);
  v63 = v62[23];
  if ((v63 & 0x80u) == 0)
    v64 = v62[23];
  else
    v64 = *((_QWORD *)v62 + 1);
  if (v64 == 4)
  {
    if ((v63 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v62, "INFO", *((_QWORD *)v62 + 1)))
        return 2;
    }
    else
    {
      if (!v62[23])
        return 2;
      v65 = "INFO";
      v36 = 2;
      while (*v62 == *(unsigned __int8 *)v65)
      {
        ++v62;
        ++v65;
        if (!--v63)
          return v36;
      }
    }
  }
  v72 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)v7 + 112))(v7);
  v73 = v72[23];
  if ((v73 & 0x80u) == 0)
    v74 = v72[23];
  else
    v74 = *((_QWORD *)v72 + 1);
  if (v74 == 5)
  {
    if ((v73 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v72, "PRACK", *((_QWORD *)v72 + 1)))
        return 2;
    }
    else
    {
      if (!v72[23])
        return 2;
      v75 = "PRACK";
      v36 = 2;
      while (*v72 == *(unsigned __int8 *)v75)
      {
        ++v72;
        ++v75;
        if (!--v73)
          return v36;
      }
    }
  }
  v80 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)v7 + 112))(v7);
  v81 = v80[23];
  if ((v81 & 0x80u) == 0)
    v82 = v80[23];
  else
    v82 = *((_QWORD *)v80 + 1);
  if (v82 == 6)
  {
    if ((v81 & 0x80) == 0)
    {
      if (v80[23])
      {
        v83 = "UPDATE";
        v36 = 2;
        while (*v80 == *(unsigned __int8 *)v83)
        {
          ++v80;
          ++v83;
          if (!--v81)
            return v36;
        }
        goto LABEL_167;
      }
      return 2;
    }
    if (!memcmp(*(const void **)v80, "UPDATE", *((_QWORD *)v80 + 1)))
      return 2;
  }
LABEL_167:
  v90 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)v7 + 112))(v7);
  if (std::operator==[abi:ne180100]<std::allocator<char>>(v90, (unsigned __int8 *)&SipRequest::kMethodAck)
    || (v91 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)v7 + 112))(v7),
        std::operator==[abi:ne180100]<std::allocator<char>>(v91, "NOTIFY"))
    || (v92 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)v7 + 112))(v7),
        std::operator==[abi:ne180100]<std::allocator<char>>(v92, "OPTIONS"))
    || (v93 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)v7 + 112))(v7),
        std::operator==[abi:ne180100]<std::allocator<char>>(v93, "REGISTER"))
    || (v94 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)v7 + 112))(v7),
        std::operator==[abi:ne180100]<std::allocator<char>>(v94, "SUBSCRIBE")))
  {
    v95 = (SipDialogManager **)SipTransportLayer::userAgent(this);
    if (v95)
      return SipUserAgent::determineIncomingMessageCategory(v95, v7, 0);
  }
  return 0;
}

void sub_1BF0E6800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;

  SipRequest::~SipRequest(&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v9 - 64);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'SipTransactionLayer::determineIncomingMessageCategory(SipTransactionLayer *this, const SipMessage *a2)
{
  return SipTransactionLayer::determineIncomingMessageCategory((SipTransactionLayer *)((char *)this - 24), a2);
}

void SipTransactionLayer::transactionTerminated(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *__p[2];
  uint64_t v36;
  unsigned __int8 *v37;
  std::__shared_weak_count *v38;
  char v39;

  __p[0] = 0;
  __p[1] = 0;
  v36 = 0;
  SipTransaction::transactionMapKey(a2, a3, (uint64_t)__p);
  v4 = a1 + 19;
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1 + 19, (unsigned __int8 *)__p);
  if (v5)
  {
    v6 = (int8x8_t)a1[20];
    v7 = *((_QWORD *)v5 + 1);
    v8 = (uint8x8_t)vcnt_s8(v6);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= *(_QWORD *)&v6)
        v7 %= *(_QWORD *)&v6;
    }
    else
    {
      v7 &= *(_QWORD *)&v6 - 1;
    }
    v14 = *(unsigned __int8 **)(*v4 + 8 * v7);
    do
    {
      v15 = v14;
      v14 = *(unsigned __int8 **)v14;
    }
    while (v14 != v5);
    if (v15 == (unsigned __int8 *)(a1 + 21))
      goto LABEL_31;
    v16 = *((_QWORD *)v15 + 1);
    if (v8.u32[0] > 1uLL)
    {
      if (v16 >= *(_QWORD *)&v6)
        v16 %= *(_QWORD *)&v6;
    }
    else
    {
      v16 &= *(_QWORD *)&v6 - 1;
    }
    if (v16 != v7)
    {
LABEL_31:
      if (!*(_QWORD *)v5)
        goto LABEL_32;
      v17 = *(_QWORD *)(*(_QWORD *)v5 + 8);
      if (v8.u32[0] > 1uLL)
      {
        if (v17 >= *(_QWORD *)&v6)
          v17 %= *(_QWORD *)&v6;
      }
      else
      {
        v17 &= *(_QWORD *)&v6 - 1;
      }
      if (v17 != v7)
LABEL_32:
        *(_QWORD *)(*v4 + 8 * v7) = 0;
    }
    v27 = *(_QWORD *)v5;
    if (*(_QWORD *)v5)
    {
      v28 = *(_QWORD *)(v27 + 8);
      if (v8.u32[0] > 1uLL)
      {
        if (v28 >= *(_QWORD *)&v6)
          v28 %= *(_QWORD *)&v6;
      }
      else
      {
        v28 &= *(_QWORD *)&v6 - 1;
      }
      if (v28 != v7)
      {
        *(_QWORD *)(*v4 + 8 * v28) = v15;
        v27 = *(_QWORD *)v5;
      }
    }
    *(_QWORD *)v15 = v27;
    *(_QWORD *)v5 = 0;
    --a1[22];
    v37 = v5;
    v38 = (std::__shared_weak_count *)(a1 + 21);
    v39 = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v37, 0);
  }
  else
  {
    v9 = a1 + 24;
    v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1 + 24, (unsigned __int8 *)__p);
    if (v10)
    {
      v11 = (int8x8_t)a1[25];
      v12 = *((_QWORD *)v10 + 1);
      v13 = (uint8x8_t)vcnt_s8(v11);
      v13.i16[0] = vaddlv_u8(v13);
      if (v13.u32[0] > 1uLL)
      {
        if (v12 >= *(_QWORD *)&v11)
          v12 %= *(_QWORD *)&v11;
      }
      else
      {
        v12 &= *(_QWORD *)&v11 - 1;
      }
      v29 = *(unsigned __int8 **)(*v9 + 8 * v12);
      do
      {
        v30 = v29;
        v29 = *(unsigned __int8 **)v29;
      }
      while (v29 != v10);
      if (v30 == (unsigned __int8 *)(a1 + 26))
        goto LABEL_56;
      v31 = *((_QWORD *)v30 + 1);
      if (v13.u32[0] > 1uLL)
      {
        if (v31 >= *(_QWORD *)&v11)
          v31 %= *(_QWORD *)&v11;
      }
      else
      {
        v31 &= *(_QWORD *)&v11 - 1;
      }
      if (v31 != v12)
      {
LABEL_56:
        if (!*(_QWORD *)v10)
          goto LABEL_57;
        v32 = *(_QWORD *)(*(_QWORD *)v10 + 8);
        if (v13.u32[0] > 1uLL)
        {
          if (v32 >= *(_QWORD *)&v11)
            v32 %= *(_QWORD *)&v11;
        }
        else
        {
          v32 &= *(_QWORD *)&v11 - 1;
        }
        if (v32 != v12)
LABEL_57:
          *(_QWORD *)(*v9 + 8 * v12) = 0;
      }
      v33 = *(_QWORD *)v10;
      if (*(_QWORD *)v10)
      {
        v34 = *(_QWORD *)(v33 + 8);
        if (v13.u32[0] > 1uLL)
        {
          if (v34 >= *(_QWORD *)&v11)
            v34 %= *(_QWORD *)&v11;
        }
        else
        {
          v34 &= *(_QWORD *)&v11 - 1;
        }
        if (v34 != v12)
        {
          *(_QWORD *)(*v9 + 8 * v34) = v30;
          v33 = *(_QWORD *)v10;
        }
      }
      *(_QWORD *)v30 = v33;
      *(_QWORD *)v10 = 0;
      --a1[27];
      v37 = v10;
      v38 = (std::__shared_weak_count *)(a1 + 26);
      v39 = 1;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v37, 0);
    }
    else
    {
      v18 = (std::__shared_weak_count *)a1[2];
      if (v18)
      {
        v19 = std::__shared_weak_count::lock(v18);
        v38 = v19;
        if (v19)
        {
          v20 = v19;
          v21 = a1[1];
          v37 = (unsigned __int8 *)v21;
          if (v21 && *(_DWORD *)(v21 + 200) == 2)
          {
            v23 = a1[4];
            v22 = a1 + 4;
            v24 = (*(uint64_t (**)(_QWORD *))(v23 + 56))(v22);
            (*(void (**)(_QWORD *, uint64_t))(*v22 + 16))(v22, v24);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"transactionTerminated: unknown transaction ", 43);
            *(_BYTE *)(v24 + 17) = 0;
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v24 + 32))(v24, __p);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v24 + 17) = 0;
          }
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
      }
    }
  }
  if (SHIBYTE(v36) < 0)
    operator delete(__p[0]);
}

void sub_1BF0E6C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t SipTransactionLayer::printTransactions(uint64_t this, ImsOutStream *a2)
{
  uint64_t v3;
  __int128 *i;
  uint64_t v5;
  uint64_t v6;
  const std::string *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 *j;
  uint64_t v12;
  uint64_t v13;
  const std::string *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::string __p;
  void *v19[2];
  char v20;
  _BYTE v21[32];
  std::__shared_weak_count *v22;

  v3 = this;
  if (*(_QWORD *)(this + 176) || *(_QWORD *)(this + 216))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"Current transactions:", 21);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
    for (i = *(__int128 **)(v3 + 168); i; i = *(__int128 **)i)
    {
      v22 = 0;
      memset(v21, 0, sizeof(v21));
      std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)v21, i + 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  ", 2);
      *((_BYTE *)a2 + 17) = 0;
      (*(void (**)(void **__return_ptr))(**(_QWORD **)&v21[24] + 152))(v19);
      (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
      *((_BYTE *)a2 + 17) = 0;
      v5 = *(_QWORD *)&v21[24];
      v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v21[24] + 24))(*(_QWORD *)&v21[24]);
      v7 = (const std::string *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v6);
      LoggableString::LoggableString(&__p, v7);
      (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
      (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((_BYTE *)a2 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v20 < 0)
        operator delete(v19[0]);
      v8 = v22;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if ((v21[23] & 0x80000000) != 0)
        operator delete(*(void **)v21);
    }
    for (j = *(__int128 **)(v3 + 208); j; j = *(__int128 **)j)
    {
      v22 = 0;
      memset(v21, 0, sizeof(v21));
      std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)v21, j + 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  ", 2);
      *((_BYTE *)a2 + 17) = 0;
      (*(void (**)(void **__return_ptr))(**(_QWORD **)&v21[24] + 160))(v19);
      (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
      *((_BYTE *)a2 + 17) = 0;
      v12 = *(_QWORD *)&v21[24];
      v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v21[24] + 24))(*(_QWORD *)&v21[24]);
      v14 = (const std::string *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v13);
      LoggableString::LoggableString(&__p, v14);
      (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
      (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((_BYTE *)a2 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v20 < 0)
        operator delete(v19[0]);
      v15 = v22;
      if (v22)
      {
        v16 = (unint64_t *)&v22->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if ((v21[23] & 0x80000000) != 0)
        operator delete(*(void **)v21);
    }
    this = (*(uint64_t (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
  }
  return this;
}

void sub_1BF0E6F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::pair<std::string const,std::shared_ptr<MessageSession>>::~pair((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void SipTransactionLayer::sendMessageInTransaction(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  const void *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  void *v37[2];
  char v38;
  void *__p;
  char v40;
  uint64_t v41;
  std::__shared_weak_count *v42;

  v8 = *(std::__shared_weak_count **)(*(_QWORD *)a3 + 88);
  if (v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)a3 + 80);
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    v41 = 0;
    v42 = std::__shared_weak_count::lock(v8);
    if (v42)
      v41 = v9;
    std::__shared_weak_count::__release_weak(v8);
  }
  else
  {
    v41 = 0;
    v42 = 0;
  }
  v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  *(_QWORD *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  SipTransportLayer::sendMessage(*(_QWORD *)(a1 + 136), v12, &v41, 0, (ImsResult *)a4);
  if (v12)
    (*(void (**)(const void *))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(std::__shared_weak_count **)(*(_QWORD *)a3 + 88);
  if (!v13)
  {
    if (!v41)
      goto LABEL_37;
    goto LABEL_24;
  }
  v14 = *(_QWORD *)(*(_QWORD *)a3 + 80);
  v15 = (unint64_t *)&v13->__shared_weak_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v17 = std::__shared_weak_count::lock(v13);
  v18 = v41;
  if (!v17)
  {
    std::__shared_weak_count::__release_weak(v13);
    if (!v18)
      goto LABEL_37;
LABEL_23:
    v22 = v41;
    if (!v41)
    {
LABEL_29:
      v26 = *(_QWORD *)a3 + 72;
      v35 = v22;
      v36 = v42;
      if (v42)
      {
        p_shared_owners = (unint64_t *)&v42->__shared_owners_;
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v26 + 48))(v26, &v35, 1);
      v29 = v36;
      if (v36)
      {
        v30 = (unint64_t *)&v36->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      goto LABEL_37;
    }
LABEL_24:
    v24 = *(_QWORD *)(a1 + 32);
    v23 = a1 + 32;
    v25 = (*(uint64_t (**)(uint64_t))(v24 + 64))(v23);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"changed to ", 11);
    *(_BYTE *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 104))(v41, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)" for transaction ", 17);
    *(_BYTE *)(v25 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)v37, (const std::string *)(*(_QWORD *)a3 + 320));
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v25 + 56))(v25, v37);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v25 + 17) = 0;
    if (v40 < 0)
      operator delete(__p);
    if (v38 < 0)
      operator delete(v37[0]);
    v22 = v41;
    goto LABEL_29;
  }
  v19 = v17;
  v20 = (unint64_t *)&v17->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v19);
  }
  std::__shared_weak_count::__release_weak(v13);
  if (v18 != v14)
    goto LABEL_23;
LABEL_37:
  v32 = v42;
  if (v42)
  {
    v33 = (unint64_t *)&v42->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_1BF0E7310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  ImsResult *v9;
  va_list va;

  va_start(va, a9);
  ImsResult::~ImsResult(v9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SipTransactionLayer::logPrefix(SipTransactionLayer *this, ImsOutStream *a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_7;
  }
  v5 = std::__shared_weak_count::lock(v4);
  if (!v5 || (v6 = *((_QWORD *)this + 1)) == 0 || !*(_BYTE *)(v6 + 176))
  {
LABEL_7:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"TransactionLayer: ", 18);
    *((_BYTE *)a2 + 17) = 0;
    if (!v5)
      return;
    goto LABEL_8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"TransactionLayer(EMERGENCY): ", 29);
  *((_BYTE *)a2 + 17) = 0;
LABEL_8:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1BF0E7434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipTransactionLayer::logPrefix(SipTransactionLayer *this, ImsOutStream *a2)
{
  SipTransactionLayer::logPrefix((SipTransactionLayer *)((char *)this - 32), a2);
}

uint64_t SipTransactionLayer::activeTransactionCount(SipTransactionLayer *this)
{
  __int128 *v2;
  uint64_t v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 *i;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *__p[2];
  __int128 v15;
  std::__shared_weak_count *v16;

  v2 = (__int128 *)*((_QWORD *)this + 21);
  if (v2)
  {
    LODWORD(v3) = 0;
    do
    {
      v16 = 0;
      *(_OWORD *)__p = 0u;
      v15 = 0u;
      std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)__p, v2 + 1);
      v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v15 + 1) + 144))(*((_QWORD *)&v15 + 1));
      v5 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      if (SBYTE7(v15) < 0)
        operator delete(__p[0]);
      v3 = v3 + (v4 ^ 1);
      v2 = *(__int128 **)v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  for (i = (__int128 *)*((_QWORD *)this + 26); i; i = *(__int128 **)i)
  {
    v16 = 0;
    *(_OWORD *)__p = 0u;
    v15 = 0u;
    std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)__p, i + 1);
    v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v15 + 1) + 144))(*((_QWORD *)&v15 + 1));
    v10 = v16;
    if (v16)
    {
      v11 = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (SBYTE7(v15) < 0)
      operator delete(__p[0]);
    v3 = v3 + (v9 ^ 1);
  }
  return v3;
}

void sub_1BF0E75AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::string const,std::shared_ptr<MessageSession>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IBISessionHelper::sendCreateMediaRequest(IBISessionHelper *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _DWORD *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const void *v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  IBIRTPClient *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t GMID;
  uint64_t (*v40)(const unsigned __int8 *);
  unint64_t *p_shared_weak_owners;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  size_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  void *v58[2];
  uint64_t v59;
  int v60;
  void *v61[2];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _OWORD v72[2];
  __int128 v73;
  _OWORD v74[2];
  _OWORD v75[2];
  _OWORD v76[6];
  __int128 v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  IBIRTPClient *v80;
  std::__shared_weak_count *v81;
  void *aBlock[2];
  char v83;
  void *v84[2];
  char v85;
  void *v86;
  std::__shared_weak_count *v87;
  char v88;
  void *v89[2];
  __int128 v90;
  uint64_t v91;
  void *__p[2];
  __int128 v93;
  std::__shared_weak_count *v94[2];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _BYTE v108[28];
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v78 = 0;
  v79 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v79 = v5;
    if (v5)
    {
      v6 = *(_QWORD *)this;
      v78 = v6;
      if (v6)
      {
        std::string::basic_string[abi:ne180100]<0>(v61, "ibi.session");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v7 = ImsLogger::debug(ims::_logger, (uint64_t)v61, (uint64_t)__p);
        v8 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v8);
        *(_BYTE *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
        *(_BYTE *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"sendCreateMediaRequest", 22);
        *(_BYTE *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [sessionId=", 12);
        *(_BYTE *)(v7 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
        *(_BYTE *)(v7 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v7 + 17) = 0;
        if (SBYTE7(v93) < 0)
          operator delete(__p[0]);
        if (SBYTE7(v62) < 0)
          operator delete(v61[0]);
        v77 = 0u;
        memset(v76, 0, sizeof(v76));
        memset(v75, 0, sizeof(v75));
        v73 = 0u;
        memset(v74, 0, sizeof(v74));
        memset(v72, 0, sizeof(v72));
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        *(_OWORD *)v61 = 0u;
        AriSdk::ARI_IBIImsMECreateAudioMediaSessionReq_SDK::ARI_IBIImsMECreateAudioMediaSessionReq_SDK((AriSdk::ARI_IBIImsMECreateAudioMediaSessionReq_SDK *)v61);
        AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v65, (_DWORD *)(v6 + 528));
        v60 = 0;
        v9 = (_DWORD *)operator new();
        *v9 = *(unsigned __int8 *)(v6 + 480);
        v10 = v66;
        *(_QWORD *)&v66 = v9;
        if (v10)
          MEMORY[0x1C3B87100](v10, 0x1000C4052888210);
        v60 |= 1u;
        v11 = *(const void **)(v6 + 544);
        v12 = *(_QWORD *)(v6 + 552);
        v58[1] = 0;
        v59 = 0;
        v58[0] = 0;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(v58, v11, v12, v12 - (_QWORD)v11);
        ibiUtils::ibiSetValue<unsigned char,16ul,std::vector<unsigned char>>((uint64_t)&v67, (uint64_t)v58);
        AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)&v66 + 1, (_BYTE *)(v6 + 542));
        v60 |= 2u;
        AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)&v68 + 1, (_WORD *)(v6 + 602));
        v60 |= 4u;
        v107 = 0u;
        memset(v108, 0, sizeof(v108));
        v105 = 0u;
        v106 = 0u;
        v103 = 0u;
        v104 = 0u;
        v101 = 0u;
        v102 = 0u;
        v99 = 0u;
        v100 = 0u;
        v97 = 0u;
        v98 = 0u;
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        *(_OWORD *)v94 = 0u;
        *(_OWORD *)__p = 0u;
        AriSdk::Tlv<IBIImsMERtcpProfile>::operator=<IBIImsMERtcpProfile,void>((uint64_t *)v74 + 1, __p);
        v13 = *((_QWORD *)&v74[0] + 1);
        *(_WORD *)(*((_QWORD *)&v74[0] + 1) + 258) = *(_WORD *)(v6 + 874);
        *(_QWORD *)(v13 + 272) = *(_QWORD *)(v6 + 888);
        *(_DWORD *)(v13 + 264) = *(_DWORD *)(v6 + 880);
        *(_BYTE *)(v13 + 280) = 3;
        std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
        std::string::basic_string[abi:ne180100]<0>(v89, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v14 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v89);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"rr_bw = ", 8);
        *(_BYTE *)(v14 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v14 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v14 + 17) = 0;
        if (SBYTE7(v90) < 0)
          operator delete(v89[0]);
        if (SBYTE7(v93) < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
        std::string::basic_string[abi:ne180100]<0>(v89, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v15 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v89);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"rs_bw = ", 8);
        *(_BYTE *)(v15 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v15 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v15 + 17) = 0;
        if (SBYTE7(v90) < 0)
          operator delete(v89[0]);
        if (SBYTE7(v93) < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
        std::string::basic_string[abi:ne180100]<0>(v89, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v16 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v89);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"trr_interval = ", 15);
        *(_BYTE *)(v16 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v16 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v16 + 17) = 0;
        if (SBYTE7(v90) < 0)
          operator delete(v89[0]);
        if (SBYTE7(v93) < 0)
          operator delete(__p[0]);
        v60 |= 0x4000u;
        if ((*(_DWORD *)(v6 + 532) & 0xFFFFFFFE) == 2)
          v17 = 2;
        else
          v17 = 3;
        LODWORD(__p[0]) = v17;
        AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v69, __p);
        v60 |= 8u;
        AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)&v69 + 1, (_WORD *)(v6 + 536));
        v60 |= 0x10u;
        AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)&v70, (_WORD *)(v6 + 538));
        v60 |= 0x20u;
        LODWORD(__p[0]) = *(unsigned __int8 *)(v6 + 612);
        AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v71 + 1, __p);
        v60 |= 0x200u;
        if (*(_BYTE *)(v6 + 568))
        {
          v18 = *(const void **)(v6 + 576);
          v19 = *(_QWORD *)(v6 + 584);
          *(_QWORD *)&v93 = 0;
          __p[0] = 0;
          __p[1] = 0;
          std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(__p, v18, v19, v19 - (_QWORD)v18);
          if (v58[0])
          {
            v58[1] = v58[0];
            operator delete(v58[0]);
          }
          *(_OWORD *)v58 = *(_OWORD *)__p;
          v59 = v93;
          ibiUtils::ibiSetValue<unsigned char,16ul,std::vector<unsigned char>>((uint64_t)v72 + 8, (uint64_t)v58);
          AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)v72, (_BYTE *)(v6 + 568));
          v60 |= 0x400u;
        }
        if (*(_WORD *)(v6 + 600))
        {
          AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)&v73, (_WORD *)(v6 + 600));
          v60 |= 0x800u;
        }
        v20 = (_BYTE *)*((_QWORD *)&v74[0] + 1);
        *(_WORD *)(*((_QWORD *)&v74[0] + 1) + 260) = *(_WORD *)(v6 + 876);
        *v20 = *(_BYTE *)(v6 + 616);
        if (*(_BYTE *)(v6 + 616))
        {
          v21 = 0;
          do
          {
            *(_BYTE *)(*((_QWORD *)&v74[0] + 1) + v21 + 1) = *(_BYTE *)(v6 + 617 + v21);
            ++v21;
          }
          while (v21 < *(unsigned __int8 *)(v6 + 616));
        }
        AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v73 + 1, (_DWORD *)(v6 + 604));
        v60 |= 0x1000u;
        AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)v74, (_DWORD *)(v6 + 608));
        v60 |= 0x2000u;
        AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)&v70 + 1, (_BYTE *)(v6 + 540));
        v60 |= 0x80u;
        AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)&v71, (_BYTE *)(v6 + 541));
        v60 |= 0x100u;
        AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)v75, (_BYTE *)(v6 + 912));
        ibiUtils::ibiSetValue<IBIImsMEAudioCodec,4ul,std::vector<IBIImsMEAudioCodec>>((uint64_t)v75 + 8, *(const char **)(v6 + 920), *(const char **)(v6 + 928));
        AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)v76, (_BYTE *)(v6 + 944));
        ibiUtils::ibiSetValue<IBIImsMEAudioEVSCodec,2ul,std::vector<IBIImsMEAudioEVSCodec>>((uint64_t)v76 + 8, *(const char **)(v6 + 952), *(const char **)(v6 + 960));
        v22 = v60;
        v60 |= 0x40u;
        if (*(_BYTE *)(v6 + 944))
          v60 = v22 | 0x40040;
        AriSdk::Tlv<int>::operator=<BOOL &,void>((uint64_t *)&v76[2] + 1, (unsigned __int8 *)(v6 + 1016));
        v60 |= 0x400000u;
        LODWORD(__p[0]) = 0;
        AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v77 + 1, __p);
        if (*(_BYTE *)(v6 + 519))
          v23 = 127;
        else
          v23 = 0;
        v24 = *((_QWORD *)&v77 + 1);
        **((_WORD **)&v77 + 1) = v23;
        *(_WORD *)(v24 + 2) = 0;
        v60 |= 0x200000u;
        AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v65 + 1, &v60);
        v25 = *(_QWORD *)(v6 + 1040);
        v26 = *(std::__shared_weak_count **)(v6 + 1048);
        v57 = v26;
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldxr(p_shared_owners);
          while (__stxr(v28 + 1, p_shared_owners));
        }
        if (!v25)
          goto LABEL_85;
        v30 = *(IBIRTPClient **)(v25 + 136);
        v29 = *(std::__shared_weak_count **)(v25 + 144);
        v80 = v30;
        v81 = v29;
        if (v29)
        {
          v31 = (unint64_t *)&v29->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
        }
        if (v30)
        {
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(__p, (_QWORD *)v30 + 1);
          v33 = (std::__shared_weak_count *)__p[0];
          v34 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v35 = (unint64_t *)((char *)__p[1] + 16);
            do
              v36 = __ldxr(v35);
            while (__stxr(v36 + 1, v35));
            v37 = (unint64_t *)&v34->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v61);
          v40 = IBIRTPClient::callbackForRequest(v30, (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26));
          __p[0] = (void *)MEMORY[0x1E0C809B0];
          __p[1] = (void *)1174405120;
          *(_QWORD *)&v93 = ___ZN12IBIRTPClient4sendIN6AriSdk42ARI_IBIImsMECreateAudioMediaSessionReq_SDKEEE9ImsResultRT__block_invoke;
          *((_QWORD *)&v93 + 1) = &__block_descriptor_tmp_39;
          v94[0] = v33;
          v94[1] = v34;
          if (v34)
          {
            p_shared_weak_owners = (unint64_t *)&v34->__shared_weak_owners_;
            do
              v42 = __ldxr(p_shared_weak_owners);
            while (__stxr(v42 + 1, p_shared_weak_owners));
          }
          *(_QWORD *)&v95 = v40;
          v43 = *((_QWORD *)v30 + 11);
          v84[0] = 0;
          ice::detail::wrapCallback<int>((uint64_t)__p, v84);
          LODWORD(v89[0]) = 0;
          if (!(_QWORD)v65)
            AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v65, v89);
          *(_OWORD *)v89 = 0u;
          v90 = 0u;
          v91 = 0;
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v86, (_QWORD *)(v43 + 8));
          ice::SendMsgBaseProxy::SendMsgBaseProxy();
          v44 = v87;
          if (v87)
          {
            v45 = (unint64_t *)&v87->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          aBlock[0] = v84[0];
          v84[0] = 0;
          ice::SendMsgBaseProxy::callback();
          if (aBlock[0])
            _Block_release(aBlock[0]);
          if (v84[0])
            _Block_release(v84[0]);
          MEMORY[0x1C3B86680](v89);
          std::string::basic_string[abi:ne180100]<0>(&v86, "ibi.client");
          std::string::basic_string[abi:ne180100]<0>(v84, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v47 = ImsLogger::debug(ims::_logger, (uint64_t)&v86, (uint64_t)v84);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v47 + 8), (uint64_t)"Sent: ", 6);
          *(_BYTE *)(v47 + 17) = 0;
          v48 = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v61);
          IBIRTPClient::getMsgName((v48 >> 17) & 0xFFFF8000 | ((_DWORD)v48 << 26), aBlock);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v47 + 32))(v47, aBlock);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v47 + 8), (uint64_t)" successfully", 13);
          *(_BYTE *)(v47 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v47 + 17) = 0;
          if (v83 < 0)
            operator delete(aBlock[0]);
          if (v85 < 0)
            operator delete(v84[0]);
          if (v88 < 0)
            operator delete(v86);
          *(_QWORD *)(a2 + 56) = 0;
          *(_QWORD *)(a2 + 64) = 0;
          *(_QWORD *)a2 = &off_1E78B7238;
          *(_QWORD *)(a2 + 8) = &_bambiDomain;
          *(_DWORD *)(a2 + 16) = 0;
          *(_QWORD *)(a2 + 40) = 0;
          *(_QWORD *)(a2 + 48) = 0;
          *(_QWORD *)(a2 + 24) = 0;
          *(_QWORD *)(a2 + 32) = 0;
          if (v94[1])
            std::__shared_weak_count::__release_weak(v94[1]);
          if (v34)
            std::__shared_weak_count::__release_weak(v34);
          v29 = v81;
        }
        if (v29)
        {
          v49 = (unint64_t *)&v29->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        if (!v30)
        {
LABEL_85:
          *(_OWORD *)(a2 + 24) = 0u;
          *(_OWORD *)(a2 + 40) = 0u;
          *(_OWORD *)(a2 + 56) = 0u;
          *(_QWORD *)a2 = &off_1E78B7238;
          *(_QWORD *)(a2 + 8) = &_bambiDomain;
          *(_DWORD *)(a2 + 16) = 0x40000000;
        }
        if (v57)
        {
          v51 = (unint64_t *)&v57->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        if (v58[0])
        {
          v58[1] = v58[0];
          operator delete(v58[0]);
        }
        MEMORY[0x1C3B86B6C](v61);
        v5 = v79;
        if (!v79)
          return;
LABEL_101:
        v55 = (unint64_t *)&v5->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v61, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v53 = ImsLogger::debug(ims::_logger, (uint64_t)v61, (uint64_t)__p);
  v54 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v53 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v54);
  *(_BYTE *)(v53 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v53 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v53 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v53 + 8), (uint64_t)"sendCreateMediaRequest", 22);
  *(_BYTE *)(v53 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v53 + 8), (uint64_t)" [sessionId=0]", 14);
  *(_BYTE *)(v53 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v53 + 64))(v53, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v53 + 17) = 0;
  if (SBYTE7(v93) < 0)
    operator delete(__p[0]);
  if (SBYTE7(v62) < 0)
    operator delete(v61[0]);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)a2 = &off_1E78B7238;
  *(_QWORD *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 0x40000000;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  if (v5)
    goto LABEL_101;
}

void sub_1BF0E82D0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t *AriSdk::Tlv<IBIImsMERtcpProfile>::operator=<IBIImsMERtcpProfile,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0x11CuLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x1C3B87100](v5, 0x1000C40B6EABFF7);
  return a1;
}

void ibiUtils::ibiSetValue<IBIImsMEAudioCodec,4ul,std::vector<IBIImsMEAudioCodec>>(uint64_t a1, const char *a2, const char *a3)
{
  int64_t v4;
  char *v6;
  char *v7;
  _BYTE *v8;
  const char *v9;
  void *p_p;
  void *v11;
  void *v12;
  void *__dst;
  uint64_t v14;
  void *__p;
  char v16;

  v12 = 0;
  __dst = 0;
  v14 = 0;
  v4 = a3 - a2;
  if (a3 == a2)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    std::vector<bambi::XmlTreeNs>::__vallocate[abi:ne180100](&v12, 0xAAAAAAAAAAAAAAABLL * (v4 >> 4));
    v6 = (char *)__dst;
    memmove(__dst, a2, v4);
    v7 = &v6[16 * (v4 >> 4)];
    __dst = v7;
    v8 = v12;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 4) < 5)
  {
    v11 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v11;
      operator delete(v11);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v8 = v12;
      v7 = (char *)__dst;
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v14;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/AppleInternal/Library/BuildRoots/ee8c6483-5bc6-11ef-a57d-0a3c3d30a6d7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "operator=", a3);
    if (v16 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v9, p_p, 360, a1, 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)__dst - (_BYTE *)v12) >> 4), 4);
    if (v16 < 0)
      operator delete(__p);
    if (v12)
    {
      __dst = v12;
      operator delete(v12);
    }
  }
}

void sub_1BF0E866C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void ibiUtils::ibiSetValue<IBIImsMEAudioEVSCodec,2ul,std::vector<IBIImsMEAudioEVSCodec>>(uint64_t a1, const char *a2, const char *a3)
{
  int64_t v4;
  char *v6;
  char *v7;
  _BYTE *v8;
  const char *v9;
  void *p_p;
  void *v11;
  void *v12;
  void *__dst;
  uint64_t v14;
  void *__p;
  char v16;

  v12 = 0;
  __dst = 0;
  v14 = 0;
  v4 = a3 - a2;
  if (a3 == a2)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    std::vector<IBIImsMEAudioEVSCodec>::__vallocate[abi:ne180100](&v12, 0xCCCCCCCCCCCCCCCDLL * (v4 >> 4));
    v6 = (char *)__dst;
    memmove(__dst, a2, v4);
    v7 = &v6[16 * (v4 >> 4)];
    __dst = v7;
    v8 = v12;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((v7 - v8) >> 4) < 3)
  {
    v11 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v11;
      operator delete(v11);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v8 = v12;
      v7 = (char *)__dst;
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v14;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/AppleInternal/Library/BuildRoots/ee8c6483-5bc6-11ef-a57d-0a3c3d30a6d7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "operator=", a3);
    if (v16 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v9, p_p, 360, a1, 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)__dst - (_BYTE *)v12) >> 4), 2);
    if (v16 < 0)
      operator delete(__p);
    if (v12)
    {
      __dst = v12;
      operator delete(v12);
    }
  }
}

void sub_1BF0E8800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void IBISessionHelper::sendConfigureRequest(IBISessionHelper *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const void *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  int v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  IBIRTPClient *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t GMID;
  uint64_t (*v40)(const unsigned __int8 *);
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  int v56;
  void *v57[2];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[80];
  __int128 v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  IBIRTPClient *v77;
  std::__shared_weak_count *v78;
  void *aBlock[2];
  char v80;
  void *v81[2];
  char v82;
  void *v83;
  std::__shared_weak_count *v84;
  char v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  __int128 __p;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _BYTE v105[28];
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v75 = 0;
  v76 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_27;
  }
  v5 = std::__shared_weak_count::lock(v4);
  v76 = v5;
  if (!v5 || (v6 = *(_QWORD *)this, (v75 = v6) == 0))
  {
LABEL_27:
    std::string::basic_string[abi:ne180100]<0>(v57, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v17 = ImsLogger::debug(ims::_logger, (uint64_t)v57, (uint64_t)&__p);
    v18 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v18);
    *(_BYTE *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"sendConfigureRequest", 20);
    *(_BYTE *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)" [sessionId=0]", 14);
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    if (SBYTE7(v90) < 0)
      operator delete((void *)__p);
    if (SBYTE7(v58) < 0)
      operator delete(v57[0]);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)a2 = &off_1E78B7238;
    *(_QWORD *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 0x40000000;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    if (v5)
      goto LABEL_98;
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v57, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::debug(ims::_logger, (uint64_t)v57, (uint64_t)&__p);
  v8 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v8);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"sendConfigureRequest", 20);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (SBYTE7(v90) < 0)
    operator delete((void *)__p);
  if (SBYTE7(v58) < 0)
    operator delete(v57[0]);
  v74 = 0u;
  memset(v73, 0, sizeof(v73));
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v64 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  *(_OWORD *)v57 = 0u;
  AriSdk::ARI_IBIImsMEConfigureAudioMediaReq_SDK::ARI_IBIImsMEConfigureAudioMediaReq_SDK((AriSdk::ARI_IBIImsMEConfigureAudioMediaReq_SDK *)v57);
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v61 + 1, (_DWORD *)(v6 + 476));
  AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)&v64, (_BYTE *)(v6 + 540));
  AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)&v64 + 1, (_BYTE *)(v6 + 541));
  AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)&v62, (_WORD *)(v6 + 602));
  v56 = 131460;
  v104 = 0u;
  memset(v105, 0, sizeof(v105));
  v102 = 0u;
  v103 = 0u;
  v100 = 0u;
  v101 = 0u;
  v98 = 0u;
  v99 = 0u;
  v96 = 0u;
  v97 = 0u;
  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  v90 = 0u;
  v91 = 0u;
  __p = 0u;
  AriSdk::Tlv<IBIImsMERtcpProfile>::operator=<IBIImsMERtcpProfile,void>((uint64_t *)&v69, &__p);
  v9 = v69;
  *(_WORD *)(v69 + 258) = *(_WORD *)(v6 + 874);
  *(_QWORD *)(v9 + 272) = *(_QWORD *)(v6 + 888);
  *(_DWORD *)(v9 + 264) = *(_DWORD *)(v6 + 880);
  *(_BYTE *)(v9 + 280) = 3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(&v86, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v86);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"rr_bw = ", 8);
  *(_BYTE *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (SBYTE7(v87) < 0)
    operator delete((void *)v86);
  if (SBYTE7(v90) < 0)
    operator delete((void *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(&v86, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v11 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v86);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"rs_bw = ", 8);
  *(_BYTE *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  if (SBYTE7(v87) < 0)
    operator delete((void *)v86);
  if (SBYTE7(v90) < 0)
    operator delete((void *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(&v86, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v12 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v86);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"trr_interval = ", 15);
  *(_BYTE *)(v12 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v12 + 17) = 0;
  if (SBYTE7(v87) < 0)
    operator delete((void *)v86);
  if (SBYTE7(v90) < 0)
    operator delete((void *)__p);
  if ((*(_DWORD *)(v6 + 532) & 0xFFFFFFFE) == 2)
    v13 = 2;
  else
    v13 = 3;
  LODWORD(__p) = v13;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v62 + 1, &__p);
  v56 = 147852;
  AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)&v63, (_WORD *)(v6 + 536));
  AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)&v63 + 1, (_WORD *)(v6 + 538));
  LODWORD(__p) = *(unsigned __int8 *)(v6 + 612);
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v65, &__p);
  if (*(_BYTE *)(v6 + 568))
  {
    v14 = *(const void **)(v6 + 576);
    v15 = *(_QWORD *)(v6 + 584);
    *(_QWORD *)&v90 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(&__p, v14, v15, v15 - (_QWORD)v14);
    ibiUtils::ibiSetValue<unsigned char,16ul,std::vector<unsigned char>>((uint64_t)&v66, (uint64_t)&__p);
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)&v65 + 1, (_BYTE *)(v6 + 568));
    v16 = 149436;
    v56 = 149436;
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  else
  {
    v16 = 148412;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(&v86, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v19 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v86);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"remote_rtp_port_t16 = ", 22);
  *(_BYTE *)(v19 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v19 + 17) = 0;
  if (SBYTE7(v87) < 0)
    operator delete((void *)v86);
  if (SBYTE7(v90) < 0)
    operator delete((void *)__p);
  AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)&v67 + 1, (_WORD *)(v6 + 600));
  v56 = v16 | 0x800;
  v20 = (_BYTE *)v69;
  *(_WORD *)(v69 + 260) = *(_WORD *)(v6 + 876);
  *v20 = *(_BYTE *)(v6 + 616);
  if (*(_BYTE *)(v6 + 616))
  {
    v21 = 0;
    do
    {
      *(_BYTE *)(v69 + v21 + 1) = *(_BYTE *)(v6 + 617 + v21);
      ++v21;
    }
    while (v21 < *(unsigned __int8 *)(v6 + 616));
  }
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v68, (_DWORD *)(v6 + 604));
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v68 + 1, (_DWORD *)(v6 + 608));
  AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)&v70 + 1, (_BYTE *)(v6 + 912));
  ibiUtils::ibiSetValue<IBIImsMEAudioCodec,4ul,std::vector<IBIImsMEAudioCodec>>((uint64_t)&v71, *(const char **)(v6 + 920), *(const char **)(v6 + 928));
  AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)&v72 + 1, (_BYTE *)(v6 + 944));
  ibiUtils::ibiSetValue<IBIImsMEAudioEVSCodec,2ul,std::vector<IBIImsMEAudioEVSCodec>>((uint64_t)v73, *(const char **)(v6 + 952), *(const char **)(v6 + 960));
  v22 = *(unsigned __int8 *)(v6 + 944);
  LODWORD(__p) = 0;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v74 + 1, &__p);
  if (v22)
    v23 = 276544;
  else
    v23 = 14400;
  if (*(_BYTE *)(v6 + 519))
    v24 = 127;
  else
    v24 = 0;
  v25 = *((_QWORD *)&v74 + 1);
  **((_WORD **)&v74 + 1) = v24;
  *(_WORD *)(v25 + 2) = 0;
  v56 = v16 | v23 | 0x200000;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v61, &v56);
  v26 = *(_QWORD *)(v6 + 1040);
  v27 = *(std::__shared_weak_count **)(v6 + 1048);
  v55 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
  }
  if (!v26)
    goto LABEL_91;
  v31 = *(IBIRTPClient **)(v26 + 136);
  v30 = *(std::__shared_weak_count **)(v26 + 144);
  v77 = v31;
  v78 = v30;
  if (v30)
  {
    v32 = (unint64_t *)&v30->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  if (v31)
  {
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&__p, (_QWORD *)v31 + 1);
    v34 = __p;
    if (*((_QWORD *)&__p + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&__p + 1) + 16);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v37 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v34 + 1) + 16))(*((_QWORD *)&v34 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v34 + 1));
      }
    }
    GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v57);
    v40 = IBIRTPClient::callbackForRequest(v31, (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26));
    *(_QWORD *)&__p = MEMORY[0x1E0C809B0];
    *((_QWORD *)&__p + 1) = 1174405120;
    *(_QWORD *)&v90 = ___ZN12IBIRTPClient4sendIN6AriSdk38ARI_IBIImsMEConfigureAudioMediaReq_SDKEEE9ImsResultRT__block_invoke;
    *((_QWORD *)&v90 + 1) = &__block_descriptor_tmp_19_2;
    v91 = v34;
    if (*((_QWORD *)&v34 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 16);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    *(_QWORD *)&v92 = v40;
    v43 = *((_QWORD *)v31 + 11);
    v81[0] = 0;
    ice::detail::wrapCallback<int>((uint64_t)&__p, v81);
    v88 = 0;
    v86 = 0u;
    v87 = 0u;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v83, (_QWORD *)(v43 + 8));
    ice::SendMsgBaseProxy::SendMsgBaseProxy();
    v44 = v84;
    if (v84)
    {
      v45 = (unint64_t *)&v84->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    aBlock[0] = v81[0];
    v81[0] = 0;
    ice::SendMsgBaseProxy::callback();
    if (aBlock[0])
      _Block_release(aBlock[0]);
    if (v81[0])
      _Block_release(v81[0]);
    MEMORY[0x1C3B86680](&v86);
    std::string::basic_string[abi:ne180100]<0>(&v83, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v81, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v47 = ImsLogger::debug(ims::_logger, (uint64_t)&v83, (uint64_t)v81);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v47 + 8), (uint64_t)"Sent: ", 6);
    *(_BYTE *)(v47 + 17) = 0;
    v48 = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v57);
    IBIRTPClient::getMsgName((v48 >> 17) & 0xFFFF8000 | ((_DWORD)v48 << 26), aBlock);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v47 + 32))(v47, aBlock);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v47 + 8), (uint64_t)" successfully", 13);
    *(_BYTE *)(v47 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v47 + 17) = 0;
    if (v80 < 0)
      operator delete(aBlock[0]);
    if (v82 < 0)
      operator delete(v81[0]);
    if (v85 < 0)
      operator delete(v83);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)a2 = &off_1E78B7238;
    *(_QWORD *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    if (*((_QWORD *)&v91 + 1))
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v91 + 1));
    if (*((_QWORD *)&v34 + 1))
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v34 + 1));
    v30 = v78;
  }
  if (v30)
  {
    v49 = (unint64_t *)&v30->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (!v31)
  {
LABEL_91:
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)a2 = &off_1E78B7238;
    *(_QWORD *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 0x40000000;
  }
  if (v55)
  {
    v51 = (unint64_t *)&v55->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  MEMORY[0x1C3B86AA0](v57);
  v5 = v76;
  if (v76)
  {
LABEL_98:
    v53 = (unint64_t *)&v5->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BF0E9494(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void IBISessionHelper::sendTerminateRequest(IBISessionHelper *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  IBIRTPClient *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t GMID;
  uint64_t (*v24)(const unsigned __int8 *);
  unint64_t *p_shared_weak_owners;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  size_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  void *__p[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  IBIRTPClient *v49;
  std::__shared_weak_count *v50;
  void *aBlock[2];
  char v52;
  void *v53[2];
  char v54;
  void *v55;
  std::__shared_weak_count *v56;
  char v57;
  _OWORD v58[2];
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t (*v62)(_QWORD *, uint64_t, uint64_t);
  void *v63;
  void *v64;
  std::__shared_weak_count *v65;
  uint64_t (*v66)(const unsigned __int8 *);

  v47 = 0;
  v48 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v48 = v5;
    if (v5)
    {
      v6 = *(_QWORD *)this;
      v47 = v6;
      if (v6)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
        std::string::basic_string[abi:ne180100]<0>(&v60, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v7 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v60);
        v8 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v8);
        *(_BYTE *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
        *(_BYTE *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"sendTerminateRequest", 20);
        *(_BYTE *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [sessionId=", 12);
        *(_BYTE *)(v7 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
        *(_BYTE *)(v7 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v7 + 17) = 0;
        if (SHIBYTE(v62) < 0)
          operator delete(v60);
        if (SBYTE7(v43) < 0)
          operator delete(__p[0]);
        v46 = 0;
        v44 = 0u;
        v45 = 0u;
        *(_OWORD *)__p = 0u;
        v43 = 0u;
        AriSdk::ARI_IBIImsMETerminateMediaSessionReq_SDK::ARI_IBIImsMETerminateMediaSessionReq_SDK((AriSdk::ARI_IBIImsMETerminateMediaSessionReq_SDK *)__p);
        AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>(&v46, (_DWORD *)(v6 + 476));
        v9 = *(_QWORD *)(v6 + 1040);
        v10 = *(std::__shared_weak_count **)(v6 + 1048);
        v41 = v10;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
        }
        if (!v9)
          goto LABEL_52;
        v14 = *(IBIRTPClient **)(v9 + 136);
        v13 = *(std::__shared_weak_count **)(v9 + 144);
        v49 = v14;
        v50 = v13;
        if (v13)
        {
          v15 = (unint64_t *)&v13->__shared_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        if (v14)
        {
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v60, (_QWORD *)v14 + 1);
          v18 = v60;
          v17 = (std::__shared_weak_count *)v61;
          if (v61)
          {
            v19 = (unint64_t *)(v61 + 16);
            do
              v20 = __ldxr(v19);
            while (__stxr(v20 + 1, v19));
            v21 = (unint64_t *)&v17->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)__p);
          v24 = IBIRTPClient::callbackForRequest(v14, (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26));
          v60 = (void *)MEMORY[0x1E0C809B0];
          v61 = 1174405120;
          v62 = ___ZN12IBIRTPClient4sendIN6AriSdk40ARI_IBIImsMETerminateMediaSessionReq_SDKEEE9ImsResultRT__block_invoke;
          v63 = &__block_descriptor_tmp_20_1;
          v64 = v18;
          v65 = v17;
          if (v17)
          {
            p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
            do
              v26 = __ldxr(p_shared_weak_owners);
            while (__stxr(v26 + 1, p_shared_weak_owners));
          }
          v66 = v24;
          v27 = *((_QWORD *)v14 + 11);
          v53[0] = 0;
          ice::detail::wrapCallback<int>((uint64_t)&v60, v53);
          v59 = 0;
          memset(v58, 0, sizeof(v58));
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v55, (_QWORD *)(v27 + 8));
          ice::SendMsgBaseProxy::SendMsgBaseProxy();
          v28 = v56;
          if (v56)
          {
            v29 = (unint64_t *)&v56->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          aBlock[0] = v53[0];
          v53[0] = 0;
          ice::SendMsgBaseProxy::callback();
          if (aBlock[0])
            _Block_release(aBlock[0]);
          if (v53[0])
            _Block_release(v53[0]);
          MEMORY[0x1C3B86680](v58);
          std::string::basic_string[abi:ne180100]<0>(&v55, "ibi.client");
          std::string::basic_string[abi:ne180100]<0>(v53, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v31 = ImsLogger::debug(ims::_logger, (uint64_t)&v55, (uint64_t)v53);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)"Sent: ", 6);
          *(_BYTE *)(v31 + 17) = 0;
          v32 = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)__p);
          IBIRTPClient::getMsgName((v32 >> 17) & 0xFFFF8000 | ((_DWORD)v32 << 26), aBlock);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v31 + 32))(v31, aBlock);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)" successfully", 13);
          *(_BYTE *)(v31 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v31 + 17) = 0;
          if (v52 < 0)
            operator delete(aBlock[0]);
          if (v54 < 0)
            operator delete(v53[0]);
          if (v57 < 0)
            operator delete(v55);
          *(_QWORD *)(a2 + 56) = 0;
          *(_QWORD *)(a2 + 64) = 0;
          *(_QWORD *)a2 = &off_1E78B7238;
          *(_QWORD *)(a2 + 8) = &_bambiDomain;
          *(_DWORD *)(a2 + 16) = 0;
          *(_QWORD *)(a2 + 40) = 0;
          *(_QWORD *)(a2 + 48) = 0;
          *(_QWORD *)(a2 + 24) = 0;
          *(_QWORD *)(a2 + 32) = 0;
          if (v65)
            std::__shared_weak_count::__release_weak(v65);
          if (v17)
            std::__shared_weak_count::__release_weak(v17);
          v13 = v50;
        }
        if (v13)
        {
          v33 = (unint64_t *)&v13->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        if (!v14)
        {
LABEL_52:
          *(_OWORD *)(a2 + 24) = 0u;
          *(_OWORD *)(a2 + 40) = 0u;
          *(_OWORD *)(a2 + 56) = 0u;
          *(_QWORD *)a2 = &off_1E78B7238;
          *(_QWORD *)(a2 + 8) = &_bambiDomain;
          *(_DWORD *)(a2 + 16) = 0x40000000;
        }
        if (v41)
        {
          v35 = (unint64_t *)&v41->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        MEMORY[0x1C3B86B30](__p);
        v5 = v48;
        if (!v48)
          return;
LABEL_66:
        v39 = (unint64_t *)&v5->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(&v60, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v37 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v60);
  v38 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v38);
  *(_BYTE *)(v37 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v37 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"sendTerminateRequest", 20);
  *(_BYTE *)(v37 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)" [sessionId=0]", 14);
  *(_BYTE *)(v37 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v37 + 17) = 0;
  if (SHIBYTE(v62) < 0)
    operator delete(v60);
  if (SBYTE7(v43) < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)a2 = &off_1E78B7238;
  *(_QWORD *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 0x40000000;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  if (v5)
    goto LABEL_66;
}

void sub_1BF0E9D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *aBlock,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v47;

  if (a44 < 0)
    operator delete(__p);
  v47 = *(std::__shared_weak_count **)(v45 - 80);
  if (v47)
    std::__shared_weak_count::__release_weak(v47);
  if (v44)
    std::__shared_weak_count::__release_weak(v44);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1C3B86B30](&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void IBISessionHelper::sendStartRequest(IBISessionHelper *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  IBIRTPClient *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t GMID;
  uint64_t (*v24)(const unsigned __int8 *);
  unint64_t *p_shared_weak_owners;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  size_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  void *__p[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  IBIRTPClient *v49;
  std::__shared_weak_count *v50;
  void *aBlock[2];
  char v52;
  void *v53[2];
  char v54;
  void *v55;
  std::__shared_weak_count *v56;
  char v57;
  _OWORD v58[2];
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t (*v62)(_QWORD *, uint64_t, uint64_t);
  void *v63;
  void *v64;
  std::__shared_weak_count *v65;
  uint64_t (*v66)(const unsigned __int8 *);

  v47 = 0;
  v48 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v48 = v5;
    if (v5)
    {
      v6 = *(_QWORD *)this;
      v47 = v6;
      if (v6)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
        std::string::basic_string[abi:ne180100]<0>(&v60, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v7 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v60);
        v8 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v8);
        *(_BYTE *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
        *(_BYTE *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"sendStartRequest", 16);
        *(_BYTE *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [sessionId=", 12);
        *(_BYTE *)(v7 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
        *(_BYTE *)(v7 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v7 + 17) = 0;
        if (SHIBYTE(v62) < 0)
          operator delete(v60);
        if (SBYTE7(v43) < 0)
          operator delete(__p[0]);
        v46 = 0;
        v44 = 0u;
        v45 = 0u;
        *(_OWORD *)__p = 0u;
        v43 = 0u;
        AriSdk::ARI_IBIImsMEStartMediaReq_SDK::ARI_IBIImsMEStartMediaReq_SDK((AriSdk::ARI_IBIImsMEStartMediaReq_SDK *)__p);
        AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>(&v46, (_DWORD *)(v6 + 476));
        v9 = *(_QWORD *)(v6 + 1040);
        v10 = *(std::__shared_weak_count **)(v6 + 1048);
        v41 = v10;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
        }
        if (!v9)
          goto LABEL_52;
        v14 = *(IBIRTPClient **)(v9 + 136);
        v13 = *(std::__shared_weak_count **)(v9 + 144);
        v49 = v14;
        v50 = v13;
        if (v13)
        {
          v15 = (unint64_t *)&v13->__shared_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        if (v14)
        {
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v60, (_QWORD *)v14 + 1);
          v18 = v60;
          v17 = (std::__shared_weak_count *)v61;
          if (v61)
          {
            v19 = (unint64_t *)(v61 + 16);
            do
              v20 = __ldxr(v19);
            while (__stxr(v20 + 1, v19));
            v21 = (unint64_t *)&v17->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)__p);
          v24 = IBIRTPClient::callbackForRequest(v14, (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26));
          v60 = (void *)MEMORY[0x1E0C809B0];
          v61 = 1174405120;
          v62 = ___ZN12IBIRTPClient4sendIN6AriSdk29ARI_IBIImsMEStartMediaReq_SDKEEE9ImsResultRT__block_invoke;
          v63 = &__block_descriptor_tmp_21_2;
          v64 = v18;
          v65 = v17;
          if (v17)
          {
            p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
            do
              v26 = __ldxr(p_shared_weak_owners);
            while (__stxr(v26 + 1, p_shared_weak_owners));
          }
          v66 = v24;
          v27 = *((_QWORD *)v14 + 11);
          v53[0] = 0;
          ice::detail::wrapCallback<int>((uint64_t)&v60, v53);
          v59 = 0;
          memset(v58, 0, sizeof(v58));
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v55, (_QWORD *)(v27 + 8));
          ice::SendMsgBaseProxy::SendMsgBaseProxy();
          v28 = v56;
          if (v56)
          {
            v29 = (unint64_t *)&v56->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          aBlock[0] = v53[0];
          v53[0] = 0;
          ice::SendMsgBaseProxy::callback();
          if (aBlock[0])
            _Block_release(aBlock[0]);
          if (v53[0])
            _Block_release(v53[0]);
          MEMORY[0x1C3B86680](v58);
          std::string::basic_string[abi:ne180100]<0>(&v55, "ibi.client");
          std::string::basic_string[abi:ne180100]<0>(v53, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v31 = ImsLogger::debug(ims::_logger, (uint64_t)&v55, (uint64_t)v53);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)"Sent: ", 6);
          *(_BYTE *)(v31 + 17) = 0;
          v32 = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)__p);
          IBIRTPClient::getMsgName((v32 >> 17) & 0xFFFF8000 | ((_DWORD)v32 << 26), aBlock);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v31 + 32))(v31, aBlock);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)" successfully", 13);
          *(_BYTE *)(v31 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v31 + 17) = 0;
          if (v52 < 0)
            operator delete(aBlock[0]);
          if (v54 < 0)
            operator delete(v53[0]);
          if (v57 < 0)
            operator delete(v55);
          *(_QWORD *)(a2 + 56) = 0;
          *(_QWORD *)(a2 + 64) = 0;
          *(_QWORD *)a2 = &off_1E78B7238;
          *(_QWORD *)(a2 + 8) = &_bambiDomain;
          *(_DWORD *)(a2 + 16) = 0;
          *(_QWORD *)(a2 + 40) = 0;
          *(_QWORD *)(a2 + 48) = 0;
          *(_QWORD *)(a2 + 24) = 0;
          *(_QWORD *)(a2 + 32) = 0;
          if (v65)
            std::__shared_weak_count::__release_weak(v65);
          if (v17)
            std::__shared_weak_count::__release_weak(v17);
          v13 = v50;
        }
        if (v13)
        {
          v33 = (unint64_t *)&v13->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        if (!v14)
        {
LABEL_52:
          *(_OWORD *)(a2 + 24) = 0u;
          *(_OWORD *)(a2 + 40) = 0u;
          *(_OWORD *)(a2 + 56) = 0u;
          *(_QWORD *)a2 = &off_1E78B7238;
          *(_QWORD *)(a2 + 8) = &_bambiDomain;
          *(_DWORD *)(a2 + 16) = 0x40000000;
        }
        if (v41)
        {
          v35 = (unint64_t *)&v41->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        MEMORY[0x1C3B86884](__p);
        v5 = v48;
        if (!v48)
          return;
LABEL_66:
        v39 = (unint64_t *)&v5->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(&v60, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v37 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v60);
  v38 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v38);
  *(_BYTE *)(v37 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v37 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"sendStartRequest", 16);
  *(_BYTE *)(v37 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)" [sessionId=0]", 14);
  *(_BYTE *)(v37 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v37 + 17) = 0;
  if (SHIBYTE(v62) < 0)
    operator delete(v60);
  if (SBYTE7(v43) < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)a2 = &off_1E78B7238;
  *(_QWORD *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 0x40000000;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  if (v5)
    goto LABEL_66;
}

void sub_1BF0EA508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *aBlock,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v47;

  if (a44 < 0)
    operator delete(__p);
  v47 = *(std::__shared_weak_count **)(v45 - 80);
  if (v47)
    std::__shared_weak_count::__release_weak(v47);
  if (v44)
    std::__shared_weak_count::__release_weak(v44);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1C3B86884](&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void IBISessionHelper::sendStopRequest(IBISessionHelper *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  IBIRTPClient *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t GMID;
  uint64_t (*v24)(const unsigned __int8 *);
  unint64_t *p_shared_weak_owners;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  size_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  void *__p[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  IBIRTPClient *v49;
  std::__shared_weak_count *v50;
  void *aBlock[2];
  char v52;
  void *v53[2];
  char v54;
  void *v55;
  std::__shared_weak_count *v56;
  char v57;
  _OWORD v58[2];
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t (*v62)(_QWORD *, uint64_t, uint64_t);
  void *v63;
  void *v64;
  std::__shared_weak_count *v65;
  uint64_t (*v66)(const unsigned __int8 *);

  v47 = 0;
  v48 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v48 = v5;
    if (v5)
    {
      v6 = *(_QWORD *)this;
      v47 = v6;
      if (v6)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
        std::string::basic_string[abi:ne180100]<0>(&v60, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v7 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v60);
        v8 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v8);
        *(_BYTE *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
        *(_BYTE *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"sendStopRequest", 15);
        *(_BYTE *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [sessionId=", 12);
        *(_BYTE *)(v7 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
        *(_BYTE *)(v7 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v7 + 17) = 0;
        if (SHIBYTE(v62) < 0)
          operator delete(v60);
        if (SBYTE7(v43) < 0)
          operator delete(__p[0]);
        v46 = 0;
        v44 = 0u;
        v45 = 0u;
        *(_OWORD *)__p = 0u;
        v43 = 0u;
        AriSdk::ARI_IBIImsMEStopMediaReq_SDK::ARI_IBIImsMEStopMediaReq_SDK((AriSdk::ARI_IBIImsMEStopMediaReq_SDK *)__p);
        AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>(&v46, (_DWORD *)(v6 + 476));
        v9 = *(_QWORD *)(v6 + 1040);
        v10 = *(std::__shared_weak_count **)(v6 + 1048);
        v41 = v10;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
        }
        if (!v9)
          goto LABEL_52;
        v14 = *(IBIRTPClient **)(v9 + 136);
        v13 = *(std::__shared_weak_count **)(v9 + 144);
        v49 = v14;
        v50 = v13;
        if (v13)
        {
          v15 = (unint64_t *)&v13->__shared_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        if (v14)
        {
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v60, (_QWORD *)v14 + 1);
          v18 = v60;
          v17 = (std::__shared_weak_count *)v61;
          if (v61)
          {
            v19 = (unint64_t *)(v61 + 16);
            do
              v20 = __ldxr(v19);
            while (__stxr(v20 + 1, v19));
            v21 = (unint64_t *)&v17->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)__p);
          v24 = IBIRTPClient::callbackForRequest(v14, (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26));
          v60 = (void *)MEMORY[0x1E0C809B0];
          v61 = 1174405120;
          v62 = ___ZN12IBIRTPClient4sendIN6AriSdk28ARI_IBIImsMEStopMediaReq_SDKEEE9ImsResultRT__block_invoke;
          v63 = &__block_descriptor_tmp_22_1;
          v64 = v18;
          v65 = v17;
          if (v17)
          {
            p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
            do
              v26 = __ldxr(p_shared_weak_owners);
            while (__stxr(v26 + 1, p_shared_weak_owners));
          }
          v66 = v24;
          v27 = *((_QWORD *)v14 + 11);
          v53[0] = 0;
          ice::detail::wrapCallback<int>((uint64_t)&v60, v53);
          v59 = 0;
          memset(v58, 0, sizeof(v58));
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v55, (_QWORD *)(v27 + 8));
          ice::SendMsgBaseProxy::SendMsgBaseProxy();
          v28 = v56;
          if (v56)
          {
            v29 = (unint64_t *)&v56->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          aBlock[0] = v53[0];
          v53[0] = 0;
          ice::SendMsgBaseProxy::callback();
          if (aBlock[0])
            _Block_release(aBlock[0]);
          if (v53[0])
            _Block_release(v53[0]);
          MEMORY[0x1C3B86680](v58);
          std::string::basic_string[abi:ne180100]<0>(&v55, "ibi.client");
          std::string::basic_string[abi:ne180100]<0>(v53, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v31 = ImsLogger::debug(ims::_logger, (uint64_t)&v55, (uint64_t)v53);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)"Sent: ", 6);
          *(_BYTE *)(v31 + 17) = 0;
          v32 = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)__p);
          IBIRTPClient::getMsgName((v32 >> 17) & 0xFFFF8000 | ((_DWORD)v32 << 26), aBlock);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v31 + 32))(v31, aBlock);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)" successfully", 13);
          *(_BYTE *)(v31 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v31 + 17) = 0;
          if (v52 < 0)
            operator delete(aBlock[0]);
          if (v54 < 0)
            operator delete(v53[0]);
          if (v57 < 0)
            operator delete(v55);
          *(_QWORD *)(a2 + 56) = 0;
          *(_QWORD *)(a2 + 64) = 0;
          *(_QWORD *)a2 = &off_1E78B7238;
          *(_QWORD *)(a2 + 8) = &_bambiDomain;
          *(_DWORD *)(a2 + 16) = 0;
          *(_QWORD *)(a2 + 40) = 0;
          *(_QWORD *)(a2 + 48) = 0;
          *(_QWORD *)(a2 + 24) = 0;
          *(_QWORD *)(a2 + 32) = 0;
          if (v65)
            std::__shared_weak_count::__release_weak(v65);
          if (v17)
            std::__shared_weak_count::__release_weak(v17);
          v13 = v50;
        }
        if (v13)
        {
          v33 = (unint64_t *)&v13->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        if (!v14)
        {
LABEL_52:
          *(_OWORD *)(a2 + 24) = 0u;
          *(_OWORD *)(a2 + 40) = 0u;
          *(_OWORD *)(a2 + 56) = 0u;
          *(_QWORD *)a2 = &off_1E78B7238;
          *(_QWORD *)(a2 + 8) = &_bambiDomain;
          *(_DWORD *)(a2 + 16) = 0x40000000;
        }
        if (v41)
        {
          v35 = (unint64_t *)&v41->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        MEMORY[0x1C3B86854](__p);
        v5 = v48;
        if (!v48)
          return;
LABEL_66:
        v39 = (unint64_t *)&v5->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(&v60, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v37 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v60);
  v38 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v38);
  *(_BYTE *)(v37 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v37 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"sendStopRequest", 15);
  *(_BYTE *)(v37 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)" [sessionId=0]", 14);
  *(_BYTE *)(v37 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v37 + 17) = 0;
  if (SHIBYTE(v62) < 0)
    operator delete(v60);
  if (SBYTE7(v43) < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)a2 = &off_1E78B7238;
  *(_QWORD *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 0x40000000;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  if (v5)
    goto LABEL_66;
}

void sub_1BF0EACF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *aBlock,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v47;

  if (a44 < 0)
    operator delete(__p);
  v47 = *(std::__shared_weak_count **)(v45 - 80);
  if (v47)
    std::__shared_weak_count::__release_weak(v47);
  if (v44)
    std::__shared_weak_count::__release_weak(v44);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1C3B86854](&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void IBISessionHelper::sendStartDTMFDigitRequest(IBISessionHelper *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  IBIRTPClient *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t GMID;
  uint64_t v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  size_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  void *__p[2];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50[3];
  uint64_t v51;
  std::__shared_weak_count *v52;
  IBIRTPClient *v53;
  std::__shared_weak_count *v54;
  void *aBlock[2];
  char v56;
  void *v57[2];
  char v58;
  void *v59;
  std::__shared_weak_count *v60;
  char v61;
  _OWORD v62[2];
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t (*v66)(_QWORD *, uint64_t, uint64_t);
  void *v67;
  void *v68;
  std::__shared_weak_count *v69;
  uint64_t v70;

  v51 = 0;
  v52 = 0;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v5)
  {
    v7 = std::__shared_weak_count::lock(v5);
    v52 = v7;
    if (v7)
    {
      v8 = *(_QWORD *)this;
      v51 = v8;
      if (v8)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
        std::string::basic_string[abi:ne180100]<0>(&v64, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v9 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v64);
        v10 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v10);
        *(_BYTE *)(v9 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"::", 2);
        *(_BYTE *)(v9 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"sendStartDTMFDigitRequest", 25);
        *(_BYTE *)(v9 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" [sessionId=", 12);
        *(_BYTE *)(v9 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v9 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"]", 1);
        *(_BYTE *)(v9 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v9 + 17) = 0;
        if (SHIBYTE(v66) < 0)
          operator delete(v64);
        if (SBYTE7(v47) < 0)
          operator delete(__p[0]);
        v49 = 0u;
        *(_OWORD *)v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        *(_OWORD *)__p = 0u;
        AriSdk::ARI_IBIImsMEStartDTMFCodeReq_SDK::ARI_IBIImsMEStartDTMFCodeReq_SDK((AriSdk::ARI_IBIImsMEStartDTMFCodeReq_SDK *)__p);
        AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>(v50, (_DWORD *)(v8 + 476));
        v11 = (_DWORD *)operator new();
        *v11 = a2;
        v12 = v50[1];
        v50[1] = (uint64_t)v11;
        if (v12)
          MEMORY[0x1C3B87100](v12, 0x1000C4052888210);
        v13 = *(_QWORD *)(v8 + 1040);
        v14 = *(std::__shared_weak_count **)(v8 + 1048);
        v45 = v14;
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldxr(p_shared_owners);
          while (__stxr(v16 + 1, p_shared_owners));
        }
        if (!v13)
          goto LABEL_54;
        v18 = *(IBIRTPClient **)(v13 + 136);
        v17 = *(std::__shared_weak_count **)(v13 + 144);
        v53 = v18;
        v54 = v17;
        if (v17)
        {
          v19 = (unint64_t *)&v17->__shared_owners_;
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        if (v18)
        {
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v64, (_QWORD *)v18 + 1);
          v22 = v64;
          v21 = (std::__shared_weak_count *)v65;
          if (v65)
          {
            v23 = (unint64_t *)(v65 + 16);
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            v25 = (unint64_t *)&v21->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)__p);
          v28 = IBIRTPClient::callbackForRequest(v18, (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26));
          v64 = (void *)MEMORY[0x1E0C809B0];
          v65 = 1174405120;
          v66 = ___ZN12IBIRTPClient4sendIN6AriSdk32ARI_IBIImsMEStartDTMFCodeReq_SDKEEE9ImsResultRT__block_invoke;
          v67 = &__block_descriptor_tmp_23_1;
          v68 = v22;
          v69 = v21;
          if (v21)
          {
            p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
            do
              v30 = __ldxr(p_shared_weak_owners);
            while (__stxr(v30 + 1, p_shared_weak_owners));
          }
          v70 = v28;
          v31 = *((_QWORD *)v18 + 11);
          v57[0] = 0;
          ice::detail::wrapCallback<int>((uint64_t)&v64, v57);
          v63 = 0;
          memset(v62, 0, sizeof(v62));
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v59, (_QWORD *)(v31 + 8));
          ice::SendMsgBaseProxy::SendMsgBaseProxy();
          v32 = v60;
          if (v60)
          {
            v33 = (unint64_t *)&v60->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          aBlock[0] = v57[0];
          v57[0] = 0;
          ice::SendMsgBaseProxy::callback();
          if (aBlock[0])
            _Block_release(aBlock[0]);
          if (v57[0])
            _Block_release(v57[0]);
          MEMORY[0x1C3B86680](v62);
          std::string::basic_string[abi:ne180100]<0>(&v59, "ibi.client");
          std::string::basic_string[abi:ne180100]<0>(v57, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v35 = ImsLogger::debug(ims::_logger, (uint64_t)&v59, (uint64_t)v57);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"Sent: ", 6);
          *(_BYTE *)(v35 + 17) = 0;
          v36 = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)__p);
          IBIRTPClient::getMsgName((v36 >> 17) & 0xFFFF8000 | ((_DWORD)v36 << 26), aBlock);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v35 + 32))(v35, aBlock);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)" successfully", 13);
          *(_BYTE *)(v35 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v35 + 17) = 0;
          if (v56 < 0)
            operator delete(aBlock[0]);
          if (v58 < 0)
            operator delete(v57[0]);
          if (v61 < 0)
            operator delete(v59);
          *(_QWORD *)(a3 + 56) = 0;
          *(_QWORD *)(a3 + 64) = 0;
          *(_QWORD *)a3 = &off_1E78B7238;
          *(_QWORD *)(a3 + 8) = &_bambiDomain;
          *(_DWORD *)(a3 + 16) = 0;
          *(_QWORD *)(a3 + 40) = 0;
          *(_QWORD *)(a3 + 48) = 0;
          *(_QWORD *)(a3 + 24) = 0;
          *(_QWORD *)(a3 + 32) = 0;
          if (v69)
            std::__shared_weak_count::__release_weak(v69);
          if (v21)
            std::__shared_weak_count::__release_weak(v21);
          v17 = v54;
        }
        if (v17)
        {
          v37 = (unint64_t *)&v17->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        if (!v18)
        {
LABEL_54:
          *(_OWORD *)(a3 + 24) = 0u;
          *(_OWORD *)(a3 + 40) = 0u;
          *(_OWORD *)(a3 + 56) = 0u;
          *(_QWORD *)a3 = &off_1E78B7238;
          *(_QWORD *)(a3 + 8) = &_bambiDomain;
          *(_DWORD *)(a3 + 16) = 0x40000000;
        }
        if (v45)
        {
          v39 = (unint64_t *)&v45->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        MEMORY[0x1C3B86920](__p);
        v7 = v52;
        if (!v52)
          return;
LABEL_68:
        v43 = (unint64_t *)&v7->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(&v64, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v41 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v64);
  v42 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v42);
  *(_BYTE *)(v41 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v41 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)"sendStartDTMFDigitRequest", 25);
  *(_BYTE *)(v41 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)" [sessionId=0]", 14);
  *(_BYTE *)(v41 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v41 + 17) = 0;
  if (SHIBYTE(v66) < 0)
    operator delete(v64);
  if (SBYTE7(v47) < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0x40000000;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  if (v7)
    goto LABEL_68;
}

void sub_1BF0EB52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,void *aBlock,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v49;

  if (a46 < 0)
    operator delete(__p);
  v49 = *(std::__shared_weak_count **)(v47 - 80);
  if (v49)
    std::__shared_weak_count::__release_weak(v49);
  if (v46)
    std::__shared_weak_count::__release_weak(v46);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1C3B86920](&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void IBISessionHelper::sendStopDTMFDigitRequest(IBISessionHelper *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  IBIRTPClient *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t GMID;
  uint64_t v24;
  unint64_t *p_shared_weak_owners;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  size_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  void *__p[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  IBIRTPClient *v49;
  std::__shared_weak_count *v50;
  void *aBlock[2];
  char v52;
  void *v53[2];
  char v54;
  void *v55;
  std::__shared_weak_count *v56;
  char v57;
  _OWORD v58[2];
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t (*v62)(_QWORD *, uint64_t, uint64_t);
  void *v63;
  void *v64;
  std::__shared_weak_count *v65;
  uint64_t v66;

  v47 = 0;
  v48 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v48 = v5;
    if (v5)
    {
      v6 = *(_QWORD *)this;
      v47 = v6;
      if (v6)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
        std::string::basic_string[abi:ne180100]<0>(&v60, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v7 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v60);
        v8 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v8);
        *(_BYTE *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
        *(_BYTE *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"sendStopDTMFDigitRequest", 24);
        *(_BYTE *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [sessionId=", 12);
        *(_BYTE *)(v7 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
        *(_BYTE *)(v7 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v7 + 17) = 0;
        if (SHIBYTE(v62) < 0)
          operator delete(v60);
        if (SBYTE7(v43) < 0)
          operator delete(__p[0]);
        v46 = 0;
        v44 = 0u;
        v45 = 0u;
        *(_OWORD *)__p = 0u;
        v43 = 0u;
        AriSdk::ARI_IBIImsMEStopDTMFCodeReq_SDK::ARI_IBIImsMEStopDTMFCodeReq_SDK((AriSdk::ARI_IBIImsMEStopDTMFCodeReq_SDK *)__p);
        AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>(&v46, (_DWORD *)(v6 + 476));
        v9 = *(_QWORD *)(v6 + 1040);
        v10 = *(std::__shared_weak_count **)(v6 + 1048);
        v41 = v10;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
        }
        if (!v9)
          goto LABEL_52;
        v14 = *(IBIRTPClient **)(v9 + 136);
        v13 = *(std::__shared_weak_count **)(v9 + 144);
        v49 = v14;
        v50 = v13;
        if (v13)
        {
          v15 = (unint64_t *)&v13->__shared_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        if (v14)
        {
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v60, (_QWORD *)v14 + 1);
          v18 = v60;
          v17 = (std::__shared_weak_count *)v61;
          if (v61)
          {
            v19 = (unint64_t *)(v61 + 16);
            do
              v20 = __ldxr(v19);
            while (__stxr(v20 + 1, v19));
            v21 = (unint64_t *)&v17->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)__p);
          v24 = IBIRTPClient::callbackForRequest(v14, (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26));
          v60 = (void *)MEMORY[0x1E0C809B0];
          v61 = 1174405120;
          v62 = ___ZN12IBIRTPClient4sendIN6AriSdk31ARI_IBIImsMEStopDTMFCodeReq_SDKEEE9ImsResultRT__block_invoke;
          v63 = &__block_descriptor_tmp_24_3;
          v64 = v18;
          v65 = v17;
          if (v17)
          {
            p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
            do
              v26 = __ldxr(p_shared_weak_owners);
            while (__stxr(v26 + 1, p_shared_weak_owners));
          }
          v66 = v24;
          v27 = *((_QWORD *)v14 + 11);
          v53[0] = 0;
          ice::detail::wrapCallback<int>((uint64_t)&v60, v53);
          v59 = 0;
          memset(v58, 0, sizeof(v58));
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v55, (_QWORD *)(v27 + 8));
          ice::SendMsgBaseProxy::SendMsgBaseProxy();
          v28 = v56;
          if (v56)
          {
            v29 = (unint64_t *)&v56->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          aBlock[0] = v53[0];
          v53[0] = 0;
          ice::SendMsgBaseProxy::callback();
          if (aBlock[0])
            _Block_release(aBlock[0]);
          if (v53[0])
            _Block_release(v53[0]);
          MEMORY[0x1C3B86680](v58);
          std::string::basic_string[abi:ne180100]<0>(&v55, "ibi.client");
          std::string::basic_string[abi:ne180100]<0>(v53, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v31 = ImsLogger::debug(ims::_logger, (uint64_t)&v55, (uint64_t)v53);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)"Sent: ", 6);
          *(_BYTE *)(v31 + 17) = 0;
          v32 = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)__p);
          IBIRTPClient::getMsgName((v32 >> 17) & 0xFFFF8000 | ((_DWORD)v32 << 26), aBlock);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v31 + 32))(v31, aBlock);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)" successfully", 13);
          *(_BYTE *)(v31 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v31 + 17) = 0;
          if (v52 < 0)
            operator delete(aBlock[0]);
          if (v54 < 0)
            operator delete(v53[0]);
          if (v57 < 0)
            operator delete(v55);
          *(_QWORD *)(a2 + 56) = 0;
          *(_QWORD *)(a2 + 64) = 0;
          *(_QWORD *)a2 = &off_1E78B7238;
          *(_QWORD *)(a2 + 8) = &_bambiDomain;
          *(_DWORD *)(a2 + 16) = 0;
          *(_QWORD *)(a2 + 40) = 0;
          *(_QWORD *)(a2 + 48) = 0;
          *(_QWORD *)(a2 + 24) = 0;
          *(_QWORD *)(a2 + 32) = 0;
          if (v65)
            std::__shared_weak_count::__release_weak(v65);
          if (v17)
            std::__shared_weak_count::__release_weak(v17);
          v13 = v50;
        }
        if (v13)
        {
          v33 = (unint64_t *)&v13->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        if (!v14)
        {
LABEL_52:
          *(_OWORD *)(a2 + 24) = 0u;
          *(_OWORD *)(a2 + 40) = 0u;
          *(_OWORD *)(a2 + 56) = 0u;
          *(_QWORD *)a2 = &off_1E78B7238;
          *(_QWORD *)(a2 + 8) = &_bambiDomain;
          *(_DWORD *)(a2 + 16) = 0x40000000;
        }
        if (v41)
        {
          v35 = (unint64_t *)&v41->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        MEMORY[0x1C3B868E4](__p);
        v5 = v48;
        if (!v48)
          return;
LABEL_66:
        v39 = (unint64_t *)&v5->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(&v60, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v37 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v60);
  v38 = strlen((const char *)((unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (unint64_t)"16IBISessionHelper" & 0x7FFFFFFFFFFFFFFFLL, v38);
  *(_BYTE *)(v37 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v37 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"sendStopDTMFDigitRequest", 24);
  *(_BYTE *)(v37 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)" [sessionId=0]", 14);
  *(_BYTE *)(v37 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v37 + 17) = 0;
  if (SHIBYTE(v62) < 0)
    operator delete(v60);
  if (SBYTE7(v43) < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)a2 = &off_1E78B7238;
  *(_QWORD *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 0x40000000;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  if (v5)
    goto LABEL_66;
}

void sub_1BF0EBD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *aBlock,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v47;

  if (a44 < 0)
    operator delete(__p);
  v47 = *(std::__shared_weak_count **)(v45 - 80);
  if (v47)
    std::__shared_weak_count::__release_weak(v47);
  if (v44)
    std::__shared_weak_count::__release_weak(v44);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1C3B868E4](&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BF0EBEB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN12IBIRTPClient4sendIN6AriSdk42ARI_IBIImsMECreateAudioMediaSessionReq_SDKEEE9ImsResultRT__block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t *);
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v21 = 0;
  v22 = 0;
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    v22 = v7;
    if (v7)
    {
      v8 = a1[4];
      v21 = v8;
      if (v8)
      {
        v9 = (void (*)(uint64_t, uint64_t, uint64_t *))a1[6];
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        v19 = v8;
        v20 = v7;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v9(a2, a3, &v19);
        v12 = v20;
        if (v20)
        {
          v13 = (unint64_t *)&v20->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
    }
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return 0;
}

void sub_1BF0EBFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBIRTPClient4sendIN6AriSdk38ARI_IBIImsMEConfigureAudioMediaReq_SDKEEE9ImsResultRT__block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t *);
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v21 = 0;
  v22 = 0;
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    v22 = v7;
    if (v7)
    {
      v8 = a1[4];
      v21 = v8;
      if (v8)
      {
        v9 = (void (*)(uint64_t, uint64_t, uint64_t *))a1[6];
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        v19 = v8;
        v20 = v7;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v9(a2, a3, &v19);
        v12 = v20;
        if (v20)
        {
          v13 = (unint64_t *)&v20->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
    }
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return 0;
}

void sub_1BF0EC0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBIRTPClient4sendIN6AriSdk40ARI_IBIImsMETerminateMediaSessionReq_SDKEEE9ImsResultRT__block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t *);
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v21 = 0;
  v22 = 0;
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    v22 = v7;
    if (v7)
    {
      v8 = a1[4];
      v21 = v8;
      if (v8)
      {
        v9 = (void (*)(uint64_t, uint64_t, uint64_t *))a1[6];
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        v19 = v8;
        v20 = v7;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v9(a2, a3, &v19);
        v12 = v20;
        if (v20)
        {
          v13 = (unint64_t *)&v20->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
    }
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return 0;
}

void sub_1BF0EC1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBIRTPClient4sendIN6AriSdk29ARI_IBIImsMEStartMediaReq_SDKEEE9ImsResultRT__block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t *);
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v21 = 0;
  v22 = 0;
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    v22 = v7;
    if (v7)
    {
      v8 = a1[4];
      v21 = v8;
      if (v8)
      {
        v9 = (void (*)(uint64_t, uint64_t, uint64_t *))a1[6];
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        v19 = v8;
        v20 = v7;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v9(a2, a3, &v19);
        v12 = v20;
        if (v20)
        {
          v13 = (unint64_t *)&v20->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
    }
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return 0;
}

void sub_1BF0EC304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBIRTPClient4sendIN6AriSdk28ARI_IBIImsMEStopMediaReq_SDKEEE9ImsResultRT__block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t *);
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v21 = 0;
  v22 = 0;
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    v22 = v7;
    if (v7)
    {
      v8 = a1[4];
      v21 = v8;
      if (v8)
      {
        v9 = (void (*)(uint64_t, uint64_t, uint64_t *))a1[6];
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        v19 = v8;
        v20 = v7;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v9(a2, a3, &v19);
        v12 = v20;
        if (v20)
        {
          v13 = (unint64_t *)&v20->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
    }
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return 0;
}

void sub_1BF0EC418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBIRTPClient4sendIN6AriSdk32ARI_IBIImsMEStartDTMFCodeReq_SDKEEE9ImsResultRT__block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t *);
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v21 = 0;
  v22 = 0;
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    v22 = v7;
    if (v7)
    {
      v8 = a1[4];
      v21 = v8;
      if (v8)
      {
        v9 = (void (*)(uint64_t, uint64_t, uint64_t *))a1[6];
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        v19 = v8;
        v20 = v7;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v9(a2, a3, &v19);
        v12 = v20;
        if (v20)
        {
          v13 = (unint64_t *)&v20->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
    }
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return 0;
}

void sub_1BF0EC52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12IBIRTPClient4sendIN6AriSdk31ARI_IBIImsMEStopDTMFCodeReq_SDKEEE9ImsResultRT__block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t *);
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v21 = 0;
  v22 = 0;
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    v22 = v7;
    if (v7)
    {
      v8 = a1[4];
      v21 = v8;
      if (v8)
      {
        v9 = (void (*)(uint64_t, uint64_t, uint64_t *))a1[6];
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        v19 = v8;
        v20 = v7;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v9(a2, a3, &v19);
        v12 = v20;
        if (v20)
        {
          v13 = (unint64_t *)&v20->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
    }
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return 0;
}

void sub_1BF0EC640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t SipUint32ParameterHeader::encodeValue(SipUint32ParameterHeader *this, ImsOutStream *a2)
{
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  return 1;
}

uint64_t SipUint32ParameterHeader::setValueFromString(uint64_t a1, uint64_t a2)
{
  const char *v3;

  if (*(char *)(a2 + 23) >= 0)
    v3 = (const char *)a2;
  else
    v3 = *(const char **)a2;
  *(_DWORD *)(a1 + 104) = strtoul(v3, 0, 10);
  return 1;
}

void ims::analytics::MessageSessionSendReceiveEvent::create(BOOL a1@<W0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, BOOL a6@<W5>, BOOL a7@<W6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, BOOL value, unsigned int a11)
{
  _QWORD *v20;
  xpc_object_t v21;
  xpc_object_t v22;
  _QWORD *v23;
  xpc_object_t v24;
  std::string *v25;
  std::string *v26;
  std::string *p_string;
  std::string string;
  std::string v29;
  std::string v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t object;
  xpc_object_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  xpc_object_t v48;
  xpc_object_t v49;
  xpc_object_t v50;
  std::string v51;

  v20 = operator new(0x90uLL);
  v20[1] = 0;
  v20[2] = 0;
  *v20 = &off_1E78DE7C8;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v30 = *(std::string *)a4;
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v29 = *(std::string *)a5;
  if (*(char *)(a8 + 23) < 0)
    std::string::__init_copy_ctor_external(&string, *(const std::string::value_type **)a8, *(_QWORD *)(a8 + 8));
  else
    string = *(std::string *)a8;
  v20[3] = off_1E78DE900;
  std::string::basic_string[abi:ne180100]<0>(&v51, "ims.ca.sessionsendreceiveevent");
  ImsLogContainer::ImsLogContainer((uint64_t)(v20 + 4), &v51);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  v20[3] = off_1E78DE818;
  v20[4] = &unk_1E78DE850;
  v21 = xpc_dictionary_create(0, 0, 0);
  v22 = v21;
  v23 = v20 + 17;
  if (v21)
  {
    *v23 = v21;
  }
  else
  {
    v22 = xpc_null_create();
    *v23 = v22;
    if (!v22)
    {
      v24 = xpc_null_create();
      v22 = 0;
      goto LABEL_19;
    }
  }
  if (MEMORY[0x1C3B87B98](v22) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v22);
    goto LABEL_20;
  }
  v24 = xpc_null_create();
LABEL_19:
  *v23 = v24;
LABEL_20:
  xpc_release(v22);
  v49 = xpc_BOOL_create(a1);
  if (!v49)
    v49 = xpc_null_create();
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)(v20 + 17);
  v51.__r_.__value_.__l.__size_ = (std::string::size_type)"is_success";
  xpc::dict::object_proxy::operator=((uint64_t)&v51, &v49, &v50);
  xpc_release(v50);
  v50 = 0;
  xpc_release(v49);
  v49 = 0;
  v47 = xpc_int64_create(a2);
  if (!v47)
    v47 = xpc_null_create();
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)(v20 + 17);
  v51.__r_.__value_.__l.__size_ = (std::string::size_type)"latency";
  xpc::dict::object_proxy::operator=((uint64_t)&v51, &v47, &v48);
  xpc_release(v48);
  v48 = 0;
  xpc_release(v47);
  v47 = 0;
  if (a3)
  {
    v45 = xpc_int64_create(a3);
    if (!v45)
      v45 = xpc_null_create();
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)(v20 + 17);
    v51.__r_.__value_.__l.__size_ = (std::string::size_type)"msrp_error_code";
    xpc::dict::object_proxy::operator=((uint64_t)&v51, &v45, &v46);
    xpc_release(v46);
    v46 = 0;
    xpc_release(v45);
    v45 = 0;
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v30.__r_.__value_.__l.__size_)
      goto LABEL_36;
    v25 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&v30.__r_.__value_.__s + 23))
      goto LABEL_36;
    v25 = &v30;
  }
  v43 = xpc_string_create((const char *)v25);
  if (!v43)
    v43 = xpc_null_create();
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)(v20 + 17);
  v51.__r_.__value_.__l.__size_ = (std::string::size_type)"msrp_end_reason";
  xpc::dict::object_proxy::operator=((uint64_t)&v51, &v43, &v44);
  xpc_release(v44);
  v44 = 0;
  xpc_release(v43);
  v43 = 0;
LABEL_36:
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = &v29;
  else
    v26 = (std::string *)v29.__r_.__value_.__r.__words[0];
  v41 = xpc_string_create((const char *)v26);
  if (!v41)
    v41 = xpc_null_create();
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)(v20 + 17);
  v51.__r_.__value_.__l.__size_ = (std::string::size_type)"direction";
  xpc::dict::object_proxy::operator=((uint64_t)&v51, &v41, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v41);
  v41 = 0;
  v39 = xpc_BOOL_create(a6);
  if (!v39)
    v39 = xpc_null_create();
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)(v20 + 17);
  v51.__r_.__value_.__l.__size_ = (std::string::size_type)"is_group";
  xpc::dict::object_proxy::operator=((uint64_t)&v51, &v39, &v40);
  xpc_release(v40);
  v40 = 0;
  xpc_release(v39);
  v39 = 0;
  v37 = xpc_BOOL_create(a7);
  if (!v37)
    v37 = xpc_null_create();
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)(v20 + 17);
  v51.__r_.__value_.__l.__size_ = (std::string::size_type)"is_chatbot";
  xpc::dict::object_proxy::operator=((uint64_t)&v51, &v37, &v38);
  xpc_release(v38);
  v38 = 0;
  xpc_release(v37);
  v37 = 0;
  if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!string.__r_.__value_.__l.__size_)
      goto LABEL_53;
    p_string = (std::string *)string.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&string.__r_.__value_.__s + 23))
      goto LABEL_53;
    p_string = &string;
  }
  v35 = xpc_string_create((const char *)p_string);
  if (!v35)
    v35 = xpc_null_create();
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)(v20 + 17);
  v51.__r_.__value_.__l.__size_ = (std::string::size_type)"chatbot_uri";
  xpc::dict::object_proxy::operator=((uint64_t)&v51, &v35, &v36);
  xpc_release(v36);
  v36 = 0;
  xpc_release(v35);
  v35 = 0;
LABEL_53:
  v33 = xpc_BOOL_create(value);
  if (!v33)
    v33 = xpc_null_create();
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)(v20 + 17);
  v51.__r_.__value_.__l.__size_ = (std::string::size_type)"is_large_message_mode";
  xpc::dict::object_proxy::operator=((uint64_t)&v51, &v33, &v34);
  xpc_release(v34);
  v34 = 0;
  xpc_release(v33);
  v33 = 0;
  v31 = xpc_int64_create(a11);
  if (!v31)
    v31 = xpc_null_create();
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)(v20 + 17);
  v51.__r_.__value_.__l.__size_ = (std::string::size_type)"number_of_chunks";
  xpc::dict::object_proxy::operator=((uint64_t)&v51, &v31, &v32);
  xpc_release(v32);
  v32 = 0;
  xpc_release(v31);
  if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0)
    operator delete(string.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  *a9 = v20 + 3;
  a9[1] = v20;
}

void sub_1BF0ECC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::__shared_weak_count *v28;
  void *v30;

  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  std::__shared_weak_count::~__shared_weak_count(v28);
  operator delete(v30);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<`anonymous namespace'::MessageSessionSendReceiveEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DE7C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<`anonymous namespace'::MessageSessionSendReceiveEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DE7C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<`anonymous namespace'::MessageSessionSendReceiveEventImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void `anonymous namespace'::MessageSessionSendReceiveEventImpl::~MessageSessionSendReceiveEventImpl(_anonymous_namespace_::MessageSessionSendReceiveEventImpl *this)
{
  *(_QWORD *)this = off_1E78DE818;
  *((_QWORD *)this + 1) = &unk_1E78DE850;
  xpc_release(*((xpc_object_t *)this + 14));
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 1) = off_1E78CFE68;
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

{
  *(_QWORD *)this = off_1E78DE818;
  *((_QWORD *)this + 1) = &unk_1E78DE850;
  xpc_release(*((xpc_object_t *)this + 14));
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 1) = off_1E78CFE68;
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
  JUMPOUT(0x1C3B87100);
}

xpc_object_t `anonymous namespace'::MessageSessionSendReceiveEventImpl::getDict@<X0>(_anonymous_namespace_::MessageSessionSendReceiveEventImpl *this@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  xpc_object_t result;

  v2 = (void *)*((_QWORD *)this + 14);
  *a2 = v2;
  if (v2)
    return xpc_retain(v2);
  result = xpc_null_create();
  *a2 = result;
  return result;
}

_QWORD *`anonymous namespace'::MessageSessionSendReceiveEventImpl::getName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "RCSMSRPMessageSendReceive");
}

void `non-virtual thunk to'`anonymous namespace'::MessageSessionSendReceiveEventImpl::~MessageSessionSendReceiveEventImpl(_anonymous_namespace_::MessageSessionSendReceiveEventImpl *this)
{
  *((_QWORD *)this - 1) = off_1E78DE818;
  *(_QWORD *)this = &unk_1E78DE850;
  xpc_release(*((xpc_object_t *)this + 13));
  *((_QWORD *)this + 13) = 0;
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  *((_QWORD *)this - 1) = off_1E78DE818;
  *(_QWORD *)this = &unk_1E78DE850;
  xpc_release(*((xpc_object_t *)this + 13));
  *((_QWORD *)this + 13) = 0;
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1C3B87100);
}

std::string *LazuliHeader::LazuliHeader(std::string *a1, const std::string *a2)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78DE938;
  a1[1].__r_.__value_.__r.__words[0] = 0;
  a1[1].__r_.__value_.__l.__size_ = 0;
  a1[1].__r_.__value_.__r.__words[2] = 0;
  a1[2].__r_.__value_.__s.__data_[0] = 1;
  std::string::operator=(a1 + 1, a2);
  return a1;
}

void sub_1BF0ECFF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  std::__shared_weak_count *v4;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(exception_object);
}

ImsOutStream *LazuliHeader::log(LazuliHeader *this, ImsOutStream *a2)
{
  (*(void (**)(LazuliHeader *, ImsOutStream *, _QWORD))(*(_QWORD *)this + 64))(this, a2, 0);
  return a2;
}

uint64_t LazuliHeader::valueAsString(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v8, 1);
  v4 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 40))(a1, &v8);
  if ((v4 & 1) != 0)
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v9 + 1) + 8, &v6);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
  }
  *(_QWORD *)&v8 = &off_1E78D7A10;
  if ((_BYTE)v9 && *((_QWORD *)&v8 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v8 + 1) + 8))(*((_QWORD *)&v8 + 1));
  return v4;
}

void sub_1BF0ED104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15)
  {
    if (a14)
      (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

void LazuliHeader::encode(const std::string *this, ImsOutStream *a2)
{
  std::string v4;
  std::string v5;
  void *__p[2];
  __int128 v7;
  uint64_t v8;

  LoggableString::LoggableString((std::string *)__p, this + 1);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
  *((_BYTE *)a2 + 17) = 0;
  if (SBYTE7(v7) < 0)
    operator delete(__p[0]);
  if (this[2].__r_.__value_.__s.__data_[0])
  {
    (*(void (**)(const std::string *, ImsOutStream *))(this->__r_.__value_.__r.__words[0] + 40))(this, a2);
  }
  else
  {
    v8 = 0;
    *(_OWORD *)__p = 0u;
    v7 = 0u;
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)__p, 1);
    (*(void (**)(const std::string *, void **))(this->__r_.__value_.__r.__words[0] + 40))(this, __p);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v7 + 1) + 8, &v4);
    LoggableString::LoggableString(&v5, &v4);
    (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &v5);
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v5.__r_.__value_.__l.__data_);
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v4.__r_.__value_.__l.__data_);
    __p[0] = &off_1E78D7A10;
    if ((_BYTE)v7)
    {
      if (__p[1])
        (*(void (**)(void *))(*(_QWORD *)__p[1] + 8))(__p[1]);
    }
  }
}

void sub_1BF0ED274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,char a23,int a24,__int16 a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a23)
  {
    if (a22)
      (*(void (**)(uint64_t))(*(_QWORD *)a22 + 8))(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LazuliHeader::decode(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

void SipDialogEventClient::SipDialogEventClient(SipDialogEventClient *this, SipUserAgent *a2)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.dialog-event");
  ImsLogContainer::ImsLogContainer((uint64_t)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_1E78DE9E0;
  *((_QWORD *)this + 13) = &unk_1E78DEA80;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = a2;
  *((_QWORD *)this + 17) = 0;
  *((_BYTE *)this + 144) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 19) = (char *)this + 160;
  *((_BYTE *)this + 176) = 1;
  *((_DWORD *)this + 45) = 0;
  *((_BYTE *)this + 184) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = &qword_1ED7042D0;
  *((_BYTE *)this + 224) = 0;
}

void sub_1BF0ED3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipDialogEventClient::~SipDialogEventClient(SipDialogEventClient *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78DE9E0;
  *((_QWORD *)this + 13) = &unk_1E78DEA80;
  SipDialogEventClient::terminateExistingDialogs(this);
  v2 = (*(uint64_t (**)(SipDialogEventClient *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipDialogEventClient *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"~SipDialogEventClient", 21);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  SipDialogEventClient::~SipDialogEventClient(this);
  JUMPOUT(0x1C3B87100);
}

void SipDialogEventClient::terminateExistingDialogs(SipDialogEventClient *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  void *__p[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  void *v36;
  std::__shared_weak_count *v37;
  char v38;
  std::string __str;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = (*(uint64_t (**)(SipDialogEventClient *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipDialogEventClient *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"terminateExistingDialogs", 24);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" : ", 3);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v16 = (char *)this + 152;
  SipDialogTable::getAllDialogs((_QWORD *)this + 19, (uint64_t)&v40);
  v3 = v40;
  if (v41 != v40)
  {
    for (i = 0; i < 0x2FC962FC962FC963 * ((v41 - v40) >> 3); ++i)
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "");
      std::string::basic_string[abi:ne180100]<0>(&v36, "");
      SipDialogState::SipDialogState((uint64_t)__p, 5, &__str, (uint64_t)&v36);
      v5 = v3 + 600 * i;
      *(_DWORD *)(v5 + 136) = __p[0];
      std::string::operator=((std::string *)(v5 + 144), (const std::string *)&__p[1]);
      v6 = v3 + 600 * i;
      *(_WORD *)(v6 + 168) = v19;
      *(_BYTE *)(v6 + 170) = BYTE2(v19);
      if (SHIBYTE(v18) < 0)
        operator delete(__p[1]);
      if (v38 < 0)
        operator delete(v36);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v35 = 0;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      *(_OWORD *)__p = 0u;
      v18 = 0u;
      SipDialogInfo::event((SipDialogInfo *)(v3 + 600 * i), (uint64_t)__p);
      v7 = *((_QWORD *)this + 27);
      v8 = *((_QWORD *)this + 16);
      v36 = 0;
      v37 = 0;
      v9 = *(std::__shared_weak_count **)(v8 + 16);
      if (v9)
      {
        v10 = std::__shared_weak_count::lock(v9);
        v37 = v10;
        if (v10)
        {
          v11 = *(_QWORD *)(v8 + 8);
          v36 = (void *)v11;
          goto LABEL_14;
        }
      }
      else
      {
        v10 = 0;
      }
      v11 = 0;
LABEL_14:
      if (*(char *)(v11 + 4159) < 0)
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v11 + 4136), *(_QWORD *)(v11 + 4144));
      else
        __str = *(std::string *)(v11 + 4136);
      (*(void (**)(uint64_t, std::string *, void **))(*(_QWORD *)v7 + 16))(v7, &__str, __p);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if (v10)
        {
LABEL_21:
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
      else if (v10)
      {
        goto LABEL_21;
      }
      SipDialogEventData::~SipDialogEventData(__p);
      v3 = v40;
    }
  }
  v15 = (_QWORD *)*((_QWORD *)this + 20);
  v14 = (char *)this + 160;
  std::__tree<std::__value_type<std::string,SipDialogInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipDialogInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipDialogInfo>>>::destroy((uint64_t)v16, v15);
  *((_QWORD *)v14 - 1) = v14;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  v14[24] = 0;
  __p[0] = &v40;
  std::vector<SipDialogInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1BF0ED7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  a11 = v17 - 112;
  std::vector<SipDialogInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

BOOL SipDialogEventClient::handleNotification(SipDialogEventClient *this, const SipDialogInfoBody *a2)
{
  int v3;
  SipDialogTable *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string::size_type v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  SipDialogEventClient *v29;
  __int128 *v30;
  std::vector<std::string>::pointer end;
  std::vector<std::string>::pointer begin;
  int64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  std::string *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  std::__split_buffer<std::string>::pointer v42;
  unint64_t v43;
  std::string *v44;
  uint64_t v45;
  std::string *v46;
  std::__split_buffer<std::string>::pointer v47;
  std::string *v48;
  std::string *v49;
  int64_t v50;
  uint64_t v51;
  std::string *v52;
  std::__split_buffer<std::string>::pointer v53;
  __int128 v54;
  std::string *first;
  std::string *value;
  __int128 v57;
  SipDialogEventClient *v58;
  SipDialogEventClient *v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  int v64;
  BOOL v65;
  std::vector<std::string> v66;
  _QWORD v67[6];
  std::__shared_weak_count *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  std::__split_buffer<std::string> __v;
  std::__split_buffer<std::string> v73;

  v3 = *((unsigned __int8 *)a2 + 240);
  if (*((_BYTE *)a2 + 240))
  {
    v4 = (const SipDialogInfoBody *)((char *)a2 + 248);
    v5 = (*(uint64_t (**)(SipDialogEventClient *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipDialogEventClient *, uint64_t))(*(_QWORD *)this + 16))(this, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"handleNotification", 18);
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" : incoming dialog info: ", 25);
    *(_BYTE *)(v5 + 17) = 0;
    SipDialogTable::str(v4, &v73);
    (*(void (**)(uint64_t, std::__split_buffer<std::string> *))(*(_QWORD *)v5 + 32))(v5, &v73);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v64 = v3;
    *(_BYTE *)(v5 + 17) = 0;
    if (SHIBYTE(v73.__end_) < 0)
      operator delete(v73.__first_);
    v6 = (*(uint64_t (**)(SipDialogEventClient *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipDialogEventClient *, uint64_t))(*(_QWORD *)this + 16))(this, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"handleNotification", 18);
    *(_BYTE *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" : incoming dialog state: ", 26);
    *(_BYTE *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v65 = SipDialogTable::update((uint64_t)this + 152, (uint64_t)v4, &v69);
    if (v70 != v69)
    {
      for (i = 0; i < 0x14C1BACF914C1BADLL * ((v70 - v69) >> 3); ++i)
      {
        v8 = (*(uint64_t (**)(SipDialogEventClient *))(*(_QWORD *)this + 64))(this);
        (*(void (**)(SipDialogEventClient *, uint64_t))(*(_QWORD *)this + 16))(this, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"handleNotification", 18);
        *(_BYTE *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" event[", 7);
        *(_BYTE *)(v8 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"]=", 2);
        *(_BYTE *)(v8 + 17) = 0;
        SipDialogEventData::str((SipDialogEventData *)&v73, v69 + 296 * i);
        (*(void (**)(uint64_t, std::__split_buffer<std::string> *))(*(_QWORD *)v8 + 32))(v8, &v73);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v8 + 17) = 0;
        if (SHIBYTE(v73.__end_) < 0)
          operator delete(v73.__first_);
        v9 = *((_QWORD *)this + 27);
        v10 = *((_QWORD *)this + 16);
        __v.__first_ = 0;
        __v.__begin_ = 0;
        v11 = *(std::__shared_weak_count **)(v10 + 16);
        if (v11)
        {
          v12 = std::__shared_weak_count::lock(v11);
          __v.__begin_ = (std::__split_buffer<std::string>::pointer)v12;
          if (v12)
          {
            v13 = *(_QWORD *)(v10 + 8);
            __v.__first_ = (std::__split_buffer<std::string>::pointer)v13;
            goto LABEL_13;
          }
        }
        else
        {
          v12 = 0;
        }
        v13 = 0;
LABEL_13:
        if (*(char *)(v13 + 4159) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v73, *(const std::string::value_type **)(v13 + 4136), *(_QWORD *)(v13 + 4144));
        }
        else
        {
          v14 = v13 + 4136;
          *(_OWORD *)&v73.__first_ = *(_OWORD *)v14;
          v73.__end_ = *(std::__split_buffer<std::string>::pointer *)(v14 + 16);
        }
        (*(void (**)(uint64_t, std::__split_buffer<std::string> *, unint64_t))(*(_QWORD *)v9 + 16))(v9, &v73, v69 + 296 * i);
        if (SHIBYTE(v73.__end_) < 0)
        {
          operator delete(v73.__first_);
          if (v12)
          {
LABEL_20:
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v16 = __ldaxr(p_shared_owners);
            while (__stlxr(v16 - 1, p_shared_owners));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
        }
        else if (v12)
        {
          goto LABEL_20;
        }
      }
    }
    if (v65)
    {
      v17 = *((_QWORD *)this + 14);
      v18 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
      if (v18)
      {
        p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
        do
          v20 = __ldxr(p_shared_weak_owners);
        while (__stxr(v20 + 1, p_shared_weak_owners));
      }
      v21 = *((_QWORD *)this + 16);
      v22 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v21 + 16));
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)v22;
      __v.__first_ = *(std::__split_buffer<std::string>::pointer *)(v21 + 8);
      v23 = __v.__first_[5].__r_.__value_.__r.__words[2];
      LoggableString::LoggableString((LoggableString *)&v73, "dialogEventResubscribeOnLatePartialUpdate");
      v67[0] = MEMORY[0x1E0C809B0];
      v67[1] = 1174405120;
      v67[2] = ___ZN20SipDialogEventClient18handleNotificationERK17SipDialogInfoBody_block_invoke;
      v67[3] = &__block_descriptor_tmp_40;
      v67[4] = this;
      v67[5] = v17;
      v68 = v18;
      if (v18)
      {
        v24 = (unint64_t *)&v18->__shared_weak_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      (*(void (**)(std::string::size_type, std::__split_buffer<std::string> *, _QWORD *))(*(_QWORD *)v23 + 208))(v23, &v73, v67);
      if (SHIBYTE(v73.__end_) < 0)
        operator delete(v73.__first_);
      v26 = (unint64_t *)&v22->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      if (v68)
        std::__shared_weak_count::__release_weak(v68);
      if (v18)
        std::__shared_weak_count::__release_weak(v18);
    }
    v28 = (*(uint64_t (**)(SipDialogEventClient *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipDialogEventClient *, uint64_t))(*(_QWORD *)this + 16))(this, v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"handleNotification", 18);
    *(_BYTE *)(v28 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)" : updated dialog info: ", 24);
    *(_BYTE *)(v28 + 17) = 0;
    SipDialogTable::str((SipDialogEventClient *)((char *)this + 152), &v73);
    (*(void (**)(uint64_t, std::__split_buffer<std::string> *))(*(_QWORD *)v28 + 32))(v28, &v73);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v28 + 17) = 0;
    if (SHIBYTE(v73.__end_) < 0)
      operator delete(v73.__first_);
    memset(&v66, 0, sizeof(v66));
    v29 = (SipDialogEventClient *)*((_QWORD *)this + 19);
    if (v29 != (SipDialogEventClient *)((char *)this + 160))
    {
      do
      {
        v30 = (__int128 *)((char *)v29 + 32);
        end = v66.__end_;
        if (v66.__end_ < v66.__end_cap_.__value_)
        {
          if (*((char *)v29 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(v66.__end_, *((const std::string::value_type **)v29 + 4), *((_QWORD *)v29 + 5));
          }
          else
          {
            v41 = *v30;
            v66.__end_->__r_.__value_.__r.__words[2] = *((_QWORD *)v29 + 6);
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v41;
          }
          v66.__end_ = end + 1;
        }
        else
        {
          begin = v66.__begin_;
          v33 = (char *)v66.__end_ - (char *)v66.__begin_;
          v34 = 0xAAAAAAAAAAAAAAABLL * (((char *)v66.__end_ - (char *)v66.__begin_) >> 3);
          v35 = v34 + 1;
          if (v34 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v36 = 0x5555555555555556 * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3);
          if (v36 <= v35)
            v36 = v34 + 1;
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 3) >= 0x555555555555555)
            v37 = 0xAAAAAAAAAAAAAAALL;
          else
            v37 = v36;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v66.__end_cap_;
          if (v37)
          {
            v38 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v66.__end_cap_, v37);
            v40 = v39;
          }
          else
          {
            v38 = 0;
            v40 = 0;
          }
          v42 = v38 + v34;
          __v.__first_ = v38;
          __v.__begin_ = v42;
          __v.__end_ = v42;
          __v.__end_cap_.__value_ = &v38[v40];
          if (v34 == v40)
          {
            if (v33 < 1)
            {
              if (begin == end)
                v43 = 1;
              else
                v43 = 2 * v34;
              v73.__end_cap_.__value_ = (std::allocator<std::string> *)&v66.__end_cap_;
              v44 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v66.__end_cap_, v43);
              v46 = __v.__begin_;
              v47 = __v.__end_;
              v48 = __v.__begin_;
              v49 = &v44[v43 >> 2];
              v50 = (char *)__v.__end_ - (char *)__v.__begin_;
              if (__v.__end_ != __v.__begin_)
              {
                v49 = &v44[(v43 >> 2) + v50 / 24];
                v51 = 24 * (v50 / 24);
                v52 = &v44[v43 >> 2];
                v53 = __v.__begin_;
                do
                {
                  v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
                  v52->__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v52->__r_.__value_.__l.__data_ = v54;
                  ++v52;
                  v53->__r_.__value_.__l.__size_ = 0;
                  v53->__r_.__value_.__r.__words[2] = 0;
                  v53->__r_.__value_.__r.__words[0] = 0;
                  ++v53;
                  v51 -= 24;
                }
                while (v51);
                v48 = v47;
              }
              first = __v.__first_;
              value = __v.__end_cap_.__value_;
              __v.__first_ = v44;
              __v.__begin_ = &v44[v43 >> 2];
              v73.__first_ = first;
              v73.__begin_ = v46;
              __v.__end_ = v49;
              __v.__end_cap_.__value_ = &v44[v45];
              v73.__end_ = v48;
              v73.__end_cap_.__value_ = value;
              std::__split_buffer<std::string>::~__split_buffer(&v73);
              v42 = __v.__end_;
            }
            else
            {
              std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v73, (__int128 *)v42, (__int128 *)v42, (uint64_t)&v42[-(v35 >> 1)]);
              __v.__begin_ -= v35 >> 1;
              __v.__end_ = v42;
            }
          }
          if (*((char *)v29 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(v42, *((const std::string::value_type **)v29 + 4), *((_QWORD *)v29 + 5));
          }
          else
          {
            v57 = *v30;
            v42->__r_.__value_.__r.__words[2] = *((_QWORD *)v29 + 6);
            *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v57;
          }
          ++__v.__end_;
          std::vector<std::string>::__swap_out_circular_buffer(&v66, &__v, end);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        v58 = (SipDialogEventClient *)*((_QWORD *)v29 + 1);
        if (v58)
        {
          do
          {
            v59 = v58;
            v58 = *(SipDialogEventClient **)v58;
          }
          while (v58);
        }
        else
        {
          do
          {
            v59 = (SipDialogEventClient *)*((_QWORD *)v29 + 2);
            v60 = *(_QWORD *)v59 == (_QWORD)v29;
            v29 = v59;
          }
          while (!v60);
        }
        v29 = v59;
      }
      while (v59 != (SipDialogEventClient *)((char *)this + 160));
    }
    v61 = (*(uint64_t (**)(SipDialogEventClient *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipDialogEventClient *, uint64_t))(*(_QWORD *)this + 16))(this, v61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v61 + 8), (uint64_t)"handleNotification", 18);
    *(_BYTE *)(v61 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v61 + 8), (uint64_t)" : updated dialog id container, size: ", 38);
    *(_BYTE *)(v61 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v61 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v61 + 64))(v61, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v61 + 17) = 0;
    v73.__first_ = (std::__split_buffer<std::string>::pointer)&v66;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
    v73.__first_ = (std::__split_buffer<std::string>::pointer)&v69;
    std::vector<SipDialogEventData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
    v3 = v64;
  }
  else
  {
    v62 = (*(uint64_t (**)(SipDialogEventClient *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipDialogEventClient *, uint64_t))(*(_QWORD *)this + 16))(this, v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v62 + 8), (uint64_t)"handleNotification", 18);
    *(_BYTE *)(v62 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v62 + 8), (uint64_t)" : wrong dialog info ", 21);
    *(_BYTE *)(v62 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v62 + 64))(v62, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v62 + 17) = 0;
  }
  return v3 != 0;
}

void sub_1BF0EE1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, std::__shared_weak_count *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__split_buffer<std::string> *a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::__shared_weak_count *v26;
  uint64_t v27;

  if (a21)
    std::__shared_weak_count::__release_weak(a21);
  if (*(char *)(v27 - 105) < 0)
    operator delete(*(void **)(v27 - 128));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  a12 = &a22;
  std::vector<SipDialogEventData>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

uint64_t SipDialogEventData::str(SipDialogEventData *this, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  void **v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  void **v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  void *__p[2];
  unsigned __int8 v56;
  void *v57[2];
  unsigned __int8 v58;
  __int128 v59;
  _OWORD v60[4];
  void *v61[2];
  __int128 v62;
  __int128 v63;
  _OWORD v64[9];
  uint64_t v65;

  v65 = 0;
  v63 = 0u;
  memset(v64, 0, sizeof(v64));
  *(_OWORD *)v61 = 0u;
  v62 = 0u;
  memset(v60, 0, sizeof(v60));
  v59 = 0u;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v59);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *(_QWORD *)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, v5, v6);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)":: call-id : ", 13);
  v9 = *(char *)(a2 + 47);
  if (v9 >= 0)
    v10 = a2 + 24;
  else
    v10 = *(_QWORD *)(a2 + 24);
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 47);
  else
    v11 = *(_QWORD *)(a2 + 32);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", local : ", 10);
  v14 = *(char *)(a2 + 71);
  if (v14 >= 0)
    v15 = a2 + 48;
  else
    v15 = *(_QWORD *)(a2 + 48);
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(a2 + 71);
  else
    v16 = *(_QWORD *)(a2 + 56);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", remote : ", 11);
  v19 = *(char *)(a2 + 95);
  if (v19 >= 0)
    v20 = a2 + 72;
  else
    v20 = *(_QWORD *)(a2 + 72);
  if (v19 >= 0)
    v21 = *(unsigned __int8 *)(a2 + 95);
  else
    v21 = *(_QWORD *)(a2 + 80);
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", localSessionDescription : ", 28);
  v24 = *(char *)(a2 + 119);
  if (v24 >= 0)
    v25 = a2 + 96;
  else
    v25 = *(_QWORD *)(a2 + 96);
  if (v24 >= 0)
    v26 = *(unsigned __int8 *)(a2 + 119);
  else
    v26 = *(_QWORD *)(a2 + 104);
  v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
  v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)", remoteSessionDescription : ", 29);
  v29 = *(char *)(a2 + 143);
  if (v29 >= 0)
    v30 = a2 + 120;
  else
    v30 = *(_QWORD *)(a2 + 120);
  if (v29 >= 0)
    v31 = *(unsigned __int8 *)(a2 + 143);
  else
    v31 = *(_QWORD *)(a2 + 128);
  v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
  v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", localURI : ", 13);
  v34 = *(char *)(a2 + 167);
  if (v34 >= 0)
    v35 = a2 + 144;
  else
    v35 = *(_QWORD *)(a2 + 144);
  if (v34 >= 0)
    v36 = *(unsigned __int8 *)(a2 + 167);
  else
    v36 = *(_QWORD *)(a2 + 152);
  v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
  v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)", remoteURI : ", 14);
  v39 = *(char *)(a2 + 191);
  if (v39 >= 0)
    v40 = a2 + 168;
  else
    v40 = *(_QWORD *)(a2 + 168);
  if (v39 >= 0)
    v41 = *(unsigned __int8 *)(a2 + 191);
  else
    v41 = *(_QWORD *)(a2 + 176);
  v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v40, v41);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)", duration : ", 13);
  v43 = (_QWORD *)std::ostream::operator<<();
  v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)", ", 2);
  SipDialogDirection::str((SipDialogDirection *)(a2 + 200), v57);
  if ((v58 & 0x80u) == 0)
    v45 = v57;
  else
    v45 = (void **)v57[0];
  if ((v58 & 0x80u) == 0)
    v46 = v58;
  else
    v46 = (uint64_t)v57[1];
  v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
  v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)", state : ", 10);
  SipDialogState::stateStr((SipDialogState *)(a2 + 248), __p);
  if ((v56 & 0x80u) == 0)
    v49 = __p;
  else
    v49 = (void **)__p[0];
  if ((v56 & 0x80u) == 0)
    v50 = v56;
  else
    v50 = (uint64_t)__p[1];
  v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v49, v50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)", onHold : ", 11);
  v52 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)", emergency : ", 14);
  std::ostream::operator<<();
  if ((char)v56 < 0)
    operator delete(__p[0]);
  if ((char)v58 < 0)
    operator delete(v57[0]);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v60 + 8, this);
  *(_QWORD *)&v59 = *MEMORY[0x1E0DE4F50];
  v53 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v60[-1] + *(_QWORD *)(v59 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v60[0] = v53;
  *((_QWORD *)&v60[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v62) < 0)
    operator delete(v61[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B8707C](v64);
}

void sub_1BF0EE628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void ___ZN20SipDialogEventClient18handleNotificationERK17SipDialogInfoBody_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  SipDialogEventClient *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (SipDialogEventClient *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
        SipDialogEventClient::subscribe(v3);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF0EE710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipDialogEventClient::subscribe(SipDialogEventClient *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  int v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  int v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  const char *v18;
  uint64_t v19;
  SipDialogEventPackage *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string __p;
  void *v26[2];
  char v27;

  v2 = *((_QWORD *)this + 16);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3 && (v4 = std::__shared_weak_count::lock(v3)) != 0)
    {
      v5 = v4;
      v6 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 8) + 176);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (v6)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (v6)
          return;
      }
    }
    else if (MEMORY[0xB0])
    {
      return;
    }
  }
  v9 = *((_QWORD *)this + 16);
  v10 = *(std::__shared_weak_count **)(v9 + 16);
  if (v10 && (v11 = std::__shared_weak_count::lock(v10)) != 0)
  {
    v12 = v11;
    v13 = *(_DWORD *)(*(_QWORD *)(v9 + 8) + 200);
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    if (v13 != 2)
      goto LABEL_17;
  }
  else if (MEMORY[0xC8] != 2)
  {
LABEL_17:
    v16 = (*(uint64_t (**)(SipDialogEventClient *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipDialogEventClient *, uint64_t))(*(_QWORD *)this + 16))(this, v16);
    v17 = *(_QWORD **)(v16 + 8);
    v18 = "stack is not initialized.  Skipping dialog-event subscription.";
    v19 = 62;
LABEL_32:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    return;
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 16) + 608))
  {
    v16 = (*(uint64_t (**)(SipDialogEventClient *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipDialogEventClient *, uint64_t))(*(_QWORD *)this + 16))(this, v16);
    v17 = *(_QWORD **)(v16 + 8);
    v18 = "Thumper is disabled.  Skipping dialog-event subscription.";
    v19 = 57;
    goto LABEL_32;
  }
  v20 = (SipDialogEventPackage *)*((_QWORD *)this + 17);
  if (!v20)
  {
    v21 = operator new();
    *(_QWORD *)(v21 + 16) = 0;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)v21 = &off_1E78EF1D8;
    *(_QWORD *)(v21 + 8) = 0;
    *(_QWORD *)(v21 + 32) = this;
    *(_DWORD *)(v21 + 40) = 600000;
    *((_QWORD *)this + 17) = v21;
    v22 = SipUserAgent::config(*((SipUserAgent **)this + 16));
    v20 = (SipDialogEventPackage *)*((_QWORD *)this + 17);
    if (*(_BYTE *)(v22 + 917))
    {
      std::string::basic_string[abi:ne180100]<0>(v26, "include-session-description");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      SipEventPackage::setSubscriptionParameter((uint64_t)v20, (__int128 *)v26, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v27 < 0)
        operator delete(v26[0]);
      v20 = (SipDialogEventPackage *)*((_QWORD *)this + 17);
    }
  }
  if (!SipDialogEventPackage::subscribe(v20, 600000))
  {
    v23 = (*(uint64_t (**)(SipDialogEventClient *))(*(_QWORD *)this + 48))(this);
    (*(void (**)(SipDialogEventClient *, uint64_t))(*(_QWORD *)this + 16))(this, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"unable to subscribe to dialog events", 36);
    *(_BYTE *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v23 + 17) = 0;
    v24 = *((_QWORD *)this + 17);
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    *((_QWORD *)this + 17) = 0;
  }
}

void sub_1BF0EEA04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrI20SipDialogEventClientEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrI20SipDialogEventClientEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void SipDialogEventClient::registered(SipDialogEventClient *this, char a2)
{
  *((_BYTE *)this + 144) = a2;
  if ((a2 & 1) == 0)
  {
    *((_BYTE *)this + 224) = 1;
    SipDialogEventClient::subscribe(this);
  }
}

void `non-virtual thunk to'SipDialogEventClient::registered(SipDialogEventClient *this, char a2)
{
  *((_BYTE *)this + 40) = a2;
  if ((a2 & 1) == 0)
  {
    *((_BYTE *)this + 120) = 1;
    SipDialogEventClient::subscribe((SipDialogEventClient *)((char *)this - 104));
  }
}

void SipDialogEventClient::regEventSubscriptionSuccess(SipDialogEventClient *this)
{
  *((_BYTE *)this + 224) = 1;
  SipDialogEventClient::subscribe(this);
}

void `non-virtual thunk to'SipDialogEventClient::regEventSubscriptionSuccess(SipDialogEventClient *this)
{
  *((_BYTE *)this + 120) = 1;
  SipDialogEventClient::subscribe((SipDialogEventClient *)((char *)this - 104));
}

void SipDialogEventClient::regEventSubscriptionFailed(SipDialogEventClient *this)
{
  *((_BYTE *)this + 224) = 1;
  SipDialogEventClient::subscribe(this);
}

void `non-virtual thunk to'SipDialogEventClient::regEventSubscriptionFailed(SipDialogEventClient *this)
{
  *((_BYTE *)this + 120) = 1;
  SipDialogEventClient::subscribe((SipDialogEventClient *)((char *)this - 104));
}

void SipDialogEventClient::terminate(SipDialogEventClient *this)
{
  SipEventPackage *v2;

  v2 = (SipEventPackage *)*((_QWORD *)this + 17);
  if (v2)
    SipEventPackage::terminateWithoutUnsubscribing(v2);
  SipDialogEventClient::terminateExistingDialogs(this);
}

void `non-virtual thunk to'SipDialogEventClient::regEventSubscriptionTerminated(SipDialogEventClient *this)
{
  SipDialogEventClient::terminate((SipDialogEventClient *)((char *)this - 104));
}

void SipDialogEventClient::beforeRegEventUnsubscription(SipDialogEventClient *this)
{
  SipDialogEventPackage *v2;

  v2 = (SipDialogEventPackage *)*((_QWORD *)this + 17);
  if (v2)
  {
    SipDialogEventPackage::unsubscribe(v2);
    *((_QWORD *)this + 17) = 0;
  }
}

void `non-virtual thunk to'SipDialogEventClient::beforeRegEventUnsubscription(SipDialogEventClient *this)
{
  SipDialogEventPackage *v2;

  v2 = (SipDialogEventPackage *)*((_QWORD *)this + 4);
  if (v2)
  {
    SipDialogEventPackage::unsubscribe(v2);
    *((_QWORD *)this + 4) = 0;
  }
}

void SipDialogEventClient::terminateRegEvents(SipDialogEventClient *this)
{
  SipDialogEventClient::terminate(this);
  *((_BYTE *)this + 224) = 0;
}

void `non-virtual thunk to'SipDialogEventClient::terminateRegEvents(SipDialogEventClient *this)
{
  SipDialogEventClient::terminate((SipDialogEventClient *)((char *)this - 104));
  *((_BYTE *)this + 120) = 0;
}

void SipDialogEventClient::beforeDeregistration(SipDialogEventClient *this)
{
  SipDialogEventPackage *v2;

  v2 = (SipDialogEventPackage *)*((_QWORD *)this + 17);
  if (v2)
  {
    SipDialogEventPackage::unsubscribe(v2);
    *((_QWORD *)this + 17) = 0;
  }
}

void `non-virtual thunk to'SipDialogEventClient::beforeDeregistration(SipDialogEventClient *this)
{
  SipDialogEventPackage *v2;

  v2 = (SipDialogEventPackage *)*((_QWORD *)this + 4);
  if (v2)
  {
    SipDialogEventPackage::unsubscribe(v2);
    *((_QWORD *)this + 4) = 0;
  }
}

void SipDialogEventClient::deregistered(SipDialogEventClient *this)
{
  SipDialogEventClient::terminate(this);
  *((_BYTE *)this + 224) = 0;
}

void `non-virtual thunk to'SipDialogEventClient::deregistered(SipDialogEventClient *this)
{
  SipDialogEventClient::terminate((SipDialogEventClient *)((char *)this - 104));
  *((_BYTE *)this + 120) = 0;
}

void SipDialogEventClient::setThumperEnabled(SipDialogEventPackage **this, int a2)
{
  SipDialogEventPackage *v3;

  if (*((_BYTE *)this + 224))
  {
    if (a2)
    {
      SipDialogEventClient::subscribe((SipDialogEventClient *)this);
    }
    else
    {
      v3 = this[17];
      if (v3)
      {
        SipDialogEventPackage::unsubscribe(v3);
        this[17] = 0;
      }
    }
  }
}

uint64_t SipDialogEventClient::dialogEventSubscriptionFailed(SipDialogEventClient *this, SipDialogEventPackage *a2, ImsResult *a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = (*(uint64_t (**)(SipDialogEventClient *, SipDialogEventPackage *, ImsResult *))(*(_QWORD *)this + 64))(this, a2, a3);
  (*(void (**)(SipDialogEventClient *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"dialog event subscription failed", 32);
  *(_BYTE *)(v4 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  *((_QWORD *)this + 17) = 0;
  return result;
}

void SipDialogEventClient::dialogEventSubscriptionTerminated(SipDialogEventClient *this, SipDialogEventPackage *a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(SipDialogEventClient *, SipDialogEventPackage *))(*(_QWORD *)this + 64))(this, a2);
  (*(void (**)(SipDialogEventClient *, uint64_t))(*(_QWORD *)this + 16))(this, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"dialog event subscription terminated", 36);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  SipDialogEventClient::terminateExistingDialogs(this);
  *((_QWORD *)this + 17) = 0;
}

void SipDialogTable::getAllDialogs(_QWORD *a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;

  if (a2)
  {
    v5 = *(_QWORD *)a2;
    for (i = *(_QWORD *)(a2 + 8); i != v5; SipDialogInfo::~SipDialogInfo((void **)(i - 600)))
      ;
    *(_QWORD *)(a2 + 8) = v5;
    v8 = (_QWORD *)*a1;
    v6 = a1 + 1;
    v7 = v8;
    if (v8 != v6)
    {
      do
      {
        std::vector<SipDialogInfo>::insert((uint64_t *)a2, *(std::string **)(a2 + 8), (SipDialogInfo *)(v7 + 7));
        v9 = (_QWORD *)v7[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v7[2];
            v11 = *v10 == (_QWORD)v7;
            v7 = v10;
          }
          while (!v11);
        }
        v7 = v10;
      }
      while (v10 != v6);
    }
  }
}

void StubDialogEventDelegate::~StubDialogEventDelegate(void **this)
{
  ImsLogContainer::~ImsLogContainer(this);
  JUMPOUT(0x1C3B87100);
}

void StubDialogEventDelegate::handleDialogEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  std::string v6;
  std::string __p;

  if (a3)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"StubDialogEventDelegate: got a dialog event: <<<", 48);
    *(_BYTE *)(v5 + 17) = 0;
    SipDialogEventData::str((SipDialogEventData *)&v6, a3);
    LoggableString::LoggableString(&__p, &v6);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 40))(v5, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)">>>, but a real delegate object has not been set.\n", 50);
    *(_BYTE *)(v5 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1BF0EEF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'StubDialogEventDelegate::~StubDialogEventDelegate(void **this)
{
  ImsLogContainer::~ImsLogContainer(this - 13);
}

{
  ImsLogContainer::~ImsLogContainer(this - 13);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'StubDialogEventDelegate::handleDialogEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  StubDialogEventDelegate::handleDialogEvent(a1 - 104, a2, a3);
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<SipDialogEventData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        SipDialogEventData::~SipDialogEventData(v4 - 37);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::string *std::vector<SipDialogInfo>::insert(uint64_t *a1, std::string *this, SipDialogInfo *a3)
{
  std::string *v4;
  std::string *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = this;
  v6 = (std::string *)a1[1];
  v9 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v10 = *a1;
    v11 = 0x2FC962FC962FC963 * (((uint64_t)v6 - *a1) >> 3) + 1;
    if (v11 > 0x6D3A06D3A06D3ALL)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v12 = 0x2FC962FC962FC963 * (((uint64_t)this - v10) >> 3);
    v13 = 0x2FC962FC962FC963 * ((uint64_t)(v8 - v10) >> 3);
    v14 = 2 * v13;
    if (2 * v13 <= v11)
      v14 = 0x2FC962FC962FC963 * (((uint64_t)v6 - *a1) >> 3) + 1;
    if (v13 >= 0x369D0369D0369DLL)
      v15 = 0x6D3A06D3A06D3ALL;
    else
      v15 = v14;
    v22 = v7;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipDialogInfo>>(v7, v15);
    else
      v16 = 0;
    v18 = v16;
    v19 = &v16[600 * v12];
    v20 = v19;
    v21 = &v16[600 * v15];
    std::__split_buffer<SipDialogInfo>::push_back[abi:ne180100](&v18, a3);
    v4 = (std::string *)std::vector<SipDialogInfo>::__swap_out_circular_buffer(a1, &v18, (uint64_t)v4);
    std::__split_buffer<SipDialogInfo>::~__split_buffer((uint64_t)&v18);
  }
  else if (this == v6)
  {
    SipDialogInfo::SipDialogInfo(this, a3);
    a1[1] = (uint64_t)&v4[25];
  }
  else
  {
    std::vector<SipDialogInfo>::__move_range((uint64_t)a1, (__int128 *)this, (unint64_t)v6, (uint64_t)&this[25]);
    if (v4 <= (std::string *)a3)
      a3 = (SipDialogInfo *)((char *)a3 + 600 * (a1[1] > (unint64_t)a3));
    SipDialogInfo::operator=((uint64_t)v4, (uint64_t)a3);
  }
  return v4;
}

void sub_1BF0EF208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v11 + 8) = v10;
  _Unwind_Resume(exception_object);
}

__int128 *std::vector<SipDialogInfo>::__move_range(uint64_t a1, __int128 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 *v10;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (__int128 *)((char *)a2 + v6 - a4);
  v8 = v6;
  if ((unint64_t)v7 < a3)
  {
    v10 = (__int128 *)((char *)a2 + v6 - a4);
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      SipDialogInfo::SipDialogInfo(v8, v10);
      v10 = (__int128 *)((char *)v10 + 600);
      v8 += 600;
    }
    while ((unint64_t)v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,SipDialogInfo *,SipDialogInfo *,SipDialogInfo *,0>(a2, v7, v6);
}

void sub_1BF0EF2B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__split_buffer<SipDialogInfo>::push_back[abi:ne180100](_QWORD *a1, SipDialogInfo *a2)
{
  __int128 *v4;
  __int128 *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  char *v26;
  int64x2_t v27;
  char *v28;
  uint64_t v29;

  v4 = (__int128 *)a1[2];
  if (v4 == (__int128 *)a1[3])
  {
    v6 = (char *)*a1;
    v5 = (__int128 *)a1[1];
    if ((unint64_t)v5 <= *a1)
    {
      v12 = (char *)v4 - v6;
      v11 = v12 == 0;
      v13 = 0x5F92C5F92C5F92C6 * (v12 >> 3);
      if (v11)
        v14 = 1;
      else
        v14 = v13;
      v15 = v14 >> 2;
      v29 = a1[4];
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipDialogInfo>>(v29, v14);
      v17 = (uint64_t)&v16[600 * v15];
      v26 = v16;
      v27.i64[0] = v17;
      v19 = &v16[600 * v18];
      v27.i64[1] = v17;
      v28 = v19;
      v20 = (__int128 *)a1[1];
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v22 = v17 + 600 * (v21 / 600);
        v23 = 600 * (v21 / 600);
        do
        {
          SipDialogInfo::SipDialogInfo(v17, v20);
          v17 += 600;
          v20 = (__int128 *)((char *)v20 + 600);
          v23 -= 600;
        }
        while (v23);
        v16 = v26;
        v17 = v27.i64[0];
        v24 = *(int64x2_t *)(a1 + 1);
        v19 = v28;
      }
      else
      {
        v24 = vdupq_n_s64((unint64_t)v20);
        v22 = v17;
      }
      v26 = (char *)*a1;
      *a1 = v16;
      a1[1] = v17;
      v27 = v24;
      v25 = (char *)a1[3];
      a1[2] = v22;
      a1[3] = v19;
      v28 = v25;
      std::__split_buffer<SipDialogInfo>::~__split_buffer((uint64_t)&v26);
      v4 = (__int128 *)a1[2];
    }
    else
    {
      v7 = 0x2FC962FC962FC963 * (((uint64_t)v5 - *a1) >> 3);
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = v8 >> 1;
      v10 = -600 * v9;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,SipDialogInfo *,SipDialogInfo *,SipDialogInfo *,0>(v5, v4, (uint64_t)v5 - 600 * v9);
      a1[1] += v10;
      a1[2] = v4;
    }
  }
  SipDialogInfo::SipDialogInfo((std::string *)v4, a2);
  a1[2] += 600;
}

void sub_1BF0EF43C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<SipDialogInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<SipDialogInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SipDialogInfo>,std::reverse_iterator<SipDialogInfo*>,std::reverse_iterator<SipDialogInfo*>,std::reverse_iterator<SipDialogInfo*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SipDialogInfo>,SipDialogInfo*,SipDialogInfo*,SipDialogInfo*>(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t SipDialogInfo::SipDialogInfo(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v5 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v5;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v6 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)(a1 + 48) = v6;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 6) = 0;
  v7 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)(a1 + 72) = v7;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  SipDialogDirection::SipDialogDirection((_BYTE *)(a1 + 96), (uint64_t)(a2 + 6));
  SipDialogState::SipDialogState(a1 + 136, (uint64_t)a2 + 136);
  v8 = *((_QWORD *)a2 + 22);
  *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
  *(_QWORD *)(a1 + 176) = v8;
  v9 = a2[12];
  *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
  *(_OWORD *)(a1 + 192) = v9;
  *((_QWORD *)a2 + 25) = 0;
  *((_QWORD *)a2 + 26) = 0;
  *((_QWORD *)a2 + 24) = 0;
  v10 = *(__int128 *)((char *)a2 + 216);
  *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 29);
  *(_OWORD *)(a1 + 216) = v10;
  *((_QWORD *)a2 + 28) = 0;
  *((_QWORD *)a2 + 29) = 0;
  *((_QWORD *)a2 + 27) = 0;
  v11 = a2[15];
  *(_QWORD *)(a1 + 256) = *((_QWORD *)a2 + 32);
  *(_OWORD *)(a1 + 240) = v11;
  *((_QWORD *)a2 + 30) = 0;
  *((_QWORD *)a2 + 31) = 0;
  *((_QWORD *)a2 + 32) = 0;
  *(_BYTE *)(a1 + 264) = *((_BYTE *)a2 + 264);
  v12 = a2[17];
  *(_QWORD *)(a1 + 288) = *((_QWORD *)a2 + 36);
  *(_OWORD *)(a1 + 272) = v12;
  *((_QWORD *)a2 + 35) = 0;
  *((_QWORD *)a2 + 36) = 0;
  *((_QWORD *)a2 + 34) = 0;
  v13 = *(__int128 *)((char *)a2 + 296);
  *(_QWORD *)(a1 + 312) = *((_QWORD *)a2 + 39);
  *(_OWORD *)(a1 + 296) = v13;
  *((_QWORD *)a2 + 38) = 0;
  *((_QWORD *)a2 + 39) = 0;
  *((_QWORD *)a2 + 37) = 0;
  *(_BYTE *)(a1 + 320) = *((_BYTE *)a2 + 320);
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  v14 = *((_QWORD *)a2 + 42);
  *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 41);
  *(_QWORD *)(a1 + 336) = v14;
  *(_QWORD *)(a1 + 344) = *((_QWORD *)a2 + 43);
  *((_QWORD *)a2 + 41) = 0;
  *((_QWORD *)a2 + 42) = 0;
  *((_QWORD *)a2 + 43) = 0;
  v15 = a2[22];
  *(_QWORD *)(a1 + 368) = *((_QWORD *)a2 + 46);
  *(_OWORD *)(a1 + 352) = v15;
  *((_QWORD *)a2 + 45) = 0;
  *((_QWORD *)a2 + 46) = 0;
  *((_QWORD *)a2 + 44) = 0;
  *(_QWORD *)(a1 + 376) = *((_QWORD *)a2 + 47);
  v16 = a1 + 384;
  v17 = *((_QWORD *)a2 + 48);
  *(_QWORD *)(a1 + 384) = v17;
  v18 = *((_QWORD *)a2 + 49);
  *(_QWORD *)(a1 + 392) = v18;
  if (v18)
  {
    *(_QWORD *)(v17 + 16) = v16;
    *((_QWORD *)a2 + 47) = a2 + 24;
    *((_QWORD *)a2 + 48) = 0;
    *((_QWORD *)a2 + 49) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 376) = v16;
  }
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 400) = a2[25];
  *(_QWORD *)(a1 + 416) = *((_QWORD *)a2 + 52);
  *((_QWORD *)a2 + 50) = 0;
  *((_QWORD *)a2 + 51) = 0;
  *((_QWORD *)a2 + 52) = 0;
  *(_BYTE *)(a1 + 424) = *((_BYTE *)a2 + 424);
  v19 = a2[27];
  *(_QWORD *)(a1 + 448) = *((_QWORD *)a2 + 56);
  *(_OWORD *)(a1 + 432) = v19;
  *((_QWORD *)a2 + 55) = 0;
  *((_QWORD *)a2 + 56) = 0;
  *((_QWORD *)a2 + 54) = 0;
  *(_BYTE *)(a1 + 456) = *((_BYTE *)a2 + 456);
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 464) = a2[29];
  *(_QWORD *)(a1 + 480) = *((_QWORD *)a2 + 60);
  *((_QWORD *)a2 + 58) = 0;
  *((_QWORD *)a2 + 59) = 0;
  *((_QWORD *)a2 + 60) = 0;
  v20 = *(__int128 *)((char *)a2 + 488);
  *(_QWORD *)(a1 + 504) = *((_QWORD *)a2 + 63);
  *(_OWORD *)(a1 + 488) = v20;
  *((_QWORD *)a2 + 61) = 0;
  *((_QWORD *)a2 + 62) = 0;
  *((_QWORD *)a2 + 63) = 0;
  *(_QWORD *)(a1 + 512) = *((_QWORD *)a2 + 64);
  v21 = a1 + 520;
  v22 = *((_QWORD *)a2 + 65);
  *(_QWORD *)(a1 + 520) = v22;
  v23 = *((_QWORD *)a2 + 66);
  *(_QWORD *)(a1 + 528) = v23;
  if (v23)
  {
    *(_QWORD *)(v22 + 16) = v21;
    *((_QWORD *)a2 + 64) = (char *)a2 + 520;
    *((_QWORD *)a2 + 65) = 0;
    *((_QWORD *)a2 + 66) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 512) = v21;
  }
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 536) = *((_QWORD *)a2 + 67);
  *(_QWORD *)(a1 + 544) = *((_QWORD *)a2 + 68);
  *(_QWORD *)(a1 + 552) = *((_QWORD *)a2 + 69);
  *((_QWORD *)a2 + 68) = 0;
  *((_QWORD *)a2 + 67) = 0;
  *((_QWORD *)a2 + 69) = 0;
  *(_BYTE *)(a1 + 560) = *((_BYTE *)a2 + 560);
  v24 = *(__int128 *)((char *)a2 + 568);
  *(_QWORD *)(a1 + 584) = *((_QWORD *)a2 + 73);
  *(_OWORD *)(a1 + 568) = v24;
  *((_QWORD *)a2 + 73) = 0;
  *((_QWORD *)a2 + 72) = 0;
  *((_QWORD *)a2 + 71) = 0;
  *(_BYTE *)(a1 + 592) = *((_BYTE *)a2 + 592);
  return a1;
}

void sub_1BF0EF7D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 127) < 0)
    operator delete(*(void **)(v1 + 104));
  if (*(char *)(v1 + 95) < 0)
    operator delete(*(void **)(v1 + 72));
  if (*(char *)(v1 + 71) < 0)
    operator delete(*(void **)(v1 + 48));
  if (*(char *)(v1 + 47) < 0)
    operator delete(*(void **)(v1 + 24));
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

__int128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,SipDialogInfo *,SipDialogInfo *,SipDialogInfo *,0>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v6 = (__int128 *)((char *)v6 - 600);
      a3 -= 600;
      SipDialogInfo::operator=(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t SipDialogInfo::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  void **v9;
  __int128 v10;
  char v11;
  void **v12;
  __int128 v13;
  void **v14;
  __int128 v15;
  void **v16;
  __int128 v17;
  void **v18;
  __int128 v19;
  void **v20;
  __int128 v21;
  uint64_t v22;
  void **v23;
  __int128 v24;
  void **v25;
  __int128 v26;
  void **v27;
  __int128 v28;
  void **v29;
  __int128 v30;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v7);
  v8 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)v7 = v8;
  *((_BYTE *)a2 + 71) = 0;
  *((_BYTE *)a2 + 48) = 0;
  v9 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v9);
  v10 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)v9 = v10;
  *((_BYTE *)a2 + 95) = 0;
  *((_BYTE *)a2 + 72) = 0;
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  std::string::operator=((std::string *)(a1 + 104), (const std::string *)((char *)a2 + 104));
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 34);
  std::string::operator=((std::string *)(a1 + 144), (const std::string *)a2 + 6);
  *(_WORD *)(a1 + 168) = *((_WORD *)a2 + 84);
  *(_BYTE *)(a1 + 170) = *((_BYTE *)a2 + 170);
  v11 = *((_BYTE *)a2 + 184);
  *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
  *(_BYTE *)(a1 + 184) = v11;
  v12 = (void **)(a1 + 192);
  if (*(char *)(a1 + 215) < 0)
    operator delete(*v12);
  v13 = a2[12];
  *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
  *(_OWORD *)v12 = v13;
  *((_BYTE *)a2 + 215) = 0;
  *((_BYTE *)a2 + 192) = 0;
  v14 = (void **)(a1 + 216);
  if (*(char *)(a1 + 239) < 0)
    operator delete(*v14);
  v15 = *(__int128 *)((char *)a2 + 216);
  *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 29);
  *(_OWORD *)v14 = v15;
  *((_BYTE *)a2 + 239) = 0;
  *((_BYTE *)a2 + 216) = 0;
  v16 = (void **)(a1 + 240);
  if (*(char *)(a1 + 263) < 0)
    operator delete(*v16);
  v17 = a2[15];
  *(_QWORD *)(a1 + 256) = *((_QWORD *)a2 + 32);
  *(_OWORD *)v16 = v17;
  *((_BYTE *)a2 + 263) = 0;
  *((_BYTE *)a2 + 240) = 0;
  *(_BYTE *)(a1 + 264) = *((_BYTE *)a2 + 264);
  v18 = (void **)(a1 + 272);
  if (*(char *)(a1 + 295) < 0)
    operator delete(*v18);
  v19 = a2[17];
  *(_QWORD *)(a1 + 288) = *((_QWORD *)a2 + 36);
  *(_OWORD *)v18 = v19;
  *((_BYTE *)a2 + 295) = 0;
  *((_BYTE *)a2 + 272) = 0;
  v20 = (void **)(a1 + 296);
  if (*(char *)(a1 + 319) < 0)
    operator delete(*v20);
  v21 = *(__int128 *)((char *)a2 + 296);
  *(_QWORD *)(a1 + 312) = *((_QWORD *)a2 + 39);
  *(_OWORD *)v20 = v21;
  *((_BYTE *)a2 + 319) = 0;
  *((_BYTE *)a2 + 296) = 0;
  *(_BYTE *)(a1 + 320) = *((_BYTE *)a2 + 320);
  std::vector<SipDialogParticipantIdentity>::__vdeallocate((void **)(a1 + 328));
  v22 = *((_QWORD *)a2 + 42);
  *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 41);
  *(_QWORD *)(a1 + 336) = v22;
  *(_QWORD *)(a1 + 344) = *((_QWORD *)a2 + 43);
  *((_QWORD *)a2 + 41) = 0;
  *((_QWORD *)a2 + 42) = 0;
  *((_QWORD *)a2 + 43) = 0;
  v23 = (void **)(a1 + 352);
  if (*(char *)(a1 + 375) < 0)
    operator delete(*v23);
  v24 = a2[22];
  *(_QWORD *)(a1 + 368) = *((_QWORD *)a2 + 46);
  *(_OWORD *)v23 = v24;
  *((_BYTE *)a2 + 375) = 0;
  *((_BYTE *)a2 + 352) = 0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(a1 + 376, (_QWORD *)a2 + 47);
  std::vector<unsigned char>::__move_assign(a1 + 400, (__n128 *)a2 + 25);
  *(_BYTE *)(a1 + 424) = *((_BYTE *)a2 + 424);
  v25 = (void **)(a1 + 432);
  if (*(char *)(a1 + 455) < 0)
    operator delete(*v25);
  v26 = a2[27];
  *(_QWORD *)(a1 + 448) = *((_QWORD *)a2 + 56);
  *(_OWORD *)v25 = v26;
  *((_BYTE *)a2 + 455) = 0;
  *((_BYTE *)a2 + 432) = 0;
  *(_BYTE *)(a1 + 456) = *((_BYTE *)a2 + 456);
  std::vector<SipDialogParticipantIdentity>::__vdeallocate((void **)(a1 + 464));
  *(_OWORD *)(a1 + 464) = a2[29];
  *(_QWORD *)(a1 + 480) = *((_QWORD *)a2 + 60);
  *((_QWORD *)a2 + 58) = 0;
  *((_QWORD *)a2 + 59) = 0;
  *((_QWORD *)a2 + 60) = 0;
  v27 = (void **)(a1 + 488);
  if (*(char *)(a1 + 511) < 0)
    operator delete(*v27);
  v28 = *(__int128 *)((char *)a2 + 488);
  *(_QWORD *)(a1 + 504) = *((_QWORD *)a2 + 63);
  *(_OWORD *)v27 = v28;
  *((_BYTE *)a2 + 511) = 0;
  *((_BYTE *)a2 + 488) = 0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(a1 + 512, (_QWORD *)a2 + 64);
  std::vector<unsigned char>::__move_assign(a1 + 536, (__n128 *)((char *)a2 + 536));
  *(_BYTE *)(a1 + 560) = *((_BYTE *)a2 + 560);
  v29 = (void **)(a1 + 568);
  if (*(char *)(a1 + 591) < 0)
    operator delete(*v29);
  v30 = *(__int128 *)((char *)a2 + 568);
  *(_QWORD *)(a1 + 584) = *((_QWORD *)a2 + 73);
  *(_OWORD *)v29 = v30;
  *((_BYTE *)a2 + 591) = 0;
  *((_BYTE *)a2 + 568) = 0;
  *(_BYTE *)(a1 + 592) = *((_BYTE *)a2 + 592);
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SipDialogInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x6D3A06D3A06D3BLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(600 * a2);
}

__int128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,SipDialogInfo *,SipDialogInfo *,SipDialogInfo *,0>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      SipDialogInfo::operator=(a3, v4);
      v4 = (__int128 *)((char *)v4 + 600);
      a3 += 600;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SipDialogInfo>,std::reverse_iterator<SipDialogInfo*>,std::reverse_iterator<SipDialogInfo*>,std::reverse_iterator<SipDialogInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  std::string *v12;

  v10 = 0;
  v11 = a7 - 600;
  while (a3 + v10 != a5)
  {
    v12 = (std::string *)(v11 + v10);
    v10 -= 600;
    SipDialogInfo::SipDialogInfo(v12, (const SipDialogInfo *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SipDialogInfo>,SipDialogInfo*,SipDialogInfo*,SipDialogInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      SipDialogInfo::SipDialogInfo((std::string *)(a4 + v7), (const SipDialogInfo *)(a2 + v7));
      v7 += 600;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1BF0EFDAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 600;
    do
    {
      SipDialogInfo::~SipDialogInfo((void **)(v4 + v2));
      v2 -= 600;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<SipDialogInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 600;
    SipDialogInfo::~SipDialogInfo((void **)(i - 600));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<SipDialogInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        SipDialogInfo::~SipDialogInfo(v4 - 75);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t _GLOBAL__sub_I_SipDialogEventClient_cpp()
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.dialog-event");
  ImsLogContainer::ImsLogContainer((uint64_t)&_stubDelegate, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  _stubDelegate = (uint64_t)&off_1E78DEB68;
  qword_1ED7042D0 = (uint64_t)&unk_1E78DEBD0;
  return __cxa_atexit((void (*)(void *))StubDialogEventDelegate::~StubDialogEventDelegate, &_stubDelegate, &dword_1BEDF4000);
}

void sub_1BF0EFF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AVCRTPSession<AVCAudioStream>::AVCRTPSession(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, ImsPrefs *a6, _QWORD *a7, __int128 *a8, dispatch_object_t *a9)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  void *__p[2];
  char v28;
  void *v29[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E78C63A8;
  v12 = (std::__shared_weak_count *)a3[1];
  v33 = *a3;
  v34 = v12;
  if (v12)
  {
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
  }
  v15 = a5[1];
  v31 = *a5;
  v32 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  MediaSessionDriver::MediaSessionDriver(a1 + 24, a2 + 1, &v33, a4, &v31, a6, a8, a9);
  v18 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  v21 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 24) = a2[8];
  *(_QWORD *)(a1 + 112) = a2[9];
  *(_QWORD *)(a1 + *(_QWORD *)(v21 - 24)) = a2[10];
  *(_BYTE *)(a1 + 477) = 0;
  *(_DWORD *)(a1 + 473) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 504) = *a7;
  v22 = a7[1];
  *(_QWORD *)(a1 + 512) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *(_BYTE *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  std::string::basic_string[abi:ne180100]<0>(v29, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v25 = ImsLogger::debug(ims::_logger, (uint64_t)v29, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"AVCRTPSession", 13);
  *(_BYTE *)(v25 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v25 + 17) = 0;
  if (v28 < 0)
    operator delete(__p[0]);
  if (v30 < 0)
    operator delete(v29[0]);
  return a1;
}

void sub_1BF0F0134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  uint64_t v24;
  MediaSessionDriver *v25;
  uint64_t *v26;
  void **v27;
  std::__shared_weak_count *v29;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v24 + 543) < 0)
    operator delete(*v27);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v24 + 504);

  MediaSessionDriver::~MediaSessionDriver(v25, v26);
  v29 = *(std::__shared_weak_count **)(v24 + 16);
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  _Unwind_Resume(a1);
}

uint64_t AVCRTPSession<AVCAudioStream>::~AVCRTPSession(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  MediaSessionDriver *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 24) = a2[8];
  v5 = (MediaSessionDriver *)(a1 + 24);
  *(_QWORD *)(a1 + 112) = a2[9];
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = a2[10];
  std::string::basic_string[abi:ne180100]<0>(v11, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v11, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"~AVCRTPSession", 14);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v10 < 0)
    operator delete(__p[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (*(char *)(a1 + 543) < 0)
    operator delete(*(void **)(a1 + 520));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 504);

  MediaSessionDriver::~MediaSessionDriver(v5, a2 + 1);
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  return a1;
}

uint64_t AVCRTPSession<AVCAudioStream>::terminate(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  char *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  char *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void *v36;
  std::__shared_weak_count *v37;
  _QWORD v38[6];
  std::__shared_weak_count *v39;
  char *v40;
  std::__shared_weak_count *v41;
  char *v42;
  std::__shared_weak_count *v43;
  char v44;
  void *v45;
  std::__shared_weak_count *v46;
  char v47;

  std::string::basic_string[abi:ne180100]<0>(&v45, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(&v42, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v45, (uint64_t)&v42);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"terminate", 9);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v2 + 17) = 0;
  v3 = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v44 < 0)
    operator delete(v42);
  if (v47 < 0)
    operator delete(v45);
  v4 = (void *)MEMORY[0x1C3B876AC](v3);
  if (*(_BYTE *)(a1 + 473))
  {
    *(_WORD *)(a1 + 475) = 0;
    v45 = 0;
    v46 = 0;
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v45);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 104))(a1 + 24);
    RTPSharedPointerBase::getShared<AVCRTPSession<AVCAudioStream>>((void **)&v42, a1);
    if (v5 == 2)
      v6 = 2;
    else
      v6 = 3;
    v7 = v42 + 24;
    if (!v42)
      v7 = 0;
    v40 = v7;
    v41 = v43;
    v42 = 0;
    v43 = 0;
    v38[0] = MEMORY[0x1E0C809B0];
    v38[1] = 3321888768;
    v38[2] = ___ZN13AVCRTPSessionI14AVCAudioStreamE9terminateEb_block_invoke;
    v38[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
    v38[4] = a1;
    v38[5] = v45;
    v39 = v46;
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    MediaSessionDriver::startTimerForRequest(a1 + 24, v6, (uint64_t *)&v40, v38);
    v10 = v41;
    if (v41)
    {
      v11 = (unint64_t *)&v41->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v43;
    if (v43)
    {
      v14 = (unint64_t *)&v43->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    objc_msgSend(*(id *)(a1 + 480), "stop");
    v16 = v39;
    if (v39)
    {
      v17 = (unint64_t *)&v39->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = v46;
    if (v46)
    {
      v20 = (unint64_t *)&v46->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  v45 = 0;
  v46 = 0;
  RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v45);
  v42 = 0;
  v43 = 0;
  v22 = *(std::__shared_weak_count **)(a1 + 40);
  if (v22)
  {
    v43 = std::__shared_weak_count::lock(v22);
    if (v43)
    {
      v23 = *(char **)(a1 + 32);
      v42 = v23;
      if (v23)
      {
        v36 = v45;
        v37 = v46;
        if (v46)
        {
          v24 = (unint64_t *)&v46->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        (*(void (**)(char *, void **, _QWORD))(*(_QWORD *)v23 + 8))(v23, &v36, 0);
        v26 = v37;
        if (v37)
        {
          v27 = (unint64_t *)&v37->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
      }
    }
  }
  v29 = v43;
  if (v43)
  {
    v30 = (unint64_t *)&v43->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v46;
  if (v46)
  {
    v33 = (unint64_t *)&v46->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  objc_autoreleasePoolPop(v4);
  return 1;
}

void sub_1BF0F0730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 80);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 56);
  _Unwind_Resume(a1);
}

void RTPSharedPointerBase::getShared<AVCRTPSession<AVCAudioStream>>(void **p_lpsrc, uint64_t a2)
{
  void *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *lpsrc;
  std::__shared_weak_count *v9;

  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, (_QWORD *)(a2 + 8));
  if (lpsrc)
  {
    if (v3)
    {
      v4 = v9;
      *p_lpsrc = v3;
      p_lpsrc[1] = v4;
      p_lpsrc = &lpsrc;
    }
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void ___ZN13AVCRTPSessionI14AVCAudioStreamE9terminateEb_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = a1[4];
  v16 = 0;
  v17 = 0;
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v17 = std::__shared_weak_count::lock(v3);
    if (v17)
    {
      v4 = *(_QWORD *)(v2 + 32);
      v16 = v4;
      if (v4)
      {
        v5 = (std::__shared_weak_count *)a1[6];
        v14 = a1[5];
        v15 = v5;
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 32))(v4, &v14, 9);
        v8 = v15;
        if (v15)
        {
          v9 = (unint64_t *)&v15->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
    }
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF0F094C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 40);
}

uint64_t `non-virtual thunk to'AVCRTPSession<AVCAudioStream>::terminate(uint64_t a1)
{
  return AVCRTPSession<AVCAudioStream>::terminate(a1 - 24);
}

uint64_t AVCRTPSession<AVCAudioStream>::start(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count **v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count **v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  BOOL v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  BOOL v30;
  _QWORD *v31;
  _BOOL4 v32;
  void *v33;
  void *v34;
  uint64_t v35;
  _BOOL4 isWifi;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  BOOL v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  NSObject *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *size;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;
  void *v62;
  void *v63;
  uint64_t v64;
  id v65;
  const char *v66;
  size_t v67;
  std::__shared_weak_count *v68;
  std::string::size_type v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  std::string::size_type v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  uint64_t v83;
  int v84;
  std::string::size_type v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  _QWORD v100[6];
  std::__shared_weak_count *v101;
  std::string::size_type v102;
  std::string::size_type v103;
  void *v104;
  std::__shared_weak_count *v105;
  void *v106;
  std::__shared_weak_count *v107;
  id v108;
  _QWORD block[5];
  __int128 v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count *v112;
  std::string v113[2];
  __int128 v114;
  uint64_t v115;
  std::__shared_weak_count **v116;
  std::__shared_weak_count *v117;
  char v118;

  std::string::basic_string[abi:ne180100]<0>(v113, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(&v116, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v113, (uint64_t)&v116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"start", 5);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v2 + 17) = 0;
  v3 = a1 + 24;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v2 + 17) = 0;
  v4 = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v118 < 0)
    operator delete(v116);
  if (SHIBYTE(v113[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113[0].__r_.__value_.__l.__data_);
  v5 = (void *)MEMORY[0x1C3B876AC](v4);
  if (*(_QWORD *)(a1 + 488))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 104))(a1 + 24) != 2)
      goto LABEL_80;
    v116 = 0;
    v117 = 0;
    RTPManager::sdpSessionForSession(*(RTPManager **)(a1 + 56), *(_QWORD *)(a1 + 48), &v116);
    v6 = v116;
    if (!v116)
      goto LABEL_75;
    v7 = v116[16];
    if (!v7)
      goto LABEL_75;
    v8 = std::__shared_weak_count::lock(v7);
    if (!v8)
      goto LABEL_75;
    v9 = v8;
    v10 = v6[15];
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
    }
    if (!v10)
    {
LABEL_75:
      v45 = v117;
      if (v117)
      {
        v46 = (unint64_t *)&v117->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
LABEL_80:
      v48 = *(void **)(a1 + 488);
      if (v48)
        goto LABEL_99;
      goto LABEL_81;
    }
    v115 = 0;
    v114 = 0u;
    memset(v113, 0, sizeof(v113));
    v13 = v116;
    v111 = 0;
    v112 = 0;
    v14 = v116[16];
    if (v14)
    {
      v15 = std::__shared_weak_count::lock(v14);
      v112 = v15;
      if (v15)
      {
        v16 = v13[15];
        v111 = v16;
LABEL_20:
        if (SHIBYTE(v16[131].__shared_owners_) < 0)
          std::string::__init_copy_ctor_external(v113, (const std::string::value_type *)v16[130].__shared_weak_owners_, (std::string::size_type)v16[131].__vftable);
        else
          v113[0] = *(std::string *)((char *)v16 + 3136);
        if (SHIBYTE(v16[132].__shared_owners_) < 0)
          std::string::__init_copy_ctor_external(&v113[1], (const std::string::value_type *)v16[131].__shared_weak_owners_, (std::string::size_type)v16[132].__vftable);
        else
          v113[1] = *(std::string *)((char *)v16 + 3160);
        v114 = *(_OWORD *)&v16[132].__shared_weak_owners_;
        LOBYTE(v115) = v16[133].__shared_owners_;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v19 = *(_QWORD *)(a1 + 48);
        v20 = *(_QWORD *)(a1 + 56);
        v21 = *(_QWORD **)(v20 + 232);
        if (v21)
        {
          v22 = (_QWORD *)(v20 + 232);
          do
          {
            v23 = v21[4];
            v24 = v23 >= v19;
            if (v23 >= v19)
              v25 = v21;
            else
              v25 = v21 + 1;
            if (v24)
              v22 = v21;
            v21 = (_QWORD *)*v25;
          }
          while (*v25);
          if (v22 != (_QWORD *)(v20 + 232) && v22[4] <= v19)
            goto LABEL_56;
        }
        v26 = *(_QWORD **)(v20 + 256);
        if (!v26)
          goto LABEL_53;
        v27 = (_QWORD *)(v20 + 256);
        v28 = (_QWORD *)(v20 + 256);
        do
        {
          v29 = v26[4];
          v30 = v29 >= v19;
          if (v29 >= v19)
            v31 = v26;
          else
            v31 = v26 + 1;
          if (v30)
            v28 = v26;
          v26 = (_QWORD *)*v31;
        }
        while (*v31);
        if (v28 != v27 && v28[4] <= v19)
        {
LABEL_56:
          isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)v113);
          objc_msgSend(*(id *)(a1 + 488), "audio");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          v34 = v33;
          if (isWifi)
            v35 = 2;
          else
            v35 = 9;
        }
        else
        {
LABEL_53:
          v32 = ims::AccessNetwork::isWifi((ims::AccessNetwork *)v113);
          objc_msgSend(*(id *)(a1 + 488), "audio");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          v34 = v33;
          if (v32)
            v35 = 0;
          else
            v35 = 6;
        }
        objc_msgSend(v33, "setAudioStreamMode:", v35);

        objc_msgSend(*(id *)(a1 + 488), "setJitterBufferMode:", ims::AccessNetwork::isWifi((ims::AccessNetwork *)v113));
        v37 = *(_QWORD *)(a1 + 56);
        v38 = (_QWORD *)(v37 + 256);
        v39 = *(_QWORD **)(v37 + 256);
        if (!v39)
          goto LABEL_70;
        v40 = *(_QWORD *)(a1 + 48);
        v41 = (_QWORD *)(v37 + 256);
        do
        {
          v42 = v39[4];
          v43 = v42 >= v40;
          if (v42 >= v40)
            v44 = v39;
          else
            v44 = v39 + 1;
          if (v43)
            v41 = v39;
          v39 = (_QWORD *)*v44;
        }
        while (*v44);
        if (v41 == v38 || v41[4] > v40)
LABEL_70:
          v41 = v38;
        objc_msgSend(*(id *)(a1 + 488), "setOutOfProcessCodecsEnabled:", v41 != v38);
        if (SHIBYTE(v113[1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v113[1].__r_.__value_.__l.__data_);
        if (SHIBYTE(v113[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v113[0].__r_.__value_.__l.__data_);
        goto LABEL_75;
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 0;
    goto LABEL_20;
  }
LABEL_81:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 104))(a1 + 24) == 4)
  {
    std::string::basic_string[abi:ne180100]<0>(v113, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(&v116, (char *)&str_2_23);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v49 = ImsLogger::warn(ims::_logger, (uint64_t)v113, (uint64_t)&v116);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v49 + 8), (uint64_t)"Text media session is not configured, possibly due to incomplete upgrade.  Waiting for upper layers to generate new offer.", 122);
    *(_BYTE *)(v49 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v49 + 17) = 0;
    if (v118 < 0)
      operator delete(v116);
    if (SHIBYTE(v113[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v113[0].__r_.__value_.__l.__data_);
    *(_OWORD *)&v113[0].__r_.__value_.__l.__data_ = 0uLL;
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, (void **)&v113[0].__r_.__value_.__l.__data_);
    v50 = *(NSObject **)(a1 + 72);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3321888768;
    block[2] = ___ZN13AVCRTPSessionI14AVCAudioStreamE5startEb_block_invoke;
    block[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
    block[4] = a1;
    v110 = *(_OWORD *)&v113[0].__r_.__value_.__l.__data_;
    if (v113[0].__r_.__value_.__l.__size_)
    {
      v51 = (unint64_t *)(v113[0].__r_.__value_.__l.__size_ + 8);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    dispatch_async(v50, block);
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
    if (*((_QWORD *)&v110 + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    size = (std::__shared_weak_count *)v113[0].__r_.__value_.__l.__size_;
    if (v113[0].__r_.__value_.__l.__size_)
    {
      v57 = (unint64_t *)(v113[0].__r_.__value_.__l.__size_ + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      goto LABEL_166;
    }
    goto LABEL_168;
  }
  v48 = *(void **)(a1 + 488);
LABEL_99:
  objc_storeStrong((id *)(a1 + 496), v48);
  v59 = *(_QWORD *)(a1 + 496);
  if (!v59)
  {
    std::string::basic_string[abi:ne180100]<0>(v113, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(&v116, (char *)&str_2_23);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v76 = ImsLogger::error(ims::_logger, (uint64_t)v113, (uint64_t)&v116);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v76 + 8), (uint64_t)"_activeAvcSessionConfig is null", 31);
    *(_BYTE *)(v76 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v76 + 64))(v76, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v76 + 17) = 0;
    if (v118 < 0)
      operator delete(v116);
    if (SHIBYTE(v113[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v113[0].__r_.__value_.__l.__data_);
    *(_OWORD *)&v113[0].__r_.__value_.__l.__data_ = 0uLL;
    v77 = *(std::__shared_weak_count **)(a1 + 40);
    if (v77)
    {
      v113[0].__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v77);
      if (v113[0].__r_.__value_.__l.__size_)
      {
        v78 = *(_QWORD *)(a1 + 32);
        v113[0].__r_.__value_.__r.__words[0] = v78;
        if (v78)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v106);
          (*(void (**)(std::string::size_type, void **, uint64_t))(*(_QWORD *)v78 + 24))(v78, &v106, 9);
          v79 = v107;
          if (v107)
          {
            v80 = (unint64_t *)&v107->__shared_owners_;
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
        }
      }
    }
    size = (std::__shared_weak_count *)v113[0].__r_.__value_.__l.__size_;
    if (!v113[0].__r_.__value_.__l.__size_)
      goto LABEL_168;
    v82 = (unint64_t *)(v113[0].__r_.__value_.__l.__size_ + 8);
    do
      v58 = __ldaxr(v82);
    while (__stlxr(v58 - 1, v82));
LABEL_166:
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    goto LABEL_168;
  }
  v60 = *(void **)(a1 + 480);
  v108 = 0;
  objc_msgSend(v60, "configure:error:", v59, &v108);
  v61 = v108;
  if (v61)
  {
    v62 = v61;
    objc_msgSend(v61, "description");
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    std::string::basic_string[abi:ne180100]<0>(v113, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(&v116, (char *)&str_2_23);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v64 = ImsLogger::error(ims::_logger, (uint64_t)v113, (uint64_t)&v116);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v64 + 8), (uint64_t)"Session config error: ", 22);
    *(_BYTE *)(v64 + 17) = 0;
    v65 = objc_retainAutorelease(v63);
    v66 = (const char *)objc_msgSend(v65, "UTF8String");
    v67 = strlen(v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v64 + 8), (uint64_t)v66, v67);
    *(_BYTE *)(v64 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v64 + 64))(v64, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v64 + 17) = 0;
    if (v118 < 0)
      operator delete(v116);
    if (SHIBYTE(v113[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v113[0].__r_.__value_.__l.__data_);
    *(_OWORD *)&v113[0].__r_.__value_.__l.__data_ = 0uLL;
    v68 = *(std::__shared_weak_count **)(a1 + 40);
    if (v68)
    {
      v113[0].__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v68);
      if (v113[0].__r_.__value_.__l.__size_)
      {
        v69 = *(_QWORD *)(a1 + 32);
        v113[0].__r_.__value_.__r.__words[0] = v69;
        if (v69)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v104);
          (*(void (**)(std::string::size_type, void **, uint64_t))(*(_QWORD *)v69 + 24))(v69, &v104, 9);
          v70 = v105;
          if (v105)
          {
            v71 = (unint64_t *)&v105->__shared_owners_;
            do
              v72 = __ldaxr(v71);
            while (__stlxr(v72 - 1, v71));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
        }
      }
    }
    v73 = (std::__shared_weak_count *)v113[0].__r_.__value_.__l.__size_;
    if (v113[0].__r_.__value_.__l.__size_)
    {
      v74 = (unint64_t *)(v113[0].__r_.__value_.__l.__size_ + 8);
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }

    goto LABEL_168;
  }
  std::string::basic_string[abi:ne180100]<0>(v113, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(&v116, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v83 = ImsLogger::debug(ims::_logger, (uint64_t)v113, (uint64_t)&v116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v83 + 8), (uint64_t)"Clear reconfigureNeeded", 23);
  *(_BYTE *)(v83 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v83 + 64))(v83, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v83 + 17) = 0;
  if (v118 < 0)
    operator delete(v116);
  if (SHIBYTE(v113[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113[0].__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 476) = 0;
  v111 = 0;
  v112 = 0;
  RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, (void **)&v111);
  v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 104))(a1 + 24);
  RTPSharedPointerBase::getShared<AVCRTPSession<AVCAudioStream>>((void **)&v113[0].__r_.__value_.__l.__data_, a1);
  v85 = v113[0].__r_.__value_.__r.__words[0] + 24;
  if (!v113[0].__r_.__value_.__r.__words[0])
    v85 = 0;
  v102 = v85;
  v103 = v113[0].__r_.__value_.__l.__size_;
  *(_OWORD *)&v113[0].__r_.__value_.__l.__data_ = 0uLL;
  v100[0] = MEMORY[0x1E0C809B0];
  v100[1] = 3321888768;
  v100[2] = ___ZN13AVCRTPSessionI14AVCAudioStreamE5startEb_block_invoke_2;
  v100[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
  v100[4] = a1;
  v100[5] = v111;
  v101 = v112;
  if (v112)
  {
    v86 = (unint64_t *)&v112->__shared_owners_;
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
  }
  MediaSessionDriver::startTimerForRequest(a1 + 24, v84 != 2, (uint64_t *)&v102, v100);
  v88 = (std::__shared_weak_count *)v103;
  if (v103)
  {
    v89 = (unint64_t *)(v103 + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = (std::__shared_weak_count *)v113[0].__r_.__value_.__l.__size_;
  if (v113[0].__r_.__value_.__l.__size_)
  {
    v92 = (unint64_t *)(v113[0].__r_.__value_.__l.__size_ + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v113, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(&v116, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v94 = ImsLogger::debug(ims::_logger, (uint64_t)v113, (uint64_t)&v116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v94 + 8), (uint64_t)"Starting session ", 17);
  *(_BYTE *)(v94 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 176))(a1 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v94 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v94 + 64))(v94, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v94 + 17) = 0;
  if (v118 < 0)
    operator delete(v116);
  if (SHIBYTE(v113[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113[0].__r_.__value_.__l.__data_);
  objc_msgSend(*(id *)(a1 + 480), "start");
  v95 = v101;
  if (v101)
  {
    v96 = (unint64_t *)&v101->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  size = v112;
  if (v112)
  {
    v98 = (unint64_t *)&v112->__shared_owners_;
    do
      v58 = __ldaxr(v98);
    while (__stlxr(v58 - 1, v98));
    goto LABEL_166;
  }
LABEL_168:
  objc_autoreleasePoolPop(v5);
  return 1;
}

void sub_1BF0F1594(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  ims::AccessNetwork::~AccessNetwork((void **)(v2 - 176));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 104);
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTPSessionI14AVCAudioStreamE5startEb_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = a1[4];
  v16 = 0;
  v17 = 0;
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v17 = std::__shared_weak_count::lock(v3);
    if (v17)
    {
      v4 = *(_QWORD *)(v2 + 32);
      v16 = v4;
      if (v4)
      {
        v5 = (std::__shared_weak_count *)a1[6];
        v14 = a1[5];
        v15 = v5;
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 24))(v4, &v14, 2);
        v8 = v15;
        if (v15)
        {
          v9 = (unint64_t *)&v15->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
    }
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF0F1838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTPSessionI14AVCAudioStreamE5startEb_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = a1[4];
  v16 = 0;
  v17 = 0;
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v17 = std::__shared_weak_count::lock(v3);
    if (v17)
    {
      v4 = *(_QWORD *)(v2 + 32);
      v16 = v4;
      if (v4)
      {
        v5 = (std::__shared_weak_count *)a1[6];
        v14 = a1[5];
        v15 = v5;
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 24))(v4, &v14, 9);
        v8 = v15;
        if (v15)
        {
          v9 = (unint64_t *)&v15->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
    }
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF0F1944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'AVCRTPSession<AVCAudioStream>::start(uint64_t a1)
{
  return AVCRTPSession<AVCAudioStream>::start(a1 - 24);
}

uint64_t AVCRTPSession<AVCAudioStream>::stop(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v26[6];
  std::__shared_weak_count *v27;
  char *v28;
  std::__shared_weak_count *v29;
  void *__p;
  std::__shared_weak_count *v31;
  char v32;
  void *v33;
  std::__shared_weak_count *v34;
  char v35;

  std::string::basic_string[abi:ne180100]<0>(&v33, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v33, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"stop", 4);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v2 + 17) = 0;
  v3 = a1 + 24;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v2 + 17) = 0;
  v4 = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v32 < 0)
    operator delete(__p);
  if (v35 < 0)
    operator delete(v33);
  v5 = (void *)MEMORY[0x1C3B876AC](v4);
  if (*(_BYTE *)(a1 + 473))
  {
    std::string::basic_string[abi:ne180100]<0>(&v33, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_2_23);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v33, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Stopping session ", 17);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 176))(a1 + 24);
    std::ostream::operator<<();
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (v32 < 0)
      operator delete(__p);
    if (v35 < 0)
      operator delete(v33);
    *(_WORD *)(a1 + 475) = 0;
    v33 = 0;
    v34 = 0;
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v33);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 104))(a1 + 24);
    RTPSharedPointerBase::getShared<AVCRTPSession<AVCAudioStream>>(&__p, a1);
    if (v7 == 2)
      v8 = 2;
    else
      v8 = 3;
    v9 = (char *)__p + 24;
    if (!__p)
      v9 = 0;
    v28 = v9;
    v29 = v31;
    __p = 0;
    v31 = 0;
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3321888768;
    v26[2] = ___ZN13AVCRTPSessionI14AVCAudioStreamE4stopEb_block_invoke;
    v26[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
    v26[4] = a1;
    v26[5] = v33;
    v27 = v34;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    MediaSessionDriver::startTimerForRequest(a1 + 24, v8, (uint64_t *)&v28, v26);
    v12 = v29;
    if (v29)
    {
      v13 = (unint64_t *)&v29->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = v31;
    if (v31)
    {
      v16 = (unint64_t *)&v31->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    objc_msgSend(*(id *)(a1 + 480), "stop");
    v18 = v27;
    if (v27)
    {
      v19 = (unint64_t *)&v27->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v34;
    if (v34)
    {
      v22 = (unint64_t *)&v34->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v33, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_2_23);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v24 = ImsLogger::warn(ims::_logger, (uint64_t)&v33, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"Stop called on session ", 23);
    *(_BYTE *)(v24 + 17) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 176))(v3);
    std::ostream::operator<<();
    *(_BYTE *)(v24 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)" which isn't active. Ignoring.", 30);
    *(_BYTE *)(v24 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v24 + 17) = 0;
    if (v32 < 0)
      operator delete(__p);
    if (v35 < 0)
      operator delete(v33);
  }
  objc_autoreleasePoolPop(v5);
  return 1;
}

void sub_1BF0F1DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (*(char *)(v24 - 33) < 0)
    operator delete(*(void **)(v24 - 56));
  _Unwind_Resume(exception_object);
}

void ___ZN13AVCRTPSessionI14AVCAudioStreamE4stopEb_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = a1[4];
  v16 = 0;
  v17 = 0;
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v17 = std::__shared_weak_count::lock(v3);
    if (v17)
    {
      v4 = *(_QWORD *)(v2 + 32);
      v16 = v4;
      if (v4)
      {
        v5 = (std::__shared_weak_count *)a1[6];
        v14 = a1[5];
        v15 = v5;
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 32))(v4, &v14, 9);
        v8 = v15;
        if (v15)
        {
          v9 = (unint64_t *)&v15->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
    }
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF0F1F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'AVCRTPSession<AVCAudioStream>::stop(uint64_t a1)
{
  return AVCRTPSession<AVCAudioStream>::stop(a1 - 24);
}

uint64_t AVCRTPSession<AVCAudioStream>::setDirection(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t *v35;
  char v37;
  int v38;
  uint64_t v39;
  char *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  int v53;
  uint64_t v54;
  char *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  uint64_t v68;
  char *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  void *v82;
  std::__shared_weak_count *v83;
  _QWORD v84[6];
  std::__shared_weak_count *v85;
  uint64_t v86[2];
  _QWORD v87[6];
  std::__shared_weak_count *v88;
  char *v89;
  std::__shared_weak_count *v90;
  void *v91;
  std::__shared_weak_count *v92;
  _QWORD v93[6];
  std::__shared_weak_count *v94;
  char *v95;
  std::__shared_weak_count *v96;
  void *v97;
  std::__shared_weak_count *v98;
  std::string v99;
  std::string v100;
  char *v101;
  uint64_t v102;
  char v103;
  void *v104;
  std::__shared_weak_count *v105;
  char v106;

  std::string::basic_string[abi:ne180100]<0>(&v104, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(&v101, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v104, (uint64_t)&v101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"setDirection", 12);
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v4 + 17) = 0;
  v5 = a1 + 24;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (v103 < 0)
    operator delete(v101);
  if (v106 < 0)
    operator delete(v104);
  v6 = *a2;
  if (*a2 == 2)
  {
    v7 = 0;
    v8 = 2;
  }
  else if (v6 == 4)
  {
    v7 = 0;
    v8 = 0;
  }
  else if (v6 == 3)
  {
    v7 = 0;
    v8 = 1;
  }
  else
  {
    v7 = 1;
    v8 = 3;
  }
  v9 = objc_msgSend(*(id *)(a1 + 480), "direction");
  *(_DWORD *)(a1 + 248) = *a2;
  std::string::basic_string[abi:ne180100]<0>(&v104, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(&v101, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::debug(ims::_logger, (uint64_t)&v104, (uint64_t)&v101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Setting direction to ", 21);
  *(_BYTE *)(v10 + 17) = 0;
  ims::toString<MediaDirection>((unsigned int *)(a1 + 248), &v99);
  LoggableString::LoggableString(&v100, &v99);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v10 + 40))(v10, &v100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" for session ", 13);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 176))(a1 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  if (v103 < 0)
    operator delete(v101);
  if (v106 < 0)
    operator delete(v104);
  if (!*(_BYTE *)(a1 + 473))
  {
    if (*(_QWORD *)(a1 + 488))
    {
      std::string::basic_string[abi:ne180100]<0>(&v104, "avc.rtp.session");
      std::string::basic_string[abi:ne180100]<0>(&v101, (char *)&str_2_23);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v19 = ImsLogger::debug(ims::_logger, (uint64_t)&v104, (uint64_t)&v101);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"Setting direction on session configuration for session ", 55);
      *(_BYTE *)(v19 + 17) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 176))(a1 + 24);
      std::ostream::operator<<();
      *(_BYTE *)(v19 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v19 + 17) = 0;
      if (v103 < 0)
        operator delete(v101);
      if (v106 < 0)
        operator delete(v104);
      objc_msgSend(*(id *)(a1 + 488), "setDirection:", v8);
      objc_msgSend(*(id *)(a1 + 488), "setRtpTimeOutEnabled:", *(_DWORD *)(a1 + 248) == 1);
      objc_msgSend(*(id *)(a1 + 488), "setRtcpTimeOutEnabled:", *(_DWORD *)(a1 + 248) != 1);
      v20 = *(_DWORD *)(a1 + 248) != 1 || *(_DWORD *)(a1 + 424) != 0;
      objc_msgSend(*(id *)(a1 + 488), "setRtcpEnabled:", v20);
      v29 = 428;
      if (*(_DWORD *)(a1 + 248) == 1)
        v29 = 424;
      LODWORD(v28) = *(_DWORD *)(a1 + v29);
      objc_msgSend(*(id *)(a1 + 488), "setRtcpSendInterval:", (double)v28);
    }
    v104 = 0;
    v105 = 0;
    v30 = *(std::__shared_weak_count **)(a1 + 40);
    if (v30)
    {
      v105 = std::__shared_weak_count::lock(v30);
      if (v105)
      {
        v31 = *(void **)(a1 + 32);
        v104 = v31;
        if (v31)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v82);
          (*(void (**)(void *, void **, _QWORD))(*(_QWORD *)v31 + 32))(v31, &v82, 0);
          v32 = v83;
          if (v83)
          {
            p_shared_owners = (unint64_t *)&v83->__shared_owners_;
            do
              v34 = __ldaxr(p_shared_owners);
            while (__stlxr(v34 - 1, p_shared_owners));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
        }
      }
    }
    v16 = v105;
    if (!v105)
      return 1;
    v35 = (unint64_t *)&v105->__shared_owners_;
    do
      v18 = __ldaxr(v35);
    while (__stlxr(v18 - 1, v35));
    goto LABEL_74;
  }
  if (v8 != objc_msgSend(*(id *)(a1 + 480), "direction"))
  {
    v21 = objc_msgSend(*(id *)(a1 + 480), "direction");
    objc_msgSend(*(id *)(a1 + 480), "setDirection:", v8);
    objc_msgSend(*(id *)(a1 + 488), "setDirection:", v8);
    if (v21)
    {
      if (*a2 == 4)
      {
        objc_msgSend(*(id *)(a1 + 480), "pause");
        return 1;
      }
      v37 = v7 ^ 1;
      if (v9 == 3)
        v37 = 1;
      if ((v37 & 1) != 0)
      {
        v101 = 0;
        v102 = 0;
        RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, (void **)&v101);
        v68 = *(_QWORD *)(a1 + 56);
        LoggableString::LoggableString((LoggableString *)&v104, "avc.rtp.session");
        v69 = v101;
        v70 = (std::__shared_weak_count *)v102;
        v86[0] = (uint64_t)v101;
        v86[1] = v102;
        if (v102)
        {
          v71 = (unint64_t *)(v102 + 8);
          do
            v72 = __ldxr(v71);
          while (__stxr(v72 + 1, v71));
          v73 = v102;
        }
        else
        {
          v73 = 0;
        }
        v84[0] = MEMORY[0x1E0C809B0];
        v84[1] = 3321888768;
        v84[2] = ___ZN13AVCRTPSessionI14AVCAudioStreamE12setDirectionERK14MediaDirectionb_block_invoke_3;
        v84[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
        v84[4] = a1;
        v84[5] = v69;
        v85 = (std::__shared_weak_count *)v73;
        if (v73)
        {
          v74 = (unint64_t *)(v73 + 8);
          do
            v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
        }
        RTPManager::performBlock(v68, (uint64_t)&v104, v86, (uint64_t)v84);
        if (v70)
        {
          v76 = (unint64_t *)&v70->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        if (v106 < 0)
          operator delete(v104);
        v78 = v85;
        if (v85)
        {
          v79 = (unint64_t *)&v85->__shared_owners_;
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        v16 = (std::__shared_weak_count *)v102;
        if (!v102)
          return 1;
        v81 = (unint64_t *)(v102 + 8);
        do
          v18 = __ldaxr(v81);
        while (__stlxr(v18 - 1, v81));
      }
      else
      {
        *(_BYTE *)(a1 + 476) = 1;
        v104 = 0;
        v105 = 0;
        RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v104);
        v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 104))(a1 + 24);
        RTPSharedPointerBase::getShared<AVCRTPSession<AVCAudioStream>>((void **)&v101, a1);
        if (v38 == 2)
          v39 = 2;
        else
          v39 = 3;
        v40 = v101 + 24;
        if (!v101)
          v40 = 0;
        v89 = v40;
        v90 = (std::__shared_weak_count *)v102;
        v101 = 0;
        v102 = 0;
        v87[0] = MEMORY[0x1E0C809B0];
        v87[1] = 3321888768;
        v87[2] = ___ZN13AVCRTPSessionI14AVCAudioStreamE12setDirectionERK14MediaDirectionb_block_invoke_2;
        v87[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
        v87[4] = a1;
        v87[5] = v104;
        v88 = v105;
        if (v105)
        {
          v41 = (unint64_t *)&v105->__shared_owners_;
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        MediaSessionDriver::startTimerForRequest(a1 + 24, v39, (uint64_t *)&v89, v87);
        v43 = v90;
        if (v90)
        {
          v44 = (unint64_t *)&v90->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v46 = (std::__shared_weak_count *)v102;
        if (v102)
        {
          v47 = (unint64_t *)(v102 + 8);
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        objc_msgSend(*(id *)(a1 + 480), "stop");
        v49 = v88;
        if (v88)
        {
          v50 = (unint64_t *)&v88->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        v16 = v105;
        if (!v105)
          return 1;
        v52 = (unint64_t *)&v105->__shared_owners_;
        do
          v18 = __ldaxr(v52);
        while (__stlxr(v18 - 1, v52));
      }
    }
    else
    {
      if ((unint64_t)AVCRTPStackController::audioSessionCount(*(AVCRTPStackController **)(a1 + 504)) >= 2)
        *(_BYTE *)(a1 + 476) = 1;
      if (*a2 == 4)
      {
        v104 = 0;
        v105 = 0;
        v22 = *(std::__shared_weak_count **)(a1 + 40);
        if (v22)
        {
          v105 = std::__shared_weak_count::lock(v22);
          if (v105)
          {
            v23 = *(void **)(a1 + 32);
            v104 = v23;
            if (v23)
            {
              RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v91);
              (*(void (**)(void *, void **, _QWORD))(*(_QWORD *)v23 + 24))(v23, &v91, 0);
              v24 = v92;
              if (v92)
              {
                v25 = (unint64_t *)&v92->__shared_owners_;
                do
                  v26 = __ldaxr(v25);
                while (__stlxr(v26 - 1, v25));
                if (!v26)
                {
                  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                  std::__shared_weak_count::__release_weak(v24);
                }
              }
            }
          }
        }
        v16 = v105;
        if (!v105)
          return 1;
        v27 = (unint64_t *)&v105->__shared_owners_;
        do
          v18 = __ldaxr(v27);
        while (__stlxr(v18 - 1, v27));
      }
      else
      {
        if (!*(_BYTE *)(a1 + 476))
        {
          objc_msgSend(*(id *)(a1 + 480), "resume");
          return 1;
        }
        v104 = 0;
        v105 = 0;
        RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v104);
        v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 104))(a1 + 24);
        RTPSharedPointerBase::getShared<AVCRTPSession<AVCAudioStream>>((void **)&v101, a1);
        if (v53 == 2)
          v54 = 2;
        else
          v54 = 3;
        v55 = v101 + 24;
        if (!v101)
          v55 = 0;
        v95 = v55;
        v96 = (std::__shared_weak_count *)v102;
        v101 = 0;
        v102 = 0;
        v93[0] = MEMORY[0x1E0C809B0];
        v93[1] = 3321888768;
        v93[2] = ___ZN13AVCRTPSessionI14AVCAudioStreamE12setDirectionERK14MediaDirectionb_block_invoke;
        v93[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
        v93[4] = a1;
        v93[5] = v104;
        v94 = v105;
        if (v105)
        {
          v56 = (unint64_t *)&v105->__shared_owners_;
          do
            v57 = __ldxr(v56);
          while (__stxr(v57 + 1, v56));
        }
        MediaSessionDriver::startTimerForRequest(a1 + 24, v54, (uint64_t *)&v95, v93);
        v58 = v96;
        if (v96)
        {
          v59 = (unint64_t *)&v96->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v61 = (std::__shared_weak_count *)v102;
        if (v102)
        {
          v62 = (unint64_t *)(v102 + 8);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        objc_msgSend(*(id *)(a1 + 480), "stop");
        v64 = v94;
        if (v94)
        {
          v65 = (unint64_t *)&v94->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        v16 = v105;
        if (!v105)
          return 1;
        v67 = (unint64_t *)&v105->__shared_owners_;
        do
          v18 = __ldaxr(v67);
        while (__stlxr(v18 - 1, v67));
      }
    }
LABEL_74:
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    return 1;
  }
  v104 = 0;
  v105 = 0;
  v11 = *(std::__shared_weak_count **)(a1 + 40);
  if (v11)
  {
    v105 = std::__shared_weak_count::lock(v11);
    if (v105)
    {
      v12 = *(void **)(a1 + 32);
      v104 = v12;
      if (v12)
      {
        RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v97);
        (*(void (**)(void *, void **, _QWORD))(*(_QWORD *)v12 + 24))(v12, &v97, 0);
        v13 = v98;
        if (v98)
        {
          v14 = (unint64_t *)&v98->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
    }
  }
  v16 = v105;
  if (v105)
  {
    v17 = (unint64_t *)&v105->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    goto LABEL_74;
  }
  return 1;
}

void sub_1BF0F2A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v30 - 104);
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTPSessionI14AVCAudioStreamE12setDirectionERK14MediaDirectionb_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = a1[4];
  v16 = 0;
  v17 = 0;
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v17 = std::__shared_weak_count::lock(v3);
    if (v17)
    {
      v4 = *(_QWORD *)(v2 + 32);
      v16 = v4;
      if (v4)
      {
        v5 = (std::__shared_weak_count *)a1[6];
        v14 = a1[5];
        v15 = v5;
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 32))(v4, &v14, 9);
        v8 = v15;
        if (v15)
        {
          v9 = (unint64_t *)&v15->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
    }
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF0F2CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTPSessionI14AVCAudioStreamE12setDirectionERK14MediaDirectionb_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = a1[4];
  v16 = 0;
  v17 = 0;
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v17 = std::__shared_weak_count::lock(v3);
    if (v17)
    {
      v4 = *(_QWORD *)(v2 + 32);
      v16 = v4;
      if (v4)
      {
        v5 = (std::__shared_weak_count *)a1[6];
        v14 = a1[5];
        v15 = v5;
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 32))(v4, &v14, 9);
        v8 = v15;
        if (v15)
        {
          v9 = (unint64_t *)&v15->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
    }
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF0F2DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTPSessionI14AVCAudioStreamE12setDirectionERK14MediaDirectionb_block_invoke_3(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = a1[4];
  v16 = 0;
  v17 = 0;
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v17 = std::__shared_weak_count::lock(v3);
    if (v17)
    {
      v4 = *(_QWORD *)(v2 + 32);
      v16 = v4;
      if (v4)
      {
        v5 = (std::__shared_weak_count *)a1[6];
        v14 = a1[5];
        v15 = v5;
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v4 + 24))(v4, &v14, 0);
        v8 = v15;
        if (v15)
        {
          v9 = (unint64_t *)&v15->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
    }
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF0F2EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'AVCRTPSession<AVCAudioStream>::setDirection(uint64_t a1, int *a2)
{
  return AVCRTPSession<AVCAudioStream>::setDirection(a1 - 24, a2);
}

void AVCRTPSession<AVCAudioStream>::setConfiguration(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  _BYTE *v11;
  int v12;
  _BYTE *v13;
  std::__shared_weak_count *v14;
  IpAddress *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void **v18;
  id v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  char isConfigEqualToActiveConfig;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::string v44;
  std::string v45;
  IpAddress *v46;
  std::__shared_weak_count *v47;
  _BYTE *v48;
  std::__shared_weak_count *v49;
  void *__p[2];
  char v51;
  void *v52[2];
  uint64_t v53;

  std::string::basic_string[abi:ne180100]<0>(v52, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v52, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"setConfiguration", 16);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v6 + 17) = 0;
  v7 = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v51 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v53) < 0)
    operator delete(v52[0]);
  v8 = (void *)MEMORY[0x1C3B876AC](v7);
  v48 = 0;
  v49 = 0;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v49 = v10;
    if (v10)
    {
      v11 = (_BYTE *)*a2;
      v48 = v11;
      goto LABEL_10;
    }
  }
  else
  {
    v10 = 0;
  }
  v11 = 0;
LABEL_10:
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 104))(a1 + 24);
  if (v12 == 2)
  {
    if (v11[584])
    {
      v13 = v11 + 152;
      goto LABEL_18;
    }
  }
  else if (v12 == 6 && v11[1856])
  {
    v13 = v11 + 1496;
    goto LABEL_18;
  }
  if (!v11[1328])
  {
    std::string::basic_string[abi:ne180100]<0>(v52, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v39 = ImsLogger::warn(ims::_logger, (uint64_t)v52, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)"Not enough information to configure with", 40);
    *(_BYTE *)(v39 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v39 + 17) = 0;
    if (v51 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v53) < 0)
      operator delete(v52[0]);
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741825;
    if (v10)
      goto LABEL_75;
    goto LABEL_79;
  }
  v13 = v11 + 1032;
LABEL_18:
  v15 = (IpAddress *)*((_QWORD *)v13 + 1);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 2);
  v46 = v15;
  v47 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if (v15)
  {
    IpAddress::asString(v15, 0, v52);
    v18 = (void **)(a1 + 520);
    if (*(char *)(a1 + 543) < 0)
      operator delete(*v18);
    *(_OWORD *)v18 = *(_OWORD *)v52;
    *(_QWORD *)(a1 + 536) = v53;
    *(_BYTE *)(a1 + 544) = (*(unsigned int (**)(IpAddress *))(*(_QWORD *)v15 + 136))(v15) == 2;
    goto LABEL_25;
  }
  if (*(char *)(a1 + 543) < 0)
  {
    if (!*(_QWORD *)(a1 + 528))
    {
LABEL_63:
      std::string::basic_string[abi:ne180100]<0>(v52, "avc.rtp.session");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v38 = ImsLogger::error(ims::_logger, (uint64_t)v52, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"No remote connection found for session", 38);
      *(_BYTE *)(v38 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_64;
    }
  }
  else if (!*(_BYTE *)(a1 + 543))
  {
    goto LABEL_63;
  }
LABEL_25:
  if (*(_QWORD *)(a1 + 488))
  {
    v19 = objc_alloc(MEMORY[0x1E0CB3940]);
    v20 = (_QWORD *)(a1 + 520);
    if (*(char *)(a1 + 543) < 0)
      v20 = (_QWORD *)*v20;
    v21 = (void *)objc_msgSend(v19, "initWithUTF8String:", v20);
    objc_msgSend(*(id *)(a1 + 488), "remoteAddress");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "setIp:", v21);

    v23 = *(unsigned __int8 *)(a1 + 544);
    objc_msgSend(*(id *)(a1 + 488), "remoteAddress");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "setIsIPv6:", v23 != 0);

    objc_msgSend(*(id *)(a1 + 488), "remoteAddress");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "setInterfaceName:", &stru_1E78F26B0);

    v26 = *((unsigned __int16 *)v13 + 13);
    objc_msgSend(*(id *)(a1 + 488), "remoteAddress");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "setPort:", v26);

    v28 = (*(_DWORD *)(a1 + 248) - 2);
    if (v28 >= 3)
      v29 = 3;
    else
      v29 = 2 - v28;
    objc_msgSend(*(id *)(a1 + 488), "setDirection:", v29);
    std::string::basic_string[abi:ne180100]<0>(v52, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v30 = ImsLogger::debug(ims::_logger, (uint64_t)v52, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"direction set to ", 17);
    *(_BYTE *)(v30 + 17) = 0;
    ims::toString<MediaDirection>((unsigned int *)(a1 + 248), &v44);
    LoggableString::LoggableString(&v45, &v44);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v30 + 40))(v30, &v45);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v30 + 17) = 0;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (v51 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v53) < 0)
      operator delete(v52[0]);
    if (v13[184])
    {
      v31 = 2;
      if (v13[179])
        v31 = 3;
      if (v13[177])
        v32 = v31;
      else
        v32 = v13[179];
      objc_msgSend(*(id *)(a1 + 488), "setSRTPCipherSuite:", v32);
      if (v13[178])
        v33 = 3;
      else
        v33 = 1;
      objc_msgSend(*(id *)(a1 + 488), "setSRTCPCipherSuite:", v33);
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", *((_QWORD *)v13 + 19), *((_QWORD *)v13 + 20) - *((_QWORD *)v13 + 19));
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 488), "setSendMasterKey:", v34);

    }
    if (v13[272])
    {
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", *((_QWORD *)v13 + 30), *((_QWORD *)v13 + 31) - *((_QWORD *)v13 + 30));
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 488), "setReceiveMasterKey:", v35);

    }
    isConfigEqualToActiveConfig = AVCRTPSession<AVCAudioStream>::isConfigEqualToActiveConfig(a1, *(void **)(a1 + 488));
    v37 = 0;
    *(_BYTE *)(a1 + 476) = isConfigEqualToActiveConfig ^ 1;
    goto LABEL_69;
  }
  std::string::basic_string[abi:ne180100]<0>(v52, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v38 = ImsLogger::error(ims::_logger, (uint64_t)v52, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"AVC config is null. Was supposed to be allocated in Audio or RTT session.", 73);
  *(_BYTE *)(v38 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_64:
  *(_BYTE *)(v38 + 17) = 0;
  if (v51 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v53) < 0)
    operator delete(v52[0]);
  v37 = 1073741825;
LABEL_69:
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = v37;
  if (v14)
  {
    v40 = (unint64_t *)&v14->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v10 = v49;
  if (v49)
  {
LABEL_75:
    v42 = (unint64_t *)&v10->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_79:
  objc_autoreleasePoolPop(v8);
}

void sub_1BF0F367C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t AVCRTPSession<AVCAudioStream>::isConfigEqualToActiveConfig(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (*(_QWORD *)(a1 + 496))
    {
      objc_msgSend(v3, "description");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 496), "description");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v5, "isEqualToString:", v6);
      std::string::basic_string[abi:ne180100]<0>(v13, "avc.rtp.session");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::debug(ims::_logger, (uint64_t)v13, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"isConfigEqualToActiveConfig", 27);
      *(_BYTE *)(v8 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" [sessionId=", 12);
      *(_BYTE *)(v8 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v8 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" isEqual=", 9);
      *(_BYTE *)(v8 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (v12 < 0)
        operator delete(__p[0]);
      if (v14 < 0)
        operator delete(v13[0]);

      goto LABEL_15;
    }
    std::string::basic_string[abi:ne180100]<0>(v13, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::warn(ims::_logger, (uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"isConfigEqualToActiveConfig", 27);
    *(_BYTE *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" [sessionId=", 12);
    *(_BYTE *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" activeAvcSessionConfig is null", 31);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::warn(ims::_logger, (uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"isConfigEqualToActiveConfig", 27);
    *(_BYTE *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" [sessionId=", 12);
    *(_BYTE *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" config is null", 15);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(_BYTE *)(v9 + 17) = 0;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  v7 = 0;
LABEL_15:

  return v7;
}

void sub_1BF0F3AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void `non-virtual thunk to'AVCRTPSession<AVCAudioStream>::setConfiguration(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  AVCRTPSession<AVCAudioStream>::setConfiguration(a1 - 24, a2, a3);
}

uint64_t AVCRTPSession<AVCAudioStream>::configure(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  void *v30;
  std::__shared_weak_count *v31;
  _QWORD v32[6];
  std::__shared_weak_count *v33;
  char *v34;
  std::__shared_weak_count *v35;
  char *v36;
  std::__shared_weak_count *v37;
  char v38;
  void *v39;
  std::__shared_weak_count *v40;
  char v41;

  std::string::basic_string[abi:ne180100]<0>(&v39, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(&v36, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v39, (uint64_t)&v36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"configure", 9);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v2 + 17) = 0;
  v3 = a1 + 24;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" _reconfigureNeeded=", 20);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v38 < 0)
    operator delete(v36);
  if (v41 < 0)
    operator delete(v39);
  if (*(_BYTE *)(a1 + 473) && *(_BYTE *)(a1 + 476))
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(&v36, (char *)&str_2_23);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v39, (uint64_t)&v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Reconfiguring session ", 22);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 176))(a1 + 24);
    std::ostream::operator<<();
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if (v38 < 0)
      operator delete(v36);
    if (v41 < 0)
      operator delete(v39);
    *(_BYTE *)(a1 + 475) = 1;
    v39 = 0;
    v40 = 0;
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v39);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 104))(a1 + 24);
    RTPSharedPointerBase::getShared<AVCRTPSession<AVCAudioStream>>((void **)&v36, a1);
    if (v5 == 2)
      v6 = 2;
    else
      v6 = 3;
    v7 = v36 + 24;
    if (!v36)
      v7 = 0;
    v34 = v7;
    v35 = v37;
    v36 = 0;
    v37 = 0;
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3321888768;
    v32[2] = ___ZN13AVCRTPSessionI14AVCAudioStreamE9configureEb_block_invoke;
    v32[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
    v32[4] = a1;
    v32[5] = v39;
    v33 = v40;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    MediaSessionDriver::startTimerForRequest(a1 + 24, v6, (uint64_t *)&v34, v32);
    v10 = v35;
    if (v35)
    {
      v11 = (unint64_t *)&v35->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v37;
    if (v37)
    {
      v14 = (unint64_t *)&v37->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    objc_msgSend(*(id *)(a1 + 480), "stop");
    v16 = v33;
    if (v33)
    {
      v17 = (unint64_t *)&v33->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = v40;
    if (v40)
    {
      v20 = (unint64_t *)&v40->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      goto LABEL_53;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(&v36, (char *)&str_2_23);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v22 = ImsLogger::debug(ims::_logger, (uint64_t)&v39, (uint64_t)&v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"Ignoring configure request for session ", 39);
    *(_BYTE *)(v22 + 17) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 176))(a1 + 24);
    std::ostream::operator<<();
    *(_BYTE *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v22 + 17) = 0;
    if (v38 < 0)
      operator delete(v36);
    if (v41 < 0)
      operator delete(v39);
    v39 = 0;
    v40 = 0;
    v23 = *(std::__shared_weak_count **)(a1 + 40);
    if (v23)
    {
      v40 = std::__shared_weak_count::lock(v23);
      if (v40)
      {
        v24 = *(void **)(a1 + 32);
        v39 = v24;
        if (v24)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v30);
          (*(void (**)(void *, void **, _QWORD))(*(_QWORD *)v24 + 16))(v24, &v30, 0);
          v25 = v31;
          if (v31)
          {
            v26 = (unint64_t *)&v31->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
        }
      }
    }
    v19 = v40;
    if (v40)
    {
      v28 = (unint64_t *)&v40->__shared_owners_;
      do
        v21 = __ldaxr(v28);
      while (__stlxr(v21 - 1, v28));
LABEL_53:
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  return 1;
}

void sub_1BF0F40A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 56);
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTPSessionI14AVCAudioStreamE9configureEb_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = a1[4];
  v16 = 0;
  v17 = 0;
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v17 = std::__shared_weak_count::lock(v3);
    if (v17)
    {
      v4 = *(_QWORD *)(v2 + 32);
      v16 = v4;
      if (v4)
      {
        v5 = (std::__shared_weak_count *)a1[6];
        v14 = a1[5];
        v15 = v5;
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 32))(v4, &v14, 9);
        v8 = v15;
        if (v15)
        {
          v9 = (unint64_t *)&v15->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
    }
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF0F4240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'AVCRTPSession<AVCAudioStream>::configure(uint64_t a1)
{
  return AVCRTPSession<AVCAudioStream>::configure(a1 - 24);
}

uint64_t AVCRTPSession<AVCAudioStream>::active(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v6, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"active", 6);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" active=", 8);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  return *(unsigned __int8 *)(a1 + 473);
}

void sub_1BF0F43A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'AVCRTPSession<AVCAudioStream>::active(uint64_t a1)
{
  return AVCRTPSession<AVCAudioStream>::active(a1 - 24);
}

uint64_t AVCRTPSession<AVCAudioStream>::paused(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v6, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"paused", 6);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" paused=", 8);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  return *(unsigned __int8 *)(a1 + 474);
}

void sub_1BF0F4520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'AVCRTPSession<AVCAudioStream>::paused(uint64_t a1)
{
  return AVCRTPSession<AVCAudioStream>::paused(a1 - 24);
}

void AVCRTPSession<AVCAudioStream>::pauseAVCSession(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(v8, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"pauseAVCSession", 15);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v2 + 17) = 0;
  v3 = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  v4 = (void *)MEMORY[0x1C3B876AC](v3);
  std::string::basic_string[abi:ne180100]<0>(v8, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Pausing session ", 16);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  objc_msgSend(*(id *)(a1 + 480), "pause");
  objc_autoreleasePoolPop(v4);
}

void sub_1BF0F4750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AVCRTPSession<AVCAudioStream>::toTimerIdString@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v2;
  uint64_t result;

  switch(a1)
  {
    case 0:
      v2 = "AUDIO_SESSION_START";
      goto LABEL_7;
    case 1:
      v2 = "TEXT_SESSION_START";
      goto LABEL_7;
    case 2:
      v2 = "AUDIO_SESSION_STOP";
      goto LABEL_7;
    case 3:
      v2 = "TEXT_SESSION_STOP";
LABEL_7:
      result = (uint64_t)std::string::basic_string[abi:ne180100]<0>(a2, v2);
      break;
    default:
      result = ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()(a2);
      break;
  }
  return result;
}

uint64_t `non-virtual thunk to'AVCRTPSession<AVCAudioStream>::toTimerIdString@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  return AVCRTPSession<AVCAudioStream>::toTimerIdString(a1, a2);
}

uint64_t AVCRTPSession<AVCTextStream>::AVCRTPSession(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, ImsPrefs *a6, _QWORD *a7, __int128 *a8, dispatch_object_t *a9)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  void *__p[2];
  char v28;
  void *v29[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E78C63A8;
  v12 = (std::__shared_weak_count *)a3[1];
  v33 = *a3;
  v34 = v12;
  if (v12)
  {
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
  }
  v15 = a5[1];
  v31 = *a5;
  v32 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  MediaSessionDriver::MediaSessionDriver(a1 + 24, a2 + 1, &v33, a4, &v31, a6, a8, a9);
  v18 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  v21 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 24) = a2[8];
  *(_QWORD *)(a1 + 112) = a2[9];
  *(_QWORD *)(a1 + *(_QWORD *)(v21 - 24)) = a2[10];
  *(_BYTE *)(a1 + 477) = 0;
  *(_DWORD *)(a1 + 473) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 504) = *a7;
  v22 = a7[1];
  *(_QWORD *)(a1 + 512) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *(_BYTE *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  std::string::basic_string[abi:ne180100]<0>(v29, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v25 = ImsLogger::debug(ims::_logger, (uint64_t)v29, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"AVCRTPSession", 13);
  *(_BYTE *)(v25 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v25 + 17) = 0;
  if (v28 < 0)
    operator delete(__p[0]);
  if (v30 < 0)
    operator delete(v29[0]);
  return a1;
}

void sub_1BF0F4A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  uint64_t v24;
  MediaSessionDriver *v25;
  uint64_t *v26;
  void **v27;
  std::__shared_weak_count *v29;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v24 + 543) < 0)
    operator delete(*v27);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v24 + 504);

  MediaSessionDriver::~MediaSessionDriver(v25, v26);
  v29 = *(std::__shared_weak_count **)(v24 + 16);
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  _Unwind_Resume(a1);
}

uint64_t AVCRTPSession<AVCTextStream>::~AVCRTPSession(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  MediaSessionDriver *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 24) = a2[8];
  v5 = (MediaSessionDriver *)(a1 + 24);
  *(_QWORD *)(a1 + 112) = a2[9];
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = a2[10];
  std::string::basic_string[abi:ne180100]<0>(v11, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v11, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"~AVCRTPSession", 14);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v10 < 0)
    operator delete(__p[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (*(char *)(a1 + 543) < 0)
    operator delete(*(void **)(a1 + 520));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 504);

  MediaSessionDriver::~MediaSessionDriver(v5, a2 + 1);
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  return a1;
}

uint64_t AVCRTPSession<AVCTextStream>::terminate(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  char *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  char *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void *v36;
  std::__shared_weak_count *v37;
  _QWORD v38[6];
  std::__shared_weak_count *v39;
  char *v40;
  std::__shared_weak_count *v41;
  char *v42;
  std::__shared_weak_count *v43;
  char v44;
  void *v45;
  std::__shared_weak_count *v46;
  char v47;

  std::string::basic_string[abi:ne180100]<0>(&v45, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(&v42, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v45, (uint64_t)&v42);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"terminate", 9);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v2 + 17) = 0;
  v3 = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v44 < 0)
    operator delete(v42);
  if (v47 < 0)
    operator delete(v45);
  v4 = (void *)MEMORY[0x1C3B876AC](v3);
  if (*(_BYTE *)(a1 + 473))
  {
    *(_WORD *)(a1 + 475) = 0;
    v45 = 0;
    v46 = 0;
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v45);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 104))(a1 + 24);
    RTPSharedPointerBase::getShared<AVCRTPSession<AVCTextStream>>((void **)&v42, a1);
    if (v5 == 2)
      v6 = 2;
    else
      v6 = 3;
    v7 = v42 + 24;
    if (!v42)
      v7 = 0;
    v40 = v7;
    v41 = v43;
    v42 = 0;
    v43 = 0;
    v38[0] = MEMORY[0x1E0C809B0];
    v38[1] = 3321888768;
    v38[2] = ___ZN13AVCRTPSessionI13AVCTextStreamE9terminateEb_block_invoke;
    v38[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
    v38[4] = a1;
    v38[5] = v45;
    v39 = v46;
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    MediaSessionDriver::startTimerForRequest(a1 + 24, v6, (uint64_t *)&v40, v38);
    v10 = v41;
    if (v41)
    {
      v11 = (unint64_t *)&v41->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v43;
    if (v43)
    {
      v14 = (unint64_t *)&v43->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    objc_msgSend(*(id *)(a1 + 480), "stop");
    v16 = v39;
    if (v39)
    {
      v17 = (unint64_t *)&v39->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = v46;
    if (v46)
    {
      v20 = (unint64_t *)&v46->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  v45 = 0;
  v46 = 0;
  RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v45);
  v42 = 0;
  v43 = 0;
  v22 = *(std::__shared_weak_count **)(a1 + 40);
  if (v22)
  {
    v43 = std::__shared_weak_count::lock(v22);
    if (v43)
    {
      v23 = *(char **)(a1 + 32);
      v42 = v23;
      if (v23)
      {
        v36 = v45;
        v37 = v46;
        if (v46)
        {
          v24 = (unint64_t *)&v46->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        (*(void (**)(char *, void **, _QWORD))(*(_QWORD *)v23 + 8))(v23, &v36, 0);
        v26 = v37;
        if (v37)
        {
          v27 = (unint64_t *)&v37->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
      }
    }
  }
  v29 = v43;
  if (v43)
  {
    v30 = (unint64_t *)&v43->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v46;
  if (v46)
  {
    v33 = (unint64_t *)&v46->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  objc_autoreleasePoolPop(v4);
  return 1;
}

void sub_1BF0F5028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 80);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 56);
  _Unwind_Resume(a1);
}

void RTPSharedPointerBase::getShared<AVCRTPSession<AVCTextStream>>(void **p_lpsrc, uint64_t a2)
{
  void *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *lpsrc;
  std::__shared_weak_count *v9;

  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, (_QWORD *)(a2 + 8));
  if (lpsrc)
  {
    if (v3)
    {
      v4 = v9;
      *p_lpsrc = v3;
      p_lpsrc[1] = v4;
      p_lpsrc = &lpsrc;
    }
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void ___ZN13AVCRTPSessionI13AVCTextStreamE9terminateEb_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = a1[4];
  v16 = 0;
  v17 = 0;
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v17 = std::__shared_weak_count::lock(v3);
    if (v17)
    {
      v4 = *(_QWORD *)(v2 + 32);
      v16 = v4;
      if (v4)
      {
        v5 = (std::__shared_weak_count *)a1[6];
        v14 = a1[5];
        v15 = v5;
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 32))(v4, &v14, 9);
        v8 = v15;
        if (v15)
        {
          v9 = (unint64_t *)&v15->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
    }
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF0F5244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'AVCRTPSession<AVCTextStream>::terminate(uint64_t a1)
{
  return AVCRTPSession<AVCTextStream>::terminate(a1 - 24);
}

uint64_t AVCRTPSession<AVCTextStream>::start(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count **v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count **v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  BOOL v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  BOOL v30;
  _QWORD *v31;
  _BOOL4 v32;
  void *v33;
  void *v34;
  uint64_t v35;
  _BOOL4 isWifi;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  BOOL v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  NSObject *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *size;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;
  void *v62;
  void *v63;
  uint64_t v64;
  id v65;
  const char *v66;
  size_t v67;
  std::__shared_weak_count *v68;
  std::string::size_type v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  std::string::size_type v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  uint64_t v83;
  int v84;
  std::string::size_type v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  _QWORD v100[6];
  std::__shared_weak_count *v101;
  std::string::size_type v102;
  std::string::size_type v103;
  void *v104;
  std::__shared_weak_count *v105;
  void *v106;
  std::__shared_weak_count *v107;
  id v108;
  _QWORD block[5];
  __int128 v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count *v112;
  std::string v113[2];
  __int128 v114;
  uint64_t v115;
  std::__shared_weak_count **v116;
  std::__shared_weak_count *v117;
  char v118;

  std::string::basic_string[abi:ne180100]<0>(v113, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(&v116, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v113, (uint64_t)&v116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"start", 5);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v2 + 17) = 0;
  v3 = a1 + 24;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v2 + 17) = 0;
  v4 = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v118 < 0)
    operator delete(v116);
  if (SHIBYTE(v113[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113[0].__r_.__value_.__l.__data_);
  v5 = (void *)MEMORY[0x1C3B876AC](v4);
  if (*(_QWORD *)(a1 + 488))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 104))(a1 + 24) != 2)
      goto LABEL_80;
    v116 = 0;
    v117 = 0;
    RTPManager::sdpSessionForSession(*(RTPManager **)(a1 + 56), *(_QWORD *)(a1 + 48), &v116);
    v6 = v116;
    if (!v116)
      goto LABEL_75;
    v7 = v116[16];
    if (!v7)
      goto LABEL_75;
    v8 = std::__shared_weak_count::lock(v7);
    if (!v8)
      goto LABEL_75;
    v9 = v8;
    v10 = v6[15];
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
    }
    if (!v10)
    {
LABEL_75:
      v45 = v117;
      if (v117)
      {
        v46 = (unint64_t *)&v117->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
LABEL_80:
      v48 = *(void **)(a1 + 488);
      if (v48)
        goto LABEL_99;
      goto LABEL_81;
    }
    v115 = 0;
    v114 = 0u;
    memset(v113, 0, sizeof(v113));
    v13 = v116;
    v111 = 0;
    v112 = 0;
    v14 = v116[16];
    if (v14)
    {
      v15 = std::__shared_weak_count::lock(v14);
      v112 = v15;
      if (v15)
      {
        v16 = v13[15];
        v111 = v16;
LABEL_20:
        if (SHIBYTE(v16[131].__shared_owners_) < 0)
          std::string::__init_copy_ctor_external(v113, (const std::string::value_type *)v16[130].__shared_weak_owners_, (std::string::size_type)v16[131].__vftable);
        else
          v113[0] = *(std::string *)((char *)v16 + 3136);
        if (SHIBYTE(v16[132].__shared_owners_) < 0)
          std::string::__init_copy_ctor_external(&v113[1], (const std::string::value_type *)v16[131].__shared_weak_owners_, (std::string::size_type)v16[132].__vftable);
        else
          v113[1] = *(std::string *)((char *)v16 + 3160);
        v114 = *(_OWORD *)&v16[132].__shared_weak_owners_;
        LOBYTE(v115) = v16[133].__shared_owners_;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v19 = *(_QWORD *)(a1 + 48);
        v20 = *(_QWORD *)(a1 + 56);
        v21 = *(_QWORD **)(v20 + 232);
        if (v21)
        {
          v22 = (_QWORD *)(v20 + 232);
          do
          {
            v23 = v21[4];
            v24 = v23 >= v19;
            if (v23 >= v19)
              v25 = v21;
            else
              v25 = v21 + 1;
            if (v24)
              v22 = v21;
            v21 = (_QWORD *)*v25;
          }
          while (*v25);
          if (v22 != (_QWORD *)(v20 + 232) && v22[4] <= v19)
            goto LABEL_56;
        }
        v26 = *(_QWORD **)(v20 + 256);
        if (!v26)
          goto LABEL_53;
        v27 = (_QWORD *)(v20 + 256);
        v28 = (_QWORD *)(v20 + 256);
        do
        {
          v29 = v26[4];
          v30 = v29 >= v19;
          if (v29 >= v19)
            v31 = v26;
          else
            v31 = v26 + 1;
          if (v30)
            v28 = v26;
          v26 = (_QWORD *)*v31;
        }
        while (*v31);
        if (v28 != v27 && v28[4] <= v19)
        {
LABEL_56:
          isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)v113);
          objc_msgSend(*(id *)(a1 + 488), "audio");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          v34 = v33;
          if (isWifi)
            v35 = 2;
          else
            v35 = 9;
        }
        else
        {
LABEL_53:
          v32 = ims::AccessNetwork::isWifi((ims::AccessNetwork *)v113);
          objc_msgSend(*(id *)(a1 + 488), "audio");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          v34 = v33;
          if (v32)
            v35 = 0;
          else
            v35 = 6;
        }
        objc_msgSend(v33, "setAudioStreamMode:", v35);

        objc_msgSend(*(id *)(a1 + 488), "setJitterBufferMode:", ims::AccessNetwork::isWifi((ims::AccessNetwork *)v113));
        v37 = *(_QWORD *)(a1 + 56);
        v38 = (_QWORD *)(v37 + 256);
        v39 = *(_QWORD **)(v37 + 256);
        if (!v39)
          goto LABEL_70;
        v40 = *(_QWORD *)(a1 + 48);
        v41 = (_QWORD *)(v37 + 256);
        do
        {
          v42 = v39[4];
          v43 = v42 >= v40;
          if (v42 >= v40)
            v44 = v39;
          else
            v44 = v39 + 1;
          if (v43)
            v41 = v39;
          v39 = (_QWORD *)*v44;
        }
        while (*v44);
        if (v41 == v38 || v41[4] > v40)
LABEL_70:
          v41 = v38;
        objc_msgSend(*(id *)(a1 + 488), "setOutOfProcessCodecsEnabled:", v41 != v38);
        if (SHIBYTE(v113[1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v113[1].__r_.__value_.__l.__data_);
        if (SHIBYTE(v113[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v113[0].__r_.__value_.__l.__data_);
        goto LABEL_75;
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 0;
    goto LABEL_20;
  }
LABEL_81:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 104))(a1 + 24) == 4)
  {
    std::string::basic_string[abi:ne180100]<0>(v113, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(&v116, (char *)&str_2_23);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v49 = ImsLogger::warn(ims::_logger, (uint64_t)v113, (uint64_t)&v116);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v49 + 8), (uint64_t)"Text media session is not configured, possibly due to incomplete upgrade.  Waiting for upper layers to generate new offer.", 122);
    *(_BYTE *)(v49 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v49 + 17) = 0;
    if (v118 < 0)
      operator delete(v116);
    if (SHIBYTE(v113[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v113[0].__r_.__value_.__l.__data_);
    *(_OWORD *)&v113[0].__r_.__value_.__l.__data_ = 0uLL;
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, (void **)&v113[0].__r_.__value_.__l.__data_);
    v50 = *(NSObject **)(a1 + 72);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3321888768;
    block[2] = ___ZN13AVCRTPSessionI13AVCTextStreamE5startEb_block_invoke;
    block[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
    block[4] = a1;
    v110 = *(_OWORD *)&v113[0].__r_.__value_.__l.__data_;
    if (v113[0].__r_.__value_.__l.__size_)
    {
      v51 = (unint64_t *)(v113[0].__r_.__value_.__l.__size_ + 8);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    dispatch_async(v50, block);
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
    if (*((_QWORD *)&v110 + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    size = (std::__shared_weak_count *)v113[0].__r_.__value_.__l.__size_;
    if (v113[0].__r_.__value_.__l.__size_)
    {
      v57 = (unint64_t *)(v113[0].__r_.__value_.__l.__size_ + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      goto LABEL_166;
    }
    goto LABEL_168;
  }
  v48 = *(void **)(a1 + 488);
LABEL_99:
  objc_storeStrong((id *)(a1 + 496), v48);
  v59 = *(_QWORD *)(a1 + 496);
  if (!v59)
  {
    std::string::basic_string[abi:ne180100]<0>(v113, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(&v116, (char *)&str_2_23);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v76 = ImsLogger::error(ims::_logger, (uint64_t)v113, (uint64_t)&v116);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v76 + 8), (uint64_t)"_activeAvcSessionConfig is null", 31);
    *(_BYTE *)(v76 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v76 + 64))(v76, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v76 + 17) = 0;
    if (v118 < 0)
      operator delete(v116);
    if (SHIBYTE(v113[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v113[0].__r_.__value_.__l.__data_);
    *(_OWORD *)&v113[0].__r_.__value_.__l.__data_ = 0uLL;
    v77 = *(std::__shared_weak_count **)(a1 + 40);
    if (v77)
    {
      v113[0].__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v77);
      if (v113[0].__r_.__value_.__l.__size_)
      {
        v78 = *(_QWORD *)(a1 + 32);
        v113[0].__r_.__value_.__r.__words[0] = v78;
        if (v78)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v106);
          (*(void (**)(std::string::size_type, void **, uint64_t))(*(_QWORD *)v78 + 24))(v78, &v106, 9);
          v79 = v107;
          if (v107)
          {
            v80 = (unint64_t *)&v107->__shared_owners_;
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
        }
      }
    }
    size = (std::__shared_weak_count *)v113[0].__r_.__value_.__l.__size_;
    if (!v113[0].__r_.__value_.__l.__size_)
      goto LABEL_168;
    v82 = (unint64_t *)(v113[0].__r_.__value_.__l.__size_ + 8);
    do
      v58 = __ldaxr(v82);
    while (__stlxr(v58 - 1, v82));
LABEL_166:
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    goto LABEL_168;
  }
  v60 = *(void **)(a1 + 480);
  v108 = 0;
  objc_msgSend(v60, "configure:error:", v59, &v108);
  v61 = v108;
  if (v61)
  {
    v62 = v61;
    objc_msgSend(v61, "description");
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    std::string::basic_string[abi:ne180100]<0>(v113, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(&v116, (char *)&str_2_23);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v64 = ImsLogger::error(ims::_logger, (uint64_t)v113, (uint64_t)&v116);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v64 + 8), (uint64_t)"Session config error: ", 22);
    *(_BYTE *)(v64 + 17) = 0;
    v65 = objc_retainAutorelease(v63);
    v66 = (const char *)objc_msgSend(v65, "UTF8String");
    v67 = strlen(v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v64 + 8), (uint64_t)v66, v67);
    *(_BYTE *)(v64 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v64 + 64))(v64, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v64 + 17) = 0;
    if (v118 < 0)
      operator delete(v116);
    if (SHIBYTE(v113[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v113[0].__r_.__value_.__l.__data_);
    *(_OWORD *)&v113[0].__r_.__value_.__l.__data_ = 0uLL;
    v68 = *(std::__shared_weak_count **)(a1 + 40);
    if (v68)
    {
      v113[0].__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v68);
      if (v113[0].__r_.__value_.__l.__size_)
      {
        v69 = *(_QWORD *)(a1 + 32);
        v113[0].__r_.__value_.__r.__words[0] = v69;
        if (v69)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v104);
          (*(void (**)(std::string::size_type, void **, uint64_t))(*(_QWORD *)v69 + 24))(v69, &v104, 9);
          v70 = v105;
          if (v105)
          {
            v71 = (unint64_t *)&v105->__shared_owners_;
            do
              v72 = __ldaxr(v71);
            while (__stlxr(v72 - 1, v71));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
        }
      }
    }
    v73 = (std::__shared_weak_count *)v113[0].__r_.__value_.__l.__size_;
    if (v113[0].__r_.__value_.__l.__size_)
    {
      v74 = (unint64_t *)(v113[0].__r_.__value_.__l.__size_ + 8);
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }

    goto LABEL_168;
  }
  std::string::basic_string[abi:ne180100]<0>(v113, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(&v116, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v83 = ImsLogger::debug(ims::_logger, (uint64_t)v113, (uint64_t)&v116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v83 + 8), (uint64_t)"Clear reconfigureNeeded", 23);
  *(_BYTE *)(v83 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v83 + 64))(v83, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v83 + 17) = 0;
  if (v118 < 0)
    operator delete(v116);
  if (SHIBYTE(v113[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113[0].__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 476) = 0;
  v111 = 0;
  v112 = 0;
  RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, (void **)&v111);
  v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 104))(a1 + 24);
  RTPSharedPointerBase::getShared<AVCRTPSession<AVCTextStream>>((void **)&v113[0].__r_.__value_.__l.__data_, a1);
  v85 = v113[0].__r_.__value_.__r.__words[0] + 24;
  if (!v113[0].__r_.__value_.__r.__words[0])
    v85 = 0;
  v102 = v85;
  v103 = v113[0].__r_.__value_.__l.__size_;
  *(_OWORD *)&v113[0].__r_.__value_.__l.__data_ = 0uLL;
  v100[0] = MEMORY[0x1E0C809B0];
  v100[1] = 3321888768;
  v100[2] = ___ZN13AVCRTPSessionI13AVCTextStreamE5startEb_block_invoke_2;
  v100[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
  v100[4] = a1;
  v100[5] = v111;
  v101 = v112;
  if (v112)
  {
    v86 = (unint64_t *)&v112->__shared_owners_;
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
  }
  MediaSessionDriver::startTimerForRequest(a1 + 24, v84 != 2, (uint64_t *)&v102, v100);
  v88 = (std::__shared_weak_count *)v103;
  if (v103)
  {
    v89 = (unint64_t *)(v103 + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = (std::__shared_weak_count *)v113[0].__r_.__value_.__l.__size_;
  if (v113[0].__r_.__value_.__l.__size_)
  {
    v92 = (unint64_t *)(v113[0].__r_.__value_.__l.__size_ + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v113, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(&v116, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v94 = ImsLogger::debug(ims::_logger, (uint64_t)v113, (uint64_t)&v116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v94 + 8), (uint64_t)"Starting session ", 17);
  *(_BYTE *)(v94 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 176))(a1 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v94 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v94 + 64))(v94, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v94 + 17) = 0;
  if (v118 < 0)
    operator delete(v116);
  if (SHIBYTE(v113[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113[0].__r_.__value_.__l.__data_);
  objc_msgSend(*(id *)(a1 + 480), "start");
  v95 = v101;
  if (v101)
  {
    v96 = (unint64_t *)&v101->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  size = v112;
  if (v112)
  {
    v98 = (unint64_t *)&v112->__shared_owners_;
    do
      v58 = __ldaxr(v98);
    while (__stlxr(v58 - 1, v98));
    goto LABEL_166;
  }
LABEL_168:
  objc_autoreleasePoolPop(v5);
  return 1;
}

void sub_1BF0F5E60(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  ims::AccessNetwork::~AccessNetwork((void **)(v2 - 176));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 104);
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTPSessionI13AVCTextStreamE5startEb_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = a1[4];
  v16 = 0;
  v17 = 0;
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v17 = std::__shared_weak_count::lock(v3);
    if (v17)
    {
      v4 = *(_QWORD *)(v2 + 32);
      v16 = v4;
      if (v4)
      {
        v5 = (std::__shared_weak_count *)a1[6];
        v14 = a1[5];
        v15 = v5;
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 24))(v4, &v14, 2);
        v8 = v15;
        if (v15)
        {
          v9 = (unint64_t *)&v15->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
    }
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF0F6104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTPSessionI13AVCTextStreamE5startEb_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = a1[4];
  v16 = 0;
  v17 = 0;
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v17 = std::__shared_weak_count::lock(v3);
    if (v17)
    {
      v4 = *(_QWORD *)(v2 + 32);
      v16 = v4;
      if (v4)
      {
        v5 = (std::__shared_weak_count *)a1[6];
        v14 = a1[5];
        v15 = v5;
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 24))(v4, &v14, 9);
        v8 = v15;
        if (v15)
        {
          v9 = (unint64_t *)&v15->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
    }
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF0F6210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'AVCRTPSession<AVCTextStream>::start(uint64_t a1)
{
  return AVCRTPSession<AVCTextStream>::start(a1 - 24);
}

uint64_t AVCRTPSession<AVCTextStream>::stop(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v26[6];
  std::__shared_weak_count *v27;
  char *v28;
  std::__shared_weak_count *v29;
  void *__p;
  std::__shared_weak_count *v31;
  char v32;
  void *v33;
  std::__shared_weak_count *v34;
  char v35;

  std::string::basic_string[abi:ne180100]<0>(&v33, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v33, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"stop", 4);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v2 + 17) = 0;
  v3 = a1 + 24;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v2 + 17) = 0;
  v4 = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v32 < 0)
    operator delete(__p);
  if (v35 < 0)
    operator delete(v33);
  v5 = (void *)MEMORY[0x1C3B876AC](v4);
  if (*(_BYTE *)(a1 + 473))
  {
    std::string::basic_string[abi:ne180100]<0>(&v33, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_2_23);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v33, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Stopping session ", 17);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 176))(a1 + 24);
    std::ostream::operator<<();
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (v32 < 0)
      operator delete(__p);
    if (v35 < 0)
      operator delete(v33);
    *(_WORD *)(a1 + 475) = 0;
    v33 = 0;
    v34 = 0;
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v33);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 104))(a1 + 24);
    RTPSharedPointerBase::getShared<AVCRTPSession<AVCTextStream>>(&__p, a1);
    if (v7 == 2)
      v8 = 2;
    else
      v8 = 3;
    v9 = (char *)__p + 24;
    if (!__p)
      v9 = 0;
    v28 = v9;
    v29 = v31;
    __p = 0;
    v31 = 0;
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3321888768;
    v26[2] = ___ZN13AVCRTPSessionI13AVCTextStreamE4stopEb_block_invoke;
    v26[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
    v26[4] = a1;
    v26[5] = v33;
    v27 = v34;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    MediaSessionDriver::startTimerForRequest(a1 + 24, v8, (uint64_t *)&v28, v26);
    v12 = v29;
    if (v29)
    {
      v13 = (unint64_t *)&v29->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = v31;
    if (v31)
    {
      v16 = (unint64_t *)&v31->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    objc_msgSend(*(id *)(a1 + 480), "stop");
    v18 = v27;
    if (v27)
    {
      v19 = (unint64_t *)&v27->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v34;
    if (v34)
    {
      v22 = (unint64_t *)&v34->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v33, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_2_23);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v24 = ImsLogger::warn(ims::_logger, (uint64_t)&v33, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"Stop called on session ", 23);
    *(_BYTE *)(v24 + 17) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 176))(v3);
    std::ostream::operator<<();
    *(_BYTE *)(v24 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)" which isn't active. Ignoring.", 30);
    *(_BYTE *)(v24 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v24 + 17) = 0;
    if (v32 < 0)
      operator delete(__p);
    if (v35 < 0)
      operator delete(v33);
  }
  objc_autoreleasePoolPop(v5);
  return 1;
}

void sub_1BF0F66B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (*(char *)(v24 - 33) < 0)
    operator delete(*(void **)(v24 - 56));
  _Unwind_Resume(exception_object);
}

void ___ZN13AVCRTPSessionI13AVCTextStreamE4stopEb_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = a1[4];
  v16 = 0;
  v17 = 0;
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v17 = std::__shared_weak_count::lock(v3);
    if (v17)
    {
      v4 = *(_QWORD *)(v2 + 32);
      v16 = v4;
      if (v4)
      {
        v5 = (std::__shared_weak_count *)a1[6];
        v14 = a1[5];
        v15 = v5;
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 32))(v4, &v14, 9);
        v8 = v15;
        if (v15)
        {
          v9 = (unint64_t *)&v15->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
    }
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF0F6828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'AVCRTPSession<AVCTextStream>::stop(uint64_t a1)
{
  return AVCRTPSession<AVCTextStream>::stop(a1 - 24);
}

uint64_t AVCRTPSession<AVCTextStream>::setDirection(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t *v35;
  char v37;
  int v38;
  uint64_t v39;
  char *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  int v53;
  uint64_t v54;
  char *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  uint64_t v68;
  char *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  void *v82;
  std::__shared_weak_count *v83;
  _QWORD v84[6];
  std::__shared_weak_count *v85;
  uint64_t v86[2];
  _QWORD v87[6];
  std::__shared_weak_count *v88;
  char *v89;
  std::__shared_weak_count *v90;
  void *v91;
  std::__shared_weak_count *v92;
  _QWORD v93[6];
  std::__shared_weak_count *v94;
  char *v95;
  std::__shared_weak_count *v96;
  void *v97;
  std::__shared_weak_count *v98;
  std::string v99;
  std::string v100;
  char *v101;
  uint64_t v102;
  char v103;
  void *v104;
  std::__shared_weak_count *v105;
  char v106;

  std::string::basic_string[abi:ne180100]<0>(&v104, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(&v101, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v104, (uint64_t)&v101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"setDirection", 12);
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v4 + 17) = 0;
  v5 = a1 + 24;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (v103 < 0)
    operator delete(v101);
  if (v106 < 0)
    operator delete(v104);
  v6 = *a2;
  if (*a2 == 2)
  {
    v7 = 0;
    v8 = 2;
  }
  else if (v6 == 4)
  {
    v7 = 0;
    v8 = 0;
  }
  else if (v6 == 3)
  {
    v7 = 0;
    v8 = 1;
  }
  else
  {
    v7 = 1;
    v8 = 3;
  }
  v9 = objc_msgSend(*(id *)(a1 + 480), "direction");
  *(_DWORD *)(a1 + 248) = *a2;
  std::string::basic_string[abi:ne180100]<0>(&v104, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(&v101, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::debug(ims::_logger, (uint64_t)&v104, (uint64_t)&v101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Setting direction to ", 21);
  *(_BYTE *)(v10 + 17) = 0;
  ims::toString<MediaDirection>((unsigned int *)(a1 + 248), &v99);
  LoggableString::LoggableString(&v100, &v99);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v10 + 40))(v10, &v100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" for session ", 13);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 176))(a1 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  if (v103 < 0)
    operator delete(v101);
  if (v106 < 0)
    operator delete(v104);
  if (!*(_BYTE *)(a1 + 473))
  {
    if (*(_QWORD *)(a1 + 488))
    {
      std::string::basic_string[abi:ne180100]<0>(&v104, "avc.rtp.session");
      std::string::basic_string[abi:ne180100]<0>(&v101, (char *)&str_2_23);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v19 = ImsLogger::debug(ims::_logger, (uint64_t)&v104, (uint64_t)&v101);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"Setting direction on session configuration for session ", 55);
      *(_BYTE *)(v19 + 17) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 176))(a1 + 24);
      std::ostream::operator<<();
      *(_BYTE *)(v19 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v19 + 17) = 0;
      if (v103 < 0)
        operator delete(v101);
      if (v106 < 0)
        operator delete(v104);
      objc_msgSend(*(id *)(a1 + 488), "setDirection:", v8);
      objc_msgSend(*(id *)(a1 + 488), "setRtpTimeOutEnabled:", *(_DWORD *)(a1 + 248) == 1);
      objc_msgSend(*(id *)(a1 + 488), "setRtcpTimeOutEnabled:", *(_DWORD *)(a1 + 248) != 1);
      v20 = *(_DWORD *)(a1 + 248) != 1 || *(_DWORD *)(a1 + 424) != 0;
      objc_msgSend(*(id *)(a1 + 488), "setRtcpEnabled:", v20);
      v29 = 428;
      if (*(_DWORD *)(a1 + 248) == 1)
        v29 = 424;
      LODWORD(v28) = *(_DWORD *)(a1 + v29);
      objc_msgSend(*(id *)(a1 + 488), "setRtcpSendInterval:", (double)v28);
    }
    v104 = 0;
    v105 = 0;
    v30 = *(std::__shared_weak_count **)(a1 + 40);
    if (v30)
    {
      v105 = std::__shared_weak_count::lock(v30);
      if (v105)
      {
        v31 = *(void **)(a1 + 32);
        v104 = v31;
        if (v31)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v82);
          (*(void (**)(void *, void **, _QWORD))(*(_QWORD *)v31 + 32))(v31, &v82, 0);
          v32 = v83;
          if (v83)
          {
            p_shared_owners = (unint64_t *)&v83->__shared_owners_;
            do
              v34 = __ldaxr(p_shared_owners);
            while (__stlxr(v34 - 1, p_shared_owners));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
        }
      }
    }
    v16 = v105;
    if (!v105)
      return 1;
    v35 = (unint64_t *)&v105->__shared_owners_;
    do
      v18 = __ldaxr(v35);
    while (__stlxr(v18 - 1, v35));
    goto LABEL_74;
  }
  if (v8 != objc_msgSend(*(id *)(a1 + 480), "direction"))
  {
    v21 = objc_msgSend(*(id *)(a1 + 480), "direction");
    objc_msgSend(*(id *)(a1 + 480), "setDirection:", v8);
    objc_msgSend(*(id *)(a1 + 488), "setDirection:", v8);
    if (v21)
    {
      if (*a2 == 4)
      {
        objc_msgSend(*(id *)(a1 + 480), "pause");
        return 1;
      }
      v37 = v7 ^ 1;
      if (v9 == 3)
        v37 = 1;
      if ((v37 & 1) != 0)
      {
        v101 = 0;
        v102 = 0;
        RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, (void **)&v101);
        v68 = *(_QWORD *)(a1 + 56);
        LoggableString::LoggableString((LoggableString *)&v104, "avc.rtp.session");
        v69 = v101;
        v70 = (std::__shared_weak_count *)v102;
        v86[0] = (uint64_t)v101;
        v86[1] = v102;
        if (v102)
        {
          v71 = (unint64_t *)(v102 + 8);
          do
            v72 = __ldxr(v71);
          while (__stxr(v72 + 1, v71));
          v73 = v102;
        }
        else
        {
          v73 = 0;
        }
        v84[0] = MEMORY[0x1E0C809B0];
        v84[1] = 3321888768;
        v84[2] = ___ZN13AVCRTPSessionI13AVCTextStreamE12setDirectionERK14MediaDirectionb_block_invoke_3;
        v84[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
        v84[4] = a1;
        v84[5] = v69;
        v85 = (std::__shared_weak_count *)v73;
        if (v73)
        {
          v74 = (unint64_t *)(v73 + 8);
          do
            v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
        }
        RTPManager::performBlock(v68, (uint64_t)&v104, v86, (uint64_t)v84);
        if (v70)
        {
          v76 = (unint64_t *)&v70->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        if (v106 < 0)
          operator delete(v104);
        v78 = v85;
        if (v85)
        {
          v79 = (unint64_t *)&v85->__shared_owners_;
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        v16 = (std::__shared_weak_count *)v102;
        if (!v102)
          return 1;
        v81 = (unint64_t *)(v102 + 8);
        do
          v18 = __ldaxr(v81);
        while (__stlxr(v18 - 1, v81));
      }
      else
      {
        *(_BYTE *)(a1 + 476) = 1;
        v104 = 0;
        v105 = 0;
        RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v104);
        v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 104))(a1 + 24);
        RTPSharedPointerBase::getShared<AVCRTPSession<AVCTextStream>>((void **)&v101, a1);
        if (v38 == 2)
          v39 = 2;
        else
          v39 = 3;
        v40 = v101 + 24;
        if (!v101)
          v40 = 0;
        v89 = v40;
        v90 = (std::__shared_weak_count *)v102;
        v101 = 0;
        v102 = 0;
        v87[0] = MEMORY[0x1E0C809B0];
        v87[1] = 3321888768;
        v87[2] = ___ZN13AVCRTPSessionI13AVCTextStreamE12setDirectionERK14MediaDirectionb_block_invoke_2;
        v87[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
        v87[4] = a1;
        v87[5] = v104;
        v88 = v105;
        if (v105)
        {
          v41 = (unint64_t *)&v105->__shared_owners_;
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        MediaSessionDriver::startTimerForRequest(a1 + 24, v39, (uint64_t *)&v89, v87);
        v43 = v90;
        if (v90)
        {
          v44 = (unint64_t *)&v90->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v46 = (std::__shared_weak_count *)v102;
        if (v102)
        {
          v47 = (unint64_t *)(v102 + 8);
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        objc_msgSend(*(id *)(a1 + 480), "stop");
        v49 = v88;
        if (v88)
        {
          v50 = (unint64_t *)&v88->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        v16 = v105;
        if (!v105)
          return 1;
        v52 = (unint64_t *)&v105->__shared_owners_;
        do
          v18 = __ldaxr(v52);
        while (__stlxr(v18 - 1, v52));
      }
    }
    else
    {
      if ((unint64_t)AVCRTPStackController::audioSessionCount(*(AVCRTPStackController **)(a1 + 504)) >= 2)
        *(_BYTE *)(a1 + 476) = 1;
      if (*a2 == 4)
      {
        v104 = 0;
        v105 = 0;
        v22 = *(std::__shared_weak_count **)(a1 + 40);
        if (v22)
        {
          v105 = std::__shared_weak_count::lock(v22);
          if (v105)
          {
            v23 = *(void **)(a1 + 32);
            v104 = v23;
            if (v23)
            {
              RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v91);
              (*(void (**)(void *, void **, _QWORD))(*(_QWORD *)v23 + 24))(v23, &v91, 0);
              v24 = v92;
              if (v92)
              {
                v25 = (unint64_t *)&v92->__shared_owners_;
                do
                  v26 = __ldaxr(v25);
                while (__stlxr(v26 - 1, v25));
                if (!v26)
                {
                  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                  std::__shared_weak_count::__release_weak(v24);
                }
              }
            }
          }
        }
        v16 = v105;
        if (!v105)
          return 1;
        v27 = (unint64_t *)&v105->__shared_owners_;
        do
          v18 = __ldaxr(v27);
        while (__stlxr(v18 - 1, v27));
      }
      else
      {
        if (!*(_BYTE *)(a1 + 476))
        {
          objc_msgSend(*(id *)(a1 + 480), "resume");
          return 1;
        }
        v104 = 0;
        v105 = 0;
        RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v104);
        v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 104))(a1 + 24);
        RTPSharedPointerBase::getShared<AVCRTPSession<AVCTextStream>>((void **)&v101, a1);
        if (v53 == 2)
          v54 = 2;
        else
          v54 = 3;
        v55 = v101 + 24;
        if (!v101)
          v55 = 0;
        v95 = v55;
        v96 = (std::__shared_weak_count *)v102;
        v101 = 0;
        v102 = 0;
        v93[0] = MEMORY[0x1E0C809B0];
        v93[1] = 3321888768;
        v93[2] = ___ZN13AVCRTPSessionI13AVCTextStreamE12setDirectionERK14MediaDirectionb_block_invoke;
        v93[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
        v93[4] = a1;
        v93[5] = v104;
        v94 = v105;
        if (v105)
        {
          v56 = (unint64_t *)&v105->__shared_owners_;
          do
            v57 = __ldxr(v56);
          while (__stxr(v57 + 1, v56));
        }
        MediaSessionDriver::startTimerForRequest(a1 + 24, v54, (uint64_t *)&v95, v93);
        v58 = v96;
        if (v96)
        {
          v59 = (unint64_t *)&v96->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v61 = (std::__shared_weak_count *)v102;
        if (v102)
        {
          v62 = (unint64_t *)(v102 + 8);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        objc_msgSend(*(id *)(a1 + 480), "stop");
        v64 = v94;
        if (v94)
        {
          v65 = (unint64_t *)&v94->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        v16 = v105;
        if (!v105)
          return 1;
        v67 = (unint64_t *)&v105->__shared_owners_;
        do
          v18 = __ldaxr(v67);
        while (__stlxr(v18 - 1, v67));
      }
    }
LABEL_74:
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    return 1;
  }
  v104 = 0;
  v105 = 0;
  v11 = *(std::__shared_weak_count **)(a1 + 40);
  if (v11)
  {
    v105 = std::__shared_weak_count::lock(v11);
    if (v105)
    {
      v12 = *(void **)(a1 + 32);
      v104 = v12;
      if (v12)
      {
        RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v97);
        (*(void (**)(void *, void **, _QWORD))(*(_QWORD *)v12 + 24))(v12, &v97, 0);
        v13 = v98;
        if (v98)
        {
          v14 = (unint64_t *)&v98->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
    }
  }
  v16 = v105;
  if (v105)
  {
    v17 = (unint64_t *)&v105->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    goto LABEL_74;
  }
  return 1;
}

void sub_1BF0F735C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v30 - 104);
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTPSessionI13AVCTextStreamE12setDirectionERK14MediaDirectionb_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = a1[4];
  v16 = 0;
  v17 = 0;
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v17 = std::__shared_weak_count::lock(v3);
    if (v17)
    {
      v4 = *(_QWORD *)(v2 + 32);
      v16 = v4;
      if (v4)
      {
        v5 = (std::__shared_weak_count *)a1[6];
        v14 = a1[5];
        v15 = v5;
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 32))(v4, &v14, 9);
        v8 = v15;
        if (v15)
        {
          v9 = (unint64_t *)&v15->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
    }
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF0F759C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTPSessionI13AVCTextStreamE12setDirectionERK14MediaDirectionb_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = a1[4];
  v16 = 0;
  v17 = 0;
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v17 = std::__shared_weak_count::lock(v3);
    if (v17)
    {
      v4 = *(_QWORD *)(v2 + 32);
      v16 = v4;
      if (v4)
      {
        v5 = (std::__shared_weak_count *)a1[6];
        v14 = a1[5];
        v15 = v5;
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 32))(v4, &v14, 9);
        v8 = v15;
        if (v15)
        {
          v9 = (unint64_t *)&v15->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
    }
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF0F76A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTPSessionI13AVCTextStreamE12setDirectionERK14MediaDirectionb_block_invoke_3(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = a1[4];
  v16 = 0;
  v17 = 0;
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v17 = std::__shared_weak_count::lock(v3);
    if (v17)
    {
      v4 = *(_QWORD *)(v2 + 32);
      v16 = v4;
      if (v4)
      {
        v5 = (std::__shared_weak_count *)a1[6];
        v14 = a1[5];
        v15 = v5;
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v4 + 24))(v4, &v14, 0);
        v8 = v15;
        if (v15)
        {
          v9 = (unint64_t *)&v15->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
    }
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF0F77B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'AVCRTPSession<AVCTextStream>::setDirection(uint64_t a1, int *a2)
{
  return AVCRTPSession<AVCTextStream>::setDirection(a1 - 24, a2);
}

void AVCRTPSession<AVCTextStream>::setConfiguration(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  _BYTE *v11;
  int v12;
  _BYTE *v13;
  std::__shared_weak_count *v14;
  IpAddress *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void **v18;
  id v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::string v51;
  std::string v52;
  IpAddress *v53;
  std::__shared_weak_count *v54;
  _BYTE *v55;
  std::__shared_weak_count *v56;
  void *__p[2];
  char v58;
  void *v59[2];
  uint64_t v60;

  std::string::basic_string[abi:ne180100]<0>(v59, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v59, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"setConfiguration", 16);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v6 + 17) = 0;
  v7 = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v58 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v60) < 0)
    operator delete(v59[0]);
  v8 = (void *)MEMORY[0x1C3B876AC](v7);
  v55 = 0;
  v56 = 0;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v56 = v10;
    if (v10)
    {
      v11 = (_BYTE *)*a2;
      v55 = v11;
      goto LABEL_10;
    }
  }
  else
  {
    v10 = 0;
  }
  v11 = 0;
LABEL_10:
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 104))(a1 + 24);
  if (v12 == 2)
  {
    if (v11[584])
    {
      v13 = v11 + 152;
      goto LABEL_18;
    }
  }
  else if (v12 == 6 && v11[1856])
  {
    v13 = v11 + 1496;
    goto LABEL_18;
  }
  if (!v11[1328])
  {
    std::string::basic_string[abi:ne180100]<0>(v59, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v44 = ImsLogger::warn(ims::_logger, (uint64_t)v59, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"Not enough information to configure with", 40);
    *(_BYTE *)(v44 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v44 + 17) = 0;
    if (v58 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v60) < 0)
      operator delete(v59[0]);
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741825;
    if (v10)
      goto LABEL_89;
    goto LABEL_93;
  }
  v13 = v11 + 1032;
LABEL_18:
  v15 = (IpAddress *)*((_QWORD *)v13 + 1);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 2);
  v53 = v15;
  v54 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if (v15)
  {
    IpAddress::asString(v15, 0, v59);
    v18 = (void **)(a1 + 520);
    if (*(char *)(a1 + 543) < 0)
      operator delete(*v18);
    *(_OWORD *)v18 = *(_OWORD *)v59;
    *(_QWORD *)(a1 + 536) = v60;
    *(_BYTE *)(a1 + 544) = (*(unsigned int (**)(IpAddress *))(*(_QWORD *)v15 + 136))(v15) == 2;
    goto LABEL_25;
  }
  if (*(char *)(a1 + 543) < 0)
  {
    if (!*(_QWORD *)(a1 + 528))
    {
LABEL_70:
      std::string::basic_string[abi:ne180100]<0>(v59, "avc.rtp.session");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v43 = ImsLogger::error(ims::_logger, (uint64_t)v59, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v43 + 8), (uint64_t)"No remote connection found for session", 38);
      *(_BYTE *)(v43 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_71;
    }
  }
  else if (!*(_BYTE *)(a1 + 543))
  {
    goto LABEL_70;
  }
LABEL_25:
  if (*(_QWORD *)(a1 + 488))
  {
    v19 = objc_alloc(MEMORY[0x1E0CB3940]);
    v20 = (_QWORD *)(a1 + 520);
    if (*(char *)(a1 + 543) < 0)
      v20 = (_QWORD *)*v20;
    v21 = (void *)objc_msgSend(v19, "initWithUTF8String:", v20);
    objc_msgSend(*(id *)(a1 + 488), "remoteAddress");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "setIp:", v21);

    v23 = *(unsigned __int8 *)(a1 + 544);
    objc_msgSend(*(id *)(a1 + 488), "remoteAddress");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "setIsIPv6:", v23 != 0);

    objc_msgSend(*(id *)(a1 + 488), "remoteAddress");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "setInterfaceName:", &stru_1E78F26B0);

    v26 = *((unsigned __int16 *)v13 + 13);
    objc_msgSend(*(id *)(a1 + 488), "remoteAddress");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "setPort:", v26);

    v28 = (*(_DWORD *)(a1 + 248) - 2);
    if (v28 >= 3)
      v29 = 3;
    else
      v29 = 2 - v28;
    objc_msgSend(*(id *)(a1 + 488), "setDirection:", v29);
    std::string::basic_string[abi:ne180100]<0>(v59, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v30 = ImsLogger::debug(ims::_logger, (uint64_t)v59, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"direction set to ", 17);
    *(_BYTE *)(v30 + 17) = 0;
    ims::toString<MediaDirection>((unsigned int *)(a1 + 248), &v51);
    LoggableString::LoggableString(&v52, &v51);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v30 + 40))(v30, &v52);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v30 + 17) = 0;
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    if (v58 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v60) < 0)
      operator delete(v59[0]);
    if (v13[184])
    {
      v31 = 2;
      if (v13[179])
        v31 = 3;
      if (v13[177])
        v32 = v31;
      else
        v32 = v13[179];
      objc_msgSend(*(id *)(a1 + 488), "setSRTPCipherSuite:", v32);
      if (v13[178])
        v33 = 3;
      else
        v33 = 1;
      objc_msgSend(*(id *)(a1 + 488), "setSRTCPCipherSuite:", v33);
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", *((_QWORD *)v13 + 19), *((_QWORD *)v13 + 20) - *((_QWORD *)v13 + 19));
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 488), "setSendMasterKey:", v34);

    }
    if (v13[272])
    {
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", *((_QWORD *)v13 + 30), *((_QWORD *)v13 + 31) - *((_QWORD *)v13 + 30));
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 488), "setReceiveMasterKey:", v35);

    }
    v36 = *(id *)(a1 + 488);
    v37 = v36;
    if (v36)
    {
      if (*(_QWORD *)(a1 + 496))
      {
        objc_msgSend(v36, "description");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 496), "description");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = objc_msgSend(v38, "isEqualToString:", v39);
        std::string::basic_string[abi:ne180100]<0>(v59, "avc.rtp.session");
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v41 = ImsLogger::debug(ims::_logger, (uint64_t)v59, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)"isConfigEqualToActiveConfig", 27);
        *(_BYTE *)(v41 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)" [sessionId=", 12);
        *(_BYTE *)(v41 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v41 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)" isEqual=", 9);
        *(_BYTE *)(v41 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v41 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v41 + 17) = 0;
        if (v58 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v60) < 0)
          operator delete(v59[0]);

        v42 = v40 ^ 1;
LABEL_82:

        v46 = 0;
        *(_BYTE *)(a1 + 476) = v42;
        goto LABEL_83;
      }
      std::string::basic_string[abi:ne180100]<0>(v59, "avc.rtp.session");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v45 = ImsLogger::warn(ims::_logger, (uint64_t)v59, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v45 + 8), (uint64_t)"isConfigEqualToActiveConfig", 27);
      *(_BYTE *)(v45 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v45 + 8), (uint64_t)" [sessionId=", 12);
      *(_BYTE *)(v45 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v45 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v45 + 8), (uint64_t)" activeAvcSessionConfig is null", 31);
      *(_BYTE *)(v45 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v59, "avc.rtp.session");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v45 = ImsLogger::warn(ims::_logger, (uint64_t)v59, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v45 + 8), (uint64_t)"isConfigEqualToActiveConfig", 27);
      *(_BYTE *)(v45 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v45 + 8), (uint64_t)" [sessionId=", 12);
      *(_BYTE *)(v45 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v45 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v45 + 8), (uint64_t)" config is null", 15);
      *(_BYTE *)(v45 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    *(_BYTE *)(v45 + 17) = 0;
    if (v58 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v60) < 0)
      operator delete(v59[0]);
    v42 = 1;
    goto LABEL_82;
  }
  std::string::basic_string[abi:ne180100]<0>(v59, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v43 = ImsLogger::error(ims::_logger, (uint64_t)v59, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v43 + 8), (uint64_t)"AVC config is null. Was supposed to be allocated in Audio or RTT session.", 73);
  *(_BYTE *)(v43 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_71:
  *(_BYTE *)(v43 + 17) = 0;
  if (v58 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v60) < 0)
    operator delete(v59[0]);
  v46 = 1073741825;
LABEL_83:
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = v46;
  if (v14)
  {
    v47 = (unint64_t *)&v14->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v10 = v56;
  if (v56)
  {
LABEL_89:
    v49 = (unint64_t *)&v10->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_93:
  objc_autoreleasePoolPop(v8);
}

void sub_1BF0F821C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;

  if (a36 < 0)
    operator delete(__p);

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_1BF0F83CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  JUMPOUT(0x1BF0F83C4);
}

void `non-virtual thunk to'AVCRTPSession<AVCTextStream>::setConfiguration(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  AVCRTPSession<AVCTextStream>::setConfiguration(a1 - 24, a2, a3);
}

uint64_t AVCRTPSession<AVCTextStream>::configure(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  void *v30;
  std::__shared_weak_count *v31;
  _QWORD v32[6];
  std::__shared_weak_count *v33;
  char *v34;
  std::__shared_weak_count *v35;
  char *v36;
  std::__shared_weak_count *v37;
  char v38;
  void *v39;
  std::__shared_weak_count *v40;
  char v41;

  std::string::basic_string[abi:ne180100]<0>(&v39, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(&v36, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v39, (uint64_t)&v36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"configure", 9);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v2 + 17) = 0;
  v3 = a1 + 24;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" _reconfigureNeeded=", 20);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v38 < 0)
    operator delete(v36);
  if (v41 < 0)
    operator delete(v39);
  if (*(_BYTE *)(a1 + 473) && *(_BYTE *)(a1 + 476))
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(&v36, (char *)&str_2_23);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v39, (uint64_t)&v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Reconfiguring session ", 22);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 176))(a1 + 24);
    std::ostream::operator<<();
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if (v38 < 0)
      operator delete(v36);
    if (v41 < 0)
      operator delete(v39);
    *(_BYTE *)(a1 + 475) = 1;
    v39 = 0;
    v40 = 0;
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v39);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 104))(a1 + 24);
    RTPSharedPointerBase::getShared<AVCRTPSession<AVCTextStream>>((void **)&v36, a1);
    if (v5 == 2)
      v6 = 2;
    else
      v6 = 3;
    v7 = v36 + 24;
    if (!v36)
      v7 = 0;
    v34 = v7;
    v35 = v37;
    v36 = 0;
    v37 = 0;
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3321888768;
    v32[2] = ___ZN13AVCRTPSessionI13AVCTextStreamE9configureEb_block_invoke;
    v32[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrI21MediaSessionInterfaceEE_e5_v8__0l;
    v32[4] = a1;
    v32[5] = v39;
    v33 = v40;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    MediaSessionDriver::startTimerForRequest(a1 + 24, v6, (uint64_t *)&v34, v32);
    v10 = v35;
    if (v35)
    {
      v11 = (unint64_t *)&v35->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v37;
    if (v37)
    {
      v14 = (unint64_t *)&v37->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    objc_msgSend(*(id *)(a1 + 480), "stop");
    v16 = v33;
    if (v33)
    {
      v17 = (unint64_t *)&v33->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = v40;
    if (v40)
    {
      v20 = (unint64_t *)&v40->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      goto LABEL_53;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "avc.rtp.session");
    std::string::basic_string[abi:ne180100]<0>(&v36, (char *)&str_2_23);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v22 = ImsLogger::debug(ims::_logger, (uint64_t)&v39, (uint64_t)&v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"Ignoring configure request for session ", 39);
    *(_BYTE *)(v22 + 17) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 176))(a1 + 24);
    std::ostream::operator<<();
    *(_BYTE *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v22 + 17) = 0;
    if (v38 < 0)
      operator delete(v36);
    if (v41 < 0)
      operator delete(v39);
    v39 = 0;
    v40 = 0;
    v23 = *(std::__shared_weak_count **)(a1 + 40);
    if (v23)
    {
      v40 = std::__shared_weak_count::lock(v23);
      if (v40)
      {
        v24 = *(void **)(a1 + 32);
        v39 = v24;
        if (v24)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v30);
          (*(void (**)(void *, void **, _QWORD))(*(_QWORD *)v24 + 16))(v24, &v30, 0);
          v25 = v31;
          if (v31)
          {
            v26 = (unint64_t *)&v31->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
        }
      }
    }
    v19 = v40;
    if (v40)
    {
      v28 = (unint64_t *)&v40->__shared_owners_;
      do
        v21 = __ldaxr(v28);
      while (__stlxr(v21 - 1, v28));
LABEL_53:
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  return 1;
}

void sub_1BF0F891C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 56);
  _Unwind_Resume(a1);
}

void ___ZN13AVCRTPSessionI13AVCTextStreamE9configureEb_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = a1[4];
  v16 = 0;
  v17 = 0;
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v17 = std::__shared_weak_count::lock(v3);
    if (v17)
    {
      v4 = *(_QWORD *)(v2 + 32);
      v16 = v4;
      if (v4)
      {
        v5 = (std::__shared_weak_count *)a1[6];
        v14 = a1[5];
        v15 = v5;
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 32))(v4, &v14, 9);
        v8 = v15;
        if (v15)
        {
          v9 = (unint64_t *)&v15->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
    }
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF0F8AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'AVCRTPSession<AVCTextStream>::configure(uint64_t a1)
{
  return AVCRTPSession<AVCTextStream>::configure(a1 - 24);
}

uint64_t AVCRTPSession<AVCTextStream>::active(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v6, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"active", 6);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" active=", 8);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  return *(unsigned __int8 *)(a1 + 473);
}

void sub_1BF0F8C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'AVCRTPSession<AVCTextStream>::active(uint64_t a1)
{
  return AVCRTPSession<AVCTextStream>::active(a1 - 24);
}

uint64_t AVCRTPSession<AVCTextStream>::paused(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v6, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"paused", 6);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" paused=", 8);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  return *(unsigned __int8 *)(a1 + 474);
}

void sub_1BF0F8D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'AVCRTPSession<AVCTextStream>::paused(uint64_t a1)
{
  return AVCRTPSession<AVCTextStream>::paused(a1 - 24);
}

void AVCRTPSession<AVCTextStream>::pauseAVCSession(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(v8, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"pauseAVCSession", 15);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v2 + 17) = 0;
  v3 = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  v4 = (void *)MEMORY[0x1C3B876AC](v3);
  std::string::basic_string[abi:ne180100]<0>(v8, "avc.rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_23);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Pausing session ", 16);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 176))(a1 + 24);
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  objc_msgSend(*(id *)(a1 + 480), "pause");
  objc_autoreleasePoolPop(v4);
}

void sub_1BF0F8FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AVCRTPSession<AVCTextStream>::toTimerIdString@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v2;
  uint64_t result;

  switch(a1)
  {
    case 0:
      v2 = "AUDIO_SESSION_START";
      goto LABEL_7;
    case 1:
      v2 = "TEXT_SESSION_START";
      goto LABEL_7;
    case 2:
      v2 = "AUDIO_SESSION_STOP";
      goto LABEL_7;
    case 3:
      v2 = "TEXT_SESSION_STOP";
LABEL_7:
      result = (uint64_t)std::string::basic_string[abi:ne180100]<0>(a2, v2);
      break;
    default:
      result = ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()(a2);
      break;
  }
  return result;
}

uint64_t `non-virtual thunk to'AVCRTPSession<AVCTextStream>::toTimerIdString@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  return AVCRTPSession<AVCTextStream>::toTimerIdString(a1, a2);
}

void _GLOBAL__sub_I_AVCRTPSession_mm()
{
  objc_autoreleasePoolPop((void *)MEMORY[0x1C3B876AC]());
}

void MediaSessionQueue::initialize(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t *a7)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  uint64_t v23;
  size_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  void *__p[2];
  char v30;
  void *v31[2];
  char v32;
  uint64_t v33;
  std::__shared_weak_count *v34;

  v33 = 0;
  v34 = 0;
  v8 = (std::__shared_weak_count *)a1[18];
  if (v8)
  {
    v15 = std::__shared_weak_count::lock(v8);
    v34 = v15;
    if (v15)
    {
      v16 = a1[17];
      v33 = v16;
      if (v16)
      {
        std::string::basic_string[abi:ne180100]<0>(v31, "rtp.queue");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v17 = ImsLogger::debug(ims::_logger, (uint64_t)v31, (uint64_t)__p);
        v18 = (const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        v19 = strlen(v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)v18, v19);
        *(_BYTE *)(v17 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"::", 2);
        *(_BYTE *)(v17 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"initialize", 10);
        *(_BYTE *)(v17 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)" [queuedInterface=", 18);
        *(_BYTE *)(v17 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v17 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)" sessionId=", 11);
        *(_BYTE *)(v17 + 17) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 176))(v16);
        std::ostream::operator<<();
        *(_BYTE *)(v17 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"]", 1);
        *(_BYTE *)(v17 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v17 + 17) = 0;
        if (v30 < 0)
          operator delete(__p[0]);
        if (v32 < 0)
          operator delete(v31[0]);
        v20 = (std::__shared_weak_count *)a7[1];
        v27 = *a7;
        v28 = v20;
        if (v20)
        {
          p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
          do
            v22 = __ldxr(p_shared_weak_owners);
          while (__stxr(v22 + 1, p_shared_weak_owners));
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v16 + 16))(v16, a2, a3, a4, a5, a6, &v27);
        if (v28)
          std::__shared_weak_count::__release_weak(v28);
LABEL_19:
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        return;
      }
    }
  }
  else
  {
    v15 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v31, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v23 = ImsLogger::warn(ims::_logger, (uint64_t)v31, (uint64_t)__p);
  v24 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v24);
  *(_BYTE *)(v23 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v23 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"initialize", 10);
  *(_BYTE *)(v23 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
  *(_BYTE *)(v23 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v23 + 17) = 0;
  if (v30 < 0)
    operator delete(__p[0]);
  if (v32 < 0)
    operator delete(v31[0]);
  if (v15)
    goto LABEL_19;
}

void sub_1BF0F9420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a12)
    std::__shared_weak_count::__release_weak(a12);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'MediaSessionQueue::initialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t *a7)
{
  MediaSessionQueue::initialize((_QWORD *)(a1 - 24), a2, a3, a4, a5, a6, a7);
}

uint64_t MediaSessionQueue::terminate(MediaSessionQueue *this, uint64_t a2)
{
  (*(void (**)(MediaSessionQueue *, uint64_t, uint64_t))(*(_QWORD *)this + 232))(this, 1, a2);
  return 1;
}

uint64_t `non-virtual thunk to'MediaSessionQueue::terminate(MediaSessionQueue *this, uint64_t a2)
{
  (*(void (**)(char *, uint64_t, uint64_t))(*((_QWORD *)this - 3) + 232))((char *)this - 24, 1, a2);
  return 1;
}

uint64_t MediaSessionQueue::start(MediaSessionQueue *this)
{
  (*(void (**)(MediaSessionQueue *, uint64_t, _QWORD))(*(_QWORD *)this + 232))(this, 2, 0);
  return 1;
}

uint64_t `non-virtual thunk to'MediaSessionQueue::start(MediaSessionQueue *this)
{
  (*(void (**)(char *, uint64_t, _QWORD))(*((_QWORD *)this - 3) + 232))((char *)this - 24, 2, 0);
  return 1;
}

uint64_t MediaSessionQueue::stop(MediaSessionQueue *this, uint64_t a2)
{
  (*(void (**)(MediaSessionQueue *, uint64_t, uint64_t))(*(_QWORD *)this + 232))(this, 3, a2);
  return 1;
}

uint64_t `non-virtual thunk to'MediaSessionQueue::stop(MediaSessionQueue *this, uint64_t a2)
{
  (*(void (**)(char *, uint64_t, uint64_t))(*((_QWORD *)this - 3) + 232))((char *)this - 24, 3, a2);
  return 1;
}

uint64_t MediaSessionQueue::setDirection(_DWORD *a1, _DWORD *a2)
{
  a1[38] = *a2;
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 232))(a1, 4);
  return 1;
}

uint64_t `non-virtual thunk to'MediaSessionQueue::setDirection(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 - 24);
  *(_DWORD *)(a1 + 128) = *a2;
  (*(void (**)(void))(v2 + 232))();
  return 1;
}

double MediaSessionQueue::setConfiguration@<D0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  double result;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  size_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v5 = (std::__shared_weak_count *)a1[18];
  if (!v5)
    goto LABEL_21;
  v7 = std::__shared_weak_count::lock(v5);
  v30 = v7;
  if (!v7)
    goto LABEL_21;
  v8 = v7;
  v9 = a1[17];
  v29 = v9;
  if (!v9)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
      goto LABEL_20;
LABEL_21:
    std::string::basic_string[abi:ne180100]<0>(v27, "rtp.queue");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v20 = ImsLogger::warn(ims::_logger, (uint64_t)v27, (uint64_t)__p);
    v21 = (const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v22 = strlen(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)v21, v22);
    *(_BYTE *)(v20 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v20 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"setConfiguration", 16);
    *(_BYTE *)(v20 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
    *(_BYTE *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v20 + 17) = 0;
    if (v26 < 0)
      operator delete(__p[0]);
    if (v28 < 0)
      operator delete(v27[0]);
    result = 0.0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0x40000000;
    return result;
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::debug(ims::_logger, (uint64_t)v27, (uint64_t)__p);
  v11 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"setConfiguration", 16);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 176))(v9);
  std::ostream::operator<<();
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete(v27[0]);
  v12 = (std::__shared_weak_count *)a2[1];
  v23 = *a2;
  v24 = v12;
  if (v12)
  {
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 56))(v9, &v23);
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
  v16 = (unint64_t *)&v8->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
LABEL_20:
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (v9)
      return result;
    goto LABEL_21;
  }
  return result;
}

void sub_1BF0F9934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

double `non-virtual thunk to'MediaSessionQueue::setConfiguration@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return MediaSessionQueue::setConfiguration((_QWORD *)(a1 - 24), a2, a3);
}

uint64_t MediaSessionQueue::configure(MediaSessionQueue *this, uint64_t a2)
{
  (*(void (**)(MediaSessionQueue *, _QWORD, uint64_t))(*(_QWORD *)this + 232))(this, 0, a2);
  return 1;
}

uint64_t `non-virtual thunk to'MediaSessionQueue::configure(MediaSessionQueue *this, uint64_t a2)
{
  (*(void (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this - 3) + 232))((char *)this - 24, 0, a2);
  return 1;
}

BOOL MediaSessionQueue::pop(MediaSessionQueue *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  _BOOL8 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  size_t v19;
  char v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  size_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v33;
  void *__p[2];
  char v35;
  void *v36[2];
  char v37;

  std::string::basic_string[abi:ne180100]<0>(v36, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v36, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"pop", 3);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [actionQueueSize=", 18);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v35 < 0)
    operator delete(__p[0]);
  if (v37 < 0)
    operator delete(v36[0]);
  v6 = *((_QWORD *)this + 16);
  if (!v6)
    return 0;
  v7 = (uint64_t *)*((_QWORD *)this + 15);
  v8 = *((_DWORD *)v7 + 4);
  v10 = v7[3];
  v9 = (std::__shared_weak_count *)v7[4];
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    v7 = (uint64_t *)*((_QWORD *)this + 15);
    v6 = *((_QWORD *)this + 16);
    v13 = (std::__shared_weak_count *)v7[4];
  }
  else
  {
    v13 = 0;
  }
  v15 = *v7;
  *(_QWORD *)(v15 + 8) = v7[1];
  *(_QWORD *)v7[1] = v15;
  *((_QWORD *)this + 16) = v6 - 1;
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  operator delete(v7);
  if (v9)
  {
    v16 = std::__shared_weak_count::lock(v9);
    if (v16)
    {
      v17 = v16;
      if (v10)
      {
        switch(v8)
        {
          case 0:
            std::string::basic_string[abi:ne180100]<0>(v36, "rtp.queue");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v18 = ImsLogger::debug(ims::_logger, (uint64_t)v36, (uint64_t)__p);
            v19 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v19);
            *(_BYTE *)(v18 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"::", 2);
            *(_BYTE *)(v18 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"pop", 3);
            *(_BYTE *)(v18 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)" [sessionId=", 12);
            *(_BYTE *)(v18 + 17) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 176))(v10);
            std::ostream::operator<<();
            *(_BYTE *)(v18 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"]", 1);
            *(_BYTE *)(v18 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v18 + 17) = 0;
            if (v35 < 0)
              operator delete(__p[0]);
            if (v37 < 0)
              operator delete(v36[0]);
            v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 64))(v10, 1);
            break;
          case 1:
            std::string::basic_string[abi:ne180100]<0>(v36, "rtp.queue");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v27 = ImsLogger::debug(ims::_logger, (uint64_t)v36, (uint64_t)__p);
            v28 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v28);
            *(_BYTE *)(v27 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"::", 2);
            *(_BYTE *)(v27 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"pop", 3);
            *(_BYTE *)(v27 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)" [sessionId=", 12);
            *(_BYTE *)(v27 + 17) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 176))(v10);
            std::ostream::operator<<();
            *(_BYTE *)(v27 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"]", 1);
            *(_BYTE *)(v27 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v27 + 17) = 0;
            if (v35 < 0)
              operator delete(__p[0]);
            if (v37 < 0)
              operator delete(v36[0]);
            v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 24))(v10, 1);
            break;
          case 2:
            std::string::basic_string[abi:ne180100]<0>(v36, "rtp.queue");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v23 = ImsLogger::debug(ims::_logger, (uint64_t)v36, (uint64_t)__p);
            v24 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v24);
            *(_BYTE *)(v23 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"::", 2);
            *(_BYTE *)(v23 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"pop", 3);
            *(_BYTE *)(v23 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)" [sessionId=", 12);
            *(_BYTE *)(v23 + 17) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 176))(v10);
            std::ostream::operator<<();
            *(_BYTE *)(v23 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"]", 1);
            *(_BYTE *)(v23 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v23 + 17) = 0;
            if (v35 < 0)
              operator delete(__p[0]);
            if (v37 < 0)
              operator delete(v36[0]);
            v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, 1);
            break;
          case 3:
            std::string::basic_string[abi:ne180100]<0>(v36, "rtp.queue");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v25 = ImsLogger::debug(ims::_logger, (uint64_t)v36, (uint64_t)__p);
            v26 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v26);
            *(_BYTE *)(v25 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"::", 2);
            *(_BYTE *)(v25 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"pop", 3);
            *(_BYTE *)(v25 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)" [sessionId=", 12);
            *(_BYTE *)(v25 + 17) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 176))(v10);
            std::ostream::operator<<();
            *(_BYTE *)(v25 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"]", 1);
            *(_BYTE *)(v25 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v25 + 17) = 0;
            if (v35 < 0)
              operator delete(__p[0]);
            if (v37 < 0)
              operator delete(v36[0]);
            v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, 1);
            break;
          case 4:
            std::string::basic_string[abi:ne180100]<0>(v36, "rtp.queue");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v21 = ImsLogger::debug(ims::_logger, (uint64_t)v36, (uint64_t)__p);
            v22 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v22);
            *(_BYTE *)(v21 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"::", 2);
            *(_BYTE *)(v21 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"pop", 3);
            *(_BYTE *)(v21 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)" [sessionId=", 12);
            *(_BYTE *)(v21 + 17) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 176))(v10);
            std::ostream::operator<<();
            *(_BYTE *)(v21 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"]", 1);
            *(_BYTE *)(v21 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v21 + 17) = 0;
            if (v35 < 0)
              operator delete(__p[0]);
            if (v37 < 0)
              operator delete(v36[0]);
            v20 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v10 + 48))(v10, (char *)this + 152, 1);
            break;
          default:
            goto LABEL_46;
        }
        if ((v20 & 1) == 0)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v33 = __ldaxr(p_shared_owners);
          while (__stlxr(v33 - 1, p_shared_owners));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          v14 = 0;
          goto LABEL_51;
        }
      }
LABEL_46:
      v29 = (unint64_t *)&v17->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v14 = *((_QWORD *)this + 16) != 0;
LABEL_51:
    std::__shared_weak_count::__release_weak(v9);
    return v14;
  }
  return *((_QWORD *)this + 16) != 0;
}

void sub_1BF0FA340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::__shared_weak_count *v22;

  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::__release_weak(v22);
  _Unwind_Resume(a1);
}

uint64_t MediaSessionQueue::flush(MediaSessionQueue *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t result;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;

  std::string::basic_string[abi:ne180100]<0>(v9, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v9, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"flush", 5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [actionQueueSize=", 18);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v8 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  do
    result = (*(uint64_t (**)(MediaSessionQueue *))(*(_QWORD *)this + 184))(this);
  while ((result & 1) != 0);
  return result;
}

void sub_1BF0FA564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MediaSessionQueue::clear(MediaSessionQueue *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(v8, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v8, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"clear", 5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [actionQueueSize=", 18);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::__list_imp<std::pair<MediaSessionQueue::Action,std::weak_ptr<MediaSessionInterface>>>::clear((uint64_t *)this + 14);
}

void sub_1BF0FA700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionQueue::contains(_QWORD *a1, unsigned int a2)
{
  std::__shared_weak_count *v3;
  uint64_t i;
  int v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  _QWORD *v23;
  size_t v24;
  char *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  void *__p[2];
  char v29;
  void *v30[2];
  char v31;
  void *v32[2];
  char v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;

  v36 = 0;
  v37 = 0;
  v3 = (std::__shared_weak_count *)a1[18];
  if (v3)
  {
    v37 = std::__shared_weak_count::lock(v3);
    if (v37)
    {
      v36 = a1[17];
      if (v36)
      {
        for (i = a1[15]; (_QWORD *)i != a1 + 14; i = *(_QWORD *)(i + 8))
        {
          v6 = *(_DWORD *)(i + 16);
          v7 = *(std::__shared_weak_count **)(i + 32);
          if (v7)
          {
            v8 = *(_QWORD *)(i + 24);
            p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
            do
              v10 = __ldxr(p_shared_weak_owners);
            while (__stxr(v10 + 1, p_shared_weak_owners));
            if (v6 == a2)
            {
              v11 = std::__shared_weak_count::lock(v7);
              v35 = v11;
              if (v11)
              {
                v12 = v11;
                v34 = v8;
                if (v8 && v36 == v8)
                {
                  std::string::basic_string[abi:ne180100]<0>(v32, "rtp.queue");
                  std::string::basic_string[abi:ne180100]<0>(v30, "");
                  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
                  v20 = ImsLogger::debug(ims::_logger, (uint64_t)v32, (uint64_t)v30);
                  if (!a1)
                    __cxa_bad_typeid();
                  v21 = v20;
                  v22 = (const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
                  v23 = *(_QWORD **)(v20 + 8);
                  v24 = strlen(v22);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v22, v24);
                  *(_BYTE *)(v21 + 17) = 0;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"::", 2);
                  *(_BYTE *)(v21 + 17) = 0;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"contains", 8);
                  *(_BYTE *)(v21 + 17) = 0;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"Found [action=", 14);
                  *(_BYTE *)(v21 + 17) = 0;
                  if (a2 > 3)
                    v25 = "setDirection";
                  else
                    v25 = off_1E78DEE60[a2];
                  std::string::basic_string[abi:ne180100]<0>(__p, v25);
                  (*(void (**)(uint64_t, void **))(*(_QWORD *)v21 + 32))(v21, __p);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)" sessionId=", 11);
                  *(_BYTE *)(v21 + 17) = 0;
                  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 176))(v8);
                  std::ostream::operator<<();
                  *(_BYTE *)(v21 + 17) = 0;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"]", 1);
                  *(_BYTE *)(v21 + 17) = 0;
                  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  *(_BYTE *)(v21 + 17) = 0;
                  if (v29 < 0)
                    operator delete(__p[0]);
                  if (v31 < 0)
                    operator delete(v30[0]);
                  if (v33 < 0)
                    operator delete(v32[0]);
                  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
                  do
                    v27 = __ldaxr(p_shared_owners);
                  while (__stlxr(v27 - 1, p_shared_owners));
                  if (!v27)
                  {
                    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                    std::__shared_weak_count::__release_weak(v12);
                  }
                  std::__shared_weak_count::__release_weak(v7);
                  v15 = 1;
                  goto LABEL_20;
                }
                v13 = (unint64_t *)&v11->__shared_owners_;
                do
                  v14 = __ldaxr(v13);
                while (__stlxr(v14 - 1, v13));
                if (!v14)
                {
                  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
                  std::__shared_weak_count::__release_weak(v12);
                }
              }
            }
            std::__shared_weak_count::__release_weak(v7);
          }
        }
      }
    }
  }
  v15 = 0;
LABEL_20:
  v16 = v37;
  if (v37)
  {
    v17 = (unint64_t *)&v37->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v15;
}

void sub_1BF0FAA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  std::__shared_weak_count *v28;
  uint64_t v29;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::__shared_weak_count::__release_weak(v28);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v29 - 80);
  _Unwind_Resume(a1);
}

void MediaSessionQueue::queueAction(_QWORD *a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t i;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  _DWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  void *__p[2];
  char v46;
  void *v47[2];
  char v48;
  void *v49[2];
  char v50;
  uint64_t v51;
  std::__shared_weak_count *v52;

  v51 = 0;
  v52 = 0;
  v5 = (std::__shared_weak_count *)a1[18];
  if (!v5 || (v52 = std::__shared_weak_count::lock(v5)) == 0 || (v7 = a1[17], (v51 = v7) == 0))
  {
    std::string::basic_string[abi:ne180100]<0>(v49, "rtp.queue");
    std::string::basic_string[abi:ne180100]<0>(v47, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::warn(ims::_logger, (uint64_t)v49, (uint64_t)v47);
    v12 = (const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v13 = strlen(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)v12, v13);
    *(_BYTE *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"queueAction", 11);
    *(_BYTE *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" [action=", 9);
    *(_BYTE *)(v11 + 17) = 0;
    if (a2 > 3)
      v14 = "setDirection";
    else
      v14 = off_1E78DEE60[(int)a2];
    std::string::basic_string[abi:ne180100]<0>(__p, v14);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 32))(v11, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" queuedInterface=0x0]", 21);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (v46 < 0)
      operator delete(__p[0]);
    goto LABEL_21;
  }
  std::string::basic_string[abi:ne180100]<0>(v49, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(v47, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)v49, (uint64_t)v47);
  v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"queueAction", 11);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" [action=", 9);
  *(_BYTE *)(v8 + 17) = 0;
  if (a2 > 3)
    v10 = "setDirection";
  else
    v10 = off_1E78DEE60[(int)a2];
  std::string::basic_string[abi:ne180100]<0>(__p, v10);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 32))(v8, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" sessionId=", 11);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" actionQueueSize=", 17);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v46 < 0)
    operator delete(__p[0]);
  if (v48 < 0)
    operator delete(v47[0]);
  if (v50 < 0)
    operator delete(v49[0]);
  if (a1[16] && (*(unsigned int (**)(_QWORD *, uint64_t))(*a1 + 208))(a1, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v49, "rtp.queue");
    std::string::basic_string[abi:ne180100]<0>(v47, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v15 = ImsLogger::debug(ims::_logger, (uint64_t)v49, (uint64_t)v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Not queuing request for terminated sessionId=", 45);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
    std::ostream::operator<<();
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
LABEL_21:
    if (v48 < 0)
      operator delete(v47[0]);
    if (v50 < 0)
      operator delete(v49[0]);
    goto LABEL_61;
  }
  v16 = (uint64_t)(a1 + 14);
  if ((a2 & 0xFFFFFFFE) == 2)
  {
    if ((_DWORD)a2 == 2)
      v17 = 3;
    else
      v17 = 2;
    for (i = a1[15]; i != v16; i = *(_QWORD *)(i + 8))
    {
      if (*(_DWORD *)(i + 16) == v17)
      {
        v19 = *(std::__shared_weak_count **)(i + 32);
        if (v19)
        {
          v20 = std::__shared_weak_count::lock(v19);
          if (v20)
          {
            v21 = v20;
            v22 = *(_QWORD *)(i + 24);
            if (v22 && v51 == v22)
            {
              std::string::basic_string[abi:ne180100]<0>(v49, "rtp.queue");
              std::string::basic_string[abi:ne180100]<0>(v47, "");
              v41 = ims::debug((uint64_t)v49, (uint64_t)v47);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)"Complementary action found and removed instead of inserting new action [action=", 79);
              *(_BYTE *)(v41 + 17) = 0;
              if (a2 > 3)
                v42 = "setDirection";
              else
                v42 = off_1E78DEE60[(int)a2];
              std::string::basic_string[abi:ne180100]<0>(__p, v42);
              (*(void (**)(uint64_t, void **))(*(_QWORD *)v41 + 32))(v41, __p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)" sessionId=", 11);
              *(_BYTE *)(v41 + 17) = 0;
              (*(void (**)(uint64_t))(*(_QWORD *)v22 + 176))(v22);
              std::ostream::operator<<();
              *(_BYTE *)(v41 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)"]", 1);
              *(_BYTE *)(v41 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v41 + 17) = 0;
              if (v46 < 0)
                operator delete(__p[0]);
              if (v48 < 0)
                operator delete(v47[0]);
              if (v50 < 0)
                operator delete(v49[0]);
              std::list<std::pair<MediaSessionQueue::Action,std::weak_ptr<MediaSessionInterface>>>::erase(v16, (uint64_t *)i);
              p_shared_owners = (unint64_t *)&v21->__shared_owners_;
              do
                v44 = __ldaxr(p_shared_owners);
              while (__stlxr(v44 - 1, p_shared_owners));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                std::__shared_weak_count::__release_weak(v21);
              }
              goto LABEL_61;
            }
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
        }
      }
    }
  }
  if (((*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 208))(a1, a2) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v49, "rtp.queue");
    std::string::basic_string[abi:ne180100]<0>(v47, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v25 = ImsLogger::info(ims::_logger, (uint64_t)v49, (uint64_t)v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"Adding [action=", 15);
    *(_BYTE *)(v25 + 17) = 0;
    if (a2 > 3)
      v26 = "setDirection";
    else
      v26 = off_1E78DEE60[(int)a2];
    std::string::basic_string[abi:ne180100]<0>(__p, v26);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v25 + 32))(v25, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)" sessionId=", 11);
    *(_BYTE *)(v25 + 17) = 0;
    v27 = v51;
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 176))(v51);
    std::ostream::operator<<();
    *(_BYTE *)(v25 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v25 + 17) = 0;
    if (v46 < 0)
      operator delete(__p[0]);
    if (v48 < 0)
      operator delete(v47[0]);
    if (v50 < 0)
      operator delete(v49[0]);
    v28 = v52;
    if (a3)
    {
      if (v52)
      {
        p_shared_weak_owners = (unint64_t *)&v52->__shared_weak_owners_;
        do
          v30 = __ldxr(p_shared_weak_owners);
        while (__stxr(v30 + 1, p_shared_weak_owners));
      }
      v31 = operator new(0x28uLL);
      v31[4] = a2;
      *((_QWORD *)v31 + 3) = v27;
      *((_QWORD *)v31 + 4) = v28;
      v32 = (_QWORD *)a1[15];
      *(_QWORD *)v31 = v16;
      *((_QWORD *)v31 + 1) = v32;
      *v32 = v31;
      v33 = a1[16] + 1;
      a1[15] = v31;
    }
    else
    {
      if (v52)
      {
        v34 = (unint64_t *)&v52->__shared_weak_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      v36 = operator new(0x28uLL);
      v36[4] = a2;
      *((_QWORD *)v36 + 3) = v27;
      *((_QWORD *)v36 + 4) = v28;
      v37 = a1[14];
      *(_QWORD *)v36 = v37;
      *((_QWORD *)v36 + 1) = v16;
      *(_QWORD *)(v37 + 8) = v36;
      a1[14] = v36;
      v33 = a1[16] + 1;
    }
    a1[16] = v33;
  }
LABEL_61:
  v38 = v52;
  if (v52)
  {
    v39 = (unint64_t *)&v52->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_1BF0FB34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void std::list<std::pair<MediaSessionQueue::Action,std::weak_ptr<MediaSessionInterface>>>::erase(uint64_t a1, uint64_t *__p)
{
  uint64_t v3;
  std::__shared_weak_count *v4;

  v3 = *__p;
  *(_QWORD *)(v3 + 8) = __p[1];
  *(_QWORD *)__p[1] = v3;
  --*(_QWORD *)(a1 + 16);
  v4 = (std::__shared_weak_count *)__p[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(__p);
}

void MediaSessionQueue::setQueuedInterface(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v4 = (std::__shared_weak_count *)a1[18];
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v30 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = a1[17];
      v29 = v7;
      if (v7)
      {
        std::string::basic_string[abi:ne180100]<0>(v27, "rtp.queue");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v8 = ImsLogger::debug(ims::_logger, (uint64_t)v27, (uint64_t)__p);
        v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
        *(_BYTE *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"::", 2);
        *(_BYTE *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"setQueuedInterface", 18);
        *(_BYTE *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" [oldQueuedInterfaceSessionId=", 30);
        *(_BYTE *)(v8 + 17) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
        std::ostream::operator<<();
        *(_BYTE *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"]", 1);
        *(_BYTE *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v8 + 17) = 0;
        if (v26 < 0)
          operator delete(__p[0]);
        if (v28 < 0)
          operator delete(v27[0]);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  v12 = (std::__shared_weak_count *)a2[1];
  if (v12)
  {
    v13 = std::__shared_weak_count::lock(v12);
    v30 = v13;
    if (v13)
    {
      v14 = v13;
      v15 = *a2;
      v29 = v15;
      if (v15)
      {
        std::string::basic_string[abi:ne180100]<0>(v27, "rtp.queue");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v16 = ImsLogger::debug(ims::_logger, (uint64_t)v27, (uint64_t)__p);
        v17 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v17);
        *(_BYTE *)(v16 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"::", 2);
        *(_BYTE *)(v16 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"setQueuedInterface", 18);
        *(_BYTE *)(v16 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" [newQueuedInterfaceSessionId=", 30);
        *(_BYTE *)(v16 + 17) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 176))(v15);
        std::ostream::operator<<();
        *(_BYTE *)(v16 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"]", 1);
        *(_BYTE *)(v16 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v16 + 17) = 0;
        if (v26 < 0)
          operator delete(__p[0]);
        if (v28 < 0)
          operator delete(v27[0]);
      }
      v18 = (unint64_t *)&v14->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v20 = *a2;
    v21 = a2[1];
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 16);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
  }
  else
  {
    v21 = 0;
    v20 = *a2;
  }
  v24 = (std::__shared_weak_count *)a1[18];
  a1[17] = v20;
  a1[18] = v21;
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
}

void sub_1BF0FB830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t MediaSessionQueue::sessionId(MediaSessionQueue *this)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  size_t v15;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v3)
    goto LABEL_16;
  v4 = std::__shared_weak_count::lock(v3);
  v22 = v4;
  if (!v4)
    goto LABEL_16;
  v5 = v4;
  v6 = *((_QWORD *)this + 17);
  v21 = v6;
  if (!v6)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
      goto LABEL_15;
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(v19, "rtp.queue");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v13 = ImsLogger::warn(ims::_logger, (uint64_t)v19, (uint64_t)__p);
    v14 = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v15 = strlen(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)v14, v15);
    *(_BYTE *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"sessionId", 9);
    *(_BYTE *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    if (v18 < 0)
      operator delete(__p[0]);
    if (v20 < 0)
      operator delete(v19[0]);
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v19, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::debug(ims::_logger, (uint64_t)v19, (uint64_t)__p);
  v8 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v8);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"sessionId", 9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v18 < 0)
    operator delete(__p[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
  v9 = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
LABEL_15:
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v6)
      return v1;
    goto LABEL_16;
  }
  return v1;
}

void sub_1BF0FBB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'MediaSessionQueue::sessionId(MediaSessionQueue *this)
{
  return MediaSessionQueue::sessionId((MediaSessionQueue *)((char *)this - 24));
}

void MediaSessionQueue::clearDelegate(MediaSessionQueue *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  size_t v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v17 = 0;
  v18 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v18 = v3;
    if (v3)
    {
      v4 = *((_QWORD *)this + 17);
      v17 = v4;
      if (v4)
      {
        std::string::basic_string[abi:ne180100]<0>(v15, "rtp.queue");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v5 = ImsLogger::debug(ims::_logger, (uint64_t)v15, (uint64_t)__p);
        v6 = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        v7 = strlen(v6);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)v6, v7);
        *(_BYTE *)(v5 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
        *(_BYTE *)(v5 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"clearDelegate", 13);
        *(_BYTE *)(v5 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
        *(_BYTE *)(v5 + 17) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
        std::ostream::operator<<();
        *(_BYTE *)(v5 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
        *(_BYTE *)(v5 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v5 + 17) = 0;
        if (v14 < 0)
          operator delete(__p[0]);
        if (v16 < 0)
          operator delete(v15[0]);
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 168))(v4);
LABEL_15:
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
        return;
      }
    }
  }
  else
  {
    v3 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v15, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::warn(ims::_logger, (uint64_t)v15, (uint64_t)__p);
  v9 = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
  v10 = strlen(v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)v9, v10);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"clearDelegate", 13);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v14 < 0)
    operator delete(__p[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v3)
    goto LABEL_15;
}

void sub_1BF0FBEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'MediaSessionQueue::clearDelegate(MediaSessionQueue *this)
{
  MediaSessionQueue::clearDelegate((MediaSessionQueue *)((char *)this - 24));
}

void MediaSessionQueue::setDelegate(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  size_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  size_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v24 = 0;
  v25 = 0;
  v3 = (std::__shared_weak_count *)a1[18];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v25 = v5;
    if (v5)
    {
      v6 = a1[17];
      v24 = v6;
      if (v6)
      {
        std::string::basic_string[abi:ne180100]<0>(v22, "rtp.queue");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v7 = ImsLogger::debug(ims::_logger, (uint64_t)v22, (uint64_t)__p);
        v8 = (const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        v9 = strlen(v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)v8, v9);
        *(_BYTE *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
        *(_BYTE *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"setDelegate", 11);
        *(_BYTE *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
        *(_BYTE *)(v7 + 17) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
        std::ostream::operator<<();
        *(_BYTE *)(v7 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
        *(_BYTE *)(v7 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v7 + 17) = 0;
        if (v21 < 0)
          operator delete(__p[0]);
        if (v23 < 0)
          operator delete(v22[0]);
        v10 = (std::__shared_weak_count *)a2[1];
        v18 = *a2;
        v19 = v10;
        if (v10)
        {
          p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
          do
            v12 = __ldxr(p_shared_weak_owners);
          while (__stxr(v12 + 1, p_shared_weak_owners));
        }
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 160))(v6, &v18);
        if (v19)
          std::__shared_weak_count::__release_weak(v19);
LABEL_19:
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v22, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v13 = ImsLogger::warn(ims::_logger, (uint64_t)v22, (uint64_t)__p);
  v14 = (const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
  v15 = strlen(v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)v14, v15);
  *(_BYTE *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"setDelegate", 11);
  *(_BYTE *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  if (v21 < 0)
    operator delete(__p[0]);
  if (v23 < 0)
    operator delete(v22[0]);
  if (v5)
    goto LABEL_19;
}

void sub_1BF0FC24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'MediaSessionQueue::setDelegate(uint64_t a1, uint64_t *a2)
{
  MediaSessionQueue::setDelegate((_QWORD *)(a1 - 24), a2);
}

void MediaSessionQueue::delegate(MediaSessionQueue *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  const char *v15;
  size_t v16;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v4)
    goto LABEL_16;
  v5 = std::__shared_weak_count::lock(v4);
  v22 = v5;
  if (!v5)
    goto LABEL_16;
  v6 = v5;
  v7 = *((_QWORD *)this + 17);
  v21 = v7;
  if (!v7)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
      goto LABEL_15;
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(v19, "rtp.queue");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v14 = ImsLogger::warn(ims::_logger, (uint64_t)v19, (uint64_t)__p);
    v15 = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v16 = strlen(v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)v15, v16);
    *(_BYTE *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"delegate", 8);
    *(_BYTE *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    if (v18 < 0)
      operator delete(__p[0]);
    if (v20 < 0)
      operator delete(v19[0]);
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v19, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)v19, (uint64_t)__p);
  v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"delegate", 8);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v18 < 0)
    operator delete(__p[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 152))(v7);
  v10 = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
LABEL_15:
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v7)
      return;
    goto LABEL_16;
  }
}

void sub_1BF0FC5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'MediaSessionQueue::delegate(MediaSessionQueue *this@<X0>, _QWORD *a2@<X8>)
{
  MediaSessionQueue::delegate((MediaSessionQueue *)((char *)this - 24), a2);
}

double MediaSessionQueue::sendDTMFDigits@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  double result;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v5 = (std::__shared_weak_count *)a1[18];
  if (!v5)
    goto LABEL_16;
  v7 = std::__shared_weak_count::lock(v5);
  v25 = v7;
  if (!v7)
    goto LABEL_16;
  v8 = v7;
  v9 = a1[17];
  v24 = v9;
  if (!v9)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
      goto LABEL_15;
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(v22, "rtp.queue");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v17 = ImsLogger::warn(ims::_logger, (uint64_t)v22, (uint64_t)__p);
    v18 = (const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v19 = strlen(v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)v18, v19);
    *(_BYTE *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"sendDTMFDigits", 14);
    *(_BYTE *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    if (v21 < 0)
      operator delete(__p[0]);
    if (v23 < 0)
      operator delete(v22[0]);
    result = 0.0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741836;
    return result;
  }
  std::string::basic_string[abi:ne180100]<0>(v22, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::debug(ims::_logger, (uint64_t)v22, (uint64_t)__p);
  v11 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"sendDTMFDigits", 14);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 176))(v9);
  std::ostream::operator<<();
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (v21 < 0)
    operator delete(__p[0]);
  if (v23 < 0)
    operator delete(v22[0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 144))(v9, a2);
  v13 = (unint64_t *)&v8->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
LABEL_15:
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (v9)
      return result;
    goto LABEL_16;
  }
  return result;
}

void sub_1BF0FC974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

double `non-virtual thunk to'MediaSessionQueue::sendDTMFDigits@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return MediaSessionQueue::sendDTMFDigits((_QWORD *)(a1 - 24), a2, a3);
}

double MediaSessionQueue::stopSendingDTMF@<D0>(MediaSessionQueue *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  double result;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  const char *v16;
  size_t v17;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v4)
    goto LABEL_16;
  v5 = std::__shared_weak_count::lock(v4);
  v23 = v5;
  if (!v5)
    goto LABEL_16;
  v6 = v5;
  v7 = *((_QWORD *)this + 17);
  v22 = v7;
  if (!v7)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
      goto LABEL_15;
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(v20, "rtp.queue");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v15 = ImsLogger::warn(ims::_logger, (uint64_t)v20, (uint64_t)__p);
    v16 = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v17 = strlen(v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)v16, v17);
    *(_BYTE *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"stopSendingDTMF", 15);
    *(_BYTE *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
    if (v19 < 0)
      operator delete(__p[0]);
    if (v21 < 0)
      operator delete(v20[0]);
    result = 0.0;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)a2 = &off_1E78B7238;
    *(_QWORD *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 1073741836;
    return result;
  }
  std::string::basic_string[abi:ne180100]<0>(v20, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)v20, (uint64_t)__p);
  v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"stopSendingDTMF", 15);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v19 < 0)
    operator delete(__p[0]);
  if (v21 < 0)
    operator delete(v20[0]);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 136))(v7);
  v11 = (unint64_t *)&v6->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
LABEL_15:
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v7)
      return result;
    goto LABEL_16;
  }
  return result;
}

void sub_1BF0FCD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

double `non-virtual thunk to'MediaSessionQueue::stopSendingDTMF@<D0>(MediaSessionQueue *this@<X0>, uint64_t a2@<X8>)
{
  return MediaSessionQueue::stopSendingDTMF((MediaSessionQueue *)((char *)this - 24), a2);
}

double MediaSessionQueue::startSendingDTMF@<D0>(MediaSessionQueue *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  double result;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v5)
    goto LABEL_16;
  v7 = std::__shared_weak_count::lock(v5);
  v25 = v7;
  if (!v7)
    goto LABEL_16;
  v8 = v7;
  v9 = *((_QWORD *)this + 17);
  v24 = v9;
  if (!v9)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
      goto LABEL_15;
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(v22, "rtp.queue");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v17 = ImsLogger::warn(ims::_logger, (uint64_t)v22, (uint64_t)__p);
    v18 = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v19 = strlen(v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)v18, v19);
    *(_BYTE *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"startSendingDTMF", 16);
    *(_BYTE *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    if (v21 < 0)
      operator delete(__p[0]);
    if (v23 < 0)
      operator delete(v22[0]);
    result = 0.0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741836;
    return result;
  }
  std::string::basic_string[abi:ne180100]<0>(v22, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::debug(ims::_logger, (uint64_t)v22, (uint64_t)__p);
  v11 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"startSendingDTMF", 16);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 176))(v9);
  std::ostream::operator<<();
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (v21 < 0)
    operator delete(__p[0]);
  if (v23 < 0)
    operator delete(v22[0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 128))(v9, a2);
  v13 = (unint64_t *)&v8->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
LABEL_15:
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (v9)
      return result;
    goto LABEL_16;
  }
  return result;
}

void sub_1BF0FD0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

double `non-virtual thunk to'MediaSessionQueue::startSendingDTMF@<D0>(MediaSessionQueue *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return MediaSessionQueue::startSendingDTMF((MediaSessionQueue *)((char *)this - 24), a2, a3);
}

uint64_t MediaSessionQueue::mediaSupportEnabled(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  const char *v15;
  size_t v16;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  if ((_DWORD)a2 == 2)
  {
    LOBYTE(v2) = 1;
    return v2 & 1;
  }
  v4 = (std::__shared_weak_count *)a1[18];
  if (!v4)
    goto LABEL_18;
  v2 = a2;
  v5 = std::__shared_weak_count::lock(v4);
  v23 = v5;
  if (!v5)
    goto LABEL_18;
  v6 = v5;
  v7 = a1[17];
  v22 = v7;
  if (!v7)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (v13)
    {
LABEL_18:
      std::string::basic_string[abi:ne180100]<0>(v20, "rtp.queue");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v14 = ImsLogger::warn(ims::_logger, (uint64_t)v20, (uint64_t)__p);
      v15 = (const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
      v16 = strlen(v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)v15, v16);
      *(_BYTE *)(v14 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"::", 2);
      *(_BYTE *)(v14 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"mediaSupportEnabled", 19);
      *(_BYTE *)(v14 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
      *(_BYTE *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v14 + 17) = 0;
      if (v19 < 0)
        operator delete(__p[0]);
      if (v21 < 0)
        operator delete(v20[0]);
      LOBYTE(v2) = 0;
      return v2 & 1;
    }
LABEL_17:
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v7)
      return v2 & 1;
    goto LABEL_18;
  }
  std::string::basic_string[abi:ne180100]<0>(v20, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)v20, (uint64_t)__p);
  v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"mediaSupportEnabled", 19);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v19 < 0)
    operator delete(__p[0]);
  if (v21 < 0)
    operator delete(v20[0]);
  LOBYTE(v2) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 112))(v7, v2);
  v10 = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
    goto LABEL_17;
  return v2 & 1;
}

void sub_1BF0FD478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'MediaSessionQueue::mediaSupportEnabled(uint64_t a1, uint64_t a2)
{
  return MediaSessionQueue::mediaSupportEnabled((_QWORD *)(a1 - 24), a2);
}

uint64_t MediaSessionQueue::mediaType(MediaSessionQueue *this)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  size_t v15;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v3)
    goto LABEL_16;
  v4 = std::__shared_weak_count::lock(v3);
  v22 = v4;
  if (!v4)
    goto LABEL_16;
  v5 = v4;
  v6 = *((_QWORD *)this + 17);
  v21 = v6;
  if (!v6)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
      goto LABEL_15;
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(v19, "rtp.queue");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v13 = ImsLogger::warn(ims::_logger, (uint64_t)v19, (uint64_t)__p);
    v14 = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v15 = strlen(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)v14, v15);
    *(_BYTE *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"mediaType", 9);
    *(_BYTE *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    if (v18 < 0)
      operator delete(__p[0]);
    if (v20 < 0)
      operator delete(v19[0]);
    return 2;
  }
  std::string::basic_string[abi:ne180100]<0>(v19, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::debug(ims::_logger, (uint64_t)v19, (uint64_t)__p);
  v8 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v8);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"mediaType", 9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v18 < 0)
    operator delete(__p[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6);
  v9 = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
LABEL_15:
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v6)
      return v1;
    goto LABEL_16;
  }
  return v1;
}

void sub_1BF0FD7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'MediaSessionQueue::mediaType(MediaSessionQueue *this)
{
  return MediaSessionQueue::mediaType((MediaSessionQueue *)((char *)this - 24));
}

uint64_t MediaSessionQueue::direction(MediaSessionQueue *this)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  size_t v15;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v3)
    goto LABEL_16;
  v4 = std::__shared_weak_count::lock(v3);
  v22 = v4;
  if (!v4)
    goto LABEL_16;
  v5 = v4;
  v6 = *((_QWORD *)this + 17);
  v21 = v6;
  if (!v6)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
      goto LABEL_15;
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(v19, "rtp.queue");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v13 = ImsLogger::warn(ims::_logger, (uint64_t)v19, (uint64_t)__p);
    v14 = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v15 = strlen(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)v14, v15);
    *(_BYTE *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"direction", 9);
    *(_BYTE *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    if (v18 < 0)
      operator delete(__p[0]);
    if (v20 < 0)
      operator delete(v19[0]);
    return 4;
  }
  std::string::basic_string[abi:ne180100]<0>(v19, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::debug(ims::_logger, (uint64_t)v19, (uint64_t)__p);
  v8 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v8);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"direction", 9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v18 < 0)
    operator delete(__p[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
  v9 = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
LABEL_15:
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v6)
      return v1;
    goto LABEL_16;
  }
  return v1;
}

void sub_1BF0FDB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'MediaSessionQueue::direction(MediaSessionQueue *this)
{
  return MediaSessionQueue::direction((MediaSessionQueue *)((char *)this - 24));
}

uint64_t MediaSessionQueue::active(MediaSessionQueue *this)
{
  char v1;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  size_t v15;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v3)
    goto LABEL_16;
  v4 = std::__shared_weak_count::lock(v3);
  v22 = v4;
  if (!v4)
    goto LABEL_16;
  v5 = v4;
  v6 = *((_QWORD *)this + 17);
  v21 = v6;
  if (!v6)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
      goto LABEL_15;
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(v19, "rtp.queue");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v13 = ImsLogger::warn(ims::_logger, (uint64_t)v19, (uint64_t)__p);
    v14 = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v15 = strlen(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)v14, v15);
    *(_BYTE *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"active", 6);
    *(_BYTE *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    if (v18 < 0)
      operator delete(__p[0]);
    if (v20 < 0)
      operator delete(v19[0]);
    v1 = 0;
    return v1 & 1;
  }
  std::string::basic_string[abi:ne180100]<0>(v19, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::debug(ims::_logger, (uint64_t)v19, (uint64_t)__p);
  v8 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v8);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"active", 6);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v18 < 0)
    operator delete(__p[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 80))(v6);
  v9 = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
LABEL_15:
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v6)
      return v1 & 1;
    goto LABEL_16;
  }
  return v1 & 1;
}

void sub_1BF0FDEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'MediaSessionQueue::active(MediaSessionQueue *this)
{
  return MediaSessionQueue::active((MediaSessionQueue *)((char *)this - 24));
}

uint64_t MediaSessionQueue::transactionPending(MediaSessionQueue *this)
{
  char v1;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  size_t v15;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v3)
    goto LABEL_16;
  v4 = std::__shared_weak_count::lock(v3);
  v22 = v4;
  if (!v4)
    goto LABEL_16;
  v5 = v4;
  v6 = *((_QWORD *)this + 17);
  v21 = v6;
  if (!v6)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
      goto LABEL_15;
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(v19, "rtp.queue");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v13 = ImsLogger::warn(ims::_logger, (uint64_t)v19, (uint64_t)__p);
    v14 = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v15 = strlen(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)v14, v15);
    *(_BYTE *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"transactionPending", 18);
    *(_BYTE *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    if (v18 < 0)
      operator delete(__p[0]);
    if (v20 < 0)
      operator delete(v19[0]);
    v1 = 0;
    return v1 & 1;
  }
  std::string::basic_string[abi:ne180100]<0>(v19, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::debug(ims::_logger, (uint64_t)v19, (uint64_t)__p);
  v8 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v8);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"transactionPending", 18);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v18 < 0)
    operator delete(__p[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
  v9 = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
LABEL_15:
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v6)
      return v1 & 1;
    goto LABEL_16;
  }
  return v1 & 1;
}

void sub_1BF0FE268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'MediaSessionQueue::transactionPending(MediaSessionQueue *this)
{
  return MediaSessionQueue::transactionPending((MediaSessionQueue *)((char *)this - 24));
}

uint64_t MediaSessionQueue::paused(MediaSessionQueue *this)
{
  char v1;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  size_t v15;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v3)
    goto LABEL_16;
  v4 = std::__shared_weak_count::lock(v3);
  v22 = v4;
  if (!v4)
    goto LABEL_16;
  v5 = v4;
  v6 = *((_QWORD *)this + 17);
  v21 = v6;
  if (!v6)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
      goto LABEL_15;
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(v19, "rtp.queue");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v13 = ImsLogger::warn(ims::_logger, (uint64_t)v19, (uint64_t)__p);
    v14 = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    v15 = strlen(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)v14, v15);
    *(_BYTE *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"paused", 6);
    *(_BYTE *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" [queuedInterface=0x0]", 22);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    if (v18 < 0)
      operator delete(__p[0]);
    if (v20 < 0)
      operator delete(v19[0]);
    v1 = 0;
    return v1 & 1;
  }
  std::string::basic_string[abi:ne180100]<0>(v19, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::debug(ims::_logger, (uint64_t)v19, (uint64_t)__p);
  v8 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v8);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"paused", 6);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [queuedInterfaceSessionId=", 27);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v18 < 0)
    operator delete(__p[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 88))(v6);
  v9 = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
LABEL_15:
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v6)
      return v1 & 1;
    goto LABEL_16;
  }
  return v1 & 1;
}

void sub_1BF0FE5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'MediaSessionQueue::paused(MediaSessionQueue *this)
{
  return MediaSessionQueue::paused((MediaSessionQueue *)((char *)this - 24));
}

uint64_t MediaSessionQueue::canChangeMediaStack(std::__shared_weak_count **this)
{
  MediaSessionQueue *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _BOOL4 v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v1 = (MediaSessionQueue *)this;
  v2 = this[18];
  if (v2 && (v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v4 = v3;
    v5 = *((_QWORD *)v1 + 17);
    v6 = v5 == 0;
    if (v5)
      LODWORD(v1) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 184))(v5);
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v6 = 1;
  }
  return (v6 | v1) & 1;
}

void sub_1BF0FE738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'MediaSessionQueue::~MediaSessionQueue(MediaSessionQueue *this)
{
  MediaSessionQueue::~MediaSessionQueue((MediaSessionQueue *)((char *)this - 24));
}

{
  MediaSessionQueue::~MediaSessionQueue((MediaSessionQueue *)((char *)this - 24));
  JUMPOUT(0x1C3B87100);
}

uint64_t `non-virtual thunk to'MediaSessionQueue::canChangeMediaStack(std::__shared_weak_count **this)
{
  return MediaSessionQueue::canChangeMediaStack(this - 3);
}

uint64_t SipConferenceEventPackage::handleNotification(SipConferenceEventPackage *this, const SipRequest *a2, SipResponse *a3)
{
  const void *v4;
  void *v6;
  void *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void **v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void *__p[2];
  char v28;
  void *v29[2];
  _OWORD v30[4];
  void *v31[2];
  __int128 v32;
  __int128 v33;
  _BYTE v34[144];
  uint64_t v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;

  v4 = (const void *)*((_QWORD *)a2 + 9);
  if (v4
  {
    v7 = v6;
    v39 = 0;
    v40 = 0;
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (v8)
    {
      v9 = std::__shared_weak_count::lock(v8);
      v40 = v9;
      if (v9)
      {
        v10 = *((_QWORD *)this + 4);
        v39 = v10;
        if (v10)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, (uint64_t)v7 + 32);
          v36 = 0;
          v37 = 0;
          v38 = 0;
          (*(void (**)(void *, void ***))(*(_QWORD *)v7 + 56))(v7, &v36);
          v35 = 0;
          v33 = 0u;
          memset(v34, 0, sizeof(v34));
          *(_OWORD *)v31 = 0u;
          v32 = 0u;
          memset(v30, 0, sizeof(v30));
          *(_OWORD *)v29 = 0u;
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v29);
          v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Content-Type", 12);
          v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
          if (byte_1ED70CB97 >= 0)
            v13 = &SipConferenceInfoBody::kContentType;
          else
            v13 = (uint64_t *)SipConferenceInfoBody::kContentType;
          if (byte_1ED70CB97 >= 0)
            v14 = byte_1ED70CB97;
          else
            v14 = unk_1ED70CB88;
          v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
          v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\r\n\r\n", 4);
          if (v38 >= 0)
            v17 = (void **)&v36;
          else
            v17 = v36;
          if (v38 >= 0)
            v18 = HIBYTE(v38);
          else
            v18 = v37;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
          v19 = (char *)SipMessage::header<SipFromHeader>((uint64_t)a2);
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v30 + 8, __p);
          if (v19)
            v20 = v19 + 104;
          else
            v20 = 0;
          (*(void (**)(uint64_t, char *, void **))(*(_QWORD *)v10 + 24))(v10, v20, __p);
          if (v28 < 0)
            operator delete(__p[0]);
          v29[0] = *(void **)MEMORY[0x1E0DE4F50];
          v21 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
          *(void **)((char *)v29 + *((_QWORD *)v29[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F50] + 64);
          *(_QWORD *)&v30[0] = v21;
          *((_QWORD *)&v30[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
          if (SHIBYTE(v32) < 0)
            operator delete(v31[1]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1C3B8707C](v34);
          if (SHIBYTE(v38) < 0)
            operator delete(v36);
LABEL_37:
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          return 1;
        }
      }
    }
    else
    {
      v9 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(v29, "sip.conf");
    std::string::basic_string[abi:ne180100]<0>(&v36, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v23 = ImsLogger::debug(ims::_logger, (uint64_t)v29, (uint64_t)&v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"No conference call to handle notification", 41);
    *(_BYTE *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v23 + 17) = 0;
    if (SHIBYTE(v38) < 0)
      operator delete(v36);
    if (SBYTE7(v30[0]) < 0)
      operator delete(v29[0]);
    if (v9)
      goto LABEL_37;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "sip.conf");
    std::string::basic_string[abi:ne180100]<0>(&v36, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v22 = ImsLogger::warn(ims::_logger, (uint64_t)v29, (uint64_t)&v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"Missing body in conference event", 32);
    *(_BYTE *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v22 + 17) = 0;
    if (SHIBYTE(v38) < 0)
      operator delete(v36);
    if (SBYTE7(v30[0]) < 0)
      operator delete(v29[0]);
  }
  return 1;
}

void sub_1BF0FEB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  if (*(char *)(v21 - 73) < 0)
    operator delete(*(void **)(v21 - 96));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v21 - 72);
  _Unwind_Resume(a1);
}

uint64_t SipConferenceEventPackage::desiredExpirationInterval(SipConferenceEventPackage *this)
{
  return 3600;
}

void SipConferenceEventPackage::handleSubscriptionFailed(SipConferenceEventPackage *this, ImsResult *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = *((_QWORD *)this + 4);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF0FEC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipConferenceEventPackage::handleSubscriptionSuccess(SipConferenceEventPackage *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *((_QWORD *)this + 4);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF0FED2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipConferenceEventPackage::acceptedContentTypes(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a2[1];
  if (v3 >= a2[2])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (__int128 *)&SipConferenceInfoBody::kContentType);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, (__int128 *)&SipConferenceInfoBody::kContentType);
    result = v3 + 24;
  }
  a2[1] = result;
  return result;
}

uint64_t SipConferenceEventPackage::determineIncomingMessageCategory(SipConferenceEventPackage *this, const SipRequest *a2)
{
  if (*((_BYTE *)this + 48))
    return 3;
  else
    return 2;
}

void SipConferenceEventPackage::~SipConferenceEventPackage(SipConferenceEventPackage *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E78DEE90;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  SipEventPackage::~SipEventPackage(this);
}

{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E78DEE90;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  SipEventPackage::~SipEventPackage(this);
  JUMPOUT(0x1C3B87100);
}

const char *SipConferenceEventPackage::name(SipConferenceEventPackage *this)
{
  return "conference";
}

unsigned __int8 *SipReason::SipReason(unsigned __int8 *a1, const std::string *a2, int a3, uint64_t a4)
{
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  unsigned __int8 *v11;
  uint64_t *v12;
  std::string::size_type v13;
  uint64_t *v14;
  std::string __p;
  _BYTE __str[32];
  __int128 v18;
  __int128 v19;
  void *v20[2];
  __int128 v21;
  __int128 v22;
  _OWORD v23[9];
  uint64_t v24;
  void *v25[2];
  char v26;
  void **v27;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = &off_1E78B82D8;
  *((_QWORD *)a1 + 5) = 0;
  *((_QWORD *)a1 + 4) = a1 + 40;
  v7 = (uint64_t **)(a1 + 32);
  *((_QWORD *)a1 + 6) = 0;
  *((_WORD *)a1 + 28) = 256;
  std::string::operator=((std::string *)a1, a2);
  if (!a3)
  {
    v8 = a1[23];
    v9 = (v8 & 0x80u) == 0 ? a1[23] : *((_QWORD *)a1 + 1);
    if (v9 == 5)
    {
      if ((v8 & 0x80) != 0)
      {
        memcmp(*(const void **)a1, "Q.850", *((_QWORD *)a1 + 1));
      }
      else if (a1[23])
      {
        v10 = "Q.850";
        v11 = a1;
        do
        {
          if (*v11 != *(unsigned __int8 *)v10)
            break;
          ++v11;
          ++v10;
          --v8;
        }
        while (v8);
      }
    }
  }
  v24 = 0;
  v22 = 0u;
  memset(v23, 0, sizeof(v23));
  *(_OWORD *)v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  memset(__str, 0, sizeof(__str));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__str);
  std::ostream::operator<<();
  std::string::basic_string[abi:ne180100]<0>(v25, "cause");
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__str[8], &__p);
  v27 = v25;
  v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, v25, (uint64_t)&std::piecewise_construct, (__int128 **)&v27);
  std::string::operator=((std::string *)(v12 + 7), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v26 < 0)
    operator delete(v25[0]);
  *(_QWORD *)__str = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)&__str[*(_QWORD *)(*(_QWORD *)__str - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)&__str[8] = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v21) < 0)
    operator delete(v20[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B8707C](v23);
  if (*(char *)(a4 + 23) < 0)
  {
    v13 = *(_QWORD *)(a4 + 8);
    if (!v13)
      return a1;
    memset(&__p, 0, sizeof(__p));
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, v13);
  }
  else
  {
    if (!*(_BYTE *)(a4 + 23))
      return a1;
    __p = *(std::string *)a4;
  }
  ims::addQuotes((uint64_t)&__p, 1);
  memset(__str, 0, 24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    *(std::string *)__str = __p;
  ims::addQuotes((uint64_t)__str, 1);
  std::string::basic_string[abi:ne180100]<0>(v25, "text");
  v27 = v25;
  v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, v25, (uint64_t)&std::piecewise_construct, (__int128 **)&v27);
  std::string::operator=((std::string *)(v14 + 7), (const std::string *)__str);
  if (v26 < 0)
    operator delete(v25[0]);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0FF128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v21 + 24) = v23;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v22, *(_QWORD **)(v21 + 40));
  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(a1);
}

uint64_t SipReason::rankForProtocol(unsigned __int8 *a1)
{
  uint64_t v1;
  size_t v2;
  uint64_t v3;
  std::string *j;
  uint64_t result;
  const char *i;

  v1 = a1[23];
  v2 = *((_QWORD *)a1 + 1);
  if ((v1 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  if (v3 == 5)
  {
    if ((v1 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a1, "Q.850", v2))
        return 2;
    }
    else if (a1[23])
    {
      for (i = "Q.850"; *a1 == *(unsigned __int8 *)i; ++i)
      {
        ++a1;
        if (!--v1)
          return 1;
      }
      return 2;
    }
    return 1;
  }
  if (v3 != 3)
    return 2;
  if ((v1 & 0x80) == 0)
  {
    if (!a1[23])
      return 0;
    for (j = &SipReason::kProtocolSip;
          *a1 == j->__r_.__value_.__s.__data_[0];
          j = (std::string *)((char *)j + 1))
    {
      ++a1;
      if (!--v1)
        return 0;
    }
    return 2;
  }
  result = memcmp(*(const void **)a1, &SipReason::kProtocolSip, v2);
  if ((_DWORD)result)
    return 2;
  return result;
}

unint64_t SipReason::cause(SipReason *this)
{
  void **v2;
  __int128 *v3;
  void *__p[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(__p, "cause");
  v2 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 32, __p);
  if ((void **)((char *)this + 40) == v2)
    v3 = &ims::kEmptyString;
  else
    v3 = (__int128 *)(v2 + 7);
  if (v6 < 0)
    operator delete(__p[0]);
  if ((*((char *)v3 + 23) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)v3 + 23))
      return 0;
    return strtoul((const char *)v3, 0, 10);
  }
  if (*((_QWORD *)v3 + 1))
  {
    v3 = *(__int128 **)v3;
    return strtoul((const char *)v3, 0, 10);
  }
  return 0;
}

void sub_1BF0FF35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double SipReason::text@<D0>(SipReason *this@<X0>, std::string *a2@<X8>)
{
  void **v4;
  __int128 *v5;
  __int128 v6;
  void *__p[2];
  char v9;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "text");
  v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 32, __p);
  if ((void **)((char *)this + 40) == v4)
    v5 = &ims::kEmptyString;
  else
    v5 = (__int128 *)(v4 + 7);
  if (*((char *)v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *v5;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
  }
  if (v9 < 0)
    operator delete(__p[0]);
  return ims::removeQuotes((uint64_t)a2);
}

void sub_1BF0FF41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void SipReasonHeader::addReason(_QWORD *a1, const std::string *a2, int a3, uint64_t a4)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;

  v8 = (unsigned __int8 *)operator new();
  SipReason::SipReason(v8, a2, a3, a4);
  v9 = v8;
  SipVectorHeader<SipReason *>::addItem(a1, &v9);
}

void sub_1BF0FF4C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B2C406DDFD988);
  _Unwind_Resume(a1);
}

void SipVectorHeader<SipReason *>::addItem(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = a1[10];
  v4 = (uint64_t)(a1 + 10);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)(v4 - 16);
    v10 = *(_QWORD *)(v4 - 16);
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<SipReason *>::__throw_length_error[abi:ne180100]();
    v12 = v5 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v4, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = *a2;
    v8 = v16 + 8;
    v19 = (char *)a1[8];
    v18 = (char *)a1[9];
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v9;
    }
    a1[8] = v16;
    a1[9] = v8;
    a1[10] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[9] = v8;
}

void SipReasonHeader::addReason(SipReasonHeader *this, const SipReason *a2)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;

  v4 = (std::string *)operator new();
  v5 = v4;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
  }
  v5[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B82D8;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)&v5[1].__r_.__value_.__l.__size_, *((void ***)a2 + 4), (void **)a2 + 5);
  v5[2].__r_.__value_.__s.__data_[9] = 1;
  v5[2].__r_.__value_.__s.__data_[8] = *((_BYTE *)a2 + 56);
  v6 = v5;
  SipVectorHeader<SipReason *>::addItem(this, &v6);
}

void sub_1BF0FF680(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B2C406DDFD988);
  _Unwind_Resume(a1);
}

unsigned __int8 *SipReasonHeader::bestReason(SipReasonHeader *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  BOOL v8;
  BOOL v10;

  v1 = *((_QWORD *)this + 8);
  v2 = *((_QWORD *)this + 9);
  if (v1 == v2)
    return 0;
  v3 = 0;
  v4 = v1 + 8;
  v5 = 0xFFFF;
  do
  {
    v6 = *(unsigned __int8 **)(v4 - 8);
    v7 = SipReason::rankForProtocol(v6);
    if (v3)
      v8 = v7 < v5;
    else
      v8 = 1;
    if (v8)
    {
      v5 = v7;
      v3 = v6;
    }
    if (v5)
      v10 = v4 == v2;
    else
      v10 = 1;
    v4 += 8;
  }
  while (!v10);
  return v3;
}

void SipReasonHeader::~SipReasonHeader(SipReasonHeader *this)
{
  SipPointerVectorHeader<SipReason>::~SipPointerVectorHeader(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipReasonHeader::clone(__int128 ***this)
{
  uint64_t v2;
  char **v3;
  __int128 **v4;
  __int128 **v5;
  int64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 **v10;
  __int128 **v11;
  __int128 *v12;
  std::string *v13;
  std::string *v14;
  __int128 v15;
  unint64_t v16;
  std::string **v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  std::string **v24;
  char *v25;
  char *v26;
  std::string *v27;

  v2 = operator new();
  SipHeader::SipHeader((SipHeader *)v2, (const SipHeader *)this);
  *(_QWORD *)(v2 + 64) = 0;
  v3 = (char **)(v2 + 64);
  *(_QWORD *)v2 = off_1E78DF090;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  v5 = this[8];
  v4 = this[9];
  v6 = (char *)v4 - (char *)v5;
  if (v4 == v5)
  {
    *(_QWORD *)v2 = off_1E78DEFF8;
    *(_QWORD *)(v2 + 72) = 0;
  }
  else
  {
    if (v6 < 0)
      std::vector<SipReason *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v2 + 80, v6 >> 3);
    *(_QWORD *)(v2 + 64) = v7;
    *(_QWORD *)(v2 + 72) = v7;
    *(_QWORD *)(v2 + 80) = &v7[8 * v8];
    memmove(v7, v5, v6);
    v9 = *(_QWORD *)(v2 + 64);
    v10 = this[8];
    v11 = this[9];
    *(_QWORD *)v2 = off_1E78DEFF8;
    for (*(_QWORD *)(v2 + 72) = v9; v10 != v11; ++v10)
    {
      v12 = *v10;
      v13 = (std::string *)operator new();
      v14 = v13;
      if (*((char *)v12 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
      }
      else
      {
        v15 = *v12;
        v13->__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v15;
      }
      v14[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B82D8;
      std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)&v14[1].__r_.__value_.__l.__size_, *((void ***)v12 + 4), (void **)v12 + 5);
      v14[2].__r_.__value_.__s.__data_[9] = 1;
      v14[2].__r_.__value_.__s.__data_[8] = *((_BYTE *)v12 + 56);
      v17 = *(std::string ***)(v2 + 72);
      v16 = *(_QWORD *)(v2 + 80);
      if ((unint64_t)v17 >= v16)
      {
        v19 = ((char *)v17 - *v3) >> 3;
        if ((unint64_t)(v19 + 1) >> 61)
          std::vector<SipReason *>::__throw_length_error[abi:ne180100]();
        v20 = v16 - (_QWORD)*v3;
        v21 = v20 >> 2;
        if (v20 >> 2 <= (unint64_t)(v19 + 1))
          v21 = v19 + 1;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v2 + 80, v22);
        else
          v23 = 0;
        v24 = (std::string **)&v23[8 * v19];
        *v24 = v14;
        v18 = v24 + 1;
        v26 = *(char **)(v2 + 64);
        v25 = *(char **)(v2 + 72);
        if (v25 != v26)
        {
          do
          {
            v27 = (std::string *)*((_QWORD *)v25 - 1);
            v25 -= 8;
            *--v24 = v27;
          }
          while (v25 != v26);
          v25 = *v3;
        }
        *(_QWORD *)(v2 + 64) = v24;
        *(_QWORD *)(v2 + 72) = v18;
        *(_QWORD *)(v2 + 80) = &v23[8 * v22];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v17 = v14;
        v18 = v17 + 1;
      }
      *(_QWORD *)(v2 + 72) = v18;
    }
  }
  *(_QWORD *)v2 = &off_1E78DEF18;
  *(_BYTE *)(v2 + 56) = 0;
  return v2;
}

void sub_1BF0FF9A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1093C40888A45CFLL);
  _Unwind_Resume(a1);
}

uint64_t SipVectorHeader<SipReason *>::encodeValue(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  char v9;

  v2 = a1[8];
  if (a1[9] != v2)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (v6)
      {
        v7 = *(_QWORD **)(a2 + 8);
        v9 = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v9, 1);
        *(_BYTE *)(a2 + 17) = 0;
        v2 = a1[8];
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 112))(a1, v2 + v5, a2);
      ++v6;
      v2 = a1[8];
      v5 += 8;
    }
    while (v6 < (a1[9] - v2) >> 3);
  }
  return 1;
}

BOOL SipVectorHeader<SipReason *>::setValueFromString(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  void *__p[2];
  uint64_t v8;

  v4 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v8 = 0;
  while (1)
  {
    v4 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, void **, uint64_t))(*a1 + 128))(a1, a2, v4, __p, 44);
    if (v4 == -1)
      break;
    v6 = 0;
    if (((*(uint64_t (**)(_QWORD *, void **, uint64_t *))(*a1 + 120))(a1, __p, &v6) & 1) == 0)
      break;
    SipVectorHeader<SipReason *>::addItem(a1, &v6);
  }
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  return v4 == -1;
}

void sub_1BF0FFB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipVectorHeader<SipReason *>::allowsDuplicates()
{
  return 1;
}

uint64_t SipVectorHeader<SipReason *>::allowsMerging()
{
  return 1;
}

BOOL SipPointerVectorHeader<SipReason>::mergeHeader(_QWORD *a1, void *lpsrc)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  std::string *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;
  std::string *v11;

  v4 = v3;
  if (v3 && v3[9] != v3[8])
  {
    v5 = 0;
    do
    {
      v6 = (std::string *)operator new();
      v7 = v6;
      v8 = *(__int128 **)(v4[8] + 8 * v5);
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v9 = *v8;
        v6->__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v9;
      }
      v7[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B82D8;
      std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)&v7[1].__r_.__value_.__l.__size_, *((void ***)v8 + 4), (void **)v8 + 5);
      v7[2].__r_.__value_.__s.__data_[9] = 1;
      v7[2].__r_.__value_.__s.__data_[8] = *((_BYTE *)v8 + 56);
      v11 = v7;
      SipVectorHeader<SipReason *>::addItem(a1, &v11);
      ++v5;
    }
    while (v5 < (uint64_t)(v4[9] - v4[8]) >> 3);
  }
  return v4 != 0;
}

void sub_1BF0FFCD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B2C406DDFD988);
  _Unwind_Resume(a1);
}

ImsOutStream *SipPointerVectorHeader<SipReason>::itemToStream(uint64_t a1, std::string **a2, ImsOutStream *a3)
{
  std::string *v4;
  std::string::size_type size;
  std::string *v6;

  v4 = *a2;
  if (SHIBYTE((*a2)->__r_.__value_.__r.__words[2]) < 0)
    size = v4->__r_.__value_.__l.__size_;
  else
    size = HIBYTE((*a2)->__r_.__value_.__r.__words[2]);
  if (size)
    v6 = *a2;
  else
    v6 = &SipReason::kProtocolSip;
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a3 + 32))(a3, v6);
  return SipParameterMap::toStream((SipParameterMap *)&v4[1], a3, 0, 0, 0, 0);
}

uint64_t SipPointerVectorHeader<SipReason>::itemFromString(uint64_t a1, std::string *a2, uint64_t *a3)
{
  uint64_t v5;
  std::string::size_type v6;
  std::string::size_type v7;
  char v8;
  std::string v10;
  char v11;

  v5 = operator new();
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 24) = &off_1E78B82D8;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 32) = v5 + 40;
  *(_QWORD *)(v5 + 48) = 0;
  *(_WORD *)(v5 + 56) = 256;
  v6 = std::string::find(a2, 59, 0);
  if (v6 == -1)
  {
    std::string::operator=((std::string *)v5, a2);
    ims::chomp((std::string *)v5, "\r\n\t ", 3);
LABEL_9:
    *a3 = v5;
    return 1;
  }
  v7 = v6;
  std::string::basic_string(&v10, a2, 0, v6, (std::allocator<char> *)&v11);
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  *(std::string *)v5 = v10;
  v8 = SipParameterMap::fromString(v5 + 24, a2, v7 + 1, 0);
  ims::chomp((std::string *)v5, "\r\n\t ", 3);
  if ((v8 & 1) != 0)
    goto LABEL_9;
  *(_QWORD *)(v5 + 24) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v5 + 32, *(_QWORD **)(v5 + 40));
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  MEMORY[0x1C3B87100](v5, 0x10B2C406DDFD988);
  return 0;
}

unint64_t SipVectorHeader<SipReason *>::nextToken(int a1, std::string *__str, std::string::size_type __pos, std::string *this, unsigned __int8 a5)
{
  return ims::nextTokenQ(__str, __pos, this, a5);
}

BOOL SipVectorHeader<SipReason *>::mergeHeader(_QWORD *a1, void *lpsrc)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v4 = v3;
  if (v3)
  {
    v5 = (_QWORD *)v3[8];
    v6 = (_QWORD *)v3[9];
    while (v5 != v6)
      SipVectorHeader<SipReason *>::addItem(a1, v5++);
  }
  return v4 != 0;
}

void SipVectorHeader<SipReason *>::~SipVectorHeader(SipHeader *this)
{
  void *v2;

  *(_QWORD *)this = off_1E78DF090;
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  SipHeader::~SipHeader((void **)this);
}

void std::vector<SipReason *>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void SipPointerVectorHeader<SipReason>::~SipPointerVectorHeader(SipHeader *this)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E78DEFF8;
  v4 = (char *)this + 64;
  v2 = (_QWORD *)*((_QWORD *)this + 8);
  v3 = (_QWORD *)*((_QWORD *)v4 + 1);
  if (v3 == v2)
  {
    v2 = v3;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = v2[v5];
      if (v6)
      {
        *(_QWORD *)(v6 + 24) = &off_1E78B82D8;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v6 + 32, *(_QWORD **)(v6 + 40));
        if (*(char *)(v6 + 23) < 0)
          operator delete(*(void **)v6);
        MEMORY[0x1C3B87100](v6, 0x10B2C406DDFD988);
        v2 = (_QWORD *)*((_QWORD *)this + 8);
        v3 = (_QWORD *)*((_QWORD *)this + 9);
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  *(_QWORD *)this = off_1E78DF090;
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  SipHeader::~SipHeader((void **)this);
}

uint64_t SipIPSec3gppSecurityMechanism::matches(SipIPSec3gppSecurityMechanism *this, const SipSecurityMechanism *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  char *v5;
  void **v6;
  void **v7;
  __int128 *v8;
  uint64_t v9;
  void **v10;
  void **v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 *v17;
  void **v18;
  __int128 *v19;
  uint64_t v20;
  const char *v21;
  void **v22;
  __int128 *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  const char *v30;
  void **v31;
  __int128 *v32;
  uint64_t v33;
  std::string *v34;
  void **v35;
  __int128 *v36;
  uint64_t v37;
  std::string *v38;
  uint64_t v39;
  std::string::size_type size;
  std::string::size_type v41;
  int v42;
  std::string *v43;
  void **v44;
  __int128 *v45;
  uint64_t v46;
  const char *v47;
  void **v48;
  __int128 *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  const char *v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  BOOL v63;

  if (!result)
    return result;
  v4 = result;
  v5 = (char *)this + 40;
  v6 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 40, (void **)&SipIPSec3gppSecurityMechanism::kParameterAlgorithm);
  v7 = (void **)((char *)this + 48);
  if ((void **)((char *)this + 48) == v6)
    v8 = &ims::kEmptyString;
  else
    v8 = (__int128 *)(v6 + 7);
  v9 = v4 + 40;
  v10 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v4 + 40, (void **)&SipIPSec3gppSecurityMechanism::kParameterAlgorithm);
  v11 = (void **)(v4 + 48);
  if ((void **)(v4 + 48) == v10)
    v12 = &ims::kEmptyString;
  else
    v12 = (__int128 *)(v10 + 7);
  v13 = *((unsigned __int8 *)v8 + 23);
  if ((v13 & 0x80u) == 0)
    v14 = *((unsigned __int8 *)v8 + 23);
  else
    v14 = *((_QWORD *)v8 + 1);
  v15 = *((unsigned __int8 *)v12 + 23);
  v16 = (char)v15;
  if ((v15 & 0x80u) != 0)
    v15 = *((_QWORD *)v12 + 1);
  if (v14 != v15)
    return 0;
  if (v16 >= 0)
    v17 = v12;
  else
    v17 = *(__int128 **)v12;
  if ((v13 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v8, v17, *((_QWORD *)v8 + 1)))
      return 0;
  }
  else if (*((_BYTE *)v8 + 23))
  {
    while (*(unsigned __int8 *)v8 == *(unsigned __int8 *)v17)
    {
      v8 = (__int128 *)((char *)v8 + 1);
      v17 = (__int128 *)((char *)v17 + 1);
      if (!--v13)
        goto LABEL_23;
    }
    return 0;
  }
LABEL_23:
  v18 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v5, (void **)"ealg");
  v19 = (__int128 *)(v18 + 7);
  if (v7 == v18)
    v19 = &ims::kEmptyString;
  v20 = *((unsigned __int8 *)v19 + 23);
  if ((v20 & 0x80u) != 0)
    v20 = *((_QWORD *)v19 + 1);
  if (v20)
    v21 = (const char *)v19;
  else
    v21 = "null";
  v22 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v9, (void **)"ealg");
  v23 = (__int128 *)(v22 + 7);
  if (v11 == v22)
    v23 = &ims::kEmptyString;
  v24 = *((unsigned __int8 *)v23 + 23);
  if ((v24 & 0x80u) != 0)
    v24 = *((_QWORD *)v23 + 1);
  if (v24)
    v25 = (const char *)v23;
  else
    v25 = "null";
  v26 = *((unsigned __int8 *)v21 + 23);
  if ((v26 & 0x80u) == 0)
    v27 = *((unsigned __int8 *)v21 + 23);
  else
    v27 = *((_QWORD *)v21 + 1);
  v28 = *((unsigned __int8 *)v25 + 23);
  v29 = (char)v28;
  if ((v28 & 0x80u) != 0)
    v28 = *((_QWORD *)v25 + 1);
  if (v27 != v28)
    return 0;
  if (v29 >= 0)
    v30 = v25;
  else
    v30 = *(const char **)v25;
  if ((v26 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v21, v30, *((_QWORD *)v21 + 1)))
      return 0;
  }
  else if (v21[23])
  {
    while (*(unsigned __int8 *)v21 == *(unsigned __int8 *)v30)
    {
      ++v21;
      ++v30;
      if (!--v26)
        goto LABEL_52;
    }
    return 0;
  }
LABEL_52:
  v31 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v5, (void **)"prot");
  v32 = (__int128 *)(v31 + 7);
  if (v7 == v31)
    v32 = &ims::kEmptyString;
  v33 = *((unsigned __int8 *)v32 + 23);
  if ((v33 & 0x80u) != 0)
    v33 = *((_QWORD *)v32 + 1);
  if (v33)
    v34 = (std::string *)v32;
  else
    v34 = &SipIPSec3gppSecurityMechanism::kProtocolESP;
  v35 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v9, (void **)"prot");
  v36 = (__int128 *)(v35 + 7);
  if (v11 == v35)
    v36 = &ims::kEmptyString;
  v37 = *((unsigned __int8 *)v36 + 23);
  if ((v37 & 0x80u) != 0)
    v37 = *((_QWORD *)v36 + 1);
  if (v37)
    v38 = (std::string *)v36;
  else
    v38 = &SipIPSec3gppSecurityMechanism::kProtocolESP;
  v39 = HIBYTE(v34->__r_.__value_.__r.__words[2]);
  if ((v39 & 0x80u) == 0)
    size = HIBYTE(v34->__r_.__value_.__r.__words[2]);
  else
    size = v34->__r_.__value_.__l.__size_;
  v41 = HIBYTE(v38->__r_.__value_.__r.__words[2]);
  v42 = (char)v41;
  if ((v41 & 0x80u) != 0)
    v41 = v38->__r_.__value_.__l.__size_;
  if (size != v41)
    return 0;
  if (v42 >= 0)
    v43 = v38;
  else
    v43 = (std::string *)v38->__r_.__value_.__r.__words[0];
  if ((v39 & 0x80) != 0)
  {
    if (!memcmp(v34->__r_.__value_.__l.__data_, v43, v34->__r_.__value_.__l.__size_))
      goto LABEL_81;
    return 0;
  }
  if (*((_BYTE *)&v34->__r_.__value_.__s + 23))
  {
    while (v34->__r_.__value_.__s.__data_[0] == v43->__r_.__value_.__s.__data_[0])
    {
      v34 = (std::string *)((char *)v34 + 1);
      v43 = (std::string *)((char *)v43 + 1);
      if (!--v39)
        goto LABEL_81;
    }
    return 0;
  }
LABEL_81:
  v44 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v5, (void **)&SipIPSec3gppSecurityMechanism::kParameterMode);
  v45 = (__int128 *)(v44 + 7);
  if (v7 == v44)
    v45 = &ims::kEmptyString;
  v46 = *((unsigned __int8 *)v45 + 23);
  if ((v46 & 0x80u) != 0)
    v46 = *((_QWORD *)v45 + 1);
  if (v46)
    v47 = (const char *)v45;
  else
    v47 = "trans";
  v48 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v9, (void **)&SipIPSec3gppSecurityMechanism::kParameterMode);
  v49 = (__int128 *)(v48 + 7);
  if (v11 == v48)
    v49 = &ims::kEmptyString;
  v50 = *((unsigned __int8 *)v49 + 23);
  if ((v50 & 0x80u) != 0)
    v50 = *((_QWORD *)v49 + 1);
  if (v50)
    v51 = (const char *)v49;
  else
    v51 = "trans";
  v52 = *((unsigned __int8 *)v47 + 23);
  if ((v52 & 0x80u) == 0)
    v53 = *((unsigned __int8 *)v47 + 23);
  else
    v53 = *((_QWORD *)v47 + 1);
  v54 = *((unsigned __int8 *)v51 + 23);
  v55 = (char)v54;
  if ((v54 & 0x80u) != 0)
    v54 = *((_QWORD *)v51 + 1);
  if (v53 != v54)
    return 0;
  if (v55 >= 0)
    v56 = v51;
  else
    v56 = *(const char **)v51;
  if ((v52 & 0x80) != 0)
    return memcmp(*(const void **)v47, v56, *((_QWORD *)v47 + 1)) == 0;
  if (!v47[23])
    return 1;
  v57 = v52 - 1;
  do
  {
    v59 = *(unsigned __int8 *)v47++;
    v58 = v59;
    v61 = *(unsigned __int8 *)v56++;
    v60 = v61;
    v63 = v57-- != 0;
    result = v58 == v60;
  }
  while (v58 == v60 && v63);
  return result;
}

void SipIPSec3gppSecurityMechanism::initializeFromTransport(SipIPSec3gppSecurityMechanism *this, const SipIPSecTransportGroup *a2)
{
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = (char *)this + 32;
  SipParameterMap::setParameter((uint64_t)this + 32, (__int128 *)"spi-c");
  SipParameterMap::setParameter((uint64_t)v3, (__int128 *)"spi-s");
  (*(void (**)(uint64_t *__return_ptr, const SipIPSecTransportGroup *))(*(_QWORD *)a2 + 192))(&v10, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
  SipParameterMap::setParameter((uint64_t)v3, (__int128 *)"port-s");
  v4 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, const SipIPSecTransportGroup *))(*(_QWORD *)a2 + 184))(&v10, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
  SipParameterMap::setParameter((uint64_t)v3, (__int128 *)"port-c");
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1BF1005E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double SipIPSec3gppSecurityMechanism::fillIPSecAuthKey@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  void **v8;
  __int128 *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  const char *v13;
  unint64_t v14;
  __int128 *v15;
  const char *v16;
  __int128 *v17;
  uint64_t v18;
  const ImsResult *v19;
  double result;
  _OWORD *v21;
  unint64_t v22;
  void *v23;
  int64_t v24;
  _QWORD v25[2];
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v8 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 40, (void **)&SipIPSec3gppSecurityMechanism::kParameterAlgorithm);
  if ((void **)(a1 + 48) == v8)
    v9 = &ims::kEmptyString;
  else
    v9 = (__int128 *)(v8 + 7);
  v10 = *((unsigned __int8 *)v9 + 23);
  v11 = *((_QWORD *)v9 + 1);
  if ((v10 & 0x80u) == 0)
    v12 = *((unsigned __int8 *)v9 + 23);
  else
    v12 = *((_QWORD *)v9 + 1);
  if (v12 == 13)
  {
    if ((v10 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v9, "hmac-sha-1-96", v11))
        goto LABEL_24;
    }
    else if (*((_BYTE *)v9 + 23))
    {
      v16 = "hmac-sha-1-96";
      v14 = 20;
      v17 = v9;
      while (*(unsigned __int8 *)v17 == *(unsigned __int8 *)v16)
      {
        v17 = (__int128 *)((char *)v17 + 1);
        ++v16;
        if (!--v10)
          goto LABEL_26;
      }
      goto LABEL_24;
    }
    v14 = 20;
    goto LABEL_26;
  }
  if (v12 != 11)
    goto LABEL_24;
  if ((v10 & 0x80) == 0)
  {
    if (*((_BYTE *)v9 + 23))
    {
      v13 = "hmac-md5-96";
      v14 = 16;
      v15 = v9;
      while (*(unsigned __int8 *)v15 == *(unsigned __int8 *)v13)
      {
        v15 = (__int128 *)((char *)v15 + 1);
        ++v13;
        if (!--v10)
          goto LABEL_26;
      }
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  if (memcmp(*(const void **)v9, "hmac-md5-96", v11))
  {
LABEL_24:
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v25[0] = &off_1E78B7238;
    v25[1] = &_bambiDomain;
    v26 = 0x40000000;
    v18 = ImsResult::operator<<<char [44]>((uint64_t)v25, "Can't fill IPSec key for unknown algorithm ");
    v19 = (const ImsResult *)ImsResult::operator<<<std::string>(v18, (uint64_t)v9);
    ImsResult::ImsResult((ImsResult *)a4, v19);
    ImsResult::~ImsResult((ImsResult *)v25);
    return result;
  }
LABEL_22:
  v14 = 16;
LABEL_26:
  v21 = (_OWORD *)*a3;
  v22 = a3[1] - *a3;
  if (v14 <= v22)
  {
    if (v14 < v22)
      a3[1] = (unint64_t)v21 + v14;
  }
  else
  {
    std::vector<unsigned char>::__append(a3, v14 - v22);
    v21 = (_OWORD *)*a3;
  }
  *v21 = *a2;
  v23 = (void *)(*a3 + 16);
  v24 = a3[1] - (_QWORD)v23;
  if (v24 >= 1)
    bzero(v23, v24);
  result = 0.0;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_QWORD *)a4 = &off_1E78B7238;
  *(_QWORD *)(a4 + 8) = &_bambiDomain;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void sub_1BF1007F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

double SipIPSec3gppSecurityMechanism::fillIPSecEncryptionKey@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  void **v8;
  __int128 *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  _OWORD *v19;
  unint64_t v20;
  uint64_t v21;
  const ImsResult *v22;
  double result;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v26[2];
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v8 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 40, (void **)"ealg");
  if ((void **)(a1 + 48) == v8)
    v9 = &ims::kEmptyString;
  else
    v9 = (__int128 *)(v8 + 7);
  v10 = *((unsigned __int8 *)v9 + 23);
  if ((v10 & 0x80u) != 0)
    v10 = *((_QWORD *)v9 + 1);
  if (v10)
    v11 = (const char *)v9;
  else
    v11 = "null";
  v12 = *((unsigned __int8 *)v11 + 23);
  v13 = *((_QWORD *)v11 + 1);
  if ((v12 & 0x80u) == 0)
    v14 = *((unsigned __int8 *)v11 + 23);
  else
    v14 = *((_QWORD *)v11 + 1);
  if (v14 == 12)
  {
    if ((v12 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v11, "des-ede3-cbc", v13))
        goto LABEL_30;
    }
    else if (v11[23])
    {
      v17 = "des-ede3-cbc";
      v18 = v11;
      while (*(unsigned __int8 *)v18 == *(unsigned __int8 *)v17)
      {
        ++v18;
        ++v17;
        if (!--v12)
          goto LABEL_31;
      }
      goto LABEL_30;
    }
LABEL_31:
    v24 = (_QWORD *)*a3;
    v25 = a3[1] - *a3;
    if (v25 > 0x17)
    {
      if (v25 != 24)
        a3[1] = (unint64_t)(v24 + 3);
    }
    else
    {
      std::vector<unsigned char>::__append(a3, 24 - v25);
      v24 = (_QWORD *)*a3;
    }
    *v24 = *a2;
    v24[1] = a2[1];
    v24[2] = *a2;
    goto LABEL_39;
  }
  if (v14 != 7)
    goto LABEL_30;
  if ((v12 & 0x80) == 0)
  {
    if (v11[23])
    {
      v15 = "aes-cbc";
      v16 = v11;
      while (*(unsigned __int8 *)v16 == *(unsigned __int8 *)v15)
      {
        ++v16;
        ++v15;
        if (!--v12)
          goto LABEL_27;
      }
      goto LABEL_30;
    }
    goto LABEL_27;
  }
  if (memcmp(*(const void **)v11, "aes-cbc", v13))
  {
LABEL_30:
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v26[0] = &off_1E78B7238;
    v26[1] = &_bambiDomain;
    v27 = 0x40000000;
    v21 = ImsResult::operator<<<char [49]>((uint64_t)v26, "Unable to generate key for encryption algorithm ");
    v22 = (const ImsResult *)ImsResult::operator<<<std::string>(v21, (uint64_t)v11);
    ImsResult::ImsResult((ImsResult *)a4, v22);
    ImsResult::~ImsResult((ImsResult *)v26);
    return result;
  }
LABEL_27:
  v19 = (_OWORD *)*a3;
  v20 = a3[1] - *a3;
  if (v20 > 0xF)
  {
    if (v20 != 16)
      a3[1] = (unint64_t)(v19 + 1);
  }
  else
  {
    std::vector<unsigned char>::__append(a3, 16 - v20);
    v19 = (_OWORD *)*a3;
  }
  *v19 = *(_OWORD *)a2;
LABEL_39:
  result = 0.0;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_QWORD *)a4 = &off_1E78B7238;
  *(_QWORD *)(a4 + 8) = &_bambiDomain;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void sub_1BF100A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void SipIPSec3gppSecurityMechanism::~SipIPSec3gppSecurityMechanism(SipIPSec3gppSecurityMechanism *this)
{
  SipSecurityMechanism::~SipSecurityMechanism(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipIPSec3gppSecurityMechanism::clone(SipIPSec3gppSecurityMechanism *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = v2;
  *(_QWORD *)v2 = off_1E78D3E40;
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v2 + 8), *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)(v2 + 8) = *(_OWORD *)((char *)this + 8);
    *(_QWORD *)(v2 + 24) = *((_QWORD *)this + 3);
  }
  *(_QWORD *)(v3 + 32) = &off_1E78B82D8;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)(v3 + 40), *((void ***)this + 5), (void **)this + 6);
  *(_BYTE *)(v3 + 65) = 1;
  *(_BYTE *)(v3 + 64) = *((_BYTE *)this + 64);
  *(_QWORD *)v3 = &off_1E78DF128;
  return v3;
}

void sub_1BF100B5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40D6137D5ALL);
  _Unwind_Resume(a1);
}

void SipSecurityMechanism::~SipSecurityMechanism(SipSecurityMechanism *this)
{
  *(_QWORD *)this = off_1E78D3E40;
  *((_QWORD *)this + 4) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 40, *((_QWORD **)this + 6));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t SipConferenceEndpoint::setAttribute(uint64_t result, uint64_t *a2, std::string *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  int *v10;
  int v11;
  int v12;

  v3 = result;
  v4 = *((unsigned __int8 *)a2 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = a2[1];
  if (v4 == 5)
  {
    if (v5 >= 0)
      v10 = (int *)a2;
    else
      v10 = (int *)*a2;
    v11 = *v10;
    v12 = *((unsigned __int8 *)v10 + 4);
    if (v11 == 1952543859 && v12 == 101)
    {
      result = conferenceStateFromName((uint64_t)a3);
      *(_DWORD *)(v3 + 416) = result;
    }
  }
  else if (v4 == 6)
  {
    if (v5 >= 0)
      v6 = (int *)a2;
    else
      v6 = (int *)*a2;
    v7 = *v6;
    v8 = *((unsigned __int16 *)v6 + 2);
    if (v7 == 1769238117 && v8 == 31092)
      return SipUri::fromString(result + 8, a3);
  }
  return result;
}

uint64_t conferenceStateFromName(uint64_t a1)
{
  uint64_t v1;
  int v2;
  _DWORD *v3;
  unsigned int *v5;
  unsigned int v7;
  unsigned int v8;
  int v9;

  v1 = *(unsigned __int8 *)(a1 + 23);
  v2 = (char)v1;
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (v1 == 7)
  {
    if (v2 >= 0)
      v5 = (unsigned int *)a1;
    else
      v5 = *(unsigned int **)a1;
    if (*v5 == 1953653104 && *(unsigned int *)((char *)v5 + 3) == 1818323316)
    {
      return 2;
    }
    else
    {
      v7 = 1684368485;
      v8 = bswap32(*v5);
      if (v8 == 1684368485 && (v7 = 1702126948, v8 = bswap32(*(unsigned int *)((char *)v5 + 3)), v8 == 1702126948))
      {
        v9 = 0;
      }
      else if (v8 < v7)
      {
        v9 = -1;
      }
      else
      {
        v9 = 1;
      }
      if (v9)
        return 0;
      else
        return 3;
    }
  }
  else if (v1 == 4)
  {
    if (v2 >= 0)
      v3 = (_DWORD *)a1;
    else
      v3 = *(_DWORD **)a1;
    return *v3 == 1819047270;
  }
  else
  {
    return 0;
  }
}

void SipConferenceEndpoint::setText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  size_t size;
  std::string *p_p;
  int data;
  int v14;
  int v16;
  std::string *v17;
  std::string *v18;
  std::string::size_type v19;
  int v20;
  std::string *v22;
  std::string::size_type v23;
  int v24;
  std::string *v26;
  std::string *v27;
  std::string *v28;
  std::string::size_type v29;
  uint64_t v30;
  std::string __p;

  v3 = *(unsigned __int8 *)(a2 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 6)
  {
    v5 = v4 >= 0 ? (int *)a2 : *(int **)a2;
    v6 = *v5;
    v7 = *((unsigned __int16 *)v5 + 2);
    if (v6 == 1952543859 && v7 == 29557)
    {
      memset(&__p, 0, sizeof(__p));
      if (*(char *)(a3 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      else
        __p = *(std::string *)a3;
      ims::chomp(&__p, "\r\n\t ", 3);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      switch(size)
      {
        case 7uLL:
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (LODWORD(p_p->__r_.__value_.__l.__data_) == 1747807855
            && *(_DWORD *)((char *)p_p->__r_.__value_.__r.__words + 3) == 1684828008)
          {
            v16 = 2;
            goto LABEL_70;
          }
          data = (int)p_p->__r_.__value_.__l.__data_;
          v14 = *(_DWORD *)((char *)p_p->__r_.__value_.__r.__words + 3);
          if (data == 1684956528 && v14 == 1735289188)
          {
            v16 = 4;
            goto LABEL_70;
          }
          goto LABEL_68;
        case 8uLL:
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v17 = &__p;
          else
            v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (memcmp(v17, "alerting", size))
            goto LABEL_68;
          v16 = 5;
          goto LABEL_70;
        case 9uLL:
          v22 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v23 = v22->__r_.__value_.__r.__words[0];
          v24 = v22->__r_.__value_.__s.__data_[8];
          if (v23 != 0x657463656E6E6F63 || v24 != 100)
            goto LABEL_68;
          v16 = 1;
          goto LABEL_70;
        case 0xAuLL:
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v26 = &__p;
          else
            v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (memcmp(v26, "dialing-in", size))
            goto LABEL_68;
          v16 = 6;
          goto LABEL_70;
        case 0xBuLL:
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &__p;
          else
            v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (memcmp(v27, "dialing-out", size))
            goto LABEL_68;
          v16 = 7;
          goto LABEL_70;
        case 0xCuLL:
          v18 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v19 = v18->__r_.__value_.__r.__words[0];
          v20 = v18->__r_.__value_.__r.__words[1];
          if (v19 != 0x656E6E6F63736964 || v20 != 1684370531)
            goto LABEL_68;
          v16 = 9;
          goto LABEL_70;
        case 0xFuLL:
          v28 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v29 = v28->__r_.__value_.__r.__words[0];
          v30 = *(std::string::size_type *)((char *)v28->__r_.__value_.__r.__words + 7);
          if (v29 != 0x69762D646574756DLL || v30 != 0x7375636F662D6169)
            goto LABEL_68;
          v16 = 3;
          goto LABEL_70;
        default:
LABEL_68:
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p.__r_.__value_.__l.__data_, "disconnecting"))
          {
            v16 = 8;
LABEL_70:
            *(_DWORD *)(a1 + 448) = v16;
          }
          else
          {
            *(_DWORD *)(a1 + 448) = 0;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          break;
      }
    }
  }
}

void sub_1BF10104C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipConferenceEndpoint::createChild(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t result;

  v2 = *((unsigned __int8 *)a2 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  if (v2 != 6)
    return 0;
  if (v3 >= 0)
    v4 = a2;
  else
    v4 = (uint64_t *)*a2;
  v5 = 1937006964;
  v6 = bswap32(*(_DWORD *)v4);
  if (v6 == 1937006964 && (v6 = bswap32(*((unsigned __int16 *)v4 + 2)) >> 16, v5 = 30067, v6 == 30067))
  {
    v7 = 0;
  }
  else if (v6 < v5)
  {
    v7 = -1;
  }
  else
  {
    v7 = 1;
  }
  if (v7)
    return 0;
  return result;
}

uint64_t SipConferenceEndpoint::parseChild(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;

  v3 = *(unsigned __int8 *)(a2 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 12
    && (v4 >= 0 ? (v5 = a2) : (v5 = *(_QWORD *)a2),
        (v6 = *(_QWORD *)v5, v7 = *(_DWORD *)(v5 + 8), v6 == 0x2D79616C70736964) ? (v8 = v7 == 1954047348) : (v8 = 0),
        v8))
  {
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  }
  else
  {
    return bambi::XmlParserItem::parseChild(a1, a2, a3);
  }
}

_QWORD *SipConferenceEndpoint::statusAsString@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if ((a1 - 1) > 8)
    v2 = "unknown";
  else
    v2 = off_1E78DF418[a1 - 1];
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void SipConferenceUser::~SipConferenceUser(SipConferenceUser *this)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_1E78DF1F0;
  v2 = (_QWORD *)*((_QWORD *)this + 57);
  v3 = (_QWORD *)*((_QWORD *)this + 58);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)*((_QWORD *)this + 57);
  }
  if (v2)
  {
    *((_QWORD *)this + 58) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 447) < 0)
    operator delete(*((void **)this + 53));
  SipUri::~SipUri((SipConferenceUser *)((char *)this + 8));
}

{
  SipConferenceUser::~SipConferenceUser(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipConferenceUser::setAttribute(uint64_t result, uint64_t *a2, std::string *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  int *v10;
  int v11;
  int v12;

  v3 = result;
  v4 = *((unsigned __int8 *)a2 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = a2[1];
  if (v4 == 5)
  {
    if (v5 >= 0)
      v10 = (int *)a2;
    else
      v10 = (int *)*a2;
    v11 = *v10;
    v12 = *((unsigned __int8 *)v10 + 4);
    if (v11 == 1952543859 && v12 == 101)
    {
      result = conferenceStateFromName((uint64_t)a3);
      *(_DWORD *)(v3 + 416) = result;
    }
  }
  else if (v4 == 6)
  {
    if (v5 >= 0)
      v6 = (int *)a2;
    else
      v6 = (int *)*a2;
    v7 = *v6;
    v8 = *((unsigned __int16 *)v6 + 2);
    if (v7 == 1769238117 && v8 == 31092)
      return SipUri::fromString(result + 8, a3);
  }
  return result;
}

uint64_t SipConferenceUser::parseChild(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;

  v3 = *(unsigned __int8 *)(a2 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 12
    && (v4 >= 0 ? (v5 = a2) : (v5 = *(_QWORD *)a2),
        (v6 = *(_QWORD *)v5, v7 = *(_DWORD *)(v5 + 8), v6 == 0x2D79616C70736964) ? (v8 = v7 == 1954047348) : (v8 = 0),
        v8))
  {
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  }
  else
  {
    return bambi::XmlParserItem::parseChild(a1, a2, a3);
  }
}

uint64_t SipConferenceUser::createChild(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v2 = *(unsigned __int8 *)(a2 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (v2 != 8)
    return 0;
  v4 = v3 >= 0 ? (_QWORD *)a2 : *(_QWORD **)a2;
  if (*v4 != 0x746E696F70646E65)
    return 0;
  v8 = operator new();
  v5 = v8;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 16) = &off_1E78D08F8;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_WORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 72) = &off_1E78B82D8;
  *(_QWORD *)(v8 + 80) = v8 + 88;
  *(_BYTE *)(v8 + 105) = 1;
  *(_QWORD *)v8 = off_1E78DF180;
  *(_QWORD *)(v8 + 8) = &off_1E78BFCE8;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_QWORD *)(v8 + 320) = 0;
  *(_QWORD *)(v8 + 352) = 0;
  *(_QWORD *)(v8 + 360) = 0;
  *(_QWORD *)(v8 + 336) = &off_1E78B82D8;
  *(_QWORD *)(v8 + 344) = v8 + 352;
  *(_QWORD *)(v8 + 392) = 0;
  *(_QWORD *)(v8 + 400) = 0;
  *(_QWORD *)(v8 + 376) = &off_1E78B82D8;
  *(_QWORD *)(v8 + 384) = v8 + 392;
  *(_BYTE *)(v8 + 104) = 1;
  *(_WORD *)(v8 + 368) = 257;
  *(_WORD *)(v8 + 408) = 257;
  *(_BYTE *)(v8 + 328) = 0;
  *(_QWORD *)(v8 + 424) = 0;
  *(_QWORD *)(v8 + 432) = 0;
  *(_QWORD *)(v8 + 440) = 0;
  *(_QWORD *)(v8 + 456) = a1;
  *(_DWORD *)(v8 + 416) = 0;
  *(_DWORD *)(v8 + 448) = 0;
  v10 = (uint64_t *)a1[58];
  v9 = a1[59];
  if ((unint64_t)v10 >= v9)
  {
    v12 = a1[57];
    v13 = ((uint64_t)v10 - v12) >> 3;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v14 = v9 - v12;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v16);
    else
      v17 = 0;
    v18 = (uint64_t *)(v16 + 8 * v13);
    v19 = v16 + 8 * v17;
    *v18 = v5;
    v11 = v18 + 1;
    v21 = (char *)a1[57];
    v20 = (char *)a1[58];
    if (v20 != v21)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *--v18 = v22;
      }
      while (v20 != v21);
      v20 = (char *)a1[57];
    }
    a1[57] = v18;
    a1[58] = v11;
    a1[59] = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v10 = v8;
    v11 = v10 + 1;
  }
  a1[58] = v11;
  return v5;
}

uint64_t SipConferenceUsers::createChild(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v2 = *(unsigned __int8 *)(a2 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (v2 != 4)
    return 0;
  v4 = v3 >= 0 ? (_DWORD *)a2 : *(_DWORD **)a2;
  if (*v4 != 1919251317)
    return 0;
  v8 = operator new();
  v5 = v8;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 16) = &off_1E78D08F8;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_WORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 72) = &off_1E78B82D8;
  *(_QWORD *)(v8 + 80) = v8 + 88;
  *(_BYTE *)(v8 + 105) = 1;
  *(_QWORD *)v8 = &off_1E78DF1F0;
  *(_QWORD *)(v8 + 8) = &off_1E78BFCE8;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_QWORD *)(v8 + 320) = 0;
  *(_QWORD *)(v8 + 352) = 0;
  *(_QWORD *)(v8 + 360) = 0;
  *(_QWORD *)(v8 + 336) = &off_1E78B82D8;
  *(_QWORD *)(v8 + 344) = v8 + 352;
  *(_QWORD *)(v8 + 392) = 0;
  *(_QWORD *)(v8 + 400) = 0;
  *(_QWORD *)(v8 + 376) = &off_1E78B82D8;
  *(_QWORD *)(v8 + 384) = v8 + 392;
  *(_BYTE *)(v8 + 104) = 1;
  *(_WORD *)(v8 + 368) = 257;
  *(_WORD *)(v8 + 408) = 257;
  *(_BYTE *)(v8 + 328) = 0;
  *(_QWORD *)(v8 + 424) = 0;
  *(_QWORD *)(v8 + 432) = 0;
  *(_QWORD *)(v8 + 456) = 0;
  *(_QWORD *)(v8 + 464) = 0;
  *(_QWORD *)(v8 + 472) = 0;
  *(_QWORD *)(v8 + 440) = 0;
  *(_QWORD *)(v8 + 448) = a1;
  *(_DWORD *)(v8 + 416) = 0;
  v10 = (uint64_t *)a1[2];
  v9 = a1[3];
  if ((unint64_t)v10 >= v9)
  {
    v12 = a1[1];
    v13 = ((uint64_t)v10 - v12) >> 3;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v14 = v9 - v12;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v16);
    else
      v17 = 0;
    v18 = (uint64_t *)(v16 + 8 * v13);
    v19 = v16 + 8 * v17;
    *v18 = v5;
    v11 = v18 + 1;
    v21 = (char *)a1[1];
    v20 = (char *)a1[2];
    if (v20 != v21)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *--v18 = v22;
      }
      while (v20 != v21);
      v20 = (char *)a1[1];
    }
    a1[1] = v18;
    a1[2] = v11;
    a1[3] = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v10 = v8;
    v11 = v10 + 1;
  }
  a1[2] = v11;
  return v5;
}

_QWORD *SipConferenceUsers::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;

  v3 = a1;
  v4 = (_QWORD *)a1[1];
  v5 = (_QWORD *)a1[2];
  if (v4 != v5)
  {
    do
    {
      if (*v4)
        (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
      ++v4;
    }
    while (v4 != v5);
    v4 = (_QWORD *)v3[1];
  }
  v3[2] = v4;
  v6 = *(_QWORD **)(a2 + 8);
  v41 = *(_QWORD **)(a2 + 16);
  if (v6 != v41)
  {
    v40 = v3;
    do
    {
      v42 = v6;
      v7 = *v6;
      v8 = operator new();
      *(_QWORD *)v8 = &off_1E78DF1F0;
      *(_QWORD *)(v8 + 8) = &off_1E78BFCE8;
      *(_QWORD *)(v8 + 56) = 0;
      *(_QWORD *)(v8 + 64) = 0;
      *(_QWORD *)(v8 + 16) = &off_1E78D08F8;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      *(_WORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 96) = 0;
      *(_QWORD *)(v8 + 88) = 0;
      *(_QWORD *)(v8 + 72) = &off_1E78B82D8;
      *(_QWORD *)(v8 + 80) = v8 + 88;
      *(_BYTE *)(v8 + 105) = 1;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 144) = 0u;
      *(_OWORD *)(v8 + 160) = 0u;
      *(_OWORD *)(v8 + 176) = 0u;
      *(_OWORD *)(v8 + 192) = 0u;
      *(_OWORD *)(v8 + 208) = 0u;
      *(_OWORD *)(v8 + 224) = 0u;
      *(_OWORD *)(v8 + 240) = 0u;
      *(_OWORD *)(v8 + 256) = 0u;
      *(_OWORD *)(v8 + 272) = 0u;
      *(_OWORD *)(v8 + 288) = 0u;
      *(_OWORD *)(v8 + 304) = 0u;
      *(_QWORD *)(v8 + 320) = 0;
      *(_QWORD *)(v8 + 352) = 0;
      *(_QWORD *)(v8 + 360) = 0;
      *(_QWORD *)(v8 + 336) = &off_1E78B82D8;
      *(_QWORD *)(v8 + 344) = v8 + 352;
      *(_QWORD *)(v8 + 392) = 0;
      *(_QWORD *)(v8 + 400) = 0;
      *(_QWORD *)(v8 + 376) = &off_1E78B82D8;
      *(_QWORD *)(v8 + 384) = v8 + 392;
      *(_BYTE *)(v8 + 104) = 1;
      *(_WORD *)(v8 + 368) = 257;
      *(_WORD *)(v8 + 408) = 257;
      *(_BYTE *)(v8 + 328) = 0;
      *(_QWORD *)(v8 + 424) = 0;
      *(_QWORD *)(v8 + 432) = 0;
      *(_QWORD *)(v8 + 440) = 0;
      v9 = (char **)(v8 + 456);
      *(_QWORD *)(v8 + 456) = 0;
      *(_QWORD *)(v8 + 464) = 0;
      *(_QWORD *)(v8 + 472) = 0;
      SipUri::operator=((SipUri *)(v8 + 8), v7 + 8);
      *(_DWORD *)(v8 + 416) = *(_DWORD *)(v7 + 416);
      std::string::operator=((std::string *)(v8 + 424), (const std::string *)(v7 + 424));
      v11 = *(uint64_t **)(v7 + 456);
      v10 = *(uint64_t **)(v7 + 464);
      while (v11 != v10)
      {
        v12 = *v11;
        v13 = operator new();
        *(_QWORD *)v13 = off_1E78DF180;
        *(_QWORD *)(v13 + 8) = &off_1E78BFCE8;
        *(_QWORD *)(v13 + 56) = 0;
        *(_QWORD *)(v13 + 64) = 0;
        *(_QWORD *)(v13 + 16) = &off_1E78D08F8;
        *(_QWORD *)(v13 + 24) = 0;
        *(_QWORD *)(v13 + 32) = 0;
        *(_QWORD *)(v13 + 40) = 0;
        *(_WORD *)(v13 + 48) = 0;
        *(_QWORD *)(v13 + 96) = 0;
        *(_QWORD *)(v13 + 88) = 0;
        *(_QWORD *)(v13 + 72) = &off_1E78B82D8;
        *(_QWORD *)(v13 + 80) = v13 + 88;
        *(_BYTE *)(v13 + 105) = 1;
        *(_OWORD *)(v13 + 112) = 0u;
        *(_OWORD *)(v13 + 128) = 0u;
        *(_OWORD *)(v13 + 144) = 0u;
        *(_OWORD *)(v13 + 160) = 0u;
        *(_OWORD *)(v13 + 176) = 0u;
        *(_OWORD *)(v13 + 192) = 0u;
        *(_OWORD *)(v13 + 208) = 0u;
        *(_OWORD *)(v13 + 224) = 0u;
        *(_OWORD *)(v13 + 240) = 0u;
        *(_OWORD *)(v13 + 256) = 0u;
        *(_OWORD *)(v13 + 272) = 0u;
        *(_OWORD *)(v13 + 288) = 0u;
        *(_OWORD *)(v13 + 304) = 0u;
        *(_QWORD *)(v13 + 320) = 0;
        *(_QWORD *)(v13 + 352) = 0;
        *(_QWORD *)(v13 + 360) = 0;
        *(_QWORD *)(v13 + 336) = &off_1E78B82D8;
        *(_QWORD *)(v13 + 344) = v13 + 352;
        *(_QWORD *)(v13 + 392) = 0;
        *(_QWORD *)(v13 + 400) = 0;
        *(_QWORD *)(v13 + 376) = &off_1E78B82D8;
        *(_QWORD *)(v13 + 384) = v13 + 392;
        *(_BYTE *)(v13 + 104) = 1;
        *(_WORD *)(v13 + 368) = 257;
        *(_WORD *)(v13 + 408) = 257;
        *(_BYTE *)(v13 + 328) = 0;
        *(_QWORD *)(v13 + 424) = 0;
        *(_QWORD *)(v13 + 432) = 0;
        *(_QWORD *)(v13 + 440) = 0;
        *(_QWORD *)(v13 + 456) = v8;
        SipUri::operator=((SipUri *)(v13 + 8), v12 + 8);
        *(_DWORD *)(v13 + 416) = *(_DWORD *)(v12 + 416);
        *(_DWORD *)(v13 + 448) = *(_DWORD *)(v12 + 448);
        std::string::operator=((std::string *)(v13 + 424), (const std::string *)(v12 + 424));
        v15 = *(uint64_t **)(v8 + 464);
        v14 = *(_QWORD *)(v8 + 472);
        if ((unint64_t)v15 >= v14)
        {
          v17 = ((char *)v15 - *v9) >> 3;
          if ((unint64_t)(v17 + 1) >> 61)
            std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
          v18 = v14 - (_QWORD)*v9;
          v19 = v18 >> 2;
          if (v18 >> 2 <= (unint64_t)(v17 + 1))
            v19 = v17 + 1;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v19;
          if (v20)
            v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v20);
          else
            v21 = 0;
          v22 = (uint64_t *)(v20 + 8 * v17);
          *v22 = v13;
          v16 = v22 + 1;
          v24 = *(char **)(v8 + 456);
          v23 = *(char **)(v8 + 464);
          if (v23 != v24)
          {
            do
            {
              v25 = *((_QWORD *)v23 - 1);
              v23 -= 8;
              *--v22 = v25;
            }
            while (v23 != v24);
            v23 = *v9;
          }
          *(_QWORD *)(v8 + 456) = v22;
          *(_QWORD *)(v8 + 464) = v16;
          *(_QWORD *)(v8 + 472) = v20 + 8 * v21;
          if (v23)
            operator delete(v23);
        }
        else
        {
          *v15 = v13;
          v16 = v15 + 1;
        }
        *(_QWORD *)(v8 + 464) = v16;
        ++v11;
      }
      v3 = v40;
      *(_QWORD *)(v8 + 448) = v40;
      v27 = (uint64_t *)v40[2];
      v26 = v40[3];
      if ((unint64_t)v27 >= v26)
      {
        v29 = v40[1];
        v30 = ((uint64_t)v27 - v29) >> 3;
        if ((unint64_t)(v30 + 1) >> 61)
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        v31 = v26 - v29;
        v32 = v31 >> 2;
        if (v31 >> 2 <= (unint64_t)(v30 + 1))
          v32 = v30 + 1;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
          v33 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v33 = v32;
        if (v33)
          v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v33);
        else
          v34 = 0;
        v35 = (uint64_t *)(v33 + 8 * v30);
        *v35 = v8;
        v28 = v35 + 1;
        v37 = (char *)v40[1];
        v36 = (char *)v40[2];
        if (v36 != v37)
        {
          do
          {
            v38 = *((_QWORD *)v36 - 1);
            v36 -= 8;
            *--v35 = v38;
          }
          while (v36 != v37);
          v36 = (char *)v40[1];
        }
        v40[1] = v35;
        v40[2] = v28;
        v40[3] = v33 + 8 * v34;
        if (v36)
          operator delete(v36);
      }
      else
      {
        *v27 = v8;
        v28 = v27 + 1;
      }
      v40[2] = v28;
      v6 = v42 + 1;
    }
    while (v42 + 1 != v41);
  }
  return v3;
}

void sub_1BF101B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, SipUri *a11)
{
  uint64_t v11;
  void **v12;
  void *v14;

  v14 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v11 + 464) = v14;
    operator delete(v14);
  }
  if (*(char *)(v11 + 447) < 0)
    operator delete(*a10);
  SipUri::~SipUri(a11);
  MEMORY[0x1C3B87100](v11, 0x10B3C40BA49582ALL);
  _Unwind_Resume(a1);
}

void SipConferenceUsers::~SipConferenceUsers(SipConferenceUsers *this)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_1E78DF260;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)*((_QWORD *)this + 1);
  }
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  SipConferenceUsers::~SipConferenceUsers(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipConferenceDescription::createChild()
{
  return 0;
}

uint64_t SipConferenceDescription::parseChild(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  int *v10;
  int v11;
  int v12;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v3 = *(unsigned __int8 *)(a2 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 7)
  {
    if (v4 >= 0)
      v10 = (int *)a2;
    else
      v10 = *(int **)a2;
    v11 = *v10;
    v12 = *(int *)((char *)v10 + 3);
    if (v11 != 1784837491 || v12 != 1952671082)
      return bambi::XmlParserItem::parseChild(a1, a2, a3);
    v9 = *(_QWORD *)a1;
    return (*(uint64_t (**)(void))(v9 + 72))();
  }
  if (v3 != 18)
  {
    if (v3 != 12)
      return bambi::XmlParserItem::parseChild(a1, a2, a3);
    v5 = v4 >= 0 ? a2 : *(_QWORD *)a2;
    v6 = *(_QWORD *)v5;
    v7 = *(_DWORD *)(v5 + 8);
    if (v6 != 0x2D79616C70736964 || v7 != 1954047348)
      return bambi::XmlParserItem::parseChild(a1, a2, a3);
    v9 = *(_QWORD *)a1;
    return (*(uint64_t (**)(void))(v9 + 72))();
  }
  if (v4 >= 0)
    v15 = (int *)a2;
  else
    v15 = *(int **)a2;
  v16 = *(_QWORD *)v15;
  v17 = *((_QWORD *)v15 + 1);
  v18 = *((unsigned __int16 *)v15 + 8);
  if (v16 != 0x2D6D756D6978616DLL || v17 != 0x756F632D72657375 || v18 != 29806)
    return bambi::XmlParserItem::parseChild(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
}

void SipConferenceInfo::SipConferenceInfo(SipConferenceInfo *this)
{
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 2) = &off_1E78D08F8;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_WORD *)this + 24) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = &off_1E78B82D8;
  *((_QWORD *)this + 10) = (char *)this + 88;
  *((_BYTE *)this + 105) = 1;
  *(_QWORD *)this = &off_1E78DF2D0;
  *((_QWORD *)this + 1) = &off_1E78BFCE8;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 42) = &off_1E78B82D8;
  *((_QWORD *)this + 43) = (char *)this + 352;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 47) = &off_1E78B82D8;
  *((_QWORD *)this + 48) = (char *)this + 392;
  *((_BYTE *)this + 104) = 1;
  *((_WORD *)this + 184) = 257;
  *((_WORD *)this + 204) = 257;
  *((_BYTE *)this + 328) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = this;
  *((_QWORD *)this + 59) = off_1E78DF358;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((_DWORD *)this + 105) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = &off_1E78DF260;
}

void SipConferenceInfo::SipConferenceInfo(SipConferenceInfo *this, const SipConferenceInfo *a2)
{
  _QWORD *v4;

  *((_QWORD *)this + 1) = &off_1E78BFCE8;
  *(_QWORD *)this = &off_1E78DF2D0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 2) = &off_1E78D08F8;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_WORD *)this + 24) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = &off_1E78B82D8;
  *((_QWORD *)this + 10) = (char *)this + 88;
  *((_BYTE *)this + 105) = 1;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 42) = &off_1E78B82D8;
  *((_QWORD *)this + 43) = (char *)this + 352;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 47) = &off_1E78B82D8;
  *((_QWORD *)this + 48) = (char *)this + 392;
  *((_BYTE *)this + 104) = 1;
  *((_WORD *)this + 184) = 257;
  *((_WORD *)this + 204) = 257;
  *((_BYTE *)this + 328) = 0;
  v4 = (_QWORD *)((char *)this + 432);
  *((_QWORD *)this + 54) = &off_1E78DF260;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = this;
  *((_QWORD *)this + 59) = off_1E78DF358;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  SipUri::operator=((SipConferenceInfo *)((char *)this + 8), (uint64_t)a2 + 8);
  *((_QWORD *)this + 52) = *((_QWORD *)a2 + 52);
  *((_QWORD *)this + 53) = *((_QWORD *)a2 + 53);
  SipConferenceUsers::operator=(v4, (uint64_t)a2 + 432);
}

void sub_1BF101F50(_Unwind_Exception *a1)
{
  SipUri *v1;
  SipConferenceUsers *v2;
  void **v3;

  SipConferenceDescription::~SipConferenceDescription(v3);
  SipConferenceUsers::~SipConferenceUsers(v2);
  SipUri::~SipUri(v1);
  _Unwind_Resume(a1);
}

void SipConferenceDescription::~SipConferenceDescription(void **this)
{
  *this = off_1E78DF358;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  *this = off_1E78DF358;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipConferenceInfo::setAttribute(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  int *v10;
  int v11;
  int v12;
  int *v14;
  int v15;
  int v16;
  const char *v18;

  v3 = result;
  v4 = *((unsigned __int8 *)a2 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = a2[1];
  switch(v4)
  {
    case 5:
      if (v5 >= 0)
        v10 = (int *)a2;
      else
        v10 = (int *)*a2;
      v11 = *v10;
      v12 = *((unsigned __int8 *)v10 + 4);
      if (v11 == 1952543859 && v12 == 101)
      {
        result = conferenceStateFromName(a3);
        *(_DWORD *)(v3 + 416) = result;
      }
      break;
    case 7:
      if (v5 >= 0)
        v14 = (int *)a2;
      else
        v14 = (int *)*a2;
      v15 = *v14;
      v16 = *(int *)((char *)v14 + 3);
      if (v15 == 1936876918 && v16 == 1852795251)
      {
        if (*(char *)(a3 + 23) >= 0)
          v18 = (const char *)a3;
        else
          v18 = *(const char **)a3;
        result = strtoul(v18, 0, 10);
        *(_DWORD *)(v3 + 420) = result;
      }
      break;
    case 6:
      if (v5 >= 0)
        v6 = (int *)a2;
      else
        v6 = (int *)*a2;
      v7 = *v6;
      v8 = *((unsigned __int16 *)v6 + 2);
      if (v7 == 1769238117 && v8 == 31092)
        return SipUri::fromString(result + 8, (std::string *)a3);
      break;
  }
  return result;
}

uint64_t SipConferenceInfo::createChild(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;

  v2 = *(unsigned __int8 *)(a2 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (v2 == 22)
  {
    if (v3 >= 0)
      v6 = (unint64_t *)a2;
    else
      v6 = *(unint64_t **)a2;
    v7 = 0x636F6E666572656ELL;
    v8 = bswap64(*v6);
    if (v8 == 0x636F6E666572656ELL
      && (v7 = 0x63652D6465736372, v8 = bswap64(v6[1]), v8 == 0x63652D6465736372)
      && (v7 = 0x6372697074696F6ELL, v8 = bswap64(*(unint64_t *)((char *)v6 + 14)), v8 == 0x6372697074696F6ELL))
    {
      v9 = 0;
    }
    else if (v8 < v7)
    {
      v9 = -1;
    }
    else
    {
      v9 = 1;
    }
    if (v9)
      return 0;
    else
      return a1 + 472;
  }
  else if (v2 == 5)
  {
    if (v3 >= 0)
      v4 = a2;
    else
      v4 = *(_QWORD *)a2;
    if (*(_DWORD *)v4 ^ 0x72657375 | *(unsigned __int8 *)(v4 + 4) ^ 0x73)
      return 0;
    else
      return a1 + 432;
  }
  else
  {
    return 0;
  }
}

void SipConferenceEndpoint::~SipConferenceEndpoint(void **this)
{
  *this = off_1E78DF180;
  if (*((char *)this + 447) < 0)
    operator delete(this[53]);
  SipUri::~SipUri((SipUri *)(this + 1));
}

{
  *this = off_1E78DF180;
  if (*((char *)this + 447) < 0)
    operator delete(this[53]);
  SipUri::~SipUri((SipUri *)(this + 1));
  JUMPOUT(0x1C3B87100);
}

void LazuliGroupParticipant::~LazuliGroupParticipant(void **this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *this = &off_1E78DF470;
  if (*((char *)this + 207) < 0)
    operator delete(this[23]);
  v2 = (std::__shared_weak_count *)this[20];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  v3 = (std::__shared_weak_count *)this[14];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  *this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  LazuliGroupParticipant::~LazuliGroupParticipant(this);
  JUMPOUT(0x1C3B87100);
}

void LazuliGroupParticipant::init(std::chrono::steady_clock::time_point *a1@<X0>, uint64_t a2@<X1>, const SipUri *a3@<X2>, const std::string *a4@<X3>, ImsResult *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *rep;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  ImsResult *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  SipDialog *v38;
  std::__shared_weak_count *v39;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v40;
  std::__shared_weak_count *v41;
  _QWORD v42[2];
  int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t *v49;
  std::__shared_weak_count *v50;

  v49 = 0;
  v50 = 0;
  SipDialog::sipSession(*(SipDialog **)a2, &v49);
  if (*(_QWORD *)(*(_QWORD *)a2 + 2056) != 1)
  {
    v47 = 0;
    v48 = 0;
LABEL_28:
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v42[0] = &off_1E78B7238;
    v42[1] = &_bambiDomain;
    v43 = 0x40000000;
    v30 = ImsResult::operator<<<char [45]>((uint64_t)v42, "No fork for group participant refer for trx ");
    v31 = (ImsResult *)ImsResult::operator<<<std::string>(v30, (uint64_t)&a1[15]);
    ImsLogContainer::logResult((ImsLogContainer *)a1, v31);
    ImsResult::ImsResult(a5, v31);
    ImsResult::~ImsResult((ImsResult *)v42);
    goto LABEL_29;
  }
  v10 = *(_QWORD *)(*(_QWORD *)a2 + 2040);
  v11 = *(_QWORD *)(v10 + 56);
  v12 = *(std::__shared_weak_count **)(v10 + 64);
  v47 = v11;
  v48 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (!v11)
    goto LABEL_28;
  a1[21].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v15 = (*(uint64_t (**)(std::chrono::steady_clock::time_point *))(a1->__d_.__rep_ + 64))(a1);
  (*(void (**)(std::chrono::steady_clock::time_point *, uint64_t))(a1->__d_.__rep_ + 16))(a1, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"refer/", 6);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v15 + 32))(v15, a4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" ", 1);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(const SipUri *, uint64_t))(*(_QWORD *)a3 + 40))(a3, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" for group ", 11);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)a2 + 224) + 40))(*(_QWORD *)a2 + 224, v15);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
  v16 = v49;
  rep = (std::__shared_weak_count *)a1[14].__d_.__rep_;
  v40 = a1[13].__d_.__rep_;
  v41 = rep;
  if (rep)
  {
    p_shared_weak_owners = (unint64_t *)&rep->__shared_weak_owners_;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
  }
  v20 = *(std::__shared_weak_count **)(a2 + 8);
  v38 = *(SipDialog **)a2;
  v39 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  if (v12)
  {
    v23 = (unint64_t *)&v12->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  SipSession::lazuliRefer(v16, &v40, a3, a4, (uint64_t *)&v38, (uint64_t)a5);
  if (v12)
  {
    v25 = (unint64_t *)&v12->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v27 = v39;
  if (v39)
  {
    v28 = (unint64_t *)&v39->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v41)
    std::__shared_weak_count::__release_weak(v41);
LABEL_29:
  v32 = v48;
  if (v48)
  {
    v33 = (unint64_t *)&v48->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v50;
  if (v50)
  {
    v36 = (unint64_t *)&v50->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_1BF1026D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v16 - 96);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v16 - 80);
  _Unwind_Resume(a1);
}

void LazuliGroupParticipant::initAdd(uint64_t a1, _QWORD *a2, const SipUri *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  *(_DWORD *)(a1 + 148) = 1;
  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = (std::__shared_weak_count *)a2[1];
  v11[0] = *a2;
  v11[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  LazuliGroupParticipant::init((std::chrono::steady_clock::time_point *)a1, (uint64_t)v11, a3, (const std::string *)"INVITE", (ImsResult *)&v12);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)&v12 + 1) + 24))(*((_QWORD *)&v12 + 1), v13) & 1) != 0)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Group Chat participant add failure: ", 36);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(__int128 *, uint64_t))(v12 + 16))(&v12, v9);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    v10 = 3;
  }
  else
  {
    v10 = 1;
  }
  LazuliGroupParticipant::setState((std::__shared_weak_count **)a1, v10);
  ImsResult::~ImsResult((ImsResult *)&v12);
}

void sub_1BF102874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void LazuliGroupParticipant::setState(std::__shared_weak_count **a1, int a2)
{
  int v2;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  SipDialog **v10;
  int v11;
  std::chrono::steady_clock::time_point v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = *((_DWORD *)a1 + 36);
  if (v2 != a2)
  {
    *((_DWORD *)a1 + 36) = a2;
    v5 = ((uint64_t (*)(std::__shared_weak_count **))(*a1)[2].__shared_weak_owners_)(a1);
    ((void (*)(std::__shared_weak_count **, uint64_t))(*a1)->__shared_weak_owners_)(a1, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"state change for ", 17);
    *(_BYTE *)(v5 + 17) = 0;
    operator<<(v5, (_DWORD *)a1 + 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" from ", 6);
    *(_BYTE *)(v5 + 17) = 0;
    operator<<(v5, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" to ", 4);
    *(_BYTE *)(v5 + 17) = 0;
    v6 = operator<<(v5, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (((_DWORD)a1[18] & 0xFFFFFFFE) == 2)
    {
      v7 = a1[20];
      if (v7)
      {
        v8 = std::__shared_weak_count::lock(v7);
        if (v8)
        {
          v9 = v8;
          v10 = (SipDialog **)a1[19];
          if (v10)
          {
            v11 = *((_DWORD *)a1 + 37);
            v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            MessageSession::handleParticipantStateChange(v10, (uint64_t)(a1 + 15), v11, a2, (uint64_t)((double)(v12.__d_.__rep_ - (uint64_t)a1[21]) / 1000000.0), *((unsigned int *)a1 + 44), (uint64_t)(a1 + 23));
          }
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
    }
  }
}

void sub_1BF102A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void LazuliGroupParticipant::initRemove(uint64_t a1, _QWORD *a2, const SipUri *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  *(_DWORD *)(a1 + 148) = 2;
  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = (std::__shared_weak_count *)a2[1];
  v11[0] = *a2;
  v11[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  LazuliGroupParticipant::init((std::chrono::steady_clock::time_point *)a1, (uint64_t)v11, a3, (const std::string *)&SipRequest::kMethodBye, (ImsResult *)&v12);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)&v12 + 1) + 24))(*((_QWORD *)&v12 + 1), v13) & 1) != 0)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Group Chat participant remove failure: ", 39);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(__int128 *, uint64_t))(v12 + 16))(&v12, v9);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    v10 = 3;
  }
  else
  {
    v10 = 1;
  }
  LazuliGroupParticipant::setState((std::__shared_weak_count **)a1, v10);
  ImsResult::~ImsResult((ImsResult *)&v12);
}

void sub_1BF102B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void LazuliGroupParticipant::create(uint64_t *a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  std::string *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  std::string __p;

  v10 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DF518;
  v13 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
  }
  v16 = *(std::__shared_weak_count **)(a4 + 8);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (v12)
  {
    v19 = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  if (v16)
  {
    v21 = (unint64_t *)&v16->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "msg.participant");
  v23 = &v10[1].__vftable;
  ImsLogContainer::ImsLogContainer((uint64_t)&v10[1], &__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v10[5].__shared_owners_ = 0;
  v10[5].__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DF470;
  v24 = (std::string *)&v10[6];
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v10[6].__shared_weak_owners_ = *(_QWORD *)(a3 + 16);
  }
  v10[7].__vftable = 0;
  v10[7].__shared_owners_ = v13;
  v10[7].__shared_weak_owners_ = (uint64_t)v12;
  if (v12)
  {
    v25 = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v10[8].__vftable = 0;
  LODWORD(v10[8].__shared_owners_) = 0;
  v10[9].__vftable = 0;
  v10[9].__shared_owners_ = 0;
  v10[8].__shared_weak_owners_ = 0;
  if (v16)
  {
    v27 = (unint64_t *)&v16->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  *v23 = &off_1E78DF568;
  if (v16)
  {
    v29 = (unint64_t *)&v16->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  shared_weak_owners = (std::__shared_weak_count *)v10[5].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_48;
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
    v33 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v10[5].__shared_owners_ = (uint64_t)v23;
    v10[5].__shared_weak_owners_ = (uint64_t)v10;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v35 = __ldxr(p_shared_owners);
    while (__stxr(v35 + 1, p_shared_owners));
    v36 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    v10[5].__shared_owners_ = (uint64_t)v23;
    v10[5].__shared_weak_owners_ = (uint64_t)v10;
  }
  do
    v38 = __ldaxr(p_shared_owners);
  while (__stlxr(v38 - 1, p_shared_owners));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_48:
  *a5 = v23;
  a5[1] = v10;
}

void sub_1BF102E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void **v18;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;

  shared_weak_owners = (std::__shared_weak_count *)v15[5].__shared_weak_owners_;
  if (shared_weak_owners)
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  ImsLogContainer::~ImsLogContainer(v18);
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    if (!v16)
    {
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (v23)
      {
LABEL_20:
        std::__shared_weak_count::~__shared_weak_count(v15);
        operator delete(v25);
        _Unwind_Resume(a1);
      }
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      v16 = v17;
LABEL_19:
      std::__shared_weak_count::__release_weak(v16);
      goto LABEL_20;
    }
    std::__shared_weak_count::__release_weak(v16);
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (v24)
      goto LABEL_19;
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  }
  else
  {
    v17 = v16;
    if (!v16)
      goto LABEL_20;
  }
  std::__shared_weak_count::__release_weak(v17);
  goto LABEL_19;
}

void LazuliGroupParticipant::addParticipant(uint64_t *a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X2>, const SipUri *a4@<X3>, _QWORD *a5@<X4>, uint64_t *a6@<X8>)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD v24[2];
  _QWORD v25[2];
  uint64_t v26;
  std::__shared_weak_count *v27;

  *a6 = 0;
  a6[1] = 0;
  v9 = (std::__shared_weak_count *)a1[1];
  v26 = *a1;
  v27 = v9;
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  v12 = (std::__shared_weak_count *)a5[1];
  v25[0] = *a5;
  v25[1] = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  LazuliGroupParticipant::create(&v26, a2, a3, (uint64_t)v25, a6);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  v17 = *a6;
  v18 = *a5;
  v19 = (std::__shared_weak_count *)a5[1];
  v24[0] = v18;
  v24[1] = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  LazuliGroupParticipant::initAdd(v17, v24, a4);
  if (v19)
  {
    v22 = (unint64_t *)&v19->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1BF103094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void LazuliGroupParticipant::removeParticipant(uint64_t *a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X2>, const SipUri *a4@<X3>, _QWORD *a5@<X4>, uint64_t *a6@<X8>)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD v24[2];
  _QWORD v25[2];
  uint64_t v26;
  std::__shared_weak_count *v27;

  *a6 = 0;
  a6[1] = 0;
  v9 = (std::__shared_weak_count *)a1[1];
  v26 = *a1;
  v27 = v9;
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  v12 = (std::__shared_weak_count *)a5[1];
  v25[0] = *a5;
  v25[1] = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  LazuliGroupParticipant::create(&v26, a2, a3, (uint64_t)v25, a6);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  v17 = *a6;
  v18 = *a5;
  v19 = (std::__shared_weak_count *)a5[1];
  v24[0] = v18;
  v24[1] = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  LazuliGroupParticipant::initRemove(v17, v24, a4);
  if (v19)
  {
    v22 = (unint64_t *)&v19->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1BF103214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

uint64_t operator<<(uint64_t a1, int a2)
{
  _QWORD *v3;
  const char *v4;
  uint64_t v5;

  if (a2 == 3)
  {
    v3 = *(_QWORD **)(a1 + 8);
    v4 = "ResponseError";
    v5 = 13;
  }
  else if (a2 == 2)
  {
    v3 = *(_QWORD **)(a1 + 8);
    v4 = "ResponseSuccess";
    v5 = 15;
  }
  else
  {
    v3 = *(_QWORD **)(a1 + 8);
    if (a2 == 1)
    {
      v4 = "RequestSent";
      v5 = 11;
    }
    else
    {
      v4 = "??";
      v5 = 2;
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
  *(_BYTE *)(a1 + 17) = 0;
  return a1;
}

uint64_t operator<<(uint64_t a1, _DWORD *a2)
{
  _QWORD *v3;
  const char *v4;
  uint64_t v5;

  if (*a2 == 2)
  {
    v3 = *(_QWORD **)(a1 + 8);
    v4 = "Remove";
    v5 = 6;
  }
  else
  {
    v3 = *(_QWORD **)(a1 + 8);
    if (*a2 == 1)
    {
      v4 = "Add";
      v5 = 3;
    }
    else
    {
      v4 = "??";
      v5 = 2;
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
  *(_BYTE *)(a1 + 17) = 0;
  return a1;
}

void LazuliGroupParticipant::handleResponse(std::__shared_weak_count **a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  int v6;
  __int128 v7;
  std::__shared_weak_count *v8;

  v4 = ((uint64_t (*)(std::__shared_weak_count **))(*a1)[2].__shared_weak_owners_)(a1);
  ((void (*)(std::__shared_weak_count **, uint64_t))(*a1)->__shared_weak_owners_)(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"partcipant action ", 18);
  *(_BYTE *)(v4 + 17) = 0;
  operator<<(v4, (_DWORD *)a1 + 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" result ", 8);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" for ", 5);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count **))(*(_QWORD *)v4 + 32))(v4, a1 + 15);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  *((_DWORD *)a1 + 44) = *(_DWORD *)(a2 + 16);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8)))
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 16))(&v7, *(_QWORD *)(a2 + 8), *((unsigned int *)a1 + 44));
    v5 = (void **)(a1 + 23);
    if (*((char *)a1 + 207) < 0)
      operator delete(*v5);
    *(_OWORD *)v5 = v7;
    a1[25] = v8;
  }
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16)))
  {
    v6 = 3;
  }
  else
  {
    v6 = 2;
  }
  LazuliGroupParticipant::setState(a1, v6);
}

void std::__shared_ptr_emplace<LazuliGroupParticipant::create(std::weak_ptr<MessageSession>,std::string const&,std::string const&,SipUri const&,std::shared_ptr<SipDialog>)::LazuliGroupParticipantWrapper,std::allocator<LazuliGroupParticipant::create(std::weak_ptr<MessageSession>,std::string const&,std::string const&,SipUri const&,std::shared_ptr<SipDialog>)::LazuliGroupParticipantWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DF518;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliGroupParticipant::create(std::weak_ptr<MessageSession>,std::string const&,std::string const&,SipUri const&,std::shared_ptr<SipDialog>)::LazuliGroupParticipantWrapper,std::allocator<LazuliGroupParticipant::create(std::weak_ptr<MessageSession>,std::string const&,std::string const&,SipUri const&,std::shared_ptr<SipDialog>)::LazuliGroupParticipantWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DF518;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<LazuliGroupParticipant::create(std::weak_ptr<MessageSession>,std::string const&,std::string const&,SipUri const&,std::shared_ptr<SipDialog>)::LazuliGroupParticipantWrapper,std::allocator<LazuliGroupParticipant::create(std::weak_ptr<MessageSession>,std::string const&,std::string const&,SipUri const&,std::shared_ptr<SipDialog>)::LazuliGroupParticipantWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void LazuliGroupParticipant::create(std::weak_ptr<MessageSession>,std::string const&,std::string const&,SipUri const&,std::shared_ptr<SipDialog>)::LazuliGroupParticipantWrapper::~LazuliGroupParticipantWrapper(void **a1)
{
  LazuliGroupParticipant::~LazuliGroupParticipant(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t MediaSessionSRVCCHandover::MediaSessionSRVCCHandover(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5, dispatch_object_t *a6)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  void *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  _QWORD *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v54;
  unint64_t *p_shared_weak_owners;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void *__p;
  std::__shared_weak_count *v68;
  char v69;
  void *v70;
  std::__shared_weak_count *v71;
  char v72;
  void *v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;

  v9 = (std::__shared_weak_count *)a2[1];
  v75 = *a2;
  v76 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *(void **)a4;
  v13 = *(std::__shared_weak_count **)(a4 + 8);
  v73 = *(void **)a4;
  v74 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E78C63A8;
  MediaSessionCollection::MediaSessionCollection((MediaSessionCollection *)(a1 + 24));
  *(_QWORD *)a1 = &off_1E78BC650;
  *(_QWORD *)(a1 + 24) = &unk_1E78BC6C0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  v16 = operator new(0xB8uLL);
  v17 = v16;
  v16[1] = 0;
  v16[2] = 0;
  *v16 = &off_1E78DFA20;
  v18 = (uint64_t)(v16 + 3);
  v70 = v12;
  v71 = v13;
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  MediaSessionQueue::MediaSessionQueue((uint64_t)(v16 + 3), 0, (uint64_t *)&v70, (__int128 *)a5, a6);
  if (v13)
  {
    v21 = (unint64_t *)&v13->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_QWORD *)(a1 + 56) = v18;
  *(_QWORD *)(a1 + 64) = v17;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>(a1 + 56, v17 + 4, v18);
  v23 = v76;
  *(_QWORD *)(a1 + 72) = v75;
  *(_QWORD *)(a1 + 80) = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  v26 = v74;
  *(_QWORD *)(a1 + 120) = v73;
  *(_QWORD *)(a1 + 128) = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    do
      v29 = __ldaxr(v27);
    while (__stlxr(v29 - 1, v27));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v30 = v76;
  if (v76)
  {
    v31 = (unint64_t *)&v76->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  *(_QWORD *)a1 = &off_1E78DF5E0;
  *(_QWORD *)(a1 + 24) = &unk_1E78DF668;
  *(_QWORD *)(a1 + 136) = *a3;
  v33 = a3 + 1;
  v34 = a3[1];
  *(_QWORD *)(a1 + 144) = v34;
  v35 = a1 + 144;
  v36 = a3[2];
  *(_QWORD *)(a1 + 152) = v36;
  if (v36)
  {
    *(_QWORD *)(v34 + 16) = v35;
    *a3 = v33;
    *v33 = 0;
    a3[2] = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 136) = v35;
  }
  if (*(char *)(a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 160), *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  }
  else
  {
    v37 = *(_OWORD *)a5;
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a5 + 16);
    *(_OWORD *)(a1 + 160) = v37;
  }
  std::string::basic_string[abi:ne180100]<0>(&v70, "rtp.srvcc");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v38 = ImsLogger::debug(ims::_logger, (uint64_t)&v70, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"MediaSessionSRVCCHandover", 25);
  *(_BYTE *)(v38 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v38 + 17) = 0;
  if (v69 < 0)
    operator delete(__p);
  if (v72 < 0)
    operator delete(v70);
  v39 = *(void **)a4;
  v40 = *(std::__shared_weak_count **)(a4 + 8);
  v41 = (std::__shared_weak_count *)operator new(0xB8uLL);
  v42 = v41;
  v41->__shared_owners_ = 0;
  v43 = (unint64_t *)&v41->__shared_owners_;
  v41->__shared_weak_owners_ = 0;
  v41->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DFA70;
  v44 = &v41[1].__vftable;
  __p = v39;
  v68 = v40;
  if (v40)
  {
    v45 = (unint64_t *)&v40->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
    do
      v47 = __ldxr(v45);
    while (__stxr(v47 + 1, v45));
  }
  v70 = v39;
  v71 = v40;
  MediaSessionQueue::MediaSessionQueue((uint64_t)&v41[1], 0, (uint64_t *)&v70, (__int128 *)a5, a6);
  if (v40)
  {
    v48 = (unint64_t *)&v40->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v42[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DF800;
  v42[2].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78DF900;
  v50 = v68;
  if (v68)
  {
    v51 = (unint64_t *)&v68->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  shared_weak_owners = (std::__shared_weak_count *)v42[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_66;
    do
      v54 = __ldxr(v43);
    while (__stxr(v54 + 1, v43));
    p_shared_weak_owners = (unint64_t *)&v42->__shared_weak_owners_;
    do
      v56 = __ldxr(p_shared_weak_owners);
    while (__stxr(v56 + 1, p_shared_weak_owners));
    v42[1].__shared_owners_ = (uint64_t)v44;
    v42[1].__shared_weak_owners_ = (uint64_t)v42;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v57 = __ldxr(v43);
    while (__stxr(v57 + 1, v43));
    v58 = (unint64_t *)&v42->__shared_weak_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
    v42[1].__shared_owners_ = (uint64_t)v44;
    v42[1].__shared_weak_owners_ = (uint64_t)v42;
  }
  do
    v60 = __ldaxr(v43);
  while (__stlxr(v60 - 1, v43));
  if (!v60)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
LABEL_66:
  v61 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v44;
  *(_QWORD *)(a1 + 64) = v42;
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  return a1;
}

void sub_1BF103A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25)
{
  MediaSessionQueuedCollectionIterator *v25;
  uint64_t v26;

  std::__tree<unsigned int>::destroy(v26, *((_QWORD **)v25 + 18));
  MediaSessionQueuedCollectionIterator::~MediaSessionQueuedCollectionIterator(v25);
  _Unwind_Resume(a1);
}

void MediaSessionSRVCCHandover::~MediaSessionSRVCCHandover(MediaSessionSRVCCHandover *this)
{
  uint64_t v2;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;

  *(_QWORD *)this = &off_1E78DF5E0;
  *((_QWORD *)this + 3) = &unk_1E78DF668;
  std::string::basic_string[abi:ne180100]<0>(v5, "rtp.srvcc");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"~MediaSessionSRVCCHandover", 26);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  if (*((char *)this + 183) < 0)
    operator delete(*((void **)this + 20));
  std::__tree<unsigned int>::destroy((uint64_t)this + 136, *((_QWORD **)this + 18));
  MediaSessionQueuedCollectionIterator::~MediaSessionQueuedCollectionIterator(this);
}

{
  MediaSessionSRVCCHandover::~MediaSessionSRVCCHandover(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'MediaSessionSRVCCHandover::~MediaSessionSRVCCHandover(MediaSessionSRVCCHandover *this)
{
  MediaSessionSRVCCHandover::~MediaSessionSRVCCHandover((MediaSessionSRVCCHandover *)((char *)this - 24));
}

{
  MediaSessionSRVCCHandover::~MediaSessionSRVCCHandover((MediaSessionSRVCCHandover *)((char *)this - 24));
  JUMPOUT(0x1C3B87100);
}

void MediaSessionSRVCCHandover::srvccHandoverStarted(MediaSessionSRVCCHandover *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  char *v13;
  BOOL v14;
  void *v15[2];
  char v16;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  void *v21;
  std::__shared_weak_count *v22;
  char v23;

  std::string::basic_string[abi:ne180100]<0>(&v21, "rtp.srvcc");
  std::string::basic_string[abi:ne180100]<0>(v19, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v21, (uint64_t)v19);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"srvccHandoverStarted", 20);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [activeSessionId=", 18);
  *(_BYTE *)(v3 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(v15, ", ");
  v6 = (char *)this + 144;
  ims::join<std::__tree_const_iterator<unsigned long long,std::__tree_node<unsigned long long,void *> *,long>>(__p, *((_QWORD **)this + 17), (_QWORD *)this + 18, (uint64_t)v15);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 32))(v3, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" collection=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v18 < 0)
    operator delete(__p[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  if (v23 < 0)
    operator delete(v21);
  v7 = (char *)*((_QWORD *)this + 17);
  if (v7 != v6)
  {
    do
    {
      v8 = *((_QWORD *)v7 + 4);
      v21 = 0;
      v22 = 0;
      (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 9) + 24))(&v21, *((_QWORD *)this + 9), v8);
      (*(void (**)(void *, _QWORD))(*(_QWORD *)v21 + 40))(v21, 0);
      v9 = v22;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = (char *)*((_QWORD *)v7 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(char **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (char *)*((_QWORD *)v7 + 2);
          v14 = *(_QWORD *)v13 == (_QWORD)v7;
          v7 = v13;
        }
        while (!v14);
      }
      v7 = v13;
    }
    while (v13 != v6);
  }
}

void sub_1BF103F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v26 - 33) < 0)
    operator delete(*(void **)(v26 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionSRVCCHandover::srvccHandoverFailed(MediaSessionSRVCCHandover *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  capabilities::radio *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  char *v14;
  BOOL v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *v28[2];
  char v29;
  void *__p[2];
  char v31;
  void *v32[2];
  char v33;
  void *v34;
  std::__shared_weak_count *v35;
  char v36;

  std::string::basic_string[abi:ne180100]<0>(&v34, "rtp.srvcc");
  std::string::basic_string[abi:ne180100]<0>(v32, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v34, (uint64_t)v32);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"srvccHandoverFailed", 19);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [activeSessionId=", 18);
  *(_BYTE *)(v3 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(v28, ", ");
  v6 = (char *)this + 144;
  ims::join<std::__tree_const_iterator<unsigned long long,std::__tree_node<unsigned long long,void *> *,long>>(__p, *((_QWORD **)this + 17), (_QWORD *)this + 18, (uint64_t)v28);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 32))(v3, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" collection=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v31 < 0)
    operator delete(__p[0]);
  if (v29 < 0)
    operator delete(v28[0]);
  if (v33 < 0)
    operator delete(v32[0]);
  if (v36 < 0)
    operator delete(v34);
  v7 = (char *)*((_QWORD *)this + 17);
  if (v7 != v6)
  {
    do
    {
      v8 = *((_QWORD *)v7 + 4);
      v34 = 0;
      v35 = 0;
      v9 = (capabilities::radio *)(*(_QWORD *(**)(void **__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 9)
                                                                                                  + 24))(&v34, *((_QWORD *)this + 9), v8);
      if (v34)
      {
        if (capabilities::radio::mav20Plus(v9))
          (*(void (**)(void *, _QWORD))(*(_QWORD *)v34 + 64))(v34, 0);
        if (v34)
          (*(void (**)(void *, _QWORD))(*(_QWORD *)v34 + 32))(v34, 0);
      }
      v10 = v35;
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = (char *)*((_QWORD *)v7 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (char *)*((_QWORD *)v7 + 2);
          v15 = *(_QWORD *)v14 == (_QWORD)v7;
          v7 = v14;
        }
        while (!v15);
      }
      v7 = v14;
    }
    while (v14 != v6);
  }
  v16 = *((_QWORD *)this + 15);
  RTPSharedPointerBase::getShared<MediaSessionCollectionIterator>((uint64_t)this, &v24);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v16 + 152))(&v26, v16, &v24);
  v17 = v27;
  if (v27)
  {
    v18 = (unint64_t *)&v27->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v25;
  if (v25)
  {
    v21 = (unint64_t *)&v25->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 192))(*((_QWORD *)this + 7));
}

void sub_1BF1042D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *MediaSessionSRVCCHandover::srvccHandoverCompleted(MediaSessionSRVCCHandover *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *result;
  void **v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  void *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  void *__p[2];
  char v31;
  void *v32;
  void **v33;
  uint64_t v34;

  std::string::basic_string[abi:ne180100]<0>(&v32, "rtp.srvcc");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v32, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"srvccHandoverCompleted", 22);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [stackId=", 10);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v3 + 32))(v3, (char *)this + 160);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v31 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v34) < 0)
    operator delete(v32);
  v6 = *((_QWORD *)this + 15);
  if (v6)
  {
    RTPSharedPointerBase::getShared<MediaSessionCollectionIterator>((uint64_t)this, &v26);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v6 + 152))(&v28, v6, &v26);
    v7 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = v27;
    if (v27)
    {
      v11 = (unint64_t *)&v27->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  result = (_QWORD *)*((_QWORD *)this + 9);
  if (result)
  {
    v32 = 0;
    v33 = 0;
    v34 = 0;
    (*(void (**)(void **__return_ptr, _QWORD *, char *))(*result + 80))(&v32, result, (char *)this + 160);
    __p[0] = 0;
    __p[1] = 0;
    v14 = v33;
    if (v33 != &v32)
    {
      do
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, void *))(**((_QWORD **)this + 9) + 24))(&v25, *((_QWORD *)this + 9), v14[2]);
        v15 = v25;
        v25 = 0uLL;
        v16 = (std::__shared_weak_count *)__p[1];
        *(_OWORD *)__p = v15;
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v19 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
        if (*((_QWORD *)&v25 + 1))
        {
          v20 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        if (__p[0])
          (*(void (**)(void *, _QWORD))(*(_QWORD *)__p[0] + 24))(__p[0], 0);
        v14 = (void **)v14[1];
      }
      while (v14 != &v32);
      v22 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v23 = (unint64_t *)((char *)__p[1] + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
    return std::__list_imp<unsigned long long>::clear(&v32);
  }
  return result;
}

void sub_1BF10468C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void MediaSessionSRVCCHandover::remove(std::__shared_weak_count **this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  NSObject *shared_owners;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v18[5];
  std::__shared_weak_count *v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;

  std::string::basic_string[abi:ne180100]<0>(v22, "rtp.srvcc");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v22, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v7 = v6;
  v8 = *(_QWORD **)(v6 + 8);
  v9 = strlen((const char *)(*(_QWORD *)((*this)[-1].__shared_weak_owners_ + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)((*this)[-1].__shared_weak_owners_ + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"remove", 6);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" collection=", 12);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v21 < 0)
    operator delete(__p[0]);
  if (v23 < 0)
    operator delete(v22[0]);
  *a3 = 0;
  a3[1] = 0;
  MediaSessionQueuedCollectionIterator::remove((MediaSessionQueuedCollectionIterator *)this, a2);
  if (!((uint64_t (*)(std::__shared_weak_count *))this[9]->__vftable[1].__on_zero_shared)(this[9]))
  {
    v11 = this[15];
    v10 = this[16];
    v12 = v11;
    if (v10)
    {
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      v12 = this[15];
    }
    shared_owners = v12[14].__shared_owners_;
    if (shared_owners)
      dispatch_retain((dispatch_object_t)v12[14].__shared_owners_);
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 1174405120;
    v18[2] = ___ZN25MediaSessionSRVCCHandover6removeEy_block_invoke;
    v18[3] = &__block_descriptor_tmp_41;
    v18[4] = v11;
    v19 = v10;
    if (v10)
    {
      v16 = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    dispatch_async(shared_owners, v18);
    if (shared_owners)
      dispatch_release(shared_owners);
    if (v19)
      std::__shared_weak_count::__release_weak(v19);
    if (v10)
      std::__shared_weak_count::__release_weak(v10);
  }
}

void sub_1BF104958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v26);
  _Unwind_Resume(a1);
}

void ___ZN25MediaSessionSRVCCHandover6removeEy_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  RTPManager *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(RTPManager **)(a1 + 32);
      if (v5)
        RTPManager::srvccHandoverCompleted(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF104A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10RTPManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10RTPManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void `non-virtual thunk to'MediaSessionSRVCCHandover::remove(std::__shared_weak_count **this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  MediaSessionSRVCCHandover::remove(this - 3, a2, a3);
}

uint64_t MediaSessionSRVCCHandover::MediaSessionSRVCCQueue::terminate(MediaSessionSRVCCHandover::MediaSessionSRVCCQueue *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  size_t v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v18 = 0;
  v19 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v19 = v3;
    if (v3)
    {
      v4 = *((_QWORD *)this + 17);
      v18 = v4;
      if (v4)
      {
        std::string::basic_string[abi:ne180100]<0>(v16, "rtp.srvcc");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v5 = ImsLogger::debug(ims::_logger, (uint64_t)v16, (uint64_t)__p);
        v6 = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        v7 = strlen(v6);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)v6, v7);
        *(_BYTE *)(v5 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
        *(_BYTE *)(v5 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"terminate", 9);
        *(_BYTE *)(v5 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [sessionId=", 12);
        *(_BYTE *)(v5 + 17) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
        std::ostream::operator<<();
        *(_BYTE *)(v5 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
        *(_BYTE *)(v5 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v5 + 17) = 0;
        if (v15 < 0)
          operator delete(__p[0]);
        if (v17 < 0)
          operator delete(v16[0]);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 24))(v4, 0);
LABEL_15:
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
        return 1;
      }
    }
  }
  else
  {
    v3 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "rtp.srvcc");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)v16, (uint64_t)__p);
  v9 = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
  v10 = strlen(v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)v9, v10);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"terminate", 9);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" [sessionId=0]", 14);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  if (v3)
    goto LABEL_15;
  return 1;
}

void sub_1BF104D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'MediaSessionSRVCCHandover::MediaSessionSRVCCQueue::terminate(MediaSessionSRVCCHandover::MediaSessionSRVCCQueue *this)
{
  MediaSessionSRVCCHandover::MediaSessionSRVCCQueue::terminate((MediaSessionSRVCCHandover::MediaSessionSRVCCQueue *)((char *)this - 24));
  return 1;
}

_QWORD *MediaSessionQMISRVCCHandover::MediaSessionQMISRVCCHandover(_QWORD *a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, uint64_t a5, dispatch_object_t *a6)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  void *__p[2];
  char v24;
  void *v25[2];
  char v26;
  _QWORD v27[2];
  _QWORD **v28;
  _QWORD *v29;
  uint64_t v31;
  std::__shared_weak_count *v32;

  v7 = a2[1];
  v31 = *a2;
  v32 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a3 + 1;
  v11 = (_QWORD *)a3[1];
  v28 = (_QWORD **)*a3;
  v29 = v11;
  if (a3[2])
  {
    v11[2] = &v29;
    *a3 = v10;
    *v10 = 0;
    a3[2] = 0;
  }
  else
  {
    v28 = &v29;
  }
  v12 = (std::__shared_weak_count *)a4[1];
  v27[0] = *a4;
  v27[1] = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  MediaSessionSRVCCHandover::MediaSessionSRVCCHandover((uint64_t)a1, &v31, &v28, (uint64_t)v27, a5, a6);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  std::__tree<unsigned int>::destroy((uint64_t)&v28, v29);
  v17 = v32;
  if (v32)
  {
    v18 = (unint64_t *)&v32->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  *a1 = &off_1E78DF708;
  a1[3] = &unk_1E78DF790;
  std::string::basic_string[abi:ne180100]<0>(v25, "rtp.srvcc");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v20 = ImsLogger::debug(ims::_logger, (uint64_t)v25, (uint64_t)__p);
  v21 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v21);
  *(_BYTE *)(v20 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)" created", 8);
  *(_BYTE *)(v20 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v20 + 17) = 0;
  if (v24 < 0)
    operator delete(__p[0]);
  if (v26 < 0)
    operator delete(v25[0]);
  return a1;
}

void sub_1BF104FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25)
{
  MediaSessionSRVCCHandover *v25;

  if (a21 < 0)
    operator delete(__p);
  MediaSessionSRVCCHandover::~MediaSessionSRVCCHandover(v25);
  _Unwind_Resume(a1);
}

void MediaSessionQMISRVCCHandover::~MediaSessionQMISRVCCHandover(MediaSessionQMISRVCCHandover *this)
{
  uint64_t v2;
  size_t v3;
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  *(_QWORD *)this = &off_1E78DF708;
  *((_QWORD *)this + 3) = &unk_1E78DF790;
  std::string::basic_string[abi:ne180100]<0>(v6, "rtp.srvcc");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v6, (uint64_t)__p);
  v3 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v3);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" destroyed", 10);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  MediaSessionSRVCCHandover::~MediaSessionSRVCCHandover(this);
}

{
  MediaSessionQMISRVCCHandover::~MediaSessionQMISRVCCHandover(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'MediaSessionQMISRVCCHandover::~MediaSessionQMISRVCCHandover(MediaSessionQMISRVCCHandover *this)
{
  MediaSessionQMISRVCCHandover::~MediaSessionQMISRVCCHandover((MediaSessionQMISRVCCHandover *)((char *)this - 24));
}

{
  MediaSessionQMISRVCCHandover::~MediaSessionQMISRVCCHandover((MediaSessionQMISRVCCHandover *)((char *)this - 24));
  JUMPOUT(0x1C3B87100);
}

_QWORD *MediaSessionQMISRVCCHandover::srvccHandoverStarted(MediaSessionQMISRVCCHandover *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  void **v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v18;
  void *__p[2];
  char v20;
  void *v21;
  void **v22;
  uint64_t v23;

  std::string::basic_string[abi:ne180100]<0>(&v21, "rtp.srvcc");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v21, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"srvccHandoverStarted", 20);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [stackId=", 10);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v3 + 32))(v3, (char *)this + 160);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" collection=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v20 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23) < 0)
    operator delete(v21);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  (*(void (**)(void **__return_ptr, _QWORD, char *))(**((_QWORD **)this + 9) + 80))(&v21, *((_QWORD *)this + 9), (char *)this + 160);
  __p[0] = 0;
  __p[1] = 0;
  v6 = v22;
  if (v22 != &v21)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr, _QWORD, void *))(**((_QWORD **)this + 9) + 24))(&v18, *((_QWORD *)this + 9), v6[2]);
      v7 = v18;
      v18 = 0uLL;
      v8 = (std::__shared_weak_count *)__p[1];
      *(_OWORD *)__p = v7;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
      if (*((_QWORD *)&v18 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      (*(void (**)(void *, _QWORD))(*(_QWORD *)__p[0] + 40))(__p[0], 0);
      v6 = (void **)v6[1];
    }
    while (v6 != &v21);
    v14 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v15 = (unint64_t *)((char *)__p[1] + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  return std::__list_imp<unsigned long long>::clear(&v21);
}

void sub_1BF10547C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *MediaSessionQMISRVCCHandover::srvccHandoverFailed(MediaSessionQMISRVCCHandover *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  char *v6;
  uint64_t i;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v25[2];
  char v26;
  void *__p[2];
  char v28;
  void *v29[2];
  char v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;

  std::string::basic_string[abi:ne180100]<0>(&v31, "rtp.srvcc");
  std::string::basic_string[abi:ne180100]<0>(v29, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v31, (uint64_t)v29);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"srvccHandoverFailed", 19);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(v25, ", ");
  v6 = (char *)this + 144;
  ims::join<std::__tree_const_iterator<unsigned long long,std::__tree_node<unsigned long long,void *> *,long>>(__p, *((_QWORD **)this + 17), (_QWORD *)this + 18, (uint64_t)v25);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 32))(v3, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" stackId=", 9);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v3 + 32))(v3, (char *)this + 160);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" collection=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v28 < 0)
    operator delete(__p[0]);
  if (v26 < 0)
    operator delete(v25[0]);
  if (v30 < 0)
    operator delete(v29[0]);
  if (SHIBYTE(v33) < 0)
    operator delete(v31);
  v31 = 0;
  v32 = 0;
  v33 = 0;
  (*(void (**)(void **__return_ptr, _QWORD, char *))(**((_QWORD **)this + 9) + 80))(&v31, *((_QWORD *)this + 9), (char *)this + 160);
  v29[0] = 0;
  v29[1] = 0;
  for (i = v32; (void **)i != &v31; i = *(_QWORD *)(i + 8))
  {
    v8 = *(_QWORD *)(i + 16);
    v9 = *(_QWORD **)v6;
    if (!*(_QWORD *)v6)
      goto LABEL_23;
    v10 = (char *)this + 144;
    do
    {
      v11 = v9[4];
      v12 = v11 >= v8;
      if (v11 >= v8)
        v13 = v9;
      else
        v13 = v9 + 1;
      if (v12)
        v10 = (char *)v9;
      v9 = (_QWORD *)*v13;
    }
    while (*v13);
    if (v10 == v6 || v8 < *((_QWORD *)v10 + 4))
    {
LABEL_23:
      (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 9) + 24))(__p);
      v14 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v15 = (std::__shared_weak_count *)v29[1];
      *(_OWORD *)v29 = v14;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v19 = (unint64_t *)((char *)__p[1] + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      (*(void (**)(void *, _QWORD))(*(_QWORD *)v29[0] + 32))(v29[0], 0);
    }
  }
  MediaSessionSRVCCHandover::srvccHandoverFailed(this);
  v21 = (std::__shared_weak_count *)v29[1];
  if (v29[1])
  {
    v22 = (unint64_t *)((char *)v29[1] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return std::__list_imp<unsigned long long>::clear(&v31);
}

void sub_1BF105840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::__list_imp<unsigned long long>::clear((_QWORD *)(v28 - 72));
  _Unwind_Resume(a1);
}

void MediaSessionSRVCCHandover::MediaSessionSRVCCQueue::~MediaSessionSRVCCQueue(MediaSessionSRVCCHandover::MediaSessionSRVCCQueue *this)
{
  MediaSessionSRVCCHandover::MediaSessionSRVCCQueue::~MediaSessionSRVCCQueue(this);
  JUMPOUT(0x1C3B87100);
}

{
  uint64_t v2;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;

  *(_QWORD *)this = &off_1E78DF800;
  *((_QWORD *)this + 3) = &unk_1E78DF900;
  std::string::basic_string[abi:ne180100]<0>(v5, "rtp.srvcc.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"~MediaSessionSRVCCQueue", 23);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  MediaSessionQueue::~MediaSessionQueue(this);
}

void `non-virtual thunk to'MediaSessionSRVCCHandover::MediaSessionSRVCCQueue::~MediaSessionSRVCCQueue(MediaSessionSRVCCHandover::MediaSessionSRVCCQueue *this)
{
  MediaSessionSRVCCHandover::MediaSessionSRVCCQueue::~MediaSessionSRVCCQueue((MediaSessionSRVCCHandover::MediaSessionSRVCCQueue *)((char *)this - 24));
}

{
  MediaSessionSRVCCHandover::MediaSessionSRVCCQueue::~MediaSessionSRVCCQueue((MediaSessionSRVCCHandover::MediaSessionSRVCCQueue *)((char *)this - 24));
  JUMPOUT(0x1C3B87100);
}

void MediaSessionCollection::MediaSessionCollection(MediaSessionCollection *this)
{
  uint64_t v1;
  void *__p[2];
  char v3;
  void *v4[2];
  char v5;

  *(_QWORD *)this = off_1E78BB0E8;
  std::string::basic_string[abi:ne180100]<0>(v4, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v1 = ImsLogger::debug(ims::_logger, (uint64_t)v4, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v1 + 8), (uint64_t)"MediaSessionCollection", 22);
  *(_BYTE *)(v1 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v1 + 64))(v1, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v1 + 17) = 0;
  if (v3 < 0)
    operator delete(__p[0]);
  if (v5 < 0)
    operator delete(v4[0]);
}

void sub_1BF1059F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<MediaSessionQueue>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DFA20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MediaSessionQueue>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DFA20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<MediaSessionQueue>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t MediaSessionQueue::MediaSessionQueue(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, dispatch_object_t *a5)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E78C63A8;
  v7 = (std::__shared_weak_count *)a3[1];
  v19 = *a3;
  v20 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  MediaSessionInterface::MediaSessionInterface(a1 + 24, a2, &v19, a4, a5);
  v10 = v20;
  if (v20)
  {
    v11 = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_QWORD *)a1 = &off_1E78DEC60;
  *(_QWORD *)(a1 + 24) = &unk_1E78DED60;
  *(_QWORD *)(a1 + 112) = a1 + 112;
  *(_QWORD *)(a1 + 120) = a1 + 112;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 152) = 4;
  std::string::basic_string[abi:ne180100]<0>(v17, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v13 = ImsLogger::info(ims::_logger, (uint64_t)v17, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"MediaSessionQueue", 17);
  *(_BYTE *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v13 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" stackId=", 9);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v13 + 32))(v13, a4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  if (v16 < 0)
    operator delete(__p[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  return a1;
}

void sub_1BF105C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;
  void **v22;
  uint64_t *v23;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;

  if (a20 < 0)
    operator delete(__p);
  v25 = *(std::__shared_weak_count **)(v21 + 144);
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
  std::__list_imp<std::pair<MediaSessionQueue::Action,std::weak_ptr<MediaSessionInterface>>>::clear(v23);
  MediaSessionInterface::~MediaSessionInterface(v22);
  v26 = *(std::__shared_weak_count **)(v21 + 16);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MediaSessionSRVCCHandover::MediaSessionSRVCCQueue>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DFA70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MediaSessionSRVCCHandover::MediaSessionSRVCCQueue>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DFA70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<MediaSessionSRVCCHandover::MediaSessionSRVCCQueue>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ims::join<std::__tree_const_iterator<unsigned long long,std::__tree_node<unsigned long long,void *> *,long>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t result;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = 0;
  v13 = 0u;
  v14 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v13, 1);
  if (a2 != a3)
  {
    v8 = 1;
    do
    {
      if ((v8 & 1) == 0)
        (*(void (**)(__int128 *, uint64_t))(v13 + 32))(&v13, a4);
      std::ostream::operator<<();
      BYTE1(v14) = 0;
      v9 = (_QWORD *)a2[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)a2[2];
          v11 = *v10 == (_QWORD)a2;
          a2 = v10;
        }
        while (!v11);
      }
      v8 = 0;
      a2 = v10;
    }
    while (v10 != a3);
  }
  result = std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v14 + 1) + 8, a1);
  *(_QWORD *)&v13 = &off_1E78D7A10;
  if ((_BYTE)v14)
  {
    result = *((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v13 + 1) + 8))(*((_QWORD *)&v13 + 1));
  }
  return result;
}

void sub_1BF105F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11)
  {
    if (a10)
      (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipStack::SipStack(uint64_t a1, uint64_t a2, uint64_t a3, char a4, const std::string *a5)
{
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.stack");
  ImsLogContainer::ImsLogContainer(a1, &__p, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 104) = &unk_1E78DFB40;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)a1 = &off_1E78DFAC0;
  *(_QWORD *)(a1 + 112) = &unk_1E78DFB70;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  SipStackConfig::SipStackConfig((SipStackConfig *)(a1 + 208));
  *(_QWORD *)(a1 + 2696) = 0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 2704));
  std::operator+<char>();
  ImsPowerAssertion::ImsPowerAssertion(a1 + 2856, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  BambiAccessBarring::BambiAccessBarring((BambiAccessBarring *)(a1 + 2904));
  *(_QWORD *)(a1 + 3192) = 0;
  *(_BYTE *)(a1 + 3200) = 0;
  *(_QWORD *)(a1 + 3264) = 0;
  *(_BYTE *)(a1 + 3272) = 0;
  *(_BYTE *)(a1 + 3256) = 0;
  *(_OWORD *)(a1 + 3208) = 0u;
  *(_OWORD *)(a1 + 3224) = 0u;
  *(_OWORD *)(a1 + 3240) = 0u;
  *(_QWORD *)(a1 + 3336) = 0;
  *(_BYTE *)(a1 + 3344) = 0;
  *(_OWORD *)(a1 + 3280) = 0u;
  *(_OWORD *)(a1 + 3296) = 0u;
  *(_OWORD *)(a1 + 3312) = 0u;
  *(_BYTE *)(a1 + 3328) = 0;
  *(_QWORD *)(a1 + 3352) = 0;
  *(_QWORD *)(a1 + 3368) = 0;
  *(_QWORD *)(a1 + 3360) = 0;
  *(_BYTE *)(a1 + 3184) = 0;
  *(_OWORD *)(a1 + 3168) = 0u;
  *(_OWORD *)(a1 + 3152) = 0u;
  *(_OWORD *)(a1 + 3136) = 0u;
  *(_OWORD *)(a1 + 3120) = 0u;
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)(a1 + 3376));
  *(_OWORD *)(a1 + 4048) = 0u;
  *(_OWORD *)(a1 + 4032) = 0u;
  *(_OWORD *)(a1 + 4016) = 0u;
  *(_OWORD *)(a1 + 4000) = 0u;
  *(_OWORD *)(a1 + 3984) = 0u;
  *(_OWORD *)(a1 + 3968) = 0u;
  *(_WORD *)(a1 + 4064) = 257;
  *(_DWORD *)(a1 + 4076) = 0;
  *(_WORD *)(a1 + 4080) = 256;
  *(_BYTE *)(a1 + 4082) = 1;
  *(_QWORD *)(a1 + 4200) = 0;
  *(_OWORD *)(a1 + 4088) = 0u;
  *(_OWORD *)(a1 + 4104) = 0u;
  *(_OWORD *)(a1 + 4120) = 0u;
  *(_OWORD *)(a1 + 4136) = 0u;
  *(_OWORD *)(a1 + 4152) = 0u;
  *(_OWORD *)(a1 + 4168) = 0u;
  *(_OWORD *)(a1 + 4184) = 0u;
  *(_BYTE *)(a1 + 4208) = 1;
  *(_QWORD *)(a1 + 4268) = 0;
  *(_OWORD *)(a1 + 4216) = 0u;
  *(_OWORD *)(a1 + 4232) = 0u;
  *(_OWORD *)(a1 + 4248) = 0u;
  *(_DWORD *)(a1 + 4263) = 0;
  *(_OWORD *)(a1 + 4280) = 0u;
  *(_OWORD *)(a1 + 4296) = 0u;
  *(_WORD *)(a1 + 4312) = 1;
  *(_BYTE *)(a1 + 4314) = 0;
  *(_BYTE *)(a1 + 4320) = 0;
  *(_QWORD *)(a1 + 4328) = 0;
  *(_DWORD *)(a1 + 4336) = 0;
  *(_QWORD *)(a1 + 136) = a3;
  *(_QWORD *)(a1 + 2848) = 0;
  *(_BYTE *)(a1 + 176) = a4;
  *(_BYTE *)(a1 + 177) = -1;
  std::string::operator=((std::string *)(a1 + 4136), a5);
  *(_QWORD *)(a1 + 2808) = a1 + 104;
  std::string::operator=((std::string *)(a1 + 2752), (const std::string *)(a1 + 8));
  std::string::operator=((std::string *)(a1 + 2776), a5);
  *(_QWORD *)(a1 + 2888) = a2;
  *(_DWORD *)(a1 + 3592) = 0;
  *(_DWORD *)(a1 + 3672) = 1;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 3120, (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v11 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  return a1;
}

void sub_1BF106260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, ims::StackConfig *a11, BambiAccessBarring *a12, void **a13, SipTimerContainer *a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  void **v28;
  std::__shared_weak_count *v30;

  ims::PrefsContainer::release((ims::PrefsContainer *)(v27 + 3360));
  ims::AccessNetworks::~AccessNetworks(v28);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a20);
  BambiAccessBarring::~BambiAccessBarring(a12);
  ImsPowerAssertion::~ImsPowerAssertion(a13);
  SipTimerContainer::~SipTimerContainer(a14);
  SipStackConfig::~SipStackConfig(a15);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a17);
  v30 = *(std::__shared_weak_count **)(v27 + 128);
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
  ImsLogContainer::~ImsLogContainer((void **)v27);
  _Unwind_Resume(a1);
}

void SipStack::construct(SipStack *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  __int128 v76;

  v2 = operator new();
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v74, (_QWORD *)this + 15);
  SipUserAgent::SipUserAgent(v2, &v74);
  *((_QWORD *)this + 18) = v2;
  v3 = v75;
  if (v75)
  {
    p_shared_owners = (unint64_t *)&v75->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = operator new();
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v72, (_QWORD *)this + 15);
  SipTransactionLayer::SipTransactionLayer(v6, &v72);
  *((_QWORD *)this + 19) = v6;
  v7 = v73;
  if (v73)
  {
    v8 = (unint64_t *)&v73->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v70, (_QWORD *)this + 15);
  v10 = (std::__shared_weak_count *)operator new(0x800uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DFC68;
  v12 = v10 + 1;
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  v76 = v70;
  v70 = 0uLL;
  SipTransportLayer::SipTransportLayer((uint64_t)&v10[1], (std::string::size_type *)&v76);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_QWORD *)&v71 = v10 + 1;
  *((_QWORD *)&v71 + 1) = v10;
  v16 = (std::__shared_weak_count *)v10[8].__vftable;
  if (v16)
  {
    if (v16->__shared_owners_ != -1)
      goto LABEL_29;
    do
      v17 = __ldxr(v11);
    while (__stxr(v17 + 1, v11));
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
    v10[7].__shared_weak_owners_ = (uint64_t)v12;
    v10[8].__vftable = (std::__shared_weak_count_vtbl *)v10;
    std::__shared_weak_count::__release_weak(v16);
  }
  else
  {
    do
      v20 = __ldxr(v11);
    while (__stxr(v20 + 1, v11));
    v21 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v10[7].__shared_weak_owners_ = (uint64_t)v12;
    v10[8].__vftable = (std::__shared_weak_count_vtbl *)v10;
  }
  do
    v23 = __ldaxr(v11);
  while (__stlxr(v23 - 1, v11));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_29:
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 160, &v71);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
  if (*((_QWORD *)&v71 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *((_DWORD *)this + 50) = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v71, (_QWORD *)this + 15);
  v30 = (std::__shared_weak_count *)operator new(0xD8uLL);
  v30->__shared_owners_ = 0;
  v31 = (unint64_t *)&v30->__shared_owners_;
  v30->__shared_weak_owners_ = 0;
  v30->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DFCB8;
  v32 = v30 + 1;
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
  v76 = v71;
  v71 = 0uLL;
  BambiDeregisterHandler::BambiDeregisterHandler(&v30[1].__vftable, (uint64_t *)&v76);
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  shared_weak_owners = (std::__shared_weak_count *)v30[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_57;
    do
      v37 = __ldxr(v31);
    while (__stxr(v37 + 1, v31));
    v38 = (unint64_t *)&v30->__shared_weak_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
    v30[1].__shared_owners_ = (uint64_t)v32;
    v30[1].__shared_weak_owners_ = (uint64_t)v30;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v40 = __ldxr(v31);
    while (__stxr(v40 + 1, v31));
    v41 = (unint64_t *)&v30->__shared_weak_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
    v30[1].__shared_owners_ = (uint64_t)v32;
    v30[1].__shared_weak_owners_ = (uint64_t)v30;
  }
  do
    v43 = __ldaxr(v31);
  while (__stlxr(v43 - 1, v31));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
LABEL_57:
  *((_QWORD *)this + 529) = v32;
  v44 = (std::__shared_weak_count *)*((_QWORD *)this + 530);
  *((_QWORD *)this + 530) = v30;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
  if (*((_QWORD *)&v71 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v71, (_QWORD *)this + 15);
  v50 = (std::__shared_weak_count *)operator new(0x14B0uLL);
  v50->__shared_owners_ = 0;
  v51 = (unint64_t *)&v50->__shared_owners_;
  v50->__shared_weak_owners_ = 0;
  v50->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DFD08;
  v52 = v50 + 1;
  v53 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
  v76 = v71;
  v71 = 0uLL;
  BambiEmergencyCallHandler::BambiEmergencyCallHandler((uint64_t)&v50[1], &v76);
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = (std::__shared_weak_count *)v50[7].__shared_weak_owners_;
  if (v56)
  {
    if (v56->__shared_owners_ != -1)
      goto LABEL_85;
    do
      v57 = __ldxr(v51);
    while (__stxr(v57 + 1, v51));
    v58 = (unint64_t *)&v50->__shared_weak_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
    v50[7].__shared_owners_ = (uint64_t)v52;
    v50[7].__shared_weak_owners_ = (uint64_t)v50;
    std::__shared_weak_count::__release_weak(v56);
  }
  else
  {
    do
      v60 = __ldxr(v51);
    while (__stxr(v60 + 1, v51));
    v61 = (unint64_t *)&v50->__shared_weak_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
    v50[7].__shared_owners_ = (uint64_t)v52;
    v50[7].__shared_weak_owners_ = (uint64_t)v50;
  }
  do
    v63 = __ldaxr(v51);
  while (__stlxr(v63 - 1, v51));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
LABEL_85:
  *((_QWORD *)this + 527) = v52;
  v64 = (std::__shared_weak_count *)*((_QWORD *)this + 528);
  *((_QWORD *)this + 528) = v50;
  if (v64)
  {
    v65 = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
  if (*((_QWORD *)&v71 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
}

void sub_1BF106978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::__shared_weak_count *v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v5);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SipStack::create(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, const std::string *a4@<X3>, SipStack **a5@<X8>)
{
  char v6;
  uint64_t v7;
  uint64_t v8;

  v7 = a2;
  v8 = a1;
  v6 = a3;
  *a5 = 0;
  a5[1] = 0;
  std::allocate_shared[abi:ne180100]<SipStack,std::allocator<SipStack>,BambiCallHandler *&,BambiClient *&,BOOL &,std::string const&,void>(&v8, &v7, &v6, a4, a5);
  SipStack::construct(*a5);
}

void sub_1BF106A8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipStack::destroy(SipStack *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  v2 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"destroy ", 8);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v2 + 32))(v2, (char *)this + 4136);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  v3 = *((_QWORD *)this + 18);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *((_QWORD *)this + 18) = 0;
  }
  v4 = *((_QWORD *)this + 19);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *((_QWORD *)this + 19) = 0;
  }
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 20);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 390);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 527);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 529);
  v5 = (void **)*((_QWORD *)this + 337);
  if (v5)
  {
    SipStackConfig::~SipStackConfig(v5);
    MEMORY[0x1C3B87100]();
    *((_QWORD *)this + 337) = 0;
  }
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  ImsLogger::removeStackFromLogTagMap(ims::_logger, (unsigned __int8 *)this + 4136);
}

void SipStack::~SipStack(SipStack *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E78DFAC0;
  *((_QWORD *)this + 13) = &unk_1E78DFB40;
  *((_QWORD *)this + 14) = &unk_1E78DFB70;
  SipStack::destroy(this);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 4296);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 4280);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 4248);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 4232);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 4216);
  if (*((char *)this + 4207) < 0)
    operator delete(*((void **)this + 523));
  if (*((char *)this + 4183) < 0)
    operator delete(*((void **)this + 520));
  if (*((char *)this + 4159) < 0)
    operator delete(*((void **)this + 517));
  if (*((char *)this + 4135) < 0)
    operator delete(*((void **)this + 514));
  if (*((char *)this + 4111) < 0)
    operator delete(*((void **)this + 511));
  ims::StackConfig::~StackConfig((void **)this + 419);
  if (*((char *)this + 3327) < 0)
    operator delete(*((void **)this + 413));
  if (*((char *)this + 3303) < 0)
    operator delete(*((void **)this + 410));
  if (*((char *)this + 3255) < 0)
    operator delete(*((void **)this + 404));
  if (*((char *)this + 3231) < 0)
    operator delete(*((void **)this + 401));
  if (*((char *)this + 3183) < 0)
    operator delete(*((void **)this + 395));
  if (*((char *)this + 3159) < 0)
    operator delete(*((void **)this + 392));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 3120);
  BambiAccessBarring::~BambiAccessBarring((BambiAccessBarring *)((char *)this + 2904));
  ImsPowerAssertion::~ImsPowerAssertion((void **)this + 357);
  SipTimerContainer::~SipTimerContainer((SipTimerContainer *)((char *)this + 2704));
  SipStackConfig::~SipStackConfig((void **)this + 26);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 184);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 160);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  SipStack::~SipStack(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'SipStack::~SipStack(SipStack *this)
{
  SipStack::~SipStack((SipStack *)((char *)this - 104));
}

{
  SipStack::~SipStack((SipStack *)((char *)this - 112));
}

{
  SipStack::~SipStack((SipStack *)((char *)this - 104));
  JUMPOUT(0x1C3B87100);
}

{
  SipStack::~SipStack((SipStack *)((char *)this - 112));
  JUMPOUT(0x1C3B87100);
}

void SipStack::handleTimer(SipStack *this, unsigned __int8 *a2)
{
  const void **v2;
  _BYTE *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  const char *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  const void **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  std::string v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  void *__p;
  char v41;
  _QWORD v42[2];
  int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  std::__shared_weak_count *v48;

  v2 = (const void **)a2;
  v4 = (char *)this + 4264;
  v5 = a2[23];
  v6 = *((_QWORD *)a2 + 1);
  if ((v5 & 0x80u) == 0)
    v7 = a2[23];
  else
    v7 = *((_QWORD *)a2 + 1);
  if (v7 == 22)
  {
    if ((v5 & 0x80u) == 0)
      v11 = (uint64_t *)a2;
    else
      v11 = *(uint64_t **)a2;
    v12 = *v11;
    v13 = v11[1];
    v14 = *(uint64_t *)((char *)v11 + 14);
    if (v12 == 0x697463656E6E6F43 && v13 == 0x7473794879746976 && v14 == 0x7369736572657473)
    {
      SipStack::handleConnectivityHysteresisTimeout(this);
      return;
    }
  }
  else
  {
    if (v7 != 14)
      goto LABEL_33;
    if ((v5 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a2, "MediaInitTimer", v6))
        goto LABEL_33;
    }
    else if (a2[23])
    {
      v8 = "MediaInitTimer";
      v9 = a2;
      v10 = a2[23];
      while (*v9 == *(unsigned __int8 *)v8)
      {
        ++v9;
        ++v8;
        if (!--v10)
          goto LABEL_25;
      }
      goto LABEL_33;
    }
LABEL_25:
    if (*((_DWORD *)this + 50) == 1)
    {
      *((_DWORD *)this + 50) = 0;
      v4[50] = 0;
      v17 = *((_QWORD *)this + 356);
      if (v17)
      {
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v47, (_QWORD *)this + 15);
        v44 = 0u;
        v45 = 0u;
        v46 = 0u;
        v42[0] = &off_1E78B7238;
        v42[1] = &_bambiDomain;
        v43 = 1073741830;
        v18 = ImsResult::operator<<<char [21]>((uint64_t)v42, "media init timed out");
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v17 + 16))(v17, &v47, v18);
        ImsResult::~ImsResult((ImsResult *)v42);
        v19 = v48;
        if (v48)
        {
          p_shared_owners = (unint64_t *)&v48->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      ImsPowerAssertion::deinitialize((uint64_t)this + 2856);
      return;
    }
  }
LABEL_33:
  v22 = qword_1ED704450;
  if (byte_1ED70445F >= 0)
    v22 = byte_1ED70445F;
  if (v7 != v22)
    goto LABEL_46;
  if (byte_1ED70445F >= 0)
    v23 = &kAccessNetworkRefreshDelayTimer;
  else
    v23 = (uint64_t *)kAccessNetworkRefreshDelayTimer;
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*v2, v23, v6))
      goto LABEL_46;
LABEL_57:
    v28 = (_QWORD *)*((_QWORD *)this + 17);
    ims::AccessNetworks::AccessNetworks(&v31, (__int128 *)this + 196);
    BambiClient::notifyCallsOfAccessNetworkChange(v28, (uint64_t)this + 4136, (uint64_t)&v31, 0);
    if (v41 < 0)
      operator delete(__p);
    if (v39 < 0)
      operator delete(v38);
    if (v37 < 0)
      operator delete(v36);
    if (v35 < 0)
      operator delete(v34);
    if (v33 < 0)
      operator delete(v32);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    return;
  }
  if (!(_DWORD)v5)
    goto LABEL_57;
  v24 = v2;
  v25 = v5;
  while (*(unsigned __int8 *)v24 == *(unsigned __int8 *)v23)
  {
    v24 = (const void **)((char *)v24 + 1);
    v23 = (uint64_t *)((char *)v23 + 1);
    if (!--v25)
      goto LABEL_57;
  }
LABEL_46:
  v26 = qword_1ED70E628;
  if (byte_1ED70E637 >= 0)
    v26 = byte_1ED70E637;
  if (v7 != v26)
    return;
  if (byte_1ED70E637 >= 0)
    v27 = &kWaitForDeregistrationTimer;
  else
    v27 = (uint64_t *)kWaitForDeregistrationTimer;
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*v2, v27, v6))
      return;
    goto LABEL_70;
  }
  if (!(_DWORD)v5)
  {
LABEL_70:
    v29 = *v4;
    *v4 = 0;
    if (*((_DWORD *)this + 50) == 3)
    {
      if (v29)
      {
        SipStack::internalDeinitialize(this, 1);
      }
      else
      {
        v30 = (*(uint64_t (**)(SipStack *, uint64_t *))(*(_QWORD *)this + 64))(this, v27);
        (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"registration terminated, but I wasn't waiting for deregistration", 64);
        *(_BYTE *)(v30 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v30 + 17) = 0;
      }
    }
    return;
  }
  while (*(unsigned __int8 *)v2 == *(unsigned __int8 *)v27)
  {
    v2 = (const void **)((char *)v2 + 1);
    v27 = (uint64_t *)((char *)v27 + 1);
    if (!--v5)
      goto LABEL_70;
  }
}

void sub_1BF107224(_Unwind_Exception *a1)
{
  uint64_t v1;

  ImsResult::~ImsResult((ImsResult *)(v1 - 152));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

void SipStack::handleConnectivityHysteresisTimeout(SipStack *this)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = (char *)this + 4208;
  if (!*((_BYTE *)this + 4208))
  {
    *v1 = 1;
    v3 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Connectivity hysteresis timer expired, dropping registration", 60);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    v4 = *((_QWORD *)this + 18);
    v5 = *(_QWORD *)(v4 + 248);
    v6 = *(std::__shared_weak_count **)(v4 + 256);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 168))(v5, 17, 0, 1);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    SipTransportLayer::removeConnections(*((SipTransportLayer **)this + 20), 0, 1, 1);
    v1[112] = 1;
    SipStack::reportDeferralMetric(this);
  }
}

void sub_1BF107390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipStack::internalDeinitialize(SipStack *this, int a2)
{
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  const char *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const SipStackConfig *v16;
  _QWORD *v17;
  void **v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::string __p;
  uint64_t v22;
  std::__shared_weak_count *v23;

  if (*((_DWORD *)this + 50) == 3)
  {
    v3 = (char *)this + 4159;
    if (a2 && *((_BYTE *)this + 4264))
    {
      v4 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
      v5 = *(_QWORD **)(v4 + 8);
      v6 = "waiting for deregistration before deinitializing";
      v7 = 48;
    }
    else
    {
      v8 = (char *)this + 4265;
      if (!*((_BYTE *)this + 4265))
      {
        *v8 = 1;
        if (*((_BYTE *)this + 2657))
          SipStack::cleanUpLazuliMessagesAndSessions(this);
        *((_DWORD *)this + 50) = 0;
        BambiDeregisterHandler::stop(*((BambiDeregisterHandler **)this + 529));
        v3[155] = 0;
        SipTimerContainer::cancelAllTimers((SipTimerContainer *)((char *)this + 2704));
        SipUserAgent::deinitialize(*((SipUserAgent **)this + 18));
        SipTransactionLayer::deinitialize(*((SipTransactionLayer **)this + 19));
        SipTransportLayer::deinitialize(*((SipTransportLayer **)this + 20));
        *((_BYTE *)this + 177) = -1;
        std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 23);
        v3[105] = 0;
        std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 531);
        if (*((_BYTE *)this + 176))
          std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(*((_QWORD *)this + 17) + 840));
        v9 = *((_QWORD *)this + 17);
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v22, (_QWORD *)this + 15);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 240))(v9, &v22);
        v10 = v23;
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        SipStack::carrierIdentifier(this, &__p);
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v19, (_QWORD *)this + 15);
        BambiPrefsManager::unsubscribe((BambiPrefsManager *)&__p, &v19);
        v13 = v20;
        if (v20)
        {
          v14 = (unint64_t *)&v20->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v16 = (const SipStackConfig *)*((_QWORD *)this + 337);
        if (v16)
        {
          v17 = (_QWORD *)*((_QWORD *)this + 17);
          if (*v3 < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 517), *((_QWORD *)this + 518));
            v16 = (const SipStackConfig *)*((_QWORD *)this + 337);
          }
          else
          {
            __p = *(std::string *)((char *)this + 4136);
          }
          BambiClient::initializeStack(v17, (unsigned __int8 *)&__p, v16);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v18 = (void **)*((_QWORD *)this + 337);
          if (v18)
          {
            SipStackConfig::~SipStackConfig(v18);
            MEMORY[0x1C3B87100]();
          }
          *((_QWORD *)this + 337) = 0;
        }
        goto LABEL_8;
      }
      v4 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
      v5 = *(_QWORD **)(v4 + 8);
      v6 = "already in internalDeinitialize";
      v7 = 31;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
    *(_BYTE *)(v4 + 17) = 0;
    v8 = (_BYTE *)(v4 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_8:
    *v8 = 0;
  }
}

void sub_1BF107670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  _BYTE *v18;

  *v18 = 0;
  _Unwind_Resume(exception_object);
}

void SipStack::initialize(SipStack *this, const SipStackConfig *a2)
{
  char *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const void **v10;
  unsigned __int8 *v11;
  _BOOL4 v12;
  uint64_t v13;
  _QWORD *v14;
  void **v15;
  SipStackConfig *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const void **v21;
  unsigned __int8 *v22;
  _BOOL4 v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const void **v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  std::string::size_type size;
  int v46;
  uint64_t v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  NetworkInterface *v52;
  unint64_t *v53;
  unint64_t v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  BOOL v73;
  uint64_t v74;
  _QWORD *v75;
  ImsPrefs *v76;
  const ImsPrefsKeyEnum *AccessBarringTypeKey;
  std::string *p_p;
  const char *v79;
  _BOOL4 v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  unint64_t *p_shared_weak_owners;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  void *v90;
  std::__shared_weak_count *v91;
  char v92;
  std::string v93;
  __int128 v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  std::string __p;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  _BYTE v103[72];
  __int128 v104;
  _BYTE v105[24];
  _BYTE *v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v4 = (char *)this + 2856;
  ImsPowerAssertion::initialize((ImsPowerAssertion *)((char *)this + 2856), 300.0, *((_DWORD *)a2 + 502) == 2, (uint64_t)v103);
  ImsResult::~ImsResult((ImsResult *)v103);
  *((_BYTE *)this + 4266) = 0;
  v5 = *((_DWORD *)this + 50);
  if ((v5 - 1) < 2)
  {
    if (*(_DWORD *)a2 != *((_DWORD *)this + 52)
      || *((_DWORD *)a2 + 1) != *((_DWORD *)this + 53)
      || *((_DWORD *)a2 + 2) != *((_DWORD *)this + 54)
      || *((_DWORD *)a2 + 3) != *((_DWORD *)this + 55)
      || *((_DWORD *)a2 + 4) != *((_DWORD *)this + 56)
      || *((_DWORD *)a2 + 5) != *((_DWORD *)this + 57)
      || *((_DWORD *)a2 + 6) != *((_DWORD *)this + 58)
      || *((_DWORD *)a2 + 7) != *((_DWORD *)this + 59)
      || *((unsigned __int8 *)a2 + 35) != *((unsigned __int8 *)this + 243)
      || *((unsigned __int8 *)a2 + 33) != *((unsigned __int8 *)this + 241)
      || *((unsigned __int8 *)a2 + 34) != *((unsigned __int8 *)this + 242)
      || *((unsigned __int8 *)a2 + 32) != *((unsigned __int8 *)this + 240)
      || *((_DWORD *)a2 + 9) != *((_DWORD *)this + 61)
      || *((unsigned __int8 *)a2 + 40) != *((unsigned __int8 *)this + 248)
      || *((unsigned __int8 *)a2 + 41) != *((unsigned __int8 *)this + 249)
      || !SipUri::equals((const SipStackConfig *)((char *)a2 + 48), (const SipUri *)((char *)this + 256), 1)|| *((unsigned __int8 *)a2 + 456) != *((unsigned __int8 *)this + 664)|| !std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a2 + 464, (unsigned __int8 *)this + 672)|| !std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a2 + 488, (unsigned __int8 *)this + 696)|| !SipTimers::operator==((_QWORD *)a2 + 64, *((_QWORD **)this + 91), *((_QWORD *)this + 93))|| *((unsigned __int8 *)a2 + 544) != *((unsigned __int8 *)this + 752)|| *((unsigned __int8 *)a2 + 545) != *((unsigned __int8 *)this + 753)|| *((unsigned __int8 *)a2 + 546) != *((unsigned __int8 *)this + 754)|| *((unsigned __int8 *)a2 + 547) != *((unsigned __int8 *)this + 755)|| *((unsigned __int8 *)a2 + 548) != *((unsigned __int8 *)this + 756)|| !SipParameterMap::operator==((_QWORD *)a2 + 69, (uint64_t)this + 760)|| *((_DWORD *)a2 + 148) != *((_DWORD *)this + 200)|| *((_DWORD *)a2 + 149) != *((_DWORD *)this + 201)
      || *((_DWORD *)a2 + 150) != *((_DWORD *)this + 202)
      || *((_DWORD *)a2 + 151) != *((_DWORD *)this + 203)
      || *((unsigned __int8 *)a2 + 608) != *((unsigned __int8 *)this + 816)
      || *((unsigned __int8 *)a2 + 609) != *((unsigned __int8 *)this + 817)
      || *((unsigned __int8 *)a2 + 610) != *((unsigned __int8 *)this + 818)
      || *((unsigned __int8 *)a2 + 611) != *((unsigned __int8 *)this + 819)
      || *((unsigned __int8 *)a2 + 612) != *((unsigned __int8 *)this + 820)
      || *((unsigned __int8 *)a2 + 613) != *((unsigned __int8 *)this + 821)
      || *((unsigned __int8 *)a2 + 614) != *((unsigned __int8 *)this + 822)
      || *((unsigned __int8 *)a2 + 615) != *((unsigned __int8 *)this + 823)
      || *((unsigned __int8 *)a2 + 616) != *((unsigned __int8 *)this + 824)
      || *((unsigned __int8 *)a2 + 617) != *((unsigned __int8 *)this + 825)
      || *((unsigned __int8 *)a2 + 618) != *((unsigned __int8 *)this + 826)
      || *((unsigned __int8 *)a2 + 619) != *((unsigned __int8 *)this + 827)
      || *((unsigned __int8 *)a2 + 620) != *((unsigned __int8 *)this + 828)
      || *((unsigned __int8 *)a2 + 621) != *((unsigned __int8 *)this + 829)
      || *((unsigned __int8 *)a2 + 622) != *((unsigned __int8 *)this + 830)
      || *((_DWORD *)a2 + 156) != *((_DWORD *)this + 208)
      || *((unsigned __int8 *)a2 + 628) != *((unsigned __int8 *)this + 836)
      || *((_DWORD *)a2 + 158) != *((_DWORD *)this + 210)
      || !std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a2 + 640, (unsigned __int8 *)this + 848)|| !std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a2 + 664, (unsigned __int8 *)this + 872)|| *((unsigned __int8 *)a2 + 688) != *((unsigned __int8 *)this + 896)|| *((unsigned __int8 *)a2 + 689) != *((unsigned __int8 *)this + 897)|| !SipResponseCodeMap::operator==((_QWORD *)a2 + 87, (uint64_t)this + 904)|| !SipResponseCodeMap::operator==((_QWORD *)a2 + 91, (uint64_t)this + 936)|| !SipResponseCodeMap::operator==((_QWORD *)a2 + 95, (uint64_t)this + 968)|| *((unsigned __int8 *)a2 + 792) != *((unsigned __int8 *)this + 1000)|| *((unsigned __int8 *)a2 + 793) != *((unsigned __int8 *)this + 1001)|| *((_DWORD *)a2 + 199) != *((_DWORD *)this + 251)|| *((_DWORD *)a2 + 200) != *((_DWORD *)this + 252)|| *((_DWORD *)a2 + 201) != *((_DWORD *)this + 253)|| *((_DWORD *)a2 + 202) != *((_DWORD *)this + 254)|| *((unsigned __int8 *)a2 + 812) != *((unsigned __int8 *)this + 1020)|| *((unsigned __int8 *)a2 + 813) != *((unsigned __int8 *)this + 1021)|| *((unsigned __int8 *)a2 + 814) != *((unsigned __int8 *)this + 1022)
      || *((unsigned __int8 *)a2 + 815) != *((unsigned __int8 *)this + 1023)
      || !SipAuthConfig::operator==((unsigned __int8 *)a2 + 1320, (unsigned __int8 *)this + 1528)
      || *((unsigned __int8 *)a2 + 816) != *((unsigned __int8 *)this + 1024)
      || *((_DWORD *)a2 + 205) != *((_DWORD *)this + 257)
      || !SipResponseCodeMap::operator==((_QWORD *)a2 + 103, (uint64_t)this + 1032)
      || *((unsigned __int8 *)a2 + 856) != *((unsigned __int8 *)this + 1064)
      || *((unsigned __int8 *)a2 + 857) != *((unsigned __int8 *)this + 1065)
      || *((unsigned __int8 *)a2 + 858) != *((unsigned __int8 *)this + 1066)
      || *((unsigned __int8 *)a2 + 859) != *((unsigned __int8 *)this + 1067)
      || *((_DWORD *)a2 + 215) != *((_DWORD *)this + 267)
      || !std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a2 + 864, (unsigned __int8 *)this + 1072)|| !std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a2 + 888, (unsigned __int8 *)this + 1096)|| *((unsigned __int8 *)a2 + 912) != *((unsigned __int8 *)this + 1120)|| *((unsigned __int8 *)a2 + 913) != *((unsigned __int8 *)this + 1121)|| *((unsigned __int8 *)a2 + 914) != *((unsigned __int8 *)this + 1122)|| *((unsigned __int8 *)a2 + 915) != *((unsigned __int8 *)this + 1123)|| *((unsigned __int8 *)a2 + 918) != *((unsigned __int8 *)this + 1126)|| *((unsigned __int8 *)a2 + 919) != *((unsigned __int8 *)this + 1127)|| *((unsigned __int8 *)a2 + 920) != *((unsigned __int8 *)this + 1128)|| !std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a2 + 928, (unsigned __int8 *)this + 1136)|| *((unsigned __int8 *)a2 + 921) != *((unsigned __int8 *)this + 1129)|| *((unsigned __int8 *)a2 + 952) != *((unsigned __int8 *)this + 1160)|| *((unsigned __int8 *)a2 + 916) != *((unsigned __int8 *)this + 1124)|| *((unsigned __int8 *)a2 + 917) != *((unsigned __int8 *)this + 1125)
      || *((unsigned __int8 *)a2 + 953) != *((unsigned __int8 *)this + 1161)
      || !std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a2 + 960, (unsigned __int8 *)this + 1168)|| *((unsigned __int8 *)a2 + 984) != *((unsigned __int8 *)this + 1192)|| *((unsigned __int8 *)a2 + 985) != *((unsigned __int8 *)this + 1193)|| *((unsigned __int8 *)a2 + 986) != *((unsigned __int8 *)this + 1194)|| !SipResponseCodeMap::operator==((_QWORD *)a2 + 124, (uint64_t)this + 1200)|| *((unsigned __int8 *)a2 + 1120) != *((unsigned __int8 *)this + 1328)|| *((unsigned __int8 *)a2 + 1121) != *((unsigned __int8 *)this + 1329)|| *((unsigned __int8 *)a2 + 1122) != *((unsigned __int8 *)this + 1330)|| *((_DWORD *)a2 + 281) != *((_DWORD *)this + 333)|| !std::operator==[abi:ne180100]<std::string,std::less<std::string>,std::allocator<std::string>>((_QWORD *)a2 + 141, *((unsigned __int8 **)this + 167), *((_QWORD *)this + 169))|| *((unsigned __int8 *)a2 + 1152) != *((unsigned __int8 *)this + 1360)|| *((unsigned __int8 *)a2 + 1153) != *((unsigned __int8 *)this + 1361)|| *((unsigned __int8 *)a2 + 1154) != *((unsigned __int8 *)this + 1362)|| *((unsigned __int8 *)a2 + 1155) != *((unsigned __int8 *)this + 1363)|| *((unsigned __int8 *)a2 + 1156) != *((unsigned __int8 *)this + 1364)
      || !SipResponseCodeMap::operator==((_QWORD *)a2 + 148, (uint64_t)this + 1392)
      || *((unsigned __int8 *)a2 + 987) != *((unsigned __int8 *)this + 1195)
      || *((unsigned __int8 *)a2 + 1216) != *((unsigned __int8 *)this + 1424)
      || !SipResponseCodeMap::operator==((_QWORD *)a2 + 136, (uint64_t)this + 1296)
      || !SpamCategoryMap::operator==((_QWORD *)a2 + 153, (_QWORD *)this + 179)
      || !SpamRiskMap::operator==((uint64_t)a2 + 1248, (uint64_t)this + 1456)
      || !SipResponseCodeMap::operator==((_QWORD *)a2 + 161, (uint64_t)this + 1496))
    {
      goto LABEL_198;
    }
    v6 = *((unsigned __int8 *)a2 + 1399);
    if ((v6 & 0x80u) == 0)
      v7 = *((unsigned __int8 *)a2 + 1399);
    else
      v7 = *((_QWORD *)a2 + 173);
    v8 = *((unsigned __int8 *)this + 1607);
    v9 = (char)v8;
    if ((v8 & 0x80u) != 0)
      v8 = *((_QWORD *)this + 199);
    if (v7 != v8)
      goto LABEL_198;
    v10 = (const void **)((char *)a2 + 1376);
    if (v9 >= 0)
      v11 = (unsigned __int8 *)this + 1584;
    else
      v11 = (unsigned __int8 *)*((_QWORD *)this + 198);
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*v10, v11, *((_QWORD *)a2 + 173)))
        goto LABEL_198;
    }
    else if (*((_BYTE *)a2 + 1399))
    {
      while (*(unsigned __int8 *)v10 == *v11)
      {
        v10 = (const void **)((char *)v10 + 1);
        ++v11;
        if (!--v6)
          goto LABEL_134;
      }
      goto LABEL_198;
    }
LABEL_134:
    if (!SipUri::equals((const SipStackConfig *)((char *)a2 + 1400), (const SipUri *)((char *)this + 1608), 1)|| *((unsigned __int16 *)a2 + 904) != *((unsigned __int16 *)this + 1008)|| *((unsigned __int16 *)a2 + 905) != *((unsigned __int16 *)this + 1009)|| *((unsigned __int8 *)a2 + 1813) != *((unsigned __int8 *)this + 2021)|| *((unsigned __int8 *)a2 + 1957) != *((unsigned __int8 *)this + 2165)|| *((unsigned __int8 *)a2 + 1814) != *((unsigned __int8 *)this + 2022)|| *((unsigned __int8 *)a2 + 1815) != *((unsigned __int8 *)this + 2023)|| *((unsigned __int8 *)a2 + 1817) != *((unsigned __int8 *)this + 2025)|| *((_DWORD *)a2 + 455) != *((_DWORD *)this + 507)|| *((_DWORD *)a2 + 456) != *((_DWORD *)this + 508)|| *((_DWORD *)a2 + 459) != *((_DWORD *)this + 511)|| *((unsigned __int8 *)a2 + 1816) != *((unsigned __int8 *)this + 2024)|| *((_DWORD *)a2 + 466) != *((_DWORD *)this + 518)|| *((_DWORD *)a2 + 467) != *((_DWORD *)this + 519)|| *((_DWORD *)a2 + 468) != *((_DWORD *)this + 520)|| !std::operator==[abi:ne180100]<SipSecurityAgreementConfig,std::allocator<SipSecurityAgreementConfig>>(*((_QWORD *)a2 + 235),
                          *((_QWORD *)a2 + 236),
                          *((_QWORD *)this + 261),
                          *((_QWORD *)this + 262))
      || *((unsigned __int8 *)a2 + 1904) != *((unsigned __int8 *)this + 2112)
      || *((unsigned __int8 *)a2 + 1905) != *((unsigned __int8 *)this + 2113)
      || *((unsigned __int8 *)a2 + 1906) != *((unsigned __int8 *)this + 2114)
      || *((_DWORD *)a2 + 477) != *((_DWORD *)this + 529)
      || !ImsResultSet::operator==((_QWORD *)a2 + 239, (uint64_t)this + 2120)
      || *((_DWORD *)a2 + 486) != *((_DWORD *)this + 538)
      || *((unsigned __int8 *)a2 + 1948) != *((unsigned __int8 *)this + 2156)
      || *((unsigned __int8 *)a2 + 1949) != *((unsigned __int8 *)this + 2157)
      || *((unsigned __int8 *)a2 + 1950) != *((unsigned __int8 *)this + 2158)
      || *((_DWORD *)a2 + 488) != *((_DWORD *)this + 540)
      || *((unsigned __int8 *)a2 + 1956) != *((unsigned __int8 *)this + 2164)
      || *((unsigned __int8 *)a2 + 1958) != *((unsigned __int8 *)this + 2166)
      || *((unsigned __int8 *)a2 + 1812) != *((unsigned __int8 *)this + 2020)
      || !ImsServiceClasses::operator==((_DWORD *)a2 + 491, (_DWORD *)this + 543)
      || *((_DWORD *)a2 + 500) != *((_DWORD *)this + 552)
      || *((unsigned __int8 *)a2 + 2004) != *((unsigned __int8 *)this + 2212))
    {
      goto LABEL_198;
    }
    v17 = *((unsigned __int8 *)a2 + 2399);
    if ((v17 & 0x80u) == 0)
      v18 = *((unsigned __int8 *)a2 + 2399);
    else
      v18 = *((_QWORD *)a2 + 298);
    v19 = *((unsigned __int8 *)this + 2607);
    v20 = (char)v19;
    if ((v19 & 0x80u) != 0)
      v19 = *((_QWORD *)this + 324);
    if (v18 != v19)
      goto LABEL_198;
    v21 = (const void **)((char *)a2 + 2376);
    if (v20 >= 0)
      v22 = (unsigned __int8 *)this + 2584;
    else
      v22 = (unsigned __int8 *)*((_QWORD *)this + 323);
    if ((v17 & 0x80) != 0)
    {
      if (memcmp(*v21, v22, *((_QWORD *)a2 + 298)))
        goto LABEL_198;
    }
    else if (*((_BYTE *)a2 + 2399))
    {
      while (*(unsigned __int8 *)v21 == *v22)
      {
        v21 = (const void **)((char *)v21 + 1);
        ++v22;
        if (!--v17)
          goto LABEL_181;
      }
      goto LABEL_198;
    }
LABEL_181:
    if (*((_DWORD *)a2 + 600) == *((_DWORD *)this + 652)
      && *((unsigned __int8 *)a2 + 2404) == *((unsigned __int8 *)this + 2612)
      && *((unsigned __int8 *)a2 + 2405) == *((unsigned __int8 *)this + 2613)
      && *((unsigned __int8 *)a2 + 2406) == *((unsigned __int8 *)this + 2614)
      && *((unsigned __int8 *)a2 + 2407) == *((unsigned __int8 *)this + 2615)
      && *((unsigned __int8 *)a2 + 2408) == *((unsigned __int8 *)this + 2616)
      && std::operator==[abi:ne180100]<std::string,std::string,std::less<std::string>,std::allocator<std::pair<std::string const,std::string>>>((_QWORD *)a2 + 302, *((unsigned __int8 **)this + 328), *((_QWORD *)this + 330))&& *((unsigned __int8 *)a2 + 2440) == *((unsigned __int8 *)this + 2648)&& *((unsigned __int8 *)a2 + 2441) == *((unsigned __int8 *)this + 2649)&& *((_DWORD *)a2 + 611) == *((_DWORD *)this + 663)&& *((unsigned __int8 *)a2 + 2448) == *((unsigned __int8 *)this + 2656)&& BambiCallTerminationReasonsBase::operator==((uint64_t)a2 + 2016, (uint64_t)this + 2224)&& BambiCallTerminationReasonsBase::operator==((uint64_t)a2 + 2184, (uint64_t)this + 2392)&& *((_DWORD *)a2 + 502) == *((_DWORD *)this + 554)&& *((unsigned __int8 *)a2 + 2449) == *((unsigned __int8 *)this + 2657)&& *((unsigned __int8 *)a2 + 2457) == *((unsigned __int8 *)this + 2665))
    {
      v23 = *((unsigned __int8 *)a2 + 2456) == *((unsigned __int8 *)this + 2664);
LABEL_199:
      v24 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v24);
      v25 = *(_QWORD **)(v24 + 8);
      if (v23)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"config hasn't changed. Not reinitializing.", 42);
        *(_BYTE *)(v24 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v24 + 17) = 0;
        v26 = *((_QWORD *)this + 356);
        if (v26)
        {
          if (*((_DWORD *)this + 50) == 2)
          {
            std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v101, (_QWORD *)this + 15);
            v100 = 0u;
            v99 = 0u;
            v98 = 0u;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
            LODWORD(__p.__r_.__value_.__r.__words[2]) = 0;
            (*(void (**)(uint64_t, uint64_t *, std::string *))(*(_QWORD *)v26 + 16))(v26, &v101, &__p);
            ImsResult::~ImsResult((ImsResult *)&__p);
            v27 = v102;
            if (v102)
            {
              p_shared_owners = (unint64_t *)&v102->__shared_owners_;
              do
                v29 = __ldaxr(p_shared_owners);
              while (__stlxr(v29 - 1, p_shared_owners));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }
          }
        }
        ImsPowerAssertion::deinitialize((uint64_t)v4);
        return;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"config changed. Reinitializing.", 31);
      *(_BYTE *)(v24 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v24 + 17) = 0;
      *((_BYTE *)this + 4313) = 1;
      SipStack::deinitialize(this, 0, 0);
LABEL_209:
      v30 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"initializing", 12);
      *(_BYTE *)(v30 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v30 + 17) = 0;
      ++*((_DWORD *)this + 1067);
      *((_DWORD *)this + 50) = 1;
      SipUserAgentConfig::operator=((uint64_t)this + 208, (__int128 *)a2);
      SipTransportLayerConfig::operator=((uint64_t)this + 1584, (uint64_t)a2 + 1376);
      v31 = *((_QWORD *)a2 + 250);
      *((_DWORD *)this + 554) = *((_DWORD *)a2 + 502);
      *((_QWORD *)this + 276) = v31;
      BambiCallTerminationReasonsBase::assign((BambiCallTerminationReasonsBase *)((char *)this + 2224), (const SipStackConfig *)((char *)a2 + 2016));
      BambiCallIncomingTerminationReasons::assign((BambiCallIncomingTerminationReasons *)((char *)this + 2392), (const SipStackConfig *)((char *)a2 + 2184));
      v32 = (const void **)((char *)a2 + 2376);
      std::string::operator=((std::string *)((char *)this + 2584), (const std::string *)a2 + 99);
      v33 = *((_QWORD *)a2 + 300);
      *((_BYTE *)this + 2616) = *((_BYTE *)a2 + 2408);
      *((_QWORD *)this + 326) = v33;
      if ((const SipStackConfig *)((char *)this + 208) != a2)
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 328, *((__int128 **)a2 + 302), (__int128 *)((char *)a2 + 2424));
      v34 = *((_QWORD *)a2 + 305);
      *((_WORD *)this + 1328) = *((_WORD *)a2 + 1224);
      *((_QWORD *)this + 331) = v34;
      *((_WORD *)this + 1332) = *((_WORD *)a2 + 1228);
      std::string::operator=((std::string *)((char *)this + 2672), (const std::string *)((char *)a2 + 2464));
      SipTransportLayer::initialize(*((SipTransportLayer **)this + 20));
      SipTransactionLayer::initialize(*((SipTransactionLayer **)this + 19));
      SipUserAgent::initialize(*((SipUserAgent **)this + 18));
      *((_BYTE *)this + 4208) = 1;
      *((_BYTE *)this + 177) = *((_BYTE *)a2 + 2004);
      std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 23);
      SipStack::carrierIdentifier(this, &__p);
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v95, (_QWORD *)this + 15);
      BambiPrefsManager::subscribe((BambiPrefsManager *)&__p, &v95);
      v35 = v96;
      if (v96)
      {
        v36 = (unint64_t *)&v96->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v38 = *((unsigned __int8 *)a2 + 2399);
      if ((v38 & 0x80u) == 0)
        v39 = *((unsigned __int8 *)a2 + 2399);
      else
        v39 = *((_QWORD *)a2 + 298);
      if (v39)
      {
        v40 = *((unsigned __int8 *)a2 + 1399);
        v41 = (char)v40;
        if ((v40 & 0x80u) != 0)
          v40 = *((_QWORD *)a2 + 173);
        if (v39 == v40)
        {
          if (v41 >= 0)
            v42 = (unsigned __int8 *)a2 + 1376;
          else
            v42 = (unsigned __int8 *)*((_QWORD *)a2 + 172);
          if ((v38 & 0x80) != 0)
          {
            if (!memcmp(*v32, v42, *((_QWORD *)a2 + 298)))
              goto LABEL_281;
          }
          else
          {
            if (!*((_BYTE *)a2 + 2399))
              goto LABEL_281;
            v43 = (unsigned __int8 *)a2 + 2376;
            while (*v43 == *v42)
            {
              ++v43;
              ++v42;
              if (!--v38)
                goto LABEL_281;
            }
          }
        }
        v44 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
        (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"media interface is different from signaling (", 45);
        *(_BYTE *)(v44 + 17) = 0;
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v44 + 32))(v44, (char *)a2 + 2376);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)" vs. ", 5);
        *(_BYTE *)(v44 + 17) = 0;
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v44 + 32))(v44, (char *)a2 + 1376);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)")", 1);
        *(_BYTE *)(v44 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v44 + 17) = 0;
        if (*((char *)a2 + 2399) < 0)
        {
          std::string::__init_copy_ctor_external(&v93, *((const std::string::value_type **)a2 + 297), *((_QWORD *)a2 + 298));
        }
        else
        {
          *(_OWORD *)&v93.__r_.__value_.__l.__data_ = *(_OWORD *)v32;
          v93.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 299);
        }
        size = HIBYTE(v93.__r_.__value_.__r.__words[2]);
        if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v93.__r_.__value_.__l.__size_;
        if (size)
        {
          v46 = *((_DWORD *)a2 + 600);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
          v47 = *((_QWORD *)this + 17);
          v48 = *(void **)(v47 + 768);
          v49 = *(std::__shared_weak_count **)(v47 + 776);
          v90 = v48;
          v91 = v49;
          if (v49)
          {
            v50 = (unint64_t *)&v49->__shared_owners_;
            do
              v51 = __ldxr(v50);
            while (__stxr(v51 + 1, v50));
          }
          v52 = (NetworkInterface *)(*(uint64_t (**)(void *, std::string *))(*(_QWORD *)v48 + 64))(v48, &v93);
          if (v49)
          {
            v53 = (unint64_t *)&v49->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          if (v52)
          {
            v90 = 0;
            v91 = 0;
            NetworkInterface::firstAddress(v52, v46, 1, &v90);
            if (v90)
            {
              (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v90 + 32))(&v104);
              v55 = v104;
              v104 = 0uLL;
              v56 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v55;
              if (v56)
              {
                v57 = (unint64_t *)&v56->__shared_owners_;
                do
                  v58 = __ldaxr(v57);
                while (__stlxr(v58 - 1, v57));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                  std::__shared_weak_count::__release_weak(v56);
                }
              }
              v59 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
              if (*((_QWORD *)&v104 + 1))
              {
                v60 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
                do
                  v61 = __ldaxr(v60);
                while (__stlxr(v61 - 1, v60));
                if (!v61)
                {
                  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                  std::__shared_weak_count::__release_weak(v59);
                }
              }
            }
            else
            {
              v63 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 56))(this);
              (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v63);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v63 + 8), (uint64_t)"no address with mask ", 21);
              *(_BYTE *)(v63 + 17) = 0;
              std::ostream::operator<<();
              *(_BYTE *)(v63 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v63 + 8), (uint64_t)" found on media interface ", 26);
              *(_BYTE *)(v63 + 17) = 0;
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v63 + 32))(v63, &v93);
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v63 + 64))(v63, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v63 + 17) = 0;
            }
            (*(void (**)(NetworkInterface *))(*(_QWORD *)v52 + 8))(v52);
            v94 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
            v64 = v91;
            if (v91)
            {
              v65 = (unint64_t *)&v91->__shared_owners_;
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 - 1, v65));
              if (!v66)
              {
                ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                std::__shared_weak_count::__release_weak(v64);
              }
            }
          }
          else
          {
            v62 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 56))(this);
            (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v62);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v62 + 8), (uint64_t)"media interface ", 16);
            *(_BYTE *)(v62 + 17) = 0;
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v62 + 32))(v62, &v93);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v62 + 8), (uint64_t)" not found ", 11);
            *(_BYTE *)(v62 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v62 + 64))(v62, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v62 + 17) = 0;
            v94 = 0uLL;
          }
          v67 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v68 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v69 = __ldaxr(v68);
            while (__stlxr(v69 - 1, v68));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
        }
        else
        {
          v94 = 0uLL;
        }
        std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 184, &v94);
        v70 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
        if (*((_QWORD *)&v94 + 1))
        {
          v71 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v93.__r_.__value_.__l.__data_);
      }
LABEL_281:
      v73 = *((_QWORD *)this + 23) == 0;
      v74 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v74);
      v75 = *(_QWORD **)(v74 + 8);
      if (v73)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"using signaling address for media", 33);
        *(_BYTE *)(v74 + 17) = 0;
      }
      else
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"using media address ", 20);
        *(_BYTE *)(v74 + 17) = 0;
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 23) + 40))(*((_QWORD *)this + 23), v74);
      }
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v74 + 64))(v74, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v74 + 17) = 0;
      memset(&__p, 0, sizeof(__p));
      v76 = (ImsPrefs *)SipStack::prefs(this);
      AccessBarringTypeKey = (const ImsPrefsKeyEnum *)ImsPrefs::getAccessBarringTypeKey(v76);
      ImsPrefs::stringValue(v76, AccessBarringTypeKey, &__p);
      std::string::basic_string[abi:ne180100]<0>(&v90, "none");
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v92 >= 0)
        v79 = (const char *)&v90;
      else
        v79 = (const char *)v90;
      v80 = strcasecmp((const char *)p_p, v79) != 0;
      BambiAccessBarring::setEnabled((BambiAccessBarring *)((char *)this + 2904), v80);
      if (v92 < 0)
        operator delete(v90);
      v82 = *((_QWORD *)this + 15);
      v81 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
      if (v81)
      {
        p_shared_weak_owners = (unint64_t *)&v81->__shared_weak_owners_;
        do
          v84 = __ldxr(p_shared_weak_owners);
        while (__stxr(v84 + 1, p_shared_weak_owners));
        do
          v85 = __ldxr(p_shared_weak_owners);
        while (__stxr(v85 + 1, p_shared_weak_owners));
        do
          v86 = __ldxr(p_shared_weak_owners);
        while (__stxr(v86 + 1, p_shared_weak_owners));
      }
      v106 = 0;
      v87 = operator new(0x20uLL);
      *v87 = &off_1E78DFDA8;
      v87[1] = this;
      v87[2] = v82;
      v87[3] = v81;
      v106 = v87;
      SipTimerContainer::startTimer((_QWORD *)this + 338, (uint64_t)"MediaInitTimer", (uint64_t)v105, *((_DWORD *)a2 + 500), 0);
      v88 = v106;
      if (v106 == v105)
      {
        v89 = 4;
        v88 = v105;
      }
      else
      {
        if (!v106)
        {
LABEL_302:
          SipStack::setMediaAppId(this, *((_BYTE *)a2 + 2004));
          if (v81)
          {
            std::__shared_weak_count::__release_weak(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          return;
        }
        v89 = 5;
      }
      (*(void (**)(void))(*v88 + 8 * v89))();
      goto LABEL_302;
    }
LABEL_198:
    v23 = 0;
    goto LABEL_199;
  }
  if (v5 != 3)
    goto LABEL_209;
  v12 = *((_QWORD *)this + 337) == 0;
  v13 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v13);
  v14 = *(_QWORD **)(v13 + 8);
  if (v12)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"deferring initialization until we've finished previous deinitialize", 67);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"we already have an initialize pending. Hang on.", 47);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    v15 = (void **)*((_QWORD *)this + 337);
    if (v15)
    {
      SipStackConfig::~SipStackConfig(v15);
      MEMORY[0x1C3B87100]();
    }
  }
  v16 = (SipStackConfig *)operator new();
  SipStackConfig::SipStackConfig(v16, a2);
  *((_QWORD *)this + 337) = v16;
  *((_BYTE *)this + 4313) = 1;
}

void sub_1BF108D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void SipStack::deinitialize(SipStack *this, int a2, int a3)
{
  int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  ImsPrefs *v17;
  void **DeregistrationWaitTimeoutMillisecondsKey;
  void *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  ImsPrefs *v26;
  void *v27;
  void *v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  _BYTE v34[24];
  _BYTE *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v5 = *((_DWORD *)this + 50);
  if (v5 == 3)
  {
    if ((a2 & 1) == 0)
      SipStack::internalDeinitialize(this, 0);
    return;
  }
  if (v5)
  {
    v11 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"deinitializing sip stack", 24);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    *((_DWORD *)this + 50) = 3;
    BambiAccessBarring::reset((BambiAccessBarring *)((char *)this + 2904));
    v12 = *((_QWORD *)this + 15);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (v7)
    {
      p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      do
        v15 = __ldxr(p_shared_weak_owners);
      while (__stxr(v15 + 1, p_shared_weak_owners));
    }
    if (!a2 || !SipStack::registered(this))
    {
      v20 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v20);
      if (a2)
        v21 = "not registered. Continuing with deinitialization.";
      else
        v21 = "can't wait for deregistration.";
      if (a2)
        v22 = 49;
      else
        v22 = 30;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)v21, v22);
      *(_BYTE *)(v20 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v20 + 17) = 0;
      SipStack::internalDeinitialize(this, a2);
      goto LABEL_37;
    }
    v16 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"waiting ", 8);
    *(_BYTE *)(v16 + 17) = 0;
    v17 = (ImsPrefs *)SipStack::prefs(this);
    DeregistrationWaitTimeoutMillisecondsKey = (void **)ImsPrefs::getDeregistrationWaitTimeoutMillisecondsKey(v17);
    v19 = ImsPrefs::prefWithKey(v17, DeregistrationWaitTimeoutMillisecondsKey);
    if (v19)
      (*(void (**)(void *))(*(_QWORD *)v19 + 56))(v19);
    std::ostream::operator<<();
    *(_BYTE *)(v16 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"ms for deregistration before deinitializing", 43);
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    if (v7)
    {
      v23 = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v25 = operator new(0x20uLL);
    *v25 = &off_1E78DFE28;
    v25[1] = this;
    v25[2] = v12;
    v25[3] = v7;
    v35 = v25;
    v26 = (ImsPrefs *)SipStack::prefs(this);
    v27 = ImsPrefs::getDeregistrationWaitTimeoutMillisecondsKey(v26);
    v28 = ImsPrefs::prefWithKey(v26, (void **)v27);
    if (v28)
      v29 = (*(uint64_t (**)(void *))(*(_QWORD *)v28 + 56))(v28);
    else
      v29 = *((_DWORD *)v27 + 15);
    SipTimerContainer::startTimer((_QWORD *)this + 338, (uint64_t)&kWaitForDeregistrationTimer, (uint64_t)v34, v29, 0);
    v30 = v35;
    if (v35 == v34)
    {
      v31 = 4;
      v30 = v34;
    }
    else
    {
      if (!v35)
      {
LABEL_36:
        *((_BYTE *)this + 4264) = 1;
        BambiDeregisterHandler::handleEndRegistration(*((BambiDeregisterHandler **)this + 529), a3);
LABEL_37:
        if (!v7)
          return;
        std::__shared_weak_count::__release_weak(v7);
        goto LABEL_39;
      }
      v31 = 5;
    }
    (*(void (**)(void))(*v30 + 8 * v31))();
    goto LABEL_36;
  }
  v6 = *((_QWORD *)this + 17);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v32, (_QWORD *)this + 15);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 240))(v6, &v32);
  v7 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
LABEL_39:
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1BF109288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::__shared_weak_count *v15;

  if (v15)
  {
    std::__shared_weak_count::__release_weak(v15);
    std::__shared_weak_count::__release_weak(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(exception_object);
}

void SipStack::carrierIdentifier(SipStack *this@<X0>, std::string *a2@<X8>)
{
  char *v2;
  std::string::size_type v3;
  const std::string::value_type *v4;

  v2 = (char *)this + 4160;
  if (*((char *)this + 4183) < 0)
  {
    v3 = *((_QWORD *)this + 521);
    if (v3)
    {
      v4 = *(const std::string::value_type **)v2;
      goto LABEL_10;
    }
  }
  else if (*((_BYTE *)this + 4183))
  {
LABEL_8:
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v2;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
    return;
  }
  if ((*((char *)this + 4159) & 0x80000000) == 0)
  {
    v2 = (char *)this + 4136;
    goto LABEL_8;
  }
  v4 = (const std::string::value_type *)*((_QWORD *)this + 517);
  v3 = *((_QWORD *)this + 518);
LABEL_10:
  std::string::__init_copy_ctor_external(a2, v4, v3);
}

uint64_t SipStack::prefs(SipStack *this)
{
  uint64_t v1;
  std::string __p;

  SipStack::carrierIdentifier(this, &__p);
  v1 = BambiPrefsManager::prefs((BambiPrefsManager *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v1;
}

void sub_1BF1093B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipStack::setMediaAppId(SipStack *this, char a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"updating appId from: ", 21);
  *(_BYTE *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" to: ", 5);
  *(_BYTE *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  *((_BYTE *)this + 177) = a2;
  return result;
}

BOOL SipStack::registered(SipStack *this)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unint64_t v7;

  v1 = *((_QWORD *)this + 18);
  v2 = *(_QWORD *)(v1 + 248);
  v3 = *(std::__shared_weak_count **)(v1 + 256);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_DWORD *)(v2 + 528);
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    v6 = *(_DWORD *)(v2 + 528);
  }
  return v6 == 2;
}

void SipStack::cleanUpLazuliMessagesAndSessions(SipStack *this)
{
  uint64_t v2;
  uint64_t v3;
  SipLazuliManager *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  SipLazuliManager *v13;
  std::__shared_weak_count *v14;

  v2 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Clean up all lazuli messages and sessions", 41);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  v3 = *((_QWORD *)this + 18);
  v4 = *(SipLazuliManager **)(v3 + 208);
  v5 = *(std::__shared_weak_count **)(v3 + 216);
  v13 = v4;
  v14 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v4)
    SipLazuliManager::endAllMessages(v4);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  IMSClientManager::instance(v4);
  IPTelephonyManager::getInstance((uint64_t *)&v13);
  IMSCallManager::terminateAllLazuliSessions(*((IMSCallManager **)v13 + 25));
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1BF109640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipStack::initializeMedia(SipStack *this)
{
  uint64_t v2;
  std::string __p;

  v2 = *((_QWORD *)this + 17);
  if (*((char *)this + 4159) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 517), *((_QWORD *)this + 518));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4136);
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 519);
  }
  BambiClient::initializeMediaApplicationId(v2, (uint64_t)&__p, *((unsigned __int8 *)this + 2212), *((unsigned __int8 *)this + 176), *((unsigned int *)this + 554));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF1096EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

SipRequest *SipStack::createRequestFromTemplate(uint64_t a1, const std::string *a2, char a3)
{
  uint64_t v6;
  _BOOL4 isWifi;
  int v8;

  v6 = *(_QWORD *)(a1 + 144);
  isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(a1 + 3136));
  v8 = (a3 & 1) != 0 || *(_BYTE *)(a1 + 176) != 0;
  return SipMessageEncodingMap::createRequestFromTemplate((SipMessageEncodingMap *)(v6 + 288), a2, isWifi, v8);
}

void SipStack::dumpState(SipStack *this, ImsOutStream *a2)
{
  char *v4;
  _OWORD *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  SipRegistrationClient *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  SipDialogManager *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  SipDialogManager *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *size;
  unint64_t *v38;
  unint64_t v39;
  std::string __p;
  std::string v41;

  v4 = (char *)this + 4159;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"----- SIP Stack ", 16);
  *((_BYTE *)a2 + 17) = 0;
  v5 = (_OWORD *)((char *)this + 4136);
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(&v41, *((const std::string::value_type **)this + 517), *((_QWORD *)this + 518));
  }
  else
  {
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *v5;
    v41.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 519);
  }
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 32))(a2, &v41);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" (", 2);
  *((_BYTE *)a2 + 17) = 0;
  SipStack::carrierIdentifier(this, &__p);
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 32))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)") -----", 7);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"Device Type:        ", 20);
  *((_BYTE *)a2 + 17) = 0;
  v6 = SipUserAgent::config(*((SipUserAgent **)this + 18));
  if (*(_BYTE *)(v6 + 456))
    v7 = "primary";
  else
    v7 = "secondary";
  if (*(_BYTE *)(v6 + 456))
    v8 = 7;
  else
    v8 = 9;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)v7, v8);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"Access Network Info:", 20);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  ims::AccessNetworks::log((ims::AccessNetworks *)((char *)this + 3136), a2, 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"SIP Timers:         ", 20);
  *((_BYTE *)a2 + 17) = 0;
  v9 = SipUserAgent::config(*((SipUserAgent **)this + 18));
  (*(void (**)(uint64_t, ImsOutStream *))(*(_QWORD *)(v9 + 512) + 16))(v9 + 512, a2);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  v10 = SipUserAgent::config(*((SipUserAgent **)this + 18));
  v11 = *(unsigned __int8 *)(v10 + 175);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(v10 + 160);
  v12 = (_QWORD *)*((_QWORD *)a2 + 1);
  if (v11)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Conference Server:  ", 20);
    *((_BYTE *)a2 + 17) = 0;
    v13 = SipUserAgent::config(*((SipUserAgent **)this + 18));
    SipUri::asString(v13 + 48, 2, &__p);
    LoggableString::LoggableString(&v41, &__p);
    (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &v41);
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Conference Server:  none", 24);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"Connectivity:       ", 20);
  *((_BYTE *)a2 + 17) = 0;
  if (v4[49])
    v14 = "true";
  else
    v14 = "false";
  std::string::basic_string[abi:ne180100]<0>(&v41, v14);
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 32))(a2, &v41);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"SIM Instance:       ", 20);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  v15 = *((_QWORD *)this + 18);
  v16 = *(SipRegistrationClient **)(v15 + 248);
  v17 = *(std::__shared_weak_count **)(v15 + 256);
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  v41.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  SipRegistrationClient::printRegistrationInfo(v16, a2);
  if (v17)
  {
    v20 = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  SipTransportLayer::printTransportInfo(*((SipTransportLayer **)this + 20), a2);
  SipTransactionLayer::printTransactions(*((_QWORD *)this + 19), a2);
  v22 = *((_QWORD *)this + 18);
  v23 = *(SipDialogManager **)(v22 + 176);
  v24 = *(std::__shared_weak_count **)(v22 + 184);
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  v41.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  SipDialogManager::printSubscriptions(v23, a2);
  if (v24)
  {
    v27 = (unint64_t *)&v24->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"All Dialogs:", 12);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  v29 = *((_QWORD *)this + 18);
  v30 = *(SipDialogManager **)(v29 + 176);
  v31 = *(std::__shared_weak_count **)(v29 + 184);
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  v41.__r_.__value_.__l.__size_ = (std::string::size_type)v31;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  SipDialogManager::printDialogs(v30, a2);
  if (v31)
  {
    v34 = (unint64_t *)&v31->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"Delegates:", 10);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(&v41, *((const std::string::value_type **)this + 517), *((_QWORD *)this + 518));
  }
  else
  {
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *v5;
    v41.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 519);
  }
  v36 = IMSClientManager::delegateForStack((void **)&v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (v36)
    (*(void (**)(uint64_t, ImsOutStream *))(*(_QWORD *)v36 + 240))(v36, a2);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  if (*v4 < 0)
  {
    std::string::__init_copy_ctor_external(&v41, *((const std::string::value_type **)this + 517), *((_QWORD *)this + 518));
  }
  else
  {
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *v5;
    v41.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 519);
  }
  IMSClientManager::lazuliDelegateForStack((void **)&v41.__r_.__value_.__l.__data_, &__p);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (__p.__r_.__value_.__r.__words[0])
    LazuliDelegate::dumpState((LazuliDelegate *)__p.__r_.__value_.__l.__data_, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"----- END -----", 15);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v38 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_1BF109DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BF109E88(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x1BF109E60);
}

void SipStack::reportDeferralMetric(SipStack *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v2 = *((_QWORD *)this + 18);
  v3 = *(_QWORD *)(v2 + 248);
  v4 = *(std::__shared_weak_count **)(v2 + 256);
  v19 = v3;
  v20 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(v3 + 3976);
  if (v7)
    LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  *((_DWORD *)this + 1084) = v7;
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 17) + 104))(&v19);
  v10 = v19;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v17, (_QWORD *)this + 15);
  IMSMetricsManager::logSignalingReduction(v10, &v17, (uint64_t)this + 4320);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v20;
  if (v20)
  {
    v15 = (unint64_t *)&v20->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *((_BYTE *)this + 4320) = 0;
  *((_QWORD *)this + 541) = 0;
  *((_DWORD *)this + 1084) = 0;
}

void sub_1BF109FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SipStack::setConnectivityAvailable(SipStack *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  ImsPrefs *v16;
  void **LimitedConnectivityHysteresisTimeoutSecondsKey;
  void *v18;
  int v19;
  ImsPrefs *v20;
  void **LimitedConnectivityHysteresisFromRegistrationKey;
  void *v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  ImsOutStream *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  int v41;
  int v42;
  int v43;
  BOOL v44;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t (*v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  int v68;
  int v69;
  int v70;
  BOOL v71;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t (*v77)(uint64_t);
  uint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  char v83;
  uint64_t v84;
  std::string::size_type v85;
  std::string::size_type v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  std::string::size_type v90;
  std::string::size_type v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD **v95;
  _BYTE *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *p_shared_weak_owners;
  unint64_t v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  int v109;
  std::string __p;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  void *v114[2];
  char v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  _BYTE v124[24];
  _BYTE *v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Connectivity reported: ", 23);
  *(_BYTE *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (*((_BYTE *)this + 176))
  {
    v5 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v5);
    v6 = *(_QWORD **)(v5 + 8);
    v7 = "Not updating connectivity for emergency stack";
    v8 = 45;
LABEL_5:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    return;
  }
  if (*((unsigned __int8 *)this + 4208) == (_DWORD)a2)
  {
    v5 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v5);
    v6 = *(_QWORD **)(v5 + 8);
    v7 = "Not updating connectivity when status hasn't changed";
    v8 = 52;
    goto LABEL_5;
  }
  *((_BYTE *)this + 4208) = a2;
  v9 = *((_QWORD *)this + 18);
  v10 = *(_QWORD *)(v9 + 248);
  v11 = *(std::__shared_weak_count **)(v9 + 256);
  __p.__r_.__value_.__r.__words[0] = v10;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  (*(void (**)(std::string::size_type, uint64_t, _QWORD))(*(_QWORD *)v10 + 264))(v10, a2, 0);
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v16 = (ImsPrefs *)SipStack::prefs(this);
  LimitedConnectivityHysteresisTimeoutSecondsKey = (void **)ImsPrefs::getLimitedConnectivityHysteresisTimeoutSecondsKey(v16);
  v18 = ImsPrefs::prefWithKey(v16, LimitedConnectivityHysteresisTimeoutSecondsKey);
  if (v18)
    v19 = (*(uint64_t (**)(void *))(*(_QWORD *)v18 + 56))(v18);
  else
    v19 = *((_DWORD *)LimitedConnectivityHysteresisTimeoutSecondsKey + 15);
  v20 = (ImsPrefs *)SipStack::prefs(this);
  LimitedConnectivityHysteresisFromRegistrationKey = (void **)ImsPrefs::getLimitedConnectivityHysteresisFromRegistrationKey(v20);
  v22 = ImsPrefs::prefWithKey(v20, LimitedConnectivityHysteresisFromRegistrationKey);
  if (v22)
    v23 = (*(uint64_t (**)(void *))(*(_QWORD *)v22 + 40))(v22);
  else
    v23 = *((_BYTE *)LimitedConnectivityHysteresisFromRegistrationKey + 57) != 0;
  if (SipStack::requiresLimitedAvailability(this))
  {
    if ((a2 & 1) != 0)
    {
      if (v19)
        v24 = v23;
      else
        v24 = 1;
      if ((v24 & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ConnectivityHysteresis");
        SipTimerContainer::cancelTimer((SipTimerContainer *)((char *)this + 2704), &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *((_BYTE *)this + 4320) = 0;
        SipStack::reportDeferralMetric(this);
      }
      return;
    }
    v25 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"Entering limited connectivity, pending transactions may be terminated", 69);
    *(_BYTE *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v25 + 17) = 0;
    v26 = *((_QWORD *)this + 19);
    v27 = (ImsOutStream *)(*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipStack *, ImsOutStream *))(*(_QWORD *)this + 16))(this, v27);
    SipTransactionLayer::printTransactions(v26, v27);
    v28 = *((_QWORD *)this + 19);
    v111 = 0u;
    v112 = 0u;
    v113 = 0u;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 1073741847;
    v123 = 0;
    v121 = 0u;
    v122 = 0u;
    std::unordered_map<std::string,std::shared_ptr<SipClientTransaction>>::unordered_map((uint64_t)&v121, v28 + 152);
    v109 = v23;
    v120 = 0;
    v118 = 0u;
    v119 = 0u;
    std::unordered_map<std::string,std::shared_ptr<SipServerTransaction>>::unordered_map((uint64_t)&v118, v28 + 192);
    v29 = (_QWORD *)v122;
    if ((_QWORD)v122)
    {
      v30 = v28 + 32;
      while (1)
      {
        v31 = v29[5];
        v32 = (std::__shared_weak_count *)v29[6];
        v116 = v31;
        v117 = v32;
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
          do
            v35 = __ldxr(v33);
          while (__stxr(v35 + 1, v33));
        }
        if (!v31)
        {
LABEL_50:
          v44 = 0;
          if (v32)
            goto LABEL_54;
          goto LABEL_58;
        }
        v36 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v31 + 288) + 112))(*(_QWORD *)(v31 + 288));
        v37 = v36[23];
        v38 = (v37 & 0x80u) == 0 ? v36[23] : *((_QWORD *)v36 + 1);
        if (v38 != 8)
          break;
        if ((v37 & 0x80) == 0)
        {
          if (!v36[23])
            goto LABEL_50;
          v39 = v37 - 1;
          v40 = "REGISTER";
          do
          {
            v42 = *v36++;
            v41 = v42;
            v43 = *(unsigned __int8 *)v40++;
            v44 = v41 != v43;
          }
          while (v41 == v43 && v39-- != 0);
          goto LABEL_53;
        }
        v44 = memcmp(*(const void **)v36, "REGISTER", *((_QWORD *)v36 + 1)) != 0;
        if (v32)
        {
LABEL_54:
          v46 = (unint64_t *)&v32->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
LABEL_58:
        if (v44)
        {
          v48 = v116;
          v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v116 + 144))(v116);
          v50 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 64);
          if (v49)
          {
            v51 = v50(v28 + 32);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v28 + 32, v51);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v51 + 8), (uint64_t)"forcing termination of completed transaction ", 45);
            *(_BYTE *)(v51 + 17) = 0;
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v48 + 152))(v114, v48);
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v51 + 40))(v51, v114);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v51 + 17) = 0;
            if (v115 < 0)
              operator delete(v114[0]);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 32))(v48, 7);
          }
          else
          {
            v52 = v50(v28 + 32);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v28 + 32, v52);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v52 + 8), (uint64_t)"Error out transaction ", 22);
            *(_BYTE *)(v52 + 17) = 0;
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v48 + 152))(v114, v48);
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v52 + 40))(v52, v114);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v52 + 17) = 0;
            if (v115 < 0)
              operator delete(v114[0]);
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v48 + 112))(v48, &__p);
          }
        }
        v53 = v117;
        if (v117)
        {
          v54 = (unint64_t *)&v117->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v29 = (_QWORD *)*v29;
        if (!v29)
          goto LABEL_75;
      }
      v44 = 1;
LABEL_53:
      if (v32)
        goto LABEL_54;
      goto LABEL_58;
    }
LABEL_75:
    v56 = (_QWORD *)v119;
    if ((_QWORD)v119)
    {
      v57 = v28 + 32;
      while (1)
      {
        v58 = v56[5];
        v59 = (std::__shared_weak_count *)v56[6];
        v116 = v58;
        v117 = v59;
        if (v59)
        {
          v60 = (unint64_t *)&v59->__shared_owners_;
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
          do
            v62 = __ldxr(v60);
          while (__stxr(v62 + 1, v60));
        }
        if (!v58)
        {
LABEL_95:
          v71 = 0;
          if (v59)
            goto LABEL_99;
          goto LABEL_103;
        }
        v63 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v58 + 288) + 112))(*(_QWORD *)(v58 + 288));
        v64 = v63[23];
        v65 = (v64 & 0x80u) == 0 ? v63[23] : *((_QWORD *)v63 + 1);
        if (v65 != 8)
          break;
        if ((v64 & 0x80) == 0)
        {
          if (!v63[23])
            goto LABEL_95;
          v66 = v64 - 1;
          v67 = "REGISTER";
          do
          {
            v69 = *v63++;
            v68 = v69;
            v70 = *(unsigned __int8 *)v67++;
            v71 = v68 != v70;
          }
          while (v68 == v70 && v66-- != 0);
          goto LABEL_98;
        }
        v71 = memcmp(*(const void **)v63, "REGISTER", *((_QWORD *)v63 + 1)) != 0;
        if (v59)
        {
LABEL_99:
          v73 = (unint64_t *)&v59->__shared_owners_;
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
LABEL_103:
        if (v71)
        {
          v75 = v116;
          v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v116 + 144))(v116);
          v77 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 64);
          if (v76)
          {
            v78 = v77(v57);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 16))(v57, v78);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v78 + 8), (uint64_t)"forcing termination of completed transaction ", 45);
            *(_BYTE *)(v78 + 17) = 0;
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v75 + 160))(v114, v75);
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v78 + 40))(v78, v114);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v78 + 64))(v78, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v78 + 17) = 0;
            if (v115 < 0)
              operator delete(v114[0]);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v75 + 32))(v75, 7);
          }
          else
          {
            v79 = v77(v57);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 16))(v57, v79);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v79 + 8), (uint64_t)"Error out transaction ", 22);
            *(_BYTE *)(v79 + 17) = 0;
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v75 + 160))(v114, v75);
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 40))(v79, v114);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v79 + 64))(v79, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v79 + 17) = 0;
            if (v115 < 0)
              operator delete(v114[0]);
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v75 + 112))(v75, &__p);
          }
        }
        v80 = v117;
        if (v117)
        {
          v81 = (unint64_t *)&v117->__shared_owners_;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        v56 = (_QWORD *)*v56;
        if (!v56)
          goto LABEL_120;
      }
      v71 = 1;
LABEL_98:
      if (v59)
        goto LABEL_99;
      goto LABEL_103;
    }
LABEL_120:
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v118);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v121);
    ImsResult::~ImsResult((ImsResult *)&__p);
    if (v19)
      v83 = v109;
    else
      v83 = 1;
    if ((v83 & 1) != 0)
    {
      v84 = *((_QWORD *)this + 18);
      if (v84)
      {
        v86 = *(_QWORD *)(v84 + 248);
        v85 = *(_QWORD *)(v84 + 256);
        __p.__r_.__value_.__r.__words[0] = v86;
        __p.__r_.__value_.__l.__size_ = v85;
        if (v85)
        {
          v87 = (unint64_t *)(v85 + 8);
          do
            v88 = __ldxr(v87);
          while (__stxr(v88 + 1, v87));
        }
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
        if (v86)
        {
          v89 = *((_QWORD *)this + 18);
          v90 = *(_QWORD *)(v89 + 248);
          v91 = *(_QWORD *)(v89 + 256);
          __p.__r_.__value_.__r.__words[0] = v90;
          __p.__r_.__value_.__l.__size_ = v91;
          if (v91)
          {
            v92 = (unint64_t *)(v91 + 8);
            do
              v93 = __ldxr(v92);
            while (__stxr(v93 + 1, v92));
          }
          *((_QWORD *)this + 541) = 1000 * *(_QWORD *)(v90 + 496);
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
        }
      }
      v94 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v94);
      v95 = (_QWORD **)(v94 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v94 + 8), (uint64_t)"NOT using connectivity hysteresis timer.  Hysteresis from Registration will ", 76);
      *(_BYTE *)(v94 + 17) = 0;
      v96 = (_BYTE *)(v94 + 17);
      if (v109)
        v97 = "be";
      else
        v97 = "NOT be";
      if (v109)
        v98 = 2;
      else
        v98 = 6;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*v95, (uint64_t)v97, v98);
      *v96 = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*v95, (uint64_t)" used.", 6);
      *v96 = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v94 + 64))(v94, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *v96 = 0;
      return;
    }
    v99 = *((_QWORD *)this + 15);
    v100 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (v100)
    {
      p_shared_weak_owners = (unint64_t *)&v100->__shared_weak_owners_;
      do
        v102 = __ldxr(p_shared_weak_owners);
      while (__stxr(v102 + 1, p_shared_weak_owners));
      do
        v103 = __ldxr(p_shared_weak_owners);
      while (__stxr(v103 + 1, p_shared_weak_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "ConnectivityHysteresis");
    if (v100)
    {
      v104 = (unint64_t *)&v100->__shared_weak_owners_;
      do
        v105 = __ldxr(v104);
      while (__stxr(v105 + 1, v104));
    }
    v125 = 0;
    v106 = operator new(0x20uLL);
    *v106 = &off_1E78DFEA8;
    v106[1] = this;
    v106[2] = v99;
    v106[3] = v100;
    v125 = v106;
    SipTimerContainer::startTimer((_QWORD *)this + 338, (uint64_t)&__p, (uint64_t)v124, 1000 * v19, 0);
    v107 = v125;
    if (v125 == v124)
    {
      v108 = 4;
      v107 = v124;
    }
    else
    {
      if (!v125)
      {
LABEL_152:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        gettimeofday((timeval *)&__p, 0);
        *((_QWORD *)this + 541) = 1000 * __p.__r_.__value_.__r.__words[0]
                                + SLODWORD(__p.__r_.__value_.__r.__words[1]) / 1000
                                + 2208988800000;
        if (v100)
        {
          std::__shared_weak_count::__release_weak(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
        return;
      }
      v108 = 5;
    }
    (*(void (**)(void))(*v107 + 8 * v108))();
    goto LABEL_152;
  }
}

void sub_1BF10ABEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _QWORD *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  _QWORD *v41;
  uint64_t v42;

  v41 = *(_QWORD **)(v39 - 104);
  if (v41 == v37)
  {
    v42 = 4;
    v41 = (_QWORD *)(v39 - 128);
  }
  else
  {
    if (!v41)
      goto LABEL_6;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_6:
  if (a16 < 0)
    operator delete(__p);
  if (v38)
  {
    std::__shared_weak_count::__release_weak(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipStack::requiresLimitedAvailability(SipStack *this)
{
  ImsPrefs *v2;
  void **EnableSignalingReductionKey;
  void *v4;

  v2 = (ImsPrefs *)SipStack::prefs(this);
  EnableSignalingReductionKey = (void **)ImsPrefs::getEnableSignalingReductionKey(v2);
  v4 = ImsPrefs::prefWithKey(v2, EnableSignalingReductionKey);
  if (v4)
  {
    if (((*(uint64_t (**)(void *))(*(_QWORD *)v4 + 40))(v4) & 1) == 0)
      return 0;
  }
  else if (!*((_BYTE *)EnableSignalingReductionKey + 57))
  {
    return 0;
  }
  return *((_BYTE *)this + 4080) != 0;
}

void SipStack::internalStartRegistration(SipStack *this, const SipRegistrationConfig *a2)
{
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  void *__p[2];
  char v19;

  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 390);
  *((_BYTE *)this + 4312) = 1;
  v4 = *((_QWORD *)this + 18);
  v5 = *(void **)(v4 + 248);
  v6 = *(std::__shared_weak_count **)(v4 + 256);
  __p[0] = v5;
  __p[1] = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  SipRegistrationClient::registerWithConfig((uint64_t)v5, (uint64_t)a2, (std::string *)"Initial", 0);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if ((*((_BYTE *)a2 + 24) & 1) == 0)
  {
    v11 = *((_QWORD *)this + 17);
    if (ims::AccessNetwork::isLTE((ims::AccessNetwork *)((char *)this + 3136)))
      v12 = "NonVoiceLTE";
    else
      v12 = "NoLTE";
    std::string::basic_string[abi:ne180100]<0>(__p, v12);
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v16, (_QWORD *)this + 15);
    BambiClient::endAllCalls(v11, (uint64_t)__p, &v16);
    v13 = v17;
    if (v17)
    {
      v14 = (unint64_t *)&v17->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v19 < 0)
      operator delete(__p[0]);
  }
}

void sub_1BF10AF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void SipStack::startRegistration(SipStack *this, const SipRegistrationConfig *a2)
{
  BambiDeregisterHandler *v4;
  ImsPrefs *v5;
  void **AllowMultipleAddressesPerProxyKey;
  void *v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  ImsPrefs *v15;
  void *MaxProxyResolveAttemptsKey;
  void *v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v26;
  unint64_t *p_shared_weak_owners;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  SipProxyResolver *v39;
  uint64_t v40;
  _QWORD v41[5];
  void *v42[209];
  uint64_t v43;
  std::__shared_weak_count *v44;
  __int128 v45;
  void *v46[209];
  uint64_t v47;
  std::__shared_weak_count *v48;

  v4 = (BambiDeregisterHandler *)*((_QWORD *)this + 529);
  if (*((_DWORD *)v4 + 46) == 1)
    *((_DWORD *)v4 + 47) = 0;
  else
    BambiDeregisterHandler::stop(v4);
  v5 = (ImsPrefs *)SipStack::prefs(this);
  AllowMultipleAddressesPerProxyKey = (void **)ImsPrefs::getAllowMultipleAddressesPerProxyKey(v5);
  v7 = ImsPrefs::prefWithKey(v5, AllowMultipleAddressesPerProxyKey);
  if (v7)
  {
    if (((*(uint64_t (**)(void *))(*(_QWORD *)v7 + 40))(v7) & 1) == 0)
      goto LABEL_12;
LABEL_8:
    for (i = *(_QWORD *)a2; ; i += 408)
    {
      if (i == *((_QWORD *)a2 + 1))
        goto LABEL_12;
      if (!*(_QWORD *)(i + 48))
        break;
    }
    bzero(v46, 0x688uLL);
    SipRegistrationConfig::SipRegistrationConfig((SipRegistrationConfig *)v46, a2);
    v10 = *((_QWORD *)this + 17);
    v11 = *(_QWORD *)(v10 + 768);
    v12 = *(std::__shared_weak_count **)(v10 + 776);
    v43 = v11;
    v44 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = (ImsPrefs *)SipStack::prefs(this);
    MaxProxyResolveAttemptsKey = ImsPrefs::getMaxProxyResolveAttemptsKey(v15);
    v17 = ImsPrefs::prefWithKey(v15, (void **)MaxProxyResolveAttemptsKey);
    if (v17)
      v18 = (*(uint64_t (**)(void *))(*(_QWORD *)v17 + 56))(v17);
    else
      v18 = *((_DWORD *)MaxProxyResolveAttemptsKey + 15);
    v19 = (std::__shared_weak_count *)operator new(0x1C0uLL);
    v19->__shared_owners_ = 0;
    v20 = (unint64_t *)&v19->__shared_owners_;
    v19->__shared_weak_owners_ = 0;
    v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DFF28;
    v21 = v19 + 1;
    v47 = v11;
    v48 = v12;
    v44 = 0;
    v43 = 0;
    SipProxyResolver::SipProxyResolver((uint64_t)&v19[1], &v47, v18);
    v22 = v48;
    if (v48)
    {
      v23 = (unint64_t *)&v48->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    *(_QWORD *)&v45 = v19 + 1;
    *((_QWORD *)&v45 + 1) = v19;
    shared_weak_owners = (std::__shared_weak_count *)v19[6].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      if (shared_weak_owners->__shared_owners_ != -1)
      {
LABEL_37:
        std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 3120, &v45);
        v33 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
        if (*((_QWORD *)&v45 + 1))
        {
          v34 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        if (v44)
        {
          v36 = &v44->__shared_owners_;
          do
            v37 = __ldaxr((unint64_t *)v36);
          while (__stlxr(v37 - 1, (unint64_t *)v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v38 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20));
        v39 = (SipProxyResolver *)*((_QWORD *)this + 390);
        if (*(_BYTE *)(v38 + 441))
          *((_BYTE *)v39 + 272) = 1;
        v40 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20));
        v41[0] = MEMORY[0x1E0C809B0];
        v41[1] = 1174405120;
        v41[2] = ___ZN8SipStack17startRegistrationERK21SipRegistrationConfig_block_invoke;
        v41[3] = &__block_descriptor_tmp_42;
        v41[4] = this;
        SipRegistrationConfig::SipRegistrationConfig((SipRegistrationConfig *)v42, (const SipRegistrationConfig *)v46);
        SipProxyResolver::resolveProxiesOnInterface(v39, (uint64_t *)a2, v40, 3, v41);
        SipRegistrationConfig::~SipRegistrationConfig(v42);
        SipRegistrationConfig::~SipRegistrationConfig(v46);
        return;
      }
      do
        v26 = __ldxr(v20);
      while (__stxr(v26 + 1, v20));
      p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
      do
        v28 = __ldxr(p_shared_weak_owners);
      while (__stxr(v28 + 1, p_shared_weak_owners));
      v19[6].__shared_owners_ = (uint64_t)v21;
      v19[6].__shared_weak_owners_ = (uint64_t)v19;
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
    else
    {
      do
        v29 = __ldxr(v20);
      while (__stxr(v29 + 1, v20));
      v30 = (unint64_t *)&v19->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v19[6].__shared_owners_ = (uint64_t)v21;
      v19[6].__shared_weak_owners_ = (uint64_t)v19;
    }
    do
      v32 = __ldaxr(v20);
    while (__stlxr(v32 - 1, v20));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    goto LABEL_37;
  }
  if (*((_BYTE *)AllowMultipleAddressesPerProxyKey + 57))
    goto LABEL_8;
LABEL_12:
  v9 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"no proxies need resolving", 25);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  SipStack::internalStartRegistration(this, a2);
}

void sub_1BF10B394(_Unwind_Exception *a1)
{
  void **v1;

  SipRegistrationConfig::~SipRegistrationConfig(v1);
  SipRegistrationConfig::~SipRegistrationConfig((void **)&STACK[0x6D8]);
  _Unwind_Resume(a1);
}

void ___ZN8SipStack17startRegistrationERK21SipRegistrationConfig_block_invoke(uint64_t a1, uint64_t *a2)
{
  SipStack *v4;
  void *v5[209];

  v4 = *(SipStack **)(a1 + 32);
  bzero(v5, 0x688uLL);
  SipRegistrationConfig::SipRegistrationConfig((SipRegistrationConfig *)v5, (const SipRegistrationConfig *)(a1 + 40));
  if (v5 != (void **)a2)
    std::vector<SipUri>::__assign_with_size[abi:ne180100]<SipUri*,SipUri*>((SipUri **)v5, *a2, a2[1], 0xFAFAFAFAFAFAFAFBLL * ((a2[1] - *a2) >> 3));
  SipStack::internalStartRegistration(v4, (const SipRegistrationConfig *)v5);
  SipRegistrationConfig::~SipRegistrationConfig(v5);
}

void sub_1BF10B480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  SipRegistrationConfig::~SipRegistrationConfig((void **)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c27_ZTS21SipRegistrationConfig(uint64_t a1, uint64_t a2)
{
  SipRegistrationConfig::SipRegistrationConfig((SipRegistrationConfig *)(a1 + 40), (const SipRegistrationConfig *)(a2 + 40));
}

void __destroy_helper_block_e8_40c27_ZTS21SipRegistrationConfig(uint64_t a1)
{
  SipRegistrationConfig::~SipRegistrationConfig((void **)(a1 + 40));
}

void SipStack::endRegistration(SipStack *this)
{
  void **v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *__p;
  std::__shared_weak_count *v34;
  char v35;

  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 390);
  v2 = (void **)*((_QWORD *)this + 337);
  if (v2)
  {
    SipStackConfig::~SipStackConfig(v2);
    MEMORY[0x1C3B87100]();
  }
  *((_QWORD *)this + 337) = 0;
  v3 = *((_QWORD *)this + 17);
  if (*((_DWORD *)this + 50) == 3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Deinitializing");
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v31, (_QWORD *)this + 15);
    BambiClient::endAllCalls(v3, (uint64_t)&__p, &v31);
    v4 = v32;
    if (!v32)
      goto LABEL_13;
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Deregistering");
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v29, (_QWORD *)this + 15);
    BambiClient::endAllCalls(v3, (uint64_t)&__p, &v29);
    v4 = v30;
    if (!v30)
      goto LABEL_13;
    v7 = (unint64_t *)&v30->__shared_owners_;
    do
      v6 = __ldaxr(v7);
    while (__stlxr(v6 - 1, v7));
  }
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_13:
  if (v35 < 0)
    operator delete(__p);
  v8 = *((_QWORD *)this + 18);
  v9 = *(void **)(v8 + 192);
  v10 = *(std::__shared_weak_count **)(v8 + 200);
  __p = v9;
  v34 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  SipMessageManager::endAllMessages((SipMessageManager *)v9);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  SipStack::cleanUpLazuliMessagesAndSessions(this);
  v15 = *((_QWORD *)this + 18);
  v16 = *(void **)(v15 + 176);
  v17 = *(std::__shared_weak_count **)(v15 + 184);
  __p = v16;
  v34 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  SipDialogManager::cancelAllSubscriptions((SipDialogManager *)v16);
  if (v17)
  {
    v20 = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v22 = *((_QWORD *)this + 18);
  v23 = *(void **)(v22 + 248);
  v24 = *(std::__shared_weak_count **)(v22 + 256);
  __p = v23;
  v34 = v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  SipRegistrationClient::deregister((SipRegistrationClient *)v23);
  if (v24)
  {
    v27 = (unint64_t *)&v24->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_1BF10B6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void SipStack::handleRegistrationActive(SipStack *this)
{
  uint64_t v2;
  _QWORD v3[2];
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::string v8;

  SipStack::refreshAccessNetwork(this);
  BambiAccessBarring::registrationStateChanged((BambiAccessBarring *)((char *)this + 2904), 1);
  v2 = *((_QWORD *)this + 17);
  if (*((char *)this + 4159) < 0)
    std::string::__init_copy_ctor_external(&v8, *((const std::string::value_type **)this + 517), *((_QWORD *)this + 518));
  else
    v8 = *(std::string *)((char *)this + 4136);
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v3[0] = &off_1E78B7238;
  v3[1] = &_bambiDomain;
  v4 = 0;
  BambiClient::notifyCallsOfRegistrationChange(v2, (uint64_t)&v8, (uint64_t)v3, 0);
  ImsResult::~ImsResult((ImsResult *)v3);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_1BF10B81C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  if (*(char *)(v2 - 25) < 0)
    operator delete(*(void **)(v2 - 48));
  _Unwind_Resume(a1);
}

void SipStack::refreshAccessNetwork(SipStack *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  unint64_t v6;
  ImsPrefs *v7;
  void **AccessNetworkRefreshDelayMillisecondsKey;
  void *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  ImsPrefs *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  std::string v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  void *__p;
  char v30;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 15);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v2)
  {
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  v7 = (ImsPrefs *)SipStack::prefs(this);
  AccessNetworkRefreshDelayMillisecondsKey = (void **)ImsPrefs::getAccessNetworkRefreshDelayMillisecondsKey(v7);
  v9 = ImsPrefs::prefWithKey(v7, AccessNetworkRefreshDelayMillisecondsKey);
  if (!v9)
  {
    if (*((_DWORD *)AccessNetworkRefreshDelayMillisecondsKey + 15))
      goto LABEL_7;
LABEL_13:
    v17 = (_QWORD *)*((_QWORD *)this + 17);
    ims::AccessNetworks::AccessNetworks(&v20, (__int128 *)this + 196);
    BambiClient::notifyCallsOfAccessNetworkChange(v17, (uint64_t)this + 4136, (uint64_t)&v20, 0);
    if (v30 < 0)
      operator delete(__p);
    if (v28 < 0)
      operator delete(v27);
    if (v26 < 0)
      operator delete(v25);
    if (v24 < 0)
      operator delete(v23);
    if (v22 < 0)
      operator delete(v21);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
  if (!(*(unsigned int (**)(void *))(*(_QWORD *)v9 + 56))(v9))
    goto LABEL_13;
LABEL_7:
  if (v2)
  {
    v10 = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = operator new(0x20uLL);
  *v12 = &off_1E78DFF78;
  v12[1] = this;
  v12[2] = v3;
  v12[3] = v2;
  v32 = v12;
  v13 = (ImsPrefs *)SipStack::prefs(this);
  v14 = ImsPrefs::getAccessNetworkRefreshDelayMillisecondsKey(v13);
  v15 = ImsPrefs::prefWithKey(v13, (void **)v14);
  if (v15)
    v16 = (*(uint64_t (**)(void *))(*(_QWORD *)v15 + 56))(v15);
  else
    v16 = *((_DWORD *)v14 + 15);
  SipTimerContainer::startTimer((_QWORD *)this + 338, (uint64_t)&kAccessNetworkRefreshDelayTimer, (uint64_t)v31, v16, 0);
  v18 = v32;
  if (v32 == v31)
  {
    v19 = 4;
    v18 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_31;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_31:
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1BF10BA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  std::__shared_weak_count *v9;

  ims::AccessNetworks::~AccessNetworks(&a9);
  if (v9)
  {
    std::__shared_weak_count::__release_weak(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  _Unwind_Resume(a1);
}

void SipStack::handleRegistrationError(SipStack *this)
{
  ImsPrefs *v2;
  void **ReRegisterOnCellularHandoverKey;
  void *v4;
  ImsPrefs *v5;
  void **RequireRegistrationOnEPSFallbackKey;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD v11[2];
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  std::string v16;

  if (!*((_BYTE *)this + 3685) || !SipStack::registered(this))
    goto LABEL_13;
  v2 = (ImsPrefs *)SipStack::prefs(this);
  ReRegisterOnCellularHandoverKey = (void **)ImsPrefs::getReRegisterOnCellularHandoverKey(v2);
  v4 = ImsPrefs::prefWithKey(v2, ReRegisterOnCellularHandoverKey);
  if (v4)
  {
    if (((*(uint64_t (**)(void *))(*(_QWORD *)v4 + 40))(v4) & 1) == 0)
      goto LABEL_13;
  }
  else if (!*((_BYTE *)ReRegisterOnCellularHandoverKey + 57))
  {
    goto LABEL_13;
  }
  v5 = (ImsPrefs *)SipStack::prefs(this);
  RequireRegistrationOnEPSFallbackKey = (void **)ImsPrefs::getRequireRegistrationOnEPSFallbackKey(v5);
  v7 = ImsPrefs::prefWithKey(v5, RequireRegistrationOnEPSFallbackKey);
  if (v7)
  {
    if (((*(uint64_t (**)(void *))(*(_QWORD *)v7 + 40))(v7) & 1) == 0)
      goto LABEL_13;
  }
  else if (!*((_BYTE *)RequireRegistrationOnEPSFallbackKey + 57))
  {
    goto LABEL_13;
  }
  if (ims::AccessNetwork::isLTE((ims::AccessNetwork *)((char *)this + 3136)))
  {
    v8 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Pending calls will be dropped due to registration error!", 56);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    v9 = 1;
    goto LABEL_14;
  }
LABEL_13:
  v9 = 0;
LABEL_14:
  v10 = *((_QWORD *)this + 17);
  if (*((char *)this + 4159) < 0)
    std::string::__init_copy_ctor_external(&v16, *((const std::string::value_type **)this + 517), *((_QWORD *)this + 518));
  else
    v16 = *(std::string *)((char *)this + 4136);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v11[0] = &off_1E78B7238;
  v11[1] = &_bambiDomain;
  v12 = 0x40000000;
  BambiClient::notifyCallsOfRegistrationChange(v10, (uint64_t)&v16, (uint64_t)v11, v9);
  ImsResult::~ImsResult((ImsResult *)v11);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1BF10BCA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  if (*(char *)(v2 - 41) < 0)
    operator delete(*(void **)(v2 - 64));
  _Unwind_Resume(a1);
}

void SipStack::handleRegistrationTerminated(SipStack *this)
{
  char *v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  std::string v13;
  _QWORD v14[5];

  v2 = (char *)this + 4159;
  BambiAccessBarring::registrationStateChanged((BambiAccessBarring *)((char *)this + 2904), 0);
  BambiDeregisterHandler::stop(*((BambiDeregisterHandler **)this + 529));
  SipTimerContainer::cancelAllTimers((SipTimerContainer *)((char *)this + 2704));
  v3 = v2[105];
  v2[105] = 0;
  v2[153] = 1;
  if (*((_DWORD *)this + 50) == 3)
  {
    v4 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
    v5 = *(_QWORD **)(v4 + 8);
    if (v3)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"registration terminated. Continuing to deinitialize.", 52);
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v6 = MEMORY[0x1E0C809B0];
      *(_BYTE *)(v4 + 17) = 0;
      v14[0] = v6;
      v14[1] = 0x40000000;
      v14[2] = ___ZN8SipStack28handleRegistrationTerminatedEv_block_invoke;
      v14[3] = &__block_descriptor_tmp_61_4;
      v14[4] = this;
      ims::performBlock((IMSClientManager *)v14);
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"registration terminated, but I wasn't waiting for deregistration", 64);
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v4 + 17) = 0;
    }
  }
  v7 = *((_QWORD *)this + 17);
  if (*v2 < 0)
    std::string::__init_copy_ctor_external(&v13, *((const std::string::value_type **)this + 517), *((_QWORD *)this + 518));
  else
    v13 = *(std::string *)((char *)this + 4136);
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v8[0] = &off_1E78B7238;
  v8[1] = &_bambiDomain;
  v9 = 1073741839;
  BambiClient::notifyCallsOfRegistrationChange(v7, (uint64_t)&v13, (uint64_t)v8, 0);
  ImsResult::~ImsResult((ImsResult *)v8);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_1BF10BE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  ImsResult::~ImsResult((ImsResult *)&a10);
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void ___ZN8SipStack28handleRegistrationTerminatedEv_block_invoke(uint64_t a1)
{
  SipStack::internalDeinitialize(*(SipStack **)(a1 + 32), 1);
}

void SipStack::updateRegisteredServices(uint64_t a1, int a2, int a3, std::string *a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  std::string::size_type v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::string __p;

  if ((SipStack::configuredServices((SipStack *)a1) != a2
     || SipStack::allRegisteredServices((SipStack *)a1) != a2)
    && !*(_BYTE *)(a1 + 4208))
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"IMS services changed during limited connectivity mode, exiting...", 65);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    *(_BYTE *)(a1 + 4208) = 1;
    v15 = *(_QWORD *)(a1 + 144);
    v16 = *(_QWORD *)(v15 + 248);
    v17 = *(std::__shared_weak_count **)(v15 + 256);
    __p.__r_.__value_.__r.__words[0] = v16;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    (*(void (**)(std::string::size_type, uint64_t, uint64_t))(*(_QWORD *)v16 + 264))(v16, 1, 1);
    if (v17)
    {
      v20 = (unint64_t *)&v17->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "ConnectivityHysteresis");
    SipTimerContainer::cancelTimer((SipTimerContainer *)(a1 + 2704), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v22);
  v23 = *(_QWORD **)(v22 + 8);
  if (a2)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"reason for updateRegisteredServices: ", 37);
    *(_BYTE *)(v22 + 17) = 0;
    LoggableString::LoggableString(&__p, a4);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v22 + 40))(v22, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v22 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v24 = *(unsigned __int8 *)(a5 + 23);
    if ((v24 & 0x80u) != 0)
      v24 = *(_QWORD *)(a5 + 8);
    if (v24)
      std::string::operator=((std::string *)(a1 + 4088), (const std::string *)a5);
    v25 = *(unsigned __int8 *)(a6 + 23);
    if ((v25 & 0x80u) != 0)
      v25 = *(_QWORD *)(a6 + 8);
    if (v25)
      std::string::operator=((std::string *)(a1 + 4112), (const std::string *)a6);
    std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)(a1 + 3120));
    BambiDeregisterHandler::handleUpdateRegistration(*(BambiDeregisterHandler **)(a1 + 4232));
    v26 = *(_QWORD *)(a1 + 144);
    v27 = *(_QWORD *)(v26 + 248);
    v28 = *(std::__shared_weak_count **)(v26 + 256);
    __p.__r_.__value_.__r.__words[0] = v27;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v28;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    SipRegistrationClient::updateServiceMask(v27, a2, a3, a4, a7);
    if (!v28)
      goto LABEL_32;
    v31 = (unint64_t *)&v28->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      if ((a2 & 1) != 0)
        return;
    }
    else
    {
LABEL_32:
      if ((a2 & 1) != 0)
        return;
    }
    v33 = *(_QWORD *)(a1 + 136);
    if (ims::AccessNetwork::isLTE((ims::AccessNetwork *)(a1 + 3136)))
      v34 = "NonVoiceLTE";
    else
      v34 = "NoLTE";
    std::string::basic_string[abi:ne180100]<0>(&__p, v34);
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v38, (_QWORD *)(a1 + 120));
    BambiClient::endAllCalls(v33, (uint64_t)&__p, &v38);
    v35 = v39;
    if (v39)
    {
      v36 = (unint64_t *)&v39->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"services revoked, deregistering", 31);
    *(_BYTE *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v22 + 17) = 0;
    BambiDeregisterHandler::handleEndRegistration(*(BambiDeregisterHandler **)(a1 + 4232), 0);
    SipStack::cleanUpLazuliMessagesAndSessions((SipStack *)a1);
  }
}

void sub_1BF10C284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t SipStack::configuredServices(SipStack *this)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *((_QWORD *)this + 18);
  v2 = *(_QWORD *)(v1 + 248);
  v3 = *(std::__shared_weak_count **)(v1 + 256);
  if (!v3)
    return *(unsigned int *)(v2 + 1136);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  v6 = *(unsigned int *)(v2 + 1136);
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v6;
}

uint64_t SipStack::allRegisteredServices(SipStack *this)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *((_QWORD *)this + 18);
  v2 = *(_QWORD *)(v1 + 248);
  v3 = *(std::__shared_weak_count **)(v1 + 256);
  if (!v3)
    return *(unsigned int *)(v2 + 1104);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  v6 = *(unsigned int *)(v2 + 1104);
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v6;
}

void SipStack::handleSRVCCRequested(SipStack *this)
{
  uint64_t v1;
  ImsPrefs *v2;
  void **SRVCCCleanupTimeoutSecondsKey;
  void *v4;
  int v5;

  v1 = *((_QWORD *)this + 529);
  v2 = (ImsPrefs *)SipStack::prefs(this);
  SRVCCCleanupTimeoutSecondsKey = (void **)ImsPrefs::getSRVCCCleanupTimeoutSecondsKey(v2);
  v4 = ImsPrefs::prefWithKey(v2, SRVCCCleanupTimeoutSecondsKey);
  if (v4)
    v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 56))(v4);
  else
    v5 = *((_DWORD *)SRVCCCleanupTimeoutSecondsKey + 15);
  BambiDeregisterHandler::start(v1, 1, 1000 * v5);
}

void SipStack::handleFallbackRequested(SipStack *this)
{
  uint64_t v1;
  ImsPrefs *v2;
  void **CSFBDeregisterTimeoutSecondsKey;
  void *v4;
  int v5;

  v1 = *((_QWORD *)this + 529);
  v2 = (ImsPrefs *)SipStack::prefs(this);
  CSFBDeregisterTimeoutSecondsKey = (void **)ImsPrefs::getCSFBDeregisterTimeoutSecondsKey(v2);
  v4 = ImsPrefs::prefWithKey(v2, CSFBDeregisterTimeoutSecondsKey);
  if (v4)
    v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 56))(v4);
  else
    v5 = *((_DWORD *)CSFBDeregisterTimeoutSecondsKey + 15);
  BambiDeregisterHandler::start(v1, 2, 1000 * v5);
}

void SipStack::initiateEmergencyRedial(SipStack *this)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  if (*((_BYTE *)this + 176))
  {
    v1 = *((_QWORD *)this + 18);
    v2 = *(_QWORD *)(v1 + 248);
    v3 = *(std::__shared_weak_count **)(v1 + 256);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, 20, -1, 0);
    if (v3)
    {
      v6 = (unint64_t *)&v3->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void sub_1BF10C51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipStack::registeredForVoice(SipStack *this)
{
  uint64_t v1;
  _DWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  unint64_t v9;

  v1 = *((_QWORD *)this + 18);
  v2 = *(_DWORD **)(v1 + 248);
  v3 = *(std::__shared_weak_count **)(v1 + 256);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = v2[276];
    v7 = v2[284];
    v8 = v2[132];
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    v6 = v2[276];
    v7 = v2[284];
    v8 = v2[132];
  }
  return (v8 == 2) & v6 & v7;
}

uint64_t SipStack::registeredForSms(SipStack *this)
{
  uint64_t v1;
  _DWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  unint64_t v9;

  v1 = *((_QWORD *)this + 18);
  v2 = *(_DWORD **)(v1 + 248);
  v3 = *(std::__shared_weak_count **)(v1 + 256);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = v2[276];
    v7 = v2[284];
    v8 = v2[132];
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    v6 = v2[276];
    v7 = v2[284];
    v8 = v2[132];
  }
  if (v8 == 2)
    return ((v6 & v7) >> 2) & 1;
  else
    return 0;
}

BOOL SipStack::isRegistrationLimitedAccess(SipStack *this)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  int *v12;

  v1 = *((_QWORD *)this + 18);
  v2 = *(_QWORD *)(v1 + 248);
  v3 = *(std::__shared_weak_count **)(v1 + 256);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(v2 + 3632);
    if (v6)
      v7 = (int *)(v6 + 424);
    else
      v7 = &SipRegistrationMode::kModeNormal;
    v8 = *v7;
    v9 = SipRegistrationMode::kModeLimitedAccess;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    v11 = *(_QWORD *)(v2 + 3632);
    if (v11)
      v12 = (int *)(v11 + 424);
    else
      v12 = &SipRegistrationMode::kModeNormal;
    v8 = *v12;
    v9 = SipRegistrationMode::kModeLimitedAccess;
  }
  return v8 == v9;
}

uint64_t SipStack::isMultisimEnabled(SipStack *this)
{
  uint64_t result;
  SipStack **v2;
  SipStack **v3;
  int v4;
  SipStack **v5;
  SipStack **v6;
  uint64_t v7;
  SipStack ***v8;

  result = *((_QWORD *)this + 17);
  if (result)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    BambiClient::sipStacks((BambiClient *)result, (uint64_t *)&v5);
    v2 = v5;
    v3 = v6;
    if (v5 != v6)
    {
      v4 = 0;
      do
      {
        if (*v2 && SipStack::registered(*v2))
        {
          if (v4)
          {
            v8 = &v5;
            std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
            return 1;
          }
          v4 = 1;
        }
        v2 += 2;
      }
      while (v2 != v3);
    }
    v8 = &v5;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
    return 0;
  }
  return result;
}

void sub_1BF10C7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void SipStack::registrationDomain(SipStack *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  SipRegistrationClient *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *((_QWORD *)this + 18);
  v3 = *(SipRegistrationClient **)(v2 + 248);
  v4 = *(std::__shared_weak_count **)(v2 + 256);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  SipRegistrationClient::registrationDomain(v3, a2);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF10C864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipStack::phoneContext(SipStack *this@<X0>, std::string *a2@<X8>)
{
  if (*((_BYTE *)this + 2616))
    SipUserAgent::publicDomain(*((SipUserAgent **)this + 18), (uint64_t)a2);
  else
    SipStack::registrationDomain(this, a2);
}

void SipStack::makeCanonicalUri(SipStack *this@<X0>, const SipUri *a2@<X1>, uint64_t a3@<X8>)
{
  ImsPrefs *v5;
  void **AllowPhoneContextInEmergencyUriKey;
  void *v7;
  std::string __p;

  *(_QWORD *)(a3 + 400) = 0;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  SipUri::SipUri((SipUri *)a3, a2);
  memset(&__p, 0, sizeof(__p));
  SipStack::phoneContext(this, &__p);
  SipUri::makeCanonical((SipUri *)a3);
  if (*((_BYTE *)this + 176))
  {
    v5 = (ImsPrefs *)SipStack::prefs(this);
    AllowPhoneContextInEmergencyUriKey = (void **)ImsPrefs::getAllowPhoneContextInEmergencyUriKey(v5);
    v7 = ImsPrefs::prefWithKey(v5, AllowPhoneContextInEmergencyUriKey);
    if (v7)
    {
      if (!(*(unsigned int (**)(void *))(*(_QWORD *)v7 + 40))(v7))
        goto LABEL_9;
    }
    else if (!*((_BYTE *)AllowPhoneContextInEmergencyUriKey + 57))
    {
      goto LABEL_9;
    }
  }
  if (*(_BYTE *)(SipUserAgent::config(*((SipUserAgent **)this + 18)) + 610)
    || SipUri::needsPhoneContext((SipUri *)a3))
  {
    SipUri::setPhoneContext((uint64_t **)a3, (uint64_t)&__p);
  }
LABEL_9:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF10C99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  SipUri *v15;

  SipUri::~SipUri(v15);
  _Unwind_Resume(a1);
}

void SipStack::makeOutgoingSipUri(SipStack *a1@<X0>, std::string *a2@<X1>, SipUri *a3@<X2>, uint64_t a4@<X8>)
{
  _OWORD v7[25];
  uint64_t v8;

  v8 = 0;
  memset(v7, 0, sizeof(v7));
  SipUri::SipUri((uint64_t)v7, a2);
  SipStack::makeOutgoingSipUri(a1, (const SipUri *)v7, a3, a4);
  SipUri::~SipUri((SipUri *)v7);
}

void sub_1BF10CA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  SipUri::~SipUri((SipUri *)&a9);
  _Unwind_Resume(a1);
}

void SipStack::makeOutgoingSipUri(SipStack *this@<X0>, const SipUri *a2@<X1>, SipUri *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::size_type size;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const ImsResult *v12;
  const ImsResult *v13;
  std::string v14;
  void *__p;
  uint64_t *v16;
  int v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  if (SipUri::isSipUri(a2))
  {
    SipUri::operator=(a3, (uint64_t)a2);
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0;
  }
  else if (SipUri::isTelUri(a2))
  {
    memset(&v14, 0, sizeof(v14));
    SipUserAgent::publicDomain(*((SipUserAgent **)this + 18), (uint64_t)&v14);
    size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v14.__r_.__value_.__l.__size_;
    if (size)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      SipUri::setUser((uint64_t)a3, (const std::string *)((char *)a2 + 176), (uint64_t)&__p);
      if (v18 < 0)
        operator delete(__p);
      SipHost::SipHost((uint64_t)&__p, &v14);
      (*(void (**)(SipUri *, void **))(*(_QWORD *)a3 + 32))(a3, &__p);
      SipHost::~SipHost(&__p);
      SipUri::makeCanonical(a3);
      v9 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"makeOutGoingSipUri: in = ", 25);
      *(_BYTE *)(v9 + 17) = 0;
      (*(void (**)(const SipUri *, uint64_t))(*(_QWORD *)a2 + 40))(a2, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)", out = ", 8);
      *(_BYTE *)(v9 + 17) = 0;
      (*(void (**)(SipUri *, uint64_t))(*(_QWORD *)a3 + 40))(a3, v9);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v9 + 17) = 0;
      *(_OWORD *)(a4 + 24) = 0u;
      *(_OWORD *)(a4 + 40) = 0u;
      *(_OWORD *)(a4 + 56) = 0u;
      *(_QWORD *)a4 = &off_1E78B7238;
      *(_QWORD *)(a4 + 8) = &_bambiDomain;
      *(_DWORD *)(a4 + 16) = 0;
    }
    else
    {
      v19 = 0u;
      v20 = 0u;
      v21 = 0u;
      __p = &off_1E78B7238;
      v16 = &_bambiDomain;
      v17 = 0x40000000;
      v13 = (const ImsResult *)ImsResult::operator<<<char [46]>((uint64_t)&__p, "no public domain available to build a sip URI");
      ImsResult::ImsResult((ImsResult *)a4, v13);
      ImsResult::~ImsResult((ImsResult *)&__p);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  else
  {
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    __p = &off_1E78B7238;
    v16 = &_bambiDomain;
    v17 = 1073741825;
    v10 = ImsResult::operator<<<char [12]>((uint64_t)&__p, "can't make ");
    v11 = ImsResult::operator<<<std::string>(v10, (uint64_t)a2 + 104);
    v12 = (const ImsResult *)ImsResult::operator<<<char [20]>(v11, " URIs into sip URIs");
    ImsResult::ImsResult((ImsResult *)a4, v12);
    ImsResult::~ImsResult((ImsResult *)&__p);
  }
}

void sub_1BF10CD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  SipHost::~SipHost(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void SipStack::makeOutgoingSipUriForPull(_QWORD *a1@<X0>, uint64_t a2@<X1>, SipUri *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  std::string::size_type v8;
  void **v9;
  void **v10;
  const std::string *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _BOOL4 v16;
  uint64_t v17;
  const std::string *v18;
  std::string __p;
  void *v20[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  std::string v46;
  void *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v5 = *(_QWORD *)(a1[18] + 264);
  if (!v5)
    goto LABEL_30;
  if (*(char *)(a2 + 23) < 0)
  {
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, v8);
LABEL_7:
      v9 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v5 + 152, (void **)&__p.__r_.__value_.__l.__data_);
      v10 = (void **)(v5 + 160);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v10 == v9 || !*((_BYTE *)v9 + 648))
        goto LABEL_30;
      v11 = (const std::string *)(v9 + 65);
      SipDialogParticipantInfo::uri(v11, (std::string *)v20);
      if ((SBYTE7(v21) & 0x80u) == 0)
        v12 = (void *)BYTE7(v21);
      else
        v12 = v20[1];
      if (SBYTE7(v21) < 0)
      {
        operator delete(v20[0]);
        if (!v12)
        {
LABEL_30:
          *(_OWORD *)(a4 + 24) = 0u;
          *(_OWORD *)(a4 + 40) = 0u;
          *(_OWORD *)(a4 + 56) = 0u;
          *(_QWORD *)a4 = &off_1E78B7238;
          *(_QWORD *)(a4 + 8) = &_bambiDomain;
          *(_DWORD *)(a4 + 16) = 1073741836;
          return;
        }
      }
      else if (!v12)
      {
        goto LABEL_30;
      }
      v45 = 0;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      *(_OWORD *)v20 = 0u;
      SipDialogParticipantInfo::uri(v11, &v46);
      SipUri::SipUri((uint64_t)v20, &v46);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      SipUri::operator=(a3, (uint64_t)v20);
      *(_OWORD *)(a4 + 24) = 0u;
      *(_OWORD *)(a4 + 40) = 0u;
      *(_OWORD *)(a4 + 56) = 0u;
      *(_QWORD *)a4 = &off_1E78B7238;
      *(_QWORD *)(a4 + 8) = &_bambiDomain;
      *(_DWORD *)(a4 + 16) = 0;
      SipUri::~SipUri((SipUri *)v20);
      return;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    __p = *(std::string *)a2;
    goto LABEL_7;
  }
  v49 = 0;
  v50 = 0;
  v51 = 0;
  SipDialogTable::getAllDialogs((_QWORD *)(v5 + 152), (uint64_t)&v49);
  v13 = v49;
  v14 = v50;
  while (1)
  {
    if (v13 == v14)
    {
      v20[0] = &v49;
      std::vector<SipDialogInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
      goto LABEL_30;
    }
    if (*(_BYTE *)(v13 + 592))
      break;
LABEL_26:
    v13 += 600;
  }
  SipDialogParticipantInfo::uri((const std::string *)(v13 + 464), (std::string *)v20);
  v15 = (void *)BYTE7(v21);
  if (SBYTE7(v21) < 0)
    v15 = v20[1];
  if (v15)
  {
    v16 = *(_DWORD *)(v13 + 136) == 4;
    if ((SBYTE7(v21) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
  v16 = 0;
  if (SBYTE7(v21) < 0)
LABEL_24:
    operator delete(v20[0]);
LABEL_25:
  if (!v16)
    goto LABEL_26;
  v17 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Using first found active Thumper call: ", 39);
  *(_BYTE *)(v17 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)v20, (const std::string *)(v13 + 24));
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v17 + 56))(v17, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)" [", 2);
  *(_BYTE *)(v17 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&v46, (const std::string *)v13);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v17 + 56))(v17, &v46);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v17 + 17) = 0;
  if (v48 < 0)
    operator delete(v47);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  v18 = (const std::string *)(v13 + 464);
  if (SHIBYTE(v22) < 0)
    operator delete(*((void **)&v21 + 1));
  if (SBYTE7(v21) < 0)
    operator delete(v20[0]);
  v45 = 0;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  *(_OWORD *)v20 = 0u;
  SipDialogParticipantInfo::uri(v18, &v46);
  SipUri::SipUri((uint64_t)v20, &v46);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  SipUri::operator=(a3, (uint64_t)v20);
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_QWORD *)a4 = &off_1E78B7238;
  *(_QWORD *)(a4 + 8) = &_bambiDomain;
  *(_DWORD *)(a4 + 16) = 0;
  SipUri::~SipUri((SipUri *)v20);
  v20[0] = &v49;
  std::vector<SipDialogInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
}

void sub_1BF10D1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  uint64_t v13;

  SipUri::~SipUri((SipUri *)&a13);
  a13 = (void **)(v13 - 88);
  std::vector<SipDialogInfo>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void SipStack::activeThumperPullCallId(SipStack *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  __int128 *v5;
  __int128 *v6;
  std::string::size_type size;
  _BOOL4 v8;
  uint64_t v9;
  __int128 v10;
  void *v11[2];
  char v12;
  void *v13;
  char v14;
  std::string __p;
  void *v16;
  char v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t v20;

  v3 = *(_QWORD *)(*((_QWORD *)this + 18) + 264);
  if (!v3)
  {
LABEL_15:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  v18 = 0;
  v19 = 0;
  v20 = 0;
  SipDialogTable::getAllDialogs((_QWORD *)(v3 + 152), (uint64_t)&v18);
  v5 = v18;
  v6 = v19;
  while (1)
  {
    if (v5 == v6)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
      std::vector<SipDialogInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      goto LABEL_15;
    }
    if (*((_BYTE *)v5 + 592))
      break;
LABEL_11:
    v5 = (__int128 *)((char *)v5 + 600);
  }
  SipDialogParticipantInfo::uri((const std::string *)(v5 + 29), &__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    v8 = *((_DWORD *)v5 + 34) == 4;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  v8 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_10:
  if (!v8)
    goto LABEL_11;
  v9 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Using first found active Thumper call: ", 39);
  *(_BYTE *)(v9 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&__p, (const std::string *)v5 + 1);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v9 + 56))(v9, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" [", 2);
  *(_BYTE *)(v9 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)v11, (const std::string *)v5);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v9 + 56))(v9, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v17 < 0)
    operator delete(v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*((char *)v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v10 = *v5;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v10;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<SipDialogInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1BF10D474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  uint64_t v16;

  ims::AccessNetwork::~AccessNetwork(&a16);
  a16 = (void *)(v16 - 72);
  std::vector<SipDialogInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipStack::loggableName(SipStack *this@<X0>, std::string *a2@<X8>)
{
  SipStack::loggableName((SipStack *)((char *)this - 104), a2);
}

uint64_t SipStack::setMediaInitialized(SipStack *this, int a2)
{
  _BYTE *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  const ImsResult *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[2];
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD v18[2];
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  if (*((_DWORD *)this + 50) != 1)
  {
    v7 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"setMediaInitialized called when we are in state: ", 49);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    return result;
  }
  v4 = (char *)this + 4313;
  SipTimerContainer::cancelTimer((SipTimerContainer *)((char *)this + 2704), (std::string *)"MediaInitTimer");
  if (a2)
    v5 = 2;
  else
    v5 = 0;
  *((_DWORD *)this + 50) = v5;
  *v4 = 0;
  if (a2)
  {
    v6 = *((_QWORD *)this + 356);
    if (v6)
    {
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v23, (_QWORD *)this + 15);
      v20 = 0u;
      v21 = 0u;
      v22 = 0u;
      v18[0] = &off_1E78B7238;
      v18[1] = &_bambiDomain;
      v19 = 0;
LABEL_11:
      (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v6 + 16))(v6, &v23, v18);
      ImsResult::~ImsResult((ImsResult *)v18);
      if ((a2 & 1) == 0)
        ImsResult::~ImsResult((ImsResult *)v13);
      v10 = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
  else
  {
    *((_BYTE *)this + 4314) = 0;
    v6 = *((_QWORD *)this + 356);
    if (v6)
    {
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v23, (_QWORD *)this + 15);
      v15 = 0u;
      v16 = 0u;
      v17 = 0u;
      v13[0] = &off_1E78B7238;
      v13[1] = &_bambiDomain;
      v14 = 0x40000000;
      v9 = (const ImsResult *)ImsResult::operator<<<char [18]>((uint64_t)v13, "media init failed");
      ImsResult::ImsResult((ImsResult *)v18, v9);
      goto LABEL_11;
    }
  }
  return ImsPowerAssertion::deinitialize((uint64_t)this + 2856);
}

void sub_1BF10D6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  char v18;
  uint64_t v19;

  ImsResult::~ImsResult((ImsResult *)&a18);
  if ((v18 & 1) == 0)
    ImsResult::~ImsResult((ImsResult *)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v19 - 48);
  _Unwind_Resume(a1);
}

void SipStack::handleCallEvent(SipStack *this, BambiCallEvent *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (!v2)
    return;
  v5 = *((_QWORD *)a2 + 2);
  p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  v8 = std::__shared_weak_count::lock(v2);
  if (!v8)
  {
    v9 = v2;
LABEL_14:
    std::__shared_weak_count::__release_weak(v9);
    return;
  }
  v9 = v8;
  std::__shared_weak_count::__release_weak(v2);
  if (v5 && *(_QWORD *)(v5 + 512))
    BambiEmergencyCallHandler::handleCallEvent(*((BambiEmergencyCallHandler **)this + 527), a2);
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    goto LABEL_14;
  }
}

void sub_1BF10D7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipStack::sendMessage(uint64_t a1, const SipUri *a2, uint64_t a3, uint64_t a4, const std::string *a5, const ims::LocationInfo *a6)
{
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  double v29[8];
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  void *__p;
  char v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  _OWORD v39[25];
  uint64_t v40;
  _QWORD v41[2];
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  if ((SipStack::registeredForSms((SipStack *)a1) & 1) != 0)
  {
    v40 = 0;
    memset(v39, 0, sizeof(v39));
    SipStack::makeCanonicalUri((SipStack *)a1, a2, (uint64_t)v39);
    v12 = *(_QWORD *)(a1 + 144);
    v14 = *(_QWORD *)(v12 + 192);
    v13 = *(std::__shared_weak_count **)(v12 + 200);
    v37 = v14;
    v38 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    ims::LocationInfo::LocationInfo((ims::LocationInfo *)v29, a6);
    v17 = SipMessageManager::send(v14, (uint64_t)v39, a3, a4, a5, v29);
    if (v36 < 0)
      operator delete(__p);
    if (v34 < 0)
      operator delete(v33);
    if (v32 < 0)
      operator delete(v31);
    if (v30 < 0)
      operator delete(*(void **)&v29[6]);
    if (v13)
    {
      v18 = (unint64_t *)&v13->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    SipUri::~SipUri((SipUri *)v39);
  }
  else
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"not registered for SMS", 22);
    *(_BYTE *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v20 + 17) = 0;
    v21 = *(_QWORD *)(a1 + 144);
    v22 = *(_QWORD *)(v21 + 192);
    v23 = *(std::__shared_weak_count **)(v21 + 200);
    *(_QWORD *)&v39[0] = v22;
    *((_QWORD *)&v39[0] + 1) = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v41[0] = &off_1E78B7238;
    v41[1] = &_bambiDomain;
    v42 = 1073741826;
    SipMessageManager::deferError(v22, 0, (const ImsResult *)v41);
    ImsResult::~ImsResult((ImsResult *)v41);
    if (v23)
    {
      v26 = (unint64_t *)&v23->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    return 0;
  }
  return v17;
}

void sub_1BF10DA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  ImsResult::~ImsResult((ImsResult *)(v29 - 136));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t SipStack::sendLazuli(SipStack *this, const LazuliSendParams *a2, const SipUri *a3)
{
  uint64_t v6;
  uint64_t v7;
  SipLazuliManager *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v16[25];
  uint64_t v17;

  v6 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"SipStack::sendLazuli ", 21);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  SipStack::makeCanonicalUri(this, a3, (uint64_t)v16);
  v7 = *((_QWORD *)this + 18);
  v8 = *(SipLazuliManager **)(v7 + 208);
  v9 = *(std::__shared_weak_count **)(v7 + 216);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = SipLazuliManager::send(v8, a2, (const SipUri *)v16);
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  SipUri::~SipUri((SipUri *)v16);
  return v12;
}

void sub_1BF10DBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  SipUri::~SipUri((SipUri *)&a11);
  _Unwind_Resume(a1);
}

uint64_t SipStack::addLazuliParticipant(SipStack *this, std::string *a2, const SipUri *a3)
{
  uint64_t v6;
  uint64_t v7;
  SipLazuliManager *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v16[25];
  uint64_t v17;

  v6 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"SipStack::addLazuliParticipant ", 31);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  SipStack::makeCanonicalUri(this, a3, (uint64_t)v16);
  v7 = *((_QWORD *)this + 18);
  v8 = *(SipLazuliManager **)(v7 + 208);
  v9 = *(std::__shared_weak_count **)(v7 + 216);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = SipLazuliManager::addGroupParticipant(v8, a2, (const SipUri *)v16);
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  SipUri::~SipUri((SipUri *)v16);
  return v12;
}

void sub_1BF10DD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  SipUri::~SipUri((SipUri *)&a11);
  _Unwind_Resume(a1);
}

uint64_t SipStack::removeLazuliParticipant(SipStack *this, std::string *a2, const SipUri *a3)
{
  uint64_t v6;
  uint64_t v7;
  SipLazuliManager *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v16[25];
  uint64_t v17;

  v6 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"SipStack::removeLazuliParticipant ", 34);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  SipStack::makeCanonicalUri(this, a3, (uint64_t)v16);
  v7 = *((_QWORD *)this + 18);
  v8 = *(SipLazuliManager **)(v7 + 208);
  v9 = *(std::__shared_weak_count **)(v7 + 216);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = SipLazuliManager::removeGroupParticipant(v8, a2, (const SipUri *)v16);
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  SipUri::~SipUri((SipUri *)v16);
  return v12;
}

void sub_1BF10DEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  SipUri::~SipUri((SipUri *)&a11);
  _Unwind_Resume(a1);
}

uint64_t SipStack::changeLazuliGroupInfo(SipStack *this, const LazuliSendParams *a2, const SipUri *a3)
{
  uint64_t v6;
  uint64_t v7;
  SipLazuliManager *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v16[25];
  uint64_t v17;

  v6 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"SipStack::changeLazuliGroupInfo ", 32);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  SipStack::makeCanonicalUri(this, a3, (uint64_t)v16);
  v7 = *((_QWORD *)this + 18);
  v8 = *(SipLazuliManager **)(v7 + 208);
  v9 = *(std::__shared_weak_count **)(v7 + 216);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = SipLazuliManager::changeGroupInfo(v8, a2, (const SipUri *)v16);
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  SipUri::~SipUri((SipUri *)v16);
  return v12;
}

void sub_1BF10E02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  SipUri::~SipUri((SipUri *)&a11);
  _Unwind_Resume(a1);
}

uint64_t SipStack::reportLazuliChatbotSpam(uint64_t a1, uint64_t a2, const SipUri *a3, uint64_t a4, xpc_object_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _OWORD v24[25];
  uint64_t v25;

  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"SipStack::reportLazuliChatbotSpam", 33);
  *(_BYTE *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v14 + 17) = 0;
  v25 = 0;
  memset(v24, 0, sizeof(v24));
  SipStack::makeCanonicalUri((SipStack *)a1, a3, (uint64_t)v24);
  v15 = *(_QWORD *)(a1 + 144);
  v16 = *(_QWORD *)(v15 + 208);
  v17 = *(std::__shared_weak_count **)(v15 + 216);
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v20 = SipLazuliManager::reportChatbotSpam(v16, a2, (uint64_t)v24, a4, a5, a6, a7);
  if (v17)
  {
    v21 = (unint64_t *)&v17->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  SipUri::~SipUri((SipUri *)v24);
  return v20;
}

void sub_1BF10E1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  SipUri::~SipUri((SipUri *)&a11);
  _Unwind_Resume(a1);
}

uint64_t SipStack::sendOptionsRequest(uint64_t a1, const std::string *a2, const SipUri *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  char v31[8];
  uint64_t v32;
  unsigned int v33;
  _OWORD v34[25];
  uint64_t v35;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"SipStack::sendOptionsRequest ", 29);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  v35 = 0;
  memset(v34, 0, sizeof(v34));
  SipStack::makeCanonicalUri((SipStack *)a1, a3, (uint64_t)v34);
  v7 = *(_QWORD **)(a1 + 144);
  v8 = v7[29];
  v9 = (std::__shared_weak_count *)v7[30];
  v29 = v8;
  v30 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v7 = *(_QWORD **)(a1 + 144);
  }
  v12 = v7[26];
  v13 = (std::__shared_weak_count *)v7[27];
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    if (v12)
      v16 = v12 + 8;
    else
      v16 = 0;
    v27 = v16;
    v28 = v13;
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
  }
  else
  {
    if (v12)
      v19 = v12 + 8;
    else
      v19 = 0;
    v27 = v19;
    v28 = 0;
  }
  SipOptionsManager::sendOptionsRequest(v8, a2, (uint64_t)v34, &v27, (uint64_t)v31);
  v20 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 24))(v32, v33);
  ImsResult::~ImsResult((ImsResult *)v31);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  if (v13)
  {
    v21 = (unint64_t *)&v13->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v23 = v30;
  if (v30)
  {
    v24 = (unint64_t *)&v30->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  SipUri::~SipUri((SipUri *)v34);
  return v20 ^ 1u;
}

void sub_1BF10E408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  ImsResult::~ImsResult((ImsResult *)&a16);
  if (a13)
    std::__shared_weak_count::__release_weak(a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  SipUri::~SipUri((SipUri *)&a25);
  _Unwind_Resume(a1);
}

void SipStack::getTlsFingerprint(SipStack *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v4 = *((_QWORD *)this + 18);
  v5 = *(_QWORD *)(v4 + 208);
  v6 = *(std::__shared_weak_count **)(v4 + 216);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(a2, (__int128 *)(v5 + 448), (__int128 *)(v5 + 472));
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BF10E4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipStack::coalesceLazuliRegistrationRefresh(SipStack *this)
{
  uint64_t v1;
  SipRegistrationClient *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v1 = *((_QWORD *)this + 18);
  v2 = *(SipRegistrationClient **)(v1 + 248);
  v3 = *(std::__shared_weak_count **)(v1 + 256);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  SipRegistrationClient::coalesceLazuliRegistrationRefresh(v2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF10E57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t **SipStack::saveEmergencyMessageCallId(uint64_t **result, __int128 *a2)
{
  uint64_t **v3;
  uint64_t v4;

  if (*((_BYTE *)result + 176))
  {
    v3 = result;
    v4 = ((uint64_t (*)(uint64_t **))(*result)[8])(result);
    ((void (*)(uint64_t **, uint64_t))(*v3)[2])(v3, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"For emergency message, saving call-id ", 38);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v4 + 32))(v4, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    return (uint64_t **)BambiClient::saveEmergencyMessageCallId(v3[17], a2);
  }
  return result;
}

uint64_t BambiClient::saveEmergencyMessageCallId(uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 105;
  v4 = a1[106];
  if (v4 >= a1[107])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    result = v4 + 24;
  }
  a1[106] = result;
  return result;
}

SipStack *SipStack::setEmergencyAni(SipStack *this, const ims::AccessNetworks *a2)
{
  SipStack *v3;
  char *v4;
  char v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  _BYTE *v9;

  if (*((_BYTE *)this + 176))
  {
    v3 = this;
    v4 = (char *)this + 3136;
    std::string::operator=((std::string *)((char *)this + 3136), (const std::string *)a2);
    std::string::operator=((std::string *)((char *)v3 + 3160), (const std::string *)a2 + 1);
    v5 = *((_BYTE *)a2 + 64);
    *((_OWORD *)v3 + 199) = *((_OWORD *)a2 + 3);
    *((_BYTE *)v3 + 3200) = v5;
    std::string::operator=((std::string *)((char *)v3 + 3208), (const std::string *)a2 + 3);
    std::string::operator=((std::string *)((char *)v3 + 3232), (const std::string *)a2 + 4);
    v6 = *((_BYTE *)a2 + 136);
    *(_OWORD *)(v4 + 120) = *(_OWORD *)((char *)a2 + 120);
    *((_BYTE *)v3 + 3272) = v6;
    std::string::operator=((std::string *)((char *)v3 + 3280), (const std::string *)a2 + 6);
    std::string::operator=((std::string *)((char *)v3 + 3304), (const std::string *)a2 + 7);
    v7 = *((_OWORD *)a2 + 12);
    *((_BYTE *)v3 + 3344) = *((_BYTE *)a2 + 208);
    *((_OWORD *)v3 + 208) = v7;
    v8 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)v3 + 32))(v3);
    (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Setting up emergency access network: ", 37);
    *(_BYTE *)(v8 + 17) = 0;
    v9 = (_BYTE *)ims::operator<<(v8, (uint64_t)v4);
    this = (SipStack *)(*(uint64_t (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v9[17] = 0;
  }
  return this;
}

void SipStack::mediaAddress(SipStack *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v5 = (char *)this + 184;
  v4 = *((_QWORD *)this + 23);
  if (v4 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4))
  {
    SipHost::SipHost(a2, (uint64_t)v5);
  }
  else
  {
    v14 = 0;
    v15 = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(*((_QWORD *)this + 20) + 1120) + 48))(&v12, *((_QWORD *)this + 20) + 1120);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v12 + 32))(&v14);
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 64))(v14, 0);
    *(_QWORD *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    SipHost::SipHost(a2, (uint64_t)&v14);
    v9 = v15;
    if (v15)
    {
      v10 = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BF10E8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipStack::updateSdpWithLocalAddressAndUsername(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::string __p;
  IpAddress *v10;
  std::__shared_weak_count *v11;
  _OWORD v12[3];
  uint64_t v13;

  v13 = 0;
  memset(v12, 0, sizeof(v12));
  SipStack::mediaAddress((SipStack *)a1, (uint64_t)v12);
  v4 = *a2;
  SipHost::address((SipHost *)v12, &v10);
  v5 = SipUserAgent::publicUri(*(SipUserAgent **)(a1 + 144));
  SipUri::asString(v5, 2, &__p);
  SDPModel::updateWithLocalAddressAndUsername(v4, &v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  SipHost::~SipHost((void **)v12);
}

void sub_1BF10E9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  SipHost::~SipHost(&a18);
  _Unwind_Resume(a1);
}

uint64_t SipStack::massageIncomingDisplayNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  std::string::size_type v8;
  _QWORD *v9;
  std::string::size_type v10;
  size_t v11;
  const void *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  char v22;
  std::string v23;
  char v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 2656))
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"not doing phone number prefix mapping while roaming", 51);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    result = 0;
    *(_BYTE *)(v3 + 17) = 0;
  }
  else
  {
    v5 = *(_QWORD **)(a1 + 2624);
    v6 = (_QWORD *)(a1 + 2632);
    if (v5 == (_QWORD *)(a1 + 2632))
    {
      return 0;
    }
    else
    {
      v8 = *(unsigned __int8 *)(a2 + 23);
      v9 = (_QWORD *)(a2 + 8);
      while (1)
      {
        v10 = *((char *)v5 + 55) < 0 ? v5[5] : *((unsigned __int8 *)v5 + 55);
        if ((v8 & 0x80) != 0)
        {
          if (v10 == -1)
LABEL_43:
            std::string::__throw_out_of_range[abi:ne180100]();
          v12 = *(const void **)a2;
          v11 = *(_QWORD *)(a2 + 8) >= v10 ? v10 : *(_QWORD *)(a2 + 8);
        }
        else
        {
          if (v10 == -1)
            goto LABEL_43;
          v11 = v8 >= v10 ? v10 : v8;
          v12 = (const void *)a2;
        }
        v13 = *((char *)v5 + 55) >= 0 ? v5 + 4 : (_QWORD *)v5[4];
        v14 = !memcmp(v12, v13, v11) && v11 == v10;
        if (v14)
          break;
        v15 = (_QWORD *)v5[1];
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = (_QWORD *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (_QWORD *)v5[2];
            v14 = *v16 == (_QWORD)v5;
            v5 = v16;
          }
          while (!v14);
        }
        v5 = v16;
        if (v16 == v6)
          return 0;
      }
      std::string::basic_string(&v23, (const std::string *)a2, v10, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v24);
      v17 = *((char *)v5 + 79);
      if (v17 >= 0)
        v18 = (const std::string::value_type *)(v5 + 7);
      else
        v18 = (const std::string::value_type *)v5[7];
      if (v17 >= 0)
        v19 = *((unsigned __int8 *)v5 + 79);
      else
        v19 = v5[8];
      v20 = std::string::insert(&v23, 0, v18, v19);
      v21 = v20->__r_.__value_.__r.__words[0];
      v25[0] = v20->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v25 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
      v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_QWORD *)a2 = v21;
      *v9 = v25[0];
      *(_QWORD *)((char *)v9 + 7) = *(_QWORD *)((char *)v25 + 7);
      *(_BYTE *)(a2 + 23) = v22;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      return 1;
    }
  }
  return result;
}

void sub_1BF10EC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *SipStack::handleSystemWake(SipStack *this)
{
  uint64_t v2;
  SipRegistrationClient *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  SipDialogManager *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  BambiEmergencyCallHandler::checkTimers(*((BambiEmergencyCallHandler **)this + 527));
  v2 = *((_QWORD *)this + 18);
  v3 = *(SipRegistrationClient **)(v2 + 248);
  v4 = *(std::__shared_weak_count **)(v2 + 256);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  SipRegistrationClient::checkTimers(v3);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v9 = *((_QWORD *)this + 18);
  v10 = *(SipDialogManager **)(v9 + 176);
  v11 = *(std::__shared_weak_count **)(v9 + 184);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  SipDialogManager::checkTimers(v10);
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return SipTransportLayer::handleSystemWake(*((SipTransportLayer **)this + 20));
}

void sub_1BF10ED3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL SipStack::isCampedOnWifi(SipStack *this)
{
  ims::AccessNetwork *v1;

  if (*((char *)this + 3231) < 0)
  {
    if (!*((_QWORD *)this + 402))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)this + 3231))
  {
    goto LABEL_7;
  }
  v1 = (ims::AccessNetwork *)((char *)this + 3208);
  if (*((char *)this + 3255) < 0)
  {
    if (*((_QWORD *)this + 405))
      return ims::AccessNetwork::isWifi(v1);
    goto LABEL_7;
  }
  if (!*((_BYTE *)this + 3255))
LABEL_7:
    v1 = (ims::AccessNetwork *)((char *)this + 3136);
  return ims::AccessNetwork::isWifi(v1);
}

uint64_t SipStack::isLocationLookupRequiredForEmergencyCall(SipStack *this)
{
  ImsPrefs *v1;
  void **EmergencyLocationLookupRequiredKey;
  void *v3;

  v1 = (ImsPrefs *)SipStack::prefs(this);
  EmergencyLocationLookupRequiredKey = (void **)ImsPrefs::getEmergencyLocationLookupRequiredKey(v1);
  v3 = ImsPrefs::prefWithKey(v1, EmergencyLocationLookupRequiredKey);
  if (v3)
    return (*(uint64_t (**)(void *))(*(_QWORD *)v3 + 40))(v3);
  else
    return *((unsigned __int8 *)EmergencyLocationLookupRequiredKey + 57);
}

void SipStack::addEmergencyNumberToUrnMapping(SipStack *a1, std::string *a2, uint64_t a3)
{
  uint64_t v6;
  BambiPrefsManager *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  std::string v11;
  std::string __p;
  std::string *v13;

  v6 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"mapping emergency number ", 25);
  *(_BYTE *)(v6 + 17) = 0;
  LoggableString::LoggableString(&__p, a2);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 40))(v6, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" to ", 4);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, v6);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  SipStack::carrierIdentifier(a1, &__p);
  v8 = (uint64_t **)BambiPrefsManager::instance(v7);
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v9 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v11);
  SipUri::asString(a3, 2, &v11);
  v13 = a2;
  v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v9 + 16, (void **)&a2->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v13);
  std::string::operator=((std::string *)(v10 + 7), &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF10EF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipStack::handleDeviceEvents(SipStack *this, uint64_t a2)
{
  BOOL v4;
  char v5;
  ImsPrefs *v6;
  void **DropRegistrationOnAirplaneModeToggleKey;
  void *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  SipRegistrationClient *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::string __p;

  SipStack::carrierIdentifier(this, &__p);
  v4 = BambiPrefsManager::prefsValid((BambiPrefsManager *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = !v4;
  if ((a2 & 2) == 0)
    v5 = 1;
  if ((v5 & 1) == 0)
  {
    v6 = (ImsPrefs *)SipStack::prefs(this);
    DropRegistrationOnAirplaneModeToggleKey = (void **)ImsPrefs::getDropRegistrationOnAirplaneModeToggleKey(v6);
    v8 = ImsPrefs::prefWithKey(v6, DropRegistrationOnAirplaneModeToggleKey);
    if (v8)
    {
      if (((*(uint64_t (**)(void *))(*(_QWORD *)v8 + 40))(v8) & 1) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
    if (*((_BYTE *)DropRegistrationOnAirplaneModeToggleKey + 57))
LABEL_8:
      BambiDeregisterHandler::start(*((_QWORD *)this + 529), 3, 0);
  }
LABEL_9:
  v9 = *((_QWORD *)this + 18);
  if (!v9)
    goto LABEL_27;
  v11 = *(_QWORD *)(v9 + 248);
  v10 = *(std::__shared_weak_count **)(v9 + 256);
  if (!v10)
    goto LABEL_15;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v11)
      goto LABEL_27;
  }
  else
  {
LABEL_15:
    if (!v11)
      goto LABEL_27;
  }
  v15 = *((_QWORD *)this + 18);
  v16 = *(SipRegistrationClient **)(v15 + 248);
  v17 = *(std::__shared_weak_count **)(v15 + 256);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  SipRegistrationClient::handleDeviceEvents(v16, a2);
  if (v17)
  {
    v20 = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_27:
  if ((a2 & 0x100) != 0)
  {
    if (*((_BYTE *)this + 2657))
      SipStack::endRegistration(this);
  }
}

void sub_1BF10F130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void SipStack::setSimConfig(SipStack *this, SipStack *a2, ims::StackConfig *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  SipStack::copyStackConfigs(a2, (const ims::StackConfig *)((char *)this + 3352), a3);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v7, (_QWORD *)this + 15);
  BambiAccessBarring::setStack((BambiAccessBarring *)((char *)this + 2904), &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF10F1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipStack::allCallsEnded(SipStack *this)
{
  uint64_t v2;
  SipRegistrationClient *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  SipTimerContainer::cancelTimer((SipTimerContainer *)((char *)this + 2704), (std::string *)&kAccessNetworkRefreshDelayTimer);
  v2 = *((_QWORD *)this + 18);
  v3 = *(SipRegistrationClient **)(v2 + 248);
  v4 = *(std::__shared_weak_count **)(v2 + 256);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  SipRegistrationClient::allCallsEnded(v3);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  BambiAccessBarring::allCallsEnded((BambiAccessBarring *)((char *)this + 2904));
}

void sub_1BF10F28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipStack::callTerminationReason(uint64_t a1@<X0>, uint64_t a2@<X1>, BambiCallTerminationReason *a3@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  BambiCallTerminationReason *v7;
  std::__shared_weak_count *v8;

  BambiCallTerminationReasonsBase::reason((const void ***)(a1 + 2224), a2, &v7);
  BambiCallTerminationReason::BambiCallTerminationReason(a3, v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF10F314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipStack::getAssociatedUris(SipStack *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  void *__p[2];
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  SipRouteSet::allHops(*((_QWORD *)this + 18) + 480, &v10);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  __p[0] = 0;
  __p[1] = 0;
  v9 = 0;
  v3 = (uint64_t *)v10;
  v4 = (uint64_t *)v11;
  if (v10 != v11)
  {
    do
    {
      SipUri::asString(*v3, (uint64_t)__p, 2);
      v5 = a2[1];
      if (v5 >= a2[2])
      {
        v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (__int128 *)__p);
      }
      else
      {
        if (SHIBYTE(v9) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)a2[1], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v6 = *(_OWORD *)__p;
          *(_QWORD *)(v5 + 16) = v9;
          *(_OWORD *)v5 = v6;
        }
        v7 = v5 + 24;
        a2[1] = v5 + 24;
      }
      a2[1] = v7;
      ++v3;
    }
    while (v3 != v4);
    if (SHIBYTE(v9) < 0)
      operator delete(__p[0]);
    v3 = (uint64_t *)v10;
  }
  if (v3)
  {
    v11 = (char *)v3;
    operator delete(v3);
  }
}

void sub_1BF10F418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipStack::callCount(SipStack *this)
{
  uint64_t v1;
  std::string __p;

  v1 = *((_QWORD *)this + 17);
  if (v1)
  {
    if (*((char *)this + 4159) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 517), *((_QWORD *)this + 518));
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4136);
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 519);
    }
    v1 = BambiClient::callCountForStack(v1, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v1;
}

void sub_1BF10F4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipStack::activeCallCount(SipStack *this, int a2)
{
  uint64_t v2;
  uint64_t v4;
  std::string __p;

  v2 = *((_QWORD *)this + 17);
  if (!v2)
    return 0;
  if (*((char *)this + 4159) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 517), *((_QWORD *)this + 518));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 4136);
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 519);
  }
  v4 = BambiClient::activeCallCountForStack(v2, a2, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF10F598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipStack::transferCalls(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  ImsPrefs *v6;
  void **ExplicitTransferEnabledKey;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  const char *v11;
  uint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v18;
  uint64_t v19;
  std::string::size_type size;
  std::string::size_type v21;
  char v22;
  std::string *v23;
  std::string *v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  std::string::size_type v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::string::size_type v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  char v48;
  std::string::size_type v49;
  std::string::size_type v50;
  int v51;
  uint64_t v52;
  std::string *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  BOOL v59;
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  _BYTE *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t *v74;
  uint64_t v75;
  SipStack *v76;
  unint64_t *v77;
  unint64_t v78;
  SipStack *v79;
  unint64_t *v80;
  unint64_t v81;
  SipStack *v82[2];
  SipStack *v83[2];
  _QWORD v84[2];
  std::string v85;
  std::string v86;
  std::string v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  std::string v90;
  uint64_t v91;
  std::__shared_weak_count *v92;

  v6 = (ImsPrefs *)SipStack::prefs((SipStack *)a1);
  ExplicitTransferEnabledKey = (void **)ImsPrefs::getExplicitTransferEnabledKey(v6);
  v8 = ImsPrefs::prefWithKey(v6, ExplicitTransferEnabledKey);
  if (v8)
  {
    if (((*(uint64_t (**)(void *))(*(_QWORD *)v8 + 40))(v8) & 1) == 0)
    {
LABEL_3:
      v9 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v9);
      v10 = *(_QWORD **)(v9 + 8);
      v11 = "Explicit call transfer is disabled by carrier";
      v12 = 45;
LABEL_13:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
      *(_BYTE *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v16 = 0;
      *(_BYTE *)(v9 + 17) = 0;
      return v16;
    }
  }
  else if (!*((_BYTE *)ExplicitTransferEnabledKey + 57))
  {
    goto LABEL_3;
  }
  if (*((_BYTE *)a1 + 176))
  {
    v9 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v9);
    v10 = *(_QWORD **)(v9 + 8);
    v11 = "Unable to initiate transfer on emergency stack";
    v12 = 46;
    goto LABEL_13;
  }
  v13 = (_QWORD *)*a2;
  if (!*a2 || !*a3)
  {
    v9 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v9);
    v10 = *(_QWORD **)(v9 + 8);
    v11 = "transferee and transfer target must both be valid call objects";
    v12 = 62;
    goto LABEL_13;
  }
  v91 = 0;
  v92 = 0;
  v14 = (std::__shared_weak_count *)v13[45];
  if (v14 && (v92 = std::__shared_weak_count::lock(v14)) != 0)
  {
    v15 = v13[44];
    v91 = v15;
  }
  else
  {
    v15 = 0;
  }
  if (*(char *)(v15 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)(v15 + 4136), *(_QWORD *)(v15 + 4144));
  else
    v86 = *(std::string *)(v15 + 4136);
  v18 = a1 + 517;
  if (*((char *)a1 + 4159) < 0)
  {
    std::string::__init_copy_ctor_external(&v85, (const std::string::value_type *)a1[517], a1[518]);
  }
  else
  {
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = *v18;
    v85.__r_.__value_.__r.__words[2] = a1[519];
  }
  v19 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
  else
    size = v86.__r_.__value_.__l.__size_;
  v21 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
  v22 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
  if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v21 = v85.__r_.__value_.__l.__size_;
  if (size != v21)
  {
LABEL_38:
    v25 = 1;
    if ((v22 & 0x80) == 0)
      goto LABEL_40;
    goto LABEL_39;
  }
  if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &v85;
  else
    v23 = (std::string *)v85.__r_.__value_.__r.__words[0];
  if ((*((_BYTE *)&v86.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v86.__r_.__value_.__l.__data_, v23, v86.__r_.__value_.__l.__size_))
      goto LABEL_38;
  }
  else if (*((_BYTE *)&v86.__r_.__value_.__s + 23))
  {
    v24 = &v86;
    while (v24->__r_.__value_.__s.__data_[0] == v23->__r_.__value_.__s.__data_[0])
    {
      v24 = (std::string *)((char *)v24 + 1);
      v23 = (std::string *)((char *)v23 + 1);
      if (!--v19)
        goto LABEL_57;
    }
    goto LABEL_38;
  }
LABEL_57:
  v35 = (_QWORD *)*a3;
  v88 = 0;
  v89 = 0;
  v36 = (std::__shared_weak_count *)v35[45];
  if (v36)
  {
    v37 = std::__shared_weak_count::lock(v36);
    v89 = v37;
    if (v37)
    {
      v38 = v35[44];
      v88 = v38;
      goto LABEL_86;
    }
  }
  else
  {
    v37 = 0;
  }
  v38 = 0;
LABEL_86:
  if (*(char *)(v38 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v90, *(const std::string::value_type **)(v38 + 4136), *(_QWORD *)(v38 + 4144));
  else
    v90 = *(std::string *)(v38 + 4136);
  if (*((char *)a1 + 4159) < 0)
  {
    std::string::__init_copy_ctor_external(&v87, (const std::string::value_type *)a1[517], a1[518]);
  }
  else
  {
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = *v18;
    v87.__r_.__value_.__r.__words[2] = a1[519];
  }
  v48 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
  else
    v49 = v90.__r_.__value_.__l.__size_;
  v50 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
  v51 = SHIBYTE(v87.__r_.__value_.__r.__words[2]);
  if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v50 = v87.__r_.__value_.__l.__size_;
  if (v49 == v50)
  {
    if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v87;
    else
      v23 = (std::string *)v87.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    {
      v60 = memcmp(v90.__r_.__value_.__l.__data_, v23, v90.__r_.__value_.__l.__size_) == 0;
    }
    else if (*((_BYTE *)&v90.__r_.__value_.__s + 23))
    {
      v52 = HIBYTE(v90.__r_.__value_.__r.__words[2]) - 1;
      v53 = &v90;
      do
      {
        v55 = v53->__r_.__value_.__s.__data_[0];
        v53 = (std::string *)((char *)v53 + 1);
        v54 = v55;
        v57 = v23->__r_.__value_.__s.__data_[0];
        v23 = (std::string *)((char *)v23 + 1);
        v56 = v57;
        v59 = v52-- != 0;
        v60 = v54 == v56;
      }
      while (v54 == v56 && v59);
    }
    else
    {
      v60 = 1;
    }
  }
  else
  {
    v60 = 0;
  }
  if (v51 < 0)
  {
    operator delete(v87.__r_.__value_.__l.__data_);
    v48 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
  }
  if (v48 < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  v25 = !v60;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v68 = __ldaxr(p_shared_owners);
    while (__stlxr(v68 - 1, p_shared_owners));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *, std::string *))v37->__on_zero_shared)(v37, v23);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if ((*((_BYTE *)&v85.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_39:
    operator delete(v85.__r_.__value_.__l.__data_);
LABEL_40:
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  v26 = v92;
  if (v92)
  {
    v27 = (unint64_t *)&v92->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v25)
  {
    v29 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"transferee (", 12);
    *(_BYTE *)(v29 + 17) = 0;
    v30 = (_QWORD *)*a2;
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = 0uLL;
    v31 = (std::__shared_weak_count *)v30[45];
    if (v31 && (v90.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v31)) != 0)
    {
      v32 = v30[44];
      v90.__r_.__value_.__r.__words[0] = v32;
    }
    else
    {
      v32 = 0;
    }
    if (*(char *)(v32 + 4159) < 0)
      std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)(v32 + 4136), *(_QWORD *)(v32 + 4144));
    else
      v86 = *(std::string *)(v32 + 4136);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v29 + 32))(v29, &v86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)") and transfer target (", 23);
    *(_BYTE *)(v29 + 17) = 0;
    v39 = (_QWORD *)*a3;
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = 0uLL;
    v40 = (std::__shared_weak_count *)v39[45];
    if (v40)
    {
      v41 = std::__shared_weak_count::lock(v40);
      v87.__r_.__value_.__l.__size_ = (std::string::size_type)v41;
      if (v41)
      {
        v42 = v39[44];
        v87.__r_.__value_.__r.__words[0] = v42;
LABEL_66:
        if (*(char *)(v42 + 4159) < 0)
          std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v42 + 4136), *(_QWORD *)(v42 + 4144));
        else
          v85 = *(std::string *)(v42 + 4136);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v29 + 32))(v29, &v85);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)") must be anchored to the same SIP stack", 40);
        *(_BYTE *)(v29 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v29 + 17) = 0;
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        if (v41)
        {
          v43 = (unint64_t *)&v41->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v86.__r_.__value_.__l.__data_);
        v45 = (std::__shared_weak_count *)v90.__r_.__value_.__l.__size_;
        if (v90.__r_.__value_.__l.__size_)
        {
          v46 = (unint64_t *)(v90.__r_.__value_.__l.__size_ + 8);
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        return 0;
      }
    }
    else
    {
      v41 = 0;
    }
    v42 = 0;
    goto LABEL_66;
  }
  if (*(_QWORD *)(*a2 + 512) || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 104))(*a2))
  {
    v33 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"Unable to initiate transfer with trasferee ", 43);
    *(_BYTE *)(v33 + 17) = 0;
    v34 = *a2 + *(_QWORD *)(*(_QWORD *)*a2 - 48);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)".  Call is already a participant or is an emergency call", 56);
    *(_BYTE *)(v33 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v16 = 0;
    *(_BYTE *)(v33 + 17) = 0;
    return v16;
  }
  if (*(_QWORD *)(*a3 + 512) || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 104))(*a3))
  {
    v61 = (*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v61);
    v62 = ImsOutStream::operator<<(v61, "Unable to initiate transfer with transfer target ");
    v63 = *a3 + *(_QWORD *)(*(_QWORD *)*a3 - 48);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 16))(v63, v62);
    v64 = ".  Call is already a participant or is an emergency call";
    v65 = v62;
LABEL_114:
    v66 = (_BYTE *)ImsOutStream::operator<<(v65, v64);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v66 + 64))(v66, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v16 = 0;
    v66[17] = 0;
    return v16;
  }
  v69 = *a1;
  if (a1[531])
  {
    v70 = (*(uint64_t (**)(uint64_t *))(v69 + 56))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v70);
    v64 = "Unable to initiate transfer, existing transfer already in progress.";
    v65 = v70;
    goto LABEL_114;
  }
  v71 = (*(uint64_t (**)(uint64_t *))(v69 + 64))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v71);
  v72 = ImsOutStream::operator<<(v71, "transferring call between ");
  ObfuscatedString::ObfuscatedString((uint64_t)&v86, (const std::string *)(*a2 + 464));
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v72 + 56))(v72, &v86);
  v73 = (_BYTE *)ImsOutStream::operator<<(v72, " and ");
  ObfuscatedString::ObfuscatedString((uint64_t)&v85, (const std::string *)(*a3 + 464));
  (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v73 + 56))(v73, &v85);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v73 + 64))(v73, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v73[17] = 0;
  ims::AccessNetwork::~AccessNetwork((void **)&v85.__r_.__value_.__l.__data_);
  ims::AccessNetwork::~AccessNetwork((void **)&v86.__r_.__value_.__l.__data_);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(v84, a1 + 15);
  BambiTransferHandler::create(v84, (uint64_t)(a1 + 14), (BambiTransferHandler **)&v86);
  v74 = a1 + 531;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)v74, (__int128 *)&v86);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v86);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v84);
  v75 = *v74;
  v76 = (SipStack *)a2[1];
  v83[0] = *(SipStack **)a2;
  v83[1] = v76;
  if (v76)
  {
    v77 = (unint64_t *)((char *)v76 + 8);
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
  }
  v79 = (SipStack *)a3[1];
  v82[0] = *(SipStack **)a3;
  v82[1] = v79;
  if (v79)
  {
    v80 = (unint64_t *)((char *)v79 + 8);
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }
  v16 = BambiTransferHandler::start(v75, v83, v82);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v82);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v83);
  return v16;
}

void sub_1BF10FF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SipStack::transferComplete(SipStack *this)
{
  uint64_t v2;
  uint64_t v3;
  std::string __p;

  v2 = (*(uint64_t (**)(SipStack *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipStack *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"SipStack::transferComplete", 26);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 531);
  if (*((char *)this + 4159) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 517), *((_QWORD *)this + 518));
  else
    __p = *(std::string *)((char *)this + 4136);
  v3 = IMSClientManager::delegateForStack((void **)&__p.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 + 16) + 112))(v3 + 16, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF110128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'SipStack::transferComplete(SipStack *this)
{
  SipStack::transferComplete((SipStack *)((char *)this - 112));
}

void SipStack::transferFailed(uint64_t a1)
{
  uint64_t v2;
  std::string __p;

  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)(a1 + 4248));
  if (*(char *)(a1 + 4159) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 4136), *(_QWORD *)(a1 + 4144));
  else
    __p = *(std::string *)(a1 + 4136);
  v2 = IMSClientManager::delegateForStack((void **)&__p.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 + 16) + 112))(v2 + 16, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF1101DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'SipStack::transferFailed(uint64_t a1)
{
  SipStack::transferFailed(a1 - 112);
}

uint64_t std::operator==[abi:ne180100]<std::string,std::string,std::less<std::string>,std::allocator<std::pair<std::string const,std::string>>>(_QWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t result;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  BOOL v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  char v12;

  if (a1[2] != a3)
    return 0;
  v3 = (unsigned __int8 *)(a1 + 1);
  v4 = (unsigned __int8 *)*a1;
  if ((_QWORD *)*a1 == a1 + 1)
    return 1;
  do
  {
    result = std::__equal_to::operator()[abi:ne180100]<std::pair<std::string const,std::string>,std::pair<std::string const,std::string>>((uint64_t)&v12, v4 + 32, a2 + 32);
    if (!(_DWORD)result)
      break;
    v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = v4;
    if (v7)
    {
      do
      {
        v4 = v7;
        v7 = *(unsigned __int8 **)v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v4 = (unsigned __int8 *)*((_QWORD *)v8 + 2);
        v9 = *(_QWORD *)v4 == (_QWORD)v8;
        v8 = v4;
      }
      while (!v9);
    }
    v10 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = *(unsigned __int8 **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        v9 = *(_QWORD *)v11 == (_QWORD)a2;
        a2 = v11;
      }
      while (!v9);
    }
    a2 = v11;
  }
  while (v4 != v3);
  return result;
}

uint64_t SipTimers::operator==(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const void **v10;
  unsigned __int8 *v11;
  _BOOL4 v12;
  uint64_t result;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *v17;
  _QWORD *v18;

  if (a1[3] == a3)
  {
    v3 = (_QWORD *)a1[1];
    v4 = a1 + 2;
    if (v3 == a1 + 2)
      return 1;
    while (1)
    {
      v6 = *((unsigned __int8 *)v3 + 55);
      if ((v6 & 0x80u) == 0)
        v7 = *((unsigned __int8 *)v3 + 55);
      else
        v7 = v3[5];
      v8 = *((unsigned __int8 *)a2 + 55);
      v9 = (char)v8;
      if ((v8 & 0x80u) != 0)
        v8 = a2[5];
      if (v7 != v8)
        break;
      v10 = (const void **)(v3 + 4);
      if (v9 >= 0)
        v11 = (unsigned __int8 *)(a2 + 4);
      else
        v11 = (unsigned __int8 *)a2[4];
      if ((v6 & 0x80) != 0)
      {
        v12 = memcmp(*v10, v11, v3[5]) == 0;
      }
      else
      {
        if (*((_BYTE *)v3 + 55))
        {
          while (*(unsigned __int8 *)v10 == *v11)
          {
            v10 = (const void **)((char *)v10 + 1);
            ++v11;
            if (!--v6)
              goto LABEL_16;
          }
          return 0;
        }
LABEL_16:
        v12 = 1;
      }
      result = 0;
      if (!v12 || *((_DWORD *)v3 + 14) != *((_DWORD *)a2 + 14))
        return result;
      v14 = (_QWORD *)v3[1];
      v15 = v3;
      if (v14)
      {
        do
        {
          v3 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v3 = (_QWORD *)v15[2];
          v16 = *v3 == (_QWORD)v15;
          v15 = v3;
        }
        while (!v16);
      }
      v17 = (_QWORD *)a2[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)a2[2];
          v16 = *v18 == (_QWORD)a2;
          a2 = v18;
        }
        while (!v16);
      }
      a2 = v18;
      if (v3 == v4)
        return 1;
    }
  }
  return 0;
}

uint64_t SipAuthConfig::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t result;
  char v13;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  v9 = (unsigned __int8 *)*((_QWORD *)a1 + 3);
  v10 = (unsigned __int8 *)*((_QWORD *)a1 + 4);
  v11 = (unsigned __int8 *)*((_QWORD *)v6 + 3);
  if (v10 - v9 != *((_QWORD *)v6 + 4) - (_QWORD)v11)
    return 0;
  while (v9 != v10)
  {
    result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v13, v9, v11);
    if (!(_DWORD)result)
      return result;
    v9 += 24;
    v11 += 24;
  }
  return *((_DWORD *)a1 + 12) == *((_DWORD *)v6 + 12);
}

uint64_t std::operator==[abi:ne180100]<std::string,std::less<std::string>,std::allocator<std::string>>(_QWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t result;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  BOOL v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  char v12;

  if (a1[2] != a3)
    return 0;
  v3 = (unsigned __int8 *)(a1 + 1);
  v4 = (unsigned __int8 *)*a1;
  if ((_QWORD *)*a1 == a1 + 1)
    return 1;
  do
  {
    result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v12, v4 + 32, a2 + 32);
    if (!(_DWORD)result)
      break;
    v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = v4;
    if (v7)
    {
      do
      {
        v4 = v7;
        v7 = *(unsigned __int8 **)v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v4 = (unsigned __int8 *)*((_QWORD *)v8 + 2);
        v9 = *(_QWORD *)v4 == (_QWORD)v8;
        v8 = v4;
      }
      while (!v9);
    }
    v10 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = *(unsigned __int8 **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        v9 = *(_QWORD *)v11 == (_QWORD)a2;
        a2 = v11;
      }
      while (!v9);
    }
    a2 = v11;
  }
  while (v4 != v3);
  return result;
}

uint64_t std::operator==[abi:ne180100]<SipSecurityAgreementConfig,std::allocator<SipSecurityAgreementConfig>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t result;

  if (a2 - a1 != a4 - a3)
    return 0;
  v5 = a1;
  if (a1 == a2)
    return 1;
  for (i = a3; ; i += 72)
  {
    v7 = *(unsigned __int8 *)(v5 + 31);
    if ((v7 & 0x80u) == 0)
      v8 = *(unsigned __int8 *)(v5 + 31);
    else
      v8 = *(_QWORD *)(v5 + 16);
    v9 = *(unsigned __int8 *)(i + 31);
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(i + 16);
    if (v8 != v9)
      break;
    if (v10 >= 0)
      v11 = (unsigned __int8 *)(i + 8);
    else
      v11 = *(unsigned __int8 **)(i + 8);
    if ((v7 & 0x80) != 0)
    {
      if (memcmp(*(const void **)(v5 + 8), v11, *(_QWORD *)(v5 + 16)))
        return 0;
    }
    else if (*(_BYTE *)(v5 + 31))
    {
      v12 = 0;
      while (*(unsigned __int8 *)(v5 + v12 + 8) == v11[v12])
      {
        if (v7 == ++v12)
          goto LABEL_20;
      }
      return 0;
    }
LABEL_20:
    result = SipParameterMap::operator==((_QWORD *)(v5 + 32), i + 32);
    if (!(_DWORD)result)
      return result;
    v5 += 72;
    if (v5 == a2)
      return 1;
  }
  return 0;
}

uint64_t std::__equal_to::operator()[abi:ne180100]<std::pair<std::string const,std::string>,std::pair<std::string const,std::string>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const void **v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v27;
  uint64_t result;

  v4 = a2[23];
  v5 = *((_QWORD *)a2 + 1);
  if ((v4 & 0x80u) == 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  v7 = a3[23];
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a3 + 1);
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v10 = a3;
  else
    v10 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v10, v5))
      return 0;
  }
  else if ((_DWORD)v4)
  {
    v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v4)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  v12 = a2[47];
  if ((v12 & 0x80u) == 0)
    v13 = a2[47];
  else
    v13 = *((_QWORD *)a2 + 4);
  v14 = a3[47];
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = *((_QWORD *)a3 + 4);
  if (v13 != v14)
    return 0;
  v16 = (const void **)(a2 + 24);
  v19 = (unsigned __int8 *)*((_QWORD *)a3 + 3);
  v18 = a3 + 24;
  v17 = v19;
  if (v15 >= 0)
    v20 = v18;
  else
    v20 = v17;
  if ((v12 & 0x80) != 0)
    return memcmp(*v16, v20, *((_QWORD *)a2 + 4)) == 0;
  if (!a2[47])
    return 1;
  v21 = v12 - 1;
  do
  {
    v23 = *(unsigned __int8 *)v16;
    v16 = (const void **)((char *)v16 + 1);
    v22 = v23;
    v25 = *v20++;
    v24 = v25;
    v27 = v21-- != 0;
    result = v22 == v24;
  }
  while (v22 == v24 && v27);
  return result;
}

void std::__shared_ptr_emplace<SipTransportLayer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DFC68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipTransportLayer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DFC68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipTransportLayer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<BambiDeregisterHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DFCB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiDeregisterHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DFCB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<BambiDeregisterHandler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<BambiEmergencyCallHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DFD08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiEmergencyCallHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DFD08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<BambiEmergencyCallHandler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<SipStack,std::allocator<SipStack>,BambiCallHandler *&,BambiClient *&,BOOL &,std::string const&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, char *a3@<X3>, const std::string *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x1110uLL);
  std::__shared_ptr_emplace<SipStack>::__shared_ptr_emplace[abi:ne180100]<BambiCallHandler *&,BambiClient *&,BOOL &,std::string const&,std::allocator<SipStack>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a5, v10 + 18, (uint64_t)(v10 + 3));
}

void sub_1BF110978(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<SipStack>::__shared_ptr_emplace[abi:ne180100]<BambiCallHandler *&,BambiClient *&,BOOL &,std::string const&,std::allocator<SipStack>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3, char *a4, const std::string *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78DFD58;
  SipStack::SipStack((uint64_t)(a1 + 3), *a2, *a3, *a4, a5);
  return a1;
}

void sub_1BF1109CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipStack>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DFD58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipStack>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DFD58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipStack>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::__function::__func<SipStack::initialize(SipStackConfig const&)::$_0,std::allocator<SipStack::initialize(SipStackConfig const&)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78DFDA8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipStack::initialize(SipStackConfig const&)::$_0,std::allocator<SipStack::initialize(SipStackConfig const&)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78DFDA8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipStack::initialize(SipStackConfig const&)::$_0,std::allocator<SipStack::initialize(SipStackConfig const&)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78DFDA8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipStack::initialize(SipStackConfig const&)::$_0,std::allocator<SipStack::initialize(SipStackConfig const&)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78DFDA8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipStack::initialize(SipStackConfig const&)::$_0,std::allocator<SipStack::initialize(SipStackConfig const&)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipStack::initialize(SipStackConfig const&)::$_0,std::allocator<SipStack::initialize(SipStackConfig const&)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipStack::initialize(SipStackConfig const&)::$_0,std::allocator<SipStack::initialize(SipStackConfig const&)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF110C14(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipStack::initialize(SipStackConfig const&)::$_0,std::allocator<SipStack::initialize(SipStackConfig const&)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipStack::initialize(SipStackConfig const&)::$_0,std::allocator<SipStack::initialize(SipStackConfig const&)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipStack::deinitialize(BOOL,BOOL)::$_0,std::allocator<SipStack::deinitialize(BOOL,BOOL)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78DFE28;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipStack::deinitialize(BOOL,BOOL)::$_0,std::allocator<SipStack::deinitialize(BOOL,BOOL)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78DFE28;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipStack::deinitialize(BOOL,BOOL)::$_0,std::allocator<SipStack::deinitialize(BOOL,BOOL)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78DFE28;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipStack::deinitialize(BOOL,BOOL)::$_0,std::allocator<SipStack::deinitialize(BOOL,BOOL)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78DFE28;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipStack::deinitialize(BOOL,BOOL)::$_0,std::allocator<SipStack::deinitialize(BOOL,BOOL)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipStack::deinitialize(BOOL,BOOL)::$_0,std::allocator<SipStack::deinitialize(BOOL,BOOL)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipStack::deinitialize(BOOL,BOOL)::$_0,std::allocator<SipStack::deinitialize(BOOL,BOOL)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF110E7C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipStack::deinitialize(BOOL,BOOL)::$_0,std::allocator<SipStack::deinitialize(BOOL,BOOL)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<SipStack::deinitialize(BOOL,BOOL)::$_0,std::allocator<SipStack::deinitialize(BOOL,BOOL)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipStack::setConnectivityAvailable(BOOL)::$_1,std::allocator<SipStack::setConnectivityAvailable(BOOL)::$_1>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78DFEA8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipStack::setConnectivityAvailable(BOOL)::$_1,std::allocator<SipStack::setConnectivityAvailable(BOOL)::$_1>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78DFEA8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipStack::setConnectivityAvailable(BOOL)::$_1,std::allocator<SipStack::setConnectivityAvailable(BOOL)::$_1>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78DFEA8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipStack::setConnectivityAvailable(BOOL)::$_1,std::allocator<SipStack::setConnectivityAvailable(BOOL)::$_1>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78DFEA8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipStack::setConnectivityAvailable(BOOL)::$_1,std::allocator<SipStack::setConnectivityAvailable(BOOL)::$_1>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipStack::setConnectivityAvailable(BOOL)::$_1,std::allocator<SipStack::setConnectivityAvailable(BOOL)::$_1>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipStack::setConnectivityAvailable(BOOL)::$_1,std::allocator<SipStack::setConnectivityAvailable(BOOL)::$_1>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF1110E4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipStack::setConnectivityAvailable(BOOL)::$_1,std::allocator<SipStack::setConnectivityAvailable(BOOL)::$_1>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipStack::setConnectivityAvailable(BOOL)::$_1,std::allocator<SipStack::setConnectivityAvailable(BOOL)::$_1>,void ()(std::string &)>::target_type()
{
}

void std::__shared_ptr_emplace<SipProxyResolver>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DFF28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipProxyResolver>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78DFF28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipProxyResolver>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::__function::__func<SipStack::refreshAccessNetwork(void)::$_0,std::allocator<SipStack::refreshAccessNetwork(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78DFF78;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipStack::refreshAccessNetwork(void)::$_0,std::allocator<SipStack::refreshAccessNetwork(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78DFF78;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipStack::refreshAccessNetwork(void)::$_0,std::allocator<SipStack::refreshAccessNetwork(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78DFF78;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipStack::refreshAccessNetwork(void)::$_0,std::allocator<SipStack::refreshAccessNetwork(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78DFF78;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipStack::refreshAccessNetwork(void)::$_0,std::allocator<SipStack::refreshAccessNetwork(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipStack::refreshAccessNetwork(void)::$_0,std::allocator<SipStack::refreshAccessNetwork(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipStack::refreshAccessNetwork(void)::$_0,std::allocator<SipStack::refreshAccessNetwork(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF11139C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipStack::refreshAccessNetwork(void)::$_0,std::allocator<SipStack::refreshAccessNetwork(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<SipStack::refreshAccessNetwork(void)::$_0,std::allocator<SipStack::refreshAccessNetwork(void)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t _GLOBAL__sub_I_SipStack_cpp()
{
  void (*v0)(void *);

  std::string::basic_string[abi:ne180100]<0>(&kWaitForDeregistrationTimer, "WaitForDeregistrationTimer");
  v0 = (void (*)(void *))MEMORY[0x1E0DE44D0];
  __cxa_atexit(MEMORY[0x1E0DE44D0], &kWaitForDeregistrationTimer, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&kAccessNetworkRefreshDelayTimer, "AccessNetworkRefreshDelayTimer");
  return __cxa_atexit(v0, &kAccessNetworkRefreshDelayTimer, &dword_1BEDF4000);
}

void XcapDocumentOIR::XcapDocumentOIR(XcapDocumentOIR *this)
{
  __int128 *v2;
  unsigned __int8 v3;
  char *v4;

  v3 = 0;
  v4 = (char *)&v3;
  v2 = (__int128 *)(std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v3, (uint64_t)&std::piecewise_construct, &v4)+ 5);
  *(_QWORD *)this = &off_1E78CE278;
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)this + 8, (__int128 *)&XcapDocumentOIR::kName, v2);
  *((_QWORD *)this + 8) = &XcapDocumentOIR::kName;
  *((_QWORD *)this + 9) = v2;
  *((_WORD *)this + 40) = 257;
  *(_QWORD *)this = &off_1E78DFFF8;
  *((_QWORD *)this + 1) = &unk_1E78E0090;
}

void XcapDocumentOIR::~XcapDocumentOIR(void **this)
{
  bambi::XmlTreeItem::~XmlTreeItem(this + 1);
}

{
  bambi::XmlTreeItem::~XmlTreeItem(this + 1);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'XcapDocumentOIR::~XcapDocumentOIR(void **this)
{
  bambi::XmlTreeItem::~XmlTreeItem(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t XcapDocumentOIR::createChild(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  size_t size;
  std::string::size_type v5;
  uint64_t v6;
  uint64_t *v7;
  std::string *p_s1;
  uint64_t v9;
  std::string *v10;
  const char *v11;
  void *v12;
  std::string __s1;

  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  v3 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    v5 = __s1.__r_.__value_.__l.__size_;
  v6 = qword_1ED70C928;
  if (byte_1ED70C937 >= 0)
    v6 = byte_1ED70C937;
  if (v5 == v6)
  {
    if (byte_1ED70C937 >= 0)
      v7 = &XcapDocumentOIR::kName;
    else
      v7 = (uint64_t *)XcapDocumentOIR::kName;
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v12 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v7, __s1.__r_.__value_.__l.__size_))
        goto LABEL_32;
      if (size != 17)
      {
LABEL_31:
        a1 = 0;
        goto LABEL_32;
      }
LABEL_30:
      if (!memcmp(v12, "default-behaviour", size))
        goto LABEL_32;
      goto LABEL_31;
    }
    if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
      return a1;
    p_s1 = &__s1;
    v9 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v7)
    {
      p_s1 = (std::string *)((char *)p_s1 + 1);
      v7 = (uint64_t *)((char *)v7 + 1);
      if (!--v9)
        goto LABEL_24;
    }
  }
  if (v5 == 17)
  {
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
        return a1;
      v10 = &__s1;
      v11 = "default-behaviour";
      while (v10->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v11)
      {
        v10 = (std::string *)((char *)v10 + 1);
        ++v11;
        if (!--v3)
          goto LABEL_24;
      }
      goto LABEL_23;
    }
    v12 = (void *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_30;
  }
LABEL_23:
  a1 = 0;
LABEL_24:
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v12 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_32:
    operator delete(v12);
  }
  return a1;
}

void XcapDocumentOIR::parseChild(_BYTE *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  size_t size;
  std::string::size_type v8;
  uint64_t v9;
  uint64_t *v10;
  std::string *p_s1;
  uint64_t v12;
  std::string *v13;
  const char *v14;
  const void *v15;
  int v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t *v21;
  void **p_p;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  void **v26;
  char v27;
  std::string __s1;
  void *__p;
  size_t v30;
  uint64_t v31;

  __p = 0;
  v30 = 0;
  v31 = 0;
  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    v8 = __s1.__r_.__value_.__l.__size_;
  v9 = qword_1ED70C928;
  if (byte_1ED70C937 >= 0)
    v9 = byte_1ED70C937;
  if (v8 != v9)
    goto LABEL_16;
  if (byte_1ED70C937 >= 0)
    v10 = &XcapDocumentOIR::kName;
  else
    v10 = (uint64_t *)XcapDocumentOIR::kName;
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v15 = (const void *)__s1.__r_.__value_.__r.__words[0];
    if (memcmp(__s1.__r_.__value_.__l.__data_, v10, __s1.__r_.__value_.__l.__size_))
    {
      if (size != 17)
        goto LABEL_29;
      goto LABEL_28;
    }
LABEL_26:
    bambi::XmlParserItem::parseChild((uint64_t)a1, a2, a3);
    goto LABEL_29;
  }
  if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    goto LABEL_26;
  p_s1 = &__s1;
  v12 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v10)
  {
    p_s1 = (std::string *)((char *)p_s1 + 1);
    v10 = (uint64_t *)((char *)v10 + 1);
    if (!--v12)
      goto LABEL_26;
  }
LABEL_16:
  if (v8 != 17)
    goto LABEL_29;
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v15 = (const void *)__s1.__r_.__value_.__r.__words[0];
LABEL_28:
    if (!memcmp(v15, "default-behaviour", size))
      goto LABEL_35;
LABEL_29:
    LOBYTE(v16) = 0;
    goto LABEL_30;
  }
  if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
  {
    v13 = &__s1;
    v14 = "default-behaviour";
    while (v13->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v14)
    {
      v13 = (std::string *)((char *)v13 + 1);
      ++v14;
      if (!--v6)
        goto LABEL_35;
    }
    goto LABEL_29;
  }
LABEL_35:
  (*(void (**)(_BYTE *, const char *, uint64_t *, void **))(*(_QWORD *)a1 + 72))(a1, "default-behaviour", a3, &__p);
  v17 = HIBYTE(v31);
  v16 = HIBYTE(v31);
  v18 = v30;
  if (v31 >= 0)
    v19 = HIBYTE(v31);
  else
    v19 = v30;
  v20 = qword_1ED70EF30;
  if (byte_1ED70EF3F >= 0)
    v20 = byte_1ED70EF3F;
  if (v19 != v20)
    goto LABEL_51;
  if (byte_1ED70EF3F >= 0)
    v21 = &qword_1ED70EF28;
  else
    v21 = (uint64_t *)qword_1ED70EF28;
  if (v31 < 0)
  {
    if (memcmp(__p, v21, v30))
      goto LABEL_51;
LABEL_63:
    v27 = 0;
LABEL_66:
    a1[81] = v27;
    goto LABEL_30;
  }
  if (!HIBYTE(v31))
    goto LABEL_63;
  p_p = &__p;
  v23 = HIBYTE(v31);
  while (*(unsigned __int8 *)p_p == *(unsigned __int8 *)v21)
  {
    p_p = (void **)((char *)p_p + 1);
    v21 = (uint64_t *)((char *)v21 + 1);
    if (!--v23)
      goto LABEL_63;
  }
LABEL_51:
  v24 = qword_1ED70EF18;
  if (byte_1ED70EF27 >= 0)
    v24 = byte_1ED70EF27;
  if (v19 != v24)
    goto LABEL_30;
  if (byte_1ED70EF27 >= 0)
    v25 = &_MergedGlobals_21;
  else
    v25 = (uint64_t *)_MergedGlobals_21;
  if ((v16 & 0x80) != 0)
  {
    if (memcmp(__p, v25, v18))
      goto LABEL_30;
    goto LABEL_65;
  }
  if (!v16)
  {
LABEL_65:
    v27 = 1;
    goto LABEL_66;
  }
  v26 = &__p;
  while (*(unsigned __int8 *)v26 == *(unsigned __int8 *)v25)
  {
    v26 = (void **)((char *)v26 + 1);
    v25 = (uint64_t *)((char *)v25 + 1);
    if (!--v17)
      goto LABEL_65;
  }
LABEL_30:
  if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v16 & 0x80) == 0)
      return;
LABEL_34:
    operator delete(__p);
    return;
  }
  operator delete(__s1.__r_.__value_.__l.__data_);
  if (v31 < 0)
    goto LABEL_34;
}

void sub_1BF111A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void XcapDocumentOIR::constructTree(XcapDocumentOIR *this@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  *a2 = 0;
  a2[1] = 0;
  v4 = (char *)this + 8;
  bambi::XmlTreeItem::makeNode((XcapDocumentOIR *)((char *)this + 8), a2);
  v5 = a2[1];
  v15 = *a2;
  v16 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  if (*((_BYTE *)this + 81))
    v8 = &_MergedGlobals_21;
  else
    v8 = &qword_1ED70EF28;
  (*(void (**)(uint64_t *__return_ptr, char *, uint64_t *, const char *, uint64_t *, _QWORD))(*((_QWORD *)this + 1) + 80))(&v17, v4, &v15, "default-behaviour", v8, 0);
  v9 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1BF111B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'XcapDocumentOIR::constructTree(XcapDocumentOIR *this@<X0>, uint64_t *a2@<X8>)
{
  XcapDocumentOIR::constructTree((XcapDocumentOIR *)((char *)this - 8), a2);
}

uint64_t XcapDocumentOIR::asString@<X0>(XcapDocumentOIR *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  const char *v5;
  uint64_t v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  _OWORD v10[4];
  void *__p[2];
  __int128 v12;
  __int128 v13;
  _OWORD v14[9];
  uint64_t v15;
  std::locale v16;

  v15 = 0;
  v13 = 0u;
  memset(v14, 0, sizeof(v14));
  *(_OWORD *)__p = 0u;
  v12 = 0u;
  memset(v10, 0, sizeof(v10));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"OIR Default: ", 13);
  if (*((_BYTE *)this + 81))
    v5 = "Restricted";
  else
    v5 = "Allowed";
  if (*((_BYTE *)this + 81))
    v6 = 10;
  else
    v6 = 7;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
  v8 = std::locale::use_facet(&v16, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v16);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10 + 8, a2);
  *(_QWORD *)&v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(*(_QWORD *)&v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v10[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v12) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v14);
}

void sub_1BF111CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::locale::~locale((std::locale *)(v9 - 40));
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t XcapDocumentOIR::clone(XcapDocumentOIR *this)
{
  uint64_t v2;
  std::string *v3;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E78CE278;
  *(_QWORD *)(v2 + 8) = off_1E78EC640;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  std::vector<bambi::XmlTreeNs>::__init_with_size[abi:ne180100]<bambi::XmlTreeNs*,bambi::XmlTreeNs*>((_QWORD *)(v2 + 16), *((_QWORD *)this + 2), *((_QWORD *)this + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 4));
  v3 = (std::string *)(v2 + 40);
  if (*((char *)this + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
    *(_QWORD *)(v2 + 56) = *((_QWORD *)this + 7);
  }
  *(_OWORD *)(v2 + 64) = *((_OWORD *)this + 4);
  *(_WORD *)(v2 + 80) = *((_WORD *)this + 40);
  *(_QWORD *)v2 = &off_1E78DFFF8;
  *(_QWORD *)(v2 + 8) = &unk_1E78E0090;
  return v2;
}

void sub_1BF111DD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  MEMORY[0x1C3B87100](v2, 0x10F3C401C462E74);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_XcapDocumentOIR_cpp()
{
  void (*v0)(void *);

  std::string::basic_string[abi:ne180100]<0>(&XcapDocumentOIR::kName, "originating-identity-presentation-restriction");
  v0 = (void (*)(void *))MEMORY[0x1E0DE44D0];
  __cxa_atexit(MEMORY[0x1E0DE44D0], &XcapDocumentOIR::kName, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&_MergedGlobals_21, "presentation-restricted");
  __cxa_atexit(v0, &_MergedGlobals_21, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1ED70EF28, "presentation-not-restricted");
  return __cxa_atexit(v0, &qword_1ED70EF28, &dword_1BEDF4000);
}

uint64_t ims::getNumMatchesForPattern(uint64_t *a1, uint64_t *a2, unsigned int a3)
{
  void *v6;
  uint64_t *v7;
  void *v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  BOOL v14;
  uint64_t v15;
  id v17;

  v6 = (void *)MEMORY[0x1C3B876AC]();
  if (*((char *)a2 + 23) >= 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v7, 4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((char *)a1 + 23) >= 0)
    v9 = a1;
  else
    v9 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v9, 4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = 0;
  objc_msgSend(MEMORY[0x1E0CB38E8], "regularExpressionWithPattern:options:error:", v8, a3, &v17);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v17;
  v13 = v12;
  if (v11)
    v14 = v12 == 0;
  else
    v14 = 0;
  if (v14)
    v15 = objc_msgSend(v11, "numberOfMatchesInString:options:range:", v10, 0, 0, objc_msgSend(v10, "length"));
  else
    v15 = 0;

  objc_autoreleasePoolPop(v6);
  return v15;
}

void sub_1BF111FC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void SipStringBody::SipStringBody(SipStringBody *this)
{
  *(_QWORD *)this = off_1E78E0120;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  std::string::operator=((std::string *)((char *)this + 32), (const std::string *)"text/plain");
}

void sub_1BF112044(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v3);
  _Unwind_Resume(exception_object);
}

uint64_t SipStringBody::initWithContentTypeHeader(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 104));
  return 1;
}

uint64_t SipStringBody::encode(SipStringBody *this, ImsOutStream *a2)
{
  return (*(uint64_t (**)(ImsOutStream *, char *))(*(_QWORD *)a2 + 32))(a2, (char *)this + 8);
}

BOOL SipStringBody::decode(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  std::string *v5;
  _QWORD *v6;
  std::string::value_type v7;
  uint64_t v9;
  unint64_t v10;
  std::string::value_type v11;

  if (!a3)
    return 1;
  v5 = (std::string *)(a1 + 8);
  v6 = a2 + 4;
  v7 = std::istream::get();
  std::string::push_back(v5, v7);
  if (*(_DWORD *)((char *)v6 + *(_QWORD *)(*a2 - 24)))
    return 0;
  v9 = 1;
  do
  {
    v10 = v9;
    if (a3 == v9)
      break;
    v11 = std::istream::get();
    std::string::push_back(v5, v11);
    v9 = v10 + 1;
  }
  while (!*(_DWORD *)((char *)v6 + *(_QWORD *)(*a2 - 24)));
  return v10 >= a3;
}

uint64_t SipStringBody::decode(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 8), a2);
  return 1;
}

void SipStringBody::~SipStringBody(void **this)
{
  *this = off_1E78E0120;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78E0120;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipStringBody::clone(SipStringBody *this)
{
  uint64_t v2;
  uint64_t v3;
  std::string *v4;

  v2 = operator new();
  v3 = v2;
  *(_QWORD *)v2 = off_1E78E0120;
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v2 + 8), *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)(v2 + 8) = *(_OWORD *)((char *)this + 8);
    *(_QWORD *)(v2 + 24) = *((_QWORD *)this + 3);
  }
  v4 = (std::string *)(v3 + 32);
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    *(_QWORD *)(v3 + 48) = *((_QWORD *)this + 6);
  }
  return v3;
}

void sub_1BF1122C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  MEMORY[0x1C3B87100](v1, 0x1093C403F48558ALL);
  _Unwind_Resume(a1);
}

__int128 *SipStringBody::contentType(SipStringBody *this)
{
  uint64_t v1;

  if (*((char *)this + 55) < 0)
    v1 = *((_QWORD *)this + 5);
  else
    v1 = *((unsigned __int8 *)this + 55);
  if (v1)
    return (__int128 *)((char *)this + 32);
  else
    return &SipBody::kGenericContentType;
}

uint64_t SipStringBody::contentLength(SipStringBody *this)
{
  if (*((char *)this + 31) < 0)
    return *((_QWORD *)this + 2);
  else
    return *((unsigned __int8 *)this + 31);
}

void BambiEmergencyUrnMap::urnForNumber(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  int v11;
  char *v12;
  char *v13;
  void *v14;
  char *v15;
  std::string::size_type v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *p_p;
  std::string::size_type size;
  std::string *v25;
  std::string::size_type v26;
  char v27;
  std::string __p;
  std::string v29;
  std::string v30;
  char v31;
  _QWORD v32[3];

  v32[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a3 + 8);
  if (v7)
    v8 = a3;
  else
    v8 = a1;
  if (*(char *)(v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a4, *(const std::string::value_type **)v8, *(_QWORD *)(v8 + 8));
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)v8;
    *((_QWORD *)a4 + 2) = *(_QWORD *)(v8 + 16);
  }
  v9 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 24, (void **)a2);
  if ((void **)(a1 + 32) != v9)
    std::string::operator=((std::string *)a4, (const std::string *)(v9 + 7));
  v10 = a4[23];
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *((_QWORD *)a4 + 1);
  if (v11 >= 0)
    v12 = a4;
  else
    v12 = *(char **)a4;
  if (v10 >= 6)
  {
    v13 = &v12[v10];
    v14 = v12;
    do
    {
      v15 = (char *)memchr(v14, 78, v10 - 5);
      if (!v15)
        break;
      if (*(_DWORD *)v15 == 1112364366 && *((_WORD *)v15 + 2) == 21061)
      {
        if (v15 != v13)
        {
          v17 = v15 - v12;
          if (v17 != -1)
          {
            std::string::basic_string(&v29, (const std::string *)a4, 0, v17, (std::allocator<char> *)&__p);
            v18 = *(char *)(a2 + 23);
            if (v18 >= 0)
              v19 = (const std::string::value_type *)a2;
            else
              v19 = *(const std::string::value_type **)a2;
            if (v18 >= 0)
              v20 = *(unsigned __int8 *)(a2 + 23);
            else
              v20 = *(_QWORD *)(a2 + 8);
            v21 = std::string::append(&v29, v19, v20);
            v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
            v30.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v22;
            v21->__r_.__value_.__l.__size_ = 0;
            v21->__r_.__value_.__r.__words[2] = 0;
            v21->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string(&__p, (const std::string *)a4, v17 + 6, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v31);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              size = __p.__r_.__value_.__l.__size_;
            v25 = std::string::append(&v30, (const std::string::value_type *)p_p, size);
            v26 = v25->__r_.__value_.__r.__words[0];
            v32[0] = v25->__r_.__value_.__l.__size_;
            *(_QWORD *)((char *)v32 + 7) = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
            v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
            v25->__r_.__value_.__l.__size_ = 0;
            v25->__r_.__value_.__r.__words[2] = 0;
            v25->__r_.__value_.__r.__words[0] = 0;
            if (a4[23] < 0)
              operator delete(*(void **)a4);
            *(_QWORD *)a4 = v26;
            *((_QWORD *)a4 + 1) = v32[0];
            *(_QWORD *)(a4 + 15) = *(_QWORD *)((char *)v32 + 7);
            a4[23] = v27;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v30.__r_.__value_.__l.__data_);
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v29.__r_.__value_.__l.__data_);
          }
        }
        return;
      }
      v14 = v15 + 1;
      v10 = v13 - (_BYTE *)v14;
    }
    while (v13 - (_BYTE *)v14 >= 6);
  }
}

void sub_1BF1125B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v26 + 23) < 0)
    operator delete(*(void **)v26);
  _Unwind_Resume(exception_object);
}

void BambiEmergencyUrnMap::reset(BambiEmergencyUrnMap *this)
{
  BambiEmergencyUrnMap *v1;
  _QWORD *v2;

  v1 = this;
  v2 = (_QWORD *)((char *)this + 32);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  *(v2 - 1) = v2;
  *v2 = 0;
  v2[1] = 0;
  if (*((char *)v2 - 9) < 0)
  {
    *((_QWORD *)v1 + 1) = 15;
    v1 = *(BambiEmergencyUrnMap **)v1;
  }
  else
  {
    *((_BYTE *)v1 + 23) = 15;
  }
  strcpy((char *)v1, "urn:service:sos");
}

void SipInReplyToContributionId::~SipInReplyToContributionId(void **this)
{
  *this = off_1E78CCB28;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78CCB28;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

void SipContributionId::~SipContributionId(void **this)
{
  *this = off_1E78CCB28;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78CCB28;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

void SipConversationId::~SipConversationId(void **this)
{
  *this = off_1E78CCB28;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78CCB28;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

void SipCallId::~SipCallId(void **this)
{
  *this = off_1E78CCB28;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78CCB28;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipDialog::SipDialog(uint64_t a1, const std::string **a2)
{
  _QWORD *v4;
  const std::string *v5;
  const std::string *v6;
  unint64_t *p_size;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::string __p;

  *(_QWORD *)(a1 + 8) = &off_1E78E0368;
  *(_QWORD *)a1 = &off_1E78B81C8;
  *(_BYTE *)(a1 + 20) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_DWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.dlg");
  ImsLogContainer::ImsLogContainer(a1 + 80, &__p, *a2 + 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)a1 = &off_1E78E01B8;
  *(_QWORD *)(a1 + 8) = &unk_1E78E0248;
  *(_QWORD *)(a1 + 80) = &unk_1E78E0290;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 184) = &unk_1E78E02F0;
  *(_QWORD *)(a1 + 224) = &off_1E78BFCE8;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 232) = &off_1E78D08F8;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_WORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_QWORD *)(a1 + 288) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 296) = a1 + 304;
  *(_BYTE *)(a1 + 321) = 1;
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_QWORD *)(a1 + 552) = &off_1E78B82D8;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_QWORD *)(a1 + 560) = a1 + 568;
  *(_QWORD *)(a1 + 592) = &off_1E78B82D8;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_QWORD *)(a1 + 600) = a1 + 608;
  *(_BYTE *)(a1 + 320) = 1;
  *(_WORD *)(a1 + 584) = 257;
  *(_WORD *)(a1 + 624) = 257;
  *(_BYTE *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_QWORD *)(a1 + 672) = &off_1E78D08F8;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_WORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 728) = &off_1E78B82D8;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_QWORD *)(a1 + 736) = a1 + 744;
  *(_BYTE *)(a1 + 761) = 1;
  *(_QWORD *)(a1 + 664) = &off_1E78BFCE8;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_QWORD *)(a1 + 976) = 0;
  *(_QWORD *)(a1 + 992) = &off_1E78B82D8;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_QWORD *)(a1 + 1000) = a1 + 1008;
  *(_QWORD *)(a1 + 1032) = &off_1E78B82D8;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_QWORD *)(a1 + 1040) = a1 + 1048;
  *(_BYTE *)(a1 + 760) = 1;
  *(_WORD *)(a1 + 1024) = 257;
  *(_WORD *)(a1 + 1064) = 257;
  *(_BYTE *)(a1 + 984) = 0;
  *(_QWORD *)(a1 + 1088) = 0;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_QWORD *)(a1 + 1104) = &off_1E78D08F8;
  *(_QWORD *)(a1 + 1144) = 0;
  *(_QWORD *)(a1 + 1152) = 0;
  *(_QWORD *)(a1 + 1120) = 0;
  *(_QWORD *)(a1 + 1112) = 0;
  *(_QWORD *)(a1 + 1128) = 0;
  *(_WORD *)(a1 + 1136) = 0;
  *(_QWORD *)(a1 + 1160) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 1184) = 0;
  *(_QWORD *)(a1 + 1176) = 0;
  *(_QWORD *)(a1 + 1168) = a1 + 1176;
  *(_BYTE *)(a1 + 1193) = 1;
  *(_QWORD *)(a1 + 1096) = &off_1E78BFCE8;
  *(_QWORD *)(a1 + 1408) = 0;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_QWORD *)(a1 + 1424) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 1448) = 0;
  *(_QWORD *)(a1 + 1440) = 0;
  *(_QWORD *)(a1 + 1432) = a1 + 1440;
  *(_BYTE *)(a1 + 1457) = 1;
  *(_QWORD *)(a1 + 1464) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 1488) = 0;
  *(_QWORD *)(a1 + 1480) = 0;
  *(_QWORD *)(a1 + 1472) = a1 + 1480;
  *(_BYTE *)(a1 + 1497) = 1;
  *(_BYTE *)(a1 + 1192) = 1;
  *(_BYTE *)(a1 + 1456) = 1;
  *(_BYTE *)(a1 + 1496) = 1;
  *(_BYTE *)(a1 + 1416) = 0;
  SipIdString::SipIdString((SipIdString *)(a1 + 1504));
  *(_QWORD *)(a1 + 1504) = off_1E78E0428;
  SipIdString::SipIdString((SipIdString *)(a1 + 1560));
  *(_QWORD *)(a1 + 1560) = off_1E78D72D8;
  SipIdString::SipIdString((SipIdString *)(a1 + 1616));
  *(_QWORD *)(a1 + 1616) = off_1E78E0470;
  SipIdString::SipIdString((SipIdString *)(a1 + 1672));
  *(_QWORD *)(a1 + 1672) = off_1E78E04B8;
  SipIdString::SipIdString((SipIdString *)(a1 + 1728));
  *v4 = off_1E78E0500;
  *(_QWORD *)(a1 + 1784) = xpc_null_create();
  *(_BYTE *)(a1 + 1792) = 0;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_DWORD *)(a1 + 1832) = 1065353216;
  *(_DWORD *)(a1 + 1840) = 1;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_BYTE *)(a1 + 1864) = 0;
  *(_OWORD *)(a1 + 1848) = 0u;
  *(_QWORD *)(a1 + 1872) = a1 + 1880;
  *(_QWORD *)(a1 + 1912) = 0;
  *(_QWORD *)(a1 + 1904) = 0;
  *(_QWORD *)(a1 + 1896) = a1 + 1904;
  *(_BYTE *)(a1 + 1920) = 0;
  *(_QWORD *)(a1 + 1928) = 0;
  *(_WORD *)(a1 + 1936) = 0;
  *(_QWORD *)(a1 + 1960) = 0;
  *(_QWORD *)(a1 + 1952) = 0;
  *(_QWORD *)(a1 + 1944) = a1 + 1952;
  *(_QWORD *)(a1 + 1984) = 0;
  *(_QWORD *)(a1 + 1976) = 0;
  *(_QWORD *)(a1 + 1968) = a1 + 1976;
  *(_QWORD *)(a1 + 2000) = 0;
  *(_QWORD *)(a1 + 2008) = 0;
  *(_QWORD *)(a1 + 1992) = a1 + 2000;
  *(_QWORD *)(a1 + 2024) = 0;
  *(_QWORD *)(a1 + 2032) = 0;
  *(_QWORD *)(a1 + 2016) = a1 + 2024;
  *(_QWORD *)(a1 + 2048) = 0;
  *(_QWORD *)(a1 + 2056) = 0;
  *(_QWORD *)(a1 + 2040) = a1 + 2048;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_QWORD *)(a1 + 2112) = 0;
  v6 = *a2;
  v5 = a2[1];
  if (v5)
  {
    p_size = &v5->__r_.__value_.__l.__size_;
    do
      v8 = __ldxr(p_size);
    while (__stxr(v8 + 1, p_size));
  }
  v9 = *(std::__shared_weak_count **)(a1 + 216);
  *(_QWORD *)(a1 + 208) = v6;
  *(_QWORD *)(a1 + 216) = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return a1;
}

void sub_1BF112C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9)
{
  uint64_t v9;
  SipLockable *v10;
  void **v11;
  uint64_t v12;
  SipUri *v13;
  SipUri *v14;
  void **v15;
  void **v16;
  void **v17;
  std::__shared_weak_count *v19;

  SipContributionId::~SipContributionId(v11);
  SipConversationId::~SipConversationId(v17);
  SipSessionId::~SipSessionId(v16);
  SipCallId::~SipCallId(v15);
  SipUri::~SipUri((SipUri *)(v9 + 1096));
  if (*(char *)(v9 + 1095) < 0)
    operator delete(*(void **)(v9 + 1072));
  SipUri::~SipUri(v14);
  if (*(char *)(v9 + 663) < 0)
    operator delete(*(void **)(v9 + 640));
  SipUri::~SipUri(v13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v12);
  v19 = *(std::__shared_weak_count **)(v9 + 200);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  ImsLogContainer::~ImsLogContainer(a9);
  SipLockable::~SipLockable(v10, (uint64_t *)off_1E78E0318);
  _Unwind_Resume(a1);
}

void sub_1BF112CD8()
{
  JUMPOUT(0x1BF112C68);
}

void sub_1BF112CE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x1BF112CC0);
}

void sub_1BF112CF8()
{
  JUMPOUT(0x1BF112CC0);
}

void SipDialog::~SipDialog(SipDialog *this)
{
  SipLockable *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  void *v10;
  std::__shared_weak_count *v11;

  *(_QWORD *)this = &off_1E78E01B8;
  *((_QWORD *)this + 1) = &unk_1E78E0248;
  v2 = (SipDialog *)((char *)this + 8);
  *((_QWORD *)this + 10) = &unk_1E78E0290;
  v3 = (char *)this + 80;
  *((_QWORD *)this + 23) = &unk_1E78E02F0;
  v4 = ImsLogContainer::debugStream((SipDialog *)((char *)this + 80));
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"~SipDialog() [Dialog:", 21);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 32))(v4, (char *)this + 1536);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"] ", 2);
  *(_BYTE *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  SipDialog::removeAllForks(this);
  v5 = *((_QWORD *)this + 79);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *((_QWORD *)this + 79) = 0;
  }
  v6 = *((_QWORD *)this + 241);
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    *((_QWORD *)this + 241) = 0;
  }
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::destroy((uint64_t)this + 1992, *((_QWORD **)this + 250));
  *((_QWORD *)this + 249) = (char *)this + 2000;
  *((_QWORD *)this + 251) = 0;
  *((_QWORD *)this + 250) = 0;
  if (*((char *)this + 2119) < 0)
    operator delete(*((void **)this + 262));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 2080);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 2064);
  std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*((_QWORD **)this + 256));
  std::__tree<std::string>::destroy((uint64_t)this + 2016, *((char **)this + 253));
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::destroy((uint64_t)this + 1992, *((_QWORD **)this + 250));
  std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*((_QWORD **)this + 247));
  std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*((_QWORD **)this + 244));
  std::__tree<std::string>::destroy((uint64_t)this + 1896, *((char **)this + 238));
  std::__tree<std::string>::destroy((uint64_t)this + 1872, *((char **)this + 235));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 1848);
  v7 = (_QWORD *)*((_QWORD *)this + 227);
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      v9 = (std::__shared_weak_count *)v7[4];
      if (v9)
        std::__shared_weak_count::__release_weak(v9);
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
  v10 = (void *)*((_QWORD *)this + 225);
  *((_QWORD *)this + 225) = 0;
  if (v10)
    operator delete(v10);
  xpc_release(*((xpc_object_t *)this + 223));
  *((_QWORD *)this + 223) = 0;
  *((_QWORD *)this + 216) = off_1E78CCB28;
  if (*((char *)this + 1783) < 0)
    operator delete(*((void **)this + 220));
  if (*((char *)this + 1759) < 0)
    operator delete(*((void **)this + 217));
  *((_QWORD *)this + 209) = off_1E78CCB28;
  if (*((char *)this + 1727) < 0)
    operator delete(*((void **)this + 213));
  if (*((char *)this + 1703) < 0)
    operator delete(*((void **)this + 210));
  *((_QWORD *)this + 202) = off_1E78CCB28;
  if (*((char *)this + 1671) < 0)
    operator delete(*((void **)this + 206));
  if (*((char *)this + 1647) < 0)
    operator delete(*((void **)this + 203));
  *((_QWORD *)this + 195) = off_1E78CCB28;
  if (*((char *)this + 1615) < 0)
    operator delete(*((void **)this + 199));
  if (*((char *)this + 1591) < 0)
    operator delete(*((void **)this + 196));
  *((_QWORD *)this + 188) = off_1E78CCB28;
  if (*((char *)this + 1559) < 0)
    operator delete(*((void **)this + 192));
  if (*((char *)this + 1535) < 0)
    operator delete(*((void **)this + 189));
  SipUri::~SipUri((SipDialog *)((char *)this + 1096));
  if (*((char *)this + 1095) < 0)
    operator delete(*((void **)this + 134));
  SipUri::~SipUri((SipDialog *)((char *)this + 664));
  if (*((char *)this + 663) < 0)
    operator delete(*((void **)this + 80));
  SipUri::~SipUri((SipDialog *)((char *)this + 224));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 208);
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  *((_QWORD *)this + 10) = off_1E78CFE68;
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  SipLockable::~SipLockable(v2, (uint64_t *)off_1E78E0318);
}

{
  SipDialog::~SipDialog(this);
  JUMPOUT(0x1C3B87100);
}

void SipDialog::removeAllForks(SipDialog *this)
{
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 260);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 258);
  std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*((_QWORD **)this + 256));
  *((_QWORD *)this + 255) = (char *)this + 2048;
  *((_QWORD *)this + 257) = 0;
  *((_QWORD *)this + 256) = 0;
}

void `non-virtual thunk to'SipDialog::~SipDialog(SipDialog *this)
{
  SipDialog::~SipDialog((SipDialog *)((char *)this - 8));
}

{
  SipDialog::~SipDialog((SipDialog *)((char *)this - 80));
}

{
  SipDialog::~SipDialog((SipDialog *)((char *)this - 184));
}

{
  SipDialog::~SipDialog((SipDialog *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

{
  SipDialog::~SipDialog((SipDialog *)((char *)this - 80));
  JUMPOUT(0x1C3B87100);
}

{
  SipDialog::~SipDialog((SipDialog *)((char *)this - 184));
  JUMPOUT(0x1C3B87100);
}

uint64_t SipDialog::terminationLocksReleased(SipDialog *this)
{
  char *v1;
  uint64_t v2;

  v1 = (char *)this + 80;
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 10) + 64))((char *)this + 80);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"SipDialog::terminationLocksReleased()", 37);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  return SipDialogManager::dialogTerminated(*((_QWORD **)v1 + 16), (unsigned __int8 *)v1 + 1456);
}

uint64_t `non-virtual thunk to'SipDialog::terminationLocksReleased(SipDialog *this)
{
  return SipDialog::terminationLocksReleased((SipDialog *)((char *)this - 8));
}

uint64_t SipDialog::forceDeinitialization(SipDialog *this)
{
  _QWORD *v2;
  std::string::size_type v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t *v15;
  uint64_t *i;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  _OWORD *v31;
  std::string::size_type v32;
  std::string::size_type v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  std::string::size_type v47;
  std::string::size_type v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  std::string v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  std::string __p;
  std::string::size_type v75;
  std::string::size_type size;
  _OWORD v77[4];

  memset(v77, 0, 48);
  v2 = (_QWORD *)((char *)this + 192);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v69, (_QWORD *)this + 24);
  if (v69.__r_.__value_.__r.__words[0])
    v3 = v69.__r_.__value_.__r.__words[0] + 8;
  else
    v3 = 0;
  v75 = v3;
  size = v69.__r_.__value_.__l.__size_;
  *(_OWORD *)&v69.__r_.__value_.__l.__data_ = 0uLL;
  LoggableString::LoggableString((LoggableString *)&__p, "forceDeinitialization");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v77, (uint64_t *)&v75, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v4 = (std::__shared_weak_count *)size;
  if (size)
  {
    v5 = (unint64_t *)(size + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)v69.__r_.__value_.__l.__size_;
  if (v69.__r_.__value_.__l.__size_)
  {
    v8 = (unint64_t *)(v69.__r_.__value_.__l.__size_ + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (char *)this + 80;
  v11 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 10) + 64))((char *)this + 80);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 10) + 16))((char *)this + 80, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"forcing deinitialization", 24);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  v12 = *((_QWORD *)this + 231);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 192))(v12);
  v72 = 0;
  v73 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v72, v2);
  v13 = (char *)*((_QWORD *)this + 249);
  v14 = (char *)this + 2000;
  if (v13 != (char *)this + 2000)
  {
    do
    {
      v15 = (uint64_t *)*((_QWORD *)v13 + 7);
      for (i = (uint64_t *)*((_QWORD *)v13 + 8); v15 != i; v15 += 2)
      {
        v17 = (std::__shared_weak_count *)v15[1];
        v70 = *v15;
        v71 = v17;
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldxr(p_shared_owners);
          while (__stxr(v19 + 1, p_shared_owners));
        }
        std::operator+<char>();
        LoggableString::LoggableString(&__p, &v69);
        (*(void (**)(char *, std::string *))(*((_QWORD *)this + 1) + 40))((char *)this + 8, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v69.__r_.__value_.__l.__data_);
        v67 = 0;
        v68 = 0;
        std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v70 + 232), &v67);
        v20 = v68;
        if (v68)
        {
          v21 = (unint64_t *)&v68->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v23 = v71;
        if (v71)
        {
          v24 = (unint64_t *)&v71->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
      }
      v26 = (char *)*((_QWORD *)v13 + 1);
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = *(char **)v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (char *)*((_QWORD *)v13 + 2);
          v28 = *(_QWORD *)v27 == (_QWORD)v13;
          v13 = v27;
        }
        while (!v28);
      }
      v13 = v27;
    }
    while (v27 != v14);
  }
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::destroy((uint64_t)this + 1992, *((_QWORD **)this + 250));
  *((_QWORD *)this + 249) = v14;
  *((_OWORD *)this + 125) = 0u;
  v29 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 10) + 64))((char *)this + 80);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v10 + 16))((char *)this + 80, v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"detaching ", 10);
  *(_BYTE *)(v29 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v29 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)" client transactions", 20);
  *(_BYTE *)(v29 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v29 + 17) = 0;
  v30 = (_QWORD *)*((_QWORD *)this + 246);
  v31 = (_OWORD *)((char *)this + 1976);
  if (v30 != (_QWORD *)((char *)this + 1976))
  {
    do
    {
      v32 = v30[7];
      v33 = v30[8];
      v69.__r_.__value_.__r.__words[0] = v32;
      v69.__r_.__value_.__l.__size_ = v33;
      if (v33)
      {
        v34 = (unint64_t *)(v33 + 8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      v65 = 0;
      v66 = 0;
      std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v32 + 344), &v65);
      v36 = v66;
      if (v66)
      {
        v37 = (unint64_t *)&v66->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v69.__r_.__value_.__l.__data_ + 152))(&__p);
      (*(void (**)(char *, std::string *))(*((_QWORD *)this + 1) + 40))((char *)this + 8, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v39 = (std::__shared_weak_count *)v69.__r_.__value_.__l.__size_;
      if (v69.__r_.__value_.__l.__size_)
      {
        v40 = (unint64_t *)(v69.__r_.__value_.__l.__size_ + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = (_QWORD *)v30[1];
      if (v42)
      {
        do
        {
          v43 = v42;
          v42 = (_QWORD *)*v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          v43 = (_QWORD *)v30[2];
          v28 = *v43 == (_QWORD)v30;
          v30 = v43;
        }
        while (!v28);
      }
      v30 = v43;
    }
    while (v43 != (_QWORD *)v31);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*((_QWORD **)this + 247));
  *((_QWORD *)this + 246) = v31;
  *v31 = 0u;
  v44 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 10) + 64))((char *)this + 80);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v10 + 16))((char *)this + 80, v44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"detaching ", 10);
  *(_BYTE *)(v44 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v44 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)" server transactions", 20);
  *(_BYTE *)(v44 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v44 + 17) = 0;
  v45 = (char *)*((_QWORD *)this + 243);
  v46 = (char *)this + 1952;
  if (v45 != (char *)this + 1952)
  {
    do
    {
      v47 = *((_QWORD *)v45 + 7);
      v48 = *((_QWORD *)v45 + 8);
      v69.__r_.__value_.__r.__words[0] = v47;
      v69.__r_.__value_.__l.__size_ = v48;
      if (v48)
      {
        v49 = (unint64_t *)(v48 + 8);
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      v63 = 0;
      v64 = 0;
      std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v47 + 344), &v63);
      v51 = v64;
      if (v64)
      {
        v52 = (unint64_t *)&v64->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v69.__r_.__value_.__l.__data_ + 160))(&__p);
      (*(void (**)(char *, std::string *))(*((_QWORD *)this + 1) + 40))((char *)this + 8, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v54 = (std::__shared_weak_count *)v69.__r_.__value_.__l.__size_;
      if (v69.__r_.__value_.__l.__size_)
      {
        v55 = (unint64_t *)(v69.__r_.__value_.__l.__size_ + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = (char *)*((_QWORD *)v45 + 1);
      if (v57)
      {
        do
        {
          v58 = v57;
          v57 = *(char **)v57;
        }
        while (v57);
      }
      else
      {
        do
        {
          v58 = (char *)*((_QWORD *)v45 + 2);
          v28 = *(_QWORD *)v58 == (_QWORD)v45;
          v45 = v58;
        }
        while (!v28);
      }
      v45 = v58;
    }
    while (v58 != v46);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*((_QWORD **)this + 244));
  *((_QWORD *)this + 243) = v46;
  *((_OWORD *)this + 122) = 0u;
  v59 = v73;
  if (v73)
  {
    v60 = (unint64_t *)&v73->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v77);
}

void sub_1BF11389C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,char a33)
{
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void SipDialog::attachSession(uint64_t a1, uint64_t *a2)
{
  void *__p[2];
  char v4;

  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 + 1848), a2);
  LoggableString::LoggableString((LoggableString *)__p, "Session");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)(a1 + 8) + 32))(a1 + 8, __p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1BF1139E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipDialog::detachSession(SipDialog *this)
{
  char *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  void *__p[2];
  char v8;

  v2 = (char *)this + 80;
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 10) + 64))((char *)this + 80);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"detaching Session", 17);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  __p[0] = 0;
  __p[1] = 0;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)(v2 + 1768), (__int128 *)__p);
  v4 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v5 = (unint64_t *)((char *)__p[1] + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  LoggableString::LoggableString((LoggableString *)__p, "Session");
  (*(void (**)(char *, void **))(*((_QWORD *)this + 1) + 40))((char *)this + 8, __p);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_1BF113B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count *SipDialog::stack@<X0>(std::__shared_weak_count *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t shared_weak_owners;
  uint64_t v4;

  shared_weak_owners = this[8].__shared_weak_owners_;
  if (shared_weak_owners && (v4 = *(_QWORD *)(shared_weak_owners + 136)) != 0)
  {
    *a2 = 0;
    a2[1] = 0;
    this = *(std::__shared_weak_count **)(v4 + 16);
    if (this)
    {
      this = std::__shared_weak_count::lock(this);
      a2[1] = this;
      if (this)
        *a2 = *(_QWORD *)(v4 + 8);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

std::__shared_weak_count *SipDialog::stack(std::__shared_weak_count *this, uint64_t a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;

  v2 = this;
  if (a2 && (v3 = *(_QWORD *)(a2 + 136)) != 0)
  {
    this->__vftable = 0;
    this->__shared_owners_ = 0;
    this = *(std::__shared_weak_count **)(v3 + 16);
    if (this)
    {
      this = std::__shared_weak_count::lock(this);
      v2->__shared_owners_ = (uint64_t)this;
      if (this)
        v2->__vftable = *(std::__shared_weak_count_vtbl **)(v3 + 8);
    }
  }
  else
  {
    this->__vftable = 0;
    this->__shared_owners_ = 0;
  }
  return this;
}

void SipDialog::fillContactHeader(SipDialog *this, std::__shared_weak_count *a2, _QWORD *a3)
{
  void *v6;
  const std::string *v7;
  _DWORD *v8;
  std::__shared_weak_count_vtbl *v9;
  int v10;
  uint64_t v11;
  std::string::size_type size;
  std::string *v13;
  const char *v14;
  _DWORD *v15;
  char *v16;
  const std::string *v17;
  uint64_t shared_weak_owners;
  SipUserAgent *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  const void *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  const char *v27;
  ImsPrefs *v28;
  void **AlwaysAddTextServiceKey;
  void *v30;
  _BOOL4 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  ImsPrefs *v35;
  void **TTYOverImsSupportedKey;
  void *v37;
  int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t shared_owners;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  SipStack *v53;
  ImsPrefs *v54;
  void **LazuliConferenceFactoryKey;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::string __p;
  SipStack *v60;
  uint64_t (**v61)(SipHost *__hidden);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  void (**v67)(SipParameterMap *__hidden);
  _QWORD *v68;
  _QWORD v69[3];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  void (**v85)(SipParameterMap *__hidden);
  _QWORD *v86;
  _QWORD v87[5];
  _QWORD v88[3];
  SipStack *v89;
  std::__shared_weak_count *v90;
  void (**v91)(SipContactParam *__hidden);
  _QWORD v92[10];
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  void (**v109)(SipParameterMap *__hidden);
  _QWORD *v110;
  _QWORD v111[5];
  uint64_t v112;
  __int128 v113;
  void (**v114)(SipParameterMap *__hidden);
  _QWORD **v115;
  _QWORD *v116[2];
  __int128 v117;
  _QWORD **v118;
  _QWORD *v119[2];
  std::string v120;

  memset(&v120, 0, sizeof(v120));
  if (!a3)
    goto LABEL_4;
  if (v6)
  {
    v7 = (const std::string *)(*(uint64_t (**)(void *))(*(_QWORD *)v6 + 112))(v6);
    std::string::operator=(&v120, v7);
LABEL_4:
    LODWORD(v8) = 0;
    goto LABEL_5;
  }
  v8 = v15;
  if (v15)
  {
    v16 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)v15);
    if (v16)
      v17 = (const std::string *)(v16 + 64);
    else
      v17 = (const std::string *)&ims::kEmptyString;
    std::string::operator=(&v120, v17);
    LODWORD(v8) = v8[22];
  }
LABEL_5:
  v117 = 0u;
  v113 = 0u;
  v111[2] = 257;
  v108 = 0u;
  v94 = 0u;
  v92[1] = &off_1E78D08F8;
  memset(&v92[2], 0, 48);
  v92[8] = &off_1E78B82D8;
  *(_QWORD *)&v94 = 0;
  v93 = 0;
  v92[9] = &v93;
  v91 = &off_1E78C8C40;
  v92[0] = &off_1E78BFCE8;
  v95 = 0u;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v102 = 0u;
  v103 = 0u;
  v104 = 0u;
  v105 = 0u;
  v106 = 0u;
  v107 = 0u;
  *(_QWORD *)&v108 = 0;
  v111[1] = 0;
  v111[0] = 0;
  v109 = &off_1E78B82D8;
  v110 = v111;
  *(_QWORD *)&v113 = 0;
  v112 = 0;
  v111[3] = &off_1E78B82D8;
  v111[4] = &v112;
  WORD4(v94) = 257;
  WORD4(v113) = 257;
  v116[1] = 0;
  v116[0] = 0;
  v114 = &off_1E78B82D8;
  v115 = v116;
  BYTE1(v117) = 1;
  v119[1] = 0;
  v119[0] = 0;
  v118 = v119;
  v9 = a2[77].__vftable;
  if (v9)
    v10 = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v9->~__shared_weak_count + 26))(v9);
  else
    v10 = 0;
  v11 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
  if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v120.__r_.__value_.__r.__words[2]);
  else
    size = v120.__r_.__value_.__l.__size_;
  if (size != 9)
    goto LABEL_44;
  if ((*((_BYTE *)&v120.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v120.__r_.__value_.__l.__data_, "SUBSCRIBE", v120.__r_.__value_.__l.__size_))
      goto LABEL_44;
LABEL_24:
    if ((_DWORD)v8)
      goto LABEL_44;
    shared_weak_owners = a2[8].__shared_weak_owners_;
    v19 = shared_weak_owners ? *(SipUserAgent **)(shared_weak_owners + 136) : 0;
    if (!*(_BYTE *)(SipUserAgent::config(v19) + 622))
      goto LABEL_44;
    v20 = (*(uint64_t (**)(uint64_t *))(a2[3].__shared_owners_ + 64))(&a2[3].__shared_owners_);
    (*(void (**)(uint64_t *, uint64_t))(a2[3].__shared_owners_ + 16))(&a2[3].__shared_owners_, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"Add services to contact for Subscribe Method", 44);
    *(_BYTE *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v20 + 17) = 0;
    v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a3 + 4, "Event");
    if (!v21)
      goto LABEL_44;
    v22 = (const void *)*((_QWORD *)v21 + 5);
    if (!v22)
      goto LABEL_44;
    if (!v23)
      goto LABEL_44;
    v24 = v23[127];
    v25 = (v24 & 0x80u) == 0 ? v23[127] : *((_QWORD *)v23 + 14);
    if (v25 != 10)
      goto LABEL_44;
    v26 = (const void **)(v23 + 104);
    if ((v24 & 0x80) != 0)
    {
      if (memcmp(*v26, "conference", *((_QWORD *)v23 + 14)))
        goto LABEL_44;
    }
    else if (v23[127])
    {
      v27 = "conference";
      while (*(unsigned __int8 *)v26 == *(unsigned __int8 *)v27)
      {
        v26 = (const void **)((char *)v26 + 1);
        ++v27;
        if (!--v24)
          goto LABEL_43;
      }
      goto LABEL_44;
    }
LABEL_43:
    v10 = 1;
    goto LABEL_44;
  }
  if (!*((_BYTE *)&v120.__r_.__value_.__s + 23))
    goto LABEL_24;
  v13 = &v120;
  v14 = "SUBSCRIBE";
  while (v13->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v14)
  {
    v13 = (std::string *)((char *)v13 + 1);
    ++v14;
    if (!--v11)
      goto LABEL_24;
  }
LABEL_44:
  SipDialog::stack(a2, &v60);
  v28 = (ImsPrefs *)SipStack::prefs(v60);
  AlwaysAddTextServiceKey = (void **)ImsPrefs::getAlwaysAddTextServiceKey(v28);
  v30 = ImsPrefs::prefWithKey(v28, AlwaysAddTextServiceKey);
  if (!v30)
  {
    if (!*((_BYTE *)AlwaysAddTextServiceKey + 57))
      goto LABEL_46;
LABEL_48:
    v31 = 1;
    goto LABEL_49;
  }
  if (((*(uint64_t (**)(void *))(*(_QWORD *)v30 + 40))(v30) & 1) != 0)
    goto LABEL_48;
LABEL_46:
  v31 = BYTE1(a2[80].__shared_weak_owners_) != 0;
LABEL_49:
  v32 = (std::__shared_weak_count *)v61;
  if (v61)
  {
    v33 = (unint64_t *)(v61 + 1);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  SipDialog::stack(a2, &v60);
  v35 = (ImsPrefs *)SipStack::prefs(v60);
  TTYOverImsSupportedKey = (void **)ImsPrefs::getTTYOverImsSupportedKey(v35);
  v37 = ImsPrefs::prefWithKey(v35, TTYOverImsSupportedKey);
  if (v37)
    v38 = (*(uint64_t (**)(void *))(*(_QWORD *)v37 + 40))(v37);
  else
    v38 = *((_BYTE *)TTYOverImsSupportedKey + 57) != 0;
  v39 = (std::__shared_weak_count *)v61;
  if (!v61)
    goto LABEL_61;
  v40 = (unint64_t *)(v61 + 1);
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (v41)
  {
LABEL_61:
    if (v38)
      goto LABEL_62;
LABEL_72:
    v10 &= ~0x20u;
    BYTE1(a2[80].__shared_weak_owners_) = 0;
    goto LABEL_83;
  }
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  if (!v38)
    goto LABEL_72;
LABEL_62:
  v42 = SipMessage::body<SipSdpBody>((uint64_t)a3);
  if (!v42)
  {
    v44 = 0;
    v60 = 0;
    v61 = 0;
    goto LABEL_74;
  }
  v43 = *((_QWORD *)v42 + 1);
  v44 = (std::__shared_weak_count *)*((_QWORD *)v42 + 2);
  v60 = (SipStack *)v43;
  v61 = (uint64_t (**)(SipHost *__hidden))v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldxr(p_shared_owners);
    while (__stxr(v46 + 1, p_shared_owners));
  }
  if (!v43)
  {
LABEL_74:
    if (!v31)
      goto LABEL_78;
    goto LABEL_77;
  }
  v48 = *(_QWORD *)(v43 + 416);
  v47 = *(_QWORD *)(v43 + 424);
  while (v48 != v47)
  {
    if (*(_DWORD *)(v48 + 12) == 4)
      goto LABEL_77;
    v48 += 200;
  }
  if (!v31)
    goto LABEL_78;
LABEL_77:
  shared_owners = a2[3].__shared_owners_;
  BYTE1(a2[80].__shared_weak_owners_) = 1;
  v50 = (*(uint64_t (**)(uint64_t *))(shared_owners + 64))(&a2[3].__shared_owners_);
  (*(void (**)(uint64_t *, uint64_t))(a2[3].__shared_owners_ + 16))(&a2[3].__shared_owners_, v50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v50 + 8), (uint64_t)"Adding text service feature tag to dialog", 41);
  *(_BYTE *)(v50 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v10 |= 0x20u;
  *(_BYTE *)(v50 + 17) = 0;
LABEL_78:
  if (v44)
  {
    v51 = (unint64_t *)&v44->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
LABEL_83:
  v89 = 0;
  v90 = 0;
  SipDialog::stack(a2, &v89);
  v53 = v89;
  if (v89 && *((_BYTE *)v89 + 2657))
  {
    v88[2] = 257;
    v87[2] = 257;
    v84 = 0;
    v69[2] = 257;
    v65 = 0u;
    v66 = 0;
    v63 = 0;
    v64 = 0;
    LOWORD(v65) = 0;
    v69[0] = 0;
    v69[1] = 0;
    v67 = &off_1E78B82D8;
    v68 = v69;
    v61 = &off_1E78D08F8;
    v62 = 0;
    v60 = (SipStack *)&off_1E78BFCE8;
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    v70 = 0u;
    v71 = 0u;
    v72 = 0u;
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v77 = 0u;
    v78 = 0u;
    v79 = 0u;
    v83 = 0;
    v87[0] = 0;
    v87[1] = 0;
    v85 = &off_1E78B82D8;
    v86 = v87;
    v88[0] = 0;
    v88[1] = 0;
    v87[3] = &off_1E78B82D8;
    v87[4] = v88;
    v54 = (ImsPrefs *)SipStack::prefs(v89);
    LazuliConferenceFactoryKey = (void **)ImsPrefs::getLazuliConferenceFactoryKey(v54);
    ImsPrefs::stringValue(v54, LazuliConferenceFactoryKey);
    SipUri::fromString((uint64_t)&v60, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((SipUri::matches((SipUri *)&a2[9].__shared_owners_, (const SipUri *)&v60) & 1) != 0)
      v10 = 0x20000;
    else
      v10 = SipStack::allRegisteredServices(v53);
    SipUri::~SipUri((SipUri *)&v60);
  }
  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  SipUserAgent::fillContactForServicesAndMethod(*(SipUserAgent **)(a2[8].__shared_weak_owners_ + 136), (uint64_t)&v91, v10, (unsigned __int8 *)&v120, (int)v8, (uint64_t)this);
  if (((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), *((unsigned int *)this + 4)) & 1) == 0)SipMessage::setContact((SipMessage *)a3, (const SipContactParam *)&v91);
  v56 = v90;
  if (v90)
  {
    v57 = (unint64_t *)&v90->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v91 = &off_1E78C8C40;
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)&v118, v119[0]);
  v114 = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v115, v116[0]);
  SipUri::~SipUri((SipUri *)v92);
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v120.__r_.__value_.__l.__data_);
}

void sub_1BF1144EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  uint64_t v66;

  SipContactParam::~SipContactParam((SipContactParam *)&a66);
  if (*(char *)(v66 - 89) < 0)
    operator delete(*(void **)(v66 - 112));
  _Unwind_Resume(a1);
}

void SipDialog::fillCommonRequestHeaders(uint64_t a1, uint64_t a2, _QWORD *a3, SipDialogFork **a4)
{
  SipHeader *v8;
  SipHeader *v9;
  SipHeader *v10;
  SipHeader *v11;
  SipHeader *v12;
  SipHeader *v13;
  SipHeader *v14;
  SipHeader *v15;
  uint64_t v16;
  _QWORD v17[9];

  SipMessage::removeHeadersWithName(a3, "Route");
  if (*a4)
    SipDialogFork::fillCommonRequestHeaders(*a4, (SipRequest *)a3);
  if (!SipUri::isValidUri((SipUri *)(a3 + 14)))
    SipUri::operator=((SipUri *)(a3 + 14), a2 + 224);
  v8 = SipMessage::header<SipFromHeader>((SipMessage *)a3, 1);
  SipUri::operator=((SipHeader *)((char *)v8 + 104), a2 + 664);
  v9 = SipMessage::header<SipToHeader>((SipMessage *)a3, 1);
  SipUri::operator=((SipHeader *)((char *)v9 + 104), a2 + 224);
  if ((*(char *)(a2 + 1095) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a2 + 1095))
      goto LABEL_8;
    goto LABEL_7;
  }
  if (*(_QWORD *)(a2 + 1080))
  {
LABEL_7:
    v10 = SipMessage::header<SipFromHeader>((SipMessage *)a3, 1);
    SipUriHeader::setTag((uint64_t)v10, a2 + 1072);
  }
LABEL_8:
  v11 = SipMessage::header<SipCallIdHeader>((SipMessage *)a3, 1);
  std::string::operator=((std::string *)((char *)v11 + 64), (const std::string *)(a2 + 1536));
  if ((*(char *)(a2 + 1615) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a2 + 1615))
      goto LABEL_11;
    goto LABEL_10;
  }
  if (*(_QWORD *)(a2 + 1600))
  {
LABEL_10:
    v12 = SipMessage::header<SipSessionIdHeader>((SipMessage *)a3, 1);
    std::string::operator=((std::string *)((char *)v12 + 64), (const std::string *)(a2 + 1592));
  }
LABEL_11:
  if ((*(char *)(a2 + 1671) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a2 + 1671))
      goto LABEL_14;
    goto LABEL_13;
  }
  if (*(_QWORD *)(a2 + 1656))
  {
LABEL_13:
    v13 = SipMessage::header<SipConversationIdHeader>((SipMessage *)a3, 1);
    std::string::operator=((std::string *)((char *)v13 + 64), (const std::string *)(a2 + 1648));
  }
LABEL_14:
  if ((*(char *)(a2 + 1727) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a2 + 1727))
      goto LABEL_17;
    goto LABEL_16;
  }
  if (*(_QWORD *)(a2 + 1712))
  {
LABEL_16:
    v14 = SipMessage::header<SipContributionIdHeader>((SipMessage *)a3, 1);
    std::string::operator=((std::string *)((char *)v14 + 64), (const std::string *)(a2 + 1704));
  }
LABEL_17:
  if ((*(char *)(a2 + 1783) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a2 + 1783))
      goto LABEL_20;
    goto LABEL_19;
  }
  if (*(_QWORD *)(a2 + 1768))
  {
LABEL_19:
    v15 = SipMessage::header<SipInReplyToContributionIdHeader>((SipMessage *)a3, 1);
    std::string::operator=((std::string *)((char *)v15 + 64), (const std::string *)(a2 + 1760));
  }
LABEL_20:
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  SipDialog::fillContactHeader((SipDialog *)a1, (std::__shared_weak_count *)a2, a3);
  if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16)) & 1) == 0)
  {
    v16 = *(_QWORD *)(a2 + 1848);
    if (v16)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v16 + 200))(v17, v16, a3);
      ImsResult::operator=(a1, (uint64_t)v17);
      ImsResult::~ImsResult((ImsResult *)v17);
    }
  }
}

void sub_1BF1147D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  ImsResult *v2;
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  ImsResult::~ImsResult(v2);
  _Unwind_Resume(a1);
}

SipRequest *SipDialog::createRequestInDialog(uint64_t a1, const std::string *a2, char a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  SipRequest *RequestFromTemplate;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
  v6 = *(std::__shared_weak_count **)(v5 + 16);
  if (v6)
  {
    v6 = std::__shared_weak_count::lock(v6);
    v7 = v6;
    if (v6)
      v6 = *(std::__shared_weak_count **)(v5 + 8);
  }
  else
  {
    v7 = 0;
  }
  RequestFromTemplate = SipStack::createRequestFromTemplate((uint64_t)v6, a2, a3);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return RequestFromTemplate;
}

void sub_1BF1148A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipDialog::setSenderIdentity(SipDialog *this, const SipUri *a2)
{
  uint64_t v4;
  SipUri *v5;

  v4 = *((_QWORD *)this + 79);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (SipUri *)operator new();
  SipUri::SipUri(v5, a2);
  *((_QWORD *)this + 79) = v5;
}

void sub_1BF114920(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C4064E45795);
  _Unwind_Resume(a1);
}

void SipDialog::resetCallIdAndTags(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v6;
  SipCallId *v7;
  uint64_t v8;
  std::string::size_type size;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  std::string v23;
  void *__p;
  char v25;
  std::string v26;
  void (**v27)(SipIdString *__hidden);
  void *v28[2];
  void *v29[4];
  void (**v30)(SipIdString *__hidden);
  std::string v31[2];
  uint64_t v32;
  std::__shared_weak_count *v33;

  memset(v31, 0, sizeof(v31));
  v30 = off_1E78CCB28;
  if (*(char *)(a1 + 1535) < 0)
    std::string::__init_copy_ctor_external(v31, *(const std::string::value_type **)(a1 + 1512), *(_QWORD *)(a1 + 1520));
  else
    v31[0] = *(std::string *)(a1 + 1512);
  if (*(char *)(a1 + 1559) < 0)
    std::string::__init_copy_ctor_external(&v31[1], *(const std::string::value_type **)(a1 + 1536), *(_QWORD *)(a1 + 1544));
  else
    v31[1] = *(std::string *)(a1 + 1536);
  v30 = off_1E78E0428;
  memset(v29, 0, sizeof(v29));
  *(_OWORD *)v28 = 0u;
  v27 = off_1E78CCB28;
  if (*(char *)(a1 + 1591) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v28, *(const std::string::value_type **)(a1 + 1568), *(_QWORD *)(a1 + 1576));
  }
  else
  {
    *(_OWORD *)v28 = *(_OWORD *)(a1 + 1568);
    v29[0] = *(void **)(a1 + 1584);
  }
  if (*(char *)(a1 + 1615) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v29[1], *(const std::string::value_type **)(a1 + 1592), *(_QWORD *)(a1 + 1600));
  }
  else
  {
    *(_OWORD *)&v29[1] = *(_OWORD *)(a1 + 1592);
    v29[3] = *(void **)(a1 + 1608);
  }
  v27 = off_1E78D72D8;
  memset(&v26, 0, sizeof(v26));
  v6 = (void **)(a1 + 1072);
  if (*(char *)(a1 + 1095) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(a1 + 1072), *(_QWORD *)(a1 + 1080));
  }
  else
  {
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)v6;
    v26.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 1088);
  }
  v7 = (SipCallId *)(a1 + 1504);
  v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if (v8)
    SipIdString::set((uint64_t)v7, (const std::string *)a2);
  else
    SipCallId::generate(v7);
  ImsRandomStringGenerator::randomString((ImsRandomStringGenerator *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 136) + 592), 10, &v23);
  if (*(char *)(a1 + 1095) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&v23.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 1088) = *((_QWORD *)&v23.__r_.__value_.__l + 2);
  size = HIBYTE(v31[1].__r_.__value_.__r.__words[2]);
  if ((v31[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v31[1].__r_.__value_.__l.__size_;
  if (size)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 64))(a1 + 80);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 16))(a1 + 80, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"replaced callId (", 17);
    *(_BYTE *)(v10 + 17) = 0;
    ((void (*)(uint64_t, uint64_t))v30[2])((uint64_t)&v30, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)") and localTag (", 16);
    *(_BYTE *)(v10 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&v23, &v26);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v10 + 56))(v10, &v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)")", 1);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (v25 < 0)
      operator delete(__p);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
  v11 = *(unsigned __int8 *)(a3 + 23);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a3 + 8);
  if (v11)
  {
    SipIdString::set(a1 + 1560, (const std::string *)a3);
    v12 = (void *)HIBYTE(v29[3]);
    if (SHIBYTE(v29[3]) < 0)
      v12 = v29[2];
    if (v12)
    {
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 64))(a1 + 80);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 16))(a1 + 80, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"replaced sessionId ", 19);
      *(_BYTE *)(v13 + 17) = 0;
      ((void (*)(uint64_t, uint64_t))v27[2])((uint64_t)&v27, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" with ", 6);
      *(_BYTE *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 1560) + 16))(a1 + 1560, v13);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v13 + 17) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 1920)
         && *(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(*(_QWORD *)(a1 + 208) + 136)) + 857))
  {
    if (*(char *)(a1 + 1615) < 0)
    {
      if (*(_QWORD *)(a1 + 1600))
        goto LABEL_47;
    }
    else if (*(_BYTE *)(a1 + 1615))
    {
      goto LABEL_47;
    }
    v14 = *(unsigned __int8 *)(a1 + 1559);
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(a1 + 1544);
    if (v14)
      SipSessionId::generateFromCallId((_QWORD *)(a1 + 1560), (const void **)(a1 + 1536));
  }
LABEL_47:
  SipDialog::stack((std::__shared_weak_count *)a1, &v23);
  if (v23.__r_.__value_.__r.__words[0])
  {
    SipDialog::stack((std::__shared_weak_count *)a1, &v32);
    v15 = v33;
    v16 = *(_QWORD *)(v32 + 136);
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  else
  {
    v16 = 0;
  }
  v19 = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v20 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (*(_BYTE *)(v16 + 233))
    v22 = random() & 0x7FFFFFFF;
  else
    v22 = 1;
  *(_DWORD *)(a1 + 1840) = v22;
  std::__tree<std::string>::destroy(a1 + 2016, *(char **)(a1 + 2024));
  *(_QWORD *)(a1 + 2016) = a1 + 2024;
  *(_QWORD *)(a1 + 2032) = 0;
  *(_QWORD *)(a1 + 2024) = 0;
  if (*(char *)(a1 + 2119) < 0)
  {
    **(_BYTE **)(a1 + 2096) = 0;
    *(_QWORD *)(a1 + 2104) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 2096) = 0;
    *(_BYTE *)(a1 + 2119) = 0;
  }
  SipDialog::removeAllForks((SipDialog *)a1);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  v27 = off_1E78CCB28;
  if (SHIBYTE(v29[3]) < 0)
    operator delete(v29[1]);
  if (SHIBYTE(v29[0]) < 0)
    operator delete(v28[0]);
  v30 = off_1E78CCB28;
  if (SHIBYTE(v31[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(v31[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31[0].__r_.__value_.__l.__data_);
}

void sub_1BF114ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  SipSessionId::~SipSessionId(&a22);
  SipCallId::~SipCallId(&a32);
  _Unwind_Resume(a1);
}

void SipDialog::updateLocalUri(SipDialog *this)
{
  const SipUri *v2;
  uint64_t v3;
  std::string::size_type size;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::string __p;
  _OWORD v10[25];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v2 = (const SipUri *)SipUserAgent::publicUri(*(SipUserAgent **)(*((_QWORD *)this + 26) + 136));
  SipUri::SipUri((SipUri *)v10, v2);
  memset(&__p, 0, sizeof(__p));
  v3 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
  if (*(char *)(v3 + 583) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v3 + 560), *(_QWORD *)(v3 + 568));
  else
    __p = *(std::string *)(v3 + 560);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
    std::string::operator=((std::string *)((char *)&v10[12] + 8), &__p);
  v5 = (char *)this + 664;
  SipUri::operator=((SipDialog *)((char *)this + 664), (uint64_t)v10);
  v7 = *((_QWORD *)this + 10);
  v6 = (char *)this + 80;
  v8 = (*(uint64_t (**)(char *))(v7 + 64))(v6);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v6 + 16))(v6, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"updated local URI to ", 21);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v5 + 40))(v5, v8);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  SipUri::~SipUri((SipUri *)v10);
}

void sub_1BF1150D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  SipUri::~SipUri((SipUri *)&a16);
  _Unwind_Resume(a1);
}

uint64_t SipDialog::updateRemoteUri(SipDialog *this, const SipUri *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t result;

  v3 = (char *)this + 224;
  SipUri::operator=((SipDialog *)((char *)this + 224), (uint64_t)a2);
  v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 10) + 64))((char *)this + 80);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 10) + 16))((char *)this + 80, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"updated remote URI to ", 22);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 28) + 40))(v3, v4);
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  return result;
}

double SipDialog::initializeMobileOriginated@<D0>(SipDialog *this@<X0>, const SipUri *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  double result;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  *((_BYTE *)this + 1920) = 1;
  *((_BYTE *)this + 1936) = 1;
  SipDialog::updateLocalUri(this);
  SipUri::operator=((SipDialog *)((char *)this + 224), (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(v12, (char *)&str_21_6);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_21_6);
  SipDialog::resetCallIdAndTags((uint64_t)this, (uint64_t)v12, (uint64_t)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  SipDialog::createFork(this, (uint64_t)v12);
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 2080, (__int128 *)v12);
  v6 = (std::__shared_weak_count *)v12[1];
  if (v12[1])
  {
    v7 = (unint64_t *)((char *)v12[1] + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

void sub_1BF1152BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void SipDialog::createFork(SipDialog *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v13, (_QWORD *)this + 24);
  SipDialogFork::create(&v13, (SipDialogFork **)a2);
  v4 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 656);
  v8 = *(std::__shared_weak_count **)(*(_QWORD *)a2 + 664);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_BYTE *)(v7 + 144) = *(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(*((_QWORD *)this + 26) + 136)) + 689);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BF1153E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void SipDialog::initializeMobileTerminated(SipDialog *this@<X0>, const SipRequest *a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 *v12;
  __int128 *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  SipDialogFork *v22;
  std::__shared_weak_count *v23;
  _BYTE v24[72];
  SipDialogFork *v25;
  std::__shared_weak_count *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = 0;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  (*(void (**)(__int128 *__return_ptr, const SipRequest *))(*(_QWORD *)a2 + 88))(&v27, a2);
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v27 + 1) + 24))(*((_QWORD *)&v27 + 1), v28))
  {
    ImsResult::ImsResult(a3, (uint64_t)&v27);
  }
  else
  {
    *((_BYTE *)this + 1920) = 0;
    v6 = SipMessage::header<SipToHeader>((uint64_t)a2);
    if (v6)
      v7 = (uint64_t)v6 + 104;
    else
      v7 = 0;
    SipUri::operator=((SipDialog *)((char *)this + 664), v7);
    v8 = SipMessage::header<SipFromHeader>((uint64_t)a2);
    if (v8)
      v9 = (uint64_t)v8 + 104;
    else
      v9 = 0;
    SipUri::operator=((SipDialog *)((char *)this + 224), v9);
    v10 = (char *)SipMessage::header<SipCallIdHeader>((uint64_t)a2);
    v11 = (char *)SipMessage::header<SipSessionIdHeader>((uint64_t)a2);
    if (v10)
      v12 = (__int128 *)(v10 + 64);
    else
      v12 = &ims::kEmptyString;
    if (v11)
      v13 = (__int128 *)(v11 + 64);
    else
      v13 = &ims::kEmptyString;
    SipDialog::resetCallIdAndTags((uint64_t)this, (uint64_t)v12, (uint64_t)v13);
    v25 = 0;
    v26 = 0;
    SipDialog::createFork(this, (uint64_t)&v25);
    SipDialogFork::initializeMobileTerminated(v25, a2, (uint64_t)v24);
    ImsResult::operator=((uint64_t)&v27, (uint64_t)v24);
    ImsResult::~ImsResult((ImsResult *)v24);
    if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v27 + 1) + 24))(*((_QWORD *)&v27 + 1), v28))
    {
      ImsResult::ImsResult(a3, (uint64_t)&v27);
    }
    else
    {
      v22 = v25;
      v23 = v26;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      SipDialog::addFork((uint64_t **)this, (uint64_t *)&v22);
      v16 = v23;
      if (v23)
      {
        v17 = (unint64_t *)&v23->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 40) = 0u;
      *(_OWORD *)(a3 + 56) = 0u;
      *(_QWORD *)a3 = &off_1E78B7238;
      *(_QWORD *)(a3 + 8) = &_bambiDomain;
      *(_DWORD *)(a3 + 16) = 0;
    }
    v19 = v26;
    if (v26)
    {
      v20 = (unint64_t *)&v26->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  ImsResult::~ImsResult((ImsResult *)&v27);
}

void sub_1BF115634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  ImsResult::~ImsResult((ImsResult *)va2);
  _Unwind_Resume(a1);
}

void SipDialog::addFork(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void **v19;

  v17 = 0;
  v18 = 0;
  SipDialog::sipSession((SipDialog *)a1, &v17);
  v4 = v17;
  if (v17)
  {
    v5 = a2[1];
    v15 = *a2;
    v16 = (std::__shared_weak_count *)v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 312))(v4, &v15);
    v8 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v19 = (void **)(*a2 + 152);
  v11 = std::__tree<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 255, v19, (__int128 **)&v19);
  std::shared_ptr<IpAddress>::operator=[abi:ne180100](v11 + 7, a2);
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1BF115788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void SipDialog::resetIfNecessary(std::string *this)
{
  std::string::size_type *data;
  SipDialog *v3;
  SipDialog *v4;
  BOOL v5;
  char *v6;
  char *v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::string::size_type *v18;
  SipDialog *v19;
  SipDialog *v20;
  void ***v21;
  void ***v22;
  void **v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::string::size_type size;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  void **v40;
  std::__shared_weak_count *v41;
  void **p_p;
  std::__shared_weak_count *v43;
  void *v44;
  std::__shared_weak_count *v45;
  void *__p;
  std::__shared_weak_count *v47;
  uint64_t v48;
  void *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  std::string v54;

  if (this[80].__r_.__value_.__s.__data_[0] && this[80].__r_.__value_.__s.__data_[16])
  {
    v53 = 0u;
    memset(&v54, 0, sizeof(v54));
    v52 = 0u;
    SipIdString::SipIdString((SipIdString *)&v52);
    *(_QWORD *)&v52 = off_1E78E0428;
    if (*(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(this[8].__r_.__value_.__r.__words[2] + 136)) + 1122))
    {
      std::string::operator=((std::string *)((char *)&v52 + 8), this + 63);
      std::string::operator=(&v54, this + 64);
      std::string::basic_string[abi:ne180100]<0>(&v49, (char *)&str_21_6);
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_21_6);
      SipDialog::resetCallIdAndTags((uint64_t)this, (uint64_t)&v49, (uint64_t)&__p);
      if (SHIBYTE(v48) < 0)
        operator delete(__p);
      if (SHIBYTE(v51) < 0)
        operator delete(v49);
    }
    v49 = 0;
    v50 = 0;
    v51 = 0;
    data = (std::string::size_type *)this[82].__r_.__value_.__l.__data_;
    if (data != &this[82].__r_.__value_.__r.__words[1])
    {
      do
      {
        std::vector<std::shared_ptr<SipPreconditions::ForkStatus>>::push_back[abi:ne180100]((uint64_t)&v49, data[7], data[8]);
        v3 = (SipDialog *)data[1];
        if (v3)
        {
          do
          {
            v4 = v3;
            v3 = *(SipDialog **)v3;
          }
          while (v3);
        }
        else
        {
          do
          {
            v4 = (SipDialog *)data[2];
            v5 = *(_QWORD *)v4 == (_QWORD)data;
            data = (std::string::size_type *)v4;
          }
          while (!v5);
        }
        data = (std::string::size_type *)v4;
      }
      while (v4 != (SipDialog *)&this[82].__r_.__value_.__r.__words[1]);
      v6 = (char *)v49;
      v7 = v50;
      while (v6 != v7)
      {
        v8 = *(void **)v6;
        v9 = (std::__shared_weak_count *)*((_QWORD *)v6 + 1);
        __p = *(void **)v6;
        v47 = v9;
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldxr(p_shared_owners);
          while (__stxr(v11 + 1, p_shared_owners));
          v45 = v9;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
        }
        else
        {
          v45 = 0;
        }
        v44 = v8;
        SipDialog::removeClientTransaction(this, &v44);
        if (v9)
        {
          v13 = (unint64_t *)&v9->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v15 = v47;
        if (v47)
        {
          v16 = (unint64_t *)&v47->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v6 += 16;
      }
    }
    __p = 0;
    v47 = 0;
    v48 = 0;
    v18 = (std::string::size_type *)this[81].__r_.__value_.__l.__data_;
    if (v18 != &this[81].__r_.__value_.__r.__words[1])
    {
      do
      {
        std::vector<std::shared_ptr<SipPreconditions::ForkStatus>>::push_back[abi:ne180100]((uint64_t)&__p, v18[7], v18[8]);
        v19 = (SipDialog *)v18[1];
        if (v19)
        {
          do
          {
            v20 = v19;
            v19 = *(SipDialog **)v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v20 = (SipDialog *)v18[2];
            v5 = *(_QWORD *)v20 == (_QWORD)v18;
            v18 = (std::string::size_type *)v20;
          }
          while (!v5);
        }
        v18 = (std::string::size_type *)v20;
      }
      while (v20 != (SipDialog *)&this[81].__r_.__value_.__r.__words[1]);
      v21 = (void ***)__p;
      v22 = (void ***)v47;
      while (v21 != v22)
      {
        v23 = *v21;
        v24 = (std::__shared_weak_count *)v21[1];
        p_p = *v21;
        v43 = v24;
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
          v41 = v24;
          do
            v27 = __ldxr(v25);
          while (__stxr(v27 + 1, v25));
        }
        else
        {
          v41 = 0;
        }
        v40 = v23;
        SipDialog::removeServerTransaction((uint64_t)this, &v40);
        if (v24)
        {
          v28 = (unint64_t *)&v24->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v30 = v43;
        if (v43)
        {
          v31 = (unint64_t *)&v43->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v21 += 2;
      }
    }
    SipDialog::removeAllForks((SipDialog *)this);
    size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v54.__r_.__value_.__l.__size_;
    if (size)
    {
      v34 = this[8].__r_.__value_.__r.__words[2];
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v38, this[8].__r_.__value_.__r.__words);
      SipDialogManager::updateDialogMap(v34, (uint64_t)&v54, (__int128 *)&this[64], &v38);
      v35 = v39;
      if (v39)
      {
        v36 = (unint64_t *)&v39->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
    }
    p_p = &__p;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&p_p);
    __p = &v49;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    *(_QWORD *)&v52 = off_1E78CCB28;
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53) < 0)
      operator delete(*((void **)&v52 + 1));
  }
}

void sub_1BF115BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void **p_p, uint64_t a14, char a15, uint64_t a16, void **__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  p_p = (void **)&__p;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&p_p);
  __p = &a23;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&__p);
  SipCallId::~SipCallId((void **)(v28 - 96));
  _Unwind_Resume(a1);
}

void SipDialog::removeClientTransaction(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  void *v22[2];
  char v23;
  void *__p[2];
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  v4 = a1[231];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)a2[1];
    v26 = *a2;
    v27 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 216))(v4, &v26);
    v8 = v27;
    if (v27)
    {
      v9 = (unint64_t *)&v27->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v11 = (*(uint64_t (**)(_QWORD *))(a1[10] + 64))(a1 + 10);
  (*(void (**)(_QWORD *, uint64_t))(a1[10] + 16))(a1 + 10, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"removing ", 9);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 152))(__p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 40))(v11, __p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  __p[0] = 0;
  __p[1] = 0;
  v25 = 0;
  v12 = *a2;
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 288) + 112))(*(_QWORD *)(*a2 + 288));
  SipTransaction::transactionMapKey(v12 + 320, v13, (uint64_t)__p);
  v14 = (_QWORD *)a1[247];
  if (v14)
  {
    v15 = a1 + 247;
    do
    {
      v16 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v14 + 4, __p);
      if (v16 >= 0)
        v17 = v14;
      else
        v17 = v14 + 1;
      if (v16 >= 0)
        v15 = v14;
      v14 = (_QWORD *)*v17;
    }
    while (*v17);
    if (v15 != a1 + 247
      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (void **)v15 + 4) & 0x80) == 0)
    {
      v18 = (_QWORD *)v15[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        v20 = v15;
        do
        {
          v19 = (_QWORD *)v20[2];
          v21 = *v19 == (_QWORD)v20;
          v20 = v19;
        }
        while (!v21);
      }
      if ((_QWORD *)a1[246] == v15)
        a1[246] = v19;
      --a1[248];
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[247], v15);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)(v15 + 4));
      operator delete(v15);
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 152))(v22);
      (*(void (**)(_QWORD *, void **))(a1[1] + 40))(a1 + 1, v22);
      if (v23 < 0)
        operator delete(v22[0]);
    }
  }
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
}

void sub_1BF115ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void SipDialog::removeServerTransaction(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  BOOL v20;
  void *v21[2];
  char v22;
  void *__p[2];
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v4 = *(_QWORD *)(a1 + 1848);
  if (v4)
  {
    v5 = (std::__shared_weak_count *)a2[1];
    v25 = *a2;
    v26 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 224))(v4, &v25);
    v8 = v26;
    if (v26)
    {
      v9 = (unint64_t *)&v26->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 64))(a1 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 16))(a1 + 80, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"removing ", 9);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 160))(__p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 40))(v11, __p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  __p[0] = 0;
  __p[1] = 0;
  v24 = 0;
  v12 = *a2;
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 288) + 112))(*(_QWORD *)(*a2 + 288));
  SipTransaction::transactionMapKey(v12 + 320, v13, (uint64_t)__p);
  v14 = (uint64_t **)(a1 + 1944);
  v15 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 1944, __p);
  v16 = v15;
  if ((uint64_t *)(a1 + 1952) != v15)
  {
    v17 = (uint64_t *)v15[1];
    if (v17)
    {
      do
      {
        v18 = v17;
        v17 = (uint64_t *)*v17;
      }
      while (v17);
    }
    else
    {
      v19 = v15;
      do
      {
        v18 = (uint64_t *)v19[2];
        v20 = *v18 == (_QWORD)v19;
        v19 = v18;
      }
      while (!v20);
    }
    if (*v14 == v15)
      *v14 = v18;
    --*(_QWORD *)(a1 + 1960);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1952), v15);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)(v16 + 4));
    operator delete(v16);
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 160))(v21);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8, v21);
  if (v22 < 0)
    operator delete(v21[0]);
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
}

void sub_1BF116154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void SipDialog::removeForkWithRemoteTag(uint64_t a1, std::string *a2)
{
  uint64_t v4;
  void **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *v27;
  std::__shared_weak_count *v28;
  char v29;
  void *__p;
  char v31;

  v4 = a1 + 2040;
  v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 2040, (void **)&a2->__r_.__value_.__l.__data_);
  if ((void **)(a1 + 2048) != v5)
  {
    v6 = (uint64_t *)v5;
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 64))(a1 + 80);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 16))(a1 + 80, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"removing fork ", 14);
    *(_BYTE *)(v7 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&v27, a2);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 56))(v7, &v27);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v31 < 0)
      operator delete(__p);
    if (v29 < 0)
      operator delete(v27);
    v9 = (void *)v6[7];
    v8 = v6[8];
    v27 = v9;
    v28 = (std::__shared_weak_count *)v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = (uint64_t *)v6[1];
    if (v12)
    {
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v14 = v6;
      do
      {
        v13 = (uint64_t *)v14[2];
        v15 = *v13 == (_QWORD)v14;
        v14 = v13;
      }
      while (!v15);
    }
    if (*(uint64_t **)v4 == v6)
      *(_QWORD *)v4 = v13;
    --*(_QWORD *)(a1 + 2056);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 2048), v6);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)(v6 + 4));
    operator delete(v6);
    if (v9 == *(void **)(a1 + 2064))
    {
      if (*(_QWORD *)(a1 + 2056) == 1)
      {
        v19 = *(std::__shared_weak_count **)(*(_QWORD *)v4 + 64);
        v25 = *(_QWORD *)(*(_QWORD *)v4 + 56);
        v26 = v19;
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
      }
      else
      {
        v25 = 0;
        v26 = 0;
      }
      SipDialog::setActiveFork((SipDialog *)a1, &v25, 1);
      v22 = v26;
      if (v26)
      {
        v23 = (unint64_t *)&v26->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
    v16 = v28;
    if (v28)
    {
      v17 = (unint64_t *)&v28->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
}

void sub_1BF1163E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SipDialog::setActiveFork(SipDialog *a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  ImsPrefs *v18;
  void **SelectForkWithActiveEarlyMediaKey;
  void *v20;
  ImsPrefs *v21;
  void **SelectLatestForkWithActiveEarlyMediaKey;
  void *v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  SipStack *v39;
  std::__shared_weak_count *v40;
  SipStack *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  SipSessionInterface *v45[2];
  char v46;
  void *__p;
  char v48;

  v4 = (uint64_t)a1 + 2064;
  v5 = *((_QWORD *)a1 + 258);
  if (*a2)
  {
    if (v5 == *a2 && (a3 & 1) == 0)
    {
      v8 = (_QWORD *)((char *)a1 + 80);
      v9 = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)a1 + 10) + 64))((_QWORD *)a1 + 10);
      (*(void (**)(_QWORD *, uint64_t))(*v8 + 16))(v8, v9);
      ObfuscatedString::ObfuscatedString((uint64_t)v45, (const std::string *)(*a2 + 152));
      (*(void (**)(uint64_t, SipSessionInterface **))(*(_QWORD *)v9 + 56))(v9, v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" was already the active fork", 28);
      *(_BYTE *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v9 + 17) = 0;
      if (v48 < 0)
        operator delete(__p);
      if (v46 < 0)
        operator delete(v45[0]);
      return;
    }
    std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)a1 + 258, a2);
    v13 = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)a1 + 10) + 64))((_QWORD *)a1 + 10);
    (*(void (**)(_QWORD *, uint64_t))(*((_QWORD *)a1 + 10) + 16))((_QWORD *)a1 + 10, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"active fork is now ", 19);
    *(_BYTE *)(v13 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)v45, (const std::string *)(*a2 + 152));
    (*(void (**)(uint64_t, SipSessionInterface **))(*(_QWORD *)v13 + 56))(v13, v45);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    if (v48 < 0)
      operator delete(__p);
    if (v46 < 0)
      operator delete(v45[0]);
    v45[0] = 0;
    v45[1] = 0;
    SipDialog::sipSession(a1, v45);
    v14 = (std::__shared_weak_count *)v45[0];
    if (!v45[0])
      goto LABEL_53;
    v15 = a2[1];
    v43 = *a2;
    v44 = (std::__shared_weak_count *)v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    if (a3)
    {
      SipSessionInterface::stack(v14, &v41);
      v18 = (ImsPrefs *)SipStack::prefs(v41);
      SelectForkWithActiveEarlyMediaKey = (void **)ImsPrefs::getSelectForkWithActiveEarlyMediaKey(v18);
      v20 = ImsPrefs::prefWithKey(v18, SelectForkWithActiveEarlyMediaKey);
      if (v20)
      {
        if (((*(uint64_t (**)(void *))(*(_QWORD *)v20 + 40))(v20) & 1) == 0)
        {
LABEL_24:
          SipSessionInterface::stack(v14, &v39);
          v21 = (ImsPrefs *)SipStack::prefs(v39);
          SelectLatestForkWithActiveEarlyMediaKey = (void **)ImsPrefs::getSelectLatestForkWithActiveEarlyMediaKey(v21);
          v23 = ImsPrefs::prefWithKey(v21, SelectLatestForkWithActiveEarlyMediaKey);
          if (v23)
            v24 = (*(uint64_t (**)(void *))(*(_QWORD *)v23 + 40))(v23);
          else
            v24 = *((_BYTE *)SelectLatestForkWithActiveEarlyMediaKey + 57) != 0;
          v28 = 1;
          goto LABEL_36;
        }
      }
      else if (!*((_BYTE *)SelectForkWithActiveEarlyMediaKey + 57))
      {
        goto LABEL_24;
      }
      v28 = 0;
      v24 = 1;
    }
    else
    {
      v28 = 0;
      v24 = 0;
    }
LABEL_36:
    SipSession::handleActiveForkChanged((uint64_t)v14, (std::string::size_type *)&v43, v24);
    if (v28)
    {
      v29 = v40;
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
    if (a3)
    {
      v32 = v42;
      if (v42)
      {
        v33 = (unint64_t *)&v42->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
    }
    v35 = v44;
    if (v44)
    {
      v36 = (unint64_t *)&v44->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
LABEL_53:
    v25 = (std::__shared_weak_count *)v45[1];
    if (!v45[1])
      return;
    v38 = (unint64_t *)((char *)v45[1] + 8);
    do
      v27 = __ldaxr(v38);
    while (__stlxr(v27 - 1, v38));
    goto LABEL_56;
  }
  v10 = (_QWORD *)((char *)a1 + 80);
  v11 = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)a1 + 10) + 64))((_QWORD *)a1 + 10);
  (*(void (**)(_QWORD *, uint64_t))(*v10 + 16))(v10, v11);
  v12 = *(_QWORD **)(v11 + 8);
  if (v5)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"setActiveFork ", 14);
    *(_BYTE *)(v11 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)v45, (const std::string *)(*(_QWORD *)v4 + 152));
    (*(void (**)(uint64_t, SipSessionInterface **))(*(_QWORD *)v11 + 56))(v11, v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" to null", 8);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (v48 < 0)
      operator delete(__p);
    if (v46 < 0)
      operator delete(v45[0]);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"setActiveFork (already null) to null", 36);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
  }
  v45[0] = 0;
  v45[1] = 0;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](v4, (__int128 *)v45);
  v25 = (std::__shared_weak_count *)v45[1];
  if (v45[1])
  {
    v26 = (unint64_t *)((char *)v45[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
LABEL_56:
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1BF1168C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void SipDialog::forkForBearerPort(SipDialog *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, _DWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  uint64_t shared_owners;
  uint64_t shared_weak_owners;
  uint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  BOOL v35;
  _BYTE *v36;
  ImsPrefs *v37;
  void **RequireBearerPortMatchForPreconditionsKey;
  void *v39;
  char v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v62;
  SipStack *v64;
  std::__shared_weak_count *v65;
  char v66;
  void *v67;
  std::__shared_weak_count *v68;
  char v69;
  void *__p;
  char v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;

  v6 = (_QWORD *)*((_QWORD *)a1 + 255);
  v62 = (_QWORD *)((char *)a1 + 2048);
  if (v6 != (_QWORD *)((char *)a1 + 2048))
  {
    v7 = a2;
    v8 = (_QWORD *)((char *)a1 + 80);
    if (a3)
      v9 = "local";
    else
      v9 = "remote";
    v10 = 5;
    if (!a3)
      v10 = 6;
    v59 = v10;
    v60 = (uint64_t)v9;
    do
    {
      *a5 = 0;
      a5[1] = 0;
      *a5 = v6[7];
      v11 = v6[8];
      a5[1] = v11;
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v72 = 0;
      v73 = 0;
      if (a3)
      {
        v14 = *(void **)(*a5 + 656);
        v15 = *(std::__shared_weak_count **)(*a5 + 664);
        v67 = v14;
        v68 = v15;
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldxr(p_shared_owners);
          while (__stxr(v17 + 1, p_shared_owners));
        }
        SipOfferAnswer::activeLocalSdp((SipOfferAnswer *)v14, &v72);
        if (v15)
        {
          v18 = (unint64_t *)&v15->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          goto LABEL_25;
        }
      }
      else
      {
        v20 = *(void **)(*a5 + 656);
        v15 = *(std::__shared_weak_count **)(*a5 + 664);
        v67 = v20;
        v68 = v15;
        if (v15)
        {
          v21 = (unint64_t *)&v15->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        SipOfferAnswer::activeRemoteSdp((SipOfferAnswer *)v20, &v72);
        if (v15)
        {
          v23 = (unint64_t *)&v15->__shared_owners_;
          do
            v19 = __ldaxr(v23);
          while (__stlxr(v19 - 1, v23));
LABEL_25:
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
      if (v72)
      {
        shared_owners = v72[17].__shared_owners_;
        shared_weak_owners = v72[17].__shared_weak_owners_;
        while (shared_owners != shared_weak_owners)
        {
          v26 = (*(uint64_t (**)(_QWORD *))(*v8 + 64))(v8);
          (*(void (**)(_QWORD *, uint64_t))(*v8 + 16))(v8, v26);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"Fork ", 5);
          *(_BYTE *)(v26 + 17) = 0;
          ObfuscatedString::ObfuscatedString((uint64_t)&v67, (const std::string *)(*a5 + 152));
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v26 + 56))(v26, &v67);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)" has media port ", 16);
          *(_BYTE *)(v26 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v26 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v26 + 17) = 0;
          if (v71 < 0)
            operator delete(__p);
          if (v69 < 0)
            operator delete(v67);
          if (*(_QWORD *)(shared_owners + 16) == v7)
          {
            if (a4)
              *a4 = *(_DWORD *)(shared_owners + 12);
            v36 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v8 + 64))(v8);
            (*(void (**)(_QWORD *, _BYTE *))(*v8 + 16))(v8, v36);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)v36 + 1), (uint64_t)"Matched ", 8);
            v36[17] = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)v36 + 1), v60, v59);
            v36[17] = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)v36 + 1), (uint64_t)" fork ", 6);
            v36[17] = 0;
            ObfuscatedString::ObfuscatedString((uint64_t)&v67, (const std::string *)(*a5 + 152));
            (*(void (**)(_BYTE *, void **))(*(_QWORD *)v36 + 56))(v36, &v67);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)v36 + 1), (uint64_t)" with media type ", 17);
            v36[17] = 0;
            (*(void (**)(_BYTE *, SipStack **))(*(_QWORD *)v36 + 32))(v36, &v64);
            (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v36[17] = 0;
            if (v66 < 0)
              operator delete(v64);
            if (v71 < 0)
              operator delete(__p);
            if (v69 < 0)
              operator delete(v67);
            v29 = 0;
            v28 = 1;
            goto LABEL_41;
          }
          shared_owners += 200;
        }
      }
      else
      {
        v27 = (*(uint64_t (**)(_QWORD *))(*v8 + 48))(v8);
        (*(void (**)(_QWORD *, uint64_t))(*v8 + 16))(v8, v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"No active remote SDP for fork ", 30);
        *(_BYTE *)(v27 + 17) = 0;
        ObfuscatedString::ObfuscatedString((uint64_t)&v67, (const std::string *)(*a5 + 152));
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v27 + 56))(v27, &v67);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v27 + 17) = 0;
        if (v71 < 0)
          operator delete(__p);
        if (v69 < 0)
          operator delete(v67);
      }
      v28 = 0;
      v29 = 1;
LABEL_41:
      v30 = v73;
      if (v73)
      {
        v31 = (unint64_t *)&v73->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
          if ((v28 & 1) != 0)
            goto LABEL_47;
LABEL_46:
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)a5);
          goto LABEL_47;
        }
      }
      if ((v28 & 1) == 0)
        goto LABEL_46;
LABEL_47:
      if (!v29)
        return;
      v33 = (_QWORD *)v6[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v6[2];
          v35 = *v34 == (_QWORD)v6;
          v6 = v34;
        }
        while (!v35);
      }
      v6 = v34;
    }
    while (v34 != v62);
  }
  SipDialog::sipSession(a1, &v67);
  if (v67)
  {
    SipDialog::sipSession(a1, &v72);
    SipSessionInterface::stack(v72, &v64);
    v37 = (ImsPrefs *)SipStack::prefs(v64);
    RequireBearerPortMatchForPreconditionsKey = (void **)ImsPrefs::getRequireBearerPortMatchForPreconditionsKey(v37);
    v39 = ImsPrefs::prefWithKey(v37, RequireBearerPortMatchForPreconditionsKey);
    if (v39)
      v40 = (*(uint64_t (**)(void *))(*(_QWORD *)v39 + 40))(v39);
    else
      v40 = *((_BYTE *)RequireBearerPortMatchForPreconditionsKey + 57) != 0;
    v41 = v65;
    if (v65)
    {
      v42 = (unint64_t *)&v65->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = v73;
    if (v73)
    {
      v45 = (unint64_t *)&v73->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
  }
  else
  {
    v40 = 0;
  }
  v47 = v68;
  if (!v68)
    goto LABEL_85;
  v48 = (unint64_t *)&v68->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
    if ((v40 & 1) != 0)
      goto LABEL_86;
  }
  else
  {
LABEL_85:
    if ((v40 & 1) != 0)
    {
LABEL_86:
      *a5 = 0;
      a5[1] = 0;
      return;
    }
  }
  v50 = *((_QWORD *)a1 + 260);
  if (v50)
  {
    v51 = *((_QWORD *)a1 + 261);
    *a5 = v50;
    a5[1] = v51;
    if (v51)
    {
      v52 = (unint64_t *)(v51 + 8);
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
  }
  else
  {
    if (*((_QWORD *)a1 + 257) != 1)
      goto LABEL_86;
    v54 = *((_QWORD *)a1 + 255);
    *a5 = *(_QWORD *)(v54 + 56);
    v55 = *(_QWORD *)(v54 + 64);
    a5[1] = v55;
    if (v55)
    {
      v56 = (unint64_t *)(v55 + 8);
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
  }
}

void sub_1BF116FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v22 - 96);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void *SipDialog::sipSession@<X0>(SipDialog *this@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = (void *)*((_QWORD *)this + 231);
  if (result
  {
    v5 = *((_QWORD *)this + 232);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void SipDialog::performBlockOnForks(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  if (a1[260])
  {
    v4 = (std::__shared_weak_count *)a1[261];
    v23 = a1[260];
    v24 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *))(a2 + 16))(a2, &v23);
    v7 = v24;
    if (v24)
    {
      v8 = (unint64_t *)&v24->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v10 = (_QWORD *)a1[255];
  v11 = a1 + 256;
  if (v10 != a1 + 256)
  {
    do
    {
      v12 = (std::__shared_weak_count *)v10[8];
      v21 = v10[7];
      v22 = v12;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      (*(void (**)(uint64_t, uint64_t *))(a2 + 16))(a2, &v21);
      v15 = v22;
      if (v22)
      {
        v16 = (unint64_t *)&v22->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = (_QWORD *)v10[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v10[2];
          v20 = *v19 == (_QWORD)v10;
          v10 = v19;
        }
        while (!v20);
      }
      v10 = v19;
    }
    while (v19 != v11);
  }
}

void sub_1BF117214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SipDialog::allForks(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v2 = *(_QWORD **)(a1 + 2040);
  v3 = (_QWORD *)(a1 + 2048);
  if (v2 != (_QWORD *)(a1 + 2048))
  {
    do
    {
      std::vector<std::shared_ptr<SipDialogFork>>::push_back[abi:ne180100](a2, (__int128 *)(v2 + 7));
      v5 = (_QWORD *)v2[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v2[2];
          v7 = *v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
}

void std::vector<std::shared_ptr<SipDialogFork>>::push_back[abi:ne180100](uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    v10 = *(_QWORD **)a1;
    v11 = ((uint64_t)v5 - *(_QWORD *)a1) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v13 = v4 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v15 = (char *)operator new(16 * v14);
    v16 = &v15[16 * v11];
    v17 = *a2;
    *(_OWORD *)v16 = *a2;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v10 = *(_QWORD **)a1;
      v5 = *(_QWORD **)(a1 + 8);
    }
    if (v5 == v10)
    {
      v9 = v16 + 16;
      *(_QWORD *)a1 = v16;
      *(_QWORD *)(a1 + 8) = v16 + 16;
      *(_QWORD *)(a1 + 16) = &v15[16 * v14];
    }
    else
    {
      v20 = &v15[16 * v11];
      do
      {
        v21 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *v5 = 0;
        v5[1] = 0;
      }
      while (v5 != v10);
      v10 = *(_QWORD **)a1;
      v22 = *(_QWORD *)(a1 + 8);
      v9 = v16 + 16;
      *(_QWORD *)a1 = v20;
      *(_QWORD *)(a1 + 8) = v16 + 16;
      *(_QWORD *)(a1 + 16) = &v15[16 * v14];
      while ((_QWORD *)v22 != v10)
      {
        v22 -= 16;
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v22);
      }
    }
    if (v10)
      operator delete(v10);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *v5 = *(_QWORD *)a2;
    v5[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v5 + 2;
  }
  *(_QWORD *)(a1 + 8) = v9;
}

void SipDialog::terminateForkWithBye(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  SipRequest *RequestInDialog;
  uint64_t v9;
  SipHeader *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  SipDialogFork *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  void *v30[2];
  char v31;
  void *__p;
  char v33;

  v6 = a1 + 80;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 64))(a1 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"sending BYE to fork ", 20);
  *(_BYTE *)(v7 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)v30, (const std::string *)(*a2 + 152));
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 56))(v7, v30);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v33 < 0)
    operator delete(__p);
  if (v31 < 0)
    operator delete(v30[0]);
  RequestInDialog = SipDialog::createRequestInDialog(a1, (const std::string *)&SipRequest::kMethodBye, 0);
  v9 = *(unsigned __int8 *)(a3 + 23);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a3 + 8);
  if (v9 && *(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(*(_QWORD *)(a1 + 208) + 136)) + 612))
  {
    v10 = SipMessage::header<SipReasonHeader>(RequestInDialog, 1);
    SipReasonHeader::addReason(v10, &SipReason::kProtocolSip, 0, a3);
  }
  v11 = (std::__shared_weak_count *)a2[1];
  v26 = (SipDialogFork *)*a2;
  v27 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  SipDialog::sendRequestInFork(&v28, a1, RequestInDialog, &v26);
  v14 = v29;
  if (v29)
  {
    v15 = (unint64_t *)&v29->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v27;
  if (v27)
  {
    v18 = (unint64_t *)&v27->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (RequestInDialog)
    (*(void (**)(SipRequest *))(*(_QWORD *)RequestInDialog + 8))(RequestInDialog);
  v20 = *a2;
  v21 = (std::__shared_weak_count *)a2[1];
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  if (v20)
    SipDialog::removeForkWithRemoteTag(a1, (std::string *)(v20 + 152));
  if (v21)
  {
    v24 = (unint64_t *)&v21->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1BF117658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipDialog::sendRequestInFork(_QWORD *a1, uint64_t a2, SipRequest *a3, SipDialogFork **a4)
{
  SipDialogFork *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  SipDialogFork *v16;
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  SipDialogFork *v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v8 = a4[1];
  v24[0] = *a4;
  v24[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)((char *)v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  SipDialog::fillCommonRequestHeaders((uint64_t)&v25, a2, a3, v24);
  if (v8)
  {
    v11 = (unint64_t *)((char *)v8 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(SipDialogFork *))(*(_QWORD *)v8 + 16))(v8);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
    }
  }
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v25 + 1) + 24))(*((_QWORD *)&v25 + 1), v26))
  {
    v14 = *(_QWORD *)(a2 + 80);
    v13 = a2 + 80;
    v15 = (_BYTE *)(*(uint64_t (**)(uint64_t))(v14 + 56))(v13);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v13 + 16))(v13, v15);
    (*(void (**)(__int128 *, _BYTE *))(v25 + 16))(&v25, v15);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v15[17] = 0;
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    v16 = *a4;
    if (*a4)
    {
      v17 = *((_DWORD *)v16 + 45);
      *((_DWORD *)v16 + 45) = v17 + 1;
    }
    else
    {
      v18 = *(_QWORD *)(a2 + 2080);
      if (v18)
        ++*(_DWORD *)(v18 + 180);
      v17 = *(_DWORD *)(a2 + 1840);
      *(_DWORD *)(a2 + 1840) = v17 + 1;
    }
    SipRequest::setCSeq(a3, v17);
    v22 = 0;
    v23 = 0;
    SipDialog::internalSendRequest(a1, a2, a3, &v22);
    v19 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  ImsResult::~ImsResult((ImsResult *)&v25);
}

void sub_1BF117850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ImsResult::~ImsResult((ImsResult *)&a13);
  _Unwind_Resume(a1);
}

void SipDialog::addForkFromResponse(uint64_t *a1, SipDialog *this, const SipMessage *a3, uint64_t *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v28 = 0;
  v29 = 0;
  SipDialog::createFork(this, (uint64_t)&v28);
  v26 = v28;
  v27 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *a4;
  v11 = (std::__shared_weak_count *)a4[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = SipDialog::addForkFromResponse((uint64_t)this, &v26, a3, v10, v11);
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v17 = v27;
  if (v27)
  {
    v18 = (unint64_t *)&v27->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if (v14)
        goto LABEL_17;
LABEL_22:
      *a1 = 0;
      a1[1] = 0;
      goto LABEL_23;
    }
  }
  if (!v14)
    goto LABEL_22;
LABEL_17:
  v20 = v29;
  *a1 = v28;
  a1[1] = (uint64_t)v20;
  if (!v20)
    return;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
LABEL_23:
  v23 = v29;
  if (v29)
  {
    v24 = (unint64_t *)&v29->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1BF1179F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t SipDialog::addForkFromResponse(uint64_t a1, uint64_t *a2, const SipMessage *a3, uint64_t a4, std::__shared_weak_count *a5)
{
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  _QWORD *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v40;
  std::__shared_weak_count *v41;
  SipSession *v42;
  std::__shared_weak_count *v43;
  _QWORD v44[2];
  void *v45;
  _QWORD *v46;
  uint64_t v47;
  void *v48;
  char v49;
  void *__p[2];
  char v51;
  _QWORD v52[2];

  v8 = *a2;
  v44[0] = a4;
  v44[1] = a5;
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  SipDialogFork::initializeMobileOriginated(v8, a3, (uint64_t)v44, (uint64_t)&v45);
  v11 = (*(uint64_t (**)(_QWORD *, _QWORD))(*v46 + 24))(v46, v47);
  ImsResult::~ImsResult((ImsResult *)&v45);
  if (!a5)
    goto LABEL_8;
  v12 = (unint64_t *)&a5->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
    std::__shared_weak_count::__release_weak(a5);
    if (v11)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    if (v11)
    {
LABEL_9:
      v15 = *(_QWORD *)(a1 + 80);
      v14 = a1 + 80;
      v16 = (*(uint64_t (**)(uint64_t))(v15 + 56))(v14);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"unable to add new fork", 22);
      *(_BYTE *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v16 + 17) = 0;
      return v11 ^ 1u;
    }
  }
  v42 = 0;
  v43 = 0;
  SipDialog::sipSession((SipDialog *)a1, &v42);
  if (*(_QWORD *)(a1 + 2056)
    && v42
    && (SipSession::confirmed(v42) & 1) == 0
    && !*(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(*(_QWORD *)(a1 + 208) + 136)) + 611))
  {
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v17 = *(_QWORD **)(a1 + 2040);
    v18 = (_QWORD *)(a1 + 2048);
    if (v17 != (_QWORD *)(a1 + 2048))
    {
      do
      {
        std::vector<std::shared_ptr<SipDialogFork>>::push_back[abi:ne180100]((uint64_t)&v45, (__int128 *)(v17 + 7));
        v19 = (_QWORD *)v17[1];
        if (v19)
        {
          do
          {
            v20 = v19;
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v20 = (_QWORD *)v17[2];
            v21 = *v20 == (_QWORD)v17;
            v17 = v20;
          }
          while (!v21);
        }
        v17 = v20;
      }
      while (v20 != v18);
      v22 = v45;
      v23 = v46;
      if (v45 != v46)
      {
        do
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 2016), (void **)(*v22 + 152), *v22 + 152);
          v24 = (std::__shared_weak_count *)v22[1];
          v52[0] = *v22;
          v52[1] = v24;
          if (v24)
          {
            v25 = (unint64_t *)&v24->__shared_owners_;
            do
              v26 = __ldxr(v25);
            while (__stxr(v26 + 1, v25));
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "New Dialog Established");
          SipDialog::terminateForkWithBye(a1, v52, (uint64_t)__p);
          if (v51 < 0)
            operator delete(__p[0]);
          if (v24)
          {
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          v22 += 2;
        }
        while (v22 != v23);
      }
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*(_QWORD **)(a1 + 2048));
    *(_QWORD *)(a1 + 2040) = v18;
    *(_OWORD *)(a1 + 2048) = 0u;
    __p[0] = &v45;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 64))(a1 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 16))(a1 + 80, v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"adding fork ", 12);
  *(_BYTE *)(v29 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&v45, (const std::string *)(*a2 + 152));
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v29 + 56))(v29, &v45);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v29 + 17) = 0;
  if (v49 < 0)
    operator delete(v48);
  if (SHIBYTE(v47) < 0)
    operator delete(v45);
  v30 = (std::__shared_weak_count *)a2[1];
  v40 = *a2;
  v41 = v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  SipDialog::addFork((uint64_t **)a1, &v40);
  v33 = v41;
  if (v41)
  {
    v34 = (unint64_t *)&v41->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v43;
  if (v43)
  {
    v37 = (unint64_t *)&v43->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  return v11 ^ 1u;
}

void sub_1BF117E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a29 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v29 - 96);
  __p = &a15;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SipDialog::collapseForks(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const void **v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void *v36[2];
  char v37;
  void *__p;
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;

  v42 = 0;
  v43 = 0;
  v4 = *(_QWORD **)(a1 + 2040);
  v5 = (_QWORD *)(a1 + 2048);
  if (v4 != (_QWORD *)(a1 + 2048))
  {
    v6 = a1 + 80;
    do
    {
      v8 = v4[7];
      v7 = (std::__shared_weak_count *)v4[8];
      v40 = v8;
      v41 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      v11 = *(unsigned __int8 *)(v8 + 175);
      v12 = *(_QWORD *)(v8 + 160);
      if ((v11 & 0x80u) == 0)
        v13 = *(unsigned __int8 *)(v8 + 175);
      else
        v13 = *(_QWORD *)(v8 + 160);
      v14 = a2[23];
      v15 = (char)v14;
      if ((v14 & 0x80u) != 0)
        v14 = *((_QWORD *)a2 + 1);
      if (v13 != v14)
        goto LABEL_21;
      v16 = (const void **)(v8 + 152);
      if (v15 >= 0)
        v17 = a2;
      else
        v17 = *(unsigned __int8 **)a2;
      if ((v11 & 0x80) != 0)
      {
        if (memcmp(*v16, v17, v12))
          goto LABEL_21;
      }
      else if ((_DWORD)v11)
      {
        while (*(unsigned __int8 *)v16 == *v17)
        {
          v16 = (const void **)((char *)v16 + 1);
          ++v17;
          if (!--v11)
            goto LABEL_25;
        }
LABEL_21:
        v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(a1 + 80);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(a1 + 80, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"removing losing fork ", 21);
        *(_BYTE *)(v18 + 17) = 0;
        ObfuscatedString::ObfuscatedString((uint64_t)v36, (const std::string *)(v40 + 152));
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v18 + 56))(v18, v36);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v18 + 17) = 0;
        if (v39 < 0)
          operator delete(__p);
        if (v37 < 0)
          operator delete(v36[0]);
        goto LABEL_30;
      }
LABEL_25:
      v19 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v6 + 64))(a1 + 80, v17);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(a1 + 80, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"keeping winning fork ", 21);
      *(_BYTE *)(v19 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v36, (const std::string *)(v40 + 152));
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v19 + 56))(v19, v36);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v19 + 17) = 0;
      if (v39 < 0)
        operator delete(__p);
      if (v37 < 0)
        operator delete(v36[0]);
      std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v42, &v40);
LABEL_30:
      v20 = v41;
      if (v41)
      {
        v21 = (unint64_t *)&v41->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = (_QWORD *)v4[1];
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v4[2];
          v25 = *v24 == (_QWORD)v4;
          v4 = v24;
        }
        while (!v25);
      }
      v4 = v24;
    }
    while (v24 != v5);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*(_QWORD **)(a1 + 2048));
  *(_QWORD *)(a1 + 2040) = v5;
  *(_OWORD *)(a1 + 2048) = 0u;
  if (v42)
  {
    v36[0] = a2;
    v26 = std::__tree<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 2040), (void **)a2, (__int128 **)v36);
    std::shared_ptr<IpAddress>::operator=[abi:ne180100](v26 + 7, &v42);
    std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 + 2064), &v42);
  }
  else
  {
    v36[0] = 0;
    v36[1] = 0;
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 2064, (__int128 *)v36);
    v27 = (std::__shared_weak_count *)v36[1];
    if (v36[1])
    {
      v28 = (unint64_t *)((char *)v36[1] + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v31 = *(_QWORD *)(a1 + 80);
    v30 = a1 + 80;
    v32 = (*(uint64_t (**)(uint64_t))(v31 + 56))(v30);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"collapseForks: couldn't find fork with tag ", 43);
    *(_BYTE *)(v32 + 17) = 0;
    (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v32 + 32))(v32, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v32 + 17) = 0;
  }
  v33 = v43;
  if (v43)
  {
    v34 = (unint64_t *)&v43->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1BF1182A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SipDialog::loggableName(SipDialog *this@<X0>, std::string *a2@<X8>)
{
  int v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  int v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  const char *v16;
  uint64_t v17;
  std::__shared_weak_count *shared_owners;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v4 = *((char *)this + 2119);
  if (v4 < 0)
    v5 = *((_QWORD *)this + 263);
  else
    v5 = *((unsigned __int8 *)this + 2119);
  v6 = (void **)((char *)this + 2096);
  if (!v5)
  {
    v24 = 0;
    v22 = 0u;
    v23 = 0u;
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v22, 1);
    v7 = *((_QWORD *)this + 26);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 136);
      v9 = *(std::__shared_weak_count **)(v8 + 16);
      if (v9)
      {
        v10 = std::__shared_weak_count::lock(v9);
        if (v10)
        {
          v11 = v10;
          v12 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + 176);
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v11);
          }
          v15 = (_QWORD *)*((_QWORD *)&v22 + 1);
          if (!v12)
            goto LABEL_19;
LABEL_17:
          v16 = "Emergency Dialog ";
          v17 = 17;
LABEL_20:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
          BYTE1(v23) = 0;
          (*(void (**)(char *, __int128 *))(*((_QWORD *)this + 188) + 16))((char *)this + 1504, &v22);
          v21.std::__shared_count = 0uLL;
          SipDialog::stack(&v21, *((_QWORD *)this + 26));
          if (v21.__vftable && BYTE1(v21.__vftable[66].__on_zero_shared))
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v22 + 1), (uint64_t)" ConvId ", 8);
            BYTE1(v23) = 0;
            (*(void (**)(char *, __int128 *))(*((_QWORD *)this + 202) + 16))((char *)this + 1616, &v22);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v22 + 1), (uint64_t)" ContribId ", 11);
            BYTE1(v23) = 0;
            (*(void (**)(char *, __int128 *))(*((_QWORD *)this + 209) + 16))((char *)this + 1672, &v22);
          }
          shared_owners = (std::__shared_weak_count *)v21.__shared_owners_;
          if (v21.__shared_owners_)
          {
            v19 = (unint64_t *)(v21.__shared_owners_ + 8);
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
              std::__shared_weak_count::__release_weak(shared_owners);
            }
          }
          ImsStringOutStream::loggableStr((ImsStringOutStream *)&v22, (std::string *)&v21);
          if (*((char *)this + 2119) < 0)
            operator delete(*v6);
          *(std::__shared_count *)v6 = v21.std::__shared_count;
          *((_QWORD *)this + 264) = v21.__shared_weak_owners_;
          *(_QWORD *)&v22 = &off_1E78D7A10;
          if ((_BYTE)v23)
          {
            if (*((_QWORD *)&v22 + 1))
              (*(void (**)(_QWORD))(**((_QWORD **)&v22 + 1) + 8))(*((_QWORD *)&v22 + 1));
          }
          if ((*((_BYTE *)this + 2119) & 0x80) == 0)
            goto LABEL_6;
          goto LABEL_34;
        }
      }
      v15 = (_QWORD *)*((_QWORD *)&v22 + 1);
      if (MEMORY[0xB0])
        goto LABEL_17;
    }
    else
    {
      v15 = (_QWORD *)*((_QWORD *)&v22 + 1);
    }
LABEL_19:
    v16 = "Dialog ";
    v17 = 7;
    goto LABEL_20;
  }
  if ((v4 & 0x80) == 0)
  {
LABEL_6:
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v6;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 264);
    return;
  }
LABEL_34:
  std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 262), *((_QWORD *)this + 263));
}

void sub_1BF118538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15)
  {
    if (a14)
      (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'SipDialog::loggableName(SipDialog *this@<X0>, std::string *a2@<X8>)
{
  SipDialog::loggableName((SipDialog *)((char *)this - 8), a2);
}

void SipDialog::logPrefix(SipDialog *this, ImsOutStream *a2)
{
  std::__shared_weak_count *shared_owners;
  unint64_t *v5;
  unint64_t v6;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;
  std::__shared_weak_count v11;

  v11.__vftable = 0;
  v11.__shared_owners_ = 0;
  SipDialog::stack(&v11, *((_QWORD *)this + 26));
  if (v11.__vftable)
  {
    (*((void (**)(void **__return_ptr))v11.~__shared_weak_count + 13))(v9);
    (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" [", 2);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(void **__return_ptr, SipDialog *))(*(_QWORD *)this + 56))(__p, this);
    (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"]: ", 3);
    *((_BYTE *)a2 + 17) = 0;
    if (v8 < 0)
      operator delete(__p[0]);
  }
  else
  {
    (*(void (**)(void **__return_ptr, SipDialog *))(*(_QWORD *)this + 56))(v9, this);
    (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
    *((_BYTE *)a2 + 17) = 0;
  }
  if (v10 < 0)
    operator delete(v9[0]);
  shared_owners = (std::__shared_weak_count *)v11.__shared_owners_;
  if (v11.__shared_owners_)
  {
    v5 = (unint64_t *)(v11.__shared_owners_ + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
      std::__shared_weak_count::__release_weak(shared_owners);
    }
  }
}

void sub_1BF1186E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v20 - 32);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipDialog::logPrefix(SipDialog *this, ImsOutStream *a2)
{
  SipDialog::logPrefix((SipDialog *)((char *)this - 80), a2);
}

uint64_t SipDialog::subscriptionTerminated(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  std::string::size_type v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::string *v14;
  void **v15;
  void **v16;
  uint64_t i;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v40;
  std::__shared_weak_count *v41;
  std::string v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::string __p;
  std::string::size_type v48;
  std::string::size_type size;
  _OWORD v50[3];

  memset(v50, 0, sizeof(v50));
  v4 = a1 + 24;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v42, a1 + 24);
  if (v42.__r_.__value_.__r.__words[0])
    v5 = v42.__r_.__value_.__r.__words[0] + 8;
  else
    v5 = 0;
  v48 = v5;
  size = v42.__r_.__value_.__l.__size_;
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = 0uLL;
  LoggableString::LoggableString((LoggableString *)&__p, "subscriptionTerminated");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v50, (uint64_t *)&v48, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = (std::__shared_weak_count *)size;
  if (size)
  {
    v7 = (unint64_t *)(size + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)v42.__r_.__value_.__l.__size_;
  if (v42.__r_.__value_.__l.__size_)
  {
    v10 = (unint64_t *)(v42.__r_.__value_.__l.__size_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = a1 + 10;
  v13 = (*(uint64_t (**)(_QWORD *))(a1[10] + 64))(a1 + 10);
  (*(void (**)(_QWORD *, uint64_t))(a1[10] + 16))(a1 + 10, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"SipDialog::subscriptionTerminated", 33);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  v45 = 0;
  v46 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v45, v4);
  v14 = (std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 248) + 16))(*(_QWORD *)(*a2 + 248));
  v15 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(a1 + 249), (void **)&v14->__r_.__value_.__l.__data_);
  v16 = v15;
  if (a1 + 250 == v15)
  {
    v24 = (*(uint64_t (**)(_QWORD *))(*v12 + 32))(a1 + 10);
    (*(void (**)(_QWORD *, uint64_t))(*v12 + 16))(a1 + 10, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"received termination notice for unknown subscription event ", 59);
    *(_BYTE *)(v24 + 17) = 0;
    LoggableString::LoggableString(&__p, v14);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v24 + 40))(v24, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v24 + 17) = 0;
  }
  else
  {
    for (i = (uint64_t)v15[7]; (void *)i != v16[8]; i += 16)
    {
      v18 = *(_QWORD *)i;
      v19 = *(std::__shared_weak_count **)(i + 8);
      v43 = *(_QWORD *)i;
      v44 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
        if (v18 == *a2)
        {
LABEL_33:
          std::operator+<char>();
          LoggableString::LoggableString(&__p, &v42);
          (*(void (**)(_QWORD *, std::string *))(a1[1] + 40))(a1 + 1, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v42.__r_.__value_.__l.__data_);
          v25 = *a2;
          v40 = 0;
          v41 = 0;
          std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v25 + 232), &v40);
          v26 = v41;
          if (v41)
          {
            v27 = (unint64_t *)&v41->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          v29 = i + 16;
          v30 = v16[8];
          if ((void *)(i + 16) != v30)
          {
            do
            {
              v31 = i + 16;
              std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](i, (__int128 *)(i + 16));
              v32 = i + 32;
              i += 16;
            }
            while ((void *)v32 != v30);
            v29 = (uint64_t)v16[8];
            i = v31;
          }
          while (v29 != i)
            v29 = std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v29 - 16);
          v16[8] = (void *)i;
          v33 = v44;
          if (v44)
          {
            v34 = (unint64_t *)&v44->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          goto LABEL_52;
        }
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      else if (v18 == *a2)
      {
        goto LABEL_33;
      }
    }
    v23 = (*(uint64_t (**)(_QWORD *))(*v12 + 32))(a1 + 10);
    (*(void (**)(_QWORD *, uint64_t))(*v12 + 16))(v12, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"received termination notice for ", 32);
    *(_BYTE *)(v23 + 17) = 0;
    LoggableString::LoggableString(&__p, v14);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v23 + 40))(v23, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"subscription with id ", 21);
    *(_BYTE *)(v23 + 17) = 0;
    LoggableString::LoggableString(&v42, (const std::string *)(*a2 + 448));
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v23 + 40))(v23, &v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)", but it doesn't exist in this dialog", 37);
    *(_BYTE *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v23 + 17) = 0;
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_52:
  v36 = v46;
  if (v46)
  {
    v37 = (unint64_t *)&v46->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v50);
}

void sub_1BF118C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,char a29)
{
  if (a26 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void **SipDialog::subscriptionForEvent@<X0>(uint64_t a1@<X0>, void **a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  void **result;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  result = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 1992, a2);
  if ((void **)(a1 + 2000) == result)
    goto LABEL_27;
  v8 = *((char *)a3 + 23);
  if (v8 >= 0)
    v9 = *((unsigned __int8 *)a3 + 23);
  else
    v9 = a3[1];
  v10 = result[7];
  v11 = result[8];
  if (v9)
  {
    if (v10 != v11)
    {
      if (v8 < 0)
        a3 = (_QWORD *)*a3;
      do
      {
        v12 = *v10;
        v13 = *(unsigned __int8 *)(*v10 + 471);
        if ((v13 & 0x80u) == 0)
          v14 = *(unsigned __int8 *)(*v10 + 471);
        else
          v14 = *(_QWORD *)(*v10 + 456);
        if (v14 == v9)
        {
          v15 = (const void **)(v12 + 448);
          if ((v13 & 0x80) != 0)
          {
            result = (void **)memcmp(*v15, a3, *(_QWORD *)(*v10 + 456));
            if (!(_DWORD)result)
            {
LABEL_29:
              v20 = v10[1];
              *a4 = v12;
              a4[1] = v20;
              if (v20)
              {
                v21 = (unint64_t *)(v20 + 8);
                do
                  v22 = __ldxr(v21);
                while (__stxr(v22 + 1, v21));
              }
              return result;
            }
          }
          else
          {
            if (!*(_BYTE *)(*v10 + 471))
              goto LABEL_29;
            v16 = (unsigned __int8 *)a3;
            while (*(unsigned __int8 *)v15 == *v16)
            {
              v15 = (const void **)((char *)v15 + 1);
              ++v16;
              if (!--v13)
                goto LABEL_29;
            }
          }
        }
        v10 += 2;
      }
      while (v10 != v11);
    }
LABEL_27:
    *a4 = 0;
    a4[1] = 0;
    return result;
  }
  if (v10 == v11)
    goto LABEL_27;
  v17 = v10[1];
  *a4 = *v10;
  a4[1] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  return result;
}

uint64_t SipDialog::subscribeToEventPackage@<X0>(uint64_t a1@<X0>, SipEventPackage *a2@<X1>, const std::string *a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  std::string::size_type v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  SipSubscription *v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t **v33;
  uint64_t *v34;
  uint64_t **v35;
  _QWORD *v36;
  std::string *v37;
  __int128 v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  char *v56;
  __int128 v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  __int128 v66;
  std::string::size_type v67;
  std::string::size_type size;
  _OWORD v69[3];
  std::string __p;
  std::string v71;

  memset(v69, 0, sizeof(v69));
  v10 = (_QWORD *)(a1 + 192);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&__p, (_QWORD *)(a1 + 192));
  if (__p.__r_.__value_.__r.__words[0])
    v11 = __p.__r_.__value_.__r.__words[0] + 8;
  else
    v11 = 0;
  v67 = v11;
  size = __p.__r_.__value_.__l.__size_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  LoggableString::LoggableString((LoggableString *)&v71, "subscribeToEventPackage");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v69, (uint64_t *)&v67, &v71);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  v12 = (std::__shared_weak_count *)size;
  if (size)
  {
    v13 = (unint64_t *)(size + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v16 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 64))(a1 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 16))(a1 + 80, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"SipDialog::subscribeToEventPackage", 34);
  *(_BYTE *)(v18 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v18 + 17) = 0;
  v66 = 0uLL;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v64, v10);
  SipSubscription::create(&v64, a2, a3, (std::string **)&v66);
  v19 = v65;
  if (!v65)
    goto LABEL_20;
  p_shared_owners = (unint64_t *)&v65->__shared_owners_;
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if ((a4 & 1) != 0)
      goto LABEL_28;
  }
  else
  {
LABEL_20:
    if ((a4 & 1) != 0)
      goto LABEL_28;
  }
  v22 = (SipSubscription *)v66;
  v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v66 + 248) + 56))(*(_QWORD *)(v66 + 248));
  if (!SipSubscription::subscribeWithExpiration(v22, v23))
  {
    *a5 = 0;
    a5[1] = 0;
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
    if (*((_QWORD *)&v66 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v69);
  }
LABEL_28:
  v27 = v66;
  v63 = v66;
  v28 = *((_QWORD *)&v66 + 1);
  if (*((_QWORD *)&v66 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v62 = v27;
  v31 = v27;
  v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v27 + 248) + 16))(*(_QWORD *)(v27 + 248));
  __p.__r_.__value_.__r.__words[0] = 0;
  v33 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1 + 1992, &__p, (void **)v32);
  v34 = *v33;
  if (!*v33)
  {
    v35 = v33;
    v71.__r_.__value_.__r.__words[2] = 0;
    v36 = operator new(0x50uLL);
    v71.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
    v71.__r_.__value_.__l.__size_ = a1 + 2000;
    v37 = (std::string *)(v36 + 4);
    if (*(char *)(v32 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v37, *(const std::string::value_type **)v32, *(_QWORD *)(v32 + 8));
      v34 = (uint64_t *)v71.__r_.__value_.__r.__words[0];
    }
    else
    {
      v38 = *(_OWORD *)v32;
      v36[6] = *(_QWORD *)(v32 + 16);
      *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
      v34 = v36;
    }
    v36[7] = 0;
    v36[8] = 0;
    v36[9] = 0;
    v71.__r_.__value_.__s.__data_[16] = 1;
    std::__tree<unsigned int>::__insert_node_at((uint64_t **)(a1 + 1992), (uint64_t)__p.__r_.__value_.__l.__data_, v35, v34);
    v71.__r_.__value_.__r.__words[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v71, 0);
  }
  v39 = (_QWORD *)v34[8];
  v40 = v34[9];
  if ((unint64_t)v39 >= v40)
  {
    v44 = v34[7];
    v45 = ((uint64_t)v39 - v44) >> 4;
    v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 60)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v47 = v40 - v44;
    if (v47 >> 3 > v46)
      v46 = v47 >> 3;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
      v48 = 0xFFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<BambiCallAction>>>(v48);
    v51 = &v49[16 * v45];
    *(_OWORD *)v51 = v62;
    if (v28)
    {
      v52 = (unint64_t *)(v28 + 8);
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    v54 = (_QWORD *)v34[7];
    v55 = (_QWORD *)v34[8];
    if (v55 == v54)
    {
      v43 = v51 + 16;
      v34[7] = (uint64_t)v51;
      v34[8] = (uint64_t)(v51 + 16);
      v34[9] = (uint64_t)&v49[16 * v50];
    }
    else
    {
      v56 = v51;
      do
      {
        v57 = *((_OWORD *)v55 - 1);
        v55 -= 2;
        *((_OWORD *)v56 - 1) = v57;
        v56 -= 16;
        *v55 = 0;
        v55[1] = 0;
      }
      while (v55 != v54);
      v55 = (_QWORD *)v34[7];
      v58 = v34[8];
      v43 = v51 + 16;
      v34[7] = (uint64_t)v56;
      v34[8] = (uint64_t)(v51 + 16);
      v34[9] = (uint64_t)&v49[16 * v50];
      while ((_QWORD *)v58 != v55)
      {
        v58 -= 16;
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v58);
      }
    }
    if (v55)
      operator delete(v55);
  }
  else
  {
    *v39 = v31;
    v39[1] = v28;
    if (v28)
    {
      v41 = (unint64_t *)(v28 + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v43 = v39 + 2;
  }
  v34[8] = (uint64_t)v43;
  (*(void (**)(_QWORD))(**(_QWORD **)(v63 + 248) + 16))(*(_QWORD *)(v63 + 248));
  std::operator+<char>();
  LoggableString::LoggableString(&v71, &__p);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)(a1 + 8) + 32))(a1 + 8, &v71);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*((_QWORD *)&v63 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v63 + 1) + 16))(*((_QWORD *)&v63 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v63 + 1));
    }
  }
  *(_OWORD *)a5 = v66;
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v69);
}

