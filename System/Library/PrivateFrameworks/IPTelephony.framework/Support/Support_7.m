void sub_1BF119354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,void *>>>>::reset[abi:ne180100](v30 - 104, 0);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t SipDialog::cancelAllSubscriptions(std::__shared_weak_count *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  char v12;
  SipSubscription **v13;
  SipSubscription **v14;
  _BOOL4 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *size;
  unint64_t *v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unsigned __int8 *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  SipDialog *v31;
  SipDialog *v32;
  BOOL v33;
  SipStack *v35;
  std::__shared_weak_count *v36;
  std::string __p;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  _OWORD v42[3];

  if (this[83].__shared_weak_owners_)
  {
    memset(v42, 0, sizeof(v42));
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v38, &this[8].__vftable);
    if (v38)
      v2 = v38 + 8;
    else
      v2 = 0;
    v40 = v2;
    v41 = v39;
    v38 = 0;
    v39 = 0;
    LoggableString::LoggableString((LoggableString *)&__p, "cancelAllSubscriptions");
    SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v42, &v40, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v3 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = v39;
    if (v39)
    {
      v7 = (unint64_t *)&v39->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = &this[3].__shared_owners_;
    v10 = (*(uint64_t (**)(uint64_t *))(this[3].__shared_owners_ + 64))(&this[3].__shared_owners_);
    (*(void (**)(uint64_t *, uint64_t))(this[3].__shared_owners_ + 16))(&this[3].__shared_owners_, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"canceling all subscriptions", 27);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    v11 = (uint64_t *)this[83].__vftable;
    v12 = 1;
    if (v11 != &this[83].__shared_owners_)
    {
      while (1)
      {
        v14 = (SipSubscription **)v11[7];
        v13 = (SipSubscription **)v11[8];
        if (v14 != v13)
          break;
LABEL_57:
        v31 = (SipDialog *)v11[1];
        if (v31)
        {
          do
          {
            v32 = v31;
            v31 = *(SipDialog **)v31;
          }
          while (v31);
        }
        else
        {
          do
          {
            v32 = (SipDialog *)v11[2];
            v33 = *(_QWORD *)v32 == (_QWORD)v11;
            v11 = (uint64_t *)v32;
          }
          while (!v33);
        }
        v11 = (uint64_t *)v32;
        if (v32 == (SipDialog *)&this[83].__shared_owners_)
          goto LABEL_63;
      }
      while (1)
      {
        SipDialog::stack(this, &__p);
        if (*(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 200) == 2)
        {
          SipDialog::stack(this, &v38);
          if (*(_BYTE *)(v38 + 4208))
          {
            v15 = 0;
          }
          else
          {
            SipDialog::stack(this, &v35);
            v15 = SipStack::requiresLimitedAvailability(v35);
            v27 = v36;
            if (v36)
            {
              v28 = (unint64_t *)&v36->__shared_owners_;
              do
                v29 = __ldaxr(v28);
              while (__stlxr(v29 - 1, v28));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }
          }
          v16 = v39;
          if (v39)
          {
            v17 = (unint64_t *)&v39->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
        else
        {
          v15 = 0;
        }
        size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (!__p.__r_.__value_.__l.__size_)
          goto LABEL_32;
        v20 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
          if (v15)
          {
LABEL_33:
            v22 = SipSubscription::terminateWithoutUnsubscribing(*v14);
            goto LABEL_53;
          }
        }
        else
        {
LABEL_32:
          if (v15)
            goto LABEL_33;
        }
        if (!*(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(this[8].__shared_weak_owners_ + 136)) + 815))
        {
          v23 = *((unsigned __int8 *)v11 + 55);
          v24 = (v23 & 0x80u) == 0 ? *((unsigned __int8 *)v11 + 55) : v11[5];
          if (v24 == 3)
          {
            if ((v23 & 0x80) != 0)
            {
              if (!memcmp((const void *)v11[4], &SipRegistrationEventPackage::kPackageName, v11[5]))
              {
LABEL_56:
                v30 = (*(uint64_t (**)(uint64_t *))(*v9 + 64))(&this[3].__shared_owners_);
                (*(void (**)(uint64_t *, uint64_t))(*v9 + 16))(&this[3].__shared_owners_, v30);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"not canceling reg subscription", 30);
                *(_BYTE *)(v30 + 17) = 0;
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(_BYTE *)(v30 + 17) = 0;
                goto LABEL_54;
              }
            }
            else
            {
              if (!*((_BYTE *)v11 + 55))
                goto LABEL_56;
              v25 = &SipRegistrationEventPackage::kPackageName;
              v26 = (unsigned __int8 *)(v11 + 4);
              while (*v26 == *v25)
              {
                ++v26;
                ++v25;
                if (!--v23)
                  goto LABEL_56;
              }
            }
          }
        }
        v22 = SipSubscription::unsubscribe(*v14);
LABEL_53:
        v12 &= v22;
LABEL_54:
        v14 += 2;
        if (v14 == v13)
          goto LABEL_57;
      }
    }
LABEL_63:
    SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v42);
  }
  else
  {
    v12 = 1;
  }
  return v12 & 1;
}

void sub_1BF119818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

std::string *SipDialog::setSessionIdFromDialog(std::string *this, const SipDialog *a2)
{
  uint64_t v2;
  uint64_t v4;
  std::string::value_type *v5;
  uint64_t v6;

  v2 = *((unsigned __int8 *)a2 + 1615);
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)a2 + 200);
  if (v2)
  {
    v4 = (uint64_t)this;
    v5 = &this[3].__r_.__value_.__s.__data_[8];
    v6 = (*(uint64_t (**)(std::string::size_type *))(this[3].__r_.__value_.__l.__size_ + 64))(&this[3].__r_.__value_.__l.__size_);
    (*(void (**)(std::string::value_type *, uint64_t))(*(_QWORD *)v5 + 16))(v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"carrying Session-ID from ", 25);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(char *, uint64_t))(*(_QWORD *)((char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24)) + 16))((char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24), v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" to ", 4);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)) + 16))(v4 + *(_QWORD *)(*(_QWORD *)v4 - 24), v6);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    std::string::operator=((std::string *)(v4 + 1568), (const std::string *)((char *)a2 + 1568));
    return std::string::operator=((std::string *)(v4 + 1592), (const std::string *)((char *)a2 + 1592));
  }
  return this;
}

uint64_t SipDialog::handleRequest(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _BOOL4 v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  SipUriHeader *v35;
  __int128 *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void **v41;
  std::string *v42;
  void **v43;
  __int128 *v44;
  _QWORD *v45;
  void **v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  SipUriHeader *v52;
  __int128 *v53;
  uint64_t v54;
  const std::string *v55;
  SipUriHeader *v56;
  __int128 *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  ImsResult *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  SipUriHeader *v69;
  __int128 *v70;
  _QWORD *v71;
  uint64_t v72;
  int v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  void **v82;
  const std::string *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  const std::string *v94;
  SipUriHeader *v95;
  __int128 *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  char updated;
  char v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  const std::string *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  _QWORD v122[9];
  uint64_t v123;
  std::__shared_weak_count *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  _QWORD v127[9];
  _QWORD v128[9];
  _QWORD v129[9];
  _BYTE __p[64];
  __int128 v131;
  __int128 v132;
  std::string v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  _OWORD v140[3];
  std::string v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  __int128 __str;
  __int128 __str_16;
  uint64_t v146;
  char v147[17];

  memset(v140, 0, sizeof(v140));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&__str, (_QWORD *)(a1 + 192));
  if ((_QWORD)__str)
    v6 = __str + 8;
  else
    v6 = 0;
  v138 = v6;
  v139 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
  __str = 0uLL;
  LoggableString::LoggableString((LoggableString *)__p, "handleRequest");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v140, &v138, (const std::string *)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v7 = v139;
  if (v139)
  {
    p_shared_owners = (unint64_t *)&v139->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
  if (*((_QWORD *)&__str + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = a1 + 80;
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 64))(a1 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 16))(a1 + 80, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"SipDialog::handleRequest", 24);
  *(_BYTE *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v14 + 17) = 0;
  v15 = *(std::__shared_weak_count **)(*a3 + 88);
  if (v15)
  {
    v16 = *(_QWORD *)(*a3 + 80);
    p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
    v136 = 0;
    v137 = std::__shared_weak_count::lock(v15);
    if (v137)
      v136 = v16;
    else
      v16 = 0;
    std::__shared_weak_count::__release_weak(v15);
  }
  else
  {
    v16 = 0;
    v136 = 0;
    v137 = 0;
  }
  v19 = *(_QWORD *)(a1 + 1848);
  if (v19)
  {
    v20 = *(_QWORD *)(v19 + 600);
    v21 = *(std::__shared_weak_count **)(v19 + 608);
    *(_QWORD *)__p = v20;
    *(_QWORD *)&__p[8] = v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = 0;
    if (!v20 && v16)
      v24 = *(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(*(_QWORD *)(a1 + 208) + 136)) + 792) != 0;
    if (!v21)
      goto LABEL_35;
    v25 = (unint64_t *)&v21->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if (!v24)
        goto LABEL_42;
    }
    else
    {
LABEL_35:
      if (!v24)
        goto LABEL_42;
    }
    v27 = *(_QWORD **)(a1 + 1848);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v136 + 112))(&v134);
    SipSessionInterface::setPreferredTransportGroup(v27, &v134);
    v28 = v135;
    if (v135)
    {
      v29 = (unint64_t *)&v135->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
LABEL_42:
  v31 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v32 = v31[23];
  if ((v32 & 0x80u) == 0)
    v33 = v31[23];
  else
    v33 = *((_QWORD *)v31 + 1);
  if (v33 != 6)
    goto LABEL_53;
  if ((v32 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v31, "NOTIFY", *((_QWORD *)v31 + 1)))
      goto LABEL_53;
LABEL_55:
    v131 = 0u;
    v132 = 0u;
    v37 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136) + 288;
    memset(&__p[8], 0, 56);
    LODWORD(v131) = 1065353216;
    *(_QWORD *)&v132 = v37;
    *(_QWORD *)__p = off_1E78E40E8;
    memset(&v133, 0, sizeof(v133));
    DWORD2(v132) = 200;
    v38 = (char *)SipMessage::header<SipEventHeader>(a2);
    v39 = v38;
    if (v38)
    {
      v142 = 0;
      v143 = 0;
      v40 = (uint64_t)(v38 + 72);
      v41 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v38 + 72), (void **)&kParameterId);
      v42 = (std::string *)(v39 + 104);
      v43 = (void **)(v39 + 80);
      if (v43 == v41)
        v44 = &ims::kEmptyString;
      else
        v44 = (__int128 *)(v41 + 7);
      SipDialog::subscriptionForEvent(a1, (void **)&v42->__r_.__value_.__l.__data_, v44, &v142);
      if (v142)
      {
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v142 + 88))(v142, a2, __p);
      }
      else
      {
        v71 = SipMessage::header<SipSubscriptionStateHeader>(a2);
        if (!v71)
          goto LABEL_125;
        v72 = *((unsigned __int8 *)v71 + 127);
        v73 = (char)v72;
        if ((v72 & 0x80u) != 0)
          v72 = v71[14];
        if (v72 == 10
          && ((v76 = (char *)v71[13], v74 = (char *)(v71 + 13), v75 = v76, v73 >= 0) ? (v77 = v74) : (v77 = v75),
              (v78 = *(_QWORD *)v77, v79 = *((unsigned __int16 *)v77 + 4), v78 == *(_QWORD *)"terminated")
            ? (v80 = v79 == *(unsigned __int16 *)"ed")
            : (v80 = 0),
              v80))
        {
          v114 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 64))(a1 + 80);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v114);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v114 + 8), (uint64_t)"received NOTIFY with state terminated for unknown subscription. Being nice and returning a 200 OK.", 98);
          *(_BYTE *)(v114 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v114 + 64))(v114, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v114 + 17) = 0;
        }
        else
        {
LABEL_125:
          v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(a1 + 80);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v81);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v81 + 8), (uint64_t)"unexpected NOTIFY event '", 25);
          *(_BYTE *)(v81 + 17) = 0;
          LoggableString::LoggableString((std::string *)&__str, v42);
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v81 + 40))(v81, &__str);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v81 + 8), (uint64_t)"' with id=", 10);
          *(_BYTE *)(v81 + 17) = 0;
          v82 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v40, (void **)&kParameterId);
          if (v43 == v82)
            v83 = (const std::string *)&ims::kEmptyString;
          else
            v83 = (const std::string *)(v82 + 7);
          LoggableString::LoggableString(&v141, v83);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v81 + 40))(v81, &v141);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v81 + 64))(v81, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v81 + 17) = 0;
          if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v141.__r_.__value_.__l.__data_);
          if (SBYTE7(__str_16) < 0)
            operator delete((void *)__str);
          std::string::basic_string[abi:ne180100]<0>(&__str, "Bad Event");
          DWORD2(v132) = 489;
          std::string::operator=(&v133, (const std::string *)&__str);
          if (SBYTE7(__str_16) < 0)
            operator delete((void *)__str);
        }
      }
      v115 = v143;
      if (v143)
      {
        v116 = (unint64_t *)&v143->__shared_owners_;
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
          std::__shared_weak_count::__release_weak(v115);
        }
      }
    }
    else
    {
      v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(a1 + 80);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v67 + 8), (uint64_t)"NOTIFY request has no Event header", 34);
      *(_BYTE *)(v67 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v67 + 64))(v67, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v67 + 17) = 0;
      std::string::basic_string[abi:ne180100]<0>(&__str, "Missing Event header");
      DWORD2(v132) = 400;
      std::string::operator=(&v133, (const std::string *)&__str);
      if (SBYTE7(__str_16) < 0)
        operator delete((void *)__str);
    }
    (*(void (**)(_QWORD *__return_ptr, _QWORD, _BYTE *, uint64_t))(*(_QWORD *)*a3 + 168))(v129, *a3, __p, 1);
    ImsResult::~ImsResult((ImsResult *)v129);
    *(_QWORD *)__p = off_1E78E40E8;
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v133.__r_.__value_.__l.__data_);
    SipMessage::~SipMessage((SipMessage *)__p);
    v63 = 1;
    goto LABEL_207;
  }
  if (!v31[23])
    goto LABEL_55;
  v34 = "NOTIFY";
  while (*v31 == *(unsigned __int8 *)v34)
  {
    ++v31;
    ++v34;
    if (!--v32)
      goto LABEL_55;
  }
LABEL_53:
  v35 = (SipUriHeader *)SipMessage::header<SipFromHeader>(a2);
  if (v35)
    v36 = SipUriHeader::tag(v35);
  else
    v36 = &ims::kEmptyString;
  v45 = (_QWORD *)(a1 + 2040);
  v46 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 2040, (void **)v36);
  v47 = (_QWORD *)(a1 + 2048);
  if ((void **)(a1 + 2048) == v46)
  {
    v142 = 0;
    v143 = 0;
LABEL_70:
    v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 64))(a1 + 80);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(a1 + 80, v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)"rejecting ", 10);
    *(_BYTE *)(v54 + 17) = 0;
    v55 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
    LoggableString::LoggableString((std::string *)&__str, v55);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v54 + 40))(v54, &__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)" request with wrong From: tag ", 30);
    *(_BYTE *)(v54 + 17) = 0;
    v56 = (SipUriHeader *)SipMessage::header<SipFromHeader>(a2);
    if (v56)
      v57 = SipUriHeader::tag(v56);
    else
      v57 = &ims::kEmptyString;
    ObfuscatedString::ObfuscatedString((uint64_t)__p, (const std::string *)v57);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v54 + 56))(v54, __p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v54 + 17) = 0;
    if ((__p[47] & 0x80000000) != 0)
      operator delete(*(void **)&__p[24]);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (SBYTE7(__str_16) < 0)
      operator delete((void *)__str);
    v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 64))(a1 + 80);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(a1 + 80, v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v58 + 8), (uint64_t)"valid tags are: ", 16);
    *(_BYTE *)(v58 + 17) = 0;
    v146 = 0;
    __str = 0u;
    __str_16 = 0u;
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&__str, 1);
    v59 = (_QWORD *)*v45;
    if ((_QWORD *)*v45 != v47)
    {
      do
      {
        ObfuscatedString::ObfuscatedString((uint64_t)__p, (const std::string *)(v59 + 4));
        (*(void (**)(__int128 *, _BYTE *))(__str + 56))(&__str, __p);
        v147[0] = 32;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&__str + 1), (uint64_t)v147, 1);
        BYTE1(__str_16) = 0;
        if ((__p[47] & 0x80000000) != 0)
          operator delete(*(void **)&__p[24]);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        v60 = (_QWORD *)v59[1];
        if (v60)
        {
          do
          {
            v61 = v60;
            v60 = (_QWORD *)*v60;
          }
          while (v60);
        }
        else
        {
          do
          {
            v61 = (_QWORD *)v59[2];
            v80 = *v61 == (_QWORD)v59;
            v59 = v61;
          }
          while (!v80);
        }
        v59 = v61;
      }
      while (v61 != v47);
    }
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&__str_16 + 1) + 8, &v141);
    *(_QWORD *)&__str = &off_1E78D7A10;
    if ((_BYTE)__str_16 && *((_QWORD *)&__str + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&__str + 1) + 8))(*((_QWORD *)&__str + 1));
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v58 + 32))(v58, &v141);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v58 + 17) = 0;
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v141.__r_.__value_.__l.__data_);
    v132 = 0u;
    memset(&v133, 0, sizeof(v133));
    v131 = 0u;
    memset(__p, 0, sizeof(__p));
    std::string::basic_string[abi:ne180100]<0>(&__str, "Call Does Not Exist");
    SipResponse::SipResponse((uint64_t)__p, 481, (std::string *)&__str, *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136) + 288);
    if (SBYTE7(__str_16) < 0)
      operator delete((void *)__str);
    (*(void (**)(_QWORD *__return_ptr, _QWORD, _BYTE *, uint64_t))(*(_QWORD *)*a3 + 168))(v128, *a3, __p, 1);
    v62 = (ImsResult *)v128;
    goto LABEL_98;
  }
  v49 = (uint64_t)v46[7];
  v48 = (std::__shared_weak_count *)v46[8];
  v142 = v49;
  v143 = v48;
  if (v48)
  {
    v50 = (unint64_t *)&v48->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  if (!v49)
    goto LABEL_70;
  v52 = (SipUriHeader *)SipMessage::header<SipToHeader>(a2);
  if (v52)
    v53 = SipUriHeader::tag(v52);
  else
    v53 = &ims::kEmptyString;
  v68 = *((unsigned __int8 *)v53 + 23);
  if ((v68 & 0x80u) != 0)
    v68 = *((_QWORD *)v53 + 1);
  if (v68)
  {
    v69 = (SipUriHeader *)SipMessage::header<SipToHeader>(a2);
    if (v69)
      v70 = SipUriHeader::tag(v69);
    else
      v70 = &ims::kEmptyString;
    v84 = *((unsigned __int8 *)v70 + 23);
    if ((v84 & 0x80u) == 0)
      v85 = *((unsigned __int8 *)v70 + 23);
    else
      v85 = *((_QWORD *)v70 + 1);
    v86 = *(unsigned __int8 *)(a1 + 1095);
    v87 = (char)v86;
    if ((v86 & 0x80u) != 0)
      v86 = *(_QWORD *)(a1 + 1080);
    if (v85 == v86)
    {
      if (v87 >= 0)
        v88 = (unsigned __int8 *)(a1 + 1072);
      else
        v88 = *(unsigned __int8 **)(a1 + 1072);
      if ((v84 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v70, v88, *((_QWORD *)v70 + 1)))
          goto LABEL_151;
      }
      else
      {
        if (!*((_BYTE *)v70 + 23))
          goto LABEL_151;
        while (*(unsigned __int8 *)v70 == *v88)
        {
          v70 = (__int128 *)((char *)v70 + 1);
          ++v88;
          if (!--v84)
            goto LABEL_151;
        }
      }
    }
    if (!*(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(*(_QWORD *)(a1 + 208) + 136)) + 544))
    {
      v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 64))(a1 + 80);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(a1 + 80, v93);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v93 + 8), (uint64_t)"rejecting ", 10);
      *(_BYTE *)(v93 + 17) = 0;
      v94 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
      LoggableString::LoggableString((std::string *)&__str, v94);
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v93 + 40))(v93, &__str);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v93 + 8), (uint64_t)" request with wrong To: tag ", 28);
      *(_BYTE *)(v93 + 17) = 0;
      v95 = (SipUriHeader *)SipMessage::header<SipToHeader>(a2);
      if (v95)
        v96 = SipUriHeader::tag(v95);
      else
        v96 = &ims::kEmptyString;
      ObfuscatedString::ObfuscatedString((uint64_t)__p, (const std::string *)v96);
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v93 + 56))(v93, __p);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v93 + 64))(v93, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v93 + 17) = 0;
      if ((__p[47] & 0x80000000) != 0)
        operator delete(*(void **)&__p[24]);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SBYTE7(__str_16) < 0)
        operator delete((void *)__str);
      v132 = 0u;
      memset(&v133, 0, sizeof(v133));
      v131 = 0u;
      memset(__p, 0, sizeof(__p));
      std::string::basic_string[abi:ne180100]<0>(&__str, "Call Does Not Exist");
      SipResponse::SipResponse((uint64_t)__p, 481, (std::string *)&__str, *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136) + 288);
      if (SBYTE7(__str_16) < 0)
        operator delete((void *)__str);
      (*(void (**)(_QWORD *__return_ptr, _QWORD, _BYTE *, uint64_t))(*(_QWORD *)*a3 + 168))(v127, *a3, __p, 1);
      v62 = (ImsResult *)v127;
      goto LABEL_98;
    }
  }
LABEL_151:
  v89 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v90 = v89[23];
  if ((v90 & 0x80u) == 0)
    v91 = v89[23];
  else
    v91 = *((_QWORD *)v89 + 1);
  if (v91 != 6)
    goto LABEL_164;
  if ((v90 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v89, "CANCEL", *((_QWORD *)v89 + 1)))
      goto LABEL_164;
LABEL_172:
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
    v105 = *(_QWORD *)(a1 + 1848);
    if (v105)
    {
      v106 = (std::__shared_weak_count *)a3[1];
      v123 = *a3;
      v124 = v106;
      if (v106)
      {
        v107 = (unint64_t *)&v106->__shared_owners_;
        do
          v108 = __ldxr(v107);
        while (__stxr(v108 + 1, v107));
      }
      v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v105 + 136))(v105, a2, &v123);
      v109 = v124;
      if (v124)
      {
        v110 = (unint64_t *)&v124->__shared_owners_;
        do
          v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
      goto LABEL_101;
    }
    v112 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 64))(a1 + 80);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(a1 + 80, v112);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v112 + 8), (uint64_t)"no session to handle incoming ", 30);
    *(_BYTE *)(v112 + 17) = 0;
    v113 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
    LoggableString::LoggableString((std::string *)__p, v113);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v112 + 40))(v112, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v112 + 8), (uint64_t)" request", 8);
    *(_BYTE *)(v112 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v112 + 64))(v112, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v112 + 17) = 0;
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v132 = 0u;
    memset(&v133, 0, sizeof(v133));
    v131 = 0u;
    memset(__p, 0, sizeof(__p));
    std::string::basic_string[abi:ne180100]<0>(&__str, "Call Does Not Exist");
    SipResponse::SipResponse((uint64_t)__p, 481, (std::string *)&__str, *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136) + 288);
    if (SBYTE7(__str_16) < 0)
      operator delete((void *)__str);
    (*(void (**)(_QWORD *__return_ptr, _QWORD, _BYTE *, uint64_t))(*(_QWORD *)*a3 + 168))(v122, *a3, __p, 1);
    v62 = (ImsResult *)v122;
LABEL_98:
    ImsResult::~ImsResult(v62);
    *(_QWORD *)__p = off_1E78E40E8;
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v133.__r_.__value_.__l.__data_);
    SipMessage::~SipMessage((SipMessage *)__p);
    v63 = 1;
    goto LABEL_101;
  }
  if (!v89[23])
    goto LABEL_172;
  v92 = "CANCEL";
  while (*v89 == *(unsigned __int8 *)v92)
  {
    ++v89;
    ++v92;
    if (!--v90)
      goto LABEL_172;
  }
LABEL_164:
  v97 = (std::__shared_weak_count *)a3[1];
  v125 = *a3;
  v126 = v97;
  if (v97)
  {
    v98 = (unint64_t *)&v97->__shared_owners_;
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 1, v98));
  }
  updated = SipDialogFork::verifyAndUpdateRemoteCSeq(v49, a2, &v125);
  v101 = updated;
  v102 = v126;
  if (!v126)
    goto LABEL_171;
  v103 = (unint64_t *)&v126->__shared_owners_;
  do
    v104 = __ldaxr(v103);
  while (__stlxr(v104 - 1, v103));
  if (!v104)
  {
    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
    std::__shared_weak_count::__release_weak(v102);
    if ((v101 & 1) != 0)
      goto LABEL_172;
  }
  else
  {
LABEL_171:
    if ((updated & 1) != 0)
      goto LABEL_172;
  }
  v63 = 0;
LABEL_101:
  v64 = v143;
  if (v143)
  {
    v65 = (unint64_t *)&v143->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
LABEL_207:
  v118 = v137;
  if (v137)
  {
    v119 = (unint64_t *)&v137->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v140);
  return v63;
}

void sub_1BF11A98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t v67;

  SipResponse::~SipResponse(&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v67 - 160);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a67);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v67 - 240);
  _Unwind_Resume(a1);
}

double SipDialog::cancelInviteRequest@<D0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, const std::string *a3@<X2>, uint64_t a4@<X8>)
{
  SipRequest *v8;
  _QWORD *HeaderWith;
  _QWORD *v10;
  SipRequest *MatchingCancel;
  uint64_t v12;
  SipUserAgent *v13;
  uint64_t v14;
  double result;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  void (**v45)(ImsResult *__hidden);
  uint64_t *v46;
  int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  v8 = *(SipRequest **)(*a2 + 288);
  HeaderWith = SipMessage::firstHeaderWithType<SipViaHeader>((uint64_t)v8);
  if (HeaderWith && (v10 = (_QWORD *)HeaderWith[8], v10 != (_QWORD *)HeaderWith[9]) && *v10)
  {
    MatchingCancel = SipRequest::createMatchingCancel(v8);
    if (a3)
    {
      v12 = a1[26];
      if (v12)
        v13 = *(SipUserAgent **)(v12 + 136);
      else
        v13 = 0;
      if (*(_BYTE *)(SipUserAgent::config(v13) + 612))
        BambiCallTerminationReason::addReasonToRequest(a3, MatchingCancel);
      SipDialog::sipSession((SipDialog *)a1, &v45);
      v16 = (std::__shared_weak_count *)v45;
      SipDialog::sipSession((SipDialog *)a1, &v41);
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v41 + 128))(&v43);
      SipSession::addTerminationSdpToMessage(v16, (uint64_t)a3, (uint64_t)MatchingCancel, &v43);
      v17 = v44;
      if (v44)
      {
        p_shared_owners = (unint64_t *)&v44->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = v42;
      if (v42)
      {
        v21 = (unint64_t *)&v42->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = (std::__shared_weak_count *)v46;
      if (v46)
      {
        v24 = (unint64_t *)(v46 + 1);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    v26 = *a2;
    v27 = *(std::__shared_weak_count **)(*a2 + 88);
    if (v27)
    {
      v28 = *(_QWORD *)(v26 + 80);
      p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
      v37 = 0;
      v38 = std::__shared_weak_count::lock(v27);
      if (v38)
        v37 = v28;
    }
    else
    {
      v37 = 0;
      v38 = 0;
    }
    SipDialog::internalSendRequest(&v39, (uint64_t)a1, MatchingCancel, &v37);
    v31 = v40;
    if (v40)
    {
      v32 = (unint64_t *)&v40->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = v38;
    if (v38)
    {
      v35 = (unint64_t *)&v38->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v27)
      std::__shared_weak_count::__release_weak(v27);
    if (MatchingCancel)
      (*(void (**)(SipRequest *))(*(_QWORD *)MatchingCancel + 8))(MatchingCancel);
    result = 0.0;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0;
  }
  else
  {
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v45 = &off_1E78B7238;
    v46 = &_bambiDomain;
    v47 = 1073741825;
    v14 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v14, algn_1ED704220[24]);
    *(_QWORD *)&v48 = v14;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"can't construct CANCEL request: original INVITE missing Via header.", 67);
    *(_BYTE *)(v14 + 17) = 0;
    ImsLogContainer::logResult((ImsLogContainer *)(a1 + 10), (ImsResult *)&v45);
    ImsResult::ImsResult((ImsResult *)a4, (const ImsResult *)&v45);
    ImsResult::~ImsResult((ImsResult *)&v45);
  }
  return result;
}

void sub_1BF11AEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void SipDialog::internalSendRequest(_QWORD *a1, uint64_t a2, const SipMessage *a3, _QWORD *a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t **v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  std::string::size_type v37;
  std::string::size_type v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *size;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  const std::string *v45;
  std::string::size_type v46;
  _QWORD *v47;
  std::string *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  std::string::size_type v67;
  unint64_t *p_shared_weak_owners;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _BOOL4 v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  __int128 v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  __int128 v93;
  __int128 v94;
  void *__p[2];
  uint64_t v96;
  std::string v97;
  __int128 v98;

  if (!*a4)
  {
    v30 = *(_QWORD *)(a2 + 1848);
    if (v30)
    {
      v31 = *(_QWORD *)(v30 + 600);
      v32 = *(std::__shared_weak_count **)(v30 + 608);
      if (v32)
      {
        p_shared_owners = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldxr(p_shared_owners);
        while (__stxr(v34 + 1, p_shared_owners));
        do
          v35 = __ldaxr(p_shared_owners);
        while (__stlxr(v35 - 1, p_shared_owners));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      if (v31)
      {
        v36 = *(_QWORD *)(a2 + 1848);
        v37 = *(_QWORD *)(v36 + 600);
        v38 = *(_QWORD *)(v36 + 608);
        v97.__r_.__value_.__r.__words[0] = v37;
        v97.__r_.__value_.__l.__size_ = v38;
        if (v38)
        {
          v39 = (unint64_t *)(v38 + 8);
          do
            v40 = __ldxr(v39);
          while (__stxr(v40 + 1, v39));
        }
        std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)a4, (__int128 *)&v97);
        size = (std::__shared_weak_count *)v97.__r_.__value_.__l.__size_;
        if (v97.__r_.__value_.__l.__size_)
        {
          v42 = (unint64_t *)(v97.__r_.__value_.__l.__size_ + 8);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 80) + 64))(a2 + 80);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 80) + 16))(a2 + 80, v44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"sending ", 8);
        *(_BYTE *)(v44 + 17) = 0;
        v45 = (const std::string *)(*(uint64_t (**)(const SipMessage *))(*(_QWORD *)a3 + 112))(a3);
        LoggableString::LoggableString(&v97, v45);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v44 + 40))(v44, &v97);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)" request over preferred transport ", 34);
        *(_BYTE *)(v44 + 17) = 0;
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a4 + 104))(*a4, v44);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v44 + 17) = 0;
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v97.__r_.__value_.__l.__data_);
      }
    }
  }
  v94 = 0uLL;
  v8 = SipUserAgent::transactionLayer(*(SipUserAgent **)(*(_QWORD *)(a2 + 208) + 136));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v97, (_QWORD *)(a2 + 192));
  v93 = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
  *(_OWORD *)&v97.__r_.__value_.__l.__data_ = 0uLL;
  v9 = (std::__shared_weak_count *)a4[1];
  v91 = *a4;
  v92 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  SipTransactionLayer::sendRequest(v8, a3, (uint64_t *)&v93, &v91, &v94);
  v12 = v92;
  if (v92)
  {
    v13 = (unint64_t *)&v92->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
  if (*((_QWORD *)&v93 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)v97.__r_.__value_.__l.__size_;
  if (v97.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v97.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v94;
  if (!(_QWORD)v94)
  {
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_116;
  }
  v90 = v94;
  if (*((_QWORD *)&v94 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  __p[0] = 0;
  __p[1] = 0;
  v96 = 0;
  v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v21 + 288) + 112))(*(_QWORD *)(v21 + 288));
  SipTransaction::transactionMapKey(v21 + 320, v24, (uint64_t)__p);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 80) + 64))(a2 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 80) + 16))(a2 + 80, v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"adding ", 7);
  *(_BYTE *)(v25 + 17) = 0;
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v90 + 152))(&v97);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v25 + 40))(v25, &v97);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v25 + 17) = 0;
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  v26 = *(uint64_t **)(a2 + 1976);
  v27 = (uint64_t **)(a2 + 1976);
  v28 = (uint64_t **)(a2 + 1976);
  if (!v26)
    goto LABEL_54;
  v27 = (uint64_t **)(a2 + 1976);
  while (1)
  {
    while (1)
    {
      v28 = (uint64_t **)v26;
      v29 = v26 + 4;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (void **)v26 + 4) & 0x80) == 0)
        break;
      v26 = *v28;
      v27 = v28;
      if (!*v28)
        goto LABEL_54;
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v29, __p) & 0x80) == 0)
      break;
    v27 = v28 + 1;
    v26 = v28[1];
    if (!v26)
      goto LABEL_54;
  }
  v46 = (std::string::size_type)*v27;
  if (!*v27)
  {
LABEL_54:
    v97.__r_.__value_.__r.__words[2] = 0;
    v47 = operator new(0x48uLL);
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    v97.__r_.__value_.__l.__size_ = a2 + 1976;
    v48 = (std::string *)(v47 + 4);
    if (SHIBYTE(v96) < 0)
    {
      std::string::__init_copy_ctor_external(v48, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      *(_OWORD *)&v48->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v47[6] = v96;
    }
    v47[7] = 0;
    v47[8] = 0;
    v98 = 0uLL;
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)(v47 + 7), &v98);
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
    if (*((_QWORD *)&v98 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v97.__r_.__value_.__s.__data_[16] = 1;
    v52 = (uint64_t *)v97.__r_.__value_.__r.__words[0];
    *(_QWORD *)v97.__r_.__value_.__l.__data_ = 0;
    v52[1] = 0;
    v52[2] = (uint64_t)v28;
    *v27 = v52;
    v53 = **(_QWORD **)(a2 + 1968);
    if (v53)
    {
      *(_QWORD *)(a2 + 1968) = v53;
      v52 = *v27;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 1976), v52);
    ++*(_QWORD *)(a2 + 1984);
    v46 = v97.__r_.__value_.__r.__words[0];
    v97.__r_.__value_.__r.__words[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v97);
  }
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v46 + 56), (uint64_t *)&v90);
  v54 = v90;
  v56 = *(_QWORD *)(a2 + 208);
  v55 = *(_QWORD *)(a2 + 216);
  if (v56)
    v57 = v56 + 8;
  else
    v57 = 0;
  *(_QWORD *)&v98 = v57;
  *((_QWORD *)&v98 + 1) = v55;
  if (v55)
  {
    v58 = (unint64_t *)(v55 + 8);
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v54 + 344), (uint64_t *)&v98);
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
  if (*((_QWORD *)&v98 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v90 + 152))(&v97);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)(a2 + 8) + 32))(a2 + 8, &v97);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  if (SHIBYTE(v96) < 0)
    operator delete(__p[0]);
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
  if (*((_QWORD *)&v90 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = *(std::__shared_weak_count **)(v94 + 88);
  if (v66)
  {
    v67 = *(_QWORD *)(v94 + 80);
    p_shared_weak_owners = (unint64_t *)&v66->__shared_weak_owners_;
    do
      v69 = __ldxr(p_shared_weak_owners);
    while (__stxr(v69 + 1, p_shared_weak_owners));
    v97.__r_.__value_.__r.__words[0] = 0;
    v97.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v66);
    if (v97.__r_.__value_.__l.__size_)
      v97.__r_.__value_.__r.__words[0] = v67;
    else
      v67 = 0;
    std::__shared_weak_count::__release_weak(v66);
  }
  else
  {
    v67 = 0;
    *(_OWORD *)&v97.__r_.__value_.__l.__data_ = 0uLL;
  }
  v70 = *(_QWORD *)(a2 + 1848);
  if (v70)
  {
    v71 = *(void **)(v70 + 600);
    v72 = *(std::__shared_weak_count **)(v70 + 608);
    __p[0] = v71;
    __p[1] = v72;
    if (v72)
    {
      v73 = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldxr(v73);
      while (__stxr(v74 + 1, v73));
    }
    v75 = 0;
    if (!v71 && v67)
      v75 = *(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(*(_QWORD *)(a2 + 208) + 136)) + 792) != 0;
    if (!v72)
      goto LABEL_104;
    v76 = (unint64_t *)&v72->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
      if (v75)
        goto LABEL_105;
    }
    else
    {
LABEL_104:
      if (v75)
      {
LABEL_105:
        v78 = *(_QWORD **)(a2 + 1848);
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v97.__r_.__value_.__l.__data_ + 112))(&v88);
        SipSessionInterface::setPreferredTransportGroup(v78, &v88);
        v79 = v89;
        if (v89)
        {
          v80 = (unint64_t *)&v89->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
      }
    }
  }
  *(_OWORD *)a1 = v94;
  v94 = 0uLL;
  v82 = (std::__shared_weak_count *)v97.__r_.__value_.__l.__size_;
  if (v97.__r_.__value_.__l.__size_)
  {
    v83 = (unint64_t *)(v97.__r_.__value_.__l.__size_ + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
LABEL_116:
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
  if (*((_QWORD *)&v94 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
}

void sub_1BF11B70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v25 - 96);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void SipDialog::bestAvailableFork(SipDialog *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;

  if (*((_QWORD *)this + 257) != 1)
  {
    *a2 = 0;
    a2[1] = 0;
LABEL_8:
    v9 = *((_QWORD *)this + 261);
    *(_QWORD *)&v21 = *((_QWORD *)this + 260);
    *((_QWORD *)&v21 + 1) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)a2, &v21);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
    if (*((_QWORD *)&v21 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (!*a2)
    {
      v15 = *((_QWORD *)this + 259);
      *(_QWORD *)&v21 = *((_QWORD *)this + 258);
      *((_QWORD *)&v21 + 1) = v15;
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)a2, &v21);
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      if (*((_QWORD *)&v21 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (!*a2)
      {
        if (*((_QWORD *)this + 257))
          std::shared_ptr<IpAddress>::operator=[abi:ne180100](a2, (uint64_t *)(*((_QWORD *)this + 255) + 56));
      }
    }
    return;
  }
  v4 = *((_QWORD *)this + 255);
  v5 = *(_QWORD *)(v4 + 56);
  *a2 = v5;
  v6 = *(_QWORD *)(v4 + 64);
  a2[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  if (!v5)
    goto LABEL_8;
}

void SipDialog::dialogId(SipDialog *this@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  size_t size;
  std::string *v24;
  std::string *v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  std::string::size_type v32;
  size_t v33;
  std::string *v34;
  char *v35;
  std::string *v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::string v43;
  void *__p[2];
  int64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  std::string v48;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::operator+<char>();
  v4 = std::string::append(&v48, ";to-tag=", 8uLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  memset(&v48, 0, sizeof(v48));
  if (*((_QWORD *)this + 257) == 1)
  {
    v6 = *((_QWORD *)this + 255);
    v7 = *(_QWORD *)(v6 + 56);
    v8 = *(std::__shared_weak_count **)(v6 + 64);
    v46 = v7;
    v47 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    if (v7)
      goto LABEL_28;
  }
  else
  {
    v46 = 0;
    v47 = 0;
  }
  v11 = (unint64_t *)*((_QWORD *)this + 261);
  __p[0] = *((void **)this + 260);
  __p[1] = v11;
  if (v11)
  {
    v12 = v11 + 1;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v46, (uint64_t *)__p);
  v14 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v15 = (unint64_t *)((char *)__p[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v7 = v46;
  if (v46)
    goto LABEL_28;
  v17 = (unint64_t *)*((_QWORD *)this + 259);
  __p[0] = *((void **)this + 258);
  __p[1] = v17;
  if (v17)
  {
    v18 = v17 + 1;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v46, (uint64_t *)__p);
  v20 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v21 = (unint64_t *)((char *)__p[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v7 = v46;
  if (v46
    || *((_QWORD *)this + 257)
    && (std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v46, (uint64_t *)(*((_QWORD *)this + 255) + 56)),
        (v7 = v46) != 0))
  {
LABEL_28:
    std::string::operator=(&v48, (const std::string *)(v7 + 152));
  }
  if (*((_BYTE *)this + 1920))
  {
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
    else
      size = v48.__r_.__value_.__l.__size_;
    memset(&v43, 0, sizeof(v43));
    v24 = &v43;
    std::string::basic_string[abi:ne180100]((uint64_t)&v43, size + 10);
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = (std::string *)v43.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = &v48;
      else
        v25 = (std::string *)v48.__r_.__value_.__r.__words[0];
      memmove(v24, v25, size);
    }
    strcpy((char *)v24 + size, ";from-tag=");
    v26 = *((char *)this + 1095);
    if (v26 >= 0)
      v27 = (char *)this + 1072;
    else
      v27 = (const std::string::value_type *)*((_QWORD *)this + 134);
    if (v26 >= 0)
      v28 = *((unsigned __int8 *)this + 1095);
    else
      v28 = *((_QWORD *)this + 135);
    v29 = std::string::append(&v43, v27, v28);
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v45 = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (v45 >= 0)
      v31 = __p;
    else
      v31 = (void **)__p[0];
    if (v45 >= 0)
      v32 = HIBYTE(v45);
    else
      v32 = (std::string::size_type)__p[1];
  }
  else
  {
    if (*((char *)this + 1095) >= 0)
      v33 = *((unsigned __int8 *)this + 1095);
    else
      v33 = *((_QWORD *)this + 135);
    memset(&v43, 0, sizeof(v43));
    v34 = &v43;
    std::string::basic_string[abi:ne180100]((uint64_t)&v43, v33 + 10);
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v34 = (std::string *)v43.__r_.__value_.__r.__words[0];
    if (v33)
    {
      if (*((char *)this + 1095) >= 0)
        v35 = (char *)this + 1072;
      else
        v35 = (char *)*((_QWORD *)this + 134);
      memmove(v34, v35, v33);
    }
    strcpy((char *)v34 + v33, ";from-tag=");
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &v48;
    else
      v36 = (std::string *)v48.__r_.__value_.__r.__words[0];
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
    else
      v37 = v48.__r_.__value_.__l.__size_;
    v38 = std::string::append(&v43, (const std::string::value_type *)v36, v37);
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v45 = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    if (v45 >= 0)
      v31 = __p;
    else
      v31 = (void **)__p[0];
    if (v45 >= 0)
      v32 = HIBYTE(v45);
    else
      v32 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v31, v32);
  if (SHIBYTE(v45) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  v40 = v47;
  if (v47)
  {
    v41 = (unint64_t *)&v47->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
}

void sub_1BF11BD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  uint64_t v23;
  uint64_t v24;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (*(char *)(v24 - 41) < 0)
    operator delete(*(void **)(v24 - 64));
  if (*(char *)(v23 + 23) < 0)
    operator delete(*(void **)v23);
  _Unwind_Resume(a1);
}

void sub_1BF11BDD0()
{
  uint64_t v0;

  if (*(char *)(v0 - 41) < 0)
    JUMPOUT(0x1BF11BDC4);
  JUMPOUT(0x1BF11BDC8);
}

uint64_t SipDialog::handleResponse(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  SipUriHeader *v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *size;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::string::size_type v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  SipUriHeader *v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  std::string::size_type v55;
  std::string::size_type v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  uint64_t v62;
  size_t v63;
  uint64_t v64;
  const char *v65;
  const char *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  std::string *v70;
  std::string::size_type v71;
  char v72;
  std::string::size_type v73;
  SipMessage *v74;
  SipHeader *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  __int128 v91;
  unint64_t *v92;
  unint64_t v93;
  char v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  _DWORD *v112;
  _DWORD *v113;
  unsigned int v114;
  void **v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  unsigned __int8 *v123;
  uint64_t v124;
  uint64_t v125;
  const char *v126;
  int v127;
  int v128;
  uint64_t v129;
  unsigned __int8 *v130;
  const void *v131;
  char *v132;
  char *v133;
  unsigned __int8 *v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  unsigned __int8 *v138;
  uint64_t v139;
  uint64_t v140;
  const char *v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  char *v146;
  char *v147;
  void **v148;
  __int128 *v149;
  std::string::size_type v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  __int128 v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t *v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  uint64_t v211[2];
  uint64_t v212;
  std::__shared_weak_count *v213;
  uint64_t v214;
  std::__shared_weak_count *v215;
  _QWORD v216[2];
  _BYTE v217[32];
  __int128 v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  __int128 v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  __int128 v224;
  std::string v225;
  std::string v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;

  v229 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(*a3 + 288);
  v7 = (SipUriHeader *)SipMessage::header<SipToHeader>(a2);
  if (v7)
    v8 = SipUriHeader::tag(v7);
  else
    v8 = &ims::kEmptyString;
  memset(&v225, 0, sizeof(v225));
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v225, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v225.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v9;
  }
  if (*(_DWORD *)(a2 + 88) == 100)
  {
    v10 = *a3;
    v11 = (std::__shared_weak_count *)a3[1];
    *(_QWORD *)&v224 = v10;
    *((_QWORD *)&v224 + 1) = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    if (*(_QWORD *)(a1 + 1848))
    {
      v218 = 0u;
      memset(v217, 0, sizeof(v217));
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v227, (_QWORD *)(a1 + 192));
      if ((_QWORD)v227)
        v14 = v227 + 8;
      else
        v14 = 0;
      *(_QWORD *)&v228 = v14;
      *((_QWORD *)&v228 + 1) = *((_QWORD *)&v227 + 1);
      v227 = 0uLL;
      LoggableString::LoggableString((LoggableString *)&v226, "handleTryingResponse");
      SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v217, (uint64_t *)&v228, &v226);
      if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v226.__r_.__value_.__l.__data_);
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v228 + 1);
      if (*((_QWORD *)&v228 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v228 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v227 + 1);
      if (*((_QWORD *)&v227 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v227 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 64))(a1 + 80);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 16))(a1 + 80, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"SipDialog::handleTryingResponse", 31);
      *(_BYTE *)(v21 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v21 + 17) = 0;
      v22 = *(_QWORD *)(a1 + 1848);
      *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v224;
      if (*((_QWORD *)&v224 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v224 + 1) + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v22 + 144))(v22, a2, &v226);
      size = (std::__shared_weak_count *)v226.__r_.__value_.__l.__size_;
      if (v226.__r_.__value_.__l.__size_)
      {
        v26 = (unint64_t *)(v226.__r_.__value_.__l.__size_ + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v217);
    }
    if (v11)
    {
      v28 = (unint64_t *)&v11->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v30 = 1;
    goto LABEL_42;
  }
  v32 = HIBYTE(v225.__r_.__value_.__r.__words[2]);
  if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v32 = v225.__r_.__value_.__l.__size_;
  if (v32)
  {
    v227 = 0uLL;
    v34 = *a3;
    v33 = (std::__shared_weak_count *)a3[1];
    *(_QWORD *)&v221 = *a3;
    *((_QWORD *)&v221 + 1) = v33;
    if (v33)
    {
      v35 = (unint64_t *)&v33->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v37 = (SipUriHeader *)SipMessage::header<SipToHeader>(a2);
    if (v37)
      v38 = SipUriHeader::tag(v37);
    else
      v38 = &ims::kEmptyString;
    v53 = a1 + 2040;
    v54 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 2040, (void **)v38);
    if ((void **)(a1 + 2048) == v54)
    {
      *(_OWORD *)&v226.__r_.__value_.__l.__data_ = 0uLL;
    }
    else
    {
      v55 = (std::string::size_type)v54[7];
      v56 = (std::string::size_type)v54[8];
      v226.__r_.__value_.__r.__words[0] = v55;
      v226.__r_.__value_.__l.__size_ = v56;
      if (v56)
      {
        v57 = (unint64_t *)(v56 + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      if (v55)
      {
        v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 64))(a1 + 80);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 16))(a1 + 80, v59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v59 + 8), (uint64_t)"found existing fork ", 20);
        *(_BYTE *)(v59 + 17) = 0;
        ObfuscatedString::ObfuscatedString((uint64_t)v217, (const std::string *)v38);
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v59 + 56))(v59, v217);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v59 + 64))(v59, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v59 + 17) = 0;
        if (SHIBYTE(v218) < 0)
          operator delete(*(void **)&v217[24]);
        if ((v217[23] & 0x80000000) != 0)
          operator delete(*(void **)v217);
        goto LABEL_79;
      }
    }
    if (*(_DWORD *)(a2 + 88) <= 0x12Bu
      && (void **)(a1 + 2024) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 2016, (void **)v38))
    {
      v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 32))(a1 + 80);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 16))(a1 + 80, v60);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v60 + 8), (uint64_t)"ignoring ", 9);
      *(_BYTE *)(v60 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v60 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v60 + 8), (uint64_t)" response on terminated fork ", 29);
      *(_BYTE *)(v60 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v217, (const std::string *)v38);
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v60 + 56))(v60, v217);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v60 + 64))(v60, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_176:
      *(_BYTE *)(v60 + 17) = 0;
      if (SHIBYTE(v218) < 0)
        operator delete(*(void **)&v217[24]);
      if ((v217[23] & 0x80000000) != 0)
        operator delete(*(void **)v217);
      v227 = 0uLL;
      goto LABEL_181;
    }
    v61 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v34 + 288) + 112))(*(_QWORD *)(v34 + 288));
    v62 = v61[23];
    v63 = *((_QWORD *)v61 + 1);
    if ((v62 & 0x80u) == 0)
      v64 = v61[23];
    else
      v64 = *((_QWORD *)v61 + 1);
    if (v64 != 9)
    {
      if (v64 == 6)
      {
        if ((v62 & 0x80) == 0)
        {
          if (v61[23])
          {
            v65 = "INVITE";
            while (*v61 == *(unsigned __int8 *)v65)
            {
              ++v61;
              ++v65;
              if (!--v62)
                goto LABEL_134;
            }
            goto LABEL_167;
          }
LABEL_134:
          v83 = (std::__shared_weak_count *)v226.__r_.__value_.__l.__size_;
          *(_OWORD *)&v226.__r_.__value_.__l.__data_ = 0uLL;
          if (v83)
          {
            v84 = (unint64_t *)&v83->__shared_owners_;
            do
              v85 = __ldaxr(v84);
            while (__stlxr(v85 - 1, v84));
            if (!v85)
            {
              ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
              std::__shared_weak_count::__release_weak(v83);
            }
          }
          if (*(_QWORD *)(a1 + 2080))
          {
            std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v226, (uint64_t *)(a1 + 2080));
            *(_OWORD *)v217 = 0uLL;
            std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 2080, (__int128 *)v217);
            v86 = *(std::__shared_weak_count **)&v217[8];
            if (*(_QWORD *)&v217[8])
            {
              v87 = (unint64_t *)(*(_QWORD *)&v217[8] + 8);
              do
                v88 = __ldaxr(v87);
              while (__stlxr(v88 - 1, v87));
              if (!v88)
              {
                ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                std::__shared_weak_count::__release_weak(v86);
              }
            }
            *(_OWORD *)v217 = *(_OWORD *)&v226.__r_.__value_.__l.__data_;
            if (v226.__r_.__value_.__l.__size_)
            {
              v89 = (unint64_t *)(v226.__r_.__value_.__l.__size_ + 8);
              do
                v90 = __ldxr(v89);
              while (__stxr(v90 + 1, v89));
            }
            v91 = v221;
            v228 = v221;
            if (*((_QWORD *)&v221 + 1))
            {
              v92 = (unint64_t *)(*((_QWORD *)&v221 + 1) + 8);
              do
                v93 = __ldxr(v92);
              while (__stxr(v93 + 1, v92));
            }
            v94 = SipDialog::addForkFromResponse(a1, (uint64_t *)v217, (const SipMessage *)a2, v91, *((std::__shared_weak_count **)&v91 + 1));
            if (*((_QWORD *)&v91 + 1))
            {
              v95 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
              do
                v96 = __ldaxr(v95);
              while (__stlxr(v96 - 1, v95));
              if (!v96)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v91 + 1) + 16))(*((_QWORD *)&v91 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v91 + 1));
              }
            }
            v97 = *(std::__shared_weak_count **)&v217[8];
            if (*(_QWORD *)&v217[8])
            {
              v98 = (unint64_t *)(*(_QWORD *)&v217[8] + 8);
              do
                v99 = __ldaxr(v98);
              while (__stlxr(v99 - 1, v98));
              if (!v99)
              {
                ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                std::__shared_weak_count::__release_weak(v97);
              }
            }
            if ((v94 & 1) != 0)
              goto LABEL_79;
            v100 = (std::__shared_weak_count *)v226.__r_.__value_.__l.__size_;
            *(_OWORD *)&v226.__r_.__value_.__l.__data_ = 0uLL;
            if (!v100)
              goto LABEL_79;
            v101 = (unint64_t *)&v100->__shared_owners_;
            do
              v102 = __ldaxr(v101);
            while (__stlxr(v102 - 1, v101));
          }
          else
          {
            v228 = v221;
            if (*((_QWORD *)&v221 + 1))
            {
              v182 = (unint64_t *)(*((_QWORD *)&v221 + 1) + 8);
              do
                v183 = __ldxr(v182);
              while (__stxr(v183 + 1, v182));
            }
            SipDialog::addForkFromResponse((uint64_t *)v217, (SipDialog *)a1, (const SipMessage *)a2, (uint64_t *)&v228);
            v184 = *(_OWORD *)v217;
            *(_OWORD *)v217 = 0uLL;
            v185 = (std::__shared_weak_count *)v226.__r_.__value_.__l.__size_;
            *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v184;
            if (v185)
            {
              v186 = (unint64_t *)&v185->__shared_owners_;
              do
                v187 = __ldaxr(v186);
              while (__stlxr(v187 - 1, v186));
              if (!v187)
              {
                ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                std::__shared_weak_count::__release_weak(v185);
              }
            }
            v188 = *(std::__shared_weak_count **)&v217[8];
            if (*(_QWORD *)&v217[8])
            {
              v189 = (unint64_t *)(*(_QWORD *)&v217[8] + 8);
              do
                v190 = __ldaxr(v189);
              while (__stlxr(v190 - 1, v189));
              if (!v190)
              {
                ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                std::__shared_weak_count::__release_weak(v188);
              }
            }
            v100 = (std::__shared_weak_count *)*((_QWORD *)&v228 + 1);
            if (!*((_QWORD *)&v228 + 1))
              goto LABEL_79;
            v191 = (unint64_t *)(*((_QWORD *)&v228 + 1) + 8);
            do
              v102 = __ldaxr(v191);
            while (__stlxr(v102 - 1, v191));
          }
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
LABEL_79:
          v227 = *(_OWORD *)&v226.__r_.__value_.__l.__data_;
          *(_OWORD *)&v226.__r_.__value_.__l.__data_ = 0uLL;
          goto LABEL_181;
        }
        if (!memcmp(*(const void **)v61, "INVITE", v63))
          goto LABEL_134;
      }
LABEL_167:
      if (!*(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(*(_QWORD *)(a1 + 208) + 136)) + 544)
        || *(_QWORD *)(a1 + 2056) != 1)
      {
        v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 32))(a1 + 80);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 16))(a1 + 80, v60);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v60 + 8), (uint64_t)"ignoring ", 9);
        *(_BYTE *)(v60 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v60 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v60 + 8), (uint64_t)" response with To: tag that doesn't match any existing fork: ", 61);
        *(_BYTE *)(v60 + 17) = 0;
        ObfuscatedString::ObfuscatedString((uint64_t)v217, (const std::string *)v38);
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v60 + 56))(v60, v217);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v60 + 64))(v60, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        goto LABEL_176;
      }
      v103 = *(_QWORD *)(*(_QWORD *)v53 + 64);
      *(_QWORD *)&v227 = *(_QWORD *)(*(_QWORD *)v53 + 56);
      *((_QWORD *)&v227 + 1) = v103;
      if (v103)
      {
        v104 = (unint64_t *)(v103 + 8);
        do
          v105 = __ldxr(v104);
        while (__stxr(v105 + 1, v104));
      }
LABEL_181:
      v106 = (std::__shared_weak_count *)v226.__r_.__value_.__l.__size_;
      if (v226.__r_.__value_.__l.__size_)
      {
        v107 = (unint64_t *)(v226.__r_.__value_.__l.__size_ + 8);
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
      if (v33)
      {
        v109 = (unint64_t *)&v33->__shared_owners_;
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v110 - 1, v109));
        if (!v110)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v111 = v227;
      if (!(_QWORD)v227)
        goto LABEL_351;
      if ((*(_DWORD *)(a2 + 88) - 100) <= 0x63)
      {
        v112 = SipMessage::header<SipRSeqHeader>(a2);
        if (v112)
        {
          if (v112[15])
          {
            v113 = SipMessage::header<SipRSeqHeader>(a2);
            v114 = v113 ? v113[15] : 0;
            v115 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v111 + 672, (void **)(*a3 + 320));
            if ((void **)(v111 + 680) != v115)
            {
              v116 = *((_DWORD *)v115 + 14);
              if (v116)
              {
                if (v114 <= v116)
                {
                  v205 = *(_QWORD *)(a1 + 80);
                  v204 = a1 + 80;
                  v206 = (*(uint64_t (**)(uint64_t))(v205 + 64))(v204);
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v204 + 16))(v204, v206);
                  v207 = ImsOutStream::operator<<(v206, "ignoring duplicate response rseq=");
                  std::ostream::operator<<();
                  *(_BYTE *)(v207 + 17) = 0;
                  v122 = (_BYTE *)ImsOutStream::operator<<(v207, ", cseq=");
                  SipMessage::header<SipCSeqHeader>(a2);
                  std::ostream::operator<<();
                  v122[17] = 0;
                  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v122 + 64))(v122, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  goto LABEL_350;
                }
                if (v114 > v116 + 1)
                {
                  v118 = *(_QWORD *)(a1 + 80);
                  v117 = a1 + 80;
                  v119 = (*(uint64_t (**)(uint64_t))(v118 + 64))(v117);
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v117 + 16))(v117, v119);
                  v120 = ImsOutStream::operator<<(v119, "received out-of-order response (rseq=");
                  std::ostream::operator<<();
                  *(_BYTE *)(v120 + 17) = 0;
                  v121 = ImsOutStream::operator<<(v120, ", expecting ");
                  std::ostream::operator<<();
                  *(_BYTE *)(v121 + 17) = 0;
                  v122 = (_BYTE *)ImsOutStream::operator<<(v121, ")");
                  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v122 + 64))(v122, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_350:
                  v122[17] = 0;
                  goto LABEL_351;
                }
              }
            }
          }
        }
      }
      v123 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 112))(v6);
      v124 = v123[23];
      if ((v124 & 0x80u) == 0)
        v125 = v123[23];
      else
        v125 = *((_QWORD *)v123 + 1);
      if (v125 != 6)
        goto LABEL_217;
      if ((v124 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v123, "INVITE", *((_QWORD *)v123 + 1)))
          goto LABEL_217;
      }
      else if (v123[23])
      {
        v126 = "INVITE";
        while (*v123 == *(unsigned __int8 *)v126)
        {
          ++v123;
          ++v126;
          if (!--v124)
            goto LABEL_214;
        }
        goto LABEL_217;
      }
LABEL_214:
      v127 = *(_DWORD *)(a2 + 88);
      if ((v127 - 200) > 0x63)
      {
        v128 = 0;
        goto LABEL_219;
      }
      if (*(_BYTE *)(a1 + 1936))
      {
        *(_BYTE *)(a1 + 1936) = 0;
        SipDialog::collapseForks(a1, (unsigned __int8 *)&v225);
        v128 = 1;
LABEL_218:
        v127 = *(_DWORD *)(a2 + 88);
LABEL_219:
        if (v127 == 407 || v127 == 401)
        {
          *(_QWORD *)(a1 + 1928) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
          if ((SipAuthClient::handleUnauthorizedResponse(*(SipAuthClient **)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 136) + 280), (const SipResponse *)a2, (SipAuthChallengeSource *)(a1 + 184)) & 1) != 0)
          {
LABEL_351:
            v30 = 1;
LABEL_352:
            v208 = (std::__shared_weak_count *)*((_QWORD *)&v227 + 1);
            if (*((_QWORD *)&v227 + 1))
            {
              v209 = (unint64_t *)(*((_QWORD *)&v227 + 1) + 8);
              do
                v210 = __ldaxr(v209);
              while (__stlxr(v210 - 1, v209));
              if (!v210)
              {
                ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                std::__shared_weak_count::__release_weak(v208);
              }
            }
            goto LABEL_42;
          }
          v129 = *(_QWORD *)(a1 + 1928);
          if (v129)
            (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
          *(_QWORD *)(a1 + 1928) = 0;
        }
        v130 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a2 + 32), "Allow-Events");
        if (v130)
        {
          v131 = (const void *)*((_QWORD *)v130 + 5);
          if (v131)
          {
            if (v132)
            {
              v133 = v132;
              std::__tree<std::string>::destroy(a1 + 1872, *(char **)(a1 + 1880));
              *(_QWORD *)(a1 + 1872) = a1 + 1880;
              *(_QWORD *)(a1 + 1888) = 0;
              *(_QWORD *)(a1 + 1880) = 0;
              if (v133 + 64 != (char *)(a1 + 1872))
                std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)(a1 + 1872), *((_QWORD **)v133 + 8), (_QWORD *)v133 + 9);
            }
          }
        }
        v134 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 112))(v6);
        v135 = v134[23];
        if ((v135 & 0x80u) == 0)
          v136 = v134[23];
        else
          v136 = *((_QWORD *)v134 + 1);
        if (v136 == 9)
        {
          if ((v135 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v134, "SUBSCRIBE", *((_QWORD *)v134 + 1)))
              goto LABEL_242;
          }
          else if (v134[23])
          {
            v137 = "SUBSCRIBE";
            while (*v134 == *(unsigned __int8 *)v137)
            {
              ++v134;
              ++v137;
              if (!--v135)
                goto LABEL_252;
            }
            goto LABEL_242;
          }
LABEL_252:
          v143 = *a3;
          v142 = (std::__shared_weak_count *)a3[1];
          v219 = v143;
          v220 = v142;
          if (v142)
          {
            v144 = (unint64_t *)&v142->__shared_owners_;
            do
              v145 = __ldxr(v144);
            while (__stxr(v145 + 1, v144));
          }
          v146 = (char *)SipMessage::header<SipEventHeader>(*(_QWORD *)(v143 + 288));
          v147 = v146;
          if (v146)
          {
            *(_OWORD *)&v226.__r_.__value_.__l.__data_ = 0uLL;
            v148 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v146 + 72), (void **)&kParameterId);
            if (v147 + 80 == (char *)v148)
              v149 = &ims::kEmptyString;
            else
              v149 = (__int128 *)(v148 + 7);
            SipDialog::subscriptionForEvent(a1, (void **)v147 + 13, v149, &v226);
            v150 = v226.__r_.__value_.__r.__words[0];
            if (v226.__r_.__value_.__r.__words[0])
            {
              *(_QWORD *)v217 = v143;
              *(_QWORD *)&v217[8] = v142;
              if (v142)
              {
                v151 = (unint64_t *)&v142->__shared_owners_;
                do
                  v152 = __ldxr(v151);
                while (__stxr(v152 + 1, v151));
              }
              v30 = (*(uint64_t (**)(std::string::size_type, uint64_t, _BYTE *))(*(_QWORD *)v150 + 96))(v150, a2, v217);
              v153 = *(std::__shared_weak_count **)&v217[8];
              if (*(_QWORD *)&v217[8])
              {
                v154 = (unint64_t *)(*(_QWORD *)&v217[8] + 8);
                do
                  v155 = __ldaxr(v154);
                while (__stlxr(v155 - 1, v154));
                if (!v155)
                {
                  ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                  std::__shared_weak_count::__release_weak(v153);
                }
              }
            }
            else
            {
              v197 = *(_QWORD *)(a1 + 80);
              v196 = a1 + 80;
              v198 = (*(uint64_t (**)(uint64_t))(v197 + 64))(v196);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v196 + 16))(v196, v198);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v198 + 8), (uint64_t)"no ", 3);
              *(_BYTE *)(v198 + 17) = 0;
              LoggableString::LoggableString((std::string *)v217, (const std::string *)(v147 + 104));
              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v198 + 40))(v198, v217);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v198 + 8), (uint64_t)" subscription to handle SUBSCRIBE response.  We might have received a terminating NOTIFY first.", 95);
              *(_BYTE *)(v198 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v198 + 64))(v198, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v198 + 17) = 0;
              if ((v217[23] & 0x80000000) != 0)
                operator delete(*(void **)v217);
              v30 = 1;
            }
            v199 = (std::__shared_weak_count *)v226.__r_.__value_.__l.__size_;
            if (v226.__r_.__value_.__l.__size_)
            {
              v200 = (unint64_t *)(v226.__r_.__value_.__l.__size_ + 8);
              do
                v201 = __ldaxr(v200);
              while (__stlxr(v201 - 1, v200));
              if (!v201)
              {
                ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                std::__shared_weak_count::__release_weak(v199);
              }
            }
          }
          else
          {
            v180 = *(_QWORD *)(a1 + 80);
            v179 = a1 + 80;
            v181 = (*(uint64_t (**)(uint64_t))(v180 + 56))(v179);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v179 + 16))(v179, v181);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v181 + 8), (uint64_t)"received SUBSCRIBE response, but can't find Event header in request", 67);
            *(_BYTE *)(v181 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v181 + 64))(v181, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v30 = 0;
            *(_BYTE *)(v181 + 17) = 0;
          }
          if (v142)
          {
            v202 = (unint64_t *)&v142->__shared_owners_;
            do
              v203 = __ldaxr(v202);
            while (__stlxr(v203 - 1, v202));
            if (!v203)
            {
              ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
              std::__shared_weak_count::__release_weak(v142);
            }
          }
          goto LABEL_352;
        }
LABEL_242:
        v138 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 112))(v6);
        v139 = v138[23];
        if ((v139 & 0x80u) == 0)
          v140 = v138[23];
        else
          v140 = *((_QWORD *)v138 + 1);
        if (v140 == 5)
        {
          if ((v139 & 0x80) == 0)
          {
            if (v138[23])
            {
              v141 = "REFER";
              while (*v138 == *(unsigned __int8 *)v141)
              {
                ++v138;
                ++v141;
                if (!--v139)
                  goto LABEL_269;
              }
              goto LABEL_278;
            }
            goto LABEL_269;
          }
          if (!memcmp(*(const void **)v138, "REFER", *((_QWORD *)v138 + 1)))
          {
LABEL_269:
            SipResultDomain::makeResult((_DWORD *)a2, (uint64_t)v217);
            v156 = (std::__shared_weak_count *)a3[1];
            v216[0] = *a3;
            v216[1] = v156;
            if (v156)
            {
              v157 = (unint64_t *)&v156->__shared_owners_;
              do
                v158 = __ldxr(v157);
              while (__stxr(v158 + 1, v157));
            }
            SipDialog::handleReferResponse((_QWORD *)a1, (const ImsResult *)v217, v216);
            if (v156)
            {
              v159 = (unint64_t *)&v156->__shared_owners_;
              do
                v160 = __ldaxr(v159);
              while (__stlxr(v160 - 1, v159));
              if (!v160)
              {
                ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                std::__shared_weak_count::__release_weak(v156);
              }
            }
            ImsResult::~ImsResult((ImsResult *)v217);
          }
        }
LABEL_278:
        if (*(_QWORD *)(a1 + 1848))
        {
          v218 = 0u;
          memset(v217, 0, sizeof(v217));
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v228, (_QWORD *)(a1 + 192));
          if ((_QWORD)v228)
            v161 = v228 + 8;
          else
            v161 = 0;
          v214 = v161;
          v215 = (std::__shared_weak_count *)*((_QWORD *)&v228 + 1);
          v228 = 0uLL;
          LoggableString::LoggableString((LoggableString *)&v226, "handleResponse");
          SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v217, &v214, &v226);
          if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v226.__r_.__value_.__l.__data_);
          v162 = v215;
          if (v215)
          {
            v163 = (unint64_t *)&v215->__shared_owners_;
            do
              v164 = __ldaxr(v163);
            while (__stlxr(v164 - 1, v163));
            if (!v164)
            {
              ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
              std::__shared_weak_count::__release_weak(v162);
            }
          }
          v165 = (std::__shared_weak_count *)*((_QWORD *)&v228 + 1);
          if (*((_QWORD *)&v228 + 1))
          {
            v166 = (unint64_t *)(*((_QWORD *)&v228 + 1) + 8);
            do
              v167 = __ldaxr(v166);
            while (__stlxr(v167 - 1, v166));
            if (!v167)
            {
              ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
              std::__shared_weak_count::__release_weak(v165);
            }
          }
          v168 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 64))(a1 + 80);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 16))(a1 + 80, v168);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v168 + 8), (uint64_t)"SipDialog::handleResponse", 25);
          *(_BYTE *)(v168 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v168 + 64))(v168, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v168 + 17) = 0;
          v169 = *(_QWORD *)(a1 + 1848);
          v170 = (std::__shared_weak_count *)a3[1];
          v212 = *a3;
          v213 = v170;
          if (v170)
          {
            v171 = (unint64_t *)&v170->__shared_owners_;
            do
              v172 = __ldxr(v171);
            while (__stxr(v172 + 1, v171));
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v169 + 144))(v169, a2, &v212);
          v173 = v213;
          if (v213)
          {
            v174 = (unint64_t *)&v213->__shared_owners_;
            do
              v175 = __ldaxr(v174);
            while (__stlxr(v175 - 1, v174));
            if (!v175)
            {
              ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
              std::__shared_weak_count::__release_weak(v173);
            }
          }
          SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v217);
        }
        if (v128 && *(_QWORD *)(a1 + 2056) == 1)
        {
          v176 = *(_QWORD *)(*(_QWORD *)v53 + 64);
          v211[0] = *(_QWORD *)(*(_QWORD *)v53 + 56);
          v211[1] = v176;
          if (v176)
          {
            v177 = (unint64_t *)(v176 + 8);
            do
              v178 = __ldxr(v177);
            while (__stxr(v178 + 1, v177));
          }
          SipDialog::setActiveFork((SipDialog *)a1, v211, 1);
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v211);
        }
        goto LABEL_351;
      }
LABEL_217:
      v128 = 0;
      goto LABEL_218;
    }
    if ((v62 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v61, "SUBSCRIBE", v63))
        goto LABEL_167;
    }
    else if (v61[23])
    {
      v66 = "SUBSCRIBE";
      while (*v61 == *(unsigned __int8 *)v66)
      {
        ++v61;
        ++v66;
        if (!--v62)
          goto LABEL_174;
      }
      goto LABEL_167;
    }
LABEL_174:
    if (*(_QWORD *)(a1 + 2056))
    {
      v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 64))(a1 + 80);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 16))(a1 + 80, v60);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v60 + 8), (uint64_t)"forking not allowed for SUBSCRIBE dialogs.  Ignoring ", 53);
      *(_BYTE *)(v60 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v60 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v60 + 8), (uint64_t)" response with new To: tag ", 27);
      *(_BYTE *)(v60 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v217, (const std::string *)v38);
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v60 + 56))(v60, v217);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v60 + 64))(v60, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_176;
    }
    *(_QWORD *)v217 = v34;
    *(_QWORD *)&v217[8] = v33;
    if (v33)
    {
      v192 = (unint64_t *)&v33->__shared_owners_;
      do
        v193 = __ldxr(v192);
      while (__stxr(v193 + 1, v192));
    }
    SipDialog::addForkFromResponse((uint64_t *)&v227, (SipDialog *)a1, (const SipMessage *)a2, (uint64_t *)v217);
    if (v33)
    {
      v194 = (unint64_t *)&v33->__shared_owners_;
      do
        v195 = __ldaxr(v194);
      while (__stlxr(v195 - 1, v194));
      if (!v195)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    goto LABEL_181;
  }
  v39 = a1 + 80;
  v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 48))(a1 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 16))(a1 + 80, v40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)"incoming ", 9);
  *(_BYTE *)(v40 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v40 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)" response is missing a To: tag", 30);
  *(_BYTE *)(v40 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v40 + 17) = 0;
  memset(&v226, 0, sizeof(v226));
  if (*(_QWORD *)(a1 + 2056) == 1)
  {
    v41 = *(_QWORD *)(a1 + 2040);
    v43 = *(_QWORD *)(v41 + 56);
    v42 = *(std::__shared_weak_count **)(v41 + 64);
    if (v42)
    {
      v44 = (unint64_t *)&v42->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
      do
        v46 = __ldaxr(v44);
      while (__stlxr(v46 - 1, v44));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (v43)
    {
      if (*(_QWORD *)(a1 + 2056) == 1)
      {
        v47 = *(_QWORD *)(a1 + 2040);
        v48 = *(_QWORD *)(v47 + 56);
        v49 = *(_QWORD *)(v47 + 64);
        *(_QWORD *)v217 = v48;
        *(_QWORD *)&v217[8] = v49;
        if (v49)
        {
          v50 = (unint64_t *)(v49 + 8);
          do
            v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
        }
      }
      else
      {
        v48 = 0;
        *(_OWORD *)v217 = 0uLL;
      }
      std::string::operator=(&v226, (const std::string *)(v48 + 152));
      if (*(_QWORD *)&v217[8])
      {
        v67 = (unint64_t *)(*(_QWORD *)&v217[8] + 8);
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)&v217[8] + 16))(*(_QWORD *)&v217[8]);
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v217[8]);
        }
      }
      v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 48))(a1 + 80);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(a1 + 80, v69);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v69 + 8), (uint64_t)"using tag ", 10);
      *(_BYTE *)(v69 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v217, &v226);
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v69 + 56))(v69, v217);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v69 + 8), (uint64_t)" from our only fork", 19);
      *(_BYTE *)(v69 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v69 + 64))(v69, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_113:
      *(_BYTE *)(v69 + 17) = 0;
      if (SHIBYTE(v218) < 0)
        operator delete(*(void **)&v217[24]);
      if ((v217[23] & 0x80000000) != 0)
        operator delete(*(void **)v217);
      goto LABEL_117;
    }
  }
  if (*(_DWORD *)(a2 + 88) >= 0x12Cu)
  {
    if (!*(_QWORD *)(a1 + 2056))
    {
      ImsRandomStringGenerator::randomString((ImsRandomStringGenerator *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 136) + 592), 10, (std::string *)v217);
      v70 = std::string::insert((std::string *)v217, 0, "fake-tag-", 9uLL);
      v71 = v70->__r_.__value_.__r.__words[0];
      *(_QWORD *)&v228 = v70->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)&v228 + 7) = *(std::string::size_type *)((char *)&v70->__r_.__value_.__r.__words[1] + 7);
      v72 = HIBYTE(v70->__r_.__value_.__r.__words[2]);
      v70->__r_.__value_.__l.__size_ = 0;
      v70->__r_.__value_.__r.__words[2] = 0;
      v70->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v226.__r_.__value_.__l.__data_);
      v226.__r_.__value_.__r.__words[0] = v71;
      v226.__r_.__value_.__l.__size_ = v228;
      *(std::string::size_type *)((char *)&v226.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v228 + 7);
      *((_BYTE *)&v226.__r_.__value_.__s + 23) = v72;
      if ((v217[23] & 0x80000000) != 0)
        operator delete(*(void **)v217);
      v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 48))(a1 + 80);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(a1 + 80, v69);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v69 + 8), (uint64_t)"no existing forks. Making up new tag ", 37);
      *(_BYTE *)(v69 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v217, &v226);
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v69 + 56))(v69, v217);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v69 + 8), (uint64_t)" for error response", 19);
      *(_BYTE *)(v69 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v69 + 64))(v69, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_113;
    }
    std::string::operator=(&v226, (const std::string *)(*(_QWORD *)(a1 + 2040) + 32));
    v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 48))(a1 + 80);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(a1 + 80, v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v52 + 8), (uint64_t)"using tag ", 10);
    *(_BYTE *)(v52 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v52 + 32))(v52, &v226);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v52 + 8), (uint64_t)" from one of our forks for error response", 41);
    *(_BYTE *)(v52 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v52 + 17) = 0;
  }
LABEL_117:
  v73 = HIBYTE(v226.__r_.__value_.__r.__words[2]);
  if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v73 = v226.__r_.__value_.__l.__size_;
  if (v73)
  {
    v74 = (SipMessage *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v75 = SipMessage::header<SipToHeader>(v74, 1);
    SipUriHeader::setTag((uint64_t)v75, (uint64_t)&v226);
    v76 = (std::__shared_weak_count *)a3[1];
    v222 = *a3;
    v223 = v76;
    if (v76)
    {
      v77 = (unint64_t *)&v76->__shared_owners_;
      do
        v78 = __ldxr(v77);
      while (__stxr(v78 + 1, v77));
    }
    v30 = (*(uint64_t (**)(uint64_t, SipMessage *, uint64_t *))(*(_QWORD *)a1 + 24))(a1, v74, &v222);
    v79 = v223;
    if (v223)
    {
      v80 = (unint64_t *)&v223->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    if (v74)
      (*(void (**)(SipMessage *))(*(_QWORD *)v74 + 8))(v74);
  }
  else
  {
    v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 48))(a1 + 80);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v82 + 8), (uint64_t)"ignoring ", 9);
    *(_BYTE *)(v82 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v82 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v82 + 8), (uint64_t)" response with no To: tag", 25);
    *(_BYTE *)(v82 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v82 + 64))(v82, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v82 + 17) = 0;
    v30 = 1;
  }
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v226.__r_.__value_.__l.__data_);
LABEL_42:
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v225.__r_.__value_.__l.__data_);
  return v30;
}

void sub_1BF11D74C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v43 - 176);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v43 - 144);
  if (a43 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t SipDialog::handleReferResponse(_QWORD *a1, const ImsResult *a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  _BYTE v35[72];
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[2];
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  _OWORD v42[4];
  void *v43[2];
  __int128 v44;
  __int128 v45;
  _OWORD v46[9];
  uint64_t v47;

  v6 = a1 + 10;
  v7 = (*(uint64_t (**)(_QWORD *))(a1[10] + 64))(a1 + 10);
  (*(void (**)(_QWORD *, uint64_t))(*v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"handling refer response", 23);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  v47 = 0;
  v45 = 0u;
  memset(v46, 0, sizeof(v46));
  *(_OWORD *)v43 = 0u;
  v44 = 0u;
  memset(v42, 0, sizeof(v42));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v42);
  v8 = SipMessage::header<SipCSeqHeader>(*(_QWORD *)(*a3 + 288));
  if (v8)
    v9 = v8[15];
  else
    v9 = 0;
  std::ostream::operator<<();
  v40 = 0;
  v41 = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v42 + 8, __p);
  SipDialog::subscriptionForEvent((uint64_t)a1, (void **)"refer", __p, &v40);
  if (v39 < 0)
    operator delete(__p[0]);
  v10 = v40;
  if (v40)
  {
    v11 = (std::__shared_weak_count *)a3[1];
    v36 = *a3;
    v37 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    SipSubscription::handleTransactionResponse(v10, (uint64_t)a2, (uint64_t)&v36);
    v14 = v37;
    if (v37)
    {
      v15 = (unint64_t *)&v37->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        v17 = v14;
        goto LABEL_15;
      }
    }
    goto LABEL_34;
  }
  v18 = a1[226];
  if (!v18)
    goto LABEL_32;
  v19 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
  v19.i16[0] = vaddlv_u8(v19);
  if (v19.u32[0] > 1uLL)
  {
    v20 = v9;
    if (v18 <= v9)
      v20 = v9 % v18;
  }
  else
  {
    v20 = ((_DWORD)v18 - 1) & v9;
  }
  v21 = *(uint64_t ***)(a1[225] + 8 * v20);
  if (!v21 || (v22 = *v21) == 0)
  {
LABEL_32:
    v24 = (*(uint64_t (**)(_QWORD *))(*v6 + 56))(v6);
    (*(void (**)(_QWORD *, uint64_t))(*v6 + 16))(v6, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"can't find refer subscription with id ", 38);
    *(_BYTE *)(v24 + 17) = 0;
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v42 + 8, __p);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v24 + 32))(v24, __p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v24 + 17) = 0;
    if (v39 < 0)
      operator delete(__p[0]);
    goto LABEL_34;
  }
  while (1)
  {
    v23 = v22[1];
    if (v23 == v9)
      break;
    if (v19.u32[0] > 1uLL)
    {
      if (v23 >= v18)
        v23 %= v18;
    }
    else
    {
      v23 &= v18 - 1;
    }
    if (v23 != v20)
      goto LABEL_32;
LABEL_31:
    v22 = (uint64_t *)*v22;
    if (!v22)
      goto LABEL_32;
  }
  if (*((_DWORD *)v22 + 4) != v9)
    goto LABEL_31;
  v29 = (std::__shared_weak_count *)v22[4];
  if (v29)
  {
    v30 = std::__shared_weak_count::lock(v29);
    __p[1] = v30;
    if (v30)
    {
      v31 = v30;
      v32 = (void *)v22[3];
      __p[0] = v32;
      if (v32)
      {
        ImsResult::ImsResult((ImsResult *)v35, a2);
        LazuliGroupParticipant::handleResponse((std::__shared_weak_count **)v32, (uint64_t)v35);
        ImsResult::~ImsResult((ImsResult *)v35);
      }
      v33 = (unint64_t *)&v31->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        v17 = v31;
LABEL_15:
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
LABEL_34:
  v25 = v41;
  if (v41)
  {
    v26 = (unint64_t *)&v41->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *(_QWORD *)&v42[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v42 + *(_QWORD *)(*(_QWORD *)&v42[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v42[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v44) < 0)
    operator delete(v43[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v46);
}

void sub_1BF11DDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,char a28)
{
  ImsResult::~ImsResult((ImsResult *)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::ostringstream::~ostringstream((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void SipDialog::handleTransactionError(_QWORD *a1, const ImsResult *a2, _QWORD *a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void **v18;
  void **v19;
  void **v20;
  __int128 *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  _QWORD v46[4];
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;

  v6 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + 288) + 112))(*(_QWORD *)(*a3 + 288));
  v7 = v6[23];
  if ((v7 & 0x80u) == 0)
    v8 = v6[23];
  else
    v8 = *((_QWORD *)v6 + 1);
  if (v8 != 9)
    goto LABEL_12;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v6, "SUBSCRIBE", *((_QWORD *)v6 + 1)))
      goto LABEL_12;
LABEL_22:
    v15 = *a3;
    v14 = (std::__shared_weak_count *)a3[1];
    v46[2] = v15;
    v46[3] = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v18 = (void **)SipMessage::header<SipEventHeader>(*(_QWORD *)(v15 + 288));
    v19 = v18;
    if (v18)
    {
      v49 = 0;
      v50 = 0;
      v20 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v18 + 9), (void **)&kParameterId);
      if (v19 + 10 == v20)
        v21 = &ims::kEmptyString;
      else
        v21 = (__int128 *)(v20 + 7);
      SipDialog::subscriptionForEvent((uint64_t)a1, v19 + 13, v21, &v49);
      v22 = v49;
      if (v49)
      {
        v47 = v15;
        v48 = v14;
        if (v14)
        {
          v23 = (unint64_t *)&v14->__shared_owners_;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        SipSubscription::handleTransactionResponse(v22, (uint64_t)a2, (uint64_t)&v47);
        v25 = v48;
        if (v48)
        {
          v26 = (unint64_t *)&v48->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
      }
      v28 = v50;
      if (v50)
      {
        v29 = (unint64_t *)&v50->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }
    if (!v14)
      return;
    v31 = (unint64_t *)&v14->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    goto LABEL_63;
  }
  if (!v6[23])
    goto LABEL_22;
  v9 = "SUBSCRIBE";
  while (*v6 == *(unsigned __int8 *)v9)
  {
    ++v6;
    ++v9;
    if (!--v7)
      goto LABEL_22;
  }
LABEL_12:
  v10 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + 288) + 112))(*(_QWORD *)(*a3 + 288));
  v11 = v10[23];
  if ((v11 & 0x80u) == 0)
    v12 = v10[23];
  else
    v12 = *((_QWORD *)v10 + 1);
  if (v12 == 5)
  {
    if ((v11 & 0x80) == 0)
    {
      if (v10[23])
      {
        v13 = "REFER";
        while (*v10 == *(unsigned __int8 *)v13)
        {
          ++v10;
          ++v13;
          if (!--v11)
            goto LABEL_57;
        }
        goto LABEL_48;
      }
      goto LABEL_57;
    }
    if (!memcmp(*(const void **)v10, "REFER", *((_QWORD *)v10 + 1)))
    {
LABEL_57:
      v40 = *a3;
      v14 = (std::__shared_weak_count *)a3[1];
      v46[0] = v40;
      v46[1] = v14;
      if (v14)
      {
        v41 = (unint64_t *)&v14->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      SipDialog::handleReferResponse(a1, a2, v46);
      if (!v14)
        return;
      v43 = (unint64_t *)&v14->__shared_owners_;
      do
        v32 = __ldaxr(v43);
      while (__stlxr(v32 - 1, v43));
LABEL_63:
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      return;
    }
  }
LABEL_48:
  v33 = a1[231];
  if (v33)
  {
    v34 = (std::__shared_weak_count *)a3[1];
    v44 = *a3;
    v45 = v34;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    (*(void (**)(uint64_t, const ImsResult *, uint64_t *))(*(_QWORD *)v33 + 152))(v33, a2, &v44);
    v37 = v45;
    if (v45)
    {
      v38 = (unint64_t *)&v45->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
}

void sub_1BF11E178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SipDialog::transactionCompleted(uint64_t a1, uint64_t a2)
{
  const void *v2;
  SipDialogFork *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  SipUriHeader *v19;
  __int128 *v20;
  __int128 v21;
  std::string::size_type size;
  void **v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  SipUriHeader *v43;
  __int128 *v44;
  __int128 v45;
  std::string::size_type v46;
  void **v47;
  void **v48;
  SipDialogFork *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  SipDialogFork *v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  SipDialogFork *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  _QWORD v74[2];
  SipDialogFork *v75;
  std::__shared_weak_count *v76;
  std::string v77;

  v2 = *(const void **)a2;
  if (!*(_QWORD *)a2)
  {
    v73 = 0;
LABEL_10:
    v70 = 0;
    goto LABEL_11;
  }
  if (v5)
  {
    v6 = *(std::__shared_weak_count **)(a2 + 8);
    v73 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      v72 = v6;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      v72 = 0;
    }
    v71 = v5;
    v19 = (SipUriHeader *)SipMessage::header<SipFromHeader>(*((_QWORD *)v5 + 36));
    if (v19)
      v20 = SipUriHeader::tag(v19);
    else
      v20 = &ims::kEmptyString;
    memset(&v77, 0, sizeof(v77));
    if (*((char *)v20 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)v20, *((_QWORD *)v20 + 1));
    }
    else
    {
      v21 = *v20;
      v77.__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v21;
    }
    size = HIBYTE(v77.__r_.__value_.__r.__words[2]);
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v77.__r_.__value_.__l.__size_;
    if (size)
    {
      v23 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 2040, (void **)&v77.__r_.__value_.__l.__data_);
      if ((void **)(a1 + 2048) != v23)
      {
        v24 = v23[7];
        v25 = (std::__shared_weak_count *)v23[8];
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        if (v24)
        {
          if (v6)
          {
            v28 = (unint64_t *)&v6->__shared_owners_;
            do
              v29 = __ldxr(v28);
            while (__stxr(v29 + 1, v28));
            do
              v30 = __ldaxr(v28);
            while (__stlxr(v30 - 1, v28));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
        }
        if (v25)
        {
          v31 = (unint64_t *)&v25->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
      }
    }
    v33 = *(_QWORD *)(a1 + 1848);
    if (v33)
    {
      v75 = v71;
      v76 = v72;
      if (v72)
      {
        v34 = (unint64_t *)&v72->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      (*(void (**)(uint64_t, SipDialogFork **))(*(_QWORD *)v33 + 168))(v33, &v75);
      v36 = v76;
      if (v76)
      {
        v37 = (unint64_t *)&v76->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
    }
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    if (v6)
    {
      v39 = (unint64_t *)&v6->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        v12 = v6;
        goto LABEL_65;
      }
    }
    goto LABEL_66;
  }
  v73 = 0;
  if (!v13)
    goto LABEL_10;
  v14 = v13;
  v15 = *(std::__shared_weak_count **)(a2 + 8);
  v70 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v69 = v15;
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
  }
  else
  {
    v69 = 0;
  }
  v68 = (SipDialogFork *)v13;
  v43 = (SipUriHeader *)SipMessage::header<SipToHeader>(v13[36]);
  if (v43)
    v44 = SipUriHeader::tag(v43);
  else
    v44 = &ims::kEmptyString;
  memset(&v77, 0, sizeof(v77));
  if (*((char *)v44 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)v44, *((_QWORD *)v44 + 1));
  }
  else
  {
    v45 = *v44;
    v77.__r_.__value_.__r.__words[2] = *((_QWORD *)v44 + 2);
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v45;
  }
  v46 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v46 = v77.__r_.__value_.__l.__size_;
  if (v46)
  {
    v47 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 2040, (void **)&v77.__r_.__value_.__l.__data_);
    v48 = v47;
    if ((void **)(a1 + 2048) == v47)
    {
      v75 = 0;
      v76 = 0;
    }
    else
    {
      v49 = (SipDialogFork *)v47[7];
      v50 = (std::__shared_weak_count *)v48[8];
      v75 = v49;
      v76 = v50;
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      if (v49)
      {
        v74[0] = v14;
        v74[1] = v15;
        if (v15)
        {
          v53 = (unint64_t *)&v15->__shared_owners_;
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
        }
        SipDialogFork::handleClientTransactionCompleted(v49, (uint64_t)v74);
        if (v15)
        {
          v55 = (unint64_t *)&v15->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
    }
    v57 = v76;
    if (v76)
    {
      v58 = (unint64_t *)&v76->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
  }
  v60 = *(_QWORD *)(a1 + 1848);
  if (v60)
  {
    v75 = v68;
    v76 = v69;
    if (v69)
    {
      v61 = (unint64_t *)&v69->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    (*(void (**)(uint64_t, SipDialogFork **))(*(_QWORD *)v60 + 160))(v60, &v75);
    v63 = v76;
    if (v76)
    {
      v64 = (unint64_t *)&v76->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
  }
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (v15)
  {
    v66 = (unint64_t *)&v15->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_11:
  if (v70)
  {
    v10 = (unint64_t *)&v70->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      v12 = v70;
LABEL_65:
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_66:
  if (v73)
  {
    v41 = (unint64_t *)&v73->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
}

void sub_1BF11E700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  uint64_t v19;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (*(char *)(v19 - 41) < 0)
    operator delete(*(void **)(v19 - 64));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t SipDialog::transactionTerminated(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  void *v13;
  std::string::size_type v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  void **v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *size;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v33;
  unint64_t v34;
  void **v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  BOOL v43;
  void **v44;
  std::__shared_weak_count *v45;
  void *v46;
  std::string::size_type v47;
  std::string __p;
  void **v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  _OWORD v53[3];

  memset(v53, 0, sizeof(v53));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v49, a1 + 24);
  if (v49)
    v4 = (uint64_t)(v49 + 1);
  else
    v4 = 0;
  v51 = v4;
  v52 = v50;
  v49 = 0;
  v50 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "transactionTerminated");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v53, &v51, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = v52;
  if (v52)
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v50;
  if (v50)
  {
    v9 = (unint64_t *)&v50->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (*(uint64_t (**)(_QWORD *))(a1[10] + 64))(a1 + 10);
  (*(void (**)(_QWORD *, uint64_t))(a1[10] + 16))(a1 + 10, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"SipDialog::transactionTerminated", 32);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  v12 = *(const void **)a2;
  if (!*(_QWORD *)a2)
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
LABEL_25:
    v49 = 0;
    v50 = 0;
    goto LABEL_26;
  }
  if (v13)
  {
    v14 = *(_QWORD *)(a2 + 8);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
    __p.__r_.__value_.__l.__size_ = v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      v47 = v14;
      do
        v17 = __ldxr(v15);
      while (__stxr(v17 + 1, v15));
    }
    else
    {
      v47 = 0;
    }
    v46 = v13;
    SipDialog::removeServerTransaction((uint64_t)a1, &v46);
    if (!v14)
      goto LABEL_45;
    v27 = (unint64_t *)(v14 + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (v28)
      goto LABEL_45;
    (*(void (**)(std::string::size_type))(*(_QWORD *)v14 + 16))(v14);
    v21 = (std::__shared_weak_count *)v14;
    goto LABEL_44;
  }
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  if (!v22)
    goto LABEL_25;
  v23 = *(std::__shared_weak_count **)(a2 + 8);
  v49 = v22;
  v50 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v45 = v23;
    do
      v26 = __ldxr(v24);
    while (__stxr(v26 + 1, v24));
  }
  else
  {
    v45 = 0;
  }
  v44 = v22;
  SipDialog::removeClientTransaction(a1, &v44);
  if (v23)
  {
    v33 = (unint64_t *)&v23->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v35 = v49;
  v36 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*(_QWORD *)v49[36] + 112))(v49[36]);
  v37 = v36[23];
  if ((v37 & 0x80u) == 0)
    v38 = v36[23];
  else
    v38 = *((_QWORD *)v36 + 1);
  if (v38 != 6)
    goto LABEL_26;
  if ((v37 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v36, "INVITE", *((_QWORD *)v36 + 1)))
      goto LABEL_26;
    goto LABEL_68;
  }
  if (!v36[23])
  {
LABEL_68:
    v40 = (_QWORD *)a1[255];
    if (v40 != a1 + 256)
    {
      do
      {
        std::__tree<std::string>::__erase_unique<std::string>((uint64_t **)(v40[7] + 672), v35 + 40);
        v41 = (_QWORD *)v40[1];
        if (v41)
        {
          do
          {
            v42 = v41;
            v41 = (_QWORD *)*v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            v42 = (_QWORD *)v40[2];
            v43 = *v42 == (_QWORD)v40;
            v40 = v42;
          }
          while (!v43);
        }
        v40 = v42;
      }
      while (v42 != a1 + 256);
    }
    goto LABEL_26;
  }
  v39 = "INVITE";
  while (*v36 == *(unsigned __int8 *)v39)
  {
    ++v36;
    ++v39;
    if (!--v37)
      goto LABEL_68;
  }
LABEL_26:
  v18 = v50;
  if (v50)
  {
    v19 = (unint64_t *)&v50->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      v21 = v18;
LABEL_44:
      std::__shared_weak_count::__release_weak(v21);
    }
  }
LABEL_45:
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v30 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v53);
}

void sub_1BF11EBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v22 - 80);
  _Unwind_Resume(a1);
}

void SipDialog::addServerTransaction(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *v35[2];
  uint64_t v36;
  void *__p[2];
  uint64_t v38;

  v35[0] = 0;
  v35[1] = 0;
  v36 = 0;
  v4 = *a2;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 288) + 112))(*(_QWORD *)(*a2 + 288));
  SipTransaction::transactionMapKey(v4 + 320, v5, (uint64_t)v35);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 64))(a1 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 16))(a1 + 80, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"adding ", 7);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 160))(__p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 40))(v6, __p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  v7 = *(_QWORD **)(a1 + 1952);
  v8 = (_QWORD *)(a1 + 1952);
  v9 = (_QWORD *)(a1 + 1952);
  if (!v7)
    goto LABEL_12;
  v8 = (_QWORD *)(a1 + 1952);
  while (1)
  {
    while (1)
    {
      v9 = v7;
      v10 = v7 + 4;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v35, (void **)v7 + 4) & 0x80) == 0)
        break;
      v7 = (_QWORD *)*v9;
      v8 = v9;
      if (!*v9)
        goto LABEL_12;
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, v35) & 0x80) == 0)
      break;
    v8 = v9 + 1;
    v7 = (_QWORD *)v9[1];
    if (!v7)
      goto LABEL_12;
  }
  v11 = (_QWORD *)*v8;
  if (!*v8)
  {
LABEL_12:
    v38 = 0;
    v12 = operator new(0x48uLL);
    __p[0] = v12;
    __p[1] = (void *)(a1 + 1952);
    v13 = (std::string *)(v12 + 4);
    if (SHIBYTE(v36) < 0)
    {
      std::string::__init_copy_ctor_external(v13, (const std::string::value_type *)v35[0], (std::string::size_type)v35[1]);
    }
    else
    {
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)v35;
      v12[6] = v36;
    }
    v12[7] = 0;
    v12[8] = 0;
    LOBYTE(v38) = 1;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = v9;
    *v8 = v12;
    v14 = **(_QWORD **)(a1 + 1944);
    if (v14)
    {
      *(_QWORD *)(a1 + 1944) = v14;
      v12 = (_QWORD *)*v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1952), v12);
    ++*(_QWORD *)(a1 + 1960);
    v11 = __p[0];
    __p[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>>>>::reset[abi:ne180100]((uint64_t)__p);
  }
  std::shared_ptr<IpAddress>::operator=[abi:ne180100](v11 + 7, a2);
  v15 = *a2;
  v17 = *(_QWORD *)(a1 + 208);
  v16 = *(std::__shared_weak_count **)(a1 + 216);
  if (v17)
    v18 = v17 + 8;
  else
    v18 = 0;
  v33 = v18;
  v34 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v15 + 344), &v33);
  v21 = v34;
  if (v34)
  {
    v22 = (unint64_t *)&v34->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 160))(__p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)(a1 + 8) + 32))(a1 + 8, __p);
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  v24 = *(_QWORD *)(a1 + 1848);
  if (v24)
  {
    v25 = a2[1];
    v31 = *a2;
    v32 = (std::__shared_weak_count *)v25;
    if (v25)
    {
      v26 = (unint64_t *)(v25 + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v24 + 232))(v24, &v31);
    v28 = v32;
    if (v32)
    {
      v29 = (unint64_t *)&v32->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  if (SHIBYTE(v36) < 0)
    operator delete(v35[0]);
}

void sub_1BF11EF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a19);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void SipDialog::serverTransactionWithIdAndMethod(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void **v6;
  char *v7;
  unint64_t *v8;
  unint64_t v9;
  void *__p[2];
  uint64_t v11;

  __p[0] = 0;
  __p[1] = 0;
  v11 = 0;
  SipTransaction::transactionMapKey(a2, a3, (uint64_t)__p);
  v6 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 1944, __p);
  if ((void **)(a1 + 1952) == v6)
  {
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    v7 = (char *)v6[8];
    *a4 = v6[7];
    a4[1] = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
}

void sub_1BF11F044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipDialog::currentClientTransactions(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  SipUriHeader *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  const void **v27;
  __int128 *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  BOOL v33;

  v4 = *(_QWORD **)(a1 + 1968);
  v5 = (_QWORD *)(a1 + 1976);
  if (v4 != (_QWORD *)(a1 + 1976))
  {
    do
    {
      v10 = v4[7];
      v9 = (std::__shared_weak_count *)v4[8];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      if (a3)
      {
        v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 288) + 112))(*(_QWORD *)(v10 + 288));
        v14 = a3[23];
        if ((v14 & 0x80u) == 0)
          v15 = a3[23];
        else
          v15 = *((_QWORD *)a3 + 1);
        v16 = *(unsigned __int8 *)(v13 + 23);
        v17 = (char)v16;
        if ((v16 & 0x80u) != 0)
          v16 = *(_QWORD *)(v13 + 8);
        if (v15 != v16)
          goto LABEL_42;
        if (v17 >= 0)
          v18 = (unsigned __int8 *)v13;
        else
          v18 = *(unsigned __int8 **)v13;
        if ((v14 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a3, v18, *((_QWORD *)a3 + 1)))
            goto LABEL_42;
        }
        else if (a3[23])
        {
          v19 = a3;
          while (*v19 == *v18)
          {
            ++v19;
            ++v18;
            if (!--v14)
              goto LABEL_22;
          }
          goto LABEL_42;
        }
      }
LABEL_22:
      v20 = *a4;
      if (*a4)
      {
        v21 = (SipUriHeader *)SipMessage::header<SipToHeader>(*(_QWORD *)(v10 + 288));
        if (v21)
          v22 = SipUriHeader::tag(v21);
        else
          v22 = &ims::kEmptyString;
        v23 = *(unsigned __int8 *)(v20 + 175);
        if ((v23 & 0x80u) == 0)
          v24 = *(unsigned __int8 *)(v20 + 175);
        else
          v24 = *(_QWORD *)(v20 + 160);
        v25 = *((unsigned __int8 *)v22 + 23);
        v26 = (char)v25;
        if ((v25 & 0x80u) != 0)
          v25 = *((_QWORD *)v22 + 1);
        if (v24 != v25)
          goto LABEL_42;
        v27 = (const void **)(v20 + 152);
        if (v26 >= 0)
          v28 = v22;
        else
          v28 = *(__int128 **)v22;
        if ((v23 & 0x80) != 0)
        {
          if (memcmp(*v27, v28, *(_QWORD *)(v20 + 160)))
            goto LABEL_42;
        }
        else if (*(_BYTE *)(v20 + 175))
        {
          while (*(unsigned __int8 *)v27 == *(unsigned __int8 *)v28)
          {
            v27 = (const void **)((char *)v27 + 1);
            v28 = (__int128 *)((char *)v28 + 1);
            if (!--v23)
              goto LABEL_41;
          }
          goto LABEL_42;
        }
      }
LABEL_41:
      std::vector<std::shared_ptr<SipPreconditions::ForkStatus>>::push_back[abi:ne180100](a2, v10, (uint64_t)v9);
LABEL_42:
      if (v9)
      {
        v29 = (unint64_t *)&v9->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v31 = (_QWORD *)v4[1];
      if (v31)
      {
        do
        {
          v32 = v31;
          v31 = (_QWORD *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (_QWORD *)v4[2];
          v33 = *v32 == (_QWORD)v4;
          v4 = v32;
        }
        while (!v33);
      }
      v4 = v32;
    }
    while (v32 != v5);
  }
}

void sub_1BF11F288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipDialog::currentServerTransactions(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  SipUriHeader *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  const void **v27;
  __int128 *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  BOOL v33;

  v4 = *(_QWORD **)(a1 + 1944);
  v5 = (_QWORD *)(a1 + 1952);
  if (v4 != (_QWORD *)(a1 + 1952))
  {
    do
    {
      v10 = v4[7];
      v9 = (std::__shared_weak_count *)v4[8];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      if (a3)
      {
        v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 288) + 112))(*(_QWORD *)(v10 + 288));
        v14 = a3[23];
        if ((v14 & 0x80u) == 0)
          v15 = a3[23];
        else
          v15 = *((_QWORD *)a3 + 1);
        v16 = *(unsigned __int8 *)(v13 + 23);
        v17 = (char)v16;
        if ((v16 & 0x80u) != 0)
          v16 = *(_QWORD *)(v13 + 8);
        if (v15 != v16)
          goto LABEL_42;
        if (v17 >= 0)
          v18 = (unsigned __int8 *)v13;
        else
          v18 = *(unsigned __int8 **)v13;
        if ((v14 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a3, v18, *((_QWORD *)a3 + 1)))
            goto LABEL_42;
        }
        else if (a3[23])
        {
          v19 = a3;
          while (*v19 == *v18)
          {
            ++v19;
            ++v18;
            if (!--v14)
              goto LABEL_22;
          }
          goto LABEL_42;
        }
      }
LABEL_22:
      v20 = *a4;
      if (*a4)
      {
        v21 = (SipUriHeader *)SipMessage::header<SipFromHeader>(*(_QWORD *)(v10 + 288));
        if (v21)
          v22 = SipUriHeader::tag(v21);
        else
          v22 = &ims::kEmptyString;
        v23 = *(unsigned __int8 *)(v20 + 175);
        if ((v23 & 0x80u) == 0)
          v24 = *(unsigned __int8 *)(v20 + 175);
        else
          v24 = *(_QWORD *)(v20 + 160);
        v25 = *((unsigned __int8 *)v22 + 23);
        v26 = (char)v25;
        if ((v25 & 0x80u) != 0)
          v25 = *((_QWORD *)v22 + 1);
        if (v24 != v25)
          goto LABEL_42;
        v27 = (const void **)(v20 + 152);
        if (v26 >= 0)
          v28 = v22;
        else
          v28 = *(__int128 **)v22;
        if ((v23 & 0x80) != 0)
        {
          if (memcmp(*v27, v28, *(_QWORD *)(v20 + 160)))
            goto LABEL_42;
        }
        else if (*(_BYTE *)(v20 + 175))
        {
          while (*(unsigned __int8 *)v27 == *(unsigned __int8 *)v28)
          {
            v27 = (const void **)((char *)v27 + 1);
            v28 = (__int128 *)((char *)v28 + 1);
            if (!--v23)
              goto LABEL_41;
          }
          goto LABEL_42;
        }
      }
LABEL_41:
      std::vector<std::shared_ptr<SipPreconditions::ForkStatus>>::push_back[abi:ne180100](a2, v10, (uint64_t)v9);
LABEL_42:
      if (v9)
      {
        v29 = (unint64_t *)&v9->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v31 = (_QWORD *)v4[1];
      if (v31)
      {
        do
        {
          v32 = v31;
          v31 = (_QWORD *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (_QWORD *)v4[2];
          v33 = *v32 == (_QWORD)v4;
          v4 = v32;
        }
        while (!v33);
      }
      v4 = v32;
    }
    while (v32 != v5);
  }
}

void sub_1BF11F4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipDialog::sendQueuedResponseInTransaction@<X0>(std::__shared_weak_count *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  SipUriHeader *v26;
  __int128 *v27;
  uint64_t v28;
  SipHeader *v29;
  unint64_t *v30;
  unint64_t v31;
  _BYTE *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  SipUriHeader *v37;
  __int128 *v38;
  void **v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  int v47;
  std::__shared_weak_count_vtbl *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  void *__p[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  _OWORD v75[3];
  void *v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  SipSession *v80;
  std::__shared_weak_count *v81;
  void *v82;
  std::__shared_weak_count *v83;

  memset(v75, 0, sizeof(v75));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v82, &a1[8].__vftable);
  if (v82)
    v8 = (uint64_t)v82 + 8;
  else
    v8 = 0;
  v73 = v8;
  v74 = v83;
  v82 = 0;
  v83 = 0;
  LoggableString::LoggableString((LoggableString *)__p, "sendQueuedResponseInTransaction");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v75, &v73, (const std::string *)__p);
  if (SBYTE7(v69) < 0)
    operator delete(__p[0]);
  v9 = v74;
  if (v74)
  {
    p_shared_owners = (unint64_t *)&v74->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v83;
  if (v83)
  {
    v13 = (unint64_t *)&v83->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = &a1[3].__shared_owners_;
  v16 = (*(uint64_t (**)(uint64_t *))(a1[3].__shared_owners_ + 64))(&a1[3].__shared_owners_);
  (*(void (**)(uint64_t *, uint64_t))(a1[3].__shared_owners_ + 16))(&a1[3].__shared_owners_, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"SipDialog::sendQueuedResponseInTransaction", 42);
  *(_BYTE *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v16 + 17) = 0;
  v72 = 0;
  v70 = 0u;
  v71 = 0u;
  *(_OWORD *)__p = 0u;
  v69 = 0u;
  v18 = *a3;
  v17 = (std::__shared_weak_count *)a3[1];
  if (v17)
  {
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (char *)SipMessage::header<SipCSeqHeader>(a2);
  v22 = (__int128 *)(v21 + 64);
  if (!v21)
    v22 = &ims::kEmptyString;
  v23 = *((unsigned __int8 *)v22 + 23);
  v24 = *((_QWORD *)v22 + 1);
  if ((v23 & 0x80u) == 0)
    v24 = v23;
  if (!v24)
  {
    v25 = *(_QWORD **)(a2 + 80);
    if (v25)
      SipMessageEncodingMap::copyHeadersFromRequestToResponse(v25, *(const SipRequest **)(v18 + 288), (SipResponse *)a2, 0);
  }
  v72 = 0;
  v70 = 0u;
  v71 = 0u;
  *(_OWORD *)__p = 0u;
  v69 = 0u;
  SipDialog::fillContactHeader((SipDialog *)__p, a1, (_QWORD *)a2);
  if ((*(unsigned int (**)(void *, _QWORD))(*(_QWORD *)__p[1] + 24))(__p[1], v69))
    ImsResult::operator<<<char [33]>((uint64_t)__p, "Contact Header generation failed");
  v26 = (SipUriHeader *)SipMessage::header<SipToHeader>(a2);
  if (v26)
    v27 = SipUriHeader::tag(v26);
  else
    v27 = &ims::kEmptyString;
  v28 = *((unsigned __int8 *)v27 + 23);
  if ((v28 & 0x80u) != 0)
    v28 = *((_QWORD *)v27 + 1);
  if (!v28)
  {
    v29 = SipMessage::header<SipToHeader>((SipMessage *)a2, 1);
    SipUriHeader::setTag((uint64_t)v29, (uint64_t)&a1[44].__shared_weak_owners_);
  }
  if (v17)
  {
    v30 = (unint64_t *)&v17->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if ((*(unsigned int (**)(void *, _QWORD))(*(_QWORD *)__p[1] + 24))(__p[1], v69))
  {
    v32 = (_BYTE *)(*(uint64_t (**)(uint64_t *))(*v15 + 56))(&a1[3].__shared_owners_);
    (*(void (**)(uint64_t *, _BYTE *))(*v15 + 16))(&a1[3].__shared_owners_, v32);
    (*((void (**)(void **, _BYTE *))__p[0] + 2))(__p, v32);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v32[17] = 0;
    ImsResult::ImsResult(a4, (uint64_t)__p);
    goto LABEL_105;
  }
  v34 = *a3;
  v33 = (std::__shared_weak_count *)a3[1];
  if (v33)
  {
    v35 = (unint64_t *)&v33->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v37 = (SipUriHeader *)SipMessage::header<SipFromHeader>(a2);
  if (v37)
    v38 = SipUriHeader::tag(v37);
  else
    v38 = &ims::kEmptyString;
  v39 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&a1[85], (void **)v38);
  if (&a1[85].__shared_owners_ == (uint64_t *)v39)
  {
    v82 = 0;
    v83 = 0;
  }
  else
  {
    v40 = (std::__shared_weak_count *)v39[8];
    v82 = v39[7];
    v83 = v40;
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
  }
  v80 = 0;
  v81 = 0;
  SipDialog::sipSession((SipDialog *)a1, &v80);
  if (!v82 || !v80 || (SipSession::confirmed(v80) & 1) != 0)
    goto LABEL_70;
  v43 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v34 + 288) + 112))(*(_QWORD *)(v34 + 288));
  v44 = v43[23];
  v45 = (v44 & 0x80u) == 0 ? v43[23] : *((_QWORD *)v43 + 1);
  if (v45 != 6)
    goto LABEL_70;
  if ((v44 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v43, "INVITE", *((_QWORD *)v43 + 1)))
    {
LABEL_70:
      v47 = 0;
      goto LABEL_71;
    }
  }
  else if (v43[23])
  {
    v46 = "INVITE";
    while (*v43 == *(unsigned __int8 *)v46)
    {
      ++v43;
      ++v46;
      if (!--v44)
        goto LABEL_68;
    }
    goto LABEL_70;
  }
LABEL_68:
  if ((*(_DWORD *)(a2 + 88) - 200) > 0x63)
    goto LABEL_70;
  std::shared_ptr<IpAddress>::operator=[abi:ne180100](&a1[86].__vftable, (uint64_t *)&v82);
  v47 = 1;
LABEL_71:
  v48 = a1[77].__vftable;
  if (!v48)
    goto LABEL_79;
  v78 = v34;
  v79 = v33;
  if (v33)
  {
    v49 = (unint64_t *)&v33->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t, uint64_t *))v48->~__shared_weak_count + 22))(v48, a2, &v78);
  v51 = v79;
  if (!v79)
    goto LABEL_79;
  v52 = (unint64_t *)&v79->__shared_owners_;
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 - 1, v52));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
    if (v47)
      goto LABEL_80;
  }
  else
  {
LABEL_79:
    if (v47)
    {
LABEL_80:
      v76 = v82;
      v77 = v83;
      if (v83)
      {
        v54 = (unint64_t *)&v83->__shared_owners_;
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      SipDialog::setActiveFork((SipDialog *)a1, (uint64_t *)&v76, 1);
      v56 = v77;
      if (v77)
      {
        v57 = (unint64_t *)&v77->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
    }
  }
  v59 = v81;
  if (v81)
  {
    v60 = (unint64_t *)&v81->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = v83;
  if (v83)
  {
    v63 = (unint64_t *)&v83->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (v33)
  {
    v65 = (unint64_t *)&v33->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a3 + 168))(*a3, a2, 0);
LABEL_105:
  ImsResult::~ImsResult((ImsResult *)__p);
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v75);
}

void sub_1BF11FB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  uint64_t v28;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v28 - 128);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v28 - 96);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v28 - 80);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ImsResult::~ImsResult((ImsResult *)&__p);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void SipDialog::sendResponse(std::__shared_weak_count *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, ImsResult *a5@<X8>)
{
  void **v9;
  void (**v10)(ImsResult *__hidden);
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  ImsResult *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  void *__p;
  std::__shared_weak_count *v28;
  char v29;
  void (**v30)(ImsResult *__hidden);
  uint64_t *v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void *v36[2];
  uint64_t v37;

  v36[0] = 0;
  v36[1] = 0;
  v37 = 0;
  SipTransaction::transactionMapKey(a2, a3, (uint64_t)v36);
  v9 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&a1[81], v36);
  if (&a1[81].__shared_owners_ != (uint64_t *)v9)
  {
    v10 = (void (**)(ImsResult *__hidden))v9[7];
    v11 = (std::__shared_weak_count *)v9[8];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = a1[77].__vftable;
      if (v14)
      {
        v30 = v10;
        v31 = (uint64_t *)v11;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
LABEL_14:
        (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t, void (***)(ImsResult *__hidden)))v14->~__shared_weak_count
         + 30))(v14, a4, &v30);
        v19 = (std::__shared_weak_count *)v31;
        if (v31)
        {
          v20 = (unint64_t *)(v31 + 1);
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        if (!v11)
          goto LABEL_34;
LABEL_30:
        v25 = (unint64_t *)&v11->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_34;
      }
      __p = v10;
      v28 = v11;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
    else
    {
      v14 = a1[77].__vftable;
      if (v14)
      {
        v30 = v10;
        v31 = 0;
        goto LABEL_14;
      }
      __p = v10;
      v28 = 0;
    }
    SipDialog::sendQueuedResponseInTransaction(a1, a4, &__p, (uint64_t)a5);
    if (!v11)
      goto LABEL_34;
    v23 = (unint64_t *)&v11->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    goto LABEL_30;
  }
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v30 = &off_1E78B7238;
  v31 = &_bambiDomain;
  v32 = 1073741825;
  ((void (*)(void **__return_ptr, std::__shared_weak_count *))a1->__vftable[1].__on_zero_shared)(&__p, a1);
  v16 = ImsResult::operator<<<LoggableString>((uint64_t)&v30, (uint64_t)&__p);
  v17 = ImsResult::operator<<<char [40]>(v16, " doesn't contain a transaction with id ");
  v18 = (ImsResult *)ImsResult::operator<<<std::string>(v17, a2);
  ImsLogContainer::logResult((ImsLogContainer *)&a1[3].__shared_owners_, v18);
  ImsResult::ImsResult(a5, v18);
  if (v29 < 0)
    operator delete(__p);
  ImsResult::~ImsResult((ImsResult *)&v30);
LABEL_34:
  if (SHIBYTE(v37) < 0)
    operator delete(v36[0]);
}

void sub_1BF11FE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (*(char *)(v18 - 33) < 0)
    operator delete(*(void **)(v18 - 56));
  _Unwind_Resume(a1);
}

void SipDialog::sendRequest(_QWORD *a1@<X0>, SipRequest *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  void **v8;
  std::__shared_weak_count *v9;
  SipDialogFork *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  SipDialogFork *v43;
  std::__shared_weak_count *v44;
  SipDialogFork *v45;
  std::__shared_weak_count *v46;

  v45 = 0;
  v46 = 0;
  v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a3 + 8);
  if (v7)
  {
    v8 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(a1 + 255), (void **)a3);
    if (a1 + 256 != v8)
    {
      v10 = (SipDialogFork *)v8[7];
      v9 = (std::__shared_weak_count *)v8[8];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v45 = v10;
      v46 = v9;
      if (!v10)
        goto LABEL_56;
      goto LABEL_27;
    }
    v45 = 0;
    v46 = 0;
LABEL_56:
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_63;
  }
  v13 = a1[257];
  if (v13 == 1)
  {
    v18 = a1[255];
    v10 = *(SipDialogFork **)(v18 + 56);
    v9 = *(std::__shared_weak_count **)(v18 + 64);
    if (v9)
    {
      v19 = (unint64_t *)&v9->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v45 = v10;
    v46 = v9;
LABEL_27:
    v43 = v10;
    v44 = v9;
    if (v9)
    {
      v21 = (unint64_t *)&v9->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    goto LABEL_58;
  }
  if (v13)
  {
    v23 = a1 + 10;
    v24 = (*(uint64_t (**)(_QWORD *))(a1[10] + 56))(a1 + 10);
    (*(void (**)(_QWORD *, uint64_t))(*v23 + 16))(v23, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"sendRequest: no remote tag specified, and we have multiple forks", 64);
    *(_BYTE *)(v24 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v24 + 17) = 0;
    goto LABEL_56;
  }
  v14 = (unsigned __int8 *)(*(uint64_t (**)(SipRequest *))(*(_QWORD *)a2 + 112))(a2);
  v15 = v14[23];
  if ((v15 & 0x80u) == 0)
    v16 = v14[23];
  else
    v16 = *((_QWORD *)v14 + 1);
  if (v16 == 6)
  {
    if ((v15 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v14, "INVITE", *((_QWORD *)v14 + 1)))
        goto LABEL_57;
    }
    else
    {
      if (!v14[23])
        goto LABEL_57;
      v17 = "INVITE";
      while (*v14 == *(unsigned __int8 *)v17)
      {
        ++v14;
        ++v17;
        if (!--v15)
          goto LABEL_57;
      }
    }
  }
  v25 = (unsigned __int8 *)(*(uint64_t (**)(SipRequest *))(*(_QWORD *)a2 + 112))(a2);
  v26 = v25[23];
  if ((v26 & 0x80u) == 0)
    v27 = v25[23];
  else
    v27 = *((_QWORD *)v25 + 1);
  if (v27 == 9)
  {
    if ((v26 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v25, "SUBSCRIBE", *((_QWORD *)v25 + 1)))
        goto LABEL_57;
    }
    else
    {
      if (!v25[23])
        goto LABEL_57;
      v28 = "SUBSCRIBE";
      while (*v25 == *(unsigned __int8 *)v28)
      {
        ++v25;
        ++v28;
        if (!--v26)
          goto LABEL_57;
      }
    }
  }
  v29 = (unsigned __int8 *)(*(uint64_t (**)(SipRequest *))(*(_QWORD *)a2 + 112))(a2);
  v30 = v29[23];
  if ((v30 & 0x80u) == 0)
    v31 = v29[23];
  else
    v31 = *((_QWORD *)v29 + 1);
  if (v31 != 7)
  {
LABEL_55:
    v34 = a1[10];
    v33 = a1 + 10;
    v35 = (*(uint64_t (**)(_QWORD *))(v34 + 56))(v33);
    (*(void (**)(_QWORD *, uint64_t))(*v33 + 16))(v33, v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"can't send ", 11);
    *(_BYTE *)(v35 + 17) = 0;
    v36 = (*(uint64_t (**)(SipRequest *))(*(_QWORD *)a2 + 112))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 32))(v35, v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)" request without specifying a remote tag", 40);
    *(_BYTE *)(v35 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v35 + 17) = 0;
    goto LABEL_56;
  }
  if ((v30 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v29, "OPTIONS", *((_QWORD *)v29 + 1)))
      goto LABEL_57;
    goto LABEL_55;
  }
  if (v29[23])
  {
    v32 = "OPTIONS";
    while (*v29 == *(unsigned __int8 *)v32)
    {
      ++v29;
      ++v32;
      if (!--v30)
        goto LABEL_57;
    }
    goto LABEL_55;
  }
LABEL_57:
  v43 = 0;
  v44 = 0;
LABEL_58:
  SipDialog::sendRequestInFork(a4, (uint64_t)a1, a2, &v43);
  v37 = v44;
  if (v44)
  {
    v38 = (unint64_t *)&v44->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
LABEL_63:
  v40 = v46;
  if (v46)
  {
    v41 = (unint64_t *)&v46->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_1BF12025C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SipDialog::sendAck(_QWORD *a1@<X0>, SipRequest *a2@<X1>, uint64_t a3@<X2>, ImsResult *a4@<X8>)
{
  uint64_t v8;
  SipDialogFork *v9;
  SipDialogFork *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _BYTE *v21;
  _DWORD *v22;
  int v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *p_shared_weak_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  SipTransactionLayer *v29;
  SipTransactionLayer *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  SipDialogFork *v46[2];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  SipDialogFork *v52;
  std::__shared_weak_count *v53;

  if (a1[257] != 1)
  {
    v10 = 0;
    v52 = 0;
    v53 = 0;
LABEL_8:
    v13 = a1 + 10;
    v14 = (*(uint64_t (**)(_QWORD *))(a1[10] + 56))(a1 + 10);
    (*(void (**)(_QWORD *, uint64_t))(*v13 + 16))(a1 + 10, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"attempted to send an ACK when we have ", 38);
    *(_BYTE *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" forks", 6);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v9 = 0;
    *(_BYTE *)(v14 + 17) = 0;
    goto LABEL_9;
  }
  v8 = a1[255];
  v9 = *(SipDialogFork **)(v8 + 56);
  v10 = *(SipDialogFork **)(v8 + 64);
  v52 = v9;
  v53 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v11 = (unint64_t *)((char *)v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (!v9)
    goto LABEL_8;
LABEL_9:
  v51 = 0;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v46[0] = v9;
  v46[1] = v10;
  if (v10)
  {
    v15 = (unint64_t *)((char *)v10 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  SipDialog::fillCommonRequestHeaders((uint64_t)&v47, (uint64_t)a1, a2, v46);
  if (v10)
  {
    v17 = (unint64_t *)((char *)v10 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      (*(void (**)(SipDialogFork *))(*(_QWORD *)v10 + 16))(v10);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v10);
    }
  }
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v47 + 1) + 24))(*((_QWORD *)&v47 + 1), v48))
  {
    v20 = a1[10];
    v19 = a1 + 10;
    v21 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(v20 + 56))(v19);
    (*(void (**)(_QWORD *, _BYTE *))(*v19 + 16))(v19, v21);
    (*(void (**)(__int128 *, _BYTE *))(v47 + 16))(&v47, v21);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v21[17] = 0;
    ImsResult::ImsResult((uint64_t)a4, (uint64_t)&v47);
  }
  else
  {
    v22 = SipMessage::header<SipCSeqHeader>(*(_QWORD *)(*(_QWORD *)a3 + 288));
    if (v22)
      v23 = v22[15];
    else
      v23 = 0;
    SipRequest::setCSeq(a2, v23);
    v24 = *(std::__shared_weak_count **)(*(_QWORD *)a3 + 88);
    if (v24)
    {
      v25 = *(_QWORD *)(*(_QWORD *)a3 + 80);
      p_shared_weak_owners = (unint64_t *)&v24->__shared_weak_owners_;
      do
        v27 = __ldxr(p_shared_weak_owners);
      while (__stxr(v27 + 1, p_shared_weak_owners));
      v44 = 0;
      v28 = std::__shared_weak_count::lock(v24);
      v45 = v28;
      if (v28)
        v44 = v25;
      else
        v25 = 0;
      std::__shared_weak_count::__release_weak(v24);
    }
    else
    {
      v28 = 0;
      v25 = 0;
      v44 = 0;
      v45 = 0;
    }
    v29 = (SipTransactionLayer *)SipUserAgent::transactionLayer(*(SipUserAgent **)(a1[26] + 136));
    v30 = v29;
    v42 = v25;
    v43 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v32 = __ldxr(p_shared_owners);
      while (__stxr(v32 + 1, p_shared_owners));
    }
    SipTransactionLayer::updateViaHeaderForRequest(v29, a2);
    SipTransportLayer::sendMessage(*((_QWORD *)v30 + 17), a2, &v42, 0, a4);
    v33 = v43;
    if (v43)
    {
      v34 = (unint64_t *)&v43->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = v45;
    if (v45)
    {
      v37 = (unint64_t *)&v45->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  ImsResult::~ImsResult((ImsResult *)&v47);
  v39 = v53;
  if (v53)
  {
    v40 = (unint64_t *)&v53->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
}

void sub_1BF120610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ImsResult::~ImsResult((ImsResult *)va1);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3 - 80);
  _Unwind_Resume(a1);
}

void SipDialog::sendResponse(std::string *__str@<X4>, std::__shared_weak_count *a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, int a5@<W3>, ImsResult *a6@<X8>)
{
  _OWORD v10[6];
  void *__p[2];
  uint64_t v12;

  v12 = 0;
  *(_OWORD *)__p = 0u;
  memset(v10, 0, sizeof(v10));
  SipResponse::SipResponse((uint64_t)v10, a5, __str, *(_QWORD *)(a2[8].__shared_weak_owners_ + 136) + 288);
  SipDialog::sendResponse(a2, a3, a4, (uint64_t)v10, a6);
  *(_QWORD *)&v10[0] = off_1E78E40E8;
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  SipMessage::~SipMessage((SipMessage *)v10);
}

void sub_1BF120710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  SipResponse::~SipResponse(&a9);
  _Unwind_Resume(a1);
}

BOOL SipDialog::remoteSideAllowsEvent(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  const char *v4;
  const char *v5;
  int v6;
  _BOOL8 result;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  v2 = *(_QWORD **)(a1 + 1872);
  v3 = (_QWORD *)(a1 + 1880);
  if (v2 == (_QWORD *)(a1 + 1880))
    return 0;
  if (*(char *)(a2 + 23) >= 0)
    v4 = (const char *)a2;
  else
    v4 = *(const char **)a2;
  do
  {
    if (*((char *)v2 + 55) >= 0)
      v5 = (const char *)(v2 + 4);
    else
      v5 = (const char *)v2[4];
    v6 = strcasecmp(v4, v5);
    result = v6 == 0;
    if (!v6)
      break;
    v8 = (_QWORD *)v2[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v2[2];
        v10 = *v9 == (_QWORD)v2;
        v2 = v9;
      }
      while (!v10);
    }
    v2 = v9;
  }
  while (v9 != v3);
  return result;
}

BOOL SipDialog::remoteSideAllows(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  const char *v4;
  const char *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v2 = *(_QWORD **)(a1 + 1896);
  v3 = (_QWORD *)(a1 + 1904);
  if (v2 != (_QWORD *)(a1 + 1904))
  {
    if (*(char *)(a2 + 23) >= 0)
      v4 = (const char *)a2;
    else
      v4 = *(const char **)a2;
    while (1)
    {
      v5 = *((char *)v2 + 55) >= 0 ? (const char *)(v2 + 4) : (const char *)v2[4];
      if (!strcasecmp(v5, v4))
        break;
      v6 = (_QWORD *)v2[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v2[2];
          v8 = *v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
      if (v7 == v3)
      {
        v2 = v3;
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

_QWORD *SipDialog::printSubscriptions(_QWORD *this, ImsOutStream *a2, int a3)
{
  _QWORD *v3;
  _QWORD *v4;
  SipSubscription **v7;
  SipSubscription **v8;
  SipSubscription *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  if (this[251])
  {
    v3 = (_QWORD *)this[249];
    v4 = this + 250;
    if (v3 != this + 250)
    {
      do
      {
        v7 = (SipSubscription **)v3[7];
        v8 = (SipSubscription **)v3[8];
        while (v7 != v8)
        {
          v9 = *v7;
          v7 += 2;
          SipSubscription::printSubscriptionInfo(v9, a2, a3);
          this = (_QWORD *)(*(uint64_t (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *((_BYTE *)a2 + 17) = 0;
        }
        v10 = (_QWORD *)v3[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v3[2];
            v12 = *v11 == (_QWORD)v3;
            v3 = v11;
          }
          while (!v12);
        }
        v3 = v11;
      }
      while (v11 != v4);
    }
  }
  return this;
}

ImsOutStream *SipDialog::printDialogInfo(SipDialog *this, ImsOutStream *a2)
{
  const char *v4;
  SipDialog *v5;
  std::__shared_weak_count *v6;
  std::string::size_type v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  SipDialog *v12;
  SipDialog *v13;
  BOOL v14;
  SipDialog *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  const std::string *v21;
  unint64_t *v22;
  unint64_t v23;
  SipDialog *v24;
  SipDialog *v25;
  SipDialog *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  const std::string *v32;
  unint64_t *v33;
  unint64_t v34;
  SipDialog *v35;
  SipDialog *v36;
  void *v38[2];
  char v39;
  void *__p;
  char v41;
  std::string v42;
  uint64_t v43;
  std::__shared_weak_count *v44;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  MO/MT:           ", 19);
  *((_BYTE *)a2 + 17) = 0;
  if (*((_BYTE *)this + 1920))
    v4 = "MO";
  else
    v4 = "MT";
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)v4, 2);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Call ID:         ", 19);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(char *, ImsOutStream *))(*((_QWORD *)this + 188) + 16))((char *)this + 1504, a2);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Conversation ID:         ", 27);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(char *, ImsOutStream *))(*((_QWORD *)this + 202) + 16))((char *)this + 1616, a2);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Contribution ID:         ", 27);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(char *, ImsOutStream *))(*((_QWORD *)this + 209) + 16))((char *)this + 1672, a2);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if ((*((char *)this + 1783) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 1783))
      goto LABEL_7;
    goto LABEL_6;
  }
  if (*((_QWORD *)this + 221))
  {
LABEL_6:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  In-Reply-To Contribution ID:         ", 39);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(char *, ImsOutStream *))(*((_QWORD *)this + 216) + 16))((char *)this + 1728, a2);
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
  }
LABEL_7:
  if ((*((char *)this + 1615) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 1615))
      goto LABEL_10;
    goto LABEL_9;
  }
  if (*((_QWORD *)this + 200))
  {
LABEL_9:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Session ID:      ", 19);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(char *, ImsOutStream *))(*((_QWORD *)this + 195) + 16))((char *)this + 1560, a2);
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
  }
LABEL_10:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Remote URI:      ", 19);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(char *, ImsOutStream *))(*((_QWORD *)this + 28) + 40))((char *)this + 224, a2);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (*((_QWORD *)this + 79))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Sender identity: ", 19);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(_QWORD, ImsOutStream *))(**((_QWORD **)this + 79) + 40))(*((_QWORD *)this + 79), a2);
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
  }
  if ((*((char *)this + 663) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 663))
      goto LABEL_15;
    goto LABEL_14;
  }
  if (*((_QWORD *)this + 81))
  {
LABEL_14:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Sender name:     ", 19);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, char *))(*(_QWORD *)a2 + 32))(a2, (char *)this + 640);
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
  }
LABEL_15:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Local tag:       ", 19);
  *((_BYTE *)a2 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)v38, (const std::string *)((char *)this + 1072));
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 56))(a2, v38);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (v41 < 0)
    operator delete(__p);
  if (v39 < 0)
    operator delete(v38[0]);
  v5 = (SipDialog *)*((_QWORD *)this + 255);
  if (v5 != (SipDialog *)((char *)this + 2048))
  {
    do
    {
      v7 = *((_QWORD *)v5 + 7);
      v6 = (std::__shared_weak_count *)*((_QWORD *)v5 + 8);
      v42.__r_.__value_.__r.__words[0] = v7;
      v42.__r_.__value_.__l.__size_ = (std::string::size_type)v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Fork ", 7);
      *((_BYTE *)a2 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v38, (const std::string *)(v7 + 152));
      (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 56))(a2, v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)":", 1);
      *((_BYTE *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((_BYTE *)a2 + 17) = 0;
      if (v41 < 0)
        operator delete(__p);
      if (v39 < 0)
        operator delete(v38[0]);
      SipDialogFork::printForkInfo((SipDialogFork *)v7, a2);
      if (v6)
      {
        v10 = (unint64_t *)&v6->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v12 = (SipDialog *)*((_QWORD *)v5 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(SipDialog **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (SipDialog *)*((_QWORD *)v5 + 2);
          v14 = *(_QWORD *)v13 == (_QWORD)v5;
          v5 = v13;
        }
        while (!v14);
      }
      v5 = v13;
    }
    while (v13 != (SipDialog *)((char *)this + 2048));
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Client txns:    ", 18);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  v15 = (SipDialog *)*((_QWORD *)this + 246);
  if (v15 != (SipDialog *)((char *)this + 1976))
  {
    do
    {
      v17 = *((_QWORD *)v15 + 7);
      v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 8);
      v43 = v17;
      v44 = v16;
      if (v16)
      {
        v18 = (unint64_t *)&v16->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    ", 4);
      *((_BYTE *)a2 + 17) = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v17 + 152))(v38, v17);
      (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
      *((_BYTE *)a2 + 17) = 0;
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
      v21 = (const std::string *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v20);
      LoggableString::LoggableString(&v42, v21);
      (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &v42);
      (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((_BYTE *)a2 + 17) = 0;
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if (v39 < 0)
      {
        operator delete(v38[0]);
        if (v16)
        {
LABEL_48:
          v22 = (unint64_t *)&v16->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
      else if (v16)
      {
        goto LABEL_48;
      }
      v24 = (SipDialog *)*((_QWORD *)v15 + 1);
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = *(SipDialog **)v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (SipDialog *)*((_QWORD *)v15 + 2);
          v14 = *(_QWORD *)v25 == (_QWORD)v15;
          v15 = v25;
        }
        while (!v14);
      }
      v15 = v25;
    }
    while (v25 != (SipDialog *)((char *)this + 1976));
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Server txns:    ", 18);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  v26 = (SipDialog *)*((_QWORD *)this + 243);
  if (v26 != (SipDialog *)((char *)this + 1952))
  {
    do
    {
      v28 = *((_QWORD *)v26 + 7);
      v27 = (std::__shared_weak_count *)*((_QWORD *)v26 + 8);
      v43 = v28;
      v44 = v27;
      if (v27)
      {
        v29 = (unint64_t *)&v27->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    ", 4);
      *((_BYTE *)a2 + 17) = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v28 + 160))(v38, v28);
      (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
      *((_BYTE *)a2 + 17) = 0;
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
      v32 = (const std::string *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v31);
      LoggableString::LoggableString(&v42, v32);
      (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &v42);
      (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((_BYTE *)a2 + 17) = 0;
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if (v39 < 0)
      {
        operator delete(v38[0]);
        if (v27)
        {
LABEL_68:
          v33 = (unint64_t *)&v27->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
      }
      else if (v27)
      {
        goto LABEL_68;
      }
      v35 = (SipDialog *)*((_QWORD *)v26 + 1);
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = *(SipDialog **)v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (SipDialog *)*((_QWORD *)v26 + 2);
          v14 = *(_QWORD *)v36 == (_QWORD)v26;
          v26 = v36;
        }
        while (!v14);
      }
      v26 = v36;
    }
    while (v36 != (SipDialog *)((char *)this + 1952));
  }
  return a2;
}

void sub_1BF1211D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  ims::AccessNetwork::~AccessNetwork(&a10);
  _Unwind_Resume(a1);
}

void SipDialog::handleAuthChallengeResponse(std::string *this, const SipAuthInfo *a2)
{
  uint64_t v3;
  const std::string *v4;
  SipRequest *size;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::string::value_type *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _BYTE v13[72];
  std::string v14;

  if (this[80].__r_.__value_.__l.__size_)
  {
    SipDialog::resetIfNecessary(this);
    v3 = (*(uint64_t (**)(std::string::value_type *))(this[3].__r_.__value_.__l.__size_ + 64))(&this[3].__r_.__value_.__s.__data_[8]);
    (*(void (**)(std::string::value_type *, uint64_t))(this[3].__r_.__value_.__l.__size_ + 16))(&this[3].__r_.__value_.__s.__data_[8], v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"resending ", 10);
    *(_BYTE *)(v3 + 17) = 0;
    v4 = (const std::string *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)this[80].__r_.__value_.__l.__size_
                                                                                + 112))(this[80].__r_.__value_.__l.__size_);
    LoggableString::LoggableString(&v14, v4);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v3 + 40))(v3, &v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" request with auth info", 23);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    size = (SipRequest *)this[80].__r_.__value_.__l.__size_;
    this[80].__r_.__value_.__l.__size_ = 0;
    SipAuthClient::addAuthorizationToRequest(*(SipAuthClient **)(*(_QWORD *)(this[8].__r_.__value_.__r.__words[2] + 136) + 280), size, 1, (uint64_t)v13);
    ImsResult::~ImsResult((ImsResult *)v13);
    std::string::basic_string[abi:ne180100]<0>(&v14, (char *)&str_21_6);
    SipDialog::sendRequest(this, size, (uint64_t)&v14, &v11);
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if (size)
      (*(void (**)(SipRequest *))(*(_QWORD *)size + 8))(size);
  }
  else
  {
    v9 = &this[3].__r_.__value_.__s.__data_[8];
    v10 = (*(uint64_t (**)(std::string::value_type *, const SipAuthInfo *))(this[3].__r_.__value_.__l.__size_
                                                                                    + 56))(&this[3].__r_.__value_.__s.__data_[8], a2);
    (*(void (**)(std::string::value_type *, uint64_t))(*(_QWORD *)v9 + 16))(v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"received an auth response with no pending request", 49);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
  }
}

void sub_1BF1214A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 33) < 0)
    operator delete(*(void **)(v1 - 56));
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'SipDialog::handleAuthChallengeResponse(SipDialog *this, const SipAuthInfo *a2)
{
  SipDialog::handleAuthChallengeResponse((std::string *)((char *)this - 184), a2);
}

uint64_t SipDialog::handleAuthChallengeTimeout(SipDialog *this, const SipAuthInfo *a2)
{
  uint64_t v3;
  uint64_t result;
  char *v5;
  uint64_t v6;

  if (*((_QWORD *)this + 241))
  {
    v3 = *((_QWORD *)this + 231);
    if (v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 184))(v3);
    else
      return SipDialog::forceDeinitialization(this);
  }
  else
  {
    v5 = (char *)this + 80;
    v6 = (*(uint64_t (**)(char *, const SipAuthInfo *))(*((_QWORD *)this + 10) + 56))((char *)this + 80, a2);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v5 + 16))(v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"received an auth timeout with no pending request", 48);
    *(_BYTE *)(v6 + 17) = 0;
    result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
  }
  return result;
}

uint64_t `non-virtual thunk to'SipDialog::handleAuthChallengeTimeout(SipDialog *this, const SipAuthInfo *a2)
{
  return SipDialog::handleAuthChallengeTimeout((SipDialog *)((char *)this - 184), a2);
}

void SipDialog::checkTimers(SipDialog *this)
{
  _QWORD **v1;
  SipSubscription **v2;
  SipSubscription **v3;
  _QWORD *v4;
  _QWORD **v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8[2];

  if (*((_QWORD *)this + 251))
  {
    v7 = 0;
    v8[0] = 0;
    v8[1] = 0;
    std::map<std::string,std::vector<std::shared_ptr<SipSubscription>>>::map[abi:ne180100]((uint64_t *)&v7, (uint64_t)this + 1992);
    v1 = v7;
    if (v7 != v8)
    {
      do
      {
        v2 = (SipSubscription **)v1[7];
        v3 = (SipSubscription **)v1[8];
        while (v2 != v3)
        {
          SipSubscription::checkTimers(*v2);
          v2 += 2;
        }
        v4 = v1[1];
        if (v4)
        {
          do
          {
            v5 = (_QWORD **)v4;
            v4 = (_QWORD *)*v4;
          }
          while (v4);
        }
        else
        {
          do
          {
            v5 = (_QWORD **)v1[2];
            v6 = *v5 == v1;
            v1 = v5;
          }
          while (!v6);
        }
        v1 = v5;
      }
      while (v5 != v8);
    }
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::destroy((uint64_t)&v7, v8[0]);
  }
}

void sub_1BF121634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t SipDialog::determineIncomingMessageCategory(SipDialog *this, const SipRequest *a2, const SipResponse *a3)
{
  void **v3;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  SipSubscription *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void **v15;
  void **v16;
  __int128 *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  SipSubscription *v22;
  std::__shared_weak_count *v23;

  v7 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)a2 + 112))(a2);
  v8 = v7[23];
  if ((v8 & 0x80u) == 0)
    v9 = v7[23];
  else
    v9 = *((_QWORD *)v7 + 1);
  if (v9 == 3)
  {
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v7, &SipRequest::kMethodAck, *((_QWORD *)v7 + 1)))
        goto LABEL_21;
    }
    else if (v7[23])
    {
      v10 = &SipRequest::kMethodAck;
      while (*v7 == *(unsigned __int8 *)v10)
      {
        ++v7;
        v10 = (__int128 *)((char *)v10 + 1);
        if (!--v8)
          goto LABEL_12;
      }
      goto LABEL_21;
    }
LABEL_12:
    v22 = 0;
    v23 = 0;
    SipDialog::sipSession(this, &v22);
    v11 = v22;
    if (v22)
    {
      if (*((_BYTE *)v22 + 1320))
        LOBYTE(v3) = 3;
      else
        LOBYTE(v3) = 2;
    }
    v12 = v23;
    if (!v23)
      goto LABEL_20;
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (v11)
        return v3;
    }
    else
    {
LABEL_20:
      if (v11)
        return v3;
    }
  }
LABEL_21:
  v15 = (void **)SipMessage::header<SipEventHeader>((uint64_t)a2);
  v3 = v15;
  if (v15)
  {
    v22 = 0;
    v23 = 0;
    v16 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v15 + 9), (void **)&kParameterId);
    if (v3 + 10 == v16)
      v17 = &ims::kEmptyString;
    else
      v17 = (__int128 *)(v16 + 7);
    SipDialog::subscriptionForEvent((uint64_t)this, v3 + 13, v17, &v22);
    if (v22)
      LOBYTE(v3) = SipSubscription::determineIncomingMessageCategory(v22, a2, (unint64_t)a3);
    else
      LOBYTE(v3) = 0;
    v18 = v23;
    if (v23)
    {
      v19 = (unint64_t *)&v23->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  return v3;
}

void sub_1BF121818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<SipSubscription>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<SipSubscription>>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, __int128 **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  _QWORD *v10;
  uint64_t *v11;
  __int128 *v12;
  uint64_t *v13;
  std::string *v14;
  __int128 v15;
  uint64_t *v16;
  _QWORD v18[2];
  uint64_t v19;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (!v5)
    goto LABEL_10;
  v7 = a1 + 1;
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v10 = v5 + 4;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0)
        break;
      v5 = *v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2) & 0x80) == 0)
      break;
    v7 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    v12 = *a3;
    v19 = 0;
    v13 = (uint64_t *)operator new(0x48uLL);
    v18[0] = v13;
    v18[1] = v6;
    v14 = (std::string *)(v13 + 4);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v15 = *v12;
      v13[6] = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    }
    v13[7] = 0;
    v13[8] = 0;
    LOBYTE(v19) = 1;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v8;
    *v7 = v13;
    v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v11 = (uint64_t *)v18[0];
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  return v11;
}

void sub_1BF121B70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<SipSubscription>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::map<std::string,std::vector<std::shared_ptr<SipSubscription>>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::vector<std::shared_ptr<SipSubscription>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_1BF121C48(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<std::shared_ptr<SipSubscription>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<SipSubscription>>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<SipSubscription>>> const&>(uint64_t **a1, uint64_t a2, void **a3, __int128 *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  void **v12;

  v11 = 0;
  v12 = 0;
  v6 = std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::__construct_node<std::pair<std::string const,std::vector<std::shared_ptr<SipSubscription>>> const&>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>>>::__construct_node<std::pair<std::string const,std::vector<std::shared_ptr<SipSubscription>>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = std::pair<std::string const,std::vector<std::shared_ptr<SipSubscription>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1BF121DDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<SipSubscription>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<std::shared_ptr<SipSubscription>>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  v6 = (char *)*((_QWORD *)a2 + 3);
  v5 = (char *)*((_QWORD *)a2 + 4);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v8 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<BambiCallAction>>>(v7 >> 4);
    this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    this[1].__r_.__value_.__l.__size_ = (std::string::size_type)v8;
    this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v8[2 * v9];
    do
    {
      *v8 = *(_QWORD *)v6;
      v10 = *((_QWORD *)v6 + 1);
      v8[1] = v10;
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v6 += 16;
      v8 += 2;
    }
    while (v6 != v5);
    this[1].__r_.__value_.__l.__size_ = (std::string::size_type)v8;
  }
  return this;
}

void sub_1BF121ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (*(char *)(v9 + 23) < 0)
    operator delete(*(void **)v9);
  _Unwind_Resume(a1);
}

uint64_t *VZWRegistrationPolicy::VZWRegistrationPolicy(uint64_t *a1, std::__shared_weak_count **a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v7[2];

  a1[13] = (uint64_t)&off_1E78B7B60;
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
  }
  DefaultRegistrationPolicy::DefaultRegistrationPolicy(a1, (uint64_t *)&off_1E78E0808, v7);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  *a1 = (uint64_t)&off_1E78E0550;
  a1[13] = (uint64_t)&unk_1E78E07B0;
  a1[22] = (uint64_t)&unk_1E78E07F8;
  return a1;
}

void sub_1BF121F80(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

BOOL VZWRegistrationPolicy::useNextProxyOnRegistrationChange(VZWRegistrationPolicy *this)
{
  return *((_QWORD *)this + 58) == *((_QWORD *)this + 57);
}

void VZWRegistrationPolicy::emergencyRegistrationTimeout(VZWRegistrationPolicy *this)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  ImsOutStream *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void (**v9)(ImsResult *__hidden);
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  void (**v17)(ImsResult *__hidden);
  uint64_t *v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v17 = &off_1E78B7238;
  v18 = &_bambiDomain;
  v19 = 1073741830;
  v2 = *((_QWORD *)this + 54);
  if (v2)
    v3 = v2 == *((_QWORD *)this + 55);
  else
    v3 = 1;
  if (!v3)
    ImsResult::operator=(v2 + 480 * *((_QWORD *)this + 57) + 408, (uint64_t)&v17);
  ImsResult::~ImsResult((ImsResult *)&v17);
  SipRegistrationPolicy::clearAllThrottling((ims **)this);
  v4 = (*(uint64_t (**)(VZWRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(VZWRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"emergency registration timed out for current proxy", 50);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  v5 = (ImsOutStream *)(*(uint64_t (**)(VZWRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(VZWRegistrationPolicy *, ImsOutStream *))(*(_QWORD *)this + 16))(this, v5);
  SipRegistrationPolicy::printProxyErrors((uint64_t)this, v5, 2);
  if ((*(unsigned int (**)(VZWRegistrationPolicy *, _QWORD))(*(_QWORD *)this + 416))(this, 0))
  {
    (*(void (**)(VZWRegistrationPolicy *))(*(_QWORD *)this + 504))(this);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
    if (v6)
    {
      v7 = std::__shared_weak_count::lock(v6);
      v18 = (uint64_t *)v7;
      if (v7)
      {
        v8 = v7;
        v9 = (void (**)(ImsResult *__hidden))*((_QWORD *)this + 46);
        v17 = v9;
        if (v9)
          (*((void (**)(_QWORD))*v9 + 5))(v9);
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
LABEL_20:
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
  else
  {
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
    if (v12)
    {
      v13 = std::__shared_weak_count::lock(v12);
      if (v13)
      {
        v8 = v13;
        v14 = *((_QWORD *)this + 46);
        if (v14)
        {
          v20 = 0u;
          v21 = 0u;
          v22 = 0u;
          v17 = &off_1E78B7238;
          v18 = &_bambiDomain;
          v19 = 1073741842;
          v15 = ImsResult::operator<<<char [31]>((uint64_t)&v17, "Emergency registration timeout");
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 88))(v14, v15);
          ImsResult::~ImsResult((ImsResult *)&v17);
        }
        v16 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldaxr(v16);
        while (__stlxr(v11 - 1, v16));
        goto LABEL_20;
      }
    }
  }
}

void sub_1BF1221DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t VZWRegistrationPolicy::handleRegistrationError(VZWRegistrationPolicy *this, const SipResponse *a2)
{
  time_t v4;
  uint64_t v5;
  _OWORD v7[4];
  uint64_t v8;

  v8 = 0;
  memset(v7, 0, sizeof(v7));
  SipResultDomain::makeResult(a2, (uint64_t)v7);
  if ((*(unsigned int (**)(VZWRegistrationPolicy *))(*(_QWORD *)this + 528))(this))
  {
    if (!(*(unsigned int (**)(VZWRegistrationPolicy *, _QWORD))(*(_QWORD *)this + 416))(this, 0)
      || !*((_BYTE *)this + 220))
    {
      v5 = -1;
      goto LABEL_8;
    }
    v4 = SipRegistrationPolicy::handleGeneralError(this, (const ImsResult *)v7);
  }
  else
  {
    v4 = SipRegistrationPolicy::handleRegistrationError(this, a2);
  }
  v5 = v4;
LABEL_8:
  ImsResult::~ImsResult((ImsResult *)v7);
  return v5;
}

void sub_1BF1222C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ImsResult::~ImsResult((ImsResult *)&a9);
  _Unwind_Resume(a1);
}

time_t VZWRegistrationPolicy::handleGeneralErrorFromOneProxy(VZWRegistrationPolicy *this, const ImsResult *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v11;

  v4 = (*(uint64_t (**)(VZWRegistrationPolicy *))(*(_QWORD *)this + 528))(this);
  v5 = (*(uint64_t (**)(VZWRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(VZWRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v5);
  if (v4)
  {
    SipRegistrationPolicy::printProxyErrors((uint64_t)this, (ImsOutStream *)v5, 2);
    if ((*(unsigned int (**)(VZWRegistrationPolicy *, _QWORD))(*(_QWORD *)this + 416))(this, 0))
    {
      v6 = (*(uint64_t (**)(VZWRegistrationPolicy *))(*(_QWORD *)this + 328))(this);
      return SipRegistrationPolicy::scheduleRetry(this, a2, 0, v6);
    }
    else
    {
      return -1;
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"handleGeneralErrorFromOneProxy: getting from policy SipRegClientRegType::", 73);
    *(_BYTE *)(v5 + 17) = 0;
    SipRegistrationPolicy::getClientRegTypeStr(this, __p);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 32))(v5, __p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (v11 < 0)
      operator delete(__p[0]);
    if (*((_DWORD *)this + 587) != 2)
    {
      v8 = (*(uint64_t (**)(VZWRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(VZWRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"handle result.code ", 19);
      *(_BYTE *)(v8 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (*((_DWORD *)a2 + 4) == 482)
      {
        v9 = (*(uint64_t (**)(VZWRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
        (*(void (**)(VZWRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"need to switch proxy", 20);
        *(_BYTE *)(v9 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v9 + 17) = 0;
        *((_BYTE *)this + 220) = 1;
      }
    }
    return SipRegistrationPolicy::handleGeneralErrorFromOneProxy(this, a2);
  }
}

void sub_1BF1224FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t VZWRegistrationPolicy::handleGeneralErrorFromAllProxies(VZWRegistrationPolicy *this, const ImsResult *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL i;
  uint64_t v7;
  uint64_t v8;
  _OWORD v10[25];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v4 = *((_QWORD *)this + 54);
  v5 = *((_QWORD *)this + 55);
  for (i = *((_BYTE *)this + 2145) != 0; v4 != v5; v4 += 480)
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v11 = 0u;
    memset(v10, 0, sizeof(v10));
    SipUri::SipUri((SipUri *)v10, (const SipUri *)v4);
    ImsResult::ImsResult((ImsResult *)((char *)&v11 + 8), (const ImsResult *)(v4 + 408));
    if ((uint64_t *)v12 != &SipResultDomain::_domain
      || !SipResponseCodeMap::containsResponseCodeForMethod((uint64_t)this + 1960, (void **)"REGISTER", WORD4(v12), 0))
    {
      i = 0;
    }
    ImsResult::~ImsResult((ImsResult *)((char *)&v11 + 8));
    SipUri::~SipUri((SipUri *)v10);
  }
  v7 = *(_QWORD *)this;
  if (!i)
    return (*(uint64_t (**)(VZWRegistrationPolicy *, const ImsResult *))(v7 + 144))(this, a2);
  v8 = (*(uint64_t (**)(VZWRegistrationPolicy *))(v7 + 48))(this);
  (*(void (**)(VZWRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Timing out registration due to error responses from all proxies.", 64);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  return -1;
}

void sub_1BF1226A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ImsResult *v9;

  ImsResult::~ImsResult(v9);
  SipUri::~SipUri((SipUri *)&a9);
  _Unwind_Resume(a1);
}

uint64_t VZWRegistrationPolicy::generalErrorRetryInterval(VZWRegistrationPolicy *this)
{
  if (((*(uint64_t (**)(VZWRegistrationPolicy *))(*(_QWORD *)this + 528))(this) & 1) != 0)
    return 0;
  else
    return DefaultRegistrationPolicy::generalErrorRetryInterval(this);
}

uint64_t VZWRegistrationPolicy::isTransactionRetryAllowed(VZWRegistrationPolicy *this)
{
  return (*(unsigned int (**)(VZWRegistrationPolicy *))(*(_QWORD *)this + 528))(this) ^ 1;
}

uint64_t VZWRegistrationPolicy::isRegistrationRetryAllowed(SipRegistrationPolicy *a1, uint64_t a2)
{
  if ((*(unsigned int (**)(SipRegistrationPolicy *))(*(_QWORD *)a1 + 528))(a1)
    && 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)a1 + 55) - *((_QWORD *)a1 + 54)) >> 5) == SipRegistrationPolicy::countOfProxiesWithErrors(a1))
  {
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a1 + 279) + 16))(*((_QWORD *)a1 + 279), a2);
  }
  else
  {
    return 1;
  }
}

void VZWRegistrationPolicy::onInterfaceChanged(ims **this)
{
  uint64_t v2;

  v2 = (*((uint64_t (**)(ims **))*this + 8))(this);
  (*((void (**)(ims **, uint64_t))*this + 2))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Network interface changed. Clearing throttling, failure flags and resetting proxy offset.", 89);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  (*((void (**)(ims **))*this + 24))(this);
  SipRegistrationPolicy::clearAllThrottling(this);
  SipRegistrationPolicy::setProxyOffset((SipRegistrationPolicy *)this, 0);
}

void VZWRegistrationPolicy::onProxyListChanged(uint64_t a1, const SipUri *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Proxy list changed.  Clearing throttling and resetting proxy offset...", 70);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  SipRegistrationPolicy::clearAllThrottling((ims **)a1);
  if (!*((_BYTE *)a2 + 408))
    goto LABEL_6;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"In the current (old) proxy list, current proxy is #", 51);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" (", 2);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(const SipUri *, uint64_t))(*(_QWORD *)a2 + 40))(a2, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)")", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  v6 = *(_QWORD *)(a1 + 432);
  if (*(_QWORD *)(a1 + 440) == v6)
  {
LABEL_6:
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Continue to resetProxyOffset()...", 33);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    SipRegistrationPolicy::setProxyOffset((SipRegistrationPolicy *)a1, 0);
  }
  else
  {
    v7 = 0;
    v8 = 0;
    while ((SipUri::equals((SipUri *)(v6 + v7), a2, 1) & 1) == 0)
    {
      ++v8;
      v6 = *(_QWORD *)(a1 + 432);
      v7 += 480;
      if (v8 >= 0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(a1 + 440) - v6) >> 5))
        goto LABEL_6;
    }
    *(_QWORD *)(a1 + 456) = v8;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"In the up-to-date (new) proxy list, current proxy is now #", 58);
    *(_BYTE *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" (", 2);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(const SipUri *, uint64_t))(*(_QWORD *)a2 + 40))(a2, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)")", 1);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
  }
}

void VZWRegistrationPolicy::handleDeviceEvents(VZWRegistrationPolicy *this, int a2)
{
  char v2;

  v2 = a2;
  SipRegistrationPolicy::handleDeviceEvents(this, a2);
  if ((v2 & 1) != 0)
    SipRegistrationPolicy::setProxyOffset(this, 0);
}

uint64_t VZWRegistrationPolicy::handleWarningHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  v2 = *(_QWORD *)(a2 + 64);
  v3 = *(_QWORD *)(a2 + 72);
  if (v2 == v3)
    return 0;
  if (byte_1ED70EF57 >= 0)
    v5 = (const char *)&_MergedGlobals_22;
  else
    v5 = (const char *)_MergedGlobals_22;
  if (byte_1ED70EF6F >= 0)
    v6 = (const char *)&qword_1ED70EF58;
  else
    v6 = (const char *)qword_1ED70EF58;
  if (byte_1ED70EF87 >= 0)
    v7 = (const char *)&qword_1ED70EF70;
  else
    v7 = (const char *)qword_1ED70EF70;
  if (byte_1ED70EF9F >= 0)
    v8 = (const char *)&qword_1ED70EF88;
  else
    v8 = (const char *)qword_1ED70EF88;
  v9 = v2 + 32;
  v10 = (const char *)&SipRegistrationPolicy::kThumperErrorUnauthorized;
  while (1)
  {
    if (*(_DWORD *)(v9 - 32) == 399)
    {
      if (*(char *)(v9 + 23) >= 0)
        v11 = (const char *)v9;
      else
        v11 = *(const char **)v9;
      if (!strcasecmp(v11, v5) || !strcasecmp(v11, v6))
        goto LABEL_27;
      if (!strcasecmp(v11, v7))
      {
        v10 = "MDN Does Not Exist";
        goto LABEL_27;
      }
      if (!strcasecmp(v11, v8))
        break;
    }
    v12 = v9 + 24;
    v9 += 56;
    if (v12 == v3)
      return 0;
  }
  v10 = "Account Suspended";
LABEL_27:
  v14 = *(std::__shared_weak_count **)(a1 + 376);
  if (v14)
  {
    v15 = std::__shared_weak_count::lock(v14);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)(a1 + 368);
      if (v17)
        (*(void (**)(uint64_t, const char *))(*(_QWORD *)v17 + 72))(v17, v10);
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  return 1;
}

void sub_1BF122CC8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t VZWRegistrationPolicy::allowNotificationsInLimitedAccess(VZWRegistrationPolicy *this)
{
  return 1;
}

void VZWRegistrationPolicy::~VZWRegistrationPolicy(VZWRegistrationPolicy *this)
{
  DefaultRegistrationPolicy::~DefaultRegistrationPolicy(this, (uint64_t *)&off_1E78E0808);
}

{
  DefaultRegistrationPolicy::~DefaultRegistrationPolicy(this, (uint64_t *)&off_1E78E0808);
  JUMPOUT(0x1C3B87100);
}

char *VZWRegistrationPolicy::name(VZWRegistrationPolicy *this)
{
  return &VZWRegistrationPolicy::kPolicyName;
}

void `non-virtual thunk to'VZWRegistrationPolicy::~VZWRegistrationPolicy(VZWRegistrationPolicy *this)
{
  DefaultRegistrationPolicy::~DefaultRegistrationPolicy((VZWRegistrationPolicy *)((char *)this - 104), (uint64_t *)&off_1E78E0808);
}

{
  DefaultRegistrationPolicy::~DefaultRegistrationPolicy((VZWRegistrationPolicy *)((char *)this - 104), (uint64_t *)&off_1E78E0808);
  JUMPOUT(0x1C3B87100);
}

uint64_t _GLOBAL__sub_I_VZWRegistrationPolicy_cpp()
{
  void (*v0)(void *);

  std::string::basic_string[abi:ne180100]<0>(&_MergedGlobals_22, "Authentication failure: 5");
  v0 = (void (*)(void *))MEMORY[0x1E0DE44D0];
  __cxa_atexit(MEMORY[0x1E0DE44D0], &_MergedGlobals_22, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1ED70EF58, "Authentication failure: 6");
  __cxa_atexit(v0, &qword_1ED70EF58, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1ED70EF70, "Authentication failure: 16");
  __cxa_atexit(v0, &qword_1ED70EF70, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1ED70EF88, "Authentication failure: 19");
  return __cxa_atexit(v0, &qword_1ED70EF88, &dword_1BEDF4000);
}

void SipAkaAuthResponse::SipAkaAuthResponse(SipAkaAuthResponse *this, SipAkaDigestAuthScheme *a2)
{
  SipAkaDigestAuthScheme *v2;

  v2 = a2;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E78E0E48;
  if (!a2)
  {
    v2 = (SipAkaDigestAuthScheme *)operator new();
    *(_OWORD *)((char *)v2 + 24) = 0u;
    *(_OWORD *)((char *)v2 + 8) = 0u;
    *((_DWORD *)v2 + 10) = 1065353216;
    *((_QWORD *)v2 + 21) = 0;
    *((_QWORD *)v2 + 22) = 0;
    *((_QWORD *)v2 + 20) = 0;
    *((_DWORD *)v2 + 12) = 0;
    *(_OWORD *)((char *)v2 + 56) = 0u;
    *(_OWORD *)((char *)v2 + 72) = 0u;
    *(_OWORD *)((char *)v2 + 88) = 0u;
    *(_OWORD *)((char *)v2 + 104) = 0u;
    *(_OWORD *)((char *)v2 + 120) = 0u;
    *(_OWORD *)((char *)v2 + 136) = 0u;
    *((_BYTE *)v2 + 152) = 0;
    *(_QWORD *)v2 = &off_1E78C5E10;
    *(_OWORD *)((char *)v2 + 264) = 0u;
    *(_OWORD *)((char *)v2 + 280) = 0u;
    *(_OWORD *)((char *)v2 + 296) = 0u;
    *((_DWORD *)v2 + 80) = 2;
    SipDigestAuthScheme::clear(v2);
    *(_OWORD *)((char *)v2 + 246) = 0u;
    *(_OWORD *)((char *)v2 + 232) = 0u;
    *(_OWORD *)((char *)v2 + 216) = 0u;
    *(_OWORD *)((char *)v2 + 200) = 0u;
    *(_OWORD *)((char *)v2 + 184) = 0u;
    *((_QWORD *)v2 + 34) = *((_QWORD *)v2 + 33);
    *((_QWORD *)v2 + 37) = *((_QWORD *)v2 + 36);
    *((_DWORD *)v2 + 78) = 0;
    *((_BYTE *)v2 + 316) = 0;
  }
  *((_QWORD *)this + 8) = v2;
}

void sub_1BF122F48(_Unwind_Exception *a1)
{
  void **v1;

  SipAuthResponse::~SipAuthResponse(v1);
  _Unwind_Resume(a1);
}

void SipAkaAuthResponse::SipAkaAuthResponse(SipAkaAuthResponse *this, const SipAkaAuthChallenge *a2)
{
  uint64_t v4;

  *(_QWORD *)SipAuthResponse::SipAuthResponse((uint64_t)this, (uint64_t)a2) = &off_1E78E0E48;
  v4 = (*(uint64_t (**)(const SipAkaAuthChallenge *))(*(_QWORD *)a2 + 32))(a2);
  *((_QWORD *)this + 8) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
}

void sub_1BF122FB0(_Unwind_Exception *a1)
{
  void **v1;

  SipAuthResponse::~SipAuthResponse(v1);
  _Unwind_Resume(a1);
}

void SipAkaAuthResponse::~SipAkaAuthResponse(SipAkaAuthResponse *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E78E0E48;
  v2 = *((_QWORD *)this + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  SipAuthResponse::~SipAuthResponse((void **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E78E0E48;
  v2 = *((_QWORD *)this + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  SipAuthResponse::~SipAuthResponse((void **)this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipAkaAuthResponse::scheme(SipAkaAuthResponse *this)
{
  return *((_QWORD *)this + 8);
}

{
  return *((_QWORD *)this + 8);
}

uint64_t SipAkaAuthResponse::computeResponse(SipAkaAuthResponse *this, const SipRequest *a2)
{
  return (*(uint64_t (**)(_QWORD, const SipRequest *))(**((_QWORD **)this + 8) + 136))(*((_QWORD *)this + 8), a2);
}

uint64_t SipAkaAuthResponse::computeResponse(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 152))(*(_QWORD *)(a1 + 64));
}

void SipAkaAuthResponse::result(SipAkaAuthResponse *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  const ImsResult *v4;
  _QWORD v5[2];
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = *((_QWORD *)this + 8);
  if (*(_BYTE *)(v3 + 314))
  {
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)a2 = &off_1E78B7238;
    *(_QWORD *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 0;
  }
  else if (*(_BYTE *)(v3 + 313))
  {
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)a2 = &off_1E78B7238;
    *(_QWORD *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 1073741832;
  }
  else
  {
    v7 = 0u;
    v8 = 0u;
    v9 = 0u;
    v5[0] = &off_1E78B7238;
    v5[1] = &_bambiDomain;
    v6 = 0x40000000;
    v4 = (const ImsResult *)ImsResult::operator<<<char [13]>((uint64_t)v5, "Auth failure");
    ImsResult::ImsResult((ImsResult *)a2, v4);
    ImsResult::~ImsResult((ImsResult *)v5);
  }
}

void sub_1BF12316C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

BOOL SipAkaAuthResponse::shouldCache(SipAkaAuthResponse *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 8);
  return *(_BYTE *)(v1 + 314) || *(_BYTE *)(v1 + 313) != 0;
}

_QWORD *SipAkaAuthResponse::clone(SipAkaAuthResponse *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  SipAuthResponse::SipAuthResponse((uint64_t)v2, (uint64_t)this);
  *v2 = &off_1E78E0E48;
  v2[8] = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 32))(*((_QWORD *)this + 8));
  return v2;
}

void sub_1BF123208(_Unwind_Exception *a1)
{
  void **v1;

  SipAuthResponse::~SipAuthResponse(v1);
  MEMORY[0x1C3B87100](v1, 0x10B3C40E7B9B157);
  _Unwind_Resume(a1);
}

uint64_t MediaSessionDriver::MediaSessionDriver(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, ImsPrefs *a6, __int128 *a7, dispatch_object_t *a8)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  ImsPrefs *v21;
  void **RTCPIntervalSecondsKey;
  void *v23;
  ImsPrefs *v24;
  void **HoldHeartbeatIntervalSecondsKey;
  void *v26;
  ImsPrefs *v27;
  void **LocalRTCPReportIntervalSecondsKey;
  void *v29;
  ImsPrefs *v30;
  void **InactivityTimerRTPSecondsKey;
  void *v32;
  ImsPrefs *v33;
  void **InactivityTimerRTCPSecondsKey;
  void *v35;
  ImsPrefs *v36;
  const ImsPrefsKeyEnum *LinkMonitorPreferenceKey;
  ImsPrefs *v38;
  void **DTMFVolumeKey;
  void *v40;
  ImsPrefs *v41;
  void **DTMFDigitDurationMillisecondsKey;
  void *v43;
  ImsPrefs *v44;
  void **DTMFInterDigitIntervalMillisecondsKey;
  void *v46;
  ImsPrefs *v47;
  void **EnableRTCPExtendedReportsKey;
  void *v49;
  char v50;
  uint64_t v51;
  void *__p[2];
  char v54;
  void *v55[2];
  char v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;

  v11 = (std::__shared_weak_count *)a3[1];
  v59 = *a3;
  v60 = v11;
  if (v11)
  {
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
  }
  v14 = (std::__shared_weak_count *)a5[1];
  v57 = *a5;
  v58 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  MediaSessionInterface::MediaSessionInterface(a1, &v59, a4, &v57, a7, a8);
  v17 = v58;
  if (v58)
  {
    v18 = (unint64_t *)&v58->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v60)
    std::__shared_weak_count::__release_weak(v60);
  SipThreadSafeLockable::SipThreadSafeLockable((SipThreadSafeLockable *)(a1 + 88), a2 + 1);
  v20 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 88) = a2[5];
  *(_QWORD *)(a1 + *(_QWORD *)(v20 - 24)) = a2[6];
  *(_DWORD *)(a1 + 224) = 4;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 232));
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 376) = a1 + 384;
  RTCPIntervalSecondsKey = (void **)ImsPrefs::getRTCPIntervalSecondsKey(v21);
  v23 = ImsPrefs::prefWithKey(a6, RTCPIntervalSecondsKey);
  if (v23)
    v24 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v23 + 56))(v23);
  else
    v24 = (ImsPrefs *)*((unsigned int *)RTCPIntervalSecondsKey + 15);
  *(_DWORD *)(a1 + 400) = (_DWORD)v24;
  HoldHeartbeatIntervalSecondsKey = (void **)ImsPrefs::getHoldHeartbeatIntervalSecondsKey(v24);
  v26 = ImsPrefs::prefWithKey(a6, HoldHeartbeatIntervalSecondsKey);
  if (v26)
    v27 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v26 + 56))(v26);
  else
    v27 = (ImsPrefs *)*((unsigned int *)HoldHeartbeatIntervalSecondsKey + 15);
  *(_DWORD *)(a1 + 404) = (_DWORD)v27;
  LocalRTCPReportIntervalSecondsKey = (void **)ImsPrefs::getLocalRTCPReportIntervalSecondsKey(v27);
  v29 = ImsPrefs::prefWithKey(a6, LocalRTCPReportIntervalSecondsKey);
  if (v29)
    v30 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v29 + 56))(v29);
  else
    v30 = (ImsPrefs *)*((unsigned int *)LocalRTCPReportIntervalSecondsKey + 15);
  *(_DWORD *)(a1 + 408) = (_DWORD)v30;
  InactivityTimerRTPSecondsKey = (void **)ImsPrefs::getInactivityTimerRTPSecondsKey(v30);
  v32 = ImsPrefs::prefWithKey(a6, InactivityTimerRTPSecondsKey);
  if (v32)
    v33 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v32 + 56))(v32);
  else
    v33 = (ImsPrefs *)*((unsigned int *)InactivityTimerRTPSecondsKey + 15);
  *(_WORD *)(a1 + 412) = (_WORD)v33;
  InactivityTimerRTCPSecondsKey = (void **)ImsPrefs::getInactivityTimerRTCPSecondsKey(v33);
  v35 = ImsPrefs::prefWithKey(a6, InactivityTimerRTCPSecondsKey);
  if (v35)
    v36 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v35 + 56))(v35);
  else
    v36 = (ImsPrefs *)*((unsigned int *)InactivityTimerRTCPSecondsKey + 15);
  *(_WORD *)(a1 + 414) = (_WORD)v36;
  LinkMonitorPreferenceKey = (const ImsPrefsKeyEnum *)ImsPrefs::getLinkMonitorPreferenceKey(v36);
  ImsPrefs::stringValue(a6, LinkMonitorPreferenceKey, (std::string *)(a1 + 416));
  DTMFVolumeKey = (void **)ImsPrefs::getDTMFVolumeKey(v38);
  v40 = ImsPrefs::prefWithKey(a6, DTMFVolumeKey);
  if (v40)
    v41 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v40 + 56))(v40);
  else
    v41 = (ImsPrefs *)*((unsigned int *)DTMFVolumeKey + 15);
  *(_BYTE *)(a1 + 440) = (_BYTE)v41;
  DTMFDigitDurationMillisecondsKey = (void **)ImsPrefs::getDTMFDigitDurationMillisecondsKey(v41);
  v43 = ImsPrefs::prefWithKey(a6, DTMFDigitDurationMillisecondsKey);
  if (v43)
    v44 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v43 + 56))(v43);
  else
    v44 = (ImsPrefs *)*((unsigned int *)DTMFDigitDurationMillisecondsKey + 15);
  *(_BYTE *)(a1 + 441) = (_BYTE)v44;
  DTMFInterDigitIntervalMillisecondsKey = (void **)ImsPrefs::getDTMFInterDigitIntervalMillisecondsKey(v44);
  v46 = ImsPrefs::prefWithKey(a6, DTMFInterDigitIntervalMillisecondsKey);
  if (v46)
    v47 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v46 + 56))(v46);
  else
    v47 = (ImsPrefs *)*((unsigned int *)DTMFInterDigitIntervalMillisecondsKey + 15);
  *(_DWORD *)(a1 + 444) = (_DWORD)v47;
  EnableRTCPExtendedReportsKey = (void **)ImsPrefs::getEnableRTCPExtendedReportsKey(v47);
  v49 = ImsPrefs::prefWithKey(a6, EnableRTCPExtendedReportsKey);
  if (v49)
    v50 = (*(uint64_t (**)(void *))(*(_QWORD *)v49 + 40))(v49);
  else
    v50 = *((_BYTE *)EnableRTCPExtendedReportsKey + 57) != 0;
  *(_BYTE *)(a1 + 448) = v50;
  std::string::basic_string[abi:ne180100]<0>(v55, "rtp.driver");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_30);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v51 = ImsLogger::debug(ims::_logger, (uint64_t)v55, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v51 + 8), (uint64_t)"MediaSessionDriver", 18);
  *(_BYTE *)(v51 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v51 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v51 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v51 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v51 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v51 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v51 + 17) = 0;
  if (v54 < 0)
    operator delete(__p[0]);
  if (v56 < 0)
    operator delete(v55[0]);
  *(_QWORD *)(a1 + 336) = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  return a1;
}

void sub_1BF123638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  uint64_t v24;
  SipThreadSafeLockable *v25;
  uint64_t *v26;
  SipTimerContainer *v27;
  void **v28;
  void ***v29;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v24 + 439) < 0)
    operator delete(*v28);
  std::__tree<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>>>::destroy(v24 + 376, *v29);
  SipTimerContainer::~SipTimerContainer(v27);
  SipThreadSafeLockable::~SipThreadSafeLockable(v25, v26);
  MediaSessionInterface::~MediaSessionInterface((void **)v24);
  _Unwind_Resume(a1);
}

void MediaSessionDriver::~MediaSessionDriver(MediaSessionDriver *this, uint64_t *a2)
{
  uint64_t v4;
  SipLockable *v5;
  uint64_t v6;
  uint64_t v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *((_QWORD *)this + 11) = a2[5];
  v5 = (MediaSessionDriver *)((char *)this + 88);
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[6];
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.driver");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_30);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"~MediaSessionDriver", 19);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  MediaSessionDriver::cancelAllTimers((void ***)this);
  if (*((char *)this + 439) < 0)
    operator delete(*((void **)this + 52));
  std::__tree<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>>>::destroy((uint64_t)this + 376, *((void ***)this + 48));
  SipTimerContainer::~SipTimerContainer((MediaSessionDriver *)((char *)this + 232));
  v7 = a2[1];
  *((_QWORD *)this + 11) = v7;
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v7 - 48)) = a2[4];
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 160));
  SipLockable::~SipLockable(v5, a2 + 2);
  MediaSessionInterface::~MediaSessionInterface((void **)this);
}

void MediaSessionDriver::cancelAllTimers(void ***this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(v8, "rtp.driver");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_30);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v8, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*((_QWORD *)*(*this - 1) + 1) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *((_QWORD *)*(*this - 1) + 1) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"cancelAllTimers", 15);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  SipTimerContainer::cancelAllTimers((SipTimerContainer *)(this + 29));
  std::__tree<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>>>::destroy((uint64_t)(this + 47), this[48]);
  this[48] = 0;
  this[49] = 0;
  this[47] = (void **)(this + 48);
}

void sub_1BF1239F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MediaSessionDriver::startTimerForRequest(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  char *v22;
  char **v23;
  char **v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39[2];
  char v40;
  void *__p[2];
  char v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  std::string v45;
  _QWORD v46[6];
  std::__shared_weak_count *v47;
  std::string v48;
  _QWORD v49[2];
  uint64_t v50;
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v45, "rtp.driver");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_30);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)&v45, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v9 = v8;
  v10 = *(_QWORD **)(v8 + 8);
  v11 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"startTimerForRequest", 20);
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"  [requestId=", 13);
  *(_BYTE *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" sessionId=", 11);
  *(_BYTE *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (v42 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  memset(&v48, 0, sizeof(v48));
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(&v48, a1, a2);
  v13 = *a3;
  v12 = (std::__shared_weak_count *)a3[1];
  if (v12)
  {
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
  }
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 240), (unsigned __int8 *)&v48))
  {
    std::string::basic_string[abi:ne180100]<0>(&v45, "rtp.driver");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_30);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v17 = ImsLogger::error(ims::_logger, (uint64_t)&v45, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Timer for request ", 18);
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v17 + 32))(v17, &v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)" already exists.", 16);
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    if (v42 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
  }
  else
  {
    LoggableString::LoggableString((LoggableString *)v39, "rtp.timer");
    v19 = *a3;
    v18 = (std::__shared_weak_count *)a3[1];
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    ImsBlock::ImsBlock((uint64_t)__p, (__int128 *)v39, a4);
    __p[0] = &off_1E78D2060;
    v43 = v19;
    v44 = v18;
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v45, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
    else
      v45 = v48;
    ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>::ImsCapturableBlock(v46, (uint64_t)__p);
    v22 = *(char **)(a1 + 384);
    v23 = (char **)(a1 + 384);
    v24 = (char **)(a1 + 384);
    if (!v22)
      goto LABEL_30;
    v23 = (char **)(a1 + 384);
    while (1)
    {
      while (1)
      {
        v24 = (char **)v22;
        v25 = v22 + 32;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v45, (void **)v22 + 4) & 0x80) == 0)
          break;
        v22 = *v24;
        v23 = v24;
        if (!*v24)
          goto LABEL_30;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v25, (void **)&v45.__r_.__value_.__l.__data_) & 0x80) == 0)break;
      v23 = v24 + 1;
      v22 = v24[1];
      if (!v22)
        goto LABEL_30;
    }
    if (!*v23)
    {
LABEL_30:
      v50 = 0;
      v26 = (char *)operator new(0x70uLL);
      v49[0] = v26;
      v49[1] = a1 + 384;
      *(std::string *)(v26 + 32) = v45;
      memset(&v45, 0, sizeof(v45));
      ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>::ImsCapturableBlock((_QWORD *)v26 + 7, (uint64_t)v46);
      LOBYTE(v50) = 1;
      *(_QWORD *)v26 = 0;
      *((_QWORD *)v26 + 1) = 0;
      *((_QWORD *)v26 + 2) = v24;
      *v23 = v26;
      v27 = **(_QWORD **)(a1 + 376);
      if (v27)
      {
        *(_QWORD *)(a1 + 376) = v27;
        v26 = *v23;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 384), (uint64_t *)v26);
      ++*(_QWORD *)(a1 + 392);
      v49[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v49);
    }
    v46[0] = &off_1E78D2060;
    v28 = v47;
    if (v47)
    {
      v29 = (unint64_t *)&v47->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    ImsBlock::~ImsBlock((ImsBlock *)v46);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    __p[0] = &off_1E78D2060;
    v31 = v44;
    if (v44)
    {
      v32 = (unint64_t *)&v44->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    ImsBlock::~ImsBlock((ImsBlock *)__p);
    if (v40 < 0)
      operator delete(v39[0]);
    if (v12)
    {
      v34 = (unint64_t *)&v12->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v52 = 0;
    v36 = operator new(0x20uLL);
    *v36 = &off_1E78E0EC8;
    v36[1] = a1;
    v36[2] = v13;
    v36[3] = v12;
    v52 = v36;
    SipTimerContainer::startTimer((_QWORD *)(a1 + 232), (uint64_t)&v48, (uint64_t)v51, 0x2710u, 0);
    v37 = v52;
    if (v52 == v51)
    {
      v38 = 4;
      v37 = v51;
    }
    else
    {
      if (!v52)
        goto LABEL_55;
      v38 = 5;
    }
    (*(void (**)(_QWORD *))(*v37 + 8 * v38))(v37);
  }
LABEL_55:
  if (v12)
  {
    std::__shared_weak_count::__release_weak(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
}

void sub_1BF124048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  std::__shared_weak_count *v45;
  uint64_t v46;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v46 + 40);
  ImsBlock::~ImsBlock((ImsBlock *)&a17);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  if (v45)
  {
    std::__shared_weak_count::__release_weak(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  if (a45 < 0)
    operator delete(a40);
  _Unwind_Resume(a1);
}

void **std::pair<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>::~pair(void **a1)
{
  ImsBlock *v2;

  a1[3] = &off_1E78D2060;
  v2 = (ImsBlock *)(a1 + 3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 8));
  ImsBlock::~ImsBlock(v2);
  if (*((char *)v2 - 1) < 0)
    operator delete(*a1);
  return a1;
}

void MediaSessionDriver::cancelTimerForRequest(uint64_t **this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  void **v8;
  void **v9;
  void **v10;
  uint64_t v11;
  void *v12[2];
  char v13;
  void *__p[2];
  char v15;
  std::string v16;

  std::string::basic_string[abi:ne180100]<0>(&v16, "rtp.driver");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_30);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v16, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(*this - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(*this - 1) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"cancelTimerForRequest", 21);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"  [requestId=", 13);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" sessionId=", 11);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  memset(&v16, 0, sizeof(v16));
  ((void (*)(std::string *__return_ptr, uint64_t **, uint64_t))(*this)[30])(&v16, this, a2);
  v8 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(this + 47), (void **)&v16.__r_.__value_.__l.__data_);
  if (this + 48 != (uint64_t **)v8)
  {
    v9 = v8;
    SipTimerContainer::cancelTimer((SipTimerContainer *)(this + 29), &v16);
    std::__tree<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::__map_value_compare<nas::CallMediaType,std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::less<nas::CallMediaType>,true>,std::allocator<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>>>::__remove_node_pointer(this + 47, (uint64_t *)v9);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,0>(v9 + 4);
    v10 = v9;
LABEL_8:
    operator delete(v10);
    goto LABEL_12;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "rtp.driver");
  std::string::basic_string[abi:ne180100]<0>(v12, (char *)&str_1_30);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v11 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"No timer found for request ", 27);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 32))(v11, &v16);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  if (v13 < 0)
    operator delete(v12[0]);
  if (v15 < 0)
  {
    v10 = (void **)__p[0];
    goto LABEL_8;
  }
LABEL_12:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1BF1244BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void MediaSessionDriver::handleTimer(uint64_t a1, void **a2)
{
  uint64_t **v3;
  void **v4;
  uint64_t *v5;
  void **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _OWORD v10[2];
  __int128 v11;
  std::__shared_weak_count *v12;

  v3 = (uint64_t **)(a1 + 376);
  v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 376, a2);
  if ((void **)(a1 + 384) != v4)
  {
    v5 = (uint64_t *)v4;
    v12 = 0;
    v11 = 0u;
    memset(v10, 0, sizeof(v10));
    v6 = v4 + 4;
    ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>::ImsCapturableBlock(v10, (uint64_t)(v4 + 7));
    std::__tree<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::__map_value_compare<nas::CallMediaType,std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::less<nas::CallMediaType>,true>,std::allocator<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>>>::__remove_node_pointer(v3, v5);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,0>(v6);
    operator delete(v5);
    if (*((_QWORD *)&v11 + 1) && (_QWORD)v11)
      (*(void (**)(void))(v11 + 16))();
    *(_QWORD *)&v10[0] = &off_1E78D2060;
    v7 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    ImsBlock::~ImsBlock((ImsBlock *)v10);
  }
}

void sub_1BF124604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (**a9)())
{
  uint64_t v9;

  a9 = &off_1E78D2060;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v9);
  ImsBlock::~ImsBlock((ImsBlock *)&a9);
  _Unwind_Resume(a1);
}

void MediaSessionDriver::setRTCPInterval(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  ImsPrefs *v12;
  void **EnableRemoteRTCPDeactivationKey;
  void *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  ImsPrefs *v24;
  void **RTCPIntervalSecondsKey;
  void *v26;
  int v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *__p[2];
  char v34;
  void *v35;
  std::__shared_weak_count *v36;
  char v37;

  std::string::basic_string[abi:ne180100]<0>(&v35, "rtp.driver");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_30);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v35, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"setRTCPInterval", 15);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v34 < 0)
    operator delete(__p[0]);
  if (v37 < 0)
    operator delete(v35);
  v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    v32 = v9;
    if (v9)
    {
      v10 = *a2;
      v31 = *a2;
      if (*a2)
      {
        if (!*(_BYTE *)(v10 + 584))
        {
          std::string::basic_string[abi:ne180100]<0>(&v35, "rtp.driver");
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_30);
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v18 = ImsLogger::error(ims::_logger, (uint64_t)&v35, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"audioSettings is null", 21);
          *(_BYTE *)(v18 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v18 + 17) = 0;
          if (v34 < 0)
            operator delete(__p[0]);
          if (v37 < 0)
            operator delete(v35);
          goto LABEL_22;
        }
        v35 = 0;
        v36 = 0;
        v11 = *(std::__shared_weak_count **)(v10 + 128);
        if (v11)
        {
          v11 = std::__shared_weak_count::lock(v11);
          v36 = v11;
          if (v11)
          {
            v11 = *(std::__shared_weak_count **)(v10 + 120);
            v35 = v11;
          }
        }
        v12 = (ImsPrefs *)SipStack::prefs((SipStack *)v11);
        EnableRemoteRTCPDeactivationKey = (void **)ImsPrefs::getEnableRemoteRTCPDeactivationKey(v12);
        v14 = ImsPrefs::prefWithKey(v12, EnableRemoteRTCPDeactivationKey);
        if (v14)
        {
          if (!(*(unsigned int (**)(void *))(*(_QWORD *)v14 + 40))(v14))
            goto LABEL_35;
        }
        else if (!*((_BYTE *)EnableRemoteRTCPDeactivationKey + 57))
        {
          goto LABEL_35;
        }
        if (*(_BYTE *)(v10 + 184) && *(_BYTE *)(v10 + 185) && !*(_QWORD *)(v10 + 208))
        {
          v30 = *(_QWORD *)(v10 + 216);
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v35);
          if (!v30)
          {
            *(_DWORD *)(a1 + 400) = 0;
            goto LABEL_22;
          }
LABEL_41:
          v35 = 0;
          v36 = 0;
          v22 = *(std::__shared_weak_count **)(v10 + 128);
          if (v22)
          {
            v22 = std::__shared_weak_count::lock(v22);
            v23 = v22;
            v36 = v22;
            if (v22)
            {
              v22 = *(std::__shared_weak_count **)(v10 + 120);
              v35 = v22;
            }
          }
          else
          {
            v23 = 0;
          }
          v24 = (ImsPrefs *)SipStack::prefs((SipStack *)v22);
          RTCPIntervalSecondsKey = (void **)ImsPrefs::getRTCPIntervalSecondsKey(v24);
          v26 = ImsPrefs::prefWithKey(v24, RTCPIntervalSecondsKey);
          if (v26)
            v27 = (*(uint64_t (**)(void *))(*(_QWORD *)v26 + 56))(v26);
          else
            v27 = *((_DWORD *)RTCPIntervalSecondsKey + 15);
          *(_DWORD *)(a1 + 400) = v27;
          if (v23)
          {
            p_shared_owners = (unint64_t *)&v23->__shared_owners_;
            do
              v29 = __ldaxr(p_shared_owners);
            while (__stlxr(v29 - 1, p_shared_owners));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          v9 = v32;
          if (!v32)
            return;
LABEL_22:
          v16 = (unint64_t *)&v9->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          return;
        }
LABEL_35:
        v19 = v36;
        if (v36)
        {
          v20 = (unint64_t *)&v36->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v10 = v31;
        goto LABEL_41;
      }
    }
  }
  else
  {
    v9 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v35, "rtp.driver");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_30);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v15 = ImsLogger::error(ims::_logger, (uint64_t)&v35, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"SDPSession expired in MediaSessionDriver::setRTCPInterval", 57);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
  if (v34 < 0)
    operator delete(__p[0]);
  if (v37 < 0)
    operator delete(v35);
  if (v9)
    goto LABEL_22;
}

void sub_1BF124AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>>>::destroy(uint64_t a1, void **a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,0>(a2 + 4);
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,0>(void **a1)
{
  ImsBlock *v2;

  a1[3] = &off_1E78D2060;
  v2 = (ImsBlock *)(a1 + 3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 8));
  ImsBlock::~ImsBlock(v2);
  if (*((char *)v2 - 1) < 0)
    operator delete(*a1);
}

_QWORD *ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>::ImsCapturableBlock(_QWORD *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_1E78CC3E8;
  v4 = (std::string *)(a1 + 1);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *a1 = &off_1E78D2060;
  v6 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a1[4] = _Block_copy(*(const void **)(a2 + 32));
  return a1;
}

void sub_1BF124C78(_Unwind_Exception *a1)
{
  ImsBlock *v1;
  uint64_t v2;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2);
  ImsBlock::~ImsBlock(v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void **v1;

  v1 = *(void ***)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>>,0>(v1 + 4);
    operator delete(v1);
  }
}

_QWORD *std::__function::__func<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0,std::allocator<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78E0EC8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0,std::allocator<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78E0EC8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0,std::allocator<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78E0EC8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0,std::allocator<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78E0EC8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0,std::allocator<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0,std::allocator<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0,std::allocator<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 232))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF124EBC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0,std::allocator<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0,std::allocator<MediaSessionDriver::startTimerForRequest(unsigned int,std::shared_ptr<MediaSessionInterface>,void({block_pointer})(void))::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *QMIRTPSession::toTimerIdString@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v4;
  void *__p;
  char v7;
  int v8;

  v8 = a1;
  switch(a1)
  {
    case 'C':
      v4 = "SESSION_CONFIGURE";
      return std::string::basic_string[abi:ne180100]<0>(a2, v4);
    case 'B':
      v4 = "SESSION_UNINITIALIZE";
      return std::string::basic_string[abi:ne180100]<0>(a2, v4);
    case 'A':
      v4 = "SESSION_INITIALIZE";
      return std::string::basic_string[abi:ne180100]<0>(a2, v4);
  }
  ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()(&__p);
  if (v7 < 0)
    operator delete(__p);
  return (_QWORD *)ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()(a2);
}

uint64_t QMIRTPSession::QMIRTPSession(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4, ImsPrefs *a5, _QWORD *a6, char a7, int a8, __int128 *a9, dispatch_object_t *a10)
{
  std::__shared_weak_count *v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  void *__p[2];
  char v37;
  void *v38[2];
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;

  *(_QWORD *)(a1 + 112) = &off_1E78B7B60;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E78C63A8;
  v16 = (std::__shared_weak_count *)a2[1];
  v42 = *a2;
  v43 = v16;
  if (v16)
  {
    p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
  }
  v19 = a4[1];
  v40 = *a4;
  v41 = (std::__shared_weak_count *)v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  MediaSessionDriver::MediaSessionDriver(a1 + 24, (uint64_t *)&off_1E78E11B0, &v42, a3, &v40, a5, a9, a10);
  v22 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v43)
    std::__shared_weak_count::__release_weak(v43);
  *(_QWORD *)a1 = &off_1E78E0F88;
  *(_QWORD *)(a1 + 24) = &unk_1E78E1048;
  *(_QWORD *)(a1 + 112) = &unk_1E78E1170;
  *(_DWORD *)(a1 + 476) = 4;
  *(_BYTE *)(a1 + 480) = a7;
  *(_WORD *)(a1 + 481) = -1;
  *(_BYTE *)(a1 + 487) = 0;
  *(_DWORD *)(a1 + 483) = 0;
  v25 = (_QWORD *)(*a4 + 280);
  v26 = (_QWORD *)*v25;
  if (!*v25)
    goto LABEL_25;
  v27 = *a4 + 280;
  do
  {
    v28 = v26[4];
    v29 = v28 >= a3;
    if (v28 >= a3)
      v30 = v26;
    else
      v30 = v26 + 1;
    if (v29)
      v27 = (uint64_t)v26;
    v26 = (_QWORD *)*v30;
  }
  while (*v30);
  if ((_QWORD *)v27 == v25 || *(_QWORD *)(v27 + 32) > a3)
LABEL_25:
    v27 = *a4 + 280;
  *(_BYTE *)(a1 + 488) = v27 != (_QWORD)v25;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)(a1 + 496));
  *(_BYTE *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 536) = *a6;
  v31 = a6[1];
  *(_QWORD *)(a1 + 544) = v31;
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  *(_WORD *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 554) = 0;
  *(_DWORD *)(a1 + 556) = a8;
  std::string::basic_string[abi:ne180100]<0>(v38, "rtp.qmisession");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v34 = ImsLogger::debug(ims::_logger, (uint64_t)v38, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v34 + 8), (uint64_t)"QMIRTPSession", 13);
  *(_BYTE *)(v34 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v34 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v34 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v34 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v34 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v34 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v34 + 17) = 0;
  if (v37 < 0)
    operator delete(__p[0]);
  if (v39 < 0)
    operator delete(v38[0]);
  return a1;
}

void sub_1BF1252C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  uint64_t v24;
  MediaSessionDriver *v25;
  qmi::MutableMessageBase *v26;
  std::__shared_weak_count *v28;

  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v24 + 536);
  qmi::MutableMessageBase::~MutableMessageBase(v26);
  MediaSessionDriver::~MediaSessionDriver(v25, (uint64_t *)&off_1E78E11B0);
  v28 = *(std::__shared_weak_count **)(v24 + 16);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  _Unwind_Resume(a1);
}

void QMIRTPSession::~QMIRTPSession(QMIRTPSession *this)
{
  MediaSessionDriver *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  *(_QWORD *)this = &off_1E78E0F88;
  *((_QWORD *)this + 3) = &unk_1E78E1048;
  v2 = (QMIRTPSession *)((char *)this + 24);
  *((_QWORD *)this + 14) = &unk_1E78E1170;
  std::string::basic_string[abi:ne180100]<0>(v7, "rtp.qmisession");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v3 = ImsLogger::debug(ims::_logger, (uint64_t)v7, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"~QMIRTPSession", 14);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 536);
  qmi::MutableMessageBase::~MutableMessageBase((QMIRTPSession *)((char *)this + 496));
  MediaSessionDriver::~MediaSessionDriver(v2, (uint64_t *)&off_1E78E11B0);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

{
  QMIRTPSession::~QMIRTPSession(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'QMIRTPSession::~QMIRTPSession(QMIRTPSession *this)
{
  QMIRTPSession::~QMIRTPSession((QMIRTPSession *)((char *)this - 24));
}

{
  QMIRTPSession::~QMIRTPSession((QMIRTPSession *)((char *)this - 112));
}

{
  QMIRTPSession::~QMIRTPSession((QMIRTPSession *)((char *)this - 24));
  JUMPOUT(0x1C3B87100);
}

{
  QMIRTPSession::~QMIRTPSession((QMIRTPSession *)((char *)this - 112));
  JUMPOUT(0x1C3B87100);
}

BOOL QMIRTPSession::active(QMIRTPSession *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  char v31;
  void *v32[2];
  char v33;

  std::string::basic_string[abi:ne180100]<0>(v32, "rtp.qmisession");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v32, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"active", 6);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" activeSessionId=", 17);
  *(_BYTE *)(v2 + 17) = 0;
  v3 = *((_QWORD *)this + 67);
  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(std::__shared_weak_count **)(v3 + 56);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = *(_QWORD *)(v4 + 88);
  if (v8)
  {
    do
    {
      if (*(_DWORD *)(v8 + 32) >= *((_DWORD *)this + 139))
        v9 = (uint64_t *)v8;
      else
        v9 = (uint64_t *)(v8 + 8);
      v8 = *v9;
    }
    while (*v9);
  }
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v31 < 0)
    operator delete(__p[0]);
  if (v33 < 0)
    operator delete(v32[0]);
  v12 = *((_QWORD *)this + 67);
  v13 = *(_QWORD *)(v12 + 48);
  v14 = *(std::__shared_weak_count **)(v12 + 56);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v19 = *(_QWORD *)(v13 + 88);
  v17 = v13 + 88;
  v18 = v19;
  if (!v19)
    goto LABEL_31;
  v20 = *((_DWORD *)this + 139);
  v21 = v17;
  do
  {
    v22 = *(_DWORD *)(v18 + 32);
    v23 = v22 < v20;
    if (v22 >= v20)
      v24 = (uint64_t *)v18;
    else
      v24 = (uint64_t *)(v18 + 8);
    if (!v23)
      v21 = v18;
    v18 = *v24;
  }
  while (*v24);
  if (v21 != v17 && *(_DWORD *)(v21 + 32) <= v20)
    v25 = *(_QWORD *)(v21 + 40);
  else
LABEL_31:
    v25 = 0;
  v26 = *((_QWORD *)this + 6);
  if (v14)
  {
    v27 = (unint64_t *)&v14->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v25 == v26 && *((_DWORD *)this + 119) != 4;
}

void sub_1BF1257C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL `non-virtual thunk to'QMIRTPSession::active(QMIRTPSession *this)
{
  return QMIRTPSession::active((QMIRTPSession *)((char *)this - 24));
}

void QMIRTPSession::initialize(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6, std::string::size_type *a7)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  std::__shared_weak_count *v16;
  _BYTE *v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  std::__shared_weak_count *v21;
  void (***v22)(void *, void **, uint64_t);
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  _BYTE *v33;
  void **v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _BYTE *v38;
  std::string::size_type v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  void (***v43)(void *, void **, uint64_t);
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  ImsPrefs *v51;
  void **UseRTPDetectionAutoStartKey;
  void *v53;
  _BOOL4 v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  std::string::size_type v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::string::size_type v76;
  std::__shared_weak_count *v77;
  void *v78;
  std::__shared_weak_count *v79;
  std::string::size_type v80;
  std::__shared_weak_count *size;
  _QWORD v82[9];
  _BYTE *v83;
  std::__shared_weak_count *v84;
  void *v85;
  std::__shared_weak_count *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::string __p;
  std::string v90;
  void *v91[2];
  char v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  char v95;
  unsigned int v96;

  v96 = a6;
  std::string::basic_string[abi:ne180100]<0>(&v93, "rtp.qmisession");
  std::string::basic_string[abi:ne180100]<0>(v91, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v12 = ImsLogger::debug(ims::_logger, (uint64_t)&v93, (uint64_t)v91);
  if (!a1)
    __cxa_bad_typeid();
  v13 = v12;
  v14 = *(_QWORD **)(v12 + 8);
  v15 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v15);
  *(_BYTE *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"initialize", 10);
  *(_BYTE *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" [initialDirection=", 19);
  *(_BYTE *)(v13 + 17) = 0;
  ims::toString<MediaDirection>(&v96, &__p);
  LoggableString::LoggableString(&v90, &__p);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v13 + 40))(v13, &v90);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v92 < 0)
    operator delete(v91[0]);
  if (v95 < 0)
    operator delete(v93);
  *(_OWORD *)&v90.__r_.__value_.__l.__data_ = 0uLL;
  v16 = (std::__shared_weak_count *)a7[1];
  if (v16
    && (v90.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v16)) != 0
    && (v90.__r_.__value_.__r.__words[0] = *a7, (v17 = (_BYTE *)v90.__r_.__value_.__r.__words[0]) != 0))
  {
    *(_BYTE *)(a1 + 486) = 0;
    *(_DWORD *)(a1 + 248) = a6;
    v18 = *(_DWORD *)(a1 + 556);
    if (v18 == 2)
    {
      if (v17[584])
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        goto LABEL_41;
      }
    }
    else if (v18 == 6 && v17[1856])
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
LABEL_27:
      v20 = v17 + 1496;
      goto LABEL_45;
    }
    if (v17[1328])
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      if (v18 != 2)
      {
        if (v18 == 6 && v17[1856])
          goto LABEL_27;
        goto LABEL_42;
      }
      if (!v17[584])
      {
LABEL_42:
        if (v17[1328])
          v20 = v17 + 1032;
        else
          v20 = 0;
LABEL_45:
        RTPTransportManager::getTransport(*(RTPTransportManager **)(a1 + 48), *((unsigned __int16 *)v20 + 12), (uint64_t *)&__p);
        if (!__p.__r_.__value_.__r.__words[0])
        {
          v93 = 0;
          v94 = 0;
          v42 = *(std::__shared_weak_count **)(a1 + 40);
          if (v42)
          {
            v94 = std::__shared_weak_count::lock(v42);
            if (v94)
            {
              v43 = *(void (****)(void *, void **, uint64_t))(a1 + 32);
              v93 = (std::__shared_weak_count *)v43;
              if (v43)
              {
                RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v85);
                (**v43)(v43, &v85, 9);
                v44 = v86;
                if (v86)
                {
                  p_shared_owners = (unint64_t *)&v86->__shared_owners_;
                  do
                    v46 = __ldaxr(p_shared_owners);
                  while (__stlxr(v46 - 1, p_shared_owners));
                  if (!v46)
                  {
                    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                    std::__shared_weak_count::__release_weak(v44);
                  }
                }
              }
            }
          }
          v47 = v94;
          if (!v94)
            goto LABEL_128;
          v48 = (unint64_t *)&v94->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          goto LABEL_126;
        }
        v83 = 0;
        v84 = 0;
        v93 = 0;
        v94 = 0;
        v29 = *(std::__shared_weak_count **)(a1 + 40);
        if (v29
          && (v30 = std::__shared_weak_count::lock(v29), (v94 = v30) != 0)
          && (v31 = v30, v32 = *(std::__shared_weak_count **)(a1 + 32), (v93 = v32) != 0)
        {
          v83 = v33;
          v84 = v31;
          v34 = (void **)&v93;
        }
        else
        {
          v34 = (void **)&v83;
        }
        *v34 = 0;
        v34[1] = 0;
        v35 = v94;
        if (v94)
        {
          v36 = (unint64_t *)&v94->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v38 = v83;
        if (!v83)
        {
          std::string::basic_string[abi:ne180100]<0>(&v93, "rtp.qmisession");
          std::string::basic_string[abi:ne180100]<0>(v91, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v50 = ImsLogger::error(ims::_logger, (uint64_t)&v93, (uint64_t)v91);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v50 + 8), (uint64_t)"Delegate is not a MediaSessionStateMachine", 42);
          *(_BYTE *)(v50 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v50 + 17) = 0;
          if (v92 < 0)
            operator delete(v91[0]);
          if (v95 < 0)
            operator delete(v93);
          goto LABEL_123;
        }
        v39 = v90.__r_.__value_.__r.__words[0];
        if (!a3)
        {
LABEL_106:
          if (*(_BYTE *)(v39 + 584)
            && (*(unsigned int (**)(std::string::size_type))(*(_QWORD *)(v39 + 152) + 24))(v39 + 152))
          {
            v80 = v39;
            size = (std::__shared_weak_count *)v90.__r_.__value_.__l.__size_;
            if (v90.__r_.__value_.__l.__size_)
            {
              v62 = (unint64_t *)(v90.__r_.__value_.__l.__size_ + 16);
              do
                v63 = __ldxr(v62);
              while (__stxr(v63 + 1, v62));
            }
            (*(void (**)(_QWORD *__return_ptr, uint64_t, std::string::size_type *))(*(_QWORD *)a1 + 56))(v82, a1, &v80);
            ImsResult::~ImsResult((ImsResult *)v82);
            if (size)
              std::__shared_weak_count::__release_weak(size);
          }
          v64 = *(_QWORD *)(a1 + 536);
          RTPSharedPointerBase::getShared<QMIRTPSession>(&v78, a1);
          v65 = *(_DWORD *)(a1 + 556);
          v76 = v39;
          v77 = (std::__shared_weak_count *)v90.__r_.__value_.__l.__size_;
          if (v90.__r_.__value_.__l.__size_)
          {
            v66 = (unint64_t *)(v90.__r_.__value_.__l.__size_ + 16);
            do
              v67 = __ldxr(v66);
            while (__stxr(v67 + 1, v66));
          }
          QMIRTPStackController::initializeQMISession(v64, &v78, a2, v65, (uint64_t *)&v76, a3 ^ 1);
          if (v77)
            std::__shared_weak_count::__release_weak(v77);
          v68 = v79;
          if (v79)
          {
            v69 = (unint64_t *)&v79->__shared_owners_;
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
LABEL_123:
          v47 = v84;
          if (!v84)
          {
LABEL_128:
            v26 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (!__p.__r_.__value_.__l.__size_)
              goto LABEL_133;
            v72 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v28 = __ldaxr(v72);
            while (__stlxr(v28 - 1, v72));
            goto LABEL_131;
          }
          v71 = (unint64_t *)&v84->__shared_owners_;
          do
            v49 = __ldaxr(v71);
          while (__stlxr(v49 - 1, v71));
LABEL_126:
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
          goto LABEL_128;
        }
        v93 = 0;
        v94 = 0;
        v40 = *(std::__shared_weak_count **)(v90.__r_.__value_.__r.__words[0] + 128);
        if (v40)
        {
          v40 = std::__shared_weak_count::lock(v40);
          v41 = v40;
          v94 = v40;
          if (v40)
          {
            v40 = *(std::__shared_weak_count **)(v39 + 120);
            v93 = v40;
          }
        }
        else
        {
          v41 = 0;
        }
        v51 = (ImsPrefs *)SipStack::prefs((SipStack *)v40);
        UseRTPDetectionAutoStartKey = (void **)ImsPrefs::getUseRTPDetectionAutoStartKey(v51);
        v53 = ImsPrefs::prefWithKey(v51, UseRTPDetectionAutoStartKey);
        if (v53)
        {
          if (!(*(unsigned int (**)(void *))(*(_QWORD *)v53 + 40))(v53))
          {
LABEL_81:
            v54 = 0;
LABEL_84:
            if (v41)
            {
              v55 = (unint64_t *)&v41->__shared_owners_;
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
            v39 = v90.__r_.__value_.__r.__words[0];
            if (!v54)
              goto LABEL_106;
            v93 = 0;
            v94 = 0;
            v57 = *(_DWORD *)(a1 + 556);
            if (v57 == 2)
            {
              if (*(_BYTE *)(v90.__r_.__value_.__r.__words[0] + 584))
              {
                v58 = v90.__r_.__value_.__r.__words[0] + 152;
                goto LABEL_98;
              }
            }
            else if (v57 == 6 && *(_BYTE *)(v90.__r_.__value_.__r.__words[0] + 1856))
            {
              v58 = v90.__r_.__value_.__r.__words[0] + 1496;
LABEL_98:
              RTPTransportManager::getTransport(*(RTPTransportManager **)(a1 + 48), (unsigned __int16)(*(_WORD *)(v58 + 24) + 1), (uint64_t *)&v93);
              (*(void (**)(std::string::size_type, _QWORD))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 88))(__p.__r_.__value_.__r.__words[0], 0);
              if (v93)
                ((void (*)(std::__shared_weak_count *, _QWORD))v93->__vftable[2].~__shared_weak_count_0)(v93, 0);
              v59 = v94;
              if (v94)
              {
                v60 = (unint64_t *)&v94->__shared_owners_;
                do
                  v61 = __ldaxr(v60);
                while (__stlxr(v61 - 1, v60));
                if (!v61)
                {
                  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                  std::__shared_weak_count::__release_weak(v59);
                }
              }
              v39 = v90.__r_.__value_.__r.__words[0];
              goto LABEL_106;
            }
            v58 = v90.__r_.__value_.__r.__words[0] + 1032;
            if (!*(_BYTE *)(v90.__r_.__value_.__r.__words[0] + 1328))
              v58 = 0;
            goto LABEL_98;
          }
        }
        else if (!*((_BYTE *)UseRTPDetectionAutoStartKey + 57))
        {
          goto LABEL_81;
        }
        v54 = v38[316] == 0;
        goto LABEL_84;
      }
LABEL_41:
      v20 = v17 + 152;
      goto LABEL_45;
    }
    v93 = 0;
    v94 = 0;
    v21 = *(std::__shared_weak_count **)(a1 + 40);
    if (v21)
    {
      v94 = std::__shared_weak_count::lock(v21);
      if (v94)
      {
        v22 = *(void (****)(void *, void **, uint64_t))(a1 + 32);
        v93 = (std::__shared_weak_count *)v22;
        if (v22)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v87);
          (**v22)(v22, &v87, 9);
          v23 = v88;
          if (v88)
          {
            v24 = (unint64_t *)&v88->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
        }
      }
    }
    v26 = v94;
    if (v94)
    {
      v27 = (unint64_t *)&v94->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
LABEL_131:
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v93, "rtp.qmisession");
    std::string::basic_string[abi:ne180100]<0>(v91, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v19 = ImsLogger::error(ims::_logger, (uint64_t)&v93, (uint64_t)v91);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"sdpSession is null", 18);
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v19 + 17) = 0;
    if (v92 < 0)
      operator delete(v91[0]);
    if (v95 < 0)
      operator delete(v93);
  }
LABEL_133:
  v73 = (std::__shared_weak_count *)v90.__r_.__value_.__l.__size_;
  if (v90.__r_.__value_.__l.__size_)
  {
    v74 = (unint64_t *)(v90.__r_.__value_.__l.__size_ + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
}

void sub_1BF1260E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v35 - 112);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v35 - 160);
  _Unwind_Resume(a1);
}

void RTPSharedPointerBase::getShared<QMIRTPSession>(void **p_lpsrc, uint64_t a2)
{
  void *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *lpsrc;
  std::__shared_weak_count *v9;

  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, (_QWORD *)(a2 + 8));
  if (lpsrc)
  {
    if (v3)
    {
      v4 = v9;
      *p_lpsrc = v3;
      p_lpsrc[1] = v4;
      p_lpsrc = &lpsrc;
    }
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void `non-virtual thunk to'QMIRTPSession::initialize(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6, std::string::size_type *a7)
{
  QMIRTPSession::initialize(a1 - 24, a2, a3, a4, a5, a6, a7);
}

uint64_t QMIRTPSession::terminate(QMIRTPSession *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v11;
  std::__shared_weak_count *v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;

  std::string::basic_string[abi:ne180100]<0>(v15, "rtp.qmisession");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v15, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"terminate", 9);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v14 < 0)
    operator delete(__p[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  v6 = *((_QWORD *)this + 67);
  RTPSharedPointerBase::getShared<QMIRTPSession>(&v11, (uint64_t)this);
  QMIRTPStackController::uninitializeQMISession(v6, (uint64_t *)&v11);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return 1;
}

void sub_1BF1264C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'QMIRTPSession::terminate(QMIRTPSession *this)
{
  QMIRTPSession::terminate((QMIRTPSession *)((char *)this - 24));
  return 1;
}

uint64_t QMIRTPSession::start(QMIRTPSession *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t *v16;
  void *v18;
  std::__shared_weak_count *v19;
  void *v20;
  std::__shared_weak_count *v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;

  std::string::basic_string[abi:ne180100]<0>(v26, "rtp.qmisession");
  std::string::basic_string[abi:ne180100]<0>(v24, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v26, (uint64_t)v24);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"start", 5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" _direction=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  ims::toString<MediaDirection>((unsigned int *)this + 62, __p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 32))(v3, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v23 < 0)
    operator delete(__p[0]);
  if (v25 < 0)
    operator delete(v24[0]);
  if (v27 < 0)
    operator delete(v26[0]);
  if (*((_DWORD *)this + 139) == 2)
  {
    v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 176))((char *)this + 24);
    v7 = (_QWORD *)*((_QWORD *)this + 67);
    if (v6 != v7[10])
    {
      *((_BYTE *)this + 554) = 1;
      RTPSharedPointerBase::getShared<QMIRTPSession>(&v20, (uint64_t)this);
      QMIRTPStackController::configureQMISession(v7, (uint64_t *)&v20);
      v8 = v21;
      if (!v21)
        return 1;
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      goto LABEL_23;
    }
  }
  else
  {
    v7 = (_QWORD *)*((_QWORD *)this + 67);
  }
  v11 = *((_DWORD *)this + 62);
  if (v11 == 4)
    v11 = 1;
  *((_DWORD *)this + 119) = v11;
  RTPSharedPointerBase::getShared<QMIRTPSession>(&v18, (uint64_t)this);
  v12 = *((_DWORD *)this + 119);
  v13 = v12 - 2;
  v14 = 4 - v12;
  if (v13 >= 3)
    v15 = 3;
  else
    v15 = v14;
  QMIRTPStackController::setQMISessionDirection(v7, &v18, v15);
  v8 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v10 = __ldaxr(v16);
    while (__stlxr(v10 - 1, v16));
LABEL_23:
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return 1;
}

void sub_1BF1267C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'QMIRTPSession::start(QMIRTPSession *this)
{
  QMIRTPSession::start((QMIRTPSession *)((char *)this - 24));
  return 1;
}

uint64_t QMIRTPSession::stop(QMIRTPSession *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v11;
  std::__shared_weak_count *v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;

  std::string::basic_string[abi:ne180100]<0>(v15, "rtp.qmisession");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v15, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"stop", 4);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v14 < 0)
    operator delete(__p[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  *((_DWORD *)this + 119) = 4;
  v6 = (_QWORD *)*((_QWORD *)this + 67);
  RTPSharedPointerBase::getShared<QMIRTPSession>(&v11, (uint64_t)this);
  QMIRTPStackController::setQMISessionDirection(v6, &v11, 0);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return 1;
}

void sub_1BF126A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'QMIRTPSession::stop(QMIRTPSession *this)
{
  QMIRTPSession::stop((QMIRTPSession *)((char *)this - 24));
  return 1;
}

uint64_t QMIRTPSession::configure(QMIRTPSession *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v11;
  std::__shared_weak_count *v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;

  std::string::basic_string[abi:ne180100]<0>(v15, "rtp.qmisession");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v15, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"configure", 9);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v14 < 0)
    operator delete(__p[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  *((_BYTE *)this + 552) = 1;
  v6 = (_QWORD *)*((_QWORD *)this + 67);
  RTPSharedPointerBase::getShared<QMIRTPSession>(&v11, (uint64_t)this);
  QMIRTPStackController::configureQMISession(v6, (uint64_t *)&v11);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return 1;
}

void sub_1BF126C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'QMIRTPSession::configure(QMIRTPSession *this)
{
  QMIRTPSession::configure((QMIRTPSession *)((char *)this - 24));
  return 1;
}

uint64_t QMIRTPSession::setDirection(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  unsigned int *v8;
  int v9;
  std::__shared_weak_count *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned int v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  _QWORD *v37;
  unsigned int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t *v43;
  void *v44;
  std::__shared_weak_count *v45;
  void *v46;
  std::__shared_weak_count *v47;
  void *v48;
  std::__shared_weak_count *v49;
  void *v50;
  std::__shared_weak_count *v51;
  void *v52;
  std::__shared_weak_count *v53;
  void *v54;
  std::__shared_weak_count *v55;
  void *__p[2];
  char v57;
  void *v58[2];
  char v59;
  void *v60[2];
  char v61;
  void *v62;
  std::__shared_weak_count *v63;
  char v64;

  std::string::basic_string[abi:ne180100]<0>(&v62, "rtp.qmisession");
  std::string::basic_string[abi:ne180100]<0>(v60, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v62, (uint64_t)v60);
  if (!a1)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"setDirection", 12);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" oldDirection=", 14);
  *(_BYTE *)(v5 + 17) = 0;
  v8 = (unsigned int *)(a1 + 248);
  ims::toString<MediaDirection>((unsigned int *)(a1 + 248), v58);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 32))(v5, v58);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" newDirection=", 14);
  *(_BYTE *)(v5 + 17) = 0;
  ims::toString<MediaDirection>(a2, __p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 32))(v5, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v57 < 0)
    operator delete(__p[0]);
  if (v59 < 0)
    operator delete(v58[0]);
  if (v61 < 0)
    operator delete(v60[0]);
  if (v64 < 0)
    operator delete(v62);
  v9 = *(_DWORD *)(a1 + 476);
  if (v9 != 4)
  {
    v18 = *v8;
    v19 = *a2;
    if (*v8 != *a2)
    {
      if (v19 - 1 >= 2)
      {
        if (v19 == 3)
        {
          std::string::basic_string[abi:ne180100]<0>(&v62, "rtp.qmisession");
          std::string::basic_string[abi:ne180100]<0>(v60, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v24 = ImsLogger::warn(ims::_logger, (uint64_t)&v62, (uint64_t)v60);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"We don't support send only, defaulting to inactive", 50);
          *(_BYTE *)(v24 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v24 + 17) = 0;
          if (v61 < 0)
            operator delete(v60[0]);
          if (v64 < 0)
            operator delete(v62);
        }
        v25 = *(_QWORD **)(a1 + 536);
        RTPSharedPointerBase::getShared<QMIRTPSession>(&v48, a1);
        if (*a2 - 2 >= 3)
          v26 = 3;
        else
          v26 = 4 - *a2;
        QMIRTPStackController::setQMISessionDirection(v25, &v48, v26);
        v27 = v49;
        if (v49)
        {
          p_shared_owners = (unint64_t *)&v49->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        *v8 = 4;
      }
      else
      {
        *v8 = v19;
        if (v18 != 1)
        {
          if (v9 != 1)
          {
            v37 = *(_QWORD **)(a1 + 536);
            RTPSharedPointerBase::getShared<QMIRTPSession>(&v52, a1);
            v38 = *a2 - 2 >= 3 ? 3 : 4 - *a2;
            QMIRTPStackController::setQMISessionDirection(v37, &v52, v38);
            v39 = v53;
            if (v53)
            {
              v40 = (unint64_t *)&v53->__shared_owners_;
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
          }
          v42 = *(_QWORD **)(a1 + 536);
          RTPSharedPointerBase::getShared<QMIRTPSession>(&v50, a1);
          QMIRTPStackController::configureQMISession(v42, (uint64_t *)&v50);
          v15 = v51;
          if (!v51)
            return 1;
          v43 = (unint64_t *)&v51->__shared_owners_;
          do
            v17 = __ldaxr(v43);
          while (__stlxr(v17 - 1, v43));
LABEL_56:
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
          return 1;
        }
        v20 = *(_QWORD **)(a1 + 536);
        RTPSharedPointerBase::getShared<QMIRTPSession>(&v54, a1);
        QMIRTPStackController::setQMISessionDirection(v20, &v54, 2u);
        v21 = v55;
        if (v55)
        {
          v22 = (unint64_t *)&v55->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
    }
    v62 = 0;
    v63 = 0;
    v30 = *(std::__shared_weak_count **)(a1 + 40);
    if (v30)
    {
      v63 = std::__shared_weak_count::lock(v30);
      if (v63)
      {
        v31 = *(void **)(a1 + 32);
        v62 = v31;
        if (v31)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v46);
          (*(void (**)(void *, void **, _QWORD))(*(_QWORD *)v31 + 24))(v31, &v46, 0);
          v32 = v47;
          if (v47)
          {
            v33 = (unint64_t *)&v47->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
        }
      }
    }
    v15 = v63;
    if (!v63)
      return 1;
    v35 = (unint64_t *)&v63->__shared_owners_;
    do
      v17 = __ldaxr(v35);
    while (__stlxr(v17 - 1, v35));
    goto LABEL_56;
  }
  *(_DWORD *)(a1 + 248) = *a2;
  v62 = 0;
  v63 = 0;
  v10 = *(std::__shared_weak_count **)(a1 + 40);
  if (v10)
  {
    v63 = std::__shared_weak_count::lock(v10);
    if (v63)
    {
      v11 = *(void **)(a1 + 32);
      v62 = v11;
      if (v11)
      {
        RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v44);
        (*(void (**)(void *, void **, _QWORD))(*(_QWORD *)v11 + 32))(v11, &v44, 0);
        v12 = v45;
        if (v45)
        {
          v13 = (unint64_t *)&v45->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
    }
  }
  v15 = v63;
  if (v63)
  {
    v16 = (unint64_t *)&v63->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    goto LABEL_56;
  }
  return 1;
}

void sub_1BF127268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'QMIRTPSession::setDirection(uint64_t a1, unsigned int *a2)
{
  QMIRTPSession::setDirection(a1 - 24, a2);
  return 1;
}

void QMIRTPSession::didConfigure(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  std::__shared_weak_count *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  _QWORD *v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  std::__shared_weak_count *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  char *v42;
  std::__shared_weak_count *v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  void *v49;
  std::__shared_weak_count *v50;
  void *v51;
  std::__shared_weak_count *v52;
  void *v53;
  std::__shared_weak_count *v54;
  void *__p[2];
  char v56;
  void *v57;
  std::__shared_weak_count *v58;
  void *v59;
  std::__shared_weak_count *v60;
  void *v61[2];
  char v62;
  void *v63;
  std::__shared_weak_count *v64;
  char v65;

  std::string::basic_string[abi:ne180100]<0>(&v63, "rtp.qmisession");
  std::string::basic_string[abi:ne180100]<0>(v61, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v63, (uint64_t)v61);
  if (!a1)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"didConfigure", 12);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v62 < 0)
    operator delete(v61[0]);
  if (v65 < 0)
    operator delete(v63);
  if (*(_BYTE *)(a1 + 554))
  {
    *(_BYTE *)(a1 + 554) = 0;
    if (!(_DWORD)a2)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0);
      return;
    }
    v63 = 0;
    v64 = 0;
    v8 = *(std::__shared_weak_count **)(a1 + 40);
    if (v8)
    {
      v64 = std::__shared_weak_count::lock(v8);
      if (v64)
      {
        v9 = *(void **)(a1 + 32);
        v63 = v9;
        if (v9)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v59);
          (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v9 + 24))(v9, &v59, a2);
          v10 = v60;
          if (v60)
          {
            p_shared_owners = (unint64_t *)&v60->__shared_owners_;
            do
              v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
        }
      }
    }
    v13 = v64;
    if (v64)
    {
      v14 = (unint64_t *)&v64->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
LABEL_96:
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    if (!(_DWORD)a2 && *(_DWORD *)(a1 + 476) != 4)
    {
      v16 = *(_DWORD *)(a1 + 248);
      if (v16 != 4)
      {
        *(_DWORD *)(a1 + 476) = v16;
        v17 = *(_QWORD **)(a1 + 536);
        RTPSharedPointerBase::getShared<QMIRTPSession>(&v57, a1);
        v18 = *(_DWORD *)(a1 + 248);
        v19 = v18 - 2;
        v20 = 4 - v18;
        v21 = v19 >= 3 ? 3 : v20;
        QMIRTPStackController::setQMISessionDirection(v17, &v57, v21);
        v22 = v58;
        if (v58)
        {
          v23 = (unint64_t *)&v58->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
      }
    }
    if (*(_BYTE *)(a1 + 552))
    {
      *(_BYTE *)(a1 + 552) = 0;
      std::string::basic_string[abi:ne180100]<0>(&v63, "rtp.qmisession");
      std::string::basic_string[abi:ne180100]<0>(v61, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v25 = ImsLogger::info(ims::_logger, (uint64_t)&v63, (uint64_t)v61);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"didConfigure: handleMediaSessionConfigured: ", 44);
      *(_BYTE *)(v25 + 17) = 0;
      if ((_DWORD)a2)
        v26 = "false";
      else
        v26 = "true";
      std::string::basic_string[abi:ne180100]<0>(__p, v26);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v25 + 32))(v25, __p);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v25 + 17) = 0;
      if (v56 < 0)
        operator delete(__p[0]);
      if (v62 < 0)
        operator delete(v61[0]);
      if (v65 < 0)
        operator delete(v63);
      v63 = 0;
      v64 = 0;
      v27 = *(std::__shared_weak_count **)(a1 + 40);
      if (v27)
      {
        v64 = std::__shared_weak_count::lock(v27);
        if (v64)
        {
          v28 = *(void **)(a1 + 32);
          v63 = v28;
          if (v28)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v53);
            (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v28 + 16))(v28, &v53, a2);
            v29 = v54;
            if (v54)
            {
              v30 = (unint64_t *)&v54->__shared_owners_;
              do
                v31 = __ldaxr(v30);
              while (__stlxr(v31 - 1, v30));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
              }
            }
          }
        }
      }
      v13 = v64;
      if (v64)
      {
        v32 = (unint64_t *)&v64->__shared_owners_;
        do
          v15 = __ldaxr(v32);
        while (__stlxr(v15 - 1, v32));
        goto LABEL_96;
      }
    }
    else if (*(_DWORD *)(a1 + 476) == 4)
    {
      std::string::basic_string[abi:ne180100]<0>(&v63, "rtp.qmisession");
      std::string::basic_string[abi:ne180100]<0>(v61, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v33 = ImsLogger::info(ims::_logger, (uint64_t)&v63, (uint64_t)v61);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"didConfigure: handleMediaSessionDeactivated: ", 45);
      *(_BYTE *)(v33 + 17) = 0;
      if ((_DWORD)a2)
        v34 = "false";
      else
        v34 = "true";
      std::string::basic_string[abi:ne180100]<0>(__p, v34);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v33 + 32))(v33, __p);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v33 + 17) = 0;
      if (v56 < 0)
        operator delete(__p[0]);
      if (v62 < 0)
        operator delete(v61[0]);
      if (v65 < 0)
        operator delete(v63);
      v63 = 0;
      v64 = 0;
      v35 = *(std::__shared_weak_count **)(a1 + 40);
      if (v35)
      {
        v64 = std::__shared_weak_count::lock(v35);
        if (v64)
        {
          v36 = *(void **)(a1 + 32);
          v63 = v36;
          if (v36)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v49);
            (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v36 + 32))(v36, &v49, a2);
            v37 = v50;
            if (v50)
            {
              v38 = (unint64_t *)&v50->__shared_owners_;
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
          }
        }
      }
      v13 = v64;
      if (v64)
      {
        v40 = (unint64_t *)&v64->__shared_owners_;
        do
          v15 = __ldaxr(v40);
        while (__stlxr(v15 - 1, v40));
        goto LABEL_96;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v63, "rtp.qmisession");
      std::string::basic_string[abi:ne180100]<0>(v61, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v41 = ImsLogger::info(ims::_logger, (uint64_t)&v63, (uint64_t)v61);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)"didConfigure: handleMediaSessionActivated: ", 43);
      *(_BYTE *)(v41 + 17) = 0;
      if ((_DWORD)a2)
        v42 = "false";
      else
        v42 = "true";
      std::string::basic_string[abi:ne180100]<0>(__p, v42);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v41 + 32))(v41, __p);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v41 + 17) = 0;
      if (v56 < 0)
        operator delete(__p[0]);
      if (v62 < 0)
        operator delete(v61[0]);
      if (v65 < 0)
        operator delete(v63);
      v63 = 0;
      v64 = 0;
      v43 = *(std::__shared_weak_count **)(a1 + 40);
      if (v43)
      {
        v64 = std::__shared_weak_count::lock(v43);
        if (v64)
        {
          v44 = *(void **)(a1 + 32);
          v63 = v44;
          if (v44)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v51);
            (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v44 + 24))(v44, &v51, a2);
            v45 = v52;
            if (v52)
            {
              v46 = (unint64_t *)&v52->__shared_owners_;
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }
          }
        }
      }
      v13 = v64;
      if (v64)
      {
        v48 = (unint64_t *)&v64->__shared_owners_;
        do
          v15 = __ldaxr(v48);
        while (__stlxr(v15 - 1, v48));
        goto LABEL_96;
      }
    }
  }
}

void sub_1BF127AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v24 - 72);
  _Unwind_Resume(a1);
}

uint64_t QMIRTPSession::configureRemoteRTCP(QMIRTPSession *this, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(QMIRTPSession *, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 160))(this, a2, 0, a3, a3);
}

uint64_t `non-virtual thunk to'QMIRTPSession::configureRemoteRTCP(QMIRTPSession *this, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(char *, uint64_t, _QWORD, uint64_t, uint64_t))(*((_QWORD *)this - 3) + 160))((char *)this - 24, a2, 0, a3, a3);
}

uint64_t QMIRTPSession::configureLocalRTCP(QMIRTPSession *this, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(QMIRTPSession *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 160))(this, a2, 1, a3, a3);
}

uint64_t `non-virtual thunk to'QMIRTPSession::configureLocalRTCP(QMIRTPSession *this, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(*((_QWORD *)this - 3) + 160))((char *)this - 24, a2, 1, a3, a3);
}

void QMIRTPSession::configureMediaLinkMonitor(QMIRTPSession *this, int a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  void *v16;
  std::__shared_weak_count *v17;

  v6 = *((_QWORD *)this + 67);
  RTPSharedPointerBase::getShared<QMIRTPSession>(&v16, (uint64_t)this);
  QMIRTPStackController::configureRTPLinkMonitor(v6, (uint64_t *)&v16, a2 != 0, a2);
  v7 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *((_QWORD *)this + 67);
  RTPSharedPointerBase::getShared<QMIRTPSession>(&v14, (uint64_t)this);
  QMIRTPStackController::configureRTCPLinkMonitor(v10, (uint64_t *)&v14, a3 != 0, a3);
  v11 = v15;
  if (v15)
  {
    v12 = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF127D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMIRTPSession::configureMediaLinkMonitor(QMIRTPSession *this, int a2, int a3)
{
  QMIRTPSession::configureMediaLinkMonitor((QMIRTPSession *)((char *)this - 24), a2, a3);
}

void QMIRTPSession::configureRTCP(QMIRTPSession *this, int a2, char a3, __int16 a4, int a5)
{
  int v6;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;

  LOWORD(v6) = a4;
  v10 = *((_QWORD *)this + 67);
  RTPSharedPointerBase::getShared<QMIRTPSession>(&v14, (uint64_t)this);
  if (*((_DWORD *)this + 62) != 1)
    v6 = *((_DWORD *)this + 107);
  QMIRTPStackController::configureRTCPReports(v10, (uint64_t *)&v14, a2, a3, (unsigned __int16)v6, a5);
  v11 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF127DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double QMIRTPSession::startSendingDTMF@<D0>(QMIRTPSession *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  double result;
  void *v10;
  std::__shared_weak_count *v11;

  v5 = *((_QWORD *)this + 67);
  RTPSharedPointerBase::getShared<QMIRTPSession>(&v10, (uint64_t)this);
  QMIRTPStackController::sendDTMFDigit(v5, (uint64_t *)&v10, a2);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

void sub_1BF127EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double `non-virtual thunk to'QMIRTPSession::startSendingDTMF@<D0>(QMIRTPSession *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  return QMIRTPSession::startSendingDTMF((QMIRTPSession *)((char *)this - 24), a2, a3);
}

double QMIRTPSession::stopSendingDTMF@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_1E78B7238;
  *(_QWORD *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

double `non-virtual thunk to'QMIRTPSession::stopSendingDTMF@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_1E78B7238;
  *(_QWORD *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

double QMIRTPSession::sendDTMFDigits@<D0>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  char *v5;
  char v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  double result;
  void *v13;
  std::__shared_weak_count *v14;

  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v7 = *v4;
      v8 = *(_QWORD *)(a1 + 536);
      RTPSharedPointerBase::getShared<QMIRTPSession>(&v13, a1);
      QMIRTPStackController::sendDTMFDigit(v8, (uint64_t *)&v13, v7);
      v9 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      ++v4;
    }
    while (v4 != v5);
  }
  result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

void sub_1BF128004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double `non-virtual thunk to'QMIRTPSession::sendDTMFDigits@<D0>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  return QMIRTPSession::sendDTMFDigits(a1 - 24, a2, a3);
}

void QMIRTPSession::setConfiguration(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  _BYTE *v7;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  _OWORD *v27;
  __int16 v28;
  int v29;
  int v30;
  __int128 v31;
  std::string::size_type size;
  std::string *v33;
  int data_low;
  int v35;
  BOOL v36;
  int v37;
  std::string *v38;
  int data;
  char *v41;
  std::string::size_type v42;
  uint64_t v43;
  char v44;
  std::string *v45;
  int v46;
  int v47;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  _BYTE *v53;
  std::string *v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  double *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  unint64_t *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  _QWORD v95[2];
  void (*v96)(uint64_t, uint64_t);
  void *v97;
  uint64_t v98;
  __int16 v99;
  __int16 v100;
  __int128 v101;
  int v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  _QWORD v106[2];
  _QWORD v107[4];
  int v108;
  int v109;
  _QWORD v110[5];
  std::string v111;
  void *v112[2];
  char v113;
  void *v114;
  uint64_t v115;
  char v116;
  __int128 __p;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  __int16 v122;
  _QWORD v123[2];
  uint64_t (*v124)(uint64_t, uint64_t);
  void *v125;
  uint64_t v126;
  _BYTE *v127;
  _QWORD v128[2];
  uint64_t (*v129)(uint64_t, char *);
  void *v130;
  _BYTE *v131;
  _QWORD v132[2];
  void (*v133)(uint64_t, uint64_t);
  void *v134;
  _BYTE *v135;
  _QWORD v136[2];
  uint64_t (*v137)(uint64_t, _BYTE *);
  void *v138;
  uint64_t v139;
  std::string v140;
  _BYTE *v141;
  std::__shared_weak_count *v142;

  v141 = 0;
  v142 = 0;
  v5 = (std::__shared_weak_count *)a2[1];
  if (!v5 || (v142 = std::__shared_weak_count::lock(v5)) == 0 || (v141 = (_BYTE *)*a2, (v7 = v141) == 0))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.qmisession");
    std::string::basic_string[abi:ne180100]<0>(&v140, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v140);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"sdpSession is null", 18);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v140.__r_.__value_.__l.__data_);
    if (SBYTE7(v118) < 0)
      operator delete((void *)__p);
    goto LABEL_19;
  }
  v8 = *(_DWORD *)(a1 + 556);
  if (v8 == 2)
  {
    if (v141[584])
    {
      v9 = v141 + 152;
      goto LABEL_16;
    }
  }
  else if (v8 == 6 && v141[1856])
  {
    v9 = v141 + 1496;
    goto LABEL_16;
  }
  if (!v141[1328])
  {
LABEL_18:
    *(_BYTE *)(a1 + 528) = 0;
LABEL_19:
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741825;
    goto LABEL_20;
  }
  v9 = v141 + 1032;
LABEL_16:
  if (!*((_WORD *)v9 + 13) || *((_WORD *)v9 + 15) == 255)
    goto LABEL_18;
  __p = 0u;
  v118 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&__p);
  qmi::MutableMessageBase::operator=();
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&__p);
  v14 = MEMORY[0x1E0C809B0];
  v136[0] = MEMORY[0x1E0C809B0];
  v136[1] = 0x40000000;
  v137 = ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke;
  v138 = &__block_descriptor_tmp_21_3;
  v139 = a1;
  v15 = qmi::MutableMessageBase::getTLV<ms::tlv::RTPSessionIdentifier>((_QWORD *)(a1 + 496), 1);
  v137((uint64_t)v136, (_BYTE *)v15);
  v16 = v7 + 152;
  if (v7[584])
    v17 = v7 + 152;
  else
    v17 = 0;
  v18 = *(_DWORD *)(a1 + 556);
  if (v18 == 2)
  {
    if (v7[584])
      goto LABEL_36;
  }
  else if (v18 == 6 && v7[1856])
  {
    v16 = v7 + 1496;
    goto LABEL_36;
  }
  if (!v7[1328])
    goto LABEL_46;
  v16 = v7 + 1032;
LABEL_36:
  v20 = *((_QWORD *)v16 + 1);
  v19 = (std::__shared_weak_count *)*((_QWORD *)v16 + 2);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v20)
  {
    v132[0] = v14;
    v132[1] = 0x40000000;
    v133 = ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_2;
    v134 = &__block_descriptor_tmp_23_2;
    v135 = v16;
    v24 = qmi::MutableMessageBase::getTLV<ms::tlv::RemoteTransportIpAddr>((_QWORD *)(a1 + 496));
    v133((uint64_t)v132, (uint64_t)v24);
  }
  if (*((_WORD *)v16 + 15) != 255)
  {
    v128[0] = v14;
    v128[1] = 0x40000000;
    v129 = (uint64_t (*)(uint64_t, char *))___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_3;
    v130 = &__block_descriptor_tmp_25_0;
    v131 = v16;
    v25 = qmi::MutableMessageBase::getTLV<ms::tlv::RemotePort>((_QWORD *)(a1 + 496));
    v129((uint64_t)v128, v25);
    v123[0] = v14;
    v123[1] = 0x40000000;
    v124 = ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_4;
    v125 = &__block_descriptor_tmp_27_1;
    v126 = a1;
    v127 = v16;
    v26 = qmi::MutableMessageBase::getTLV<ms::tlv::RtcpRemotePort>((_QWORD *)(a1 + 496));
    v124((uint64_t)v123, (uint64_t)v26);
  }
LABEL_46:
  if (*(_DWORD *)(a1 + 556) != 2)
  {
LABEL_123:
    *(_BYTE *)(a1 + 528) = 1;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
    goto LABEL_20;
  }
  memset(&v140, 0, sizeof(v140));
  v27 = v17 + 280;
  if ((char)v17[303] < 0)
  {
    std::string::__init_copy_ctor_external(&v140, *((const std::string::value_type **)v17 + 35), *((_QWORD *)v17 + 36));
  }
  else
  {
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = *v27;
    v140.__r_.__value_.__r.__words[2] = *((_QWORD *)v17 + 37);
  }
  v28 = *((_WORD *)v17 + 164);
  v29 = *((unsigned __int16 *)v17 + 165);
  v92 = *((unsigned __int16 *)v17 + 166);
  v121 = *((_QWORD *)v17 + 45);
  v122 = *((_WORD *)v17 + 184);
  v30 = *((unsigned __int16 *)v17 + 185);
  v120 = *(_OWORD *)(v17 + 372);
  v93 = *((_DWORD *)v17 + 97);
  v94 = v30;
  v31 = *(_OWORD *)(v17 + 408);
  __p = *(_OWORD *)(v17 + 392);
  v118 = v31;
  size = HIBYTE(v140.__r_.__value_.__r.__words[2]);
  if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v140.__r_.__value_.__l.__size_;
  v119 = *((_QWORD *)v17 + 53);
  if (size == 6)
  {
    v38 = &v140;
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v38 = (std::string *)v140.__r_.__value_.__r.__words[0];
    data = (int)v38->__r_.__value_.__l.__data_;
    v35 = WORD2(v38->__r_.__value_.__r.__words[0]);
    v36 = data == 760368449;
    v37 = 16983;
  }
  else
  {
    if (size != 3)
      goto LABEL_64;
    v33 = &v140;
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v33 = (std::string *)v140.__r_.__value_.__r.__words[0];
    data_low = LOWORD(v33->__r_.__value_.__l.__data_);
    v35 = v33->__r_.__value_.__s.__data_[2];
    v36 = data_low == 19777;
    v37 = 82;
  }
  if (v36 && v35 == v37)
  {
LABEL_65:
    v110[0] = v14;
    v110[1] = 0x40000000;
    v110[2] = ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_5;
    v110[3] = &__block_descriptor_tmp_39_1;
    v110[4] = v17;
    v41 = qmi::MutableMessageBase::getTLV<ms::tlv::SessionParameters>((_QWORD *)(a1 + 496));
    ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_5((uint64_t)v110, (uint64_t)v41);
    v42 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v42 = v140.__r_.__value_.__l.__size_;
    if (v42 == 6)
    {
      if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v54 = &v140;
      else
        v54 = (std::string *)v140.__r_.__value_.__r.__words[0];
      v55 = 1095586349;
      v56 = bswap32(v54->__r_.__value_.__l.__data_);
      if (v56 == 1095586349
        && (v56 = bswap32(WORD2(v54->__r_.__value_.__r.__words[0])) >> 16, v55 = 22338, v56 == 22338))
      {
        v57 = 0;
      }
      else if (v56 < v55)
      {
        v57 = -1;
      }
      else
      {
        v57 = 1;
      }
      v43 = v14;
      v44 = v28;
      if (!v57)
      {
        v49 = 0;
        v51 = 1;
        v50 = 1;
LABEL_90:
        v107[0] = v43;
        v107[1] = 0x40000000;
        v107[2] = ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_6;
        v107[3] = &__block_descriptor_tmp_43_1;
        v108 = v50;
        v109 = v29;
        v58 = (double *)qmi::MutableMessageBase::getTLV<ms::tlv::CodecParameters>((_QWORD *)(a1 + 496));
        ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_6((uint64_t)v107, v58);
        if (!v49)
        {
          v67 = *(_QWORD *)(a1 + 536);
          v68 = *(_QWORD *)(v67 + 48);
          v69 = *(std::__shared_weak_count **)(v67 + 56);
          if (v69)
          {
            v70 = (unint64_t *)&v69->__shared_owners_;
            do
              v71 = __ldxr(v70);
            while (__stxr(v71 + 1, v70));
          }
          v72 = *(_QWORD *)(v68 + 296);
          if (v72)
          {
            v73 = *(_QWORD *)(v72 + 120);
            *(_WORD *)(v73 + 488) = v50;
            *(_WORD *)(v73 + 490) = v29;
          }
          if (v69)
          {
            v74 = (unint64_t *)&v69->__shared_owners_;
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
          if (!v51)
            goto LABEL_121;
          goto LABEL_116;
        }
        if (v93 < 3)
        {
          v76 = *(_QWORD *)(a1 + 536);
          v77 = *(_QWORD **)(v76 + 48);
          v78 = *(_QWORD *)(v76 + 56);
          v114 = v77;
          v115 = v78;
          if (v78)
          {
            v79 = (unint64_t *)(v78 + 8);
            do
              v80 = __ldxr(v79);
            while (__stxr(v80 + 1, v79));
          }
          v81 = v77[37];
          if (v81)
          {
            v65 = *(_QWORD *)(v81 + 120);
            v66 = 4;
            goto LABEL_114;
          }
        }
        else
        {
          v59 = *(_QWORD *)(a1 + 536);
          v60 = *(_QWORD **)(v59 + 48);
          v61 = *(_QWORD *)(v59 + 56);
          v114 = v60;
          v115 = v61;
          if (v61)
          {
            v62 = (unint64_t *)(v61 + 8);
            do
              v63 = __ldxr(v62);
            while (__stxr(v63 + 1, v62));
          }
          v64 = v60[37];
          if (v64)
          {
            v65 = *(_QWORD *)(v64 + 120);
            v66 = 5;
LABEL_114:
            *(_WORD *)(v65 + 488) = v66;
            *(_WORD *)(v65 + 490) = v29;
          }
        }
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v114);
        if ((v51 & 1) == 0)
        {
          v95[0] = v43;
          v95[1] = 1174405120;
          v96 = ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_46;
          v97 = &__block_descriptor_tmp_48_3;
          v98 = v121;
          v99 = v122;
          v100 = v94;
          v101 = v120;
          v102 = v93;
          v104 = v118;
          v103 = __p;
          v105 = v119;
          v106[0] = v141;
          v106[1] = v142;
          if (v142)
          {
            v83 = (unint64_t *)&v142->__shared_owners_;
            do
              v84 = __ldxr(v83);
            while (__stxr(v84 + 1, v83));
          }
          v85 = qmi::MutableMessageBase::getTLV<ms::tlv::EVSCodecParameters>((_QWORD *)(a1 + 496));
          v96((uint64_t)v95, (uint64_t)v85);
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v106);
          goto LABEL_121;
        }
LABEL_116:
        v82 = qmi::MutableMessageBase::getTLV<ms::tlv::AMRCodecParameters>((_QWORD *)(a1 + 496));
        *(_QWORD *)v82 = v92;
        v82[8] = -1;
        v82[9] = v44;
        v82[10] = v44;
LABEL_121:
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v140.__r_.__value_.__l.__data_);
        goto LABEL_123;
      }
    }
    else
    {
      v43 = v14;
      v44 = v28;
      if (v42 == 3)
      {
        v45 = &v140;
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v45 = (std::string *)v140.__r_.__value_.__r.__words[0];
        v46 = LOWORD(v45->__r_.__value_.__l.__data_);
        v47 = v45->__r_.__value_.__s.__data_[2];
        if (v46 == 19777 && v47 == 82)
        {
          v49 = 0;
          v50 = 0;
          v51 = 1;
          goto LABEL_90;
        }
      }
    }
    v51 = 0;
    v50 = 2;
    v49 = 1;
    v29 = v94;
    goto LABEL_90;
  }
LABEL_64:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v140.__r_.__value_.__l.__data_, "EVS"))
  {
    goto LABEL_65;
  }
  std::string::basic_string[abi:ne180100]<0>(&v114, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(v112, "");
  v52 = ims::error((uint64_t)&v114, (uint64_t)v112);
  v53 = (_BYTE *)ImsOutStream::operator<<(v52, "SDP Media format info has unsupported codec type: ");
  if ((char)v17[303] < 0)
  {
    std::string::__init_copy_ctor_external(&v111, *((const std::string::value_type **)v17 + 35), *((_QWORD *)v17 + 36));
  }
  else
  {
    *(_OWORD *)&v111.__r_.__value_.__l.__data_ = *v27;
    v111.__r_.__value_.__r.__words[2] = *((_QWORD *)v17 + 37);
  }
  (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v53 + 32))(v53, &v111);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v53 + 64))(v53, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v53[17] = 0;
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v111.__r_.__value_.__l.__data_);
  if (v113 < 0)
    operator delete(v112[0]);
  if (v116 < 0)
    operator delete(v114);
  v86 = *(_QWORD *)(a1 + 536);
  v87 = *(_QWORD **)(v86 + 48);
  v88 = *(_QWORD *)(v86 + 56);
  v114 = v87;
  v115 = v88;
  if (v88)
  {
    v89 = (unint64_t *)(v88 + 8);
    do
      v90 = __ldxr(v89);
    while (__stxr(v90 + 1, v89));
  }
  v91 = v87[37];
  if (v91)
    AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v91 + 120), 27);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v114);
  *(_BYTE *)(a1 + 528) = 0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 1073741825;
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v140.__r_.__value_.__l.__data_);
LABEL_20:
  v11 = v142;
  if (v142)
  {
    v12 = (unint64_t *)&v142->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF128984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  if (a49 < 0)
    operator delete(__p);
  if (a55 < 0)
    operator delete(a50);
  if (*(char *)(v61 - 137) < 0)
    operator delete(*(void **)(v61 - 160));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v61 - 128);
  _Unwind_Resume(a1);
}

uint64_t ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(*(_QWORD *)(result + 32) + 482);
  return result;
}

void ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  _BOOL4 v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t *v26;
  void **v27;
  char v28;
  unint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  unint64_t v34;
  unint64_t v35;
  size_t v36;
  char *v37;
  char *v38;
  _BYTE *v39;
  char v40;
  void **v41;
  std::__shared_weak_count *v42;
  uint64_t v43;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void ***)(v4 + 8);
  v6 = *(std::__shared_weak_count **)(v4 + 16);
  v41 = v5;
  v42 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (unsigned __int8 *)(*((uint64_t (**)(void **))*v5 + 16))(v5);
  v10 = v9[23];
  if ((v10 & 0x80u) == 0)
    v11 = v9[23];
  else
    v11 = *((_QWORD *)v9 + 1);
  if (v11 != 3)
  {
LABEL_14:
    v13 = 0;
    goto LABEL_16;
  }
  if ((v10 & 0x80) != 0)
  {
    v13 = memcmp(*(const void **)v9, &IpAddress::kAddressTypeIPv6, *((_QWORD *)v9 + 1)) == 0;
    goto LABEL_16;
  }
  if (v9[23])
  {
    v12 = &IpAddress::kAddressTypeIPv6;
    while (*v9 == *(unsigned __int8 *)v12)
    {
      ++v9;
      v12 = (__int128 *)((char *)v12 + 1);
      if (!--v10)
        goto LABEL_13;
    }
    goto LABEL_14;
  }
LABEL_13:
  v13 = 1;
LABEL_16:
  *(_DWORD *)a2 = v13;
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(v16 + 8);
  v18 = *(std::__shared_weak_count **)(v16 + 16);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  IpAddress::asString(v17, (uint64_t)&v41, 0);
  if (v18)
  {
    v21 = (unint64_t *)&v18->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v23 = 0;
  v24 = HIBYTE(v43);
  if (v43 >= 0)
    v25 = HIBYTE(v43);
  else
    v25 = (char)v42;
  *(_BYTE *)(a2 + 4) = v25;
  v26 = (unint64_t *)(a2 + 8);
  if ((v24 & 0x80) != 0)
    goto LABEL_35;
  while (v23 < v24)
  {
    v27 = (void **)&v41;
    while (1)
    {
      v28 = *((_BYTE *)v27 + v23);
      v30 = *(_BYTE **)(a2 + 16);
      v29 = *(_QWORD *)(a2 + 24);
      if ((unint64_t)v30 >= v29)
      {
        v32 = *v26;
        v33 = &v30[-*v26];
        v34 = (unint64_t)(v33 + 1);
        if ((uint64_t)(v33 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v35 = v29 - v32;
        if (2 * v35 > v34)
          v34 = 2 * v35;
        v36 = v35 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v34;
        v37 = v36 ? (char *)operator new(v36) : 0;
        v38 = &v33[(_QWORD)v37];
        v33[(_QWORD)v37] = v28;
        v31 = (uint64_t)&v33[(_QWORD)v37 + 1];
        if (v30 != (_BYTE *)v32)
        {
          v39 = &v30[~v32];
          do
          {
            v40 = *--v30;
            (v39--)[(_QWORD)v37] = v40;
          }
          while (v30 != (_BYTE *)v32);
          v30 = (_BYTE *)*v26;
          v38 = v37;
        }
        *(_QWORD *)(a2 + 8) = v38;
        *(_QWORD *)(a2 + 16) = v31;
        *(_QWORD *)(a2 + 24) = &v37[v36];
        if (v30)
          operator delete(v30);
      }
      else
      {
        *v30 = v28;
        v31 = (uint64_t)(v30 + 1);
      }
      *(_QWORD *)(a2 + 16) = v31;
      ++v23;
      v24 = HIBYTE(v43);
      if ((v43 & 0x8000000000000000) == 0)
        break;
LABEL_35:
      v27 = v41;
      if (v23 >= (unint64_t)v42)
      {
        operator delete(v41);
        return;
      }
    }
  }
}

void sub_1BF128D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_3(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(*(_QWORD *)(result + 32) + 26);
  return result;
}

uint64_t ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_4(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_WORD *)a2 = *(_WORD *)(*(_QWORD *)(result + 40) + 26) + 1;
  *(_BYTE *)(a2 + 2) = *(_BYTE *)(v2 + 472);
  return result;
}

void ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_5(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  std::string::basic_string[abi:ne180100]<0>(v14, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Audio RX payload type ", 22);
  *(_BYTE *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (v13 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  std::string::basic_string[abi:ne180100]<0>(v14, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Audio TX payload type ", 22);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v13 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  v6 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)a2 = *(_BYTE *)(v6 + 28);
  *(_BYTE *)(a2 + 1) = *(_BYTE *)(v6 + 30);
  v7 = *(unsigned __int16 *)(v6 + 312);
  *(_WORD *)(a2 + 2) = v7;
  if (v7 <= 0x13)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::error(ims::_logger, (uint64_t)v14, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Tried to set PacketizationTime to ", 34);
    *(_BYTE *)(v8 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" setting it to ", 15);
    *(_BYTE *)(v8 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v13 < 0)
      operator delete(__p[0]);
    if (v15 < 0)
      operator delete(v14[0]);
    *(_WORD *)(a2 + 2) = 20;
    v6 = *(_QWORD *)(a1 + 32);
  }
  v9 = *(unsigned __int16 *)(v6 + 314);
  *(_WORD *)(a2 + 4) = v9;
  if (v9 <= 0x13)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "rtp.qmidriver");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::error(ims::_logger, (uint64_t)v14, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Tried to set MaxPacketizationTime to ", 37);
    *(_BYTE *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" setting it to ", 15);
    *(_BYTE *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (v13 < 0)
      operator delete(__p[0]);
    if (v15 < 0)
      operator delete(v14[0]);
    *(_WORD *)(a2 + 4) = 20;
    v6 = *(_QWORD *)(a1 + 32);
  }
  v11 = *(unsigned __int16 *)(v6 + 306);
  if (v11 != 255)
  {
    *(_WORD *)(a2 + 6) = *(_WORD *)(v6 + 310);
    *(_BYTE *)(a2 + 8) = v11;
  }
}

void sub_1BF129140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_6(uint64_t a1, double *a2)
{
  uint64_t v4;
  int v5;
  const char *v6;
  const char *v7;
  size_t v8;
  double result;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  std::string::basic_string[abi:ne180100]<0>(v12, "rtp.qmidriver");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Codec Type: ", 12);
  *(_BYTE *)(v4 + 17) = 0;
  v5 = *(_DWORD *)(a1 + 32);
  v6 = "EVS";
  if (v5 == 1)
    v6 = "AMR-WB";
  if (v5)
    v7 = v6;
  else
    v7 = "AMR";
  v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)v7, v8);
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" Codec Mode: ", 13);
  *(_BYTE *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  result = *(double *)(a1 + 32);
  *a2 = result;
  return result;
}

void sub_1BF1292E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN13QMIRTPSession16setConfigurationENSt3__18weak_ptrI10SDPSessionEE_block_invoke_46(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  ImsPrefs *v15;
  void **IncludeEVSIOModesKey;
  void *v17;
  int v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  char v22;
  char v23;

  v4 = *(int *)(a1 + 56);
  if (v4 > 4)
    v5 = 3;
  else
    v5 = dword_1BF2AA000[v4];
  *(_DWORD *)a2 = v5;
  v6 = *(int *)(a1 + 60);
  if (v6 > 4)
    v7 = 3;
  else
    v7 = dword_1BF2AA000[v6];
  *(_DWORD *)(a2 + 4) = v7;
  v8 = *(int *)(a1 + 64);
  if (v8 > 5)
    v9 = 15;
  else
    v9 = qword_1BF2AA018[v8];
  *(_QWORD *)(a2 + 8) = v9;
  v10 = *(int *)(a1 + 68);
  if (v10 > 5)
    v11 = 15;
  else
    v11 = qword_1BF2AA018[v10];
  *(_QWORD *)(a2 + 16) = v11;
  v12 = *(_QWORD *)(a1 + 104);
  v13 = *(std::__shared_weak_count **)(v12 + 128);
  if (v13)
  {
    v13 = std::__shared_weak_count::lock(v13);
    v14 = v13;
    if (v13)
      v13 = *(std::__shared_weak_count **)(v12 + 120);
  }
  else
  {
    v14 = 0;
  }
  v15 = (ImsPrefs *)SipStack::prefs((SipStack *)v13);
  IncludeEVSIOModesKey = (void **)ImsPrefs::getIncludeEVSIOModesKey(v15);
  v17 = ImsPrefs::prefWithKey(v15, IncludeEVSIOModesKey);
  if (v17)
  {
    v18 = (*(uint64_t (**)(void *))(*(_QWORD *)v17 + 40))(v17);
    if (!v14)
      goto LABEL_24;
  }
  else
  {
    v18 = *((_BYTE *)IncludeEVSIOModesKey + 57) != 0;
    if (!v14)
      goto LABEL_24;
  }
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_25;
LABEL_27:
    if (*(_BYTE *)(a1 + 48))
      v21 = *(unsigned __int16 *)(a1 + 40);
    else
      v21 = *(_QWORD *)(a1 + 32);
    goto LABEL_30;
  }
LABEL_24:
  if (!v18)
    goto LABEL_27;
LABEL_25:
  v21 = *(_QWORD *)(a1 + 32) | *(unsigned __int16 *)(a1 + 40);
LABEL_30:
  *(_QWORD *)(a2 + 24) = v21;
  *(_WORD *)(a2 + 32) = 3855;
  *(_BYTE *)(a2 + 34) = 0;
  *(_BYTE *)(a2 + 35) = *(_BYTE *)(a1 + 72) != 0;
  *(_BYTE *)(a2 + 36) = *(_BYTE *)(a1 + 73) != 0;
  if (*(_DWORD *)(a1 + 60))
  {
    v22 = *(_BYTE *)(a1 + 50);
    v23 = *(_BYTE *)(a1 + 51);
  }
  else
  {
    v22 = -1;
    v23 = -1;
  }
  *(_BYTE *)(a2 + 37) = v22;
  *(_BYTE *)(a2 + 38) = v23;
}

void sub_1BF129504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32104c38_ZTSNSt3__110shared_ptrI10SDPSessionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(result + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(result + 112) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c25_ZTS19SDPMediaEVSSettings104c38_ZTSNSt3__110shared_ptrI10SDPSessionEE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 104);
}

void `non-virtual thunk to'QMIRTPSession::setConfiguration(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  QMIRTPSession::setConfiguration(a1 - 24, a2, a3);
}

uint64_t QMIRTPSession::paused(QMIRTPSession *this)
{
  return *((unsigned __int8 *)this + 553);
}

uint64_t QMIRTPSession::mediaType(QMIRTPSession *this)
{
  return *((unsigned int *)this + 139);
}

BOOL QMIRTPSession::mediaSupportEnabled(uint64_t a1, int a2)
{
  return *(_DWORD *)(a1 + 556) == a2;
}

uint64_t `non-virtual thunk to'QMIRTPSession::paused(QMIRTPSession *this)
{
  return *((unsigned __int8 *)this + 529);
}

uint64_t `non-virtual thunk to'QMIRTPSession::mediaType(QMIRTPSession *this)
{
  return *((unsigned int *)this + 133);
}

BOOL `non-virtual thunk to'QMIRTPSession::mediaSupportEnabled(uint64_t a1, int a2)
{
  return *(_DWORD *)(a1 + 532) == a2;
}

char *qmi::MutableMessageBase::getTLV<ms::tlv::RemoteTransportIpAddr>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 16)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_BYTE *)(v7 + 8) = 16;
    *(_QWORD *)v7 = &off_1E78E1560;
    *(_DWORD *)(v7 + 16) = 0;
    v6 = v7 + 16;
    *(_BYTE *)(v7 + 20) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 40) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 16;
  }
  return (char *)v6;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<ms::tlv::RemoteTransportIpAddr>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E78E1560;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RemoteTransportIpAddr>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E78E1560;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RemoteTransportIpAddr>::getSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24) + 8;
}

void *qmi::MutableMessageBase::TlvWrapper<ms::tlv::RemoteTransportIpAddr>::write(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  __int16 v6;
  void *result;
  uint64_t v8;

  v4 = *(_BYTE *)(a1 + 8);
  v5 = *a2;
  v6 = *a2 + 3;
  *a2 += 3;
  *(_DWORD *)(v5 + 3) = *(_DWORD *)(a1 + 16);
  *(_BYTE *)(v5 + 7) = *(_BYTE *)(a1 + 20);
  result = memcpy((void *)(v5 + 8), *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24));
  v8 = v5 + 8 + *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24);
  *a2 = v8;
  *(_BYTE *)v5 = v4;
  *(_WORD *)(v5 + 1) = v8 - v6;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RemoteTransportIpAddr>::clone(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_1E78E1560;
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(a1 + 16);
  *(_BYTE *)(v2 + 20) = *(_BYTE *)(a1 + 20);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  v3 = *(const void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 24), v3, v4, v4 - (_QWORD)v3);
  return v2;
}

void sub_1BF1298A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1091C40111C7D32);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<ms::tlv::RemotePort>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 17)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_BYTE *)(v7 + 8) = 17;
    *(_WORD *)(v7 + 10) = 0;
    v6 = v7 + 10;
    *(_QWORD *)v7 = &off_1E78E15B0;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 10;
  }
  return (char *)v6;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RemotePort>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RemotePort>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RemotePort>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RemotePort>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78E15B0;
  *(_WORD *)(result + 10) = *(_WORD *)(a1 + 10);
  return result;
}

char *qmi::MutableMessageBase::getTLV<ms::tlv::RtcpRemotePort>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 18)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_BYTE *)(v7 + 8) = 18;
    *(_QWORD *)v7 = &off_1E78E1600;
    *(_WORD *)(v7 + 10) = 0;
    v6 = v7 + 10;
    *(_BYTE *)(v7 + 12) = 0;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 10;
  }
  return (char *)v6;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::RtcpRemotePort>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RtcpRemotePort>::getSize()
{
  return 6;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RtcpRemotePort>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *(_BYTE *)(v3 + 5) = *(_BYTE *)(result + 12);
  *a2 = v3 + 6;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 3;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::RtcpRemotePort>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78E1600;
  *(_DWORD *)(result + 10) = *(_DWORD *)(a1 + 10);
  return result;
}

char *qmi::MutableMessageBase::getTLV<ms::tlv::SessionParameters>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 19)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_BYTE *)(v7 + 8) = 19;
    *(_QWORD *)v7 = &off_1E78E1650;
    *(_QWORD *)(v7 + 10) = 0;
    v6 = v7 + 10;
    *(_BYTE *)(v7 + 18) = 0;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 10;
  }
  return (char *)v6;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::SessionParameters>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::SessionParameters>::getSize()
{
  return 12;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::SessionParameters>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 10);
  *(_BYTE *)(v3 + 4) = *(_BYTE *)(result + 11);
  *(_WORD *)(v3 + 5) = *(_WORD *)(result + 12);
  *(_WORD *)(v3 + 7) = *(_WORD *)(result + 14);
  *(_WORD *)(v3 + 9) = *(_WORD *)(result + 16);
  *(_BYTE *)(v3 + 11) = *(_BYTE *)(result + 18);
  *a2 = v3 + 12;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 9;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::SessionParameters>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78E1650;
  *(_QWORD *)(result + 10) = *(_QWORD *)(a1 + 10);
  *(_WORD *)(result + 18) = *(_WORD *)(a1 + 18);
  return result;
}

char *qmi::MutableMessageBase::getTLV<ms::tlv::CodecParameters>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 20)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_BYTE *)(v7 + 8) = 20;
    *(_QWORD *)v7 = &off_1E78E16A0;
    *(_DWORD *)(v7 + 12) = 0;
    v6 = v7 + 12;
    *(_DWORD *)(v7 + 16) = 0;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 12;
  }
  return (char *)v6;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::CodecParameters>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::CodecParameters>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::CodecParameters>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *(_DWORD *)(v3 + 7) = *(_DWORD *)(result + 16);
  *a2 = v3 + 11;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 8;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::CodecParameters>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78E16A0;
  *(_QWORD *)(result + 12) = *(_QWORD *)(a1 + 12);
  return result;
}

char *qmi::MutableMessageBase::getTLV<ms::tlv::AMRCodecParameters>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 21)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_BYTE *)(v7 + 8) = 21;
    *(_QWORD *)v7 = &off_1E78E16F0;
    *(_QWORD *)(v7 + 16) = 0;
    v6 = v7 + 16;
    *(_DWORD *)(v7 + 23) = 0;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 16;
  }
  return (char *)v6;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::AMRCodecParameters>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::AMRCodecParameters>::getSize()
{
  return 14;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::AMRCodecParameters>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_QWORD *)(v3 + 3) = *(_QWORD *)(result + 16);
  *(_BYTE *)(v3 + 11) = *(_BYTE *)(result + 24);
  *(_BYTE *)(v3 + 12) = *(_BYTE *)(result + 25);
  *(_BYTE *)(v3 + 13) = *(_BYTE *)(result + 26);
  *a2 = v3 + 14;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 11;
  return result;
}

__n128 qmi::MutableMessageBase::TlvWrapper<ms::tlv::AMRCodecParameters>::clone(__n128 *a1)
{
  __n128 *v2;
  __n128 result;

  v2 = (__n128 *)operator new();
  v2->n128_u8[8] = a1->n128_u8[8];
  v2->n128_u64[0] = (unint64_t)&off_1E78E16F0;
  result = a1[1];
  v2[1] = result;
  return result;
}

char *qmi::MutableMessageBase::getTLV<ms::tlv::EVSCodecParameters>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 22)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_BYTE *)(v7 + 8) = 22;
    *(_QWORD *)v7 = &off_1E78E1740;
    *(_OWORD *)(v7 + 16) = 0u;
    v6 = v7 + 16;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_QWORD *)(v7 + 47) = 0;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 16;
  }
  return (char *)v6;
}

void qmi::MutableMessageBase::TlvWrapper<ms::tlv::EVSCodecParameters>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::EVSCodecParameters>::getSize()
{
  return 42;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ms::tlv::EVSCodecParameters>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = ms::tlv::writeField(v5, a1 + 16);
  *a2 = result;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = result - v5;
  return result;
}

__n128 qmi::MutableMessageBase::TlvWrapper<ms::tlv::EVSCodecParameters>::clone(uint64_t a1)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_1E78E1740;
  result = *(__n128 *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  *(__n128 *)(v2 + 16) = result;
  *(_OWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 48) = *(_QWORD *)(a1 + 48);
  return result;
}

uint64_t SipRegistrationEventPackage::SipRegistrationEventPackage(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  SipUri *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E78E17B0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 64) = &off_1E78D08F8;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 56) = &off_1E78BFCE8;
  v5 = (SipUri *)(a1 + 56);
  *(_BYTE *)(a1 + 153) = 1;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_QWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 384) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 392) = a1 + 400;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 424) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 432) = a1 + 440;
  *(_BYTE *)(a1 + 152) = 1;
  *(_WORD *)(a1 + 416) = 257;
  *(_WORD *)(a1 + 456) = 257;
  *(_BYTE *)(a1 + 376) = 0;
  v6 = *a2;
  v7 = a2[1];
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v10 = *(std::__shared_weak_count **)(a1 + 40);
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v7;
    if (v10)
      std::__shared_weak_count::__release_weak(v10);
  }
  else
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_DWORD *)(a1 + 48) = 3761;
  SipUri::operator=(v5, a3);
  return a1;
}

void sub_1BF12A740(_Unwind_Exception *a1)
{
  SipEventPackage *v1;
  SipUri *v2;
  std::__shared_weak_count **v3;

  SipUri::~SipUri(v2);
  if (*v3)
    std::__shared_weak_count::__release_weak(*v3);
  SipEventPackage::~SipEventPackage(v1);
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationEventPackage::handleNotification(SipRegistrationEventPackage *this, const SipRequest *a2, SipResponse *a3)
{
  const void *v5;
  char *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  SipRegistrationClient *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const std::string *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::string __p;
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;
  SipRegistrationClient *v22;
  std::__shared_weak_count *v23;

  v5 = (const void *)*((_QWORD *)a2 + 9);
  if (v5)
  else
    v6 = 0;
  v22 = 0;
  v23 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v7)
  {
    v8 = std::__shared_weak_count::lock(v7);
    v23 = v8;
    if (v8)
    {
      v9 = (SipRegistrationClient *)*((_QWORD *)this + 4);
      v22 = v9;
      if (v6)
      {
        if (v9)
        {
          SipRegistrationClient::handleRegistrationNotification(v9, (const SipRegistrationInfo *)(v6 + 32));
          v10 = 1;
          v8 = v23;
          if (!v23)
            return v10;
          goto LABEL_21;
        }
      }
    }
  }
  else
  {
    v8 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v20, "sip.reg");
  std::string::basic_string[abi:ne180100]<0>(v18, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v11 = ImsLogger::debug(ims::_logger, (uint64_t)v20, (uint64_t)v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Received reg notification of type ", 34);
  *(_BYTE *)(v11 + 17) = 0;
  v12 = *((_QWORD *)a2 + 9);
  if (v12)
    v13 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
  else
    v13 = (const std::string *)&SipBody::kGenericContentType;
  LoggableString::LoggableString(&__p, v13);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 40))(v11, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v19 < 0)
    operator delete(v18[0]);
  if (v21 < 0)
    operator delete(v20[0]);
  v10 = 0;
  if (v8)
  {
LABEL_21:
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v10;
}

void sub_1BF12A938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v27 - 48);
  _Unwind_Resume(a1);
}

void SipRegistrationEventPackage::handleSubscriptionFailed(SipRegistrationEventPackage *this, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;

  std::string::basic_string[abi:ne180100]<0>(v15, "sip.reg");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v15, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"SipRegistrationEventPackage::handleSubscriptionFailed", 53);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v14 < 0)
    operator delete(__p[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v7)
  {
    v8 = std::__shared_weak_count::lock(v7);
    v15[1] = v8;
    if (v8)
    {
      v9 = v8;
      v10 = (void *)*((_QWORD *)this + 4);
      v15[0] = v10;
      if (v10)
        SipRegistrationClient::regEventSubscriptionFailed((SipRegistrationClient *)v10, this, a2, a3);
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BF12AAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void SipRegistrationEventPackage::handleSubscriptionTerminated(SipRegistrationEventPackage *this, int a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  SipRegistrationClient *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = (SipRegistrationClient *)*((_QWORD *)this + 4);
      if (v7)
        SipRegistrationClient::regEventSubscriptionTerminated(v7, this, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1BF12ABB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipRegistrationEventPackage::handleSubscriptionSuccess(SipRegistrationEventPackage *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *((_QWORD *)this + 4);
      if (v5)
        SipRegistrationSubject::actionOnObservers(v5 + 152, (uint64_t)&__block_literal_global_189);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF12AC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationEventPackage::desiredExpirationInterval(SipRegistrationEventPackage *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t SipRegistrationEventPackage::acceptedContentTypes(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a2[1];
  if (v3 >= a2[2])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (__int128 *)SipRegistrationInfoBody::kContentType);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, (__int128 *)SipRegistrationInfoBody::kContentType);
    result = v3 + 24;
  }
  a2[1] = result;
  return result;
}

BOOL SipRegistrationEventPackage::subscribe(SipRegistrationEventPackage *this, int a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  SipSubscription *v6;
  _BOOL8 v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  const SipUri *v11;
  uint64_t v12;
  SipDialogManager *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  SipSubscription *v32;
  std::__shared_weak_count *v33;

  if (a2)
    *((_DWORD *)this + 12) = a2;
  v32 = 0;
  v33 = 0;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3
    || (v4 = std::__shared_weak_count::lock(v3), (v33 = v4) == 0)
    || (v5 = v4, v6 = (SipSubscription *)*((_QWORD *)this + 2), (v32 = v6) == 0)
    || !SipSubscription::subscribeWithExpiration(v6, *((_DWORD *)this + 12)))
  {
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v8 || (v9 = std::__shared_weak_count::lock(v8), (v31 = v9) == 0))
    {
      v7 = 0;
      goto LABEL_32;
    }
    v10 = *((_QWORD *)this + 4);
    v30 = v10;
    if (v10)
    {
      v11 = (const SipUri *)SipUserAgent::publicUri(*(SipUserAgent **)(v10 + 360));
      v28 = 0;
      v29 = 0;
      v12 = *(_QWORD *)(v10 + 360);
      v13 = *(SipDialogManager **)(v12 + 176);
      v14 = *(std::__shared_weak_count **)(v12 + 184);
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      SipDialogManager::subscribeToEventPackage(v13, this, v11, &v28);
      if (v14)
      {
        v17 = (unint64_t *)&v14->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v19 = v29;
      v7 = v28 != 0;
      if (v29)
      {
        v20 = (unint64_t *)&v29->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = v31;
      if (!v31)
      {
LABEL_32:
        v5 = v33;
        if (!v33)
          return v7;
        goto LABEL_33;
      }
    }
    else
    {
      v22 = v9;
      v7 = 0;
    }
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    goto LABEL_32;
  }
  v7 = 1;
LABEL_33:
  v25 = (unint64_t *)&v5->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v7;
}

void sub_1BF12AE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void SipRegistrationEventPackage::unsubscribe(SipRegistrationEventPackage *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  SipSubscription *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = (SipSubscription *)*((_QWORD *)this + 2);
      if (v5)
        SipSubscription::unsubscribe(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF12AF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationEventPackage::determineIncomingMessageCategory(SipRegistrationEventPackage *this, const SipRequest *a2)
{
  return 0;
}

void SipRegistrationEventPackage::~SipRegistrationEventPackage(SipRegistrationEventPackage *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E78E17B0;
  SipUri::~SipUri((SipRegistrationEventPackage *)((char *)this + 56));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  SipEventPackage::~SipEventPackage(this);
}

{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E78E17B0;
  SipUri::~SipUri((SipRegistrationEventPackage *)((char *)this + 56));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  SipEventPackage::~SipEventPackage(this);
  JUMPOUT(0x1C3B87100);
}

char *SipRegistrationEventPackage::name(SipRegistrationEventPackage *this)
{
  return &SipRegistrationEventPackage::kPackageName;
}

void IMSiRatClient::IMSiRatClient(IMSiRatClient *this)
{
  std::string *v2;
  NSObject *v3;
  _QWORD v4[5];
  void *__p[2];
  char v6;
  _QWORD block[6];

  *(_QWORD *)this = 0;
  v2 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.WirelessCoexManager");
  XpcConnectionClient::XpcConnectionClient(v2, (__int128 *)__p, MEMORY[0x1E0C80D38]);
  *(_QWORD *)this = v2;
  if (v6 < 0)
  {
    operator delete(__p[0]);
    v2 = *(std::string **)this;
  }
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN13IMSiRatClientC2Ev_block_invoke;
  v4[3] = &__block_descriptor_tmp_43;
  v4[4] = this;
  v3 = v2[1].__r_.__value_.__r.__words[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN19XpcConnectionClient22setInterruptionHandlerEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E78E7580;
  block[4] = v4;
  block[5] = v2;
  dispatch_sync(v3, block);
  IMSiRatClient::_registerIRatClient(this);
}

void sub_1BF12B0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
    operator delete(__p);
  MEMORY[0x1C3B87100](v19, 0x10B2C40F8341EF9);
  _Unwind_Resume(a1);
}

void ___ZN13IMSiRatClientC2Ev_block_invoke(uint64_t a1)
{
  IMSiRatClient::_registerIRatClient(*(IMSiRatClient **)(a1 + 32));
}

void IMSiRatClient::_registerIRatClient(IMSiRatClient *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *__p[2];
  char v9;
  xpc_object_t object[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(object, "ims.irat");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)object, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Register IMS-iRat Client", 24);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(object[0]);
  __p[0] = 0;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<unsigned long long>(&v7, object, (uint64_t)"kMessageId", 1uLL);
  xpc_release(object[0]);
  v3 = v7;
  __p[0] = v7;
  v7 = xpc_null_create();
  xpc_release(v7);
  xpc::dict_creator::dict_creator((xpc::dict_creator *)object);
  xpc::dict_creator::operator()<unsigned long long>(&v7, object, (uint64_t)"kWCMRegisterProcess_ProcessId", 0xAuLL);
  xpc_release(object[0]);
  v4 = v7;
  v7 = xpc_null_create();
  xpc_release(v7);
  v5 = v4;
  if (v4)
    xpc_retain(v4);
  else
    v5 = xpc_null_create();
  xpc::dict::object_proxy::operator=(&v6, v3, "kMessageArgs", &v5);
  xpc_release(v6);
  v6 = 0;
  xpc_release(v5);
  v5 = 0;
  if (*(_QWORD *)this)
    XpcConnectionClient::sendXpcMessage(*(_QWORD *)this, (uint64_t)__p);
  xpc_release(v4);
  xpc_release(__p[0]);
}

void sub_1BF12B30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSiRatClient::~IMSiRatClient(char ***this)
{
  char **v1;

  v1 = *this;
  if (v1)
  {
    XpcConnectionClient::~XpcConnectionClient(v1);
    MEMORY[0x1C3B87100]();
  }
}

xpc_object_t xpc::dict::object_proxy::operator=(xpc_object_t *a1, xpc_object_t xdict, char *key, xpc_object_t *a4)
{
  xpc_object_t result;

  xpc_dictionary_set_value(xdict, key, *a4);
  *a1 = *a4;
  result = xpc_null_create();
  *a4 = result;
  return result;
}

{
  xpc_object_t result;

  xpc_dictionary_set_value(xdict, key, *a4);
  *a1 = *a4;
  result = xpc_null_create();
  *a4 = result;
  return result;
}

void IMSiRatClient::reportCallStatus(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t object;
  xpc_object_t v24;
  xpc_object_t v25;
  void *v26[2];
  char v27;
  xpc_object_t *v28;
  const char *v29;
  char v30;

  std::string::basic_string[abi:ne180100]<0>(&v28, "ims.irat");
  std::string::basic_string[abi:ne180100]<0>(v26, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v28, (uint64_t)v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Call Status reported to iRat Manager: ", 38);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (v27 < 0)
    operator delete(v26[0]);
  if (v30 < 0)
    operator delete(v28);
  std::string::basic_string[abi:ne180100]<0>(&v28, "ims.irat");
  std::string::basic_string[abi:ne180100]<0>(v26, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)&v28, (uint64_t)v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"CallId: ", 8);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)", Media : ", 10);
  *(_BYTE *)(v5 + 17) = 0;
  if (a2[4])
    v6 = "Active";
  else
    v6 = "Inactive";
  if (a2[4])
    v7 = 6;
  else
    v7 = 8;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)v6, v7);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v27 < 0)
    operator delete(v26[0]);
  if (v30 < 0)
    operator delete(v28);
  std::string::basic_string[abi:ne180100]<0>(&v28, "ims.irat");
  std::string::basic_string[abi:ne180100]<0>(v26, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)&v28, (uint64_t)v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Local hold: ", 12);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)", Remote Hold: ", 15);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v27 < 0)
    operator delete(v26[0]);
  if (v30 < 0)
    operator delete(v28);
  std::string::basic_string[abi:ne180100]<0>(&v28, "ims.irat");
  std::string::basic_string[abi:ne180100]<0>(v26, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v9 = ImsLogger::debug(ims::_logger, (uint64_t)&v28, (uint64_t)v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Multiple Calls: ", 16);
  *(_BYTE *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)", Conference: ", 14);
  *(_BYTE *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (v27 < 0)
    operator delete(v26[0]);
  if (v30 < 0)
    operator delete(v28);
  v26[0] = 0;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&v28);
  xpc::dict_creator::operator()<unsigned long long>(&v25, (void **)&v28, (uint64_t)"kMessageId", 0x2BCuLL);
  xpc_release(v28);
  v10 = v25;
  v26[0] = v25;
  v25 = xpc_null_create();
  xpc_release(v25);
  v25 = 0;
  v11 = a2[4];
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&v28);
  xpc::dict_creator::operator()<unsigned long long>(&v24, (void **)&v28, (uint64_t)"WRMIPTelephonyEventReport_CallStatus", v11);
  xpc_release(v28);
  v25 = v24;
  v24 = xpc_null_create();
  xpc_release(v24);
  v22 = xpc_uint64_create(*(unsigned int *)a2);
  if (!v22)
    v22 = xpc_null_create();
  v28 = &v25;
  v29 = "WRMIPTelephonyEventReport_CallId";
  xpc::dict::object_proxy::operator=((uint64_t)&v28, &v22, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v22);
  v22 = 0;
  v20 = xpc_uint64_create(a2[5]);
  if (!v20)
    v20 = xpc_null_create();
  v28 = &v25;
  v29 = "WRMIPTelephonyEventReport_LocalHold";
  xpc::dict::object_proxy::operator=((uint64_t)&v28, &v20, &v21);
  xpc_release(v21);
  v21 = 0;
  xpc_release(v20);
  v20 = 0;
  v18 = xpc_uint64_create(a2[6]);
  if (!v18)
    v18 = xpc_null_create();
  v28 = &v25;
  v29 = "WRMIPTelephonyEventReport_RemoteHold";
  xpc::dict::object_proxy::operator=((uint64_t)&v28, &v18, &v19);
  xpc_release(v19);
  v19 = 0;
  xpc_release(v18);
  v18 = 0;
  v16 = xpc_uint64_create(a2[7]);
  if (!v16)
    v16 = xpc_null_create();
  v28 = &v25;
  v29 = "WRMIPTelephonyEventReport_Conference";
  xpc::dict::object_proxy::operator=((uint64_t)&v28, &v16, &v17);
  xpc_release(v17);
  v17 = 0;
  xpc_release(v16);
  v16 = 0;
  v14 = xpc_uint64_create(a2[8]);
  if (!v14)
    v14 = xpc_null_create();
  v28 = &v25;
  v29 = "WRMIPTelephonyEventReport_MultipleCalls";
  xpc::dict::object_proxy::operator=((uint64_t)&v28, &v14, &v15);
  xpc_release(v15);
  v15 = 0;
  xpc_release(v14);
  v14 = 0;
  v12 = v25;
  if (v25)
    xpc_retain(v25);
  else
    v12 = xpc_null_create();
  xpc::dict::object_proxy::operator=(&v13, v10, "kMessageArgs", &v12);
  xpc_release(v13);
  v13 = 0;
  xpc_release(v12);
  v12 = 0;
  if (*a1)
    XpcConnectionClient::sendXpcMessage(*a1, (uint64_t)v26);
  xpc_release(v25);
  xpc_release(v26[0]);
}

void sub_1BF12BA38(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 33) < 0)
    operator delete(*(void **)(v1 - 56));
  _Unwind_Resume(exception_object);
}

void IMSiRatClient::reportSipTimeout(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t object;
  xpc_object_t v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;
  void **v23;
  const char *v24;
  char v25;

  std::string::basic_string[abi:ne180100]<0>(&v23, "ims.irat");
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v23, (uint64_t)v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"SIP Timeout reported to iRat Manager: ", 38);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (v22 < 0)
    operator delete(v21[0]);
  if (v25 < 0)
    operator delete(v23);
  std::string::basic_string[abi:ne180100]<0>(&v23, "ims.irat");
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)&v23, (uint64_t)v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"isWifi: ", 8);
  *(_BYTE *)(v5 + 17) = 0;
  if (*a2)
    v6 = "true";
  else
    v6 = "false";
  std::string::basic_string[abi:ne180100]<0>(__p, v6);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 32))(v5, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)", simInstance: ", 15);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v20 < 0)
    operator delete(__p[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  if (v25 < 0)
    operator delete(v23);
  std::string::basic_string[abi:ne180100]<0>(&v23, "ims.irat");
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::debug(ims::_logger, (uint64_t)&v23, (uint64_t)v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Context: ", 9);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v22 < 0)
    operator delete(v21[0]);
  if (v25 < 0)
    operator delete(v23);
  v21[0] = 0;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&v23);
  xpc::dict_creator::operator()<unsigned long long>(__p, (void **)&v23, (uint64_t)"kMessageId", 0x2BDuLL);
  xpc_release(v23);
  v8 = __p[0];
  v21[0] = __p[0];
  __p[0] = xpc_null_create();
  xpc_release(__p[0]);
  __p[0] = 0;
  v9 = *a2;
  xpc::dict_creator::dict_creator((xpc::dict_creator *)&v23);
  xpc::dict_creator::operator()<unsigned long long>(&v18, (void **)&v23, (uint64_t)"kRegtdLinkType", v9);
  xpc_release(v23);
  __p[0] = v18;
  v18 = xpc_null_create();
  xpc_release(v18);
  v16 = xpc_BOOL_create(1);
  if (!v16)
    v16 = xpc_null_create();
  v23 = __p;
  v24 = "kSipTmo";
  xpc::dict::object_proxy::operator=((uint64_t)&v23, &v16, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v16);
  v16 = 0;
  v14 = xpc_uint64_create(*((_QWORD *)a2 + 1));
  if (!v14)
    v14 = xpc_null_create();
  v23 = __p;
  v24 = "kSlotID";
  xpc::dict::object_proxy::operator=((uint64_t)&v23, &v14, &v15);
  xpc_release(v15);
  v15 = 0;
  xpc_release(v14);
  v14 = 0;
  v12 = xpc_uint64_create(*((int *)a2 + 4));
  if (!v12)
    v12 = xpc_null_create();
  v23 = __p;
  v24 = "kSipContext";
  xpc::dict::object_proxy::operator=((uint64_t)&v23, &v12, &v13);
  xpc_release(v13);
  v13 = 0;
  xpc_release(v12);
  v12 = 0;
  v10 = __p[0];
  if (__p[0])
    xpc_retain(__p[0]);
  else
    v10 = xpc_null_create();
  xpc::dict::object_proxy::operator=(&v11, v8, "kMessageArgs", &v10);
  xpc_release(v11);
  v11 = 0;
  xpc_release(v10);
  v10 = 0;
  if (*a1)
    XpcConnectionClient::sendXpcMessage(*a1, (uint64_t)v21);
  xpc_release(__p[0]);
  xpc_release(v21[0]);
}

void sub_1BF12BF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

void xpc::dict_creator::operator()<unsigned long long>(void **a1, void **a2, uint64_t a3, uint64_t value)
{
  xpc_object_t v7;
  xpc_object_t v8;
  void *v9;
  _QWORD v10[2];
  xpc_object_t v11;
  xpc_object_t object;

  v7 = xpc_uint64_create(value);
  v8 = v7;
  if (v7)
  {
    v11 = v7;
LABEL_4:
    xpc_retain(v8);
    goto LABEL_5;
  }
  v8 = xpc_null_create();
  v11 = v8;
  if (v8)
    goto LABEL_4;
  v8 = 0;
  v11 = xpc_null_create();
LABEL_5:
  v10[0] = a2;
  v10[1] = a3;
  xpc::dict::object_proxy::operator=((uint64_t)v10, &v11, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v11);
  v11 = 0;
  v9 = *a2;
  *a1 = *a2;
  if (v9)
    xpc_retain(v9);
  else
    *a1 = xpc_null_create();
  xpc_release(v8);
}

xpc::dict_creator *xpc::dict_creator::dict_creator(xpc::dict_creator *this)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;

  v2 = xpc_dictionary_create(0, 0, 0);
  if (v2 || (v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B87B98](v2) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v2);
      v3 = v2;
    }
    else
    {
      v3 = xpc_null_create();
    }
  }
  else
  {
    v3 = xpc_null_create();
    v2 = 0;
  }
  xpc_release(v2);
  *(_QWORD *)this = v3;
  v4 = xpc_null_create();
  xpc_release(v4);
  return this;
}

uint64_t SipTlsTransportGroup::SipTlsTransportGroup(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::string __p;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  *(_QWORD *)a1 = &off_1E78B7B60;
  v3 = (std::__shared_weak_count *)a2[1];
  v16 = *a2;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  SipTransportGroup::SipTransportGroup((uint64_t *)a1, (uint64_t *)off_1E78E1AC0, &v16);
  v6 = v17;
  if (v17)
  {
    v7 = (unint64_t *)&v17->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)a1 = &off_1E78E1868;
  *(_QWORD *)(a1 + 72) = &unk_1E78E1A00;
  *(_QWORD *)(a1 + 208) = &unk_1E78E1A60;
  v14 = 0;
  v15 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "");
  SipTypedTerminationLock<SipTcpConnection>::SipTypedTerminationLock((SipTerminationLockBase *)(a1 + 216), &v14, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_BYTE *)(a1 + 264) = 0;
  return a1;
}

void sub_1BF12C26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  SipTransportGroup *v16;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  SipTransportGroup::~SipTransportGroup(v16, (uint64_t *)off_1E78E1AC0);
  _Unwind_Resume(a1);
}

void SipTlsTransportGroup::~SipTlsTransportGroup(SipTlsTransportGroup *this)
{
  *(_QWORD *)this = &off_1E78E1868;
  *((_QWORD *)this + 9) = &unk_1E78E1A00;
  *((_QWORD *)this + 26) = &unk_1E78E1A60;
  SipTlsTransportGroup::close(this);
  SipTypedTerminationLock<SipTcpConnection>::~SipTypedTerminationLock((uint64_t)this + 216);
  SipTransportGroup::~SipTransportGroup(this, (uint64_t *)off_1E78E1AC0);
}

{
  SipTlsTransportGroup::~SipTlsTransportGroup(this);
  JUMPOUT(0x1C3B87100);
}

void SipTlsTransportGroup::close(SipTlsTransportGroup *this)
{
  _QWORD *v2;
  uint64_t v3;
  SipTcpConnection *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21[3];
  std::__shared_weak_count *v22;
  SipTcpConnection *v23;
  std::__shared_weak_count *v24;

  if (!*((_BYTE *)this + 264))
    return;
  v2 = (_QWORD *)((char *)this + 72);
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
  (*(void (**)(_QWORD *, uint64_t))(*v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"closing TLS transport", 21);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  v4 = (SipTcpConnection *)v2[22];
  v5 = (std::__shared_weak_count *)v2[23];
  if (!v5)
  {
    if (!v4)
      goto LABEL_20;
    v23 = (SipTcpConnection *)v2[22];
    v24 = 0;
LABEL_15:
    v21[0] = 0;
    v21[1] = 0;
    SipTcpConnection::setManager(v4, v21);
    v12 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    goto LABEL_20;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  do
    v8 = __ldaxr(v6);
  while (__stlxr(v8 - 1, v6));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v4)
      goto LABEL_20;
    goto LABEL_12;
  }
  if (v4)
  {
LABEL_12:
    v4 = (SipTcpConnection *)*((_QWORD *)this + 31);
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    v23 = v4;
    v24 = v9;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    goto LABEL_15;
  }
LABEL_20:
  v21[2] = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  SipTypedTerminationLock<SipTcpConnection>::set((uint64_t)(v2 + 18), (uint64_t *)&v23, (std::string *)((char *)this + 224));
  v15 = v24;
  if (v24)
  {
    v16 = (unint64_t *)&v24->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *((_BYTE *)this + 264) = 0;
}

void sub_1BF12C4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipTlsTransportGroup::~SipTlsTransportGroup(SipTlsTransportGroup *this)
{
  SipTlsTransportGroup::~SipTlsTransportGroup((SipTlsTransportGroup *)((char *)this - 72));
}

{
  SipTlsTransportGroup::~SipTlsTransportGroup((SipTlsTransportGroup *)((char *)this - 208));
}

{
  SipTlsTransportGroup::~SipTlsTransportGroup((SipTlsTransportGroup *)((char *)this - 72));
  JUMPOUT(0x1C3B87100);
}

{
  SipTlsTransportGroup::~SipTlsTransportGroup((SipTlsTransportGroup *)((char *)this - 208));
  JUMPOUT(0x1C3B87100);
}

void SipTlsTransportGroup::loggableName(SipTlsTransportGroup *this@<X0>, std::string *a2@<X8>)
{
  __int128 v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *size;
  unint64_t *v8;
  unint64_t v9;
  std::string __p;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v11, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v11 + 1), (uint64_t)"TlsTransport [", 14);
  BYTE1(v12) = 0;
  (*(void (**)(std::string *__return_ptr, SipTlsTransportGroup *))(*(_QWORD *)this + 184))(&__p, this);
  v4 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v5 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v4 + 1) + 16))(*((_QWORD *)&v4 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v4 + 1));
      if ((_QWORD)v4)
        goto LABEL_6;
LABEL_12:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v11 + 1), (uint64_t)"Uninitialized", 13);
      BYTE1(v12) = 0;
      goto LABEL_13;
    }
  }
  if (!(_QWORD)v4)
    goto LABEL_12;
LABEL_6:
  (*(void (**)(std::string *__return_ptr, SipTlsTransportGroup *))(*(_QWORD *)this + 184))(&__p, this);
  (*(void (**)(std::string::size_type, __int128 *))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0], &v11);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v8 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
LABEL_13:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v11 + 1), (uint64_t)"]", 1);
  BYTE1(v12) = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v12 + 1) + 8, &__p);
  LoggableString::LoggableString(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v11 = &off_1E78D7A10;
  if ((_BYTE)v12)
  {
    if (*((_QWORD *)&v11 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v11 + 1) + 8))(*((_QWORD *)&v11 + 1));
  }
}

void sub_1BF12C750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void (**a16)(ImsOutStream *__hidden this), uint64_t a17, char a18)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  a16 = &off_1E78D7A10;
  if (a18)
  {
    if (a17)
      (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  }
  _Unwind_Resume(a1);
}

void SipTlsTransportGroup::initialize(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void *v10;
  void **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::string::size_type v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::string __p;
  uint64_t v58;
  std::__shared_weak_count *v59;
  void *lpsrc[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;

  v71 = 0;
  v72 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(lpsrc, (_QWORD *)(a1 + 176));
  if (lpsrc[0]
  {
    v71 = (uint64_t)v10;
    v72 = (std::__shared_weak_count *)lpsrc[1];
    v11 = lpsrc;
  }
  else
  {
    v11 = (void **)&v71;
  }
  *v11 = 0;
  v11[1] = 0;
  v12 = (std::__shared_weak_count *)lpsrc[1];
  if (lpsrc[1])
  {
    v13 = (unint64_t *)((char *)lpsrc[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (!v71)
  {
    v37 = *(_QWORD *)(a1 + 72);
    v36 = a1 + 72;
    v38 = (*(uint64_t (**)(uint64_t))(v37 + 56))(v36);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"unable to initialize outgoing connection. Connection manager is null", 68);
    *(_BYTE *)(v38 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v38 + 17) = 0;
    *(_QWORD *)(a5 + 56) = 0;
    *(_QWORD *)(a5 + 64) = 0;
    *(_QWORD *)a5 = &off_1E78B7238;
    *(_QWORD *)(a5 + 8) = &_bambiDomain;
    *(_DWORD *)(a5 + 16) = 0x40000000;
    *(_QWORD *)(a5 + 40) = 0;
    *(_QWORD *)(a5 + 48) = 0;
    *(_QWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = 0;
    goto LABEL_58;
  }
  v69 = 0;
  v70 = 0;
  v67 = v71;
  v68 = v72;
  if (v72)
  {
    p_shared_owners = (unint64_t *)&v72->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v65 = 0;
  v66 = 0;
  SipTcpConnection::create(&v67, &v65, 1, &v69);
  v17 = v66;
  if (v66)
  {
    v18 = (unint64_t *)&v66->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v68;
  if (v68)
  {
    v21 = (unint64_t *)&v68->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v64 = 0;
  v62 = 0u;
  v63 = 0u;
  *(_OWORD *)lpsrc = 0u;
  v61 = 0u;
  SipTcpConnection::initializeOutgoing(v69, a2, a3, a4, 0, 0, (ImsResult *)lpsrc);
  if (!(*(unsigned int (**)(void *, _QWORD))(*(_QWORD *)lpsrc[1] + 24))(lpsrc[1], v61))
  {
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(a1 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 72) + 16))(a1 + 72, v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)"Created new TLS connection ", 27);
    *(_BYTE *)(v39 + 17) = 0;
    v40 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v69 + 104))(v69, v39);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v40[17] = 0;
    *(_BYTE *)(a1 + 264) = 1;
    v58 = v69;
    v59 = v70;
    if (v70)
    {
      v41 = (unint64_t *)&v70->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    LoggableString::LoggableString((LoggableString *)&__p, "TlsTransport");
    SipTypedTerminationLock<SipTcpConnection>::set(a1 + 216, &v58, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v43 = v59;
    if (v59)
    {
      v44 = (unint64_t *)&v59->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 56) = 0u;
    *(_QWORD *)a5 = &off_1E78B7238;
    *(_QWORD *)(a5 + 8) = &_bambiDomain;
    *(_DWORD *)(a5 + 16) = 0;
    goto LABEL_53;
  }
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v23 = *(std::__shared_weak_count **)(a1 + 200);
  if (!v23)
    goto LABEL_35;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v23);
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_35;
  v24 = *(_QWORD *)(a1 + 192);
  __p.__r_.__value_.__r.__words[0] = v24;
  if (!v24)
    goto LABEL_35;
  v25 = *(std::__shared_weak_count **)(v24 + 16);
  if (v25)
  {
    v26 = std::__shared_weak_count::lock(v25);
    if (v26)
    {
      v27 = v26;
      v28 = *(unsigned __int8 *)(*(_QWORD *)(v24 + 8) + 2657);
      v29 = (unint64_t *)&v26->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v27);
      }
      if (!v28)
        goto LABEL_35;
LABEL_65:
      v53 = *(_QWORD *)(a1 + 72);
      v52 = a1 + 72;
      v54 = (*(uint64_t (**)(uint64_t))(v53 + 56))(v52);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 16))(v52, v54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)"unable to initialize outgoing connection: ", 42);
      *(_BYTE *)(v54 + 17) = 0;
      (*((void (**)(void **, uint64_t))lpsrc[0] + 2))(lpsrc, v54);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v54 + 17) = 0;
      ImsResult::ImsResult(a5, (uint64_t)lpsrc);
      if (__p.__r_.__value_.__l.__size_)
      {
        v55 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__size_ + 16))(__p.__r_.__value_.__l.__size_);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
      }
      goto LABEL_53;
    }
  }
  if (MEMORY[0xA61])
    goto LABEL_65;
LABEL_35:
  if (__p.__r_.__value_.__l.__size_)
  {
    v31 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__size_ + 16))(__p.__r_.__value_.__l.__size_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
  }
  v34 = *(_QWORD *)(a1 + 72);
  v33 = a1 + 72;
  v35 = (*(uint64_t (**)(uint64_t))(v34 + 56))(v33);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"unable to initialize outgoing connection", 40);
  *(_BYTE *)(v35 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v35 + 17) = 0;
  *(_QWORD *)(a5 + 56) = 0;
  *(_QWORD *)(a5 + 64) = 0;
  *(_QWORD *)a5 = &off_1E78B7238;
  *(_QWORD *)(a5 + 8) = &_bambiDomain;
  *(_DWORD *)(a5 + 16) = 0x40000000;
  *(_QWORD *)(a5 + 40) = 0;
  *(_QWORD *)(a5 + 48) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 32) = 0;
LABEL_53:
  ImsResult::~ImsResult((ImsResult *)lpsrc);
  v46 = v70;
  if (v70)
  {
    v47 = (unint64_t *)&v70->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
LABEL_58:
  v49 = v72;
  if (v72)
  {
    v50 = (unint64_t *)&v72->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
}

void sub_1BF12CDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  ImsResult::~ImsResult((ImsResult *)&a18);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v28 - 96);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v28 - 80);
  _Unwind_Resume(a1);
}

void SipTypedTerminationLock<SipTcpConnection>::set(uint64_t a1, uint64_t *a2, std::string *__str)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  v3 = (_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *a2;
  if (*a2 != v4)
  {
    if (v4)
    {
      v9 = *(std::__shared_weak_count **)(a1 + 40);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)(a1 + 32));
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      else
      {
        std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)(a1 + 32));
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a1 + 8);
      if (v9)
      {
        v13 = (unint64_t *)&v9->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      if (v9)
      {
        v15 = (unint64_t *)&v9->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v5 = *a2;
    }
    if (v5)
    {
      v17 = a1 + 8;
      std::string::operator=((std::string *)(a1 + 8), __str);
      std::shared_ptr<IpAddress>::operator=[abi:ne180100](v3, a2);
      v18 = *(_QWORD *)(a1 + 32);
      v19 = *(std::__shared_weak_count **)(a1 + 40);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      if (v18)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 32))(v18, v17);
      if (v19)
      {
        v22 = (unint64_t *)&v19->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
  }
}

void sub_1BF12CFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipTlsTransportGroup::sendData(unsigned __int8 *a1@<X1>, uint64_t a2@<X0>, ImsResult *a3@<X8>)
{
  SipTcpConnection *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  const ImsResult *v15;
  void (**v16)(ImsResult *__hidden);
  std::__shared_weak_count *v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v4 = *(SipTcpConnection **)(a2 + 248);
  v5 = *(std::__shared_weak_count **)(a2 + 256);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (v9)
    {
      if (!v4)
        goto LABEL_19;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v5->__on_zero_shared)(v5, a1);
    std::__shared_weak_count::__release_weak(v5);
    if (v4)
    {
LABEL_11:
      v4 = *(SipTcpConnection **)(a2 + 248);
      v10 = *(std::__shared_weak_count **)(a2 + 256);
      v16 = (void (**)(ImsResult *__hidden))v4;
      v17 = v10;
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      goto LABEL_14;
    }
LABEL_19:
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v16 = &off_1E78B7238;
    v17 = (std::__shared_weak_count *)&_bambiDomain;
    v18 = 1073741827;
    v15 = (const ImsResult *)ImsResult::operator<<<char [41]>((uint64_t)&v16, "send() called on uninitialized transport");
    ImsResult::ImsResult(a3, v15);
    ImsResult::~ImsResult((ImsResult *)&v16);
    return;
  }
  if (!v4)
    goto LABEL_19;
  v16 = *(void (***)(ImsResult *__hidden))(a2 + 248);
  v17 = 0;
LABEL_14:
  SipTcpConnection::sendData(v4, (uint64_t)a3);
  if (v17)
  {
    v13 = &v17->__shared_owners_;
    do
      v14 = __ldaxr((unint64_t *)v13);
    while (__stlxr(v14 - 1, (unint64_t *)v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1BF12D184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SipTlsTransportGroup::localClientAddress(SipTlsTransportGroup *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;

  v4 = *((_QWORD *)this + 31);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (!v3)
  {
    if (v4)
    {
      v9 = 0;
      v15 = 0;
      goto LABEL_14;
    }
    goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    if (!v4)
      goto LABEL_17;
    goto LABEL_11;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  if (!v4)
  {
LABEL_17:
    *a2 = 0;
    a2[1] = 0;
    return;
  }
LABEL_11:
  v4 = *((_QWORD *)this + 31);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  v15 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
LABEL_14:
  v12 = *(_QWORD *)(v4 + 272);
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 136))(v12);
    v9 = v15;
    if (!v15)
      return;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    if (!v9)
      return;
  }
  v13 = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_1BF12D2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipTlsTransportGroup::localServerAddress(SipTlsTransportGroup *this)
{
  return (*(uint64_t (**)(SipTlsTransportGroup *))(*(_QWORD *)this + 184))(this);
}

uint64_t SipTlsTransportGroup::remoteServerUri(SipTlsTransportGroup *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *((_QWORD *)this + 24);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 120))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

void sub_1BF12D38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipTlsTransportGroup::processMessageFromTransport(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  std::__shared_weak_count *v7;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v27 = 0;
  v28 = 0;
  v7 = (std::__shared_weak_count *)a1[25];
  if (v7)
  {
    v28 = std::__shared_weak_count::lock(v7);
    if (v28)
    {
      v13 = a1[24];
      v27 = v13;
      if (v13)
      {
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v25, a1 + 22);
        v23 = 0;
        v24 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v13 + 128))(v13, a2, a3, a4, a5, a6, &v25, &v23);
        v14 = v24;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v17 = v26;
        if (v26)
        {
          v18 = (unint64_t *)&v26->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
    }
  }
  v20 = v28;
  if (v28)
  {
    v21 = (unint64_t *)&v28->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1BF12D4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void SipTlsTransportGroup::printTransportInfo(SipTlsTransportGroup *this, ImsOutStream *a2)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *__p;
  std::__shared_weak_count *v16;
  char v17;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 24))(&__p);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, &__p);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (v17 < 0)
    operator delete(__p);
  v4 = (void *)*((_QWORD *)this + 31);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (v8)
    {
      if (!v4)
        return;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!v4)
        return;
    }
    v4 = (void *)*((_QWORD *)this + 31);
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    __p = v4;
    v16 = v9;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    if (!v4)
      return;
    __p = (void *)*((_QWORD *)this + 31);
    v16 = 0;
  }
  SipTcpConnection::printDebugInfo((SipTcpConnection *)v4, a2);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1BF12D668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void SipTlsTransportGroup::addTransportSpecificHeaders(SipTlsTransportGroup *this, SipMessage *a2)
{
  SipTransportGroup::addAccessNetworkInfoHeader(this, a2);
  SipTransportGroup::addRoutableLocalAddressHeader(this, a2);
}

std::string *SipTlsTransportGroup::getTransportName(uint64_t a1, uint64_t a2, std::string *a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + 72;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(a1 + 72);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"forcing TLS transport", 21);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  return std::string::operator=(a3, &SipTransport::kTransportTLS);
}

void SipTlsTransportGroup::triggerTcpErrors(SipTlsTransportGroup *this, uint64_t **a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void (**v13)(ImsResult *__hidden);
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  void (**v20)(ImsResult *__hidden);
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  void (**v26)(ImsResult *__hidden);
  uint64_t *v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v5 = *((_QWORD *)this + 31);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
LABEL_6:
    if (v5)
      goto LABEL_7;
LABEL_10:
    v10 = *((_QWORD *)this + 9);
    v9 = (char *)this + 72;
    v11 = (*(uint64_t (**)(char *))(v10 + 56))(v9);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v9 + 16))(v9, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Connection not initialized", 26);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    return;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (!v5)
    goto LABEL_10;
LABEL_7:
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v26 = &off_1E78B7238;
  v27 = &_bambiDomain;
  v28 = 1073741843;
  if (a2[1] != &_bambiDomain)
  {
    ImsResult::~ImsResult((ImsResult *)&v26);
    goto LABEL_20;
  }
  v12 = *((_DWORD *)a2 + 4);
  ImsResult::~ImsResult((ImsResult *)&v26);
  if (v12 != 1073741843)
  {
LABEL_20:
    v20 = (void (**)(ImsResult *__hidden))*((_QWORD *)this + 31);
    v21 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    v26 = v20;
    v27 = (uint64_t *)v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    (*((void (**)(void (**)(ImsResult *__hidden), uint64_t **))*v20 + 18))(v20, a2);
    if (v21)
    {
      v24 = (unint64_t *)&v21->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        v19 = v21;
        goto LABEL_28;
      }
    }
    return;
  }
  v13 = (void (**)(ImsResult *__hidden))*((_QWORD *)this + 31);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  v26 = v13;
  v27 = (uint64_t *)v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  (*((void (**)(_QWORD))*v13 + 20))(v13);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      v19 = v14;
LABEL_28:
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1BF12D94C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t SipTlsTransportGroup::addUser(SipTlsTransportGroup *this, SipConnectionUser *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  int v13;
  unint64_t *v14;
  unint64_t v15;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v4 = *((_QWORD *)this + 31);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (!v5)
  {
    if (v4)
    {
      v20 = 0;
      goto LABEL_14;
    }
    goto LABEL_20;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    if (!v4)
      goto LABEL_20;
    goto LABEL_11;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v4)
  {
LABEL_20:
    v18 = *((_QWORD *)this + 9);
    v17 = (char *)this + 72;
    v19 = (*(uint64_t (**)(char *))(v18 + 56))(v17);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v17 + 16))(v17, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"Connection not initialized", 26);
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v19 + 17) = 0;
    return 0;
  }
LABEL_11:
  v4 = *((_QWORD *)this + 31);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  v20 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
LABEL_14:
  v12 = (*(uint64_t (**)(uint64_t, SipConnectionUser *))(*(_QWORD *)v4 + 80))(v4, a2);
  v13 = v12;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      if (!v13)
        return 0;
      return SipTransportGroup::addUser(this, a2);
    }
  }
  if (v12)
    return SipTransportGroup::addUser(this, a2);
  return 0;
}

void sub_1BF12DAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipTlsTransportGroup::removeUser(SipTlsTransportGroup *this, SipConnectionUser *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *((_QWORD *)this + 31);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (v8)
    {
      if (!v4)
        goto LABEL_20;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v4)
    {
LABEL_11:
      v4 = *((_QWORD *)this + 31);
      v9 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
      v17 = v9;
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      goto LABEL_14;
    }
LABEL_20:
    v15 = *((_QWORD *)this + 9);
    v14 = (char *)this + 72;
    v16 = (*(uint64_t (**)(char *))(v15 + 56))(v14);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v14 + 16))(v14, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"Connection not initialized", 26);
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    return;
  }
  if (!v4)
    goto LABEL_20;
  v17 = 0;
LABEL_14:
  (*(void (**)(uint64_t, SipConnectionUser *))(*(_QWORD *)v4 + 88))(v4, a2);
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  SipTransportGroup::removeUser(this, a2);
}

void sub_1BF12DC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipTlsTransportGroup::transportLayerRequestedClose(SipTlsTransportGroup *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::string __p;
  __int128 v11;
  __int128 v12;
  _OWORD v13[3];

  memset(v13, 0, sizeof(v13));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v11, (_QWORD *)this + 22);
  v12 = v11;
  v11 = 0uLL;
  LoggableString::LoggableString((LoggableString *)&__p, "transportLayerRequestedClose");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v13, (uint64_t *)&v12, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Closing SipTlsTransportGroup when SipTranportLayer is going away", 64);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  SipTlsTransportGroup::close(this);
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v13);
}

void sub_1BF12DDE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t SipTlsTransportGroup::sendMessageFromConnection(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
}

uint64_t `non-virtual thunk to'SipTlsTransportGroup::sendMessageFromConnection(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 208) + 120))(a1 - 208);
}

void SipTlsTransportGroup::processIncomingMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v7 = (std::__shared_weak_count *)a7[1];
  v13 = *a7;
  v14 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t *))(*(_QWORD *)a1 + 256))(a1, a2, a3, a4, a5, a6, 0, &v13);
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1BF12DED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipTlsTransportGroup::processIncomingMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  SipTlsTransportGroup::processIncomingMessage(a1 - 208, a2, a3, a4, a5, a6, a7);
}

void SipTlsTransportGroup::removeConnection(SipTlsTransportGroup *this, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  int v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v4 = *((_QWORD *)this + 31);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (!v3)
  {
    if (*a2 != v4)
      return;
LABEL_11:
    SipTlsTransportGroup::close(this);
    (*(void (**)(uint64_t *__return_ptr, SipTlsTransportGroup *))(*(_QWORD *)this + 336))(&v27, this);
    v29 = 0;
    v30 = 0;
    if (!v28)
      goto LABEL_34;
    v30 = std::__shared_weak_count::lock(v28);
    if (v30)
    {
      v9 = v27;
      v29 = v27;
    }
    else
    {
      v9 = 0;
    }
    if (v28)
      std::__shared_weak_count::__release_weak(v28);
    if (!v9)
      goto LABEL_34;
    v27 = 0;
    v28 = 0;
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
    if (!v10)
      goto LABEL_28;
    v28 = std::__shared_weak_count::lock(v10);
    if (!v28)
      goto LABEL_28;
    v11 = *((_QWORD *)this + 24);
    v27 = v11;
    if (!v11)
      goto LABEL_28;
    v12 = *(std::__shared_weak_count **)(v11 + 16);
    if (v12 && (v13 = std::__shared_weak_count::lock(v12)) != 0)
    {
      v14 = v13;
      v15 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 8) + 2657);
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v14);
      }
      if (!v15)
        goto LABEL_28;
    }
    else if (!MEMORY[0xA61])
    {
LABEL_28:
      v18 = v28;
      if (v28)
      {
        v19 = &v28->__shared_owners_;
        do
          v20 = __ldaxr((unint64_t *)v19);
        while (__stlxr(v20 - 1, (unint64_t *)v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v29 + 192))(v29, 15, 0);
LABEL_34:
      v21 = v30;
      if (v30)
      {
        v22 = (unint64_t *)&v30->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      return;
    }
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v29 + 192))(v29, 23, 0);
    v24 = v28;
    if (v28)
    {
      v25 = &v28->__shared_owners_;
      do
        v26 = __ldaxr((unint64_t *)v25);
      while (__stlxr(v26 - 1, (unint64_t *)v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    goto LABEL_34;
  }
  v5 = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  v7 = *a2;
  do
    v8 = __ldaxr(v5);
  while (__stlxr(v8 - 1, v5));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  if (v7 == v4)
    goto LABEL_11;
}

void sub_1BF12E12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipTlsTransportGroup::removeConnection(uint64_t a1, uint64_t *a2)
{
  SipTlsTransportGroup::removeConnection((SipTlsTransportGroup *)(a1 - 208), a2);
}

uint64_t SipTlsTransportGroup::handleErrorFromConnection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, a3);
}

uint64_t `non-virtual thunk to'SipTlsTransportGroup::handleErrorFromConnection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 208) + 168))(a1 - 208, a3);
}

uint64_t SipTlsTransportGroup::messageEncoding(SipTlsTransportGroup *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *((_QWORD *)this + 24);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 112))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

void sub_1BF12E214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'SipTlsTransportGroup::messageEncoding(SipTlsTransportGroup *this)
{
  return SipTlsTransportGroup::messageEncoding((SipTlsTransportGroup *)((char *)this - 208));
}

void SipTlsTransportGroup::stackId(SipTlsTransportGroup *this@<X0>, std::string *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 *v12;
  __int128 v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_8;
  }
  v5 = std::__shared_weak_count::lock(v4);
  v16 = v5;
  if (!v5 || (v6 = *((_QWORD *)this + 24)) == 0)
  {
LABEL_8:
    std::string::basic_string[abi:ne180100]<0>(a2, "");
    if (!v5)
      return;
    goto LABEL_9;
  }
  v7 = *(std::__shared_weak_count **)(v6 + 16);
  if (v7)
  {
    v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      v9 = *(_QWORD *)(v6 + 8);
      goto LABEL_16;
    }
  }
  else
  {
    v8 = 0;
  }
  v9 = 0;
LABEL_16:
  if (*(char *)(v9 + 4159) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v9 + 4136), *(_QWORD *)(v9 + 4144));
  }
  else
  {
    v12 = (__int128 *)(v9 + 4136);
    v13 = *v12;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v13;
  }
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v5 = v16;
  if (v16)
  {
LABEL_9:
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BF12E388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipTlsTransportGroup::stackId(SipTlsTransportGroup *this@<X0>, std::string *a2@<X8>)
{
  SipTlsTransportGroup::stackId((SipTlsTransportGroup *)((char *)this - 208), a2);
}

void SipTlsTransportGroup::handleSystemWake(SipTlsTransportGroup *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[9];
  uint64_t v29;
  std::__shared_weak_count *v30;

  v3 = *((_QWORD *)this + 31);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if (v3)
        goto LABEL_7;
LABEL_32:
      v25 = *((_QWORD *)this + 9);
      v24 = (char *)this + 72;
      v26 = (*(uint64_t (**)(char *))(v25 + 64))(v24);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v24 + 16))(v24, v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"Can not send ping on uninitialized transport", 44);
      *(_BYTE *)(v26 + 17) = 0;
      return;
    }
  }
  if (!v3)
    goto LABEL_32;
LABEL_7:
  v29 = 0;
  v30 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v7)
  {
    v30 = std::__shared_weak_count::lock(v7);
    if (v30)
    {
      v8 = *((_QWORD *)this + 24);
      v29 = v8;
      if (v8)
      {
        v9 = *(std::__shared_weak_count **)(v8 + 16);
        if (v9)
        {
          v10 = std::__shared_weak_count::lock(v9);
          if (v10)
          {
            v11 = v10;
            v12 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + 2657);
            v13 = (unint64_t *)&v10->__shared_owners_;
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v11);
            }
            if (!v12)
              goto LABEL_17;
LABEL_37:
            v27 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
            (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v27);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"Skip AP wake ping for lazuli", 28);
            *(_BYTE *)(v27 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v15 = 0;
            *(_BYTE *)(v27 + 17) = 0;
            goto LABEL_18;
          }
        }
        if (MEMORY[0xA61])
          goto LABEL_37;
      }
    }
  }
LABEL_17:
  v15 = 1;
  if (!v30)
    goto LABEL_22;
LABEL_18:
  v16 = &v30->__shared_owners_;
  do
    v17 = __ldaxr((unint64_t *)v16);
  while (__stlxr(v17 - 1, (unint64_t *)v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    if (!v15)
      return;
  }
  else
  {
LABEL_22:
    if (!v15)
      return;
  }
  v18 = *((_QWORD *)this + 31);
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  v29 = v18;
  v30 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v18 + 64))(v28, v18, 0);
  ImsResult::~ImsResult((ImsResult *)v28);
  if (v19)
  {
    v22 = (unint64_t *)&v19->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1BF12E614(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void SipTlsTransportGroup::updateServiceClass(SipTlsTransportGroup *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  _QWORD v25[2];
  uint64_t v26;
  std::__shared_weak_count *v27;

  v26 = 0;
  v27 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v2 && (v27 = std::__shared_weak_count::lock(v2)) != 0 && (v3 = *((_QWORD *)this + 24), (v26 = v3) != 0))
  {
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v3 + 200))(v25);
    v4 = LODWORD(v25[0]);
  }
  else
  {
    v4 = 104;
  }
  v6 = *((_QWORD *)this + 31);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (v9)
    {
      if (!v6)
        goto LABEL_32;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!v6)
        goto LABEL_32;
    }
    v6 = *((_QWORD *)this + 31);
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    v24 = v10;
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
  }
  else
  {
    if (!v6)
      goto LABEL_32;
    v24 = 0;
  }
  v13 = *(_QWORD *)(v6 + 272);
  v14 = *(std::__shared_weak_count **)(v6 + 280);
  v25[0] = v13;
  v25[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 160))(v13, v4);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v24)
  {
    v19 = (unint64_t *)&v24->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
LABEL_32:
  v21 = v27;
  if (v27)
  {
    v22 = (unint64_t *)&v27->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1BF12E7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SipTlsTransportGroup::updateCrlfKeepAliveInterval(SipTlsTransportGroup *this, int a2, int a3)
{
  SipTcpConnection *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = (SipTcpConnection *)*((_QWORD *)this + 31);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v4)
    SipTcpConnection::updateCrlfKeepAliveInterval(v4, a2, a3);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BF12E8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipTlsTransportGroup::updateCrlfKeepAliveNetwork(SipTlsTransportGroup *this)
{
  std::__shared_weak_count *v1;
  SipTcpConnection *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = (SipTcpConnection *)*((_QWORD *)this + 31);
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  if (v2)
  {
    SipTcpConnection::stopCrlfKeepAlive(v2);
    SipTcpConnection::startCrlfKeepAlive((std::__shared_weak_count **)v2);
  }
  if (v1)
  {
    v5 = (unint64_t *)&v1->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1BF12E95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipTlsTransportGroup::handleKeepAliveWake(SipTlsTransportGroup *this)
{
  SipTcpConnection *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (SipTcpConnection *)*((_QWORD *)this + 31);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (v2)
    SipTcpConnection::handleKeepAliveWake(v2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF12EA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipTlsTransportGroup::sendMessage(_QWORD *a1@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  ImsResult *v17;
  __int128 v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v7 = a1[31];
  v6 = (std::__shared_weak_count *)a1[32];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
LABEL_15:
      v20 = 0u;
      v21 = 0u;
      v22 = 0u;
      *(_QWORD *)&v18 = &off_1E78B7238;
      *((_QWORD *)&v18 + 1) = &_bambiDomain;
      v19 = 1073741827;
      v17 = (ImsResult *)ImsResult::operator<<<char [56]>((uint64_t)&v18, "SipTlsTransportGroup: sendMessage: no active connection");
      ImsLogContainer::logResult((ImsLogContainer *)(a1 + 9), v17);
      ImsResult::ImsResult((ImsResult *)a3, v17);
      ImsResult::~ImsResult((ImsResult *)&v18);
      return;
    }
  }
  if (!v7)
    goto LABEL_15;
LABEL_7:
  *(_QWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  SipTransportGroup::sendMessage(a1, a2, a3);
  if (a2)
  {
    if (*a2)
    {
      v12 = a1[9];
      v11 = a1 + 9;
      v13 = (*(uint64_t (**)(_QWORD *))(v12 + 64))(v11);
      (*(void (**)(_QWORD *, uint64_t))(*v11 + 16))(v11, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"sendMessage: NULLing out connection", 35);
      *(_BYTE *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v13 + 17) = 0;
      v18 = 0uLL;
      std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)a2, &v18);
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
      if (*((_QWORD *)&v18 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
  }
}

void sub_1BF12EBDC(_Unwind_Exception *a1)
{
  ImsResult *v1;

  ImsResult::~ImsResult(v1);
  _Unwind_Resume(a1);
}

uint64_t SipTlsTransportGroup::localPort(SipTlsTransportGroup *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _BOOL4 v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  v2 = *((_QWORD *)this + 31);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  v34 = v2;
  v35 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (v2)
  {
    v6 = *((_QWORD *)this + 31);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    v31 = v7;
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = *(_QWORD *)(v6 + 272);
    if (v10)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v10 + 136))(&v32);
      v11 = v33;
      v12 = v32 != 0;
      if (v33)
      {
        v13 = (unint64_t *)&v33->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    else
    {
      v12 = 0;
      v32 = 0;
      v33 = 0;
    }
    if (v31)
    {
      v15 = (unint64_t *)&v31->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v3 = v35;
    if (!v35)
      goto LABEL_26;
  }
  else
  {
    v12 = 0;
    if (!v3)
      goto LABEL_26;
  }
  v17 = (unint64_t *)&v3->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (v12)
      goto LABEL_27;
    return 0;
  }
LABEL_26:
  if (!v12)
    return 0;
LABEL_27:
  v19 = *((_QWORD *)this + 31);
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  v32 = v19;
  v33 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v19 + 272) + 136))(&v34);
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 56))(v34);
  v24 = v35;
  if (v35)
  {
    v25 = (unint64_t *)&v35->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v33;
  if (v33)
  {
    v28 = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  return v23;
}

void sub_1BF12EE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t SipTlsTransportGroup::isReliable(SipTlsTransportGroup *this)
{
  return 1;
}

void SipTlsTransportGroup::udpTransport(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void SipTlsTransportGroup::tcpTransport(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t SipTlsTransportGroup::initialized(SipTlsTransportGroup *this)
{
  return *((unsigned __int8 *)this + 264);
}

uint64_t SipTlsTransportGroup::isSecure(SipTlsTransportGroup *this)
{
  return 1;
}

uint64_t SipTlsTransportGroup::acceptsTransactionsFromConnection(SipTlsTransportGroup *this)
{
  return 0;
}

void SipTlsTransportGroup::group(SipTlsTransportGroup *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[2];

  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(v8, (_QWORD *)this + 22);
  v3 = (std::__shared_weak_count *)v8[1];
  *a2 = v8[0];
  a2[1] = v3;
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t SipTlsTransportGroup::transportLayer@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 200);
  *a2 = *(_QWORD *)(this + 192);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t SipTlsTransportGroup::shouldResetConnection()
{
  return 0;
}

void `non-virtual thunk to'SipTlsTransportGroup::group(SipTlsTransportGroup *this@<X0>, _QWORD *a2@<X8>)
{
  SipTlsTransportGroup::group((SipTlsTransportGroup *)((char *)this - 208), a2);
}

uint64_t `non-virtual thunk to'SipTlsTransportGroup::transportLayer@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this - 8);
  *a2 = *(_QWORD *)(this - 16);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t `non-virtual thunk to'SipTlsTransportGroup::shouldResetConnection()
{
  return 0;
}

SipTerminationLockBase *SipTypedTerminationLock<SipTcpConnection>::SipTypedTerminationLock(SipTerminationLockBase *a1, uint64_t *a2, const std::string *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  SipTerminationLockBase::SipTerminationLockBase(a1, a3);
  *v5 = &off_1E78E1DD0;
  v5[4] = 0;
  v6 = v5 + 4;
  v5[5] = 0;
  std::shared_ptr<IpAddress>::operator=[abi:ne180100](v5 + 4, a2);
  v7 = *v6;
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 5);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 32))(v7, (_QWORD *)a1 + 1);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return a1;
}

void sub_1BF12F034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  void **v11;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v10);
  *(_QWORD *)v9 = off_1E78BC5D8;
  if (*(char *)(v9 + 31) < 0)
    operator delete(*v11);
  _Unwind_Resume(a1);
}

void SipTypedTerminationLock<SipTcpConnection>::~SipTypedTerminationLock(uint64_t a1)
{
  SipTypedTerminationLock<SipTcpConnection>::~SipTypedTerminationLock(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipTypedTerminationLock<SipTcpConnection>::~SipTypedTerminationLock(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a1 = &off_1E78E1DD0;
  v3 = a1 + 32;
  v2 = *(_QWORD *)(a1 + 32);
  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v2)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1 + 8);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3);
  *(_QWORD *)a1 = off_1E78BC5D8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void ims::analytics::MessageSessionSetupEvent::create(BOOL a1@<W0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, BOOL value)
{
  _QWORD *v19;
  xpc_object_t v20;
  xpc_object_t v21;
  _QWORD *v22;
  xpc_object_t v23;
  std::string *v24;
  std::string *v25;
  std::string *v26;
  std::string *v27;
  std::string *p_p;
  std::string __p;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t object;
  xpc_object_t v41;
  xpc_object_t v42;
  xpc_object_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  xpc_object_t v48;
  xpc_object_t v49;
  xpc_object_t v50;
  xpc_object_t v51;
  std::string v52;

  v19 = operator new(0x90uLL);
  v19[1] = 0;
  v19[2] = 0;
  *v19 = &off_1E78E1E08;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v33 = *(std::string *)a4;
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v32 = *(std::string *)a5;
  if (*(char *)(a6 + 23) < 0)
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
  else
    v31 = *(std::string *)a6;
  if (*(char *)(a7 + 23) < 0)
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a7, *(_QWORD *)(a7 + 8));
  else
    v30 = *(std::string *)a7;
  if (*(char *)(a8 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a8, *(_QWORD *)(a8 + 8));
  else
    __p = *(std::string *)a8;
  v19[3] = off_1E78E1F40;
  std::string::basic_string[abi:ne180100]<0>(&v52, "ims.ca.sessionsetupevent");
  ImsLogContainer::ImsLogContainer((uint64_t)(v19 + 4), &v52);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  v19[3] = off_1E78E1E58;
  v19[4] = &unk_1E78E1E90;
  v20 = xpc_dictionary_create(0, 0, 0);
  v21 = v20;
  v22 = v19 + 17;
  if (v20)
  {
    *v22 = v20;
  }
  else
  {
    v21 = xpc_null_create();
    *v22 = v21;
    if (!v21)
    {
      v23 = xpc_null_create();
      v21 = 0;
      goto LABEL_25;
    }
  }
  if (MEMORY[0x1C3B87B98](v21) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v21);
    goto LABEL_26;
  }
  v23 = xpc_null_create();
LABEL_25:
  *v22 = v23;
LABEL_26:
  xpc_release(v21);
  v50 = xpc_BOOL_create(a1);
  if (!v50)
    v50 = xpc_null_create();
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
  v52.__r_.__value_.__l.__size_ = (std::string::size_type)"is_successful";
  xpc::dict::object_proxy::operator=((uint64_t)&v52, &v50, &v51);
  xpc_release(v51);
  v51 = 0;
  xpc_release(v50);
  v50 = 0;
  v48 = xpc_int64_create(a2);
  if (!v48)
    v48 = xpc_null_create();
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
  v52.__r_.__value_.__l.__size_ = (std::string::size_type)"latency";
  xpc::dict::object_proxy::operator=((uint64_t)&v52, &v48, &v49);
  xpc_release(v49);
  v49 = 0;
  xpc_release(v48);
  v48 = 0;
  if (a3)
  {
    v46 = xpc_int64_create(a3);
    if (!v46)
      v46 = xpc_null_create();
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
    v52.__r_.__value_.__l.__size_ = (std::string::size_type)"error_code";
    xpc::dict::object_proxy::operator=((uint64_t)&v52, &v46, &v47);
    xpc_release(v47);
    v47 = 0;
    xpc_release(v46);
    v46 = 0;
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v33.__r_.__value_.__l.__size_)
      goto LABEL_42;
    v24 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&v33.__r_.__value_.__s + 23))
      goto LABEL_42;
    v24 = &v33;
  }
  v44 = xpc_string_create((const char *)v24);
  if (!v44)
    v44 = xpc_null_create();
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
  v52.__r_.__value_.__l.__size_ = (std::string::size_type)"failure_reason";
  xpc::dict::object_proxy::operator=((uint64_t)&v52, &v44, &v45);
  xpc_release(v45);
  v45 = 0;
  xpc_release(v44);
  v44 = 0;
LABEL_42:
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v32;
  else
    v25 = (std::string *)v32.__r_.__value_.__r.__words[0];
  v42 = xpc_string_create((const char *)v25);
  if (!v42)
    v42 = xpc_null_create();
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
  v52.__r_.__value_.__l.__size_ = (std::string::size_type)"direction";
  xpc::dict::object_proxy::operator=((uint64_t)&v52, &v42, &v43);
  xpc_release(v43);
  v43 = 0;
  xpc_release(v42);
  v42 = 0;
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = &v31;
  else
    v26 = (std::string *)v31.__r_.__value_.__r.__words[0];
  object = xpc_string_create((const char *)v26);
  if (!object)
    object = xpc_null_create();
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
  v52.__r_.__value_.__l.__size_ = (std::string::size_type)"invite_type";
  xpc::dict::object_proxy::operator=((uint64_t)&v52, &object, &v41);
  xpc_release(v41);
  v41 = 0;
  xpc_release(object);
  object = 0;
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = &v30;
  else
    v27 = (std::string *)v30.__r_.__value_.__r.__words[0];
  v38 = xpc_string_create((const char *)v27);
  if (!v38)
    v38 = xpc_null_create();
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
  v52.__r_.__value_.__l.__size_ = (std::string::size_type)"sip_transport_protocol";
  xpc::dict::object_proxy::operator=((uint64_t)&v52, &v38, &v39);
  xpc_release(v39);
  v39 = 0;
  xpc_release(v38);
  v38 = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v36 = xpc_string_create((const char *)p_p);
  if (!v36)
    v36 = xpc_null_create();
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
  v52.__r_.__value_.__l.__size_ = (std::string::size_type)"sip_security_protocol";
  xpc::dict::object_proxy::operator=((uint64_t)&v52, &v36, &v37);
  xpc_release(v37);
  v37 = 0;
  xpc_release(v36);
  v36 = 0;
  v34 = xpc_BOOL_create(value);
  if (!v34)
    v34 = xpc_null_create();
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)(v19 + 17);
  v52.__r_.__value_.__l.__size_ = (std::string::size_type)"msrp_is_secure";
  xpc::dict::object_proxy::operator=((uint64_t)&v52, &v34, &v35);
  xpc_release(v35);
  v35 = 0;
  xpc_release(v34);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  *a9 = v19 + 3;
  a9[1] = v19;
}

void sub_1BF12F6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  std::__shared_weak_count *v42;
  void *v44;

  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a35 < 0)
    operator delete(a30);
  if (a42 < 0)
    operator delete(a37);
  std::__shared_weak_count::~__shared_weak_count(v42);
  operator delete(v44);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<`anonymous namespace'::MessageSessionSetupEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E1E08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<`anonymous namespace'::MessageSessionSetupEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E1E08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<`anonymous namespace'::MessageSessionSetupEventImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void `anonymous namespace'::MessageSessionSetupEventImpl::~MessageSessionSetupEventImpl(_anonymous_namespace_::MessageSessionSetupEventImpl *this)
{
  *(_QWORD *)this = off_1E78E1E58;
  *((_QWORD *)this + 1) = &unk_1E78E1E90;
  xpc_release(*((xpc_object_t *)this + 14));
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 1) = off_1E78CFE68;
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

{
  *(_QWORD *)this = off_1E78E1E58;
  *((_QWORD *)this + 1) = &unk_1E78E1E90;
  xpc_release(*((xpc_object_t *)this + 14));
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 1) = off_1E78CFE68;
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
  JUMPOUT(0x1C3B87100);
}

xpc_object_t `anonymous namespace'::MessageSessionSetupEventImpl::getDict@<X0>(_anonymous_namespace_::MessageSessionSetupEventImpl *this@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  xpc_object_t result;

  v2 = (void *)*((_QWORD *)this + 14);
  *a2 = v2;
  if (v2)
    return xpc_retain(v2);
  result = xpc_null_create();
  *a2 = result;
  return result;
}

_QWORD *`anonymous namespace'::MessageSessionSetupEventImpl::getName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "RCSMessageSessionSetup");
}

void `non-virtual thunk to'`anonymous namespace'::MessageSessionSetupEventImpl::~MessageSessionSetupEventImpl(_anonymous_namespace_::MessageSessionSetupEventImpl *this)
{
  *((_QWORD *)this - 1) = off_1E78E1E58;
  *(_QWORD *)this = &unk_1E78E1E90;
  xpc_release(*((xpc_object_t *)this + 13));
  *((_QWORD *)this + 13) = 0;
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  *((_QWORD *)this - 1) = off_1E78E1E58;
  *(_QWORD *)this = &unk_1E78E1E90;
  xpc_release(*((xpc_object_t *)this + 13));
  *((_QWORD *)this + 13) = 0;
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1C3B87100);
}

void SpamRiskMap::SpamRiskMap(SpamRiskMap *this, const ImsDictPref *a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 *v7;
  __int128 v8;
  std::string::size_type size;
  uint64_t *v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  size_t v15;
  std::string *p_str;
  _BYTE *v17;
  std::string::size_type v18;
  std::string *v19;
  int v20;
  std::string *v21;
  std::string *v22;
  int v23;
  void *v24;
  std::string *v25;
  int v26;
  SpamRiskMap *v27;
  _BYTE *v28;
  std::string *v29;
  int v30;
  void *v31;
  std::string *v32;
  int v33;
  std::string *v34;
  int v35;
  void *v36;
  std::string *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  _BYTE *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int *v49;
  _BYTE *v50;
  _BYTE *v51;
  int *v52;
  std::string __str;
  std::string v54;
  void *__p;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::string v61;
  uint64_t v62[2];

  *((_BYTE *)this + 8) = 0;
  v3 = (char *)this + 8;
  *((_BYTE *)this + 20) = 0;
  v50 = (char *)this + 20;
  *((_BYTE *)this + 32) = 0;
  v51 = (char *)this + 32;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  __p = 0;
  v56 = 0;
  v57 = 0;
  ImsDictPref::keysAndValues((uint64_t)a2, &v58, (char **)&__p);
  v49 = (int *)(v3 + 4);
  v52 = (int *)(v3 + 16);
  v4 = v58;
  if (v59 != v58)
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      memset(&v54, 0, sizeof(v54));
      v7 = (__int128 *)(v4 + v5);
      if (*((char *)v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
      }
      else
      {
        v8 = *v7;
        v54.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v8;
      }
      size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v54.__r_.__value_.__l.__size_;
      if (!size)
        goto LABEL_72;
      v10 = (uint64_t *)*((_QWORD *)__p + v6);
      if (!v10)
        __cxa_bad_typeid();
      v12 = *v10;
      if (v11)
        break;
      {
        (*(void (**)(std::string *__return_ptr, uint64_t *))(*v10 + 48))(&__str, v10);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v15 = __str.__r_.__value_.__l.__size_;
        if (v15)
        {
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_str = &__str;
          else
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          v17 = memchr(p_str, 58, v15);
          if (v17)
            v18 = v17 - (_BYTE *)p_str;
          else
            v18 = -1;
        }
        else
        {
          v18 = -1;
        }
        v19 = std::string::basic_string(&v61, &__str, 0, v18, (std::allocator<char> *)v62);
        v62[0] = 0;
        if (ims::strToLong((uint64_t *)v19, v62))
          v20 = v62[0];
        else
          v20 = 0;
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v61.__r_.__value_.__l.__data_);
        if (v18 == -1)
        {
          LODWORD(v13) = v20;
        }
        else
        {
          v21 = std::string::basic_string(&v61, &__str, v18 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v62);
          v62[0] = 0;
          if (ims::strToLong((uint64_t *)v21, v62))
            LODWORD(v13) = v62[0];
          else
            LODWORD(v13) = 0;
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v61.__r_.__value_.__l.__data_);
        }
        if ((int)v13 >= v20)
          v14 = v20;
        else
          v14 = v13;
        if (v20 <= (int)v13)
          v13 = v13;
        else
          v13 = v20;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        goto LABEL_44;
      }
LABEL_72:
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      ++v6;
      v4 = v58;
      v5 += 24;
      if (v6 >= 0xAAAAAAAAAAAAAAABLL * ((v59 - v58) >> 3))
        goto LABEL_75;
    }
    v13 = (*(uint64_t (**)(uint64_t *))(v12 + 56))(v10);
    v14 = v13;
LABEL_44:
    std::string::basic_string[abi:ne180100]<0>(&v61, "low");
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v54;
    else
      v22 = (std::string *)v54.__r_.__value_.__r.__words[0];
    v23 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
    v24 = (void *)v61.__r_.__value_.__r.__words[0];
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &v61;
    else
      v25 = (std::string *)v61.__r_.__value_.__r.__words[0];
    v26 = strcasecmp((const char *)v22, (const char *)v25);
    if (v23 < 0)
      operator delete(v24);
    v27 = this;
    v28 = v3;
    if (!v26)
      goto LABEL_71;
    std::string::basic_string[abi:ne180100]<0>(&v61, "high");
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v54;
    else
      v29 = (std::string *)v54.__r_.__value_.__r.__words[0];
    v30 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
    v31 = (void *)v61.__r_.__value_.__r.__words[0];
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = &v61;
    else
      v32 = (std::string *)v61.__r_.__value_.__r.__words[0];
    v33 = strcasecmp((const char *)v29, (const char *)v32);
    if (v30 < 0)
      operator delete(v31);
    v28 = v51;
    v27 = (SpamRiskMap *)(v3 + 16);
    if (!v33)
      goto LABEL_71;
    std::string::basic_string[abi:ne180100]<0>(&v61, "medium");
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &v54;
    else
      v34 = (std::string *)v54.__r_.__value_.__r.__words[0];
    v35 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
    v36 = (void *)v61.__r_.__value_.__r.__words[0];
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &v61;
    else
      v37 = (std::string *)v61.__r_.__value_.__r.__words[0];
    v38 = strcasecmp((const char *)v34, (const char *)v37);
    if (v35 < 0)
      operator delete(v36);
    v27 = (SpamRiskMap *)(v3 + 4);
    v28 = v50;
    if (!v38)
    {
LABEL_71:
      *(_QWORD *)v27 = v14 | (unint64_t)(v13 << 32);
      *v28 = 1;
    }
    goto LABEL_72;
  }
LABEL_75:
  if (*v3)
  {
    if (NumericalRange<int>::overlaps((int *)this, v49) && *v50)
    {
      v39 = *((_DWORD *)this + 1);
      v40 = v39 + 1;
      if (v39 + 1 > *((_DWORD *)this + 4))
        v41 = v39 + 1;
      else
        v41 = *((_DWORD *)this + 4);
      *((_DWORD *)this + 3) = v40;
      *((_DWORD *)this + 4) = v41;
      v42 = v50;
LABEL_88:
      *v42 = 1;
      goto LABEL_89;
    }
    if (NumericalRange<int>::overlaps((int *)this, v52) && *v51)
    {
      v43 = *((_DWORD *)this + 1);
      v44 = v43 + 1;
      if (v43 + 1 > *((_DWORD *)this + 7))
        v45 = v43 + 1;
      else
        v45 = *((_DWORD *)this + 7);
      *((_DWORD *)this + 6) = v44;
      *((_DWORD *)this + 7) = v45;
      v42 = v51;
      goto LABEL_88;
    }
  }
LABEL_89:
  if (*v50 && NumericalRange<int>::overlaps(v49, v52) && *v51)
  {
    v46 = *((_DWORD *)this + 4);
    v47 = v46 + 1;
    if (v46 + 1 > *((_DWORD *)this + 7))
      v48 = v46 + 1;
    else
      v48 = *((_DWORD *)this + 7);
    *((_DWORD *)this + 6) = v47;
    *((_DWORD *)this + 7) = v48;
    *((_BYTE *)this + 32) = 1;
  }
  if (__p)
  {
    v56 = __p;
    operator delete(__p);
  }
  v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
}

void sub_1BF12FF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char *__p,char *a27,uint64_t a28,char a29)
{
  if (__p)
  {
    a27 = __p;
    operator delete(__p);
  }
  __p = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL SpamRiskMap::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v3;
  int v4;
  BOOL v5;
  _BOOL8 v6;

  v2 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8))
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    if (v2 | *(unsigned __int8 *)(a1 + 8))
      return 0;
  }
  else if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    return 0;
  }
  v4 = *(unsigned __int8 *)(a2 + 20);
  if (*(_BYTE *)(a1 + 20))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if (v4 | *(unsigned __int8 *)(a1 + 20))
      return 0;
  }
  else if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12) || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    return 0;
  }
  v6 = (*(unsigned __int8 *)(a2 + 32) | *(unsigned __int8 *)(a1 + 32)) == 0;
  if (*(_BYTE *)(a1 + 32) && *(_BYTE *)(a2 + 32))
  {
    if (*(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24))
      return *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28);
    return 0;
  }
  return v6;
}

uint64_t NumericalRange<int>::overlaps(int *a1, int *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL4 v11;

  if (!*((_BYTE *)a1 + 8))
  {
    if (*((_BYTE *)a2 + 8))
    {
      v2 = *a1;
      v3 = *a2;
      goto LABEL_14;
    }
    return 0;
  }
  if (!*((_BYTE *)a2 + 8))
    return 0;
  v2 = *a1;
  v3 = *a2;
  if (*a1 <= *a2)
  {
    v4 = a1[1];
    if (v4 >= v3)
    {
      v5 = a2[1];
      if (v2 <= v5 && v4 >= v5)
        return 1;
    }
  }
  if (v3 <= v2)
  {
    v6 = a2[1];
    if (v6 >= v2)
    {
      v7 = a1[1];
      if (v3 <= v7 && v6 >= v7)
        return 1;
    }
  }
LABEL_14:
  v8 = a1[1];
  if (v2 > v3)
  {
    v9 = a2[1];
    goto LABEL_17;
  }
  v9 = a2[1];
  if (v3 > v8)
  {
LABEL_17:
    if (v8 < v9)
      return 0;
    goto LABEL_20;
  }
  if (v9 >= v8)
    return 1;
LABEL_20:
  v11 = v9 >= v2;
  return v3 <= v2 && v11;
}

uint64_t SpamRiskMap::classifyRisk(SpamRiskMap *this, int a2)
{
  if (*((_BYTE *)this + 8) && *(_DWORD *)this <= a2 && *((_DWORD *)this + 1) >= a2)
    return 1;
  if (*((_BYTE *)this + 20) && *((_DWORD *)this + 3) <= a2 && *((_DWORD *)this + 4) >= a2)
    return 2;
  if (!*((_BYTE *)this + 32) || *((_DWORD *)this + 6) > a2)
    return 0;
  if (*((_DWORD *)this + 7) >= a2)
    return 3;
  return 0;
}

uint64_t SDPMediaFingerprint::SDPMediaFingerprint(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v6;
  std::string *v7;
  __int128 v8;
  void *__p[2];
  uint64_t v11;

  std::string::basic_string[abi:ne180100]<0>(__p, "fingerprint");
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E78ED0A8;
  if (SHIBYTE(v11) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v11) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 32) = v11;
  }
  *(_QWORD *)a1 = &off_1E78E1F78;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 40) = v6;
  }
  v7 = (std::string *)(a1 + 64);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return a1;
}

void sub_1BF1302C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;
  void **v17;
  uint64_t v18;

  if (*(char *)(v15 + 63) < 0)
    operator delete(*v17);
  *(_QWORD *)v15 = v18;
  if (*(char *)(v15 + 39) < 0)
    operator delete(*v16);
  _Unwind_Resume(exception_object);
}

uint64_t SDPMediaFingerprint::SDPMediaFingerprint(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  std::string __p;

  if (*(char *)(a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  else
    __p = *(std::string *)(a2 + 16);
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E78ED0A8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::string *)(a1 + 16) = __p;
  }
  *(_QWORD *)a1 = &off_1E78E1F78;
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  v5 = (std::string *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_1BF130430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;
  void **v16;
  uint64_t v17;

  if (*(char *)(v14 + 63) < 0)
    operator delete(*v16);
  *(_QWORD *)v14 = v17;
  if (*(char *)(v14 + 39) < 0)
    operator delete(*v15);
  _Unwind_Resume(exception_object);
}

void SDPMediaFingerprint::~SDPMediaFingerprint(void **this)
{
  *this = &off_1E78E1F78;
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  *this = off_1E78ED0A8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  SDPMediaFingerprint::~SDPMediaFingerprint(this);
  JUMPOUT(0x1C3B87100);
}

_QWORD *SDPMediaFingerprint::key@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "fingerprint");
}

void SDPMediaFingerprint::value(SDPMediaFingerprint *this@<X0>, std::string *a2@<X8>)
{
  size_t v4;
  std::string *p_p;
  char *v6;
  const std::string::value_type *v7;
  char *v8;
  const std::string::value_type *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string __p;

  if (*((char *)this + 63) >= 0)
    v4 = *((unsigned __int8 *)this + 63);
  else
    v4 = *((_QWORD *)this + 6);
  memset(&__p, 0, sizeof(__p));
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v4 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v4)
  {
    if (*((char *)this + 63) >= 0)
      v6 = (char *)this + 40;
    else
      v6 = (char *)*((_QWORD *)this + 5);
    memmove(p_p, v6, v4);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v4) = 32;
  v9 = (const std::string::value_type *)*((_QWORD *)this + 8);
  v8 = (char *)this + 64;
  v7 = v9;
  v10 = v8[23];
  if (v10 >= 0)
    v11 = v8;
  else
    v11 = v7;
  if (v10 >= 0)
    v12 = v8[23];
  else
    v12 = *((_QWORD *)v8 + 1);
  v13 = std::string::append(&__p, v11, v12);
  *a2 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF130604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ims::DeviceEvent::eventWithName(uint64_t *a1)
{
  uint64_t result;
  int v3;
  size_t v4;
  _WORD *v5;
  _QWORD *v7;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  result = 0;
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  switch(v4)
  {
    case 0xAuLL:
      if (v3 >= 0)
        v5 = a1;
      else
        v5 = (_WORD *)*a1;
      if (*(_QWORD *)v5 == 0x6165526F69647541 && v5[4] == 31076)
        result = 8;
      else
        result = (memcmp(v5, "SubEnabled", v4) == 0) << 9;
      break;
    case 0xBuLL:
      if (v3 >= 0)
        v7 = a1;
      else
        v7 = (_QWORD *)*a1;
      if (*v7 == 0x7265736E496D6953 && *(_QWORD *)((char *)v7 + 3) == 0x6465747265736E49)
        result = 1;
      else
        result = (memcmp(v7, "SubDisabled", v4) == 0) << 8;
      break;
    case 0x13uLL:
      if (v3 < 0)
        a1 = (uint64_t *)*a1;
      if (*a1 == 0x656E616C70726941
        && a1[1] == 0x67676F5465646F4DLL
        && *(uint64_t *)((char *)a1 + 11) == 0x64656C67676F5465)
      {
        result = 2;
      }
      else
      {
        v11 = (uint64_t *)*a1;
        v12 = a1[1];
        v13 = *(uint64_t *)((char *)a1 + 11);
        if (v11 != (uint64_t *)0x656E616C70726941 || v12 != 0x62616E4565646F4DLL || v13 != 0x64656C62616E4565)
          goto LABEL_67;
        result = 32;
      }
      break;
    case 0x14uLL:
      if (v3 < 0)
        a1 = (uint64_t *)*a1;
      if (*a1 == 0x654E737365636341 && a1[1] == 0x6168436B726F7774 && *((_DWORD *)a1 + 4) == 1684367214)
      {
        result = 4;
      }
      else
      {
        v18 = (uint64_t *)*a1;
        v19 = a1[1];
        v20 = *((unsigned int *)a1 + 4);
        v23 = v18 == (uint64_t *)0x656E616C70726941 && v19 == 0x6173694465646F4DLL && v20 == 1684368482;
        result = (v23 << 6);
      }
      break;
    case 0x15uLL:
      if (v3 < 0)
        a1 = (uint64_t *)*a1;
      v24 = (uint64_t *)*a1;
      v25 = a1[1];
      v26 = *(uint64_t *)((char *)a1 + 13);
      if (v24 == (uint64_t *)0x4E676E6976726553 && v25 == 0x68436B726F777465 && v26 == 0x6465676E6168436BLL)
        result = 128;
      else
LABEL_67:
        result = 0;
      break;
    default:
      return result;
  }
  return result;
}

const char *ims::DeviceEvent::nameForEvent(ims::DeviceEvent *this)
{
  int v1;
  const char *result;

  if ((int)this > 127)
  {
    if ((int)this > 1023)
    {
      switch((_DWORD)this)
      {
        case 0x400:
          return "IMSHandoverStarted";
        case 0x800:
          return "IMSHandoverCompleted";
        case 0x1000:
          return "KeepAliveWakeup";
      }
    }
    else
    {
      switch((_DWORD)this)
      {
        case 0x80:
          return "ServingNetworkChanged";
        case 0x100:
          return "SubDisabled";
        case 0x200:
          return "SubEnabled";
      }
    }
    return "";
  }
  v1 = (_DWORD)this - 1;
  result = "SimInserted";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      return "AirplaneModeToggled";
    case 2:
    case 4:
    case 5:
    case 6:
      return "";
    case 3:
      return "AccessNetworkChanged";
    case 7:
      return "AudioReady";
    default:
      if ("SimInserted" == 32)
      {
        result = "AirplaneModeEnabled";
      }
      else
      {
        if ("SimInserted" != 64)
          return "";
        result = "AirplaneModeDisabled";
      }
      break;
  }
  return result;
}

uint64_t ims::Services::serviceWithName(_BYTE *a1)
{
  const void **v1;
  int v2;
  size_t v3;
  uint64_t result;
  const char *v9;
  _BYTE *v10;
  int v11;
  int v12;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  BOOL v18;

  v1 = (const void **)a1;
  v2 = (char)a1[23];
  if (v2 >= 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  switch(v3)
  {
    case 3uLL:
      if (v2 < 0)
        a1 = *(_BYTE **)a1;
      if (*(_WORD *)a1 == 28019 && a1[2] == 115)
        return 4;
      if (memcmp(a1, "reg", v3))
        goto LABEL_58;
      return 64;
    case 4uLL:
      if (v2 < 0)
        a1 = *(_BYTE **)a1;
      if (memcmp(a1, "text", v3))
        goto LABEL_58;
      return 32;
    case 5uLL:
      if (v2 < 0)
        a1 = *(_BYTE **)a1;
      if (*(_DWORD *)a1 == 1667854198 && a1[4] == 101)
        return 1;
      if (*(_DWORD *)a1 == 1768191329 && a1[4] == 111)
        return 8;
      if (*(_DWORD *)a1 != 1701079414 || a1[4] != 111)
      {
        v9 = "pager";
        goto LABEL_57;
      }
      return 2;
    case 6uLL:
      if (v2 >= 0)
        v10 = a1;
      else
        v10 = *(_BYTE **)a1;
      v11 = *(_DWORD *)v10;
      v12 = *((unsigned __int16 *)v10 + 2);
      if (v11 != 1633906793 || v12 != 27756)
        goto LABEL_58;
      return 16;
    case 9uLL:
      if (v2 >= 0)
        v14 = a1;
      else
        v14 = *(_BYTE **)a1;
      v15 = *(_QWORD *)v14;
      v16 = v14[8];
      if (v15 != 0x6E6967617373656DLL || v16 != 103)
        goto LABEL_58;
      return 4;
    case 0xAuLL:
      if (v2 < 0)
        a1 = *(_BYTE **)a1;
      if (memcmp(a1, "lazuliChat", v3))
        goto LABEL_58;
      goto LABEL_59;
    case 0xBuLL:
      if (v2 < 0)
        a1 = *(_BYTE **)a1;
      v9 = "lazuliPager";
LABEL_57:
      if (memcmp(a1, v9, v3))
        goto LABEL_58;
      result = 128;
      break;
    default:
LABEL_58:
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "chat"))
      {
LABEL_59:
        result = 256;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "lazuliChatbot")
             || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "chatbot"))
      {
        result = 512;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "lazuliCpmOnly")
             || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "cpm"))
      {
        result = 1024;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "lazuliLargeMsgOnly")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "large"))
      {
        result = 2048;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "lazuliFileXfer")
             || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "file"))
      {
        result = 4096;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "lazuliGeoPush")
             || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "geo"))
      {
        result = 0x2000;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "lazuliImage")
             || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "img"))
      {
        result = 0x4000;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "lazuliVideo")
             || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "vid"))
      {
        result = 0x8000;
      }
      else
      {
        v18 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "lazuliIM");
        result = 0x10000;
        if (!v18)
        {
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v1, "im"))
            result = 0x10000;
          else
            result = 0;
        }
      }
      break;
  }
  return result;
}

const char *ims::Services::nameForService(int a1)
{
  int v1;
  const char *result;

  if (a1 > 511)
  {
    if (a1 >= 0x2000)
    {
      if (a1 >= 0x8000)
      {
        if (a1 == 0x8000)
          return "lazuliVideo";
        if (a1 == 0x10000)
          return "lazuliIM";
      }
      else
      {
        if (a1 == 0x2000)
          return "lazuliGeoPush";
        if (a1 == 0x4000)
          return "lazuliImage";
      }
    }
    else if (a1 > 2047)
    {
      if (a1 == 2048)
        return "lazuliLargeMsgOnly";
      if (a1 == 4096)
        return "lazuliFileXfer";
    }
    else
    {
      if (a1 == 512)
        return "lazuliChatbot";
      if (a1 == 1024)
        return "lazuliCpmOnly";
    }
    return "none";
  }
  if (a1 > 31)
  {
    if (a1 > 127)
    {
      if (a1 == 128)
        return "lazuliPager";
      if (a1 == 256)
        return "lazuliChat";
    }
    else
    {
      if (a1 == 32)
        return "text";
      if (a1 == 64)
        return "reg";
    }
    return "none";
  }
  v1 = a1 - 1;
  result = "voice";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "video";
      break;
    case 2:
    case 4:
    case 5:
    case 6:
      return "none";
    case 3:
      result = "sms";
      break;
    case 7:
      result = "audio";
      break;
    default:
      if ("voice" != 16)
        return "none";
      result = "ipcall";
      break;
  }
  return result;
}

void ims::Services::namesForMask(ims::Services *this@<X0>, std::string *a2@<X8>)
{
  int v2;
  std::vector<std::string>::pointer end;
  __int128 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::string *v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::vector<std::string>::pointer v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::string *v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::vector<std::string>::pointer v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::string *v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::vector<std::string>::pointer v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  std::string *v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  std::vector<std::string>::pointer v40;
  __int128 v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  std::string *v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  std::vector<std::string>::pointer v49;
  __int128 v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  std::string *v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  std::vector<std::string>::pointer v58;
  __int128 v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  std::string *v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  std::vector<std::string>::pointer v67;
  __int128 v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  std::string *v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  std::vector<std::string>::pointer v76;
  __int128 v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  std::string *v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  std::vector<std::string>::pointer v85;
  __int128 v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  std::string *v90;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  std::vector<std::string>::pointer v94;
  __int128 v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  std::string *v99;
  std::string *v100;
  __int128 v101;
  std::string *v102;
  std::vector<std::string>::pointer v103;
  __int128 v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  std::string *v108;
  std::string *v109;
  __int128 v110;
  std::string *v111;
  std::vector<std::string>::pointer v112;
  __int128 v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  std::string *v117;
  std::string *v118;
  __int128 v119;
  std::string *v120;
  std::vector<std::string>::pointer v121;
  __int128 v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  std::string *v126;
  std::string *v127;
  __int128 v128;
  std::string *v129;
  std::vector<std::string>::pointer v130;
  __int128 v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  std::string *v135;
  std::string *v136;
  __int128 v137;
  std::string *v138;
  std::vector<std::string>::pointer v139;
  __int128 v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  std::string *v144;
  std::string *v145;
  __int128 v146;
  std::string *v147;
  std::vector<std::string>::pointer v148;
  __int128 v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  std::string *v153;
  std::string *v154;
  __int128 v155;
  std::string *v156;
  std::vector<std::string>::pointer begin;
  int64_t v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  unint64_t v162;
  int v163;
  std::string *data;
  std::string::size_type size;
  void *__p[2];
  std::string::size_type v167;
  std::vector<std::string> v168;
  std::__split_buffer<std::string> __v;

  v2 = (int)this;
  memset(&v168, 0, sizeof(v168));
  if ((this & 1) == 0)
    goto LABEL_15;
  std::string::basic_string[abi:ne180100]<0>(__p, "voice");
  end = v168.__end_;
  if (v168.__end_ < v168.__end_cap_.__value_)
  {
    v5 = *(_OWORD *)__p;
    v168.__end_->__r_.__value_.__r.__words[2] = v167;
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v5;
    v168.__end_ = end + 1;
    if ((v2 & 8) == 0)
      goto LABEL_30;
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(__p, "audio");
    v13 = v168.__end_;
    if (v168.__end_ >= v168.__end_cap_.__value_)
    {
      v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
      v16 = v15 + 1;
      if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v16)
        v16 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v16;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
      if (v17)
        v18 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v17);
      else
        v18 = 0;
      v19 = v18 + v15;
      __v.__first_ = v18;
      __v.__begin_ = v19;
      __v.__end_cap_.__value_ = &v18[v17];
      v20 = *(_OWORD *)__p;
      v19->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
      __p[1] = 0;
      v167 = 0;
      __p[0] = 0;
      __v.__end_ = v19 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
      v21 = v168.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v168.__end_ = v21;
      if (SHIBYTE(v167) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v14 = *(_OWORD *)__p;
      v168.__end_->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      v168.__end_ = v13 + 1;
    }
    goto LABEL_30;
  }
  v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
  v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555
     ? 0xAAAAAAAAAAAAAAALL
     : v7;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
  v9 = v8
     ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v8)
     : 0;
  v10 = v9 + v6;
  __v.__first_ = v9;
  __v.__begin_ = v10;
  __v.__end_cap_.__value_ = &v9[v8];
  v11 = *(_OWORD *)__p;
  v10->__r_.__value_.__r.__words[2] = v167;
  *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  __p[1] = 0;
  v167 = 0;
  __p[0] = 0;
  __v.__end_ = v10 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
  v12 = v168.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v168.__end_ = v12;
  if (SHIBYTE(v167) < 0)
  {
    operator delete(__p[0]);
    if ((v2 & 8) != 0)
      goto LABEL_16;
  }
  else
  {
LABEL_15:
    if ((v2 & 8) != 0)
      goto LABEL_16;
  }
  if ((v2 & 2) == 0)
    goto LABEL_44;
LABEL_30:
  std::string::basic_string[abi:ne180100]<0>(__p, "video");
  v22 = v168.__end_;
  if (v168.__end_ < v168.__end_cap_.__value_)
  {
    v23 = *(_OWORD *)__p;
    v168.__end_->__r_.__value_.__r.__words[2] = v167;
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
    v168.__end_ = v22 + 1;
    if ((v2 & 4) == 0)
      goto LABEL_59;
LABEL_45:
    std::string::basic_string[abi:ne180100]<0>(__p, "sms");
    v31 = v168.__end_;
    if (v168.__end_ >= v168.__end_cap_.__value_)
    {
      v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
      v34 = v33 + 1;
      if (v33 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v34)
        v34 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555)
        v35 = 0xAAAAAAAAAAAAAAALL;
      else
        v35 = v34;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
      if (v35)
        v36 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v35);
      else
        v36 = 0;
      v37 = v36 + v33;
      __v.__first_ = v36;
      __v.__begin_ = v37;
      __v.__end_cap_.__value_ = &v36[v35];
      v38 = *(_OWORD *)__p;
      v37->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
      __p[1] = 0;
      v167 = 0;
      __p[0] = 0;
      __v.__end_ = v37 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
      v39 = v168.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v168.__end_ = v39;
      if (SHIBYTE(v167) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v32 = *(_OWORD *)__p;
      v168.__end_->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
      v168.__end_ = v31 + 1;
    }
    goto LABEL_59;
  }
  v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
  v25 = v24 + 1;
  if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v25)
    v25 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
  v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555
      ? 0xAAAAAAAAAAAAAAALL
      : v25;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
  v27 = v26
      ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v26): 0;
  v28 = v27 + v24;
  __v.__first_ = v27;
  __v.__begin_ = v28;
  __v.__end_cap_.__value_ = &v27[v26];
  v29 = *(_OWORD *)__p;
  v28->__r_.__value_.__r.__words[2] = v167;
  *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
  __p[1] = 0;
  v167 = 0;
  __p[0] = 0;
  __v.__end_ = v28 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
  v30 = v168.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v168.__end_ = v30;
  if (SHIBYTE(v167) < 0)
  {
    operator delete(__p[0]);
    if ((v2 & 4) != 0)
      goto LABEL_45;
  }
  else
  {
LABEL_44:
    if ((v2 & 4) != 0)
      goto LABEL_45;
  }
  if ((v2 & 0x10) == 0)
    goto LABEL_73;
LABEL_59:
  std::string::basic_string[abi:ne180100]<0>(__p, "ipcall");
  v40 = v168.__end_;
  if (v168.__end_ < v168.__end_cap_.__value_)
  {
    v41 = *(_OWORD *)__p;
    v168.__end_->__r_.__value_.__r.__words[2] = v167;
    *(_OWORD *)&v40->__r_.__value_.__l.__data_ = v41;
    v168.__end_ = v40 + 1;
    if ((v2 & 0x20) == 0)
      goto LABEL_88;
LABEL_74:
    std::string::basic_string[abi:ne180100]<0>(__p, "text");
    v49 = v168.__end_;
    if (v168.__end_ >= v168.__end_cap_.__value_)
    {
      v51 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
      v52 = v51 + 1;
      if (v51 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v52)
        v52 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555)
        v53 = 0xAAAAAAAAAAAAAAALL;
      else
        v53 = v52;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
      if (v53)
        v54 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v53);
      else
        v54 = 0;
      v55 = v54 + v51;
      __v.__first_ = v54;
      __v.__begin_ = v55;
      __v.__end_cap_.__value_ = &v54[v53];
      v56 = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
      __p[1] = 0;
      v167 = 0;
      __p[0] = 0;
      __v.__end_ = v55 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
      v57 = v168.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v168.__end_ = v57;
      if (SHIBYTE(v167) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v50 = *(_OWORD *)__p;
      v168.__end_->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v50;
      v168.__end_ = v49 + 1;
    }
    goto LABEL_88;
  }
  v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
  v43 = v42 + 1;
  if (v42 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v43)
    v43 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
  v44 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555
      ? 0xAAAAAAAAAAAAAAALL
      : v43;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
  v45 = v44
      ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v44): 0;
  v46 = v45 + v42;
  __v.__first_ = v45;
  __v.__begin_ = v46;
  __v.__end_cap_.__value_ = &v45[v44];
  v47 = *(_OWORD *)__p;
  v46->__r_.__value_.__r.__words[2] = v167;
  *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
  __p[1] = 0;
  v167 = 0;
  __p[0] = 0;
  __v.__end_ = v46 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
  v48 = v168.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v168.__end_ = v48;
  if (SHIBYTE(v167) < 0)
  {
    operator delete(__p[0]);
    if ((v2 & 0x20) != 0)
      goto LABEL_74;
  }
  else
  {
LABEL_73:
    if ((v2 & 0x20) != 0)
      goto LABEL_74;
  }
  if ((v2 & 0x40) == 0)
    goto LABEL_102;
LABEL_88:
  std::string::basic_string[abi:ne180100]<0>(__p, "reg");
  v58 = v168.__end_;
  if (v168.__end_ < v168.__end_cap_.__value_)
  {
    v59 = *(_OWORD *)__p;
    v168.__end_->__r_.__value_.__r.__words[2] = v167;
    *(_OWORD *)&v58->__r_.__value_.__l.__data_ = v59;
    v168.__end_ = v58 + 1;
    if ((v2 & 0x80) == 0)
      goto LABEL_117;
LABEL_103:
    std::string::basic_string[abi:ne180100]<0>(__p, "lazuliPager");
    v67 = v168.__end_;
    if (v168.__end_ >= v168.__end_cap_.__value_)
    {
      v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
      v70 = v69 + 1;
      if (v69 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v70)
        v70 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555)
        v71 = 0xAAAAAAAAAAAAAAALL;
      else
        v71 = v70;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
      if (v71)
        v72 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v71);
      else
        v72 = 0;
      v73 = v72 + v69;
      __v.__first_ = v72;
      __v.__begin_ = v73;
      __v.__end_cap_.__value_ = &v72[v71];
      v74 = *(_OWORD *)__p;
      v73->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v73->__r_.__value_.__l.__data_ = v74;
      __p[1] = 0;
      v167 = 0;
      __p[0] = 0;
      __v.__end_ = v73 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
      v75 = v168.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v168.__end_ = v75;
      if (SHIBYTE(v167) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v68 = *(_OWORD *)__p;
      v168.__end_->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v67->__r_.__value_.__l.__data_ = v68;
      v168.__end_ = v67 + 1;
    }
    goto LABEL_117;
  }
  v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
  v61 = v60 + 1;
  if (v60 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v61)
    v61 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
  v62 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555
      ? 0xAAAAAAAAAAAAAAALL
      : v61;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
  v63 = v62
      ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v62): 0;
  v64 = v63 + v60;
  __v.__first_ = v63;
  __v.__begin_ = v64;
  __v.__end_cap_.__value_ = &v63[v62];
  v65 = *(_OWORD *)__p;
  v64->__r_.__value_.__r.__words[2] = v167;
  *(_OWORD *)&v64->__r_.__value_.__l.__data_ = v65;
  __p[1] = 0;
  v167 = 0;
  __p[0] = 0;
  __v.__end_ = v64 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
  v66 = v168.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v168.__end_ = v66;
  if (SHIBYTE(v167) < 0)
  {
    operator delete(__p[0]);
    if ((v2 & 0x80) != 0)
      goto LABEL_103;
  }
  else
  {
LABEL_102:
    if ((v2 & 0x80) != 0)
      goto LABEL_103;
  }
  if ((v2 & 0x100) == 0)
    goto LABEL_131;
LABEL_117:
  std::string::basic_string[abi:ne180100]<0>(__p, "lazuliChat");
  v76 = v168.__end_;
  if (v168.__end_ < v168.__end_cap_.__value_)
  {
    v77 = *(_OWORD *)__p;
    v168.__end_->__r_.__value_.__r.__words[2] = v167;
    *(_OWORD *)&v76->__r_.__value_.__l.__data_ = v77;
    v168.__end_ = v76 + 1;
    if ((v2 & 0x200) == 0)
      goto LABEL_146;
LABEL_132:
    std::string::basic_string[abi:ne180100]<0>(__p, "lazuliChatbot");
    v85 = v168.__end_;
    if (v168.__end_ >= v168.__end_cap_.__value_)
    {
      v87 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
      v88 = v87 + 1;
      if (v87 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v88)
        v88 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555)
        v89 = 0xAAAAAAAAAAAAAAALL;
      else
        v89 = v88;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
      if (v89)
        v90 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v89);
      else
        v90 = 0;
      v91 = v90 + v87;
      __v.__first_ = v90;
      __v.__begin_ = v91;
      __v.__end_cap_.__value_ = &v90[v89];
      v92 = *(_OWORD *)__p;
      v91->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v91->__r_.__value_.__l.__data_ = v92;
      __p[1] = 0;
      v167 = 0;
      __p[0] = 0;
      __v.__end_ = v91 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
      v93 = v168.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v168.__end_ = v93;
      if (SHIBYTE(v167) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v86 = *(_OWORD *)__p;
      v168.__end_->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v85->__r_.__value_.__l.__data_ = v86;
      v168.__end_ = v85 + 1;
    }
    goto LABEL_146;
  }
  v78 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
  v79 = v78 + 1;
  if (v78 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v79)
    v79 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
  v80 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555
      ? 0xAAAAAAAAAAAAAAALL
      : v79;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
  v81 = v80
      ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v80): 0;
  v82 = v81 + v78;
  __v.__first_ = v81;
  __v.__begin_ = v82;
  __v.__end_cap_.__value_ = &v81[v80];
  v83 = *(_OWORD *)__p;
  v82->__r_.__value_.__r.__words[2] = v167;
  *(_OWORD *)&v82->__r_.__value_.__l.__data_ = v83;
  __p[1] = 0;
  v167 = 0;
  __p[0] = 0;
  __v.__end_ = v82 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
  v84 = v168.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v168.__end_ = v84;
  if (SHIBYTE(v167) < 0)
  {
    operator delete(__p[0]);
    if ((v2 & 0x200) != 0)
      goto LABEL_132;
  }
  else
  {
LABEL_131:
    if ((v2 & 0x200) != 0)
      goto LABEL_132;
  }
  if ((v2 & 0x400) == 0)
    goto LABEL_160;
LABEL_146:
  std::string::basic_string[abi:ne180100]<0>(__p, "lazuliCpmOnly");
  v94 = v168.__end_;
  if (v168.__end_ < v168.__end_cap_.__value_)
  {
    v95 = *(_OWORD *)__p;
    v168.__end_->__r_.__value_.__r.__words[2] = v167;
    *(_OWORD *)&v94->__r_.__value_.__l.__data_ = v95;
    v168.__end_ = v94 + 1;
    if ((v2 & 0x800) == 0)
      goto LABEL_175;
LABEL_161:
    std::string::basic_string[abi:ne180100]<0>(__p, "lazuliLargeMsgOnly");
    v103 = v168.__end_;
    if (v168.__end_ >= v168.__end_cap_.__value_)
    {
      v105 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
      v106 = v105 + 1;
      if (v105 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v106)
        v106 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555)
        v107 = 0xAAAAAAAAAAAAAAALL;
      else
        v107 = v106;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
      if (v107)
        v108 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v107);
      else
        v108 = 0;
      v109 = v108 + v105;
      __v.__first_ = v108;
      __v.__begin_ = v109;
      __v.__end_cap_.__value_ = &v108[v107];
      v110 = *(_OWORD *)__p;
      v109->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v109->__r_.__value_.__l.__data_ = v110;
      __p[1] = 0;
      v167 = 0;
      __p[0] = 0;
      __v.__end_ = v109 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
      v111 = v168.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v168.__end_ = v111;
      if (SHIBYTE(v167) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v104 = *(_OWORD *)__p;
      v168.__end_->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v103->__r_.__value_.__l.__data_ = v104;
      v168.__end_ = v103 + 1;
    }
    goto LABEL_175;
  }
  v96 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
  v97 = v96 + 1;
  if (v96 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v97)
    v97 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
  v98 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555
      ? 0xAAAAAAAAAAAAAAALL
      : v97;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
  v99 = v98
      ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v98): 0;
  v100 = v99 + v96;
  __v.__first_ = v99;
  __v.__begin_ = v100;
  __v.__end_cap_.__value_ = &v99[v98];
  v101 = *(_OWORD *)__p;
  v100->__r_.__value_.__r.__words[2] = v167;
  *(_OWORD *)&v100->__r_.__value_.__l.__data_ = v101;
  __p[1] = 0;
  v167 = 0;
  __p[0] = 0;
  __v.__end_ = v100 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
  v102 = v168.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v168.__end_ = v102;
  if (SHIBYTE(v167) < 0)
  {
    operator delete(__p[0]);
    if ((v2 & 0x800) != 0)
      goto LABEL_161;
  }
  else
  {
LABEL_160:
    if ((v2 & 0x800) != 0)
      goto LABEL_161;
  }
  if ((v2 & 0x1000) == 0)
    goto LABEL_189;
LABEL_175:
  std::string::basic_string[abi:ne180100]<0>(__p, "lazuliFileXfer");
  v112 = v168.__end_;
  if (v168.__end_ < v168.__end_cap_.__value_)
  {
    v113 = *(_OWORD *)__p;
    v168.__end_->__r_.__value_.__r.__words[2] = v167;
    *(_OWORD *)&v112->__r_.__value_.__l.__data_ = v113;
    v168.__end_ = v112 + 1;
    if ((v2 & 0x2000) == 0)
      goto LABEL_204;
LABEL_190:
    std::string::basic_string[abi:ne180100]<0>(__p, "lazuliGeoPush");
    v121 = v168.__end_;
    if (v168.__end_ >= v168.__end_cap_.__value_)
    {
      v123 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
      v124 = v123 + 1;
      if (v123 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v124)
        v124 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555)
        v125 = 0xAAAAAAAAAAAAAAALL;
      else
        v125 = v124;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
      if (v125)
        v126 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v125);
      else
        v126 = 0;
      v127 = v126 + v123;
      __v.__first_ = v126;
      __v.__begin_ = v127;
      __v.__end_cap_.__value_ = &v126[v125];
      v128 = *(_OWORD *)__p;
      v127->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v127->__r_.__value_.__l.__data_ = v128;
      __p[1] = 0;
      v167 = 0;
      __p[0] = 0;
      __v.__end_ = v127 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
      v129 = v168.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v168.__end_ = v129;
      if (SHIBYTE(v167) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v122 = *(_OWORD *)__p;
      v168.__end_->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v121->__r_.__value_.__l.__data_ = v122;
      v168.__end_ = v121 + 1;
    }
    goto LABEL_204;
  }
  v114 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
  v115 = v114 + 1;
  if (v114 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v115)
    v115 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
  v116 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555
       ? 0xAAAAAAAAAAAAAAALL
       : v115;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
  v117 = v116
       ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v116): 0;
  v118 = v117 + v114;
  __v.__first_ = v117;
  __v.__begin_ = v118;
  __v.__end_cap_.__value_ = &v117[v116];
  v119 = *(_OWORD *)__p;
  v118->__r_.__value_.__r.__words[2] = v167;
  *(_OWORD *)&v118->__r_.__value_.__l.__data_ = v119;
  __p[1] = 0;
  v167 = 0;
  __p[0] = 0;
  __v.__end_ = v118 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
  v120 = v168.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v168.__end_ = v120;
  if (SHIBYTE(v167) < 0)
  {
    operator delete(__p[0]);
    if ((v2 & 0x2000) != 0)
      goto LABEL_190;
  }
  else
  {
LABEL_189:
    if ((v2 & 0x2000) != 0)
      goto LABEL_190;
  }
  if ((v2 & 0x4000) == 0)
    goto LABEL_218;
LABEL_204:
  std::string::basic_string[abi:ne180100]<0>(__p, "lazuliImage");
  v130 = v168.__end_;
  if (v168.__end_ < v168.__end_cap_.__value_)
  {
    v131 = *(_OWORD *)__p;
    v168.__end_->__r_.__value_.__r.__words[2] = v167;
    *(_OWORD *)&v130->__r_.__value_.__l.__data_ = v131;
    v168.__end_ = v130 + 1;
    if ((v2 & 0x8000) == 0)
      goto LABEL_233;
    goto LABEL_219;
  }
  v132 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
  v133 = v132 + 1;
  if (v132 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v133)
    v133 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
  v134 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555
       ? 0xAAAAAAAAAAAAAAALL
       : v133;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
  v135 = v134
       ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v134): 0;
  v136 = v135 + v132;
  __v.__first_ = v135;
  __v.__begin_ = v136;
  __v.__end_cap_.__value_ = &v135[v134];
  v137 = *(_OWORD *)__p;
  v136->__r_.__value_.__r.__words[2] = v167;
  *(_OWORD *)&v136->__r_.__value_.__l.__data_ = v137;
  __p[1] = 0;
  v167 = 0;
  __p[0] = 0;
  __v.__end_ = v136 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
  v138 = v168.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v168.__end_ = v138;
  if (SHIBYTE(v167) < 0)
  {
    operator delete(__p[0]);
    if ((v2 & 0x8000) == 0)
      goto LABEL_233;
  }
  else
  {
LABEL_218:
    if ((v2 & 0x8000) == 0)
      goto LABEL_233;
  }
LABEL_219:
  std::string::basic_string[abi:ne180100]<0>(__p, "lazuliVideo");
  v139 = v168.__end_;
  if (v168.__end_ >= v168.__end_cap_.__value_)
  {
    v141 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
    v142 = v141 + 1;
    if (v141 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v142)
      v142 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555)
      v143 = 0xAAAAAAAAAAAAAAALL;
    else
      v143 = v142;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
    if (v143)
      v144 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v143);
    else
      v144 = 0;
    v145 = v144 + v141;
    __v.__first_ = v144;
    __v.__begin_ = v145;
    __v.__end_cap_.__value_ = &v144[v143];
    v146 = *(_OWORD *)__p;
    v145->__r_.__value_.__r.__words[2] = v167;
    *(_OWORD *)&v145->__r_.__value_.__l.__data_ = v146;
    __p[1] = 0;
    v167 = 0;
    __p[0] = 0;
    __v.__end_ = v145 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
    v147 = v168.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v168.__end_ = v147;
    if (SHIBYTE(v167) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v140 = *(_OWORD *)__p;
    v168.__end_->__r_.__value_.__r.__words[2] = v167;
    *(_OWORD *)&v139->__r_.__value_.__l.__data_ = v140;
    v168.__end_ = v139 + 1;
  }
LABEL_233:
  if ((v2 & 0x10000) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "lazuliIM");
    v148 = v168.__end_;
    if (v168.__end_ >= v168.__end_cap_.__value_)
    {
      v150 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3);
      v151 = v150 + 1;
      if (v150 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) > v151)
        v151 = 0x5555555555555556 * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_cap_.__value_ - (char *)v168.__begin_) >> 3) >= 0x555555555555555)
        v152 = 0xAAAAAAAAAAAAAAALL;
      else
        v152 = v151;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v168.__end_cap_;
      if (v152)
        v153 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v168.__end_cap_, v152);
      else
        v153 = 0;
      v154 = v153 + v150;
      __v.__first_ = v153;
      __v.__begin_ = v154;
      __v.__end_cap_.__value_ = &v153[v152];
      v155 = *(_OWORD *)__p;
      v154->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v154->__r_.__value_.__l.__data_ = v155;
      __p[1] = 0;
      v167 = 0;
      __p[0] = 0;
      __v.__end_ = v154 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v168, &__v);
      v156 = v168.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v168.__end_ = v156;
      if (SHIBYTE(v167) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v149 = *(_OWORD *)__p;
      v168.__end_->__r_.__value_.__r.__words[2] = v167;
      *(_OWORD *)&v148->__r_.__value_.__l.__data_ = v149;
      v168.__end_ = v148 + 1;
    }
  }
  begin = v168.__begin_;
  if (v168.__begin_ == v168.__end_)
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
  else
  {
    v158 = (char *)v168.__end_ - (char *)v168.__begin_;
    if ((std::vector<std::string>::pointer)((char *)v168.__end_ - (char *)v168.__begin_) == (std::vector<std::string>::pointer)24)
    {
      if (SHIBYTE(v168.__begin_->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(a2, v168.__begin_->__r_.__value_.__l.__data_, v168.__begin_->__r_.__value_.__l.__size_);
      }
      else
      {
        v159 = *(_OWORD *)&v168.__begin_->__r_.__value_.__l.__data_;
        a2->__r_.__value_.__r.__words[2] = v168.__begin_->__r_.__value_.__r.__words[2];
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v159;
      }
    }
    else
    {
      a2->__r_.__value_.__r.__words[0] = 0;
      a2->__r_.__value_.__l.__size_ = 0;
      a2->__r_.__value_.__r.__words[2] = 0;
      if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(a2, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
        v158 = (char *)v168.__end_ - (char *)v168.__begin_;
      }
      else
      {
        v160 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
        a2->__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v160;
      }
      if (0xAAAAAAAAAAAAAAABLL * (v158 >> 3) >= 2)
      {
        v161 = 0;
        v162 = 1;
        do
        {
          std::string::append(a2, ",", 1uLL);
          v163 = SHIBYTE(v168.__begin_[v161 + 1].__r_.__value_.__r.__words[2]);
          if (v163 >= 0)
            data = &v168.__begin_[v161 + 1];
          else
            data = (std::string *)v168.__begin_[v161 + 1].__r_.__value_.__l.__data_;
          if (v163 >= 0)
            size = HIBYTE(v168.__begin_[v161 + 1].__r_.__value_.__r.__words[2]);
          else
            size = v168.__begin_[v161 + 1].__r_.__value_.__l.__size_;
          std::string::append(a2, (const std::string::value_type *)data, size);
          ++v162;
          ++v161;
        }
        while (v162 < 0xAAAAAAAAAAAAAAABLL * (((char *)v168.__end_ - (char *)v168.__begin_) >> 3));
      }
    }
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v168;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1BF132254(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, char a8, uint64_t a9, char *__pa, std::__split_buffer<std::string> *a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a19);
  if (a15 < 0)
    operator delete(__pa);
  __pa = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

uint64_t SDPMedia::SDPMedia(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_1E78E2050;
  *(_DWORD *)(a1 + 12) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = a1 + 40;
  *(_QWORD *)(a1 + 48) = a1 + 40;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = a1 + 88;
  *(_QWORD *)(a1 + 96) = a1 + 88;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 112;
  *(_QWORD *)(a1 + 120) = a1 + 112;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 136;
  *(_QWORD *)(a1 + 144) = a1 + 136;
  *(_QWORD *)(a1 + 152) = 0;
  SDPPreconditionTable::SDPPreconditionTable((SDPPreconditionTable *)(a1 + 160), 1);
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  return a1;
}

void sub_1BF132408(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  unsigned int *v4;
  uint64_t *v5;
  unsigned int *v6;

  v6 = v4;
  std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::clear(v6);
  std::__list_imp<SDPRepeatTime>::clear(v5);
  std::__list_imp<SDPRepeatTime>::clear(v3);
  if (*(char *)(v1 + 87) < 0)
    operator delete(*(void **)(v1 + 64));
  std::__list_imp<SDPRepeatTime>::clear(v2);
  _Unwind_Resume(a1);
}

void SDPMedia::SDPMedia(SDPMedia *this, const SDPMedia *a2, SDPModel *a3)
{
  char *v6;
  __int128 v7;
  _QWORD *i;
  _QWORD *v9;
  uint64_t v10;
  uint64_t j;
  char *v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *k;
  _QWORD *v16;
  uint64_t v17;

  *((_BYTE *)this + 8) = 1;
  *(_QWORD *)this = &off_1E78E2050;
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  v6 = (char *)this + 40;
  *((_QWORD *)this + 5) = (char *)this + 40;
  *((_QWORD *)this + 6) = (char *)this + 40;
  *((_QWORD *)this + 7) = 0;
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 4);
    *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
    *((_OWORD *)this + 4) = v7;
  }
  *((_QWORD *)this + 11) = (char *)this + 88;
  *((_QWORD *)this + 12) = (char *)this + 88;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = (char *)this + 112;
  *((_QWORD *)this + 15) = (char *)this + 112;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = (char *)this + 136;
  *((_QWORD *)this + 18) = (char *)this + 136;
  *((_QWORD *)this + 19) = 0;
  SDPPreconditionTable::SDPPreconditionTable((SDPMedia *)((char *)this + 160), (const SDPMedia *)((char *)a2 + 160));
  *((_BYTE *)this + 184) = *((_BYTE *)a2 + 184);
  *((_QWORD *)this + 24) = a3;
  for (i = (_QWORD *)*((_QWORD *)a2 + 12); i != (_QWORD *)((char *)a2 + 88); i = (_QWORD *)i[1])
  {
    v9 = std::__list_imp<SDPConnection>::__create_node[abi:ne180100]<SDPConnection const&>((uint64_t)this + 88, 0, 0, (uint64_t)(i + 2));
    v10 = *((_QWORD *)this + 11);
    *v9 = v10;
    v9[1] = (char *)this + 88;
    *(_QWORD *)(v10 + 8) = v9;
    *((_QWORD *)this + 11) = v9;
    ++*((_QWORD *)this + 13);
  }
  for (j = *((_QWORD *)a2 + 15); (const SDPMedia *)j != (const SDPMedia *)((char *)a2 + 112); j = *(_QWORD *)(j + 8))
  {
    v12 = (char *)operator new(0x38uLL);
    v12[24] = *(_BYTE *)(j + 24);
    *((_QWORD *)v12 + 2) = &off_1E78BFAB0;
    v13 = *(_OWORD *)(j + 28);
    *(_OWORD *)(v12 + 38) = *(_OWORD *)(j + 38);
    *(_OWORD *)(v12 + 28) = v13;
    v14 = *((_QWORD *)this + 14);
    *(_QWORD *)v12 = v14;
    *((_QWORD *)v12 + 1) = (char *)this + 112;
    *(_QWORD *)(v14 + 8) = v12;
    *((_QWORD *)this + 14) = v12;
    ++*((_QWORD *)this + 16);
  }
  for (k = (_QWORD *)*((_QWORD *)a2 + 6); k != (_QWORD *)((char *)a2 + 40); k = (_QWORD *)k[1])
  {
    v16 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>((uint64_t)v6, 0, 0, (uint64_t)(k + 2));
    v17 = *((_QWORD *)this + 5);
    *v16 = v17;
    v16[1] = v6;
    *(_QWORD *)(v17 + 8) = v16;
    *((_QWORD *)this + 5) = v16;
    ++*((_QWORD *)this + 7);
  }
  SDPMedia::copyAttributes(this, a2);
}

void sub_1BF132640(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<SDPRepeatTime>::clear(v1);
  _Unwind_Resume(a1);
}

void SDPMedia::copyAttributes(SDPMedia *this, const SDPMedia *a2)
{
  char *v4;
  uint64_t i;
  uint64_t v6;
  _QWORD v7[14];
  _QWORD *v8;

  std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::clear((unsigned int *)this + 34);
  v4 = (char *)a2 + 136;
  for (i = *((_QWORD *)a2 + 18); (char *)i != v4; i = *(_QWORD *)(i + 8))
  {
    v7[0] = this;
    v7[1] = this;
    v7[2] = this;
    v7[3] = this;
    v7[4] = this;
    v7[5] = this;
    v7[6] = this;
    v7[7] = this;
    v7[8] = this;
    v7[9] = this;
    v7[10] = this;
    v7[11] = this;
    v7[12] = this;
    v7[13] = this;
    v6 = *(unsigned int *)(i + 136);
    if ((_DWORD)v6 == -1)
      std::__throw_bad_variant_access[abi:ne180100]();
    v8 = v7;
    ((void (*)(_QWORD **, uint64_t))off_1E78E20B8[v6])(&v8, i + 16);
  }
}

void SDPMedia::SDPMedia(SDPMedia *this, const SDPMedia *a2)
{
  char *v4;
  __int128 v5;
  _QWORD *i;
  _QWORD *v7;
  uint64_t v8;
  uint64_t j;
  char *v10;
  __int128 v11;
  uint64_t v12;
  _QWORD *k;
  _QWORD *v14;
  uint64_t v15;

  *((_BYTE *)this + 8) = 1;
  *(_QWORD *)this = &off_1E78E2050;
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  v4 = (char *)this + 40;
  *((_QWORD *)this + 5) = (char *)this + 40;
  *((_QWORD *)this + 6) = (char *)this + 40;
  *((_QWORD *)this + 7) = 0;
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 4);
    *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
    *((_OWORD *)this + 4) = v5;
  }
  *((_QWORD *)this + 11) = (char *)this + 88;
  *((_QWORD *)this + 12) = (char *)this + 88;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = (char *)this + 112;
  *((_QWORD *)this + 15) = (char *)this + 112;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = (char *)this + 136;
  *((_QWORD *)this + 18) = (char *)this + 136;
  *((_QWORD *)this + 19) = 0;
  SDPPreconditionTable::SDPPreconditionTable((SDPMedia *)((char *)this + 160), (const SDPMedia *)((char *)a2 + 160));
  *((_BYTE *)this + 184) = *((_BYTE *)a2 + 184);
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  for (i = (_QWORD *)*((_QWORD *)a2 + 12); i != (_QWORD *)((char *)a2 + 88); i = (_QWORD *)i[1])
  {
    v7 = std::__list_imp<SDPConnection>::__create_node[abi:ne180100]<SDPConnection const&>((uint64_t)this + 88, 0, 0, (uint64_t)(i + 2));
    v8 = *((_QWORD *)this + 11);
    *v7 = v8;
    v7[1] = (char *)this + 88;
    *(_QWORD *)(v8 + 8) = v7;
    *((_QWORD *)this + 11) = v7;
    ++*((_QWORD *)this + 13);
  }
  for (j = *((_QWORD *)a2 + 15); (const SDPMedia *)j != (const SDPMedia *)((char *)a2 + 112); j = *(_QWORD *)(j + 8))
  {
    v10 = (char *)operator new(0x38uLL);
    v10[24] = *(_BYTE *)(j + 24);
    *((_QWORD *)v10 + 2) = &off_1E78BFAB0;
    v11 = *(_OWORD *)(j + 28);
    *(_OWORD *)(v10 + 38) = *(_OWORD *)(j + 38);
    *(_OWORD *)(v10 + 28) = v11;
    v12 = *((_QWORD *)this + 14);
    *(_QWORD *)v10 = v12;
    *((_QWORD *)v10 + 1) = (char *)this + 112;
    *(_QWORD *)(v12 + 8) = v10;
    *((_QWORD *)this + 14) = v10;
    ++*((_QWORD *)this + 16);
  }
  for (k = (_QWORD *)*((_QWORD *)a2 + 6); k != (_QWORD *)((char *)a2 + 40); k = (_QWORD *)k[1])
  {
    v14 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>((uint64_t)v4, 0, 0, (uint64_t)(k + 2));
    v15 = *((_QWORD *)this + 5);
    *v14 = v15;
    v14[1] = v4;
    *(_QWORD *)(v15 + 8) = v14;
    *((_QWORD *)this + 5) = v14;
    ++*((_QWORD *)this + 7);
  }
  SDPMedia::copyAttributes(this, a2);
}

void sub_1BF13294C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<SDPRepeatTime>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t SDPMedia::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  _QWORD *v5;
  uint64_t v6;
  uint64_t j;
  _QWORD *v8;
  uint64_t v9;
  uint64_t k;
  char *v11;
  __int128 v12;
  uint64_t v13;

  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    std::__list_imp<SDPRepeatTime>::clear((uint64_t *)(a1 + 40));
    for (i = *(_QWORD *)(a2 + 48); i != a2 + 40; i = *(_QWORD *)(i + 8))
    {
      v5 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(a1 + 40, 0, 0, i + 16);
      v6 = *(_QWORD *)(a1 + 40);
      *v5 = v6;
      v5[1] = a1 + 40;
      *(_QWORD *)(v6 + 8) = v5;
      *(_QWORD *)(a1 + 40) = v5;
      ++*(_QWORD *)(a1 + 56);
    }
    std::__list_imp<SDPRepeatTime>::clear((uint64_t *)(a1 + 88));
    for (j = *(_QWORD *)(a2 + 96); j != a2 + 88; j = *(_QWORD *)(j + 8))
    {
      v8 = std::__list_imp<SDPConnection>::__create_node[abi:ne180100]<SDPConnection const&>(a1 + 88, 0, 0, j + 16);
      v9 = *(_QWORD *)(a1 + 88);
      *v8 = v9;
      v8[1] = a1 + 88;
      *(_QWORD *)(v9 + 8) = v8;
      *(_QWORD *)(a1 + 88) = v8;
      ++*(_QWORD *)(a1 + 104);
    }
    std::__list_imp<SDPRepeatTime>::clear((uint64_t *)(a1 + 112));
    for (k = *(_QWORD *)(a2 + 120); k != a2 + 112; k = *(_QWORD *)(k + 8))
    {
      v11 = (char *)operator new(0x38uLL);
      v11[24] = *(_BYTE *)(k + 24);
      *((_QWORD *)v11 + 2) = &off_1E78BFAB0;
      v12 = *(_OWORD *)(k + 38);
      *(_OWORD *)(v11 + 28) = *(_OWORD *)(k + 28);
      *(_OWORD *)(v11 + 38) = v12;
      v13 = *(_QWORD *)(a1 + 112);
      *(_QWORD *)v11 = v13;
      *((_QWORD *)v11 + 1) = a1 + 112;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 112) = v11;
      ++*(_QWORD *)(a1 + 128);
    }
    SDPMedia::copyAttributes((SDPMedia *)a1, (const SDPMedia *)a2);
    std::vector<SDPPreconditionRow>::__assign_with_size[abi:ne180100]<SDPPreconditionRow*,SDPPreconditionRow*>((char *)(a1 + 160), *(char **)(a2 + 160), *(_QWORD *)(a2 + 168), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160)) >> 2));
  }
  return a1;
}

void SDPMedia::~SDPMedia(SDPMedia *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E78E2050;
  v2 = (void *)*((_QWORD *)this + 20);
  if (v2)
  {
    *((_QWORD *)this + 21) = v2;
    operator delete(v2);
  }
  std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::clear((unsigned int *)this + 34);
  std::__list_imp<SDPRepeatTime>::clear((uint64_t *)this + 14);
  std::__list_imp<SDPRepeatTime>::clear((uint64_t *)this + 11);
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  std::__list_imp<SDPRepeatTime>::clear((uint64_t *)this + 5);
}

{
  SDPMedia::~SDPMedia(this);
  JUMPOUT(0x1C3B87100);
}

void SDPMedia::toStream(SDPMedia *this, ImsOutStream *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *i;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *j;
  _BOOL4 isHeld;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 **v26;
  std::string v27;
  std::string v28;
  void *__p[2];
  __int128 v30;
  ImsOutStream *v31;
  ImsOutStream *v32;
  ImsOutStream *v33;

  v4 = (_QWORD *)*((_QWORD *)a2 + 1);
  LOBYTE(__p[0]) = 109;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)__p, 1);
  *((_BYTE *)a2 + 17) = 0;
  v5 = (_QWORD *)*((_QWORD *)a2 + 1);
  LOBYTE(__p[0]) = 61;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 1);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  v6 = (_QWORD *)*((_QWORD *)a2 + 1);
  v28.__r_.__value_.__s.__data_[0] = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v28, 1);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  if (*((_QWORD *)this + 3))
  {
    v7 = (_QWORD *)*((_QWORD *)a2 + 1);
    LOBYTE(__p[0]) = 47;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)__p, 1);
    *((_BYTE *)a2 + 17) = 0;
    std::ostream::operator<<();
    *((_BYTE *)a2 + 17) = 0;
  }
  v8 = (_QWORD *)*((_QWORD *)a2 + 1);
  LOBYTE(__p[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)__p, 1);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  if ((*((_DWORD *)this + 8) - 7) <= 1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" *", 2);
    *((_BYTE *)a2 + 17) = 0;
  }
  v9 = (char *)this + 40;
  v10 = *((_QWORD *)this + 6);
  if ((SDPMedia *)v10 != (SDPMedia *)((char *)this + 40))
  {
    do
    {
      if (*(_WORD *)(v10 + 24) != 255)
      {
        v11 = (_QWORD *)*((_QWORD *)a2 + 1);
        LOBYTE(__p[0]) = 32;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)__p, 1);
        *((_BYTE *)a2 + 17) = 0;
        std::ostream::operator<<();
        *((_BYTE *)a2 + 17) = 0;
      }
      v10 = *(_QWORD *)(v10 + 8);
    }
    while ((char *)v10 != v9);
  }
  if (*((_QWORD *)this + 2) || *((_DWORD *)this + 3) == 2)
  {
    v12 = *((unsigned __int8 *)this + 87);
    if ((v12 & 0x80u) != 0)
      v12 = *((_QWORD *)this + 9);
    if (v12)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\r\n", 2);
      *((_BYTE *)a2 + 17) = 0;
      v13 = (_QWORD *)*((_QWORD *)a2 + 1);
      LOBYTE(__p[0]) = 105;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)__p, 1);
      *((_BYTE *)a2 + 17) = 0;
      v14 = (_QWORD *)*((_QWORD *)a2 + 1);
      LOBYTE(__p[0]) = 61;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__p, 1);
      *((_BYTE *)a2 + 17) = 0;
      LoggableString::LoggableString((std::string *)__p, (const std::string *)((char *)this + 64));
      (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
      if (SBYTE7(v30) < 0)
        operator delete(__p[0]);
    }
    for (i = (_QWORD *)*((_QWORD *)this + 12); i != (_QWORD *)((char *)this + 88); i = (_QWORD *)*(v16 - 1))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\r\n", 2);
      *((_BYTE *)a2 + 17) = 0;
      v17 = i[2];
      v16 = i + 2;
      (*(void (**)(_QWORD *, ImsOutStream *))(v17 + 16))(v16, a2);
    }
    for (j = (_QWORD *)*((_QWORD *)this + 15); j != (_QWORD *)((char *)this + 112); j = (_QWORD *)j[1])
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\r\n", 2);
      *((_BYTE *)a2 + 17) = 0;
      isHeld = SDPModel::isHeld(*((SDPModel **)this + 24));
      SDPBandwidth::toStream((SDPBandwidth *)(j + 2), a2, isHeld);
    }
  }
  if (*((_BYTE *)this + 184) || *((_QWORD *)this + 2) || *((_DWORD *)this + 3) == 2)
  {
    v20 = *((_QWORD *)this + 6);
    if ((char *)v20 != v9)
    {
      while (*(_WORD *)(v20 + 24) == 255)
      {
LABEL_34:
        v20 = *(_QWORD *)(v20 + 8);
        if ((char *)v20 == v9)
          goto LABEL_38;
      }
      if (*(char *)(v20 + 103) < 0)
      {
        if (!*(_QWORD *)(v20 + 88))
          goto LABEL_32;
      }
      else if (!*(_BYTE *)(v20 + 103))
      {
LABEL_32:
        __p[0] = a2;
        __p[1] = a2;
        *(_QWORD *)&v30 = a2;
        *((_QWORD *)&v30 + 1) = a2;
        v31 = a2;
        v32 = a2;
        v21 = *(unsigned int *)(v20 + 232);
        if ((_DWORD)v21 == -1)
          goto LABEL_55;
        v28.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        ((void (*)(std::string *, uint64_t))off_1E78E2468[v21])(&v28, v20 + 112);
        goto LABEL_34;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\r\n", 2);
      *((_BYTE *)a2 + 17) = 0;
      SDPAttribute::toStream((SDPAttribute *)(v20 + 32), a2);
      goto LABEL_32;
    }
LABEL_38:
    if (*((_QWORD *)this + 2) || *((_DWORD *)this + 3) == 2)
    {
      v22 = *((_QWORD *)this + 18);
      if ((SDPMedia *)v22 != (SDPMedia *)((char *)this + 136))
      {
        while (1)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\r\n", 2);
          *((_BYTE *)a2 + 17) = 0;
          __p[0] = a2;
          __p[1] = a2;
          *(_QWORD *)&v30 = a2;
          *((_QWORD *)&v30 + 1) = a2;
          v31 = a2;
          v32 = a2;
          v33 = a2;
          v23 = *(unsigned int *)(v22 + 136);
          if ((_DWORD)v23 == -1)
            break;
          v28.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          ((void (*)(std::string *, uint64_t))off_1E78E2150[v23])(&v28, v22 + 16);
          v22 = *(_QWORD *)(v22 + 8);
          if ((SDPMedia *)v22 == (SDPMedia *)((char *)this + 136))
            goto LABEL_43;
        }
LABEL_55:
        std::__throw_bad_variant_access[abi:ne180100]();
      }
LABEL_43:
      v24 = *((_QWORD *)this + 20);
      v25 = *((_QWORD *)this + 21);
      v26 = (unsigned __int8 **)((char *)this + 160);
      while (v24 != v25)
      {
        if (*(int *)(v24 + 16) > 0)
        {
          v31 = 0;
          *(_OWORD *)__p = 0u;
          v30 = 0u;
          ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)__p, 1);
          operator<<((uint64_t)__p, v26);
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v30 + 1) + 8, &v27);
          __p[0] = &off_1E78D7A10;
          if ((_BYTE)v30 && __p[1])
            (*(void (**)(void *))(*(_QWORD *)__p[1] + 8))(__p[1]);
          LoggableString::LoggableString(&v28, &v27);
          (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &v28);
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v28.__r_.__value_.__l.__data_);
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v27.__r_.__value_.__l.__data_);
          return;
        }
        v24 += 20;
      }
    }
  }
}

void sub_1BF133148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,int a24,__int16 a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

_QWORD *SDPMedia::setPort(SDPMedia *this, uint64_t a2)
{
  __int16 v2;
  _QWORD *i;
  uint64_t v4;
  __int16 v5;
  _QWORD v7[3];

  v2 = a2;
  *((_QWORD *)this + 2) = a2;
  SDPMedia::mediaCandidateList(this, v7);
  for (i = (_QWORD *)v7[1]; i != v7; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (*(_WORD *)(v4 + 40) == 2)
      v5 = v2 + 1;
    else
      v5 = v2;
    *(_WORD *)(v4 + 72) = v5;
  }
  return std::__list_imp<unsigned long long>::clear(v7);
}

_QWORD *SDPMedia::mediaCandidateList@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;

  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  v2 = this + 17;
  v3 = this[18];
  if ((_QWORD *)v3 != this + 17)
  {
    v5 = 0;
    v6 = a2;
    do
    {
      if (*(_DWORD *)(v3 + 136) == 2)
      {
        this = operator new(0x18uLL);
        this[1] = a2;
        this[2] = v3 + 16;
        *this = v6;
        v6[1] = this;
        *a2 = this;
        ++v5;
        v6 = this;
        a2[2] = v5;
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while ((_QWORD *)v3 != v2);
  }
  return this;
}

void sub_1BF1332B8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<unsigned long long>::clear(v1);
  _Unwind_Resume(a1);
}

void SDPMedia::setPacketizationTime(SDPMedia *this, __int16 a2)
{
  char *v4;
  uint64_t v5;
  void *v6;
  void **v7;
  int v8;
  int v9;
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14[2];
  char v15;
  void *__p[2];
  void *v17;
  char v18;

  v4 = (char *)this + 136;
  v5 = *((_QWORD *)this + 18);
  if ((SDPMedia *)v5 != (SDPMedia *)((char *)this + 136))
  {
    while (1)
    {
      if (*(_DWORD *)(v5 + 136) != 13)
        goto LABEL_19;
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)(v5 + 16) + 32))(__p, v5 + 16);
      v6 = (void *)HIBYTE(v17);
      if (SHIBYTE(v17) < 0)
        v6 = __p[1];
      if (v6 != (void *)5)
        break;
      v7 = (void **)__p[0];
      if (SHIBYTE(v17) >= 0)
        v7 = __p;
      v8 = *(_DWORD *)v7;
      v9 = *((unsigned __int8 *)v7 + 4);
      v11 = v8 == 1835627632 && v9 == 101;
      if (SHIBYTE(v17) < 0)
        goto LABEL_17;
LABEL_18:
      if (v11)
      {
        *(_WORD *)(v5 + 56) = a2;
        return;
      }
LABEL_19:
      v5 = *(_QWORD *)(v5 + 8);
      if ((char *)v5 == v4)
        goto LABEL_20;
    }
    v11 = 0;
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      goto LABEL_18;
LABEL_17:
    operator delete(__p[0]);
    goto LABEL_18;
  }
LABEL_20:
  std::string::basic_string[abi:ne180100]<0>(v14, "ptime");
  SDPPacketizationTimeAttribute::SDPPacketizationTimeAttribute((uint64_t)__p, (uint64_t)v14, a2, 0);
  v12 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPPacketizationTimeAttribute>((uint64_t)v4, 0, 0, (const SDPPacketizationTimeAttribute *)__p);
  v12[1] = v4;
  v13 = *((_QWORD *)this + 17);
  *v12 = v13;
  *(_QWORD *)(v13 + 8) = v12;
  *((_QWORD *)this + 17) = v12;
  ++*((_QWORD *)this + 19);
  __p[0] = off_1E78ED0A8;
  if (v18 < 0)
    operator delete(v17);
  if (v15 < 0)
    operator delete(v14[0]);
}

void sub_1BF13343C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t SDPMedia::packetizationTime(SDPMedia *this)
{
  char *v1;
  uint64_t v2;
  unint64_t v3;
  void **v4;
  int v5;
  int v6;
  _BOOL4 v8;
  void *__p[2];
  unsigned __int8 v11;

  v1 = (char *)this + 136;
  v2 = *((_QWORD *)this + 18);
  if ((SDPMedia *)v2 == (SDPMedia *)((char *)this + 136))
    return 20;
  while (*(_DWORD *)(v2 + 136) != 13)
  {
LABEL_19:
    v2 = *(_QWORD *)(v2 + 8);
    if ((char *)v2 == v1)
      return 20;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)(v2 + 16) + 32))(__p, v2 + 16);
  v3 = v11;
  if ((v11 & 0x80u) != 0)
    v3 = (unint64_t)__p[1];
  if (v3 != 5)
  {
    v8 = 0;
    if (((char)v11 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_17;
  }
  v4 = (void **)__p[0];
  if ((v11 & 0x80u) == 0)
    v4 = __p;
  v5 = *(_DWORD *)v4;
  v6 = *((unsigned __int8 *)v4 + 4);
  v8 = v5 == 1835627632 && v6 == 101;
  if ((char)v11 < 0)
LABEL_17:
    operator delete(__p[0]);
LABEL_18:
  if (!v8)
    goto LABEL_19;
  return *(unsigned __int16 *)(v2 + 56);
}

void SDPMedia::setAcceptTypes(_QWORD *a1, __int128 **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void **v7;
  void *v8;
  int v9;
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  unsigned __int8 v15;

  v4 = (uint64_t)(a1 + 17);
  v5 = a1[18];
  if ((_QWORD *)v5 == a1 + 17)
  {
LABEL_20:
    SDPMediaAcceptTypes::SDPMediaAcceptTypes((uint64_t)__p, a2);
    v12 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaAcceptTypes>(v4, 0, 0, (const SDPMediaAcceptTypes *)__p);
    v12[1] = v4;
    v13 = a1[17];
    *v12 = v13;
    *(_QWORD *)(v13 + 8) = v12;
    a1[17] = v12;
    ++a1[19];
    SDPMediaAcceptTypes::~SDPMediaAcceptTypes(__p);
    return;
  }
  while (*(_DWORD *)(v5 + 136) != 15)
  {
LABEL_19:
    v5 = *(_QWORD *)(v5 + 8);
    if (v5 == v4)
      goto LABEL_20;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)(v5 + 16) + 32))(__p, v5 + 16);
  v6 = v15;
  if ((v15 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  if (v6 != 12)
  {
    v11 = 0;
    if (((char)v15 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_17;
  }
  v7 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v7 = __p;
  v8 = *v7;
  v9 = *((_DWORD *)v7 + 2);
  v11 = v8 == (void *)0x742D747065636361 && v9 == 1936027769;
  if ((char)v15 < 0)
LABEL_17:
    operator delete(__p[0]);
LABEL_18:
  if (!v11)
    goto LABEL_19;
  if ((__int128 **)(v5 + 56) != a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v5 + 56), (std::string *)*a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
}

void sub_1BF1336C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  SDPMediaAcceptTypes::~SDPMediaAcceptTypes(&a9);
  _Unwind_Resume(a1);
}

void SDPMedia::acceptTypes(SDPMedia *this@<X0>, std::string *a2@<X8>)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  void **v6;
  void *v7;
  int v8;
  BOOL v10;
  void *__p[2];
  unsigned __int8 v12;

  v3 = (char *)this + 136;
  v4 = *((_QWORD *)this + 18);
  if ((SDPMedia *)v4 == (SDPMedia *)((char *)this + 136))
  {
LABEL_20:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  while (*(_DWORD *)(v4 + 136) != 15)
  {
LABEL_19:
    v4 = *(_QWORD *)(v4 + 8);
    if ((char *)v4 == v3)
      goto LABEL_20;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)(v4 + 16) + 32))(__p, v4 + 16);
  v5 = v12;
  if ((v12 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  if (v5 != 12)
  {
    v10 = 0;
    if (((char)v12 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_17;
  }
  v6 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v6 = __p;
  v7 = *v6;
  v8 = *((_DWORD *)v6 + 2);
  v10 = v7 == (void *)0x742D747065636361 && v8 == 1936027769;
  if ((char)v12 < 0)
LABEL_17:
    operator delete(__p[0]);
LABEL_18:
  if (!v10)
    goto LABEL_19;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, *(__int128 **)(v4 + 56), *(__int128 **)(v4 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56)) >> 3));
}

void SDPMedia::setAcceptWrappedTypes(_QWORD *a1, __int128 **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void **v7;
  void *v8;
  void *v9;
  int v10;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  void *__p[2];
  unsigned __int8 v17;

  v4 = (uint64_t)(a1 + 17);
  v5 = a1[18];
  if ((_QWORD *)v5 == a1 + 17)
  {
LABEL_23:
    SDPMediaAcceptWrappedTypes::SDPMediaAcceptWrappedTypes((uint64_t)__p, a2);
    v14 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaAcceptWrappedTypes>(v4, 0, 0, (const SDPMediaAcceptWrappedTypes *)__p);
    v14[1] = v4;
    v15 = a1[17];
    *v14 = v15;
    *(_QWORD *)(v15 + 8) = v14;
    a1[17] = v14;
    ++a1[19];
    SDPMediaAcceptWrappedTypes::~SDPMediaAcceptWrappedTypes(__p);
    return;
  }
  while (*(_DWORD *)(v5 + 136) != 16)
  {
LABEL_22:
    v5 = *(_QWORD *)(v5 + 8);
    if (v5 == v4)
      goto LABEL_23;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)(v5 + 16) + 32))(__p, v5 + 16);
  v6 = v17;
  if ((v17 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  if (v6 != 20)
  {
    v13 = 0;
    if (((char)v17 & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
  v7 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v7 = __p;
  v8 = *v7;
  v9 = v7[1];
  v10 = *((_DWORD *)v7 + 4);
  v13 = v8 == (void *)0x772D747065636361 && v9 == (void *)0x742D646570706172 && v10 == 1936027769;
  if ((char)v17 < 0)
LABEL_20:
    operator delete(__p[0]);
LABEL_21:
  if (!v13)
    goto LABEL_22;
  if ((__int128 **)(v5 + 56) != a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v5 + 56), (std::string *)*a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
}

void sub_1BF133974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  SDPMediaAcceptWrappedTypes::~SDPMediaAcceptWrappedTypes(&a9);
  _Unwind_Resume(a1);
}

void SDPMedia::acceptWrappedTypes(SDPMedia *this@<X0>, std::string *a2@<X8>)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  void **v6;
  void *v7;
  void *v8;
  int v9;
  BOOL v12;
  void *__p[2];
  unsigned __int8 v14;

  v3 = (char *)this + 136;
  v4 = *((_QWORD *)this + 18);
  if ((SDPMedia *)v4 == (SDPMedia *)((char *)this + 136))
  {
LABEL_23:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  while (*(_DWORD *)(v4 + 136) != 16)
  {
LABEL_22:
    v4 = *(_QWORD *)(v4 + 8);
    if ((char *)v4 == v3)
      goto LABEL_23;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)(v4 + 16) + 32))(__p, v4 + 16);
  v5 = v14;
  if ((v14 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  if (v5 != 20)
  {
    v12 = 0;
    if (((char)v14 & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
  v6 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v6 = __p;
  v7 = *v6;
  v8 = v6[1];
  v9 = *((_DWORD *)v6 + 4);
  v12 = v7 == (void *)0x772D747065636361 && v8 == (void *)0x742D646570706172 && v9 == 1936027769;
  if ((char)v14 < 0)
LABEL_20:
    operator delete(__p[0]);
LABEL_21:
  if (!v12)
    goto LABEL_22;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, *(__int128 **)(v4 + 56), *(__int128 **)(v4 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56)) >> 3));
}

void SDPMedia::setPath(SDPMedia *this, const LazuliRouteSet *a2)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  void **v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  void *__p[2];
  unsigned __int8 v12;

  v4 = (char *)this + 136;
  v5 = *((_QWORD *)this + 18);
  if ((SDPMedia *)v5 == (SDPMedia *)((char *)this + 136))
  {
LABEL_14:
    SDPMediaPath::SDPMediaPath((SDPMediaPath *)__p, a2);
    v9 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaPath>((uint64_t)v4, 0, 0, (const SDPMediaPath *)__p);
    v9[1] = v4;
    v10 = *((_QWORD *)this + 17);
    *v9 = v10;
    *(_QWORD *)(v10 + 8) = v9;
    *((_QWORD *)this + 17) = v9;
    ++*((_QWORD *)this + 19);
    SDPMediaPath::~SDPMediaPath(__p);
    return;
  }
  while (*(_DWORD *)(v5 + 136) != 14)
  {
LABEL_13:
    v5 = *(_QWORD *)(v5 + 8);
    if ((char *)v5 == v4)
      goto LABEL_14;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)(v5 + 16) + 32))(__p, v5 + 16);
  v6 = v12;
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  if (v6 != 4)
  {
    v8 = 0;
    if (((char)v12 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  v7 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  v8 = *(_DWORD *)v7 == 1752457584;
  if ((char)v12 < 0)
LABEL_11:
    operator delete(__p[0]);
LABEL_12:
  if (!v8)
    goto LABEL_13;
  LazuliRouteSet::operator=((LazuliRouteSet *)(v5 + 56), a2);
}

void sub_1BF133BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  SDPMediaPath::~SDPMediaPath(&a9);
  _Unwind_Resume(a1);
}

void SDPMedia::path(SDPMedia *this@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  void **v6;
  BOOL v7;
  void *__p[2];
  unsigned __int8 v9;

  v3 = (char *)this + 136;
  v4 = *((_QWORD *)this + 18);
  if ((SDPMedia *)v4 == (SDPMedia *)((char *)this + 136))
  {
LABEL_14:
    *(_QWORD *)a2 = &off_1E78EF3C0;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    return;
  }
  while (*(_DWORD *)(v4 + 136) != 14)
  {
LABEL_13:
    v4 = *(_QWORD *)(v4 + 8);
    if ((char *)v4 == v3)
      goto LABEL_14;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)(v4 + 16) + 32))(__p, v4 + 16);
  v5 = v9;
  if ((v9 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  if (v5 != 4)
  {
    v7 = 0;
    if (((char)v9 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  v6 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v6 = __p;
  v7 = *(_DWORD *)v6 == 1752457584;
  if ((char)v9 < 0)
LABEL_11:
    operator delete(__p[0]);
LABEL_12:
  if (!v7)
    goto LABEL_13;
  LazuliRouteSet::LazuliRouteSet((LazuliRouteSet *)a2, (const LazuliRouteSet *)(v4 + 56));
}

void SDPMedia::setSetupState(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void **v7;
  int v8;
  int v9;
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  unsigned __int8 v15;

  v4 = (uint64_t)(a1 + 17);
  v5 = a1[18];
  if ((_QWORD *)v5 == a1 + 17)
  {
LABEL_20:
    SDPMediaSetup::SDPMediaSetup((uint64_t)__p, a2);
    v12 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaSetup>(v4, 0, 0, (uint64_t)__p);
    v12[1] = v4;
    v13 = a1[17];
    *v12 = v13;
    *(_QWORD *)(v13 + 8) = v12;
    a1[17] = v12;
    ++a1[19];
    SDPMediaSetup::~SDPMediaSetup(__p);
    return;
  }
  while (*(_DWORD *)(v5 + 136) != 17)
  {
LABEL_19:
    v5 = *(_QWORD *)(v5 + 8);
    if (v5 == v4)
      goto LABEL_20;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)(v5 + 16) + 32))(__p, v5 + 16);
  v6 = v15;
  if ((v15 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  if (v6 != 5)
  {
    v11 = 0;
    if (((char)v15 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_17;
  }
  v7 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v7 = __p;
  v8 = *(_DWORD *)v7;
  v9 = *((unsigned __int8 *)v7 + 4);
  v11 = v8 == 1970562419 && v9 == 112;
  if ((char)v15 < 0)
LABEL_17:
    operator delete(__p[0]);
LABEL_18:
  if (!v11)
    goto LABEL_19;
  std::string::operator=((std::string *)(v5 + 56), (const std::string *)a2);
}

void sub_1BF133E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  SDPMediaSetup::~SDPMediaSetup(&a9);
  _Unwind_Resume(a1);
}

void SDPMedia::setupState(SDPMedia *this@<X0>, std::string *a2@<X8>)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  void **v6;
  int v7;
  int v8;
  _BOOL4 v10;
  __int128 v11;
  void *__p[2];
  unsigned __int8 v13;

  v3 = (char *)this + 136;
  v4 = *((_QWORD *)this + 18);
  if ((SDPMedia *)v4 == (SDPMedia *)((char *)this + 136))
  {
LABEL_20:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  while (*(_DWORD *)(v4 + 136) != 17)
  {
LABEL_19:
    v4 = *(_QWORD *)(v4 + 8);
    if ((char *)v4 == v3)
      goto LABEL_20;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)(v4 + 16) + 32))(__p, v4 + 16);
  v5 = v13;
  if ((v13 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  if (v5 != 5)
  {
    v10 = 0;
    if (((char)v13 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_17;
  }
  v6 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v6 = __p;
  v7 = *(_DWORD *)v6;
  v8 = *((unsigned __int8 *)v6 + 4);
  v10 = v7 == 1970562419 && v8 == 112;
  if ((char)v13 < 0)
LABEL_17:
    operator delete(__p[0]);
LABEL_18:
  if (!v10)
    goto LABEL_19;
  if (*(char *)(v4 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v4 + 56), *(_QWORD *)(v4 + 64));
  }
  else
  {
    v11 = *(_OWORD *)(v4 + 56);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 72);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v11;
  }
}

void SDPMedia::setFingerprint(_QWORD *a1, __int128 *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void **v9;
  void *v10;
  uint64_t v11;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  void *__p[2];
  unsigned __int8 v17;

  v6 = (uint64_t)(a1 + 17);
  v7 = a1[18];
  if ((_QWORD *)v7 == a1 + 17)
  {
LABEL_20:
    SDPMediaFingerprint::SDPMediaFingerprint((uint64_t)__p, a2, a3);
    v14 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaFingerprint>(v6, 0, 0, (uint64_t)__p);
    v14[1] = v6;
    v15 = a1[17];
    *v14 = v15;
    *(_QWORD *)(v15 + 8) = v14;
    a1[17] = v14;
    ++a1[19];
    SDPMediaFingerprint::~SDPMediaFingerprint(__p);
    return;
  }
  while (*(_DWORD *)(v7 + 136) != 18)
  {
LABEL_19:
    v7 = *(_QWORD *)(v7 + 8);
    if (v7 == v6)
      goto LABEL_20;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)(v7 + 16) + 32))(__p, v7 + 16);
  v8 = v17;
  if ((v17 & 0x80u) != 0)
    v8 = (unint64_t)__p[1];
  if (v8 != 11)
  {
    v13 = 0;
    if (((char)v17 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_17;
  }
  v9 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v9 = __p;
  v10 = *v9;
  v11 = *(uint64_t *)((char *)v9 + 3);
  v13 = v10 == (void *)0x72707265676E6966 && v11 == 0x746E697270726567;
  if ((char)v17 < 0)
LABEL_17:
    operator delete(__p[0]);
LABEL_18:
  if (!v13)
    goto LABEL_19;
  std::string::operator=((std::string *)(v7 + 56), (const std::string *)a2);
  std::string::operator=((std::string *)(v7 + 80), (const std::string *)a3);
}

void sub_1BF1340CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  SDPMediaFingerprint::~SDPMediaFingerprint((void **)va);
  _Unwind_Resume(a1);
}

void SDPMedia::setMaxPacketizationTime(SDPMedia *this, __int16 a2)
{
  char *v4;
  uint64_t v5;
  void *v6;
  void **v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11[2];
  char v12;
  void *__p[2];
  void *v14;
  char v15;

  v4 = (char *)this + 136;
  v5 = *((_QWORD *)this + 18);
  if ((SDPMedia *)v5 != (SDPMedia *)((char *)this + 136))
  {
    while (1)
    {
      if (*(_DWORD *)(v5 + 136) != 13)
        goto LABEL_13;
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)(v5 + 16) + 32))(__p, v5 + 16);
      v6 = (void *)HIBYTE(v14);
      if (SHIBYTE(v14) < 0)
        v6 = __p[1];
      if (v6 != (void *)8)
        break;
      v7 = (void **)__p[0];
      if (SHIBYTE(v14) >= 0)
        v7 = __p;
      v8 = *v7 == (void *)0x656D69747078616DLL;
      if (SHIBYTE(v14) < 0)
        goto LABEL_11;
LABEL_12:
      if (v8)
      {
        *(_WORD *)(v5 + 56) = a2;
        return;
      }
LABEL_13:
      v5 = *(_QWORD *)(v5 + 8);
      if ((char *)v5 == v4)
        goto LABEL_14;
    }
    v8 = 0;
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      goto LABEL_12;
LABEL_11:
    operator delete(__p[0]);
    goto LABEL_12;
  }
LABEL_14:
  std::string::basic_string[abi:ne180100]<0>(v11, "maxptime");
  SDPPacketizationTimeAttribute::SDPPacketizationTimeAttribute((uint64_t)__p, (uint64_t)v11, a2, 1);
  v9 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPPacketizationTimeAttribute>((uint64_t)v4, 0, 0, (const SDPPacketizationTimeAttribute *)__p);
  v9[1] = v4;
  v10 = *((_QWORD *)this + 17);
  *v9 = v10;
  *(_QWORD *)(v10 + 8) = v9;
  *((_QWORD *)this + 17) = v9;
  ++*((_QWORD *)this + 19);
  __p[0] = off_1E78ED0A8;
  if (v15 < 0)
    operator delete(v14);
  if (v12 < 0)
    operator delete(v11[0]);
}

void sub_1BF13424C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t SDPMedia::maxPacketizationTime(SDPMedia *this)
{
  char *v1;
  uint64_t v2;
  unint64_t v3;
  void **v4;
  _BOOL4 v5;
  void *__p[2];
  unsigned __int8 v8;

  v1 = (char *)this + 136;
  v2 = *((_QWORD *)this + 18);
  if ((SDPMedia *)v2 == (SDPMedia *)((char *)this + 136))
    return 0;
  while (*(_DWORD *)(v2 + 136) != 13)
  {
LABEL_13:
    v2 = *(_QWORD *)(v2 + 8);
    if ((char *)v2 == v1)
      return 0;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)(v2 + 16) + 32))(__p, v2 + 16);
  v3 = v8;
  if ((v8 & 0x80u) != 0)
    v3 = (unint64_t)__p[1];
  if (v3 != 8)
  {
    v5 = 0;
    if (((char)v8 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  v4 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = __p;
  v5 = *v4 == (void *)0x656D69747078616DLL;
  if ((char)v8 < 0)
LABEL_11:
    operator delete(__p[0]);
LABEL_12:
  if (!v5)
    goto LABEL_13;
  return *(unsigned __int16 *)(v2 + 56);
}

void SDPMedia::addCandidateAttribute(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  std::string __p;
  void *v6[10];

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  SDPMediaCandidate::SDPMediaCandidate((uint64_t)v6, 1, &__p, *(_WORD *)(a1 + 16));
  v3 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaCandidate>(a1 + 136, 0, 0, (const SDPMediaCandidate *)v6);
  v3[1] = a1 + 136;
  v4 = *(_QWORD *)(a1 + 136);
  *v3 = v4;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(a1 + 136) = v3;
  ++*(_QWORD *)(a1 + 152);
  SDPMediaCandidate::~SDPMediaCandidate(v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF13441C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16)
{
  SDPMediaCandidate::~SDPMediaCandidate(&a16);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t SDPMedia::enableEncryption(uint64_t a1, uint64_t a2, char a3, char a4, char a5, int a6)
{
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24[2];
  char v25;
  void (**v26)(SDPMediaCrypto *__hidden);
  char v27;
  std::string __p;
  __int16 v29;
  _QWORD v30[3];
  char v31;
  char v32;
  char v33;
  char v34;
  std::string v35;

  v6 = *(unsigned __int8 *)(a2 + 23);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (v6 != 23)
    return 0;
  v8 = v7 >= 0 ? (uint64_t *)a2 : *(uint64_t **)a2;
  v9 = *v8;
  v10 = v8[1];
  v11 = *(uint64_t *)((char *)v8 + 15);
  v12 = v9 == 0x315F4D435F534541 && v10 == 0x5F43414D485F3832;
  if (!v12 || v11 != 0x30385F314148535FLL)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(&v35, "crypto");
  v27 = 1;
  v26 = (void (**)(SDPMediaCrypto *__hidden))off_1E78ED0A8;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
  }
  else
  {
    __p = v35;
  }
  v26 = &off_1E78E2A68;
  v29 = 1;
  std::vector<unsigned char>::vector(v30, 0x1EuLL);
  v31 = 1;
  v32 = a3 ^ 1;
  v33 = a4 ^ 1;
  v34 = a5 ^ 1;
  v20 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaCrypto>(a1 + 136, 0, 0, (const SDPMediaCrypto *)&v26);
  v20[1] = a1 + 136;
  v21 = *(_QWORD *)(a1 + 136);
  *v20 = v21;
  *(_QWORD *)(v21 + 8) = v20;
  *(_QWORD *)(a1 + 136) = v20;
  ++*(_QWORD *)(a1 + 152);
  SDPMediaCrypto::~SDPMediaCrypto((SDPMediaCrypto *)&v26);
  *(_DWORD *)(a1 + 32) = 4;
  if (a6)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "requested");
    SDPMediaEndToAccessEdgeProtection::SDPMediaEndToAccessEdgeProtection((uint64_t)&v26, (uint64_t **)v24);
    v22 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaEndToAccessEdgeProtection const&>(a1 + 136, 0, 0, (const SDPMediaEndToAccessEdgeProtection *)&v26);
    v22[1] = a1 + 136;
    v23 = *(_QWORD *)(a1 + 136);
    *v22 = v23;
    *(_QWORD *)(v23 + 8) = v22;
    *(_QWORD *)(a1 + 136) = v22;
    ++*(_QWORD *)(a1 + 152);
    v26 = (void (**)(SDPMediaCrypto *__hidden))off_1E78ED0A8;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v25 < 0)
      operator delete(v24[0]);
  }
  return 1;
}

void sub_1BF134674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 65) < 0)
    operator delete(*(void **)(v22 - 88));
  _Unwind_Resume(exception_object);
}

void SDPMedia::removePreconditions(SDPMedia *this)
{
  void *__p;
  _BYTE *v3;

  SDPPreconditionTable::SDPPreconditionTable((SDPPreconditionTable *)&__p, 1);
  if ((void **)((char *)this + 160) != &__p)
    std::vector<SDPPreconditionRow>::__assign_with_size[abi:ne180100]<SDPPreconditionRow*,SDPPreconditionRow*>((char *)this + 160, (char *)__p, (uint64_t)v3, 0xCCCCCCCCCCCCCCCDLL * ((v3 - (_BYTE *)__p) >> 2));
  if (__p)
  {
    v3 = __p;
    operator delete(__p);
  }
}

void sub_1BF134754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SDPMedia::valid(SDPMedia *this)
{
  char *v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;

  v2 = (char *)this + 88;
  for (i = *((_QWORD *)this + 12); (char *)i != v2; i = *(_QWORD *)(i + 8))
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(i + 16) + 24))(i + 16) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v15, "sdp.media");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_34);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v12 = ImsLogger::debug(ims::_logger, (uint64_t)v15, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"SDPMedia::valid() Invalid connection", 36);
      *(_BYTE *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_26:
      *(_BYTE *)(v12 + 17) = 0;
      if (v14 < 0)
        operator delete(__p[0]);
      if (v16 < 0)
        operator delete(v15[0]);
      return 0;
    }
  }
  if (*((_DWORD *)this + 3) == 6)
  {
    v4 = *((_QWORD *)this + 18);
    if ((SDPMedia *)v4 != (SDPMedia *)((char *)this + 136))
    {
      while (1)
      {
        v5 = *(unsigned int *)(v4 + 136);
        if ((_DWORD)v5 == -1)
          goto LABEL_31;
        v15[0] = __p;
        if ((((uint64_t (*)(void **, uint64_t))off_1E78E21E8[v5])(v15, v4 + 16) & 1) == 0)
          break;
        v4 = *(_QWORD *)(v4 + 8);
        if ((SDPMedia *)v4 == (SDPMedia *)((char *)this + 136))
          goto LABEL_10;
      }
LABEL_25:
      std::string::basic_string[abi:ne180100]<0>(v15, "sdp.media");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_34);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v12 = ImsLogger::debug(ims::_logger, (uint64_t)v15, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"SDPMedia::valid() Invalid attribute", 35);
      *(_BYTE *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_26;
    }
  }
LABEL_10:
  v6 = *((_QWORD *)this + 18);
  if ((SDPMedia *)v6 != (SDPMedia *)((char *)this + 136))
  {
    while (1)
    {
      v7 = *(unsigned int *)(v6 + 136);
      if ((_DWORD)v7 == -1)
        break;
      v15[0] = __p;
      if ((((uint64_t (*)(void **, uint64_t))off_1E78E2280[v7])(v15, v6 + 16) & 1) == 0)
        goto LABEL_25;
      v6 = *(_QWORD *)(v6 + 8);
      if ((SDPMedia *)v6 == (SDPMedia *)((char *)this + 136))
        goto LABEL_14;
    }
LABEL_31:
    std::__throw_bad_variant_access[abi:ne180100]();
  }
LABEL_14:
  v8 = *((_QWORD *)this + 6);
  if ((SDPMedia *)v8 != (SDPMedia *)((char *)this + 40))
  {
    while (1)
    {
      v9 = *(unsigned int *)(v8 + 232);
      if ((_DWORD)v9 == -1)
        goto LABEL_31;
      v15[0] = __p;
      v10 = ((uint64_t (*)(void **, uint64_t))off_1E78E2318[v9])(v15, v8 + 112);
      if (*(unsigned __int16 *)(v8 + 24) > 0x7Fu || (v10 & 1) == 0)
        break;
      v8 = *(_QWORD *)(v8 + 8);
      if ((SDPMedia *)v8 == (SDPMedia *)((char *)this + 40))
        goto LABEL_19;
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "sdp.media");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_34);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v12 = ImsLogger::debug(ims::_logger, (uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"SDPMedia::valid() Invalid mediaInfo", 35);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_26;
  }
LABEL_19:
  if (*((_BYTE *)this + 8) && *((_DWORD *)this + 3))
    return *((_DWORD *)this + 8) != 0;
  return 0;
}

void sub_1BF134B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPMediaFormatInfo::SDPMediaFormatInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[6];
  _QWORD *v7;

  *(_QWORD *)a1 = &off_1E78E2080;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = &off_1E78EE990;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 56) = 255;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0x10000;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 96) = &off_1E78B8590;
  *(_WORD *)(a1 + 136) = 255;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v6[0] = a1;
  v6[1] = a1;
  v6[2] = a1;
  v6[3] = a1;
  v6[4] = a1;
  v6[5] = a1;
  v4 = *(unsigned int *)(a2 + 216);
  if ((_DWORD)v4 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v7 = v6;
  off_1E78E2348[v4]((int)&v7, (SDPMediaFormatUnknownParams *)(a2 + 96));
  return a1;
}

void sub_1BF134C90(_Unwind_Exception *a1)
{
  void **v1;
  unsigned int *v2;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor(v2);
  SDPMediaRTPMap::~SDPMediaRTPMap(v1);
  _Unwind_Resume(a1);
}

uint64_t SDPMediaFormatInfo::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[6];
  _QWORD *v7;

  if (a1 != a2)
  {
    *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
    v6[0] = a1;
    v6[1] = a1;
    v6[2] = a1;
    v6[3] = a1;
    v6[4] = a1;
    v6[5] = a1;
    v4 = *(unsigned int *)(a2 + 216);
    if ((_DWORD)v4 == -1)
      std::__throw_bad_variant_access[abi:ne180100]();
    v7 = v6;
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorI10overloadedIJZN18SDPMediaFormatInfoaSERKS7_E3__0ZNS7_aSES9_E3__1ZNS7_aSES9_E3__2ZNS7_aSES9_E3__3ZNS7_aSES9_E3__4ZNS7_aSES9_E3__5ZNS7_aSES9_E3__6EEEEJRKNS0_6__implIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEEEEEDcOT_DpOT0____fmatrix[v4]((int)&v7, (SDPMediaFormatUnknownParams *)(a2 + 96));
  }
  return a1;
}

void SDPMediaFormatInfo::~SDPMediaFormatInfo(SDPMediaFormatInfo *this)
{
  void **v1;

  *(_QWORD *)this = &off_1E78E2080;
  v1 = (void **)((char *)this + 16);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)this + 24);
  SDPMediaRTPMap::~SDPMediaRTPMap(v1);
}

{
  void **v1;

  *(_QWORD *)this = &off_1E78E2080;
  v1 = (void **)((char *)this + 16);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)this + 24);
  SDPMediaRTPMap::~SDPMediaRTPMap(v1);
  JUMPOUT(0x1C3B87100);
}

uint64_t SDPMediaFormatInfo::setPayloadType(SDPMediaFormatInfo *this, __int16 a2)
{
  uint64_t v2;
  _QWORD v4[6];
  __int16 v5;
  _QWORD *v6;

  v5 = a2;
  *((_WORD *)this + 4) = a2;
  if ((*((char *)this + 87) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 87))
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*((_QWORD *)this + 9))
LABEL_3:
    *((_WORD *)this + 28) = a2;
LABEL_4:
  v4[0] = &v5;
  v4[1] = &v5;
  v4[2] = &v5;
  v4[3] = &v5;
  v4[4] = &v5;
  v4[5] = &v5;
  v2 = *((unsigned int *)this + 54);
  if ((_DWORD)v2 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v6 = v4;
  return ((uint64_t (*)(_QWORD **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorI10overloadedIJZN18SDPMediaFormatInfo14setPayloadTypeEtE3__0ZNS7_14setPayloadTypeEtE3__1ZNS7_14setPayloadTypeEtE3__2ZNS7_14setPayloadTypeEtE3__3ZNS7_14setPayloadTypeEtE3__4ZNS7_14setPayloadTypeEtE3__5ZNS7_14setPayloadTypeEtE3__6EEEEJRNS0_6__implIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEEEEEDcOT_DpOT0____fmatrix[v2])(&v6, (char *)this + 96);
}

uint64_t SDPMediaFormatInfo::bandwidthAS(SDPMediaFormatInfo *this, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  void **v6;
  uint64_t v7;
  std::string::size_type v8;
  void *v9;
  void **v10;
  int v11;
  int v12;
  _BOOL4 v14;
  uint64_t v15;
  void *v16;
  void **v17;
  int v18;
  int v19;
  _BOOL4 v21;
  void *v22;
  void **v23;
  int v24;
  int v25;
  _BOOL4 v27;
  void *__p[2];
  void *v30[2];
  unsigned __int16 v31[16];
  __int128 v32;
  SDPMediaAMRSettings *v33[2];
  __int128 v34;
  uint64_t v35;
  unsigned __int8 v36;
  void **v37;

  v36 = a2;
  __p[0] = &v36;
  __p[1] = &v36;
  v30[0] = &v36;
  v30[1] = &v36;
  *(_QWORD *)v31 = &v36;
  *(_QWORD *)&v31[4] = &v36;
  v2 = *((unsigned int *)this + 54);
  if ((_DWORD)v2 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v37 = __p;
  v4 = ((uint64_t (*)(void ***, char *))off_1E78E2408[v2])(&v37, (char *)this + 96);
  if ((v5 & 1) != 0)
    return v4;
  if ((*((char *)this + 87) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 87))
    {
      v6 = (void **)((char *)this + 64);
      *(_OWORD *)__p = *((_OWORD *)this + 4);
      v30[0] = *((void **)this + 10);
      goto LABEL_9;
    }
    return 0;
  }
  v8 = *((_QWORD *)this + 9);
  if (!v8)
    return 0;
  v6 = (void **)((char *)this + 64);
  std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)this + 8), v8);
LABEL_9:
  v9 = (void *)HIBYTE(v30[0]);
  if (SHIBYTE(v30[0]) < 0)
    v9 = __p[1];
  if (v9 != (void *)3)
  {
    v14 = 0;
    if (SHIBYTE(v30[0]) < 0)
      goto LABEL_25;
LABEL_23:
    if (!v14)
      goto LABEL_26;
LABEL_24:
    v35 = 0;
    *(_OWORD *)v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    *(_OWORD *)v30 = 0u;
    memset(v31, 0, sizeof(v31));
    *(_OWORD *)__p = 0u;
    SDPMediaFormatEVSParams::SDPMediaFormatEVSParams((SDPMediaFormatEVSParams *)__p, 0);
    v15 = SDPMediaEVSSettings::evsBandwidthASValue(*(unint64_t *)&v31[12], (SDPMediaAMRSettings *)LOWORD(v33[0]), HIBYTE(v31[6]), v36);
    goto LABEL_66;
  }
  v10 = (void **)__p[0];
  if (SHIBYTE(v30[0]) >= 0)
    v10 = __p;
  v11 = *(unsigned __int16 *)v10;
  v12 = *((unsigned __int8 *)v10 + 2);
  v14 = v11 == 22085 && v12 == 83;
  if ((SHIBYTE(v30[0]) & 0x80000000) == 0)
    goto LABEL_23;
LABEL_25:
  operator delete(__p[0]);
  if (v14)
    goto LABEL_24;
LABEL_26:
  if (*((char *)this + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)this + 8), *((_QWORD *)this + 9));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v6;
    v30[0] = v6[2];
  }
  v16 = (void *)HIBYTE(v30[0]);
  if (SHIBYTE(v30[0]) < 0)
    v16 = __p[1];
  if (v16 != (void *)6)
  {
    v21 = 0;
    if ((SHIBYTE(v30[0]) & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
  v17 = (void **)__p[0];
  if (SHIBYTE(v30[0]) >= 0)
    v17 = __p;
  v18 = *(_DWORD *)v17;
  v19 = *((unsigned __int16 *)v17 + 2);
  v21 = v18 == 760368449 && v19 == 16983;
  if (SHIBYTE(v30[0]) < 0)
LABEL_43:
    operator delete(__p[0]);
LABEL_44:
  if (v21)
  {
    memset(v31, 0, sizeof(v31));
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v30 = 0u;
    SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)__p, 0);
    __p[0] = off_1E78E9958;
    v31[5] = 1;
    LOBYTE(v31[6]) = 0;
    LOBYTE(v31[9]) = 0;
    v31[10] = 2;
    LOBYTE(v31[11]) = 0;
    v31[12] = 2;
    LOBYTE(v31[13]) = 0;
    *(_DWORD *)&v31[14] = 0x1000000;
    *(_DWORD *)&v31[7] = 511;
    v15 = SDPMediaAMRSettings::amrBandwidthASValue((SDPMediaAMRSettings *)0x1FF, 1, v36, 0);
    goto LABEL_66;
  }
  if (*((char *)this + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)this + 8), *((_QWORD *)this + 9));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v6;
    v30[0] = v6[2];
  }
  v22 = (void *)HIBYTE(v30[0]);
  if (SHIBYTE(v30[0]) < 0)
    v22 = __p[1];
  if (v22 != (void *)3)
  {
    v27 = 0;
    if ((SHIBYTE(v30[0]) & 0x80000000) == 0)
      goto LABEL_64;
    goto LABEL_63;
  }
  v23 = (void **)__p[0];
  if (SHIBYTE(v30[0]) >= 0)
    v23 = __p;
  v24 = *(unsigned __int16 *)v23;
  v25 = *((unsigned __int8 *)v23 + 2);
  v27 = v24 == 19777 && v25 == 82;
  if (SHIBYTE(v30[0]) < 0)
LABEL_63:
    operator delete(__p[0]);
LABEL_64:
  if (!v27)
    return 0;
  memset(v31, 0, sizeof(v31));
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v30 = 0u;
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)__p, 0);
  __p[0] = off_1E78E9958;
  v31[5] = 0;
  LOBYTE(v31[6]) = 0;
  LOBYTE(v31[9]) = 0;
  v31[10] = 2;
  LOBYTE(v31[11]) = 0;
  v31[12] = 2;
  LOBYTE(v31[13]) = 0;
  *(_DWORD *)&v31[14] = 0x1000000;
  *(_DWORD *)&v31[7] = 255;
  v15 = SDPMediaAMRSettings::amrBandwidthASValue((SDPMediaAMRSettings *)0xFF, 0, v36, 0);
LABEL_66:
  v7 = v15;
  __p[0] = off_1E78ED0A8;
  if (SHIBYTE(v31[3]) < 0)
    operator delete(v30[0]);
  return v7;
}

void sub_1BF1351E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPMediaFormatInfo::setSDPMediaFormatParams(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[6];
  _QWORD *v5;

  v4[0] = a1;
  v4[1] = a1;
  v4[2] = a1;
  v4[3] = a1;
  v4[4] = a1;
  v4[5] = a1;
  v2 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v2 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v5 = v4;
  return ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100INS1_9__variant15__value_visitorI10overloadedIJZN18SDPMediaFormatInfo23setSDPMediaFormatParamsERKNS_7variantIJ27SDPMediaFormatUnknownParams23SDPMediaFormatAMRParams23SDPMediaFormatEVSParams24SDPMediaFormatDTMFParams23SDPMediaFormatTTYParams26SDPMediaFormatTTYRedParamsEEEE3__0ZNS7_23setSDPMediaFormatParamsESH_E3__1ZNS7_23setSDPMediaFormatParamsESH_E3__2ZNS7_23setSDPMediaFormatParamsESH_E3__3ZNS7_23setSDPMediaFormatParamsESH_E3__4ZNS7_23setSDPMediaFormatParamsESH_E3__5ZNS7_23setSDPMediaFormatParamsESH_E3__6EEEEJRKNS0_6__implIJS9_SA_SB_SC_SD_SE_EEEEEEDcOT_DpOT0____fmatrix[v2])(&v5);
}

void SDPMedia::addSDPConnection(SDPMedia *this, const SDPConnection *a2)
{
  char *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[5];
  char v7;

  v3 = (char *)this + 88;
  SDPConnection::SDPConnection((uint64_t)v6, (uint64_t)a2);
  v4 = std::__list_imp<SDPConnection>::__create_node[abi:ne180100]<SDPConnection>((uint64_t)v3, 0, 0, (uint64_t)v6);
  v4[1] = v3;
  v5 = *((_QWORD *)this + 11);
  *v4 = v5;
  *(_QWORD *)(v5 + 8) = v4;
  *((_QWORD *)this + 11) = v4;
  ++*((_QWORD *)this + 13);
  v6[0] = off_1E78D19C0;
  if (v7 < 0)
    operator delete((void *)v6[3]);
}

void sub_1BF1352E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SDPMedia::validConnection(SDPMedia *this@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  uint64_t i;
  void (**v5)(SDPConnection *__hidden);
  __int128 v6;
  void *__p[2];
  __int128 v8;

  v3 = (char *)this + 88;
  for (i = *((_QWORD *)this + 12); (char *)i != v3; i = *(_QWORD *)(i + 8))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(i + 16) + 24))(i + 16))
    {
      SDPConnection::SDPConnection(a2, i + 16);
      *(_BYTE *)(a2 + 56) = 1;
      return;
    }
  }
  v6 = 0u;
  LOBYTE(v6) = 1;
  v5 = off_1E78D19C0;
  __p[0] = 0;
  __p[1] = 0;
  v8 = 0uLL;
  SDPConnection::SDPConnection(a2, (uint64_t)&v5);
  *(_BYTE *)(a2 + 56) = 0;
  v5 = off_1E78D19C0;
  if (SBYTE7(v8) < 0)
    operator delete(__p[0]);
}

void sub_1BF1353D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPMedia::validateRemoteAddress(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  const void *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  const void *v10;
  size_t v11;
  char *v13;
  void *v14;
  char *v15;
  char *v16;
  uint64_t result;

  v2 = a1 + 88;
  v3 = *(_QWORD *)(a1 + 96);
  if (v3 == a1 + 88)
    return 0;
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (unint64_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  while (1)
  {
    v7 = (char *)(v3 + 40);
    v8 = *(unsigned __int8 *)(v3 + 63);
    v9 = v8;
    v10 = (const void *)(v3 + 40);
    if (*(char *)(v3 + 63) < 0)
    {
      v10 = *(const void **)(v3 + 40);
      v9 = *(_QWORD *)(v3 + 48);
    }
    v11 = v5 >= v9 ? v9 : v5;
    if (memcmp(v10, v6, v11) || v5 != v9)
      break;
LABEL_27:
    v3 = *(_QWORD *)(v3 + 8);
    if (v3 == v2)
      return 0;
  }
  if ((v8 & 0x80) != 0)
  {
    v7 = *(char **)(v3 + 40);
    v8 = *(_QWORD *)(v3 + 48);
  }
  if (v8 >= 8)
  {
    v13 = &v7[v8];
    v14 = v7;
    do
    {
      v15 = (char *)memchr(v14, 46, v8 - 7);
      if (!v15)
        break;
      v16 = v15;
      if (*(_QWORD *)v15 == 0x64696C61766E692ELL)
      {
        result = 1;
        if (v16 == v13 || v16 - v7 == -1)
          return result;
        goto LABEL_27;
      }
      v14 = v15 + 1;
      v8 = v13 - (v16 + 1);
    }
    while (v8 >= 8);
  }
  return 1;
}

SDPConnection *SDPMedia::setConnectionAddress(SDPConnection *result, std::string *__str, unsigned __int8 *a3)
{
  char *v3;
  uint64_t v4;

  v3 = (char *)result + 88;
  v4 = *((_QWORD *)result + 12);
  if ((SDPConnection *)v4 != (SDPConnection *)((char *)result + 88))
  {
    do
    {
      std::string::operator=((std::string *)(v4 + 40), __str);
      result = SDPConnection::setAddressTypeFromString((SDPConnection *)(v4 + 16), a3);
      v4 = *(_QWORD *)(v4 + 8);
    }
    while ((char *)v4 != v3);
  }
  return result;
}

_QWORD *SDPMedia::mediaCryptoList@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;

  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  v2 = this + 17;
  v3 = this[18];
  if ((_QWORD *)v3 != this + 17)
  {
    v5 = 0;
    v6 = a2;
    do
    {
      if (*(_DWORD *)(v3 + 136) == 3)
      {
        this = operator new(0x18uLL);
        this[1] = a2;
        this[2] = v3 + 16;
        *this = v6;
        v6[1] = this;
        *a2 = this;
        ++v5;
        v6 = this;
        a2[2] = v5;
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while ((_QWORD *)v3 != v2);
  }
  return this;
}

void sub_1BF135600(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<unsigned long long>::clear(v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(_QWORD **a1, const SDPRTCPXR *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = (_QWORD *)**a1;
  v4 = operator new(0x90uLL);
  *v4 = 0;
  v4[1] = 0;
  SDPRTCPXR::SDPRTCPXR((SDPRTCPXR *)(v4 + 2), a2);
  *((_DWORD *)v4 + 34) = 0;
  v5 = v3[17];
  v3 += 17;
  *v4 = v5;
  v4[1] = v3;
  *(_QWORD *)(v5 + 8) = v4;
  *v3 = v4;
  ++v3[2];
}

void sub_1BF13567C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  std::string *v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v4 = (char *)operator new(0x90uLL);
  v5 = v4;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v4[24] = *(_BYTE *)(a2 + 8);
  *((_QWORD *)v4 + 2) = off_1E78ED0A8;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 32), *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *((_OWORD *)v4 + 2) = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 6) = *(_QWORD *)(a2 + 32);
  }
  *((_QWORD *)v5 + 2) = &off_1E78BB4C8;
  v6 = (std::string *)(v5 + 56);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 40);
    *((_QWORD *)v5 + 9) = *(_QWORD *)(a2 + 56);
  }
  *((_DWORD *)v5 + 34) = 1;
  v8 = *(_QWORD *)(v3 + 136);
  v7 = (_QWORD *)(v3 + 136);
  *(_QWORD *)v5 = v8;
  *((_QWORD *)v5 + 1) = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
}

void sub_1BF135774(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 16) = v3;
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaCandidate *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *(_QWORD **)(*(_QWORD *)a1 + 16);
  v4 = operator new(0x90uLL);
  *v4 = 0;
  v4[1] = 0;
  SDPMediaCandidate::SDPMediaCandidate((SDPMediaCandidate *)(v4 + 2), a2);
  *((_DWORD *)v4 + 34) = 2;
  v5 = v3[17];
  v3 += 17;
  *v4 = v5;
  v4[1] = v3;
  *(_QWORD *)(v5 + 8) = v4;
  *v3 = v4;
  ++v3[2];
}

void sub_1BF135810(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaCrypto *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *(_QWORD **)(*(_QWORD *)a1 + 24);
  v4 = operator new(0x90uLL);
  *v4 = 0;
  v4[1] = 0;
  SDPMediaCrypto::SDPMediaCrypto((SDPMediaCrypto *)(v4 + 2), a2);
  *((_DWORD *)v4 + 34) = 3;
  v5 = v3[17];
  v3 += 17;
  *v4 = v5;
  v4[1] = v3;
  *(_QWORD *)(v5 + 8) = v4;
  *v3 = v4;
  ++v3[2];
}

void sub_1BF135890(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  std::string *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = (char *)operator new(0x90uLL);
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v4[24] = *(_BYTE *)(a2 + 8);
  *((_QWORD *)v4 + 2) = off_1E78ED0A8;
  v5 = (std::string *)(v4 + 32);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 6) = *(_QWORD *)(a2 + 32);
  }
  *((_QWORD *)v4 + 2) = off_1E78CE390;
  *((_DWORD *)v4 + 14) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v4 + 34) = 4;
  v7 = *(_QWORD *)(v3 + 136);
  v6 = (_QWORD *)(v3 + 136);
  *(_QWORD *)v4 = v7;
  *((_QWORD *)v4 + 1) = v6;
  *(_QWORD *)(v7 + 8) = v4;
  *v6 = v4;
  ++v6[2];
}

void sub_1BF135958(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaEndToAccessEdgeProtection *a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  result = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaEndToAccessEdgeProtection const&>(v2 + 136, 0, 0, a2);
  v4 = *(_QWORD *)(v2 + 136);
  *result = v4;
  result[1] = v2 + 136;
  *(_QWORD *)(v4 + 8) = result;
  *(_QWORD *)(v2 + 136) = result;
  ++*(_QWORD *)(v2 + 152);
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaFormatUnknownParams *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *(_QWORD **)(*(_QWORD *)a1 + 48);
  v4 = operator new(0x90uLL);
  *v4 = 0;
  v4[1] = 0;
  SDPMediaFormatUnknownParams::SDPMediaFormatUnknownParams((SDPMediaFormatUnknownParams *)(v4 + 2), a2);
  *((_DWORD *)v4 + 34) = 6;
  v5 = v3[17];
  v3 += 17;
  *v4 = v5;
  v4[1] = v3;
  *(_QWORD *)(v5 + 8) = v4;
  *v3 = v4;
  ++v3[2];
}

void sub_1BF135A2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaFormatAMRParams *a2)
{
  _QWORD v2[4];
  char v3;

  SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)v2, a2);
  v2[0] = off_1E78ED0A8;
  if (v3 < 0)
    operator delete((void *)v2[2]);
}

void std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaFormatEVSParams *a2)
{
  _QWORD v2[4];
  char v3;

  SDPMediaFormatEVSParams::SDPMediaFormatEVSParams((SDPMediaFormatEVSParams *)v2, a2);
  v2[0] = off_1E78ED0A8;
  if (v3 < 0)
    operator delete((void *)v2[2]);
}

void std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  std::string __p;
  __int16 v4;

  if (*(char *)(a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  else
    __p = *(std::string *)(a2 + 16);
  v4 = *(_WORD *)(a2 + 40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD v3[4];
  char v4;
  int v5;
  uint64_t v6;

  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v3, *(_WORD *)(a2 + 40));
  v5 = *(_DWORD *)(a2 + 44);
  v6 = *(_QWORD *)(a2 + 48);
  v3[0] = off_1E78ED0A8;
  if (v4 < 0)
    operator delete((void *)v3[2]);
}

void std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD v3[4];
  char v4;
  __int16 v5;

  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v3, *(_WORD *)(a2 + 40));
  v5 = *(_WORD *)(a2 + 42);
  v3[0] = off_1E78ED0A8;
  if (v4 < 0)
    operator delete((void *)v3[2]);
}

void std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaRTPMap *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *(_QWORD **)(*(_QWORD *)a1 + 56);
  v4 = operator new(0x90uLL);
  *v4 = 0;
  v4[1] = 0;
  SDPMediaRTPMap::SDPMediaRTPMap((SDPMediaRTPMap *)(v4 + 2), a2);
  *((_DWORD *)v4 + 34) = 12;
  v5 = v3[17];
  v3 += 17;
  *v4 = v5;
  v4[1] = v3;
  *(_QWORD *)(v5 + 8) = v4;
  *v3 = v4;
  ++v3[2];
}

void sub_1BF135C58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  SDPMedia *v2;
  int v3;
  __int16 v4;

  v2 = *(SDPMedia **)(*(_QWORD *)a1 + 64);
  v3 = *(unsigned __int8 *)(a2 + 42);
  v4 = *(_WORD *)(a2 + 40);
  if (v3)
    SDPMedia::setMaxPacketizationTime(v2, v4);
  else
    SDPMedia::setPacketizationTime(v2, v4);
}

void std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaPath *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *(_QWORD **)(*(_QWORD *)a1 + 88);
  v4 = operator new(0x90uLL);
  *v4 = 0;
  v4[1] = 0;
  SDPMediaPath::SDPMediaPath((SDPMediaPath *)(v4 + 2), a2);
  *((_DWORD *)v4 + 34) = 14;
  v5 = v3[17];
  v3 += 17;
  *v4 = v5;
  v4[1] = v3;
  *(_QWORD *)(v5 + 8) = v4;
  *v3 = v4;
  ++v3[2];
}

void sub_1BF135CF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaAcceptTypes *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *(_QWORD **)(*(_QWORD *)a1 + 72);
  v4 = operator new(0x90uLL);
  *v4 = 0;
  v4[1] = 0;
  SDPMediaAcceptTypes::SDPMediaAcceptTypes((SDPMediaAcceptTypes *)(v4 + 2), a2);
  *((_DWORD *)v4 + 34) = 15;
  v5 = v3[17];
  v3 += 17;
  *v4 = v5;
  v4[1] = v3;
  *(_QWORD *)(v5 + 8) = v4;
  *v3 = v4;
  ++v3[2];
}

void sub_1BF135D74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<16ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaAcceptWrappedTypes *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *(_QWORD **)(*(_QWORD *)a1 + 80);
  v4 = operator new(0x90uLL);
  *v4 = 0;
  v4[1] = 0;
  SDPMediaAcceptWrappedTypes::SDPMediaAcceptWrappedTypes((SDPMediaAcceptWrappedTypes *)(v4 + 2), a2);
  *((_DWORD *)v4 + 34) = 16;
  v5 = v3[17];
  v3 += 17;
  *v4 = v5;
  v4[1] = v3;
  *(_QWORD *)(v5 + 8) = v4;
  *v3 = v4;
  ++v3[2];
}

void sub_1BF135DF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<17ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD **)(*(_QWORD *)a1 + 96);
  v4 = operator new(0x90uLL);
  *v4 = 0;
  v4[1] = 0;
  result = SDPMediaSetup::SDPMediaSetup((uint64_t)(v4 + 2), a2);
  *((_DWORD *)v4 + 34) = 17;
  v6 = v3[17];
  v3 += 17;
  *v4 = v6;
  v4[1] = v3;
  *(_QWORD *)(v6 + 8) = v4;
  *v3 = v4;
  ++v3[2];
  return result;
}

void sub_1BF135E74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<18ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::copyAttributes(SDPMedia const&)::$_0,SDPMedia::copyAttributes(SDPMedia const&)::$_1,SDPMedia::copyAttributes(SDPMedia const&)::$_2,SDPMedia::copyAttributes(SDPMedia const&)::$_3,SDPMedia::copyAttributes(SDPMedia const&)::$_4,SDPMedia::copyAttributes(SDPMedia const&)::$_5,SDPMedia::copyAttributes(SDPMedia const&)::$_6,SDPMedia::copyAttributes(SDPMedia const&)::$_7,SDPMedia::copyAttributes(SDPMedia const&)::$_8,SDPMedia::copyAttributes(SDPMedia const&)::$_9,SDPMedia::copyAttributes(SDPMedia const&)::$_10,SDPMedia::copyAttributes(SDPMedia const&)::$_11,SDPMedia::copyAttributes(SDPMedia const&)::$_12,SDPMedia::copyAttributes(SDPMedia const&)::$_13,SDPMedia::copyAttributes(SDPMedia const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD **)(*(_QWORD *)a1 + 104);
  v4 = operator new(0x90uLL);
  *v4 = 0;
  v4[1] = 0;
  result = SDPMediaFingerprint::SDPMediaFingerprint((uint64_t)(v4 + 2), a2);
  *((_DWORD *)v4 + 34) = 18;
  v6 = v3[17];
  v3 += 17;
  *v4 = v6;
  v4[1] = v3;
  *(_QWORD *)(v6 + 8) = v4;
  *v3 = v4;
  ++v3[2];
  return result;
}

void sub_1BF135EF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void SDPRTCPXR::SDPRTCPXR(SDPRTCPXR *this, const SDPRTCPXR *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  std::string __p;

  if (*((char *)a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
  else
    __p = *(std::string *)((char *)a2 + 16);
  *((_BYTE *)this + 8) = 1;
  *(_QWORD *)this = off_1E78ED0A8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::string *)((char *)this + 16) = __p;
  }
  *(_QWORD *)this = &off_1E78C1BE0;
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  v4 = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 6) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 56), *((__int128 **)a2 + 7), *((__int128 **)a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3));
  v7 = (std::string *)((char *)this + 80);
  if (*((char *)a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 10), *((_QWORD *)a2 + 11));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 5);
    *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_1BF136050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v6);
  *(_QWORD *)v4 = v7;
  if (*(char *)(v4 + 39) < 0)
    operator delete(*v5);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<16ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<17ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<18ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::toStream(ImsOutStream &)::$_0,SDPMedia::toStream(ImsOutStream &)::$_1,SDPMedia::toStream(ImsOutStream &)::$_2,SDPMedia::toStream(ImsOutStream &)::$_3,SDPMedia::toStream(ImsOutStream &)::$_4,SDPMedia::toStream(ImsOutStream &)::$_5,SDPMedia::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 48));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPRTCPXR *a2)
{
  void *v3[13];

  SDPRTCPXR::SDPRTCPXR((SDPRTCPXR *)v3, a2);
  SDPRTCPXR::~SDPRTCPXR(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  void (**v4)(SDPUnsupportedAttribute *__hidden);
  char v5;
  std::string v6;
  std::string v7;

  v5 = *(_BYTE *)(a2 + 8);
  v4 = (void (**)(SDPUnsupportedAttribute *__hidden))off_1E78ED0A8;
  if (*(char *)(a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  else
    v6 = *(std::string *)(a2 + 16);
  v4 = &off_1E78BB4C8;
  if (*(char *)(a2 + 63) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  else
    v7 = *(std::string *)(a2 + 40);
  SDPUnsupportedAttribute::~SDPUnsupportedAttribute((void **)&v4);
  return 1;
}

void sub_1BF136390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaCandidate *a2)
{
  void *v3[10];

  SDPMediaCandidate::SDPMediaCandidate((SDPMediaCandidate *)v3, a2);
  SDPMediaCandidate::~SDPMediaCandidate(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaCrypto *a2)
{
  _BYTE v3[80];

  SDPMediaCrypto::SDPMediaCrypto((SDPMediaCrypto *)v3, a2);
  SDPMediaCrypto::~SDPMediaCrypto((SDPMediaCrypto *)v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  std::string __p;
  int v5;

  if (*(char *)(a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  else
    __p = *(std::string *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaEndToAccessEdgeProtection *a2)
{
  _QWORD v3[4];
  char v4;

  SDPMediaEndToAccessEdgeProtection::SDPMediaEndToAccessEdgeProtection((SDPMediaEndToAccessEdgeProtection *)v3, a2);
  v3[0] = off_1E78ED0A8;
  if (v4 < 0)
    operator delete((void *)v3[2]);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaFormatUnknownParams *a2)
{
  void *v3[9];

  SDPMediaFormatUnknownParams::SDPMediaFormatUnknownParams((SDPMediaFormatUnknownParams *)v3, a2);
  SDPMediaFormatUnknownParams::~SDPMediaFormatUnknownParams(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaFormatAMRParams *a2)
{
  _QWORD v3[4];
  char v4;

  SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)v3, a2);
  v3[0] = off_1E78ED0A8;
  if (v4 < 0)
    operator delete((void *)v3[2]);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaFormatEVSParams *a2)
{
  _QWORD v3[4];
  char v4;

  SDPMediaFormatEVSParams::SDPMediaFormatEVSParams((SDPMediaFormatEVSParams *)v3, a2);
  v3[0] = off_1E78ED0A8;
  if (v4 < 0)
    operator delete((void *)v3[2]);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  std::string __p;
  __int16 v5;

  if (*(char *)(a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  else
    __p = *(std::string *)(a2 + 16);
  v5 = *(_WORD *)(a2 + 40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD v4[4];
  char v5;
  int v6;
  uint64_t v7;

  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v4, *(_WORD *)(a2 + 40));
  v6 = *(_DWORD *)(a2 + 44);
  v7 = *(_QWORD *)(a2 + 48);
  v4[0] = off_1E78ED0A8;
  if (v5 < 0)
    operator delete((void *)v4[2]);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD v4[4];
  char v5;
  __int16 v6;

  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v4, *(_WORD *)(a2 + 40));
  v6 = *(_WORD *)(a2 + 42);
  v4[0] = off_1E78ED0A8;
  if (v5 < 0)
    operator delete((void *)v4[2]);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaRTPMap *a2)
{
  void *v3[10];

  SDPMediaRTPMap::SDPMediaRTPMap((SDPMediaRTPMap *)v3, a2);
  SDPMediaRTPMap::~SDPMediaRTPMap(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPPacketizationTimeAttribute *a2)
{
  _QWORD v3[4];
  char v4;

  SDPPacketizationTimeAttribute::SDPPacketizationTimeAttribute((SDPPacketizationTimeAttribute *)v3, a2);
  v3[0] = off_1E78ED0A8;
  if (v4 < 0)
    operator delete((void *)v3[2]);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaPath *a2)
{
  void *v3[12];

  SDPMediaPath::SDPMediaPath((SDPMediaPath *)v3, a2);
  SDPMediaPath::~SDPMediaPath(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaAcceptTypes *a2)
{
  void *v3[8];

  SDPMediaAcceptTypes::SDPMediaAcceptTypes((SDPMediaAcceptTypes *)v3, a2);
  SDPMediaAcceptTypes::~SDPMediaAcceptTypes(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<16ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaAcceptWrappedTypes *a2)
{
  void *v3[8];

  SDPMediaAcceptWrappedTypes::SDPMediaAcceptWrappedTypes((SDPMediaAcceptWrappedTypes *)v3, a2);
  SDPMediaAcceptWrappedTypes::~SDPMediaAcceptWrappedTypes(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<17ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  void *v3[8];

  SDPMediaSetup::SDPMediaSetup((uint64_t)v3, a2);
  SDPMediaSetup::~SDPMediaSetup(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<18ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_0,SDPMedia::valid(void)::$_1,SDPMedia::valid(void)::$_2,SDPMedia::valid(void)::$_3,SDPMedia::valid(void)::$_4,SDPMedia::valid(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  void *v3[11];

  SDPMediaFingerprint::SDPMediaFingerprint((uint64_t)v3, a2);
  SDPMediaFingerprint::~SDPMediaFingerprint(v3);
  return 1;
}

void SDPMediaEndToAccessEdgeProtection::SDPMediaEndToAccessEdgeProtection(SDPMediaEndToAccessEdgeProtection *this, const SDPMediaEndToAccessEdgeProtection *a2)
{
  std::string *v4;
  std::string __p;

  if (*((char *)a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
  else
    __p = *(std::string *)((char *)a2 + 16);
  *((_BYTE *)this + 8) = 1;
  *(_QWORD *)this = off_1E78ED0A8;
  v4 = (std::string *)((char *)this + 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 4) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  *(_QWORD *)this = off_1E78CDDC0;
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
}

void sub_1BF1368BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaPath *a2)
{
  void *v3[12];

  SDPMediaPath::SDPMediaPath((SDPMediaPath *)v3, a2);
  SDPMediaPath::~SDPMediaPath(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaAcceptTypes *a2)
{
  void *v3[8];

  SDPMediaAcceptTypes::SDPMediaAcceptTypes((SDPMediaAcceptTypes *)v3, a2);
  SDPMediaAcceptTypes::~SDPMediaAcceptTypes(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<16ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, const SDPMediaAcceptWrappedTypes *a2)
{
  void *v3[8];

  SDPMediaAcceptWrappedTypes::SDPMediaAcceptWrappedTypes((SDPMediaAcceptWrappedTypes *)v3, a2);
  SDPMediaAcceptWrappedTypes::~SDPMediaAcceptWrappedTypes(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<17ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  void *v3[8];

  SDPMediaSetup::SDPMediaSetup((uint64_t)v3, a2);
  SDPMediaSetup::~SDPMediaSetup(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<18ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_6,SDPMedia::valid(void)::$_7,SDPMedia::valid(void)::$_8,SDPMedia::valid(void)::$_9,SDPMedia::valid(void)::$_10,SDPMedia::valid(void)::$_11,SDPMedia::valid(void)::$_12,SDPMedia::valid(void)::$_13,SDPMedia::valid(void)::$_14,SDPMedia::valid(void)::$_15,SDPMedia::valid(void)::$_16,SDPMedia::valid(void)::$_17,SDPMedia::valid(void)::$_18,SDPMedia::valid(void)::$_19,SDPMedia::valid(void)::$_20>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  void *v3[11];

  SDPMediaFingerprint::SDPMediaFingerprint((uint64_t)v3, a2);
  SDPMediaFingerprint::~SDPMediaFingerprint(v3);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_21,SDPMedia::valid(void)::$_22,SDPMedia::valid(void)::$_23,SDPMedia::valid(void)::$_24,SDPMedia::valid(void)::$_25,SDPMedia::valid(void)::$_26,SDPMedia::valid(void)::$_27>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_21,SDPMedia::valid(void)::$_22,SDPMedia::valid(void)::$_23,SDPMedia::valid(void)::$_24,SDPMedia::valid(void)::$_25,SDPMedia::valid(void)::$_26,SDPMedia::valid(void)::$_27>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_21,SDPMedia::valid(void)::$_22,SDPMedia::valid(void)::$_23,SDPMedia::valid(void)::$_24,SDPMedia::valid(void)::$_25,SDPMedia::valid(void)::$_26,SDPMedia::valid(void)::$_27>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_21,SDPMedia::valid(void)::$_22,SDPMedia::valid(void)::$_23,SDPMedia::valid(void)::$_24,SDPMedia::valid(void)::$_25,SDPMedia::valid(void)::$_26,SDPMedia::valid(void)::$_27>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_21,SDPMedia::valid(void)::$_22,SDPMedia::valid(void)::$_23,SDPMedia::valid(void)::$_24,SDPMedia::valid(void)::$_25,SDPMedia::valid(void)::$_26,SDPMedia::valid(void)::$_27>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMedia::valid(void)::$_21,SDPMedia::valid(void)::$_22,SDPMedia::valid(void)::$_23,SDPMedia::valid(void)::$_24,SDPMedia::valid(void)::$_25,SDPMedia::valid(void)::$_26,SDPMedia::valid(void)::$_27>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::SDPMediaFormatInfo(SDPMediaFormatInfo const&)::$_0,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_1,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_2,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_3,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_4,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_5,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, SDPMediaFormatUnknownParams *a2)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<0ul,SDPMediaFormatUnknownParams,SDPMediaFormatUnknownParams const&>((SDPMediaFormatUnknownParams *)(**(_QWORD **)a1 + 96), **(_QWORD **)a1 + 96, a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::SDPMediaFormatInfo(SDPMediaFormatInfo const&)::$_0,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_1,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_2,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_3,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_4,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_5,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, SDPMediaFormatAMRParams *a2)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<1ul,SDPMediaFormatAMRParams,SDPMediaFormatAMRParams const&>((SDPMediaFormatAMRParams *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 96), *(_QWORD *)(*(_QWORD *)a1 + 8) + 96, a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::SDPMediaFormatInfo(SDPMediaFormatInfo const&)::$_0,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_1,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_2,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_3,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_4,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_5,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, SDPMediaFormatEVSParams *a2)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<2ul,SDPMediaFormatEVSParams,SDPMediaFormatEVSParams const&>((SDPMediaFormatEVSParams *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 96), *(_QWORD *)(*(_QWORD *)a1 + 16) + 96, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::SDPMediaFormatInfo(SDPMediaFormatInfo const&)::$_0,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_1,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_2,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_3,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_4,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_5,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<3ul,SDPMediaFormatDTMFParams,SDPMediaFormatDTMFParams const&>((unsigned int *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 96), *(_QWORD *)(*(_QWORD *)a1 + 24) + 96, a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::SDPMediaFormatInfo(SDPMediaFormatInfo const&)::$_0,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_1,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_2,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_3,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_4,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_5,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<4ul,SDPMediaFormatTTYParams,SDPMediaFormatTTYParams const&>((SDPMediaFormatParams *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 96), *(_QWORD *)(*(_QWORD *)a1 + 32) + 96, a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::SDPMediaFormatInfo(SDPMediaFormatInfo const&)::$_0,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_1,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_2,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_3,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_4,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_5,SDPMediaFormatInfo::(SDPMediaFormatInfo const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<5ul,SDPMediaFormatTTYRedParams,SDPMediaFormatTTYRedParams const&>((SDPMediaFormatParams *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 96), *(_QWORD *)(*(_QWORD *)a1 + 40) + 96, a2);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<0ul,SDPMediaFormatUnknownParams,SDPMediaFormatUnknownParams const&>(SDPMediaFormatUnknownParams *this, uint64_t a2, SDPMediaFormatUnknownParams *a3)
{
  uint64_t v5;
  char v7;

  v5 = *((unsigned int *)this + 30);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
      std::string::operator=((std::string *)(a2 + 16), (const std::string *)((char *)a3 + 16));
      *(_WORD *)(a2 + 40) = *((_WORD *)a3 + 20);
      std::string::operator=((std::string *)(a2 + 48), (const std::string *)a3 + 2);
      return;
    }
    (*(&off_1E78E2378 + v5))((int)&v7, this);
  }
  *((_DWORD *)this + 30) = -1;
  SDPMediaFormatUnknownParams::SDPMediaFormatUnknownParams(this, a3);
  *((_DWORD *)this + 30) = 0;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<1ul,SDPMediaFormatAMRParams,SDPMediaFormatAMRParams const&>(SDPMediaFormatAMRParams *this, uint64_t a2, SDPMediaFormatAMRParams *a3)
{
  uint64_t v5;
  __int128 v7;
  char v8;

  v5 = *((unsigned int *)this + 30);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
      std::string::operator=((std::string *)(a2 + 16), (const std::string *)((char *)a3 + 16));
      *(_WORD *)(a2 + 40) = *((_WORD *)a3 + 20);
      v7 = *(_OWORD *)((char *)a3 + 42);
      *(_QWORD *)(a2 + 56) = *((_QWORD *)a3 + 7);
      *(_OWORD *)(a2 + 42) = v7;
      return;
    }
    (*(&off_1E78E2378 + v5))((int)&v8, this);
  }
  *((_DWORD *)this + 30) = -1;
  SDPMediaFormatAMRParams::SDPMediaFormatAMRParams(this, a3);
  *((_DWORD *)this + 30) = 1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<2ul,SDPMediaFormatEVSParams,SDPMediaFormatEVSParams const&>(SDPMediaFormatEVSParams *this, uint64_t a2, SDPMediaFormatEVSParams *a3)
{
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v5 = *((unsigned int *)this + 30);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
      std::string::operator=((std::string *)(a2 + 16), (const std::string *)((char *)a3 + 16));
      *(_WORD *)(a2 + 40) = *((_WORD *)a3 + 20);
      v7 = *(_OWORD *)((char *)a3 + 58);
      v8 = *(_OWORD *)((char *)a3 + 74);
      v9 = *(_OWORD *)((char *)a3 + 90);
      *(_QWORD *)(a2 + 106) = *(_QWORD *)((char *)a3 + 106);
      *(_OWORD *)(a2 + 90) = v9;
      *(_OWORD *)(a2 + 74) = v8;
      *(_OWORD *)(a2 + 58) = v7;
      *(_OWORD *)(a2 + 42) = *(_OWORD *)((char *)a3 + 42);
      return;
    }
    (*(&off_1E78E2378 + v5))((int)&v10, this);
  }
  *((_DWORD *)this + 30) = -1;
  SDPMediaFormatEVSParams::SDPMediaFormatEVSParams(this, a3);
  *((_DWORD *)this + 30) = 2;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<3ul,SDPMediaFormatDTMFParams,SDPMediaFormatDTMFParams const&>(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  char v8;

  v5 = a1[30];
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      *(_BYTE *)(a2 + 8) = *(_BYTE *)(a3 + 8);
      result = (uint64_t)std::string::operator=((std::string *)(a2 + 16), (const std::string *)(a3 + 16));
      *(_WORD *)(a2 + 40) = *(_WORD *)(a3 + 40);
      return result;
    }
    (*(&off_1E78E2378 + v5))((int)&v8, (SDPMediaFormatUnknownParams *)a1);
  }
  a1[30] = -1;
  result = std::__variant_detail::__alt<3ul,SDPMediaFormatDTMFParams>::__alt[abi:ne180100]<SDPMediaFormatDTMFParams const&>((uint64_t)a1, a3);
  a1[30] = 3;
  return result;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<4ul,SDPMediaFormatTTYParams,SDPMediaFormatTTYParams const&>(SDPMediaFormatParams *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  char v8;

  v5 = *((unsigned int *)this + 30);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 4)
    {
      *(_BYTE *)(a2 + 8) = *(_BYTE *)(a3 + 8);
      std::string::operator=((std::string *)(a2 + 16), (const std::string *)(a3 + 16));
      *(_WORD *)(a2 + 40) = *(_WORD *)(a3 + 40);
      v7 = *(_QWORD *)(a3 + 44);
      *(_DWORD *)(a2 + 52) = *(_DWORD *)(a3 + 52);
      *(_QWORD *)(a2 + 44) = v7;
      return;
    }
    (*(&off_1E78E2378 + v5))((int)&v8, this);
  }
  *((_DWORD *)this + 30) = -1;
  SDPMediaFormatParams::SDPMediaFormatParams(this, *(_WORD *)(a3 + 40));
  *(_QWORD *)this = off_1E78E9AA8;
  *((_DWORD *)this + 11) = *(_DWORD *)(a3 + 44);
  *((_QWORD *)this + 6) = *(_QWORD *)(a3 + 48);
  *((_DWORD *)this + 30) = 4;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<5ul,SDPMediaFormatTTYRedParams,SDPMediaFormatTTYRedParams const&>(SDPMediaFormatParams *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v7;

  v5 = *((unsigned int *)this + 30);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 5)
    {
      *(_BYTE *)(a2 + 8) = *(_BYTE *)(a3 + 8);
      std::string::operator=((std::string *)(a2 + 16), (const std::string *)(a3 + 16));
      *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
      return;
    }
    (*(&off_1E78E2378 + v5))((int)&v7, this);
  }
  *((_DWORD *)this + 30) = -1;
  SDPMediaFormatParams::SDPMediaFormatParams(this, *(_WORD *)(a3 + 40));
  *(_QWORD *)this = off_1E78E9B20;
  *((_WORD *)this + 21) = *(_WORD *)(a3 + 42);
  *((_DWORD *)this + 30) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_0,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_1,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_2,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_3,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_4,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_5,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, SDPMediaFormatUnknownParams *a2)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<0ul,SDPMediaFormatUnknownParams,SDPMediaFormatUnknownParams const&>((SDPMediaFormatUnknownParams *)(**(_QWORD **)a1 + 96), **(_QWORD **)a1 + 96, a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_0,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_1,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_2,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_3,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_4,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_5,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, SDPMediaFormatAMRParams *a2)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<1ul,SDPMediaFormatAMRParams,SDPMediaFormatAMRParams const&>((SDPMediaFormatAMRParams *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 96), *(_QWORD *)(*(_QWORD *)a1 + 8) + 96, a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_0,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_1,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_2,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_3,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_4,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_5,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, SDPMediaFormatEVSParams *a2)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<2ul,SDPMediaFormatEVSParams,SDPMediaFormatEVSParams const&>((SDPMediaFormatEVSParams *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 96), *(_QWORD *)(*(_QWORD *)a1 + 16) + 96, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_0,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_1,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_2,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_3,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_4,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_5,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<3ul,SDPMediaFormatDTMFParams,SDPMediaFormatDTMFParams const&>((unsigned int *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 96), *(_QWORD *)(*(_QWORD *)a1 + 24) + 96, a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_0,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_1,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_2,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_3,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_4,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_5,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<4ul,SDPMediaFormatTTYParams,SDPMediaFormatTTYParams const&>((SDPMediaFormatParams *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 96), *(_QWORD *)(*(_QWORD *)a1 + 32) + 96, a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_0,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_1,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_2,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_3,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_4,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_5,SDPMediaFormatInfo::operator=(SDPMediaFormatInfo const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<5ul,SDPMediaFormatTTYRedParams,SDPMediaFormatTTYRedParams const&>((SDPMediaFormatParams *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 96), *(_QWORD *)(*(_QWORD *)a1 + 40) + 96, a2);
}

_WORD ***std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::setPayloadType(unsigned short)::$_0,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_1,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_2,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_3,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_4,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_5,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> &>(_WORD ***result, uint64_t a2)
{
  *(_WORD *)(a2 + 40) = ***result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::setPayloadType(unsigned short)::$_0,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_1,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_2,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_3,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_4,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_5,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> &>(uint64_t result, uint64_t a2)
{
  *(_WORD *)(a2 + 40) = **(_WORD **)(*(_QWORD *)result + 8);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::setPayloadType(unsigned short)::$_0,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_1,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_2,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_3,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_4,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_5,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> &>(uint64_t result, uint64_t a2)
{
  *(_WORD *)(a2 + 40) = **(_WORD **)(*(_QWORD *)result + 16);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::setPayloadType(unsigned short)::$_0,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_1,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_2,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_3,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_4,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_5,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> &>(uint64_t result, uint64_t a2)
{
  *(_WORD *)(a2 + 40) = **(_WORD **)(*(_QWORD *)result + 24);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::setPayloadType(unsigned short)::$_0,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_1,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_2,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_3,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_4,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_5,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> &>(uint64_t result, uint64_t a2)
{
  *(_WORD *)(a2 + 40) = **(_WORD **)(*(_QWORD *)result + 32);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::setPayloadType(unsigned short)::$_0,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_1,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_2,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_3,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_4,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_5,SDPMediaFormatInfo::setPayloadType(unsigned short)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> &>(uint64_t result, uint64_t a2)
{
  *(_WORD *)(a2 + 40) = **(_WORD **)(*(_QWORD *)result + 40);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::bandwidthAS(BOOL)::$_0,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_1,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_2,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_3,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_4,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_5,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(unsigned __int8 ***a1, _WORD *a2)
{
  if (a2[20] == 255)
    return 0;
  else
    return (*(uint64_t (**)(_WORD *, _QWORD))(*(_QWORD *)a2 + 72))(a2, ***a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::bandwidthAS(BOOL)::$_0,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_1,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_2,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_3,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_4,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_5,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, _WORD *a2)
{
  if (a2[20] == 255)
    return 0;
  else
    return (*(uint64_t (**)(_WORD *, _QWORD))(*(_QWORD *)a2 + 72))(a2, **(unsigned __int8 **)(*(_QWORD *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::bandwidthAS(BOOL)::$_0,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_1,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_2,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_3,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_4,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_5,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, _WORD *a2)
{
  if (a2[20] == 255)
    return 0;
  else
    return (*(uint64_t (**)(_WORD *, _QWORD))(*(_QWORD *)a2 + 72))(a2, **(unsigned __int8 **)(*(_QWORD *)a1 + 16));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::bandwidthAS(BOOL)::$_0,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_1,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_2,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_3,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_4,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_5,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, _WORD *a2)
{
  if (a2[20] == 255)
    return 0;
  else
    return (*(uint64_t (**)(_WORD *, _QWORD))(*(_QWORD *)a2 + 72))(a2, **(unsigned __int8 **)(*(_QWORD *)a1 + 24));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::bandwidthAS(BOOL)::$_0,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_1,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_2,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_3,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_4,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_5,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, _WORD *a2)
{
  if (a2[20] == 255)
    return 0;
  else
    return (*(uint64_t (**)(_WORD *, _QWORD))(*(_QWORD *)a2 + 72))(a2, **(unsigned __int8 **)(*(_QWORD *)a1 + 32));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::bandwidthAS(BOOL)::$_0,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_1,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_2,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_3,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_4,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_5,SDPMediaFormatInfo::bandwidthAS(BOOL)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, _WORD *a2)
{
  if (a2[20] == 255)
    return 0;
  else
    return (*(uint64_t (**)(_WORD *, _QWORD))(*(_QWORD *)a2 + 72))(a2, **(unsigned __int8 **)(*(_QWORD *)a1 + 40));
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_0,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_1,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_2,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_3,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_4,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_5,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, SDPMediaFormatUnknownParams *a2)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<0ul,SDPMediaFormatUnknownParams,SDPMediaFormatUnknownParams const&>((SDPMediaFormatUnknownParams *)(**(_QWORD **)a1 + 96), **(_QWORD **)a1 + 96, a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_0,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_1,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_2,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_3,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_4,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_5,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, SDPMediaFormatAMRParams *a2)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<1ul,SDPMediaFormatAMRParams,SDPMediaFormatAMRParams const&>((SDPMediaFormatAMRParams *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 96), *(_QWORD *)(*(_QWORD *)a1 + 8) + 96, a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_0,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_1,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_2,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_3,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_4,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_5,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, SDPMediaFormatEVSParams *a2)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<2ul,SDPMediaFormatEVSParams,SDPMediaFormatEVSParams const&>((SDPMediaFormatEVSParams *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 96), *(_QWORD *)(*(_QWORD *)a1 + 16) + 96, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_0,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_1,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_2,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_3,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_4,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_5,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<3ul,SDPMediaFormatDTMFParams,SDPMediaFormatDTMFParams const&>((unsigned int *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 96), *(_QWORD *)(*(_QWORD *)a1 + 24) + 96, a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_0,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_1,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_2,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_3,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_4,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_5,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<4ul,SDPMediaFormatTTYParams,SDPMediaFormatTTYParams const&>((SDPMediaFormatParams *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 96), *(_QWORD *)(*(_QWORD *)a1 + 32) + 96, a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_0,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_1,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_2,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_3,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_4,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_5,SDPMediaFormatInfo::setSDPMediaFormatParams(std::variant<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>>::__assign_alt[abi:ne180100]<5ul,SDPMediaFormatTTYRedParams,SDPMediaFormatTTYRedParams const&>((SDPMediaFormatParams *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 96), *(_QWORD *)(*(_QWORD *)a1 + 40) + 96, a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::toStream(ImsOutStream &)::$_0,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_1,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_2,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_3,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_4,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_5,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(ImsOutStream ***a1, const SDPMediaFormatUnknownParams *a2)
{
  ImsOutStream **v2;
  ImsOutStream *v3;
  void *v4[5];
  __int16 v5;

  v2 = *a1;
  SDPMediaFormatUnknownParams::SDPMediaFormatUnknownParams((SDPMediaFormatUnknownParams *)v4, a2);
  if (v5 != 255)
  {
    v3 = *v2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)*v2 + 1), (uint64_t)"\r\n", 2);
    *((_BYTE *)v3 + 17) = 0;
    SDPAttribute::toStream((SDPAttribute *)v4, *v2);
  }
  SDPMediaFormatUnknownParams::~SDPMediaFormatUnknownParams(v4);
}

void sub_1BF137394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  SDPMediaFormatUnknownParams::~SDPMediaFormatUnknownParams((void **)va);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::toStream(ImsOutStream &)::$_0,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_1,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_2,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_3,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_4,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_5,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t *a1, const SDPMediaFormatAMRParams *a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v9;
  _QWORD v10[4];
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;

  v2 = *a1;
  SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)v10, a2);
  if (v18)
    v3 = v13 == 0;
  else
    v3 = 0;
  if (!v3 || v12 != 0 || v14 != 0 || v15 != 0 || v16 != 0 || v17 != 0)
  {
    v9 = *(_QWORD *)(v2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"\r\n", 2);
    *(_BYTE *)(v9 + 17) = 0;
    SDPAttribute::toStream((SDPAttribute *)v10, *(ImsOutStream **)(v2 + 8));
  }
  v10[0] = off_1E78ED0A8;
  if (v11 < 0)
    operator delete((void *)v10[2]);
}

void sub_1BF137454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::toStream(ImsOutStream &)::$_0,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_1,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_2,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_3,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_4,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_5,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t *a1, const SDPMediaFormatEVSParams *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];
  char v5;
  __int16 v6;

  v2 = *a1;
  SDPMediaFormatEVSParams::SDPMediaFormatEVSParams((SDPMediaFormatEVSParams *)v4, a2);
  if (v6 != 255)
  {
    v3 = *(_QWORD *)(v2 + 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"\r\n", 2);
    *(_BYTE *)(v3 + 17) = 0;
    SDPAttribute::toStream((SDPAttribute *)v4, *(ImsOutStream **)(v2 + 16));
  }
  v4[0] = off_1E78ED0A8;
  if (v5 < 0)
    operator delete((void *)v4[2]);
}

void sub_1BF1374F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::toStream(ImsOutStream &)::$_0,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_1,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_2,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_3,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_4,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_5,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void (**v5)(SDPMediaFormatDTMFParams *__hidden);
  char v6;
  std::string __p;
  __int16 v8;

  v3 = *a1;
  v6 = *(_BYTE *)(a2 + 8);
  v5 = (void (**)(SDPMediaFormatDTMFParams *__hidden))off_1E78ED0A8;
  if (*(char *)(a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  else
    __p = *(std::string *)(a2 + 16);
  v8 = *(_WORD *)(a2 + 40);
  v5 = off_1E78B8518;
  if (v8 != 255)
  {
    v4 = *(_QWORD *)(v3 + 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"\r\n", 2);
    *(_BYTE *)(v4 + 17) = 0;
    SDPAttribute::toStream((SDPAttribute *)&v5, *(ImsOutStream **)(v3 + 24));
  }
  v5 = (void (**)(SDPMediaFormatDTMFParams *__hidden))off_1E78ED0A8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF1375EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::toStream(ImsOutStream &)::$_0,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_1,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_2,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_3,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_4,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_5,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[4];
  char v6;
  int v7;
  uint64_t v8;

  v3 = *a1;
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v5, *(_WORD *)(a2 + 40));
  v5[0] = off_1E78E9AA8;
  v7 = *(_DWORD *)(a2 + 44);
  v8 = *(_QWORD *)(a2 + 48);
  if (v7)
  {
    v4 = *(_QWORD *)(v3 + 32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"\r\n", 2);
    *(_BYTE *)(v4 + 17) = 0;
    SDPAttribute::toStream((SDPAttribute *)v5, *(ImsOutStream **)(v3 + 32));
  }
  v5[0] = off_1E78ED0A8;
  if (v6 < 0)
    operator delete((void *)v5[2]);
}

void sub_1BF1376A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPMediaFormatInfo::toStream(ImsOutStream &)::$_0,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_1,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_2,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_3,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_4,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_5,SDPMediaFormatInfo::toStream(ImsOutStream &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[4];
  char v6;
  __int16 v7;
  __int16 v8;

  v3 = *a1;
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v5, *(_WORD *)(a2 + 40));
  v5[0] = off_1E78E9B20;
  v8 = *(_WORD *)(a2 + 42);
  if (v7 != 255)
  {
    v4 = *(_QWORD *)(v3 + 40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"\r\n", 2);
    *(_BYTE *)(v4 + 17) = 0;
    SDPAttribute::toStream((SDPAttribute *)v5, *(ImsOutStream **)(v3 + 40));
  }
  v5[0] = off_1E78ED0A8;
  if (v6 < 0)
    operator delete((void *)v5[2]);
}

void sub_1BF137764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__list_imp<SDPConnection>::__create_node[abi:ne180100]<SDPConnection const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  v7 = operator new(0x48uLL);
  *v7 = a2;
  v7[1] = a3;
  SDPConnection::SDPConnection((uint64_t)(v7 + 2), a4);
  return v7;
}

void sub_1BF1377D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaEndToAccessEdgeProtection const&>(uint64_t a1, uint64_t a2, uint64_t a3, const SDPMediaEndToAccessEdgeProtection *a4)
{
  _QWORD *v7;

  v7 = operator new(0x90uLL);
  *v7 = a2;
  v7[1] = a3;
  SDPMediaEndToAccessEdgeProtection::SDPMediaEndToAccessEdgeProtection((SDPMediaEndToAccessEdgeProtection *)(v7 + 2), a4);
  *((_DWORD *)v7 + 34) = 5;
  return v7;
}

void sub_1BF137838(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<SDPConnection>::__create_node[abi:ne180100]<SDPConnection>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  v7 = operator new(0x48uLL);
  *v7 = a2;
  v7[1] = a3;
  SDPConnection::SDPConnection((uint64_t)(v7 + 2), a4);
  return v7;
}

void sub_1BF137894(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void LazuliMessageDecoder::~LazuliMessageDecoder(void **this)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t std::string::find[abi:ne180100](_QWORD *__s, char *a2)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  char *v5;
  int64_t v6;
  char *v7;
  char *v8;
  int v10;
  void *v11;
  uint64_t v12;
  char *v13;

  v2 = __s;
  if (*((char *)__s + 23) < 0)
  {
    v2 = (_QWORD *)*__s;
    v3 = __s[1];
  }
  else
  {
    v3 = *((unsigned __int8 *)__s + 23);
  }
  v4 = a2[23];
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *(char **)a2;
  if (v4 >= 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  if (!v6)
    return 0;
  v7 = (char *)v2 + v3;
  if (v3 >= v6)
  {
    v10 = *v5;
    v11 = v2;
    do
    {
      v12 = v3 - v6;
      if (v12 == -1)
        break;
      v13 = (char *)memchr(v11, v10, v12 + 1);
      if (!v13)
        break;
      v8 = v13;
      if (!memcmp(v13, v5, v6))
        goto LABEL_13;
      v11 = v8 + 1;
      v3 = v7 - (v8 + 1);
    }
    while (v3 >= v6);
  }
  v8 = v7;
LABEL_13:
  if (v8 == v7)
    return -1;
  else
    return v8 - (char *)v2;
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<LazuliRequest,LazuliMessage>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t LazuliMessageDecoder::decode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int64_t v9;
  std::string *p_str;
  int v11;
  void *v12;
  std::string *v13;
  int64_t v14;
  char *v15;
  char *v16;
  std::string::size_type v17;
  int64_t v18;
  std::string *v19;
  int v20;
  void *v21;
  std::string *v22;
  int64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  std::string *v27;
  std::string::size_type v28;
  const void *v29;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  int v39;
  std::string *v40;
  int64_t v41;
  char *v42;
  char v43;
  size_t size;
  std::string *p_p;
  _BYTE *v46;
  std::string::size_type v47;
  std::string::size_type v48;
  std::string::size_type v49;
  std::string *v50;
  uint64_t v51;
  int64_t v52;
  std::string *v53;
  int v54;
  char *v55;
  int64_t v56;
  uint64_t v57;
  std::string *v58;
  std::string::size_type v59;
  int v60;
  std::string *v61;
  int64_t v62;
  char *v63;
  char *v65;
  int v66;
  std::string *v67;
  int64_t v68;
  char *v69;
  char *v70;
  std::string::size_type v71;
  uint64_t v72;
  std::string::size_type v73;
  std::string *p_s1;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  _QWORD *v79;
  uint64_t v80;
  _BYTE *v81;
  std::string *v82;
  int v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  std::string *v88;
  std::string::size_type v89;
  uint64_t *v90;
  int64_t v91;
  std::string *v92;
  std::string *v93;
  int64_t v94;
  uint64_t v95;
  _BYTE *v96;
  int v97;
  char *v98;
  int v99;
  std::string *v100;
  int64_t v101;
  char *v102;
  char *v103;
  size_t v104;
  std::string *v105;
  _BYTE *v106;
  std::string::size_type v107;
  size_t v109;
  std::string *v110;
  _BYTE *v111;
  std::string::size_type v112;
  uint64_t v113;
  std::string::value_type *v114;
  int64_t v115;
  std::string::size_type v116;
  int v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t *p_shared_owners;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  std::string::size_type v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  std::string::size_type v137;
  std::string::size_type v138;
  uint64_t v139;
  uint64_t v140;
  _BYTE *v141;
  _BYTE *v142;
  uint64_t v143;
  _BYTE *v144;
  uint64_t v145;
  std::string::size_type v146;
  uint64_t v147;
  _QWORD *v148;
  std::string v149;
  std::string v150;
  std::string __s1;
  std::string v152;
  std::string v153;
  std::string v154;
  std::string __p;
  uint64_t v156;
  std::__shared_weak_count *v157;
  std::string v158;
  std::string __str;
  uint64_t v160;
  std::__shared_weak_count *v161;
  char v162[9];

  std::string::basic_string[abi:ne180100]<0>(&__str, "decoder.laz");
  std::string::basic_string[abi:ne180100]<0>(&v158, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&__str, (uint64_t)&v158);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"LazuliMessageDecoder::decode bytes = ", 37);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v158.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(a1 + 40))
  {
    memset(&__p, 0, sizeof(__p));
    if (*(char *)(a2 + 23) < 0)
    {
      v7 = a2;
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      __p = *(std::string *)a2;
      v7 = a2;
    }
    v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if (size)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v46 = memchr(p_p, 10, size);
      v37 = 0;
      if (v46)
      {
        v47 = v46 - (_BYTE *)p_p;
        if (v47 != -1)
        {
          memset(&v154, 0, sizeof(v154));
          std::string::basic_string(&v154, &__p, 0, v47, (std::allocator<char> *)&__str);
          std::string::basic_string(&__str, &__p, v47 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v158);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p = __str;
          ims::chomp(&v154, "\r\n\t ", 3);
          memset(&v153, 0, sizeof(v153));
          v48 = ims::nextToken(&v154, 0, &v153, 0x20u);
          if (v48 == -1)
          {
            std::string::basic_string[abi:ne180100]<0>(&__str, "decoder.laz");
            std::string::basic_string[abi:ne180100]<0>(&v158, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v51 = ImsLogger::error(ims::_logger, (uint64_t)&__str, (uint64_t)&v158);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v51 + 8), (uint64_t)"LazuliMessageDecoder: no tokens in start line", 45);
            *(_BYTE *)(v51 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            goto LABEL_143;
          }
          v49 = HIBYTE(v153.__r_.__value_.__r.__words[2]);
          if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v49 = v153.__r_.__value_.__l.__size_;
          if (v49 != 4)
            goto LABEL_105;
          v50 = &v153;
          if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v50 = (std::string *)v153.__r_.__value_.__r.__words[0];
          if (LODWORD(v50->__r_.__value_.__l.__data_) != 1347572557)
          {
LABEL_105:
            std::string::basic_string[abi:ne180100]<0>(&__str, "decoder.laz");
            std::string::basic_string[abi:ne180100]<0>(&v158, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v51 = ImsLogger::error(ims::_logger, (uint64_t)&__str, (uint64_t)&v158);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v51 + 8), (uint64_t)"LazuliMessageDecoder: non MSRP protocol", 39);
            *(_BYTE *)(v51 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_143:
            *(_BYTE *)(v51 + 17) = 0;
            if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v158.__r_.__value_.__l.__data_);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            v37 = 0;
            goto LABEL_148;
          }
          memset(&v152, 0, sizeof(v152));
          v71 = ims::nextToken(&v154, v48, &v152, 0x20u);
          if (v71 == -1)
          {
            std::string::basic_string[abi:ne180100]<0>(&__str, "decoder.laz");
            std::string::basic_string[abi:ne180100]<0>(&v158, "");
            v76 = ims::error((uint64_t)&__str, (uint64_t)&v158);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v76 + 8), (uint64_t)"LazuliMessageDecoder: no session ID in the message ", 51);
            *(_BYTE *)(v76 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v76 + 64))(v76, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v76 + 17) = 0;
            if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v158.__r_.__value_.__l.__data_);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            v37 = 0;
            goto LABEL_343;
          }
          memset(&__s1, 0, sizeof(__s1));
          if (ims::nextToken(&v154, v71, &__s1, 0x20u) == -1)
          {
            std::string::basic_string[abi:ne180100]<0>(&__str, "decoder.laz");
            std::string::basic_string[abi:ne180100]<0>(&v158, "");
            v77 = ims::error((uint64_t)&__str, (uint64_t)&v158);
            v78 = (_BYTE *)ImsOutStream::operator<<(v77, "LazuliMessageDecoder: no method or status in the message ");
            (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v78 + 64))(v78, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v78[17] = 0;
            if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v158.__r_.__value_.__l.__data_);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            goto LABEL_196;
          }
          v72 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v73 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          else
            v73 = __s1.__r_.__value_.__l.__size_;
          if (v73 == 4)
          {
            if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
            {
              if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
              {
                p_s1 = &__s1;
                v75 = "SEND";
                while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v75)
                {
                  p_s1 = (std::string *)((char *)p_s1 + 1);
                  ++v75;
                  if (!--v72)
                    goto LABEL_197;
                }
                goto LABEL_189;
              }
LABEL_197:
              std::allocate_shared[abi:ne180100]<LazuliRequest,std::allocator<LazuliRequest>,std::string &,std::string const&,LazuliMessageEncodingMap const*&,void>((uint64_t *)&__str, (__int128 *)&v152, (__int128 *)"SEND", *(_QWORD *)a1);
              std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a3, (__int128 *)&__str);
              v86 = (_QWORD *)std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__str);
              std::string::basic_string[abi:ne180100]<0>(v86, "decoder.laz");
              std::string::basic_string[abi:ne180100]<0>(&v158, "");
              v87 = ims::debug((uint64_t)&__str, (uint64_t)&v158);
              v81 = (_BYTE *)ImsOutStream::operator<<(v87, "Allocated new MSRP message - REQUEST");
              (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v81 + 64))(v81, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              goto LABEL_198;
            }
            if (!memcmp(__s1.__r_.__value_.__l.__data_, "SEND", __s1.__r_.__value_.__l.__size_))
              goto LABEL_197;
          }
LABEL_189:
          if (std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, "REPORT"))
          {
            std::allocate_shared[abi:ne180100]<LazuliRequest,std::allocator<LazuliRequest>,std::string &,std::string const&,LazuliMessageEncodingMap const*&,void>((uint64_t *)&__str, (__int128 *)&v152, (__int128 *)"REPORT", *(_QWORD *)a1);
            std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a3, (__int128 *)&__str);
            v79 = (_QWORD *)std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__str);
            std::string::basic_string[abi:ne180100]<0>(v79, "decoder.laz");
            std::string::basic_string[abi:ne180100]<0>(&v158, "");
            v80 = ims::debug((uint64_t)&__str, (uint64_t)&v158);
            v81 = (_BYTE *)ImsOutStream::operator<<(v80, "Allocated new MSRP message - REPORT");
            (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v81 + 64))(v81, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_198:
            v81[17] = 0;
            if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v158.__r_.__value_.__l.__data_);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            memset(&v150, 0, sizeof(v150));
            std::string::basic_string[abi:ne180100]<0>(&v150, "-------");
            if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v88 = &v152;
            else
              v88 = (std::string *)v152.__r_.__value_.__r.__words[0];
            if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v89 = HIBYTE(v152.__r_.__value_.__r.__words[2]);
            else
              v89 = v152.__r_.__value_.__l.__size_;
            std::string::append(&v150, (const std::string::value_type *)v88, v89);
            v90 = (uint64_t *)a3;
            v91 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v92 = &__p;
            else
              v92 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v93 = &v150;
            else
              v93 = (std::string *)v150.__r_.__value_.__r.__words[0];
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v94 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
            else
              v94 = v150.__r_.__value_.__l.__size_;
            if (v94)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v91 = __p.__r_.__value_.__l.__size_;
              if (v91 >= v94)
              {
                v98 = (char *)v92 + v91;
                v99 = v93->__r_.__value_.__s.__data_[0];
                v100 = v92;
                do
                {
                  v101 = v91 - v94;
                  if (v101 == -1)
                    break;
                  v102 = (char *)memchr(v100, v99, v101 + 1);
                  if (!v102)
                    break;
                  v103 = v102;
                  if (!memcmp(v102, v93, v94))
                  {
                    if (v103 == v98 || v103 - (char *)v92 == -1)
                      break;
                    goto LABEL_234;
                  }
                  v100 = (std::string *)(v103 + 1);
                  v91 = v98 - (v103 + 1);
                }
                while (v91 >= v94);
              }
              std::string::basic_string[abi:ne180100]<0>(&__str, "decoder.laz");
              std::string::basic_string[abi:ne180100]<0>(&v158, "");
              v95 = ims::debug((uint64_t)&__str, (uint64_t)&v158);
              v96 = (_BYTE *)ImsOutStream::operator<<(v95, "MSRP endline not found");
              (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v96 + 64))(v96, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v96[17] = 0;
              if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v158.__r_.__value_.__l.__data_);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              v97 = 1;
            }
            else
            {
LABEL_234:
              v97 = 0;
            }
            memset(&v149, 0, sizeof(v149));
            do
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v104 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              else
                v104 = __p.__r_.__value_.__l.__size_;
              if (!v104)
                break;
              v105 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                   ? &__p
                   : (std::string *)__p.__r_.__value_.__r.__words[0];
              v106 = memchr(v105, 10, v104);
              v107 = v106 - (_BYTE *)v105;
              if (!v106 || v107 == -1)
                break;
              std::string::basic_string(&__str, &__p, 0, v107, (std::allocator<char> *)&v158);
              if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v149.__r_.__value_.__l.__data_);
              v149 = __str;
              std::string::basic_string(&__str, &__p, v107 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v158);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              __p = __str;
              v109 = (v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                   ? HIBYTE(v149.__r_.__value_.__r.__words[2])
                   : v149.__r_.__value_.__l.__size_;
              if (!v109)
                break;
              v110 = (v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                   ? &v149
                   : (std::string *)v149.__r_.__value_.__r.__words[0];
              v111 = memchr(v110, 58, v109);
              if (!v111)
                break;
              v112 = v111 - (_BYTE *)v110;
              if (v111 - (_BYTE *)v110 == -1)
                break;
              v113 = v109 <= v112 + 1 ? v112 + 1 : v109;
              v114 = &v110->__r_.__value_.__s.__data_[1];
              v115 = v111 - (_BYTE *)v110;
              while (1)
              {
                v116 = v115 + 1;
                if (v115 + 1 >= v109)
                  break;
                v117 = v114[v115++];
                if (v117 != 32)
                  goto LABEL_268;
              }
              v116 = v113;
LABEL_268:
              v160 = 0;
              v161 = 0;
              v118 = *(_QWORD **)a1;
              std::string::basic_string(&__str, &v149, 0, v112, (std::allocator<char> *)&v158);
              std::string::basic_string(&v158, &v149, v116, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v162);
              LazuliMessageEncodingMap::createHeader(v118, (uint64_t)&__str, (uint64_t)&v158, &v160);
              if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v158.__r_.__value_.__l.__data_);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              v119 = v160;
              if (v160)
              {
                v120 = *v90;
                v156 = v160;
                v157 = v161;
                if (v161)
                {
                  p_shared_owners = (unint64_t *)&v161->__shared_owners_;
                  do
                    v122 = __ldxr(p_shared_owners);
                  while (__stxr(v122 + 1, p_shared_owners));
                }
                LazuliMessage::addHeader(v120, (__int128 *)(v119 + 24), &v156, 0);
                v123 = v157;
                if (v157)
                {
                  v124 = (unint64_t *)&v157->__shared_owners_;
                  do
                    v125 = __ldaxr(v124);
                  while (__stlxr(v125 - 1, v124));
                  if (!v125)
                  {
                    ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                    std::__shared_weak_count::__release_weak(v123);
                  }
                }
              }
              v126 = v161;
              if (v161)
              {
                v127 = (unint64_t *)&v161->__shared_owners_;
                do
                  v128 = __ldaxr(v127);
                while (__stlxr(v128 - 1, v127));
                if (!v128)
                {
                  ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                  std::__shared_weak_count::__release_weak(v126);
                }
              }
            }
            while (v119);
            if (*v90
            {
              v129 = (std::__shared_weak_count *)v90[1];
              if (v129)
              {
                v130 = (unint64_t *)&v129->__shared_owners_;
                do
                  v131 = __ldxr(v130);
                while (__stxr(v131 + 1, v130));
              }
              v132 = *(unsigned __int8 *)(v7 + 23);
              if ((v132 & 0x80u) != 0)
                v132 = *(_QWORD *)(v7 + 8);
              v133 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v133 = __p.__r_.__value_.__l.__size_;
              v37 = v132 - v133;
              if (v129)
              {
                v134 = (unint64_t *)&v129->__shared_owners_;
                do
                  v135 = __ldaxr(v134);
                while (__stlxr(v135 - 1, v134));
                if (!v135)
                {
                  ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                  std::__shared_weak_count::__release_weak(v129);
                }
              }
            }
            else if (std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__s1, "REPORT"))
            {
              v136 = *(unsigned __int8 *)(v7 + 23);
              if ((v136 & 0x80u) != 0)
                v136 = *(_QWORD *)(v7 + 8);
              v137 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v137 = __p.__r_.__value_.__l.__size_;
              v37 = v136 - v137;
            }
            else
            {
              v138 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v138 = __p.__r_.__value_.__l.__size_;
              *(_QWORD *)(a1 + 32) = v138;
              std::string::basic_string[abi:ne180100]<0>(&__str, "decoder.laz");
              std::string::basic_string[abi:ne180100]<0>(&v158, "");
              v139 = ims::debug((uint64_t)&__str, (uint64_t)&v158);
              v140 = ImsOutStream::operator<<(v139, "bufToDecodeSize=");
              std::ostream::operator<<();
              *(_BYTE *)(v140 + 17) = 0;
              v141 = (_BYTE *)ImsOutStream::operator<<(v140, " headerCount=");
              std::ostream::operator<<();
              v141[17] = 0;
              (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v141 + 64))(v141, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v141[17] = 0;
              if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v158.__r_.__value_.__l.__data_);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              v142 = (_BYTE *)(a1 + 48);
              if (v97)
              {
                *(_BYTE *)(a1 + 40) = 1;
                std::string::operator=((std::string *)(a1 + 48), &v150);
                std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)(a1 + 96), *v90, v90[1]);
                std::string::operator=((std::string *)(a1 + 72), &__p);
                std::string::basic_string[abi:ne180100]<0>(&__str, "decoder.laz");
                std::string::basic_string[abi:ne180100]<0>(&v158, "");
                v143 = ims::debug((uint64_t)&__str, (uint64_t)&v158);
                v144 = (_BYTE *)ImsOutStream::operator<<(v143, "Set _isOversizedMessage=true endLinePattern=");
                (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v144 + 32))(v144, v142);
                (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v144 + 64))(v144, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              }
              else
              {
                *(_BYTE *)(a1 + 40) = 0;
                if (*(char *)(a1 + 71) < 0)
                {
                  *(_QWORD *)(a1 + 56) = 0;
                  v142 = *(_BYTE **)(a1 + 48);
                }
                else
                {
                  *(_BYTE *)(a1 + 71) = 0;
                }
                *v142 = 0;
                std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)(a1 + 96));
                std::string::basic_string[abi:ne180100]<0>(&__str, "decoder.laz");
                std::string::basic_string[abi:ne180100]<0>(&v158, "");
                v145 = ims::debug((uint64_t)&__str, (uint64_t)&v158);
                v144 = (_BYTE *)ImsOutStream::operator<<(v145, "Set _isOversizedMessage=false");
                (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v144 + 64))(v144, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              }
              v144[17] = 0;
              if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v158.__r_.__value_.__l.__data_);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              std::operator+<char>();
              v146 = std::string::find[abi:ne180100](&__p, (char *)&__str);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if (v146 == -1)
              {
                std::operator+<char>();
                v146 = std::string::find[abi:ne180100](&__p, (char *)&__str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                if (v146 == -1)
                  v146 = std::string::find[abi:ne180100](&__p, (char *)&v150);
              }
              memset(&__str, 0, sizeof(__str));
              std::string::basic_string(&__str, &__p, 0, v146, (std::allocator<char> *)&v158);
              *(_OWORD *)&v158.__r_.__value_.__l.__data_ = 0uLL;
              std::dynamic_pointer_cast[abi:ne180100]<LazuliRequest,LazuliMessage>(&v158, (void *)*v90, v90[1]);
              if (v158.__r_.__value_.__r.__words[0])
                std::string::operator=((std::string *)(v158.__r_.__value_.__r.__words[0] + 104), &__str);
              std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v158);
              if (*(char *)(v7 + 23) >= 0)
                v37 = *(unsigned __int8 *)(v7 + 23);
              else
                v37 = *(_QWORD *)(v7 + 8);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v149.__r_.__value_.__l.__data_);
            if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v150.__r_.__value_.__l.__data_);
            goto LABEL_341;
          }
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v82 = &__s1;
          else
            v82 = (std::string *)__s1.__r_.__value_.__r.__words[0];
          v83 = strtoul((const char *)v82, 0, 10);
          if (v83)
          {
            std::allocate_shared[abi:ne180100]<LazuliResponse,std::allocator<LazuliResponse>,std::string &,unsigned int &,LazuliMessageEncodingMap const*&,void>((uint64_t *)&__str, (__int128 *)&v152, v83, *(_QWORD *)a1);
            std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a3, (__int128 *)&__str);
            v84 = (_QWORD *)std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__str);
            std::string::basic_string[abi:ne180100]<0>(v84, "decoder.laz");
            std::string::basic_string[abi:ne180100]<0>(&v158, "");
            v85 = ims::debug((uint64_t)&__str, (uint64_t)&v158);
            v81 = (_BYTE *)ImsOutStream::operator<<(v85, "Allocated new MSRP message - RESPONSE");
            (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v81 + 64))(v81, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            goto LABEL_198;
          }
LABEL_196:
          v37 = 0;
LABEL_341:
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_343:
          if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v152.__r_.__value_.__l.__data_);
LABEL_148:
          if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v153.__r_.__value_.__l.__data_);
          if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v154.__r_.__value_.__l.__data_);
          if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
            return v37;
LABEL_153:
          v38 = (void *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_154;
        }
      }
    }
    else
    {
      v37 = 0;
    }
    if ((v43 & 0x80) == 0)
      return v37;
    goto LABEL_153;
  }
  memset(&__str, 0, sizeof(__str));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __str = *(std::string *)a2;
  v147 = a2;
  v148 = (_QWORD *)a3;
  v8 = (_BYTE *)(a1 + 48);
  std::operator+<char>();
  v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  v11 = SHIBYTE(v158.__r_.__value_.__r.__words[2]);
  v12 = (void *)v158.__r_.__value_.__r.__words[0];
  if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v158;
  else
    v13 = (std::string *)v158.__r_.__value_.__r.__words[0];
  if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(v158.__r_.__value_.__r.__words[2]);
  else
    v14 = v158.__r_.__value_.__l.__size_;
  if (v14)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = __str.__r_.__value_.__l.__size_;
    v15 = (char *)p_str + v9;
    if (v9 >= v14)
    {
      v39 = v13->__r_.__value_.__s.__data_[0];
      v40 = p_str;
      do
      {
        v41 = v9 - v14;
        if (v41 == -1)
          break;
        v42 = (char *)memchr(v40, v39, v41 + 1);
        if (!v42)
          break;
        v16 = v42;
        if (!memcmp(v42, v13, v14))
          goto LABEL_25;
        v40 = (std::string *)(v16 + 1);
        v9 = v15 - (v16 + 1);
      }
      while (v9 >= v14);
    }
    v16 = v15;
LABEL_25:
    if (v16 == v15)
      v17 = -1;
    else
      v17 = v16 - (char *)p_str;
    if (v11 < 0)
      goto LABEL_29;
  }
  else
  {
    v17 = 0;
    if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
LABEL_29:
      operator delete(v12);
  }
  if (v17 != -1)
  {
LABEL_51:
    std::string::basic_string[abi:ne180100]<0>(&v158, "decoder.laz");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v26 = ImsLogger::debug(ims::_logger, (uint64_t)&v158, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"MSRP endLine is found in oversized message", 42);
    *(_BYTE *)(v26 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v26 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v158.__r_.__value_.__l.__data_);
    memset(&v158, 0, sizeof(v158));
    std::string::basic_string(&v158, &__str, 0, v17, (std::allocator<char> *)&__p);
    if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v158;
    else
      v27 = (std::string *)v158.__r_.__value_.__r.__words[0];
    if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = HIBYTE(v158.__r_.__value_.__r.__words[2]);
    else
      v28 = v158.__r_.__value_.__l.__size_;
    std::string::append((std::string *)(a1 + 72), (const std::string::value_type *)v27, v28);
    v29 = *(const void **)(a1 + 96);
    if (v29)
    {
      if (v30)
      {
        v31 = *(std::__shared_weak_count **)(a1 + 104);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v31;
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        std::string::operator=((std::string *)(v30 + 104), (const std::string *)(a1 + 72));
        std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100](v148, *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
        if (v31)
        {
          v34 = (unint64_t *)&v31->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
      }
    }
    if (*(char *)(a1 + 71) < 0)
    {
      v8 = *(_BYTE **)(a1 + 48);
      v36 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = 0;
    }
    else
    {
      v36 = *(unsigned __int8 *)(a1 + 71);
      *(_BYTE *)(a1 + 71) = 0;
    }
    *(_BYTE *)(a1 + 40) = 0;
    *v8 = 0;
    v37 = v17 + v36 + 5;
    if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v158.__r_.__value_.__l.__data_);
    goto LABEL_78;
  }
  std::operator+<char>();
  v18 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &__str;
  else
    v19 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v20 = SHIBYTE(v158.__r_.__value_.__r.__words[2]);
  v21 = (void *)v158.__r_.__value_.__r.__words[0];
  if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v158;
  else
    v22 = (std::string *)v158.__r_.__value_.__r.__words[0];
  if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(v158.__r_.__value_.__r.__words[2]);
  else
    v23 = v158.__r_.__value_.__l.__size_;
  if (v23)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v18 = __str.__r_.__value_.__l.__size_;
    v24 = (char *)v19 + v18;
    if (v18 >= v23)
    {
      v60 = v22->__r_.__value_.__s.__data_[0];
      v61 = v19;
      do
      {
        v62 = v18 - v23;
        if (v62 == -1)
          break;
        v63 = (char *)memchr(v61, v60, v62 + 1);
        if (!v63)
          break;
        v25 = v63;
        if (!memcmp(v63, v22, v23))
          goto LABEL_45;
        v61 = (std::string *)(v25 + 1);
        v18 = v24 - (v25 + 1);
      }
      while (v18 >= v23);
    }
    v25 = v24;
LABEL_45:
    if (v25 == v24)
      v17 = -1;
    else
      v17 = v25 - (char *)v19;
    if (v20 < 0)
      goto LABEL_49;
  }
  else
  {
    v17 = 0;
    if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
LABEL_49:
      operator delete(v21);
  }
  if (v17 != -1)
    goto LABEL_51;
  v52 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = &__str;
  else
    v53 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v54 = *(char *)(a1 + 71);
  if (v54 >= 0)
    v55 = (char *)(a1 + 48);
  else
    v55 = *(char **)(a1 + 48);
  if (v54 >= 0)
    v56 = *(unsigned __int8 *)(a1 + 71);
  else
    v56 = *(_QWORD *)(a1 + 56);
  if (!v56)
  {
    v17 = 0;
    goto LABEL_51;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v52 = __str.__r_.__value_.__l.__size_;
  if (v52 >= v56)
  {
    v65 = (char *)v53 + v52;
    v66 = *v55;
    v67 = v53;
    do
    {
      v68 = v52 - v56;
      if (v68 == -1)
        break;
      v69 = (char *)memchr(v67, v66, v68 + 1);
      if (!v69)
        break;
      v70 = v69;
      if (!memcmp(v69, v55, v56))
      {
        if (v70 != v65)
        {
          v17 = v70 - (char *)v53;
          if (v70 - (char *)v53 != -1)
            goto LABEL_51;
        }
        break;
      }
      v67 = (std::string *)(v70 + 1);
      v52 = v65 - (v70 + 1);
    }
    while (v52 >= v56);
  }
  std::string::basic_string[abi:ne180100]<0>(&v158, "decoder.laz");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v57 = ImsLogger::debug(ims::_logger, (uint64_t)&v158, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v57 + 8), (uint64_t)"MSRP endLine not found. Keep building oversized message", 55);
  *(_BYTE *)(v57 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v57 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v158.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 40) = 1;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v58 = &__str;
  else
    v58 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v59 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    v59 = __str.__r_.__value_.__l.__size_;
  std::string::append((std::string *)(a1 + 72), (const std::string::value_type *)v58, v59);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100](v148, *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  if (*(char *)(v147 + 23) < 0)
    v37 = *(_QWORD *)(v147 + 8);
  else
    v37 = *(unsigned __int8 *)(v147 + 23);
LABEL_78:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    v38 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_154:
    operator delete(v38);
  }
  return v37;
}

void sub_1BF138EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (a30 < 0)
    operator delete(a25);
  if (a36 < 0)
    operator delete(a31);
  if (a42 < 0)
    operator delete(a37);
  if (a48 < 0)
    operator delete(a43);
  if (a54 < 0)
    operator delete(a49);
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<LazuliRequest,std::allocator<LazuliRequest>,std::string &,std::string const&,LazuliMessageEncodingMap const*&,void>(uint64_t *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t result;

  v8 = operator new(0xB0uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E78C7F08;
  result = LazuliRequest::LazuliRequest((uint64_t)(v8 + 3), a2, a3, a4);
  *a1 = result;
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1BF139204(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<LazuliResponse,std::allocator<LazuliResponse>,std::string &,unsigned int &,LazuliMessageEncodingMap const*&,void>(uint64_t *a1, __int128 *a2, int a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t result;

  v8 = operator new(0xA0uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E78C7F58;
  result = LazuliMessage::LazuliMessage((uint64_t)(v8 + 3), a2, a4);
  v8[3] = &off_1E78DA128;
  *((_DWORD *)v8 + 38) = a3;
  *a1 = result;
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1BF139290(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void ims::analytics::SignallingDeferralEvent::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t *v14;
  xpc_object_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  std::string __p;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t object;
  uint64_t v34;
  std::__shared_weak_count *v35;
  xpc_object_t v36;

  v6 = operator new(0x90uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E78E24A8;
  v9 = *a1;
  v8 = (std::__shared_weak_count *)a1[1];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v6[3] = off_1E78E25E0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ims.ca.sigdeferral");
  ImsLogContainer::ImsLogContainer((uint64_t)(v7 + 4), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7[3] = off_1E78E24F8;
  v7[4] = &unk_1E78E2530;
  v12 = xpc_dictionary_create(0, 0, 0);
  v13 = v12;
  v14 = (xpc_object_t *)(v7 + 17);
  if (v12)
  {
    *v14 = v12;
  }
  else
  {
    v13 = xpc_null_create();
    *v14 = v13;
    if (!v13)
    {
      v15 = xpc_null_create();
      v13 = 0;
      goto LABEL_13;
    }
  }
  if (MEMORY[0x1C3B87B98](v13) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v13);
    goto LABEL_14;
  }
  v15 = xpc_null_create();
LABEL_13:
  *v14 = v15;
LABEL_14:
  xpc_release(v13);
  if (v8)
  {
    v16 = (unint64_t *)&v8->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v36 = *v14;
  if (v36)
    xpc_retain(v36);
  else
    v36 = xpc_null_create();
  v34 = v9;
  v35 = v8;
  if (v8)
  {
    v18 = (unint64_t *)&v8->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  ims::analytics::populateCellularInfo(&v36, (uint64_t)&v34);
  v20 = v35;
  if (v35)
  {
    v21 = (unint64_t *)&v35->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  xpc_release(v36);
  v36 = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    gettimeofday((timeval *)&__p, 0);
    v23 = (SLODWORD(__p.__r_.__value_.__r.__words[1]) / 1000
                       + 1000 * LODWORD(__p.__r_.__value_.__l.__data_)
                       - *(_DWORD *)(a2 + 8)
                       + 1375609856);
  }
  else
  {
    v23 = 0;
  }
  v32 = xpc_int64_create(*(_BYTE *)a2 == 0);
  if (!v32)
    v32 = xpc_null_create();
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v7 + 17);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"type";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v32, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v32);
  v32 = 0;
  v30 = xpc_int64_create(v23);
  if (!v30)
    v30 = xpc_null_create();
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v7 + 17);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"duration";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v30, &v31);
  xpc_release(v31);
  v31 = 0;
  xpc_release(v30);
  v30 = 0;
  v28 = xpc_int64_create(*(unsigned __int16 *)(a2 + 16));
  if (!v28)
    v28 = xpc_null_create();
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v7 + 17);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"signallingType";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v28, &v29);
  xpc_release(v29);
  v29 = 0;
  xpc_release(v28);
  if (v8)
  {
    v24 = (unint64_t *)&v8->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    do
      v26 = __ldaxr(v24);
    while (__stlxr(v26 - 1, v24));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a3 = v7 + 3;
  a3[1] = v7;
}

void sub_1BF139664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  uint64_t v19;
  std::__shared_weak_count *v20;
  xpc_object_t *v21;
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;

  if (a19)
  {
    p_shared_owners = (unint64_t *)&a19->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))a19->__on_zero_shared)(a19);
      std::__shared_weak_count::__release_weak(a19);
    }
  }
  xpc_release(*(xpc_object_t *)(v22 - 72));
  if (v20)
  {
    v26 = (unint64_t *)&v20->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  xpc_release(*v21);
  *(_QWORD *)(v19 + 136) = 0;
  *(_QWORD *)(v19 + 32) = off_1E78CFE68;
  if (*(char *)(v19 + 87) < 0)
    operator delete(*(void **)(v19 + 64));
  if (*(char *)(v19 + 63) < 0)
    operator delete(*(void **)(v19 + 40));
  if (v20)
  {
    v28 = (unint64_t *)&v20->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v19);
  operator delete(v30);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<`anonymous namespace'::SignallingDeferralEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E24A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<`anonymous namespace'::SignallingDeferralEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E24A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<`anonymous namespace'::SignallingDeferralEventImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void `anonymous namespace'::SignallingDeferralEventImpl::~SignallingDeferralEventImpl(_anonymous_namespace_::SignallingDeferralEventImpl *this)
{
  *(_QWORD *)this = off_1E78E24F8;
  *((_QWORD *)this + 1) = &unk_1E78E2530;
  xpc_release(*((xpc_object_t *)this + 14));
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 1) = off_1E78CFE68;
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

{
  *(_QWORD *)this = off_1E78E24F8;
  *((_QWORD *)this + 1) = &unk_1E78E2530;
  xpc_release(*((xpc_object_t *)this + 14));
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 1) = off_1E78CFE68;
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
  JUMPOUT(0x1C3B87100);
}

xpc_object_t `anonymous namespace'::SignallingDeferralEventImpl::getDict@<X0>(_anonymous_namespace_::SignallingDeferralEventImpl *this@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  xpc_object_t result;

  v2 = (void *)*((_QWORD *)this + 14);
  *a2 = v2;
  if (v2)
    return xpc_retain(v2);
  result = xpc_null_create();
  *a2 = result;
  return result;
}

_QWORD *`anonymous namespace'::SignallingDeferralEventImpl::getName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "commcenterimssignallingdeferral");
}

void `non-virtual thunk to'`anonymous namespace'::SignallingDeferralEventImpl::~SignallingDeferralEventImpl(_anonymous_namespace_::SignallingDeferralEventImpl *this)
{
  *((_QWORD *)this - 1) = off_1E78E24F8;
  *(_QWORD *)this = &unk_1E78E2530;
  xpc_release(*((xpc_object_t *)this + 13));
  *((_QWORD *)this + 13) = 0;
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  *((_QWORD *)this - 1) = off_1E78E24F8;
  *(_QWORD *)this = &unk_1E78E2530;
  xpc_release(*((xpc_object_t *)this + 13));
  *((_QWORD *)this + 13) = 0;
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1C3B87100);
}

void SipRequireHeader::~SipRequireHeader(char **this)
{
  *this = (char *)off_1E78CE4E0;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
}

{
  *this = (char *)off_1E78CE4E0;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C3B87100);
}

SipMultiStringHeader *SipRequireHeader::clone(SipRequireHeader *this)
{
  SipMultiStringHeader *v2;

  v2 = (SipMultiStringHeader *)operator new();
  SipMultiStringHeader::SipMultiStringHeader(v2, this);
  *(_QWORD *)v2 = &off_1E78E2618;
  *((_BYTE *)v2 + 56) = 0;
  return v2;
}

void sub_1BF139ADC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40045FEA15);
  _Unwind_Resume(a1);
}

int *BambiCallTerminationReasons::defaultReason(BambiCallTerminationReasons *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    BambiCallTerminationReasons::defaultReason(void)::reason = 0;
    xmmword_1EF57C758 = 0u;
    unk_1EF57C768 = 0u;
    xmmword_1EF57C748 = 0u;
    unk_1EF57C780 = 0u;
    unk_1EF57C790 = 0u;
    unk_1EF57C7A0 = 0u;
    unk_1EF57C7AF = 0u;
    HIBYTE(xmmword_1EF57C748) = 13;
    qmemcpy(&qword_1EF57C740, "InternalError", 13);
    unk_1EF57C774 = 0xA000001F4;
  }
  return &BambiCallTerminationReasons::defaultReason(void)::reason;
}

uint64_t BambiCallTerminationReason::BambiCallTerminationReason(uint64_t a1, const std::string *a2, const std::string *a3, int a4, int a5, int a6, int a7)
{
  std::string *v13;

  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 10;
  *(_OWORD *)(a1 + 72) = 0u;
  v13 = (std::string *)(a1 + 32);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 119) = 0u;
  std::string::operator=((std::string *)(a1 + 8), a2);
  std::string::operator=(v13, a3);
  *(_DWORD *)(a1 + 56) = a6;
  *(_DWORD *)(a1 + 60) = a4;
  *(_DWORD *)(a1 + 64) = a5;
  *(_DWORD *)(a1 + 128) = a7;
  return a1;
}

void sub_1BF139C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char *v10;
  void **v11;
  void **v12;
  void **v13;
  uint64_t v14;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v14);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a10);
  if (v10[95] < 0)
    operator delete(*v13);
  if (v10[55] < 0)
    operator delete(*v12);
  if (v10[31] < 0)
    operator delete(*v11);
  _Unwind_Resume(a1);
}

uint64_t BambiCallTerminationReason::BambiCallTerminationReason(uint64_t a1, __int128 *a2, int a3, __int128 *a4, __int128 *a5)
{
  __int128 v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;

  *(_DWORD *)a1 = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v9;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v10 = *a4;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 32) = v10;
  }
  *(_DWORD *)(a1 + 56) = a3;
  *(_QWORD *)(a1 + 60) = 0xA00000000;
  v11 = (std::string *)(a1 + 72);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v12 = *a5;
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a5 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  *(_QWORD *)(a1 + 127) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return a1;
}

void sub_1BF139D8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void BambiCallTerminationReason::addReasonToRequest(const std::string *this, SipRequest *a2)
{
  int v4;
  const SipParameterMap *size;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  const SipParameterMap *v17[2];

  if (this[2].__r_.__value_.__s.__data_[7] < 0)
  {
    if (!this[1].__r_.__value_.__r.__words[2])
      goto LABEL_13;
  }
  else if (!this[2].__r_.__value_.__s.__data_[7])
  {
    goto LABEL_13;
  }
  v4 = this[2].__r_.__value_.__r.__words[1];
  size = (const SipParameterMap *)this[4].__r_.__value_.__l.__size_;
  v17[0] = (const SipParameterMap *)this[4].__r_.__value_.__l.__data_;
  v17[1] = size;
  if (size)
  {
    v6 = (unint64_t *)((char *)size + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  SipMessage::addReasonWithParams(a2, v4, v17, (uint64_t)&this[1].__r_.__value_.__l.__size_, this + 3);
  if (size)
  {
    v8 = (unint64_t *)((char *)size + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      (*(void (**)(const SipParameterMap *))(*(_QWORD *)size + 16))(size);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)size);
    }
  }
LABEL_13:
  v10 = (_QWORD *)this[4].__r_.__value_.__r.__words[2];
  if (v10)
  {
    v13 = (_QWORD *)*v10;
    v11 = v10 + 1;
    v12 = v13;
    if (v13 != v11)
    {
      do
      {
        SipMessage::addHeader(a2, (uint64_t)(v12 + 4), (uint64_t)(v12 + 7), 0);
        v14 = (_QWORD *)v12[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (_QWORD *)v12[2];
            v16 = *v15 == (_QWORD)v12;
            v12 = v15;
          }
          while (!v16);
        }
        v12 = v15;
      }
      while (v15 != v11);
    }
  }
}

void sub_1BF139ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiCallIncomingTerminationReasons::getDefaultReasonMap(BambiCallIncomingTerminationReasons *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;

  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_23);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_23))
  {
    __cxa_atexit((void (*)(void *))std::weak_ptr<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>>::~weak_ptr, &qword_1ED70EFC0, &dword_1BEDF4000);
    __cxa_guard_release(&_MergedGlobals_23);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_1ED70EFA8);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ED70EFA8))
  {
    __cxa_atexit(MEMORY[0x1E0DE4AB8], &BambiCallIncomingTerminationReasons::getDefaultReasonMap(void)const::sDefaultsMtx, &dword_1BEDF4000);
    __cxa_guard_release(&qword_1ED70EFA8);
  }
  std::mutex::lock(&BambiCallIncomingTerminationReasons::getDefaultReasonMap(void)const::sDefaultsMtx);
  *a2 = 0;
  a2[1] = 0;
  if (!qword_1ED70EFC8
    || (v6 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_1ED70EFC8), (a2[1] = (uint64_t)v6) == 0)
    || (v7 = qword_1ED70EFC0, *a2 = qword_1ED70EFC0, !v7))
  {
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)a2);
    *a2 = 0;
    a2[1] = 0;
    (*(void (**)(BambiCallIncomingTerminationReasons *))(*(_QWORD *)this + 8))(this);
    v9 = *a2;
    v8 = a2[1];
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 16);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = (std::__shared_weak_count *)qword_1ED70EFC8;
    qword_1ED70EFC0 = v9;
    qword_1ED70EFC8 = v8;
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
  }
  std::mutex::unlock(&BambiCallIncomingTerminationReasons::getDefaultReasonMap(void)const::sDefaultsMtx);
}

void sub_1BF13A03C(_Unwind_Exception *a1)
{
  std::mutex::unlock(&BambiCallIncomingTerminationReasons::getDefaultReasonMap(void)const::sDefaultsMtx);
  _Unwind_Resume(a1);
}

uint64_t std::weak_ptr<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>>::~weak_ptr(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void BambiCallIncomingTerminationReasons::createDefaultReasonMap(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  uint64_t **v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  _OWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _OWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _OWORD *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _OWORD *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _OWORD *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _OWORD *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _OWORD *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _OWORD *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _OWORD *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _OWORD *v49;
  __int128 v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *size;
  unint64_t *v54;
  unint64_t v55;
  _OWORD *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _OWORD *v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _OWORD *v65;
  __int128 v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _OWORD *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  __int128 v76;
  __int128 v77;
  std::string __p;
  std::string v79;

  *a1 = 0;
  a1[1] = 0;
  v3 = operator new(0x30uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_1E78E26F0;
  v3[5] = 0;
  v3[4] = 0;
  v3[3] = v3 + 4;
  v4 = (uint64_t **)(v3 + 3);
  *a1 = v3 + 3;
  a1[1] = v3;
  v5 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v79, "Forbidden");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v5[1], &v79, &__p, 403, 16, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  ims::lowerCase((uint64_t)&v5[1].__shared_owners_, &v79);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v79.__r_.__value_.__l.__data_, &__p);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v7 + 7, (uint64_t)&v5[1], (uint64_t)v5);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  v8 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v79, "NoEmergencyCallLocation");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Emergency calls over WiFi not allowed in this location");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v8[1], &v79, &__p, 503, 31, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  v75 = v8 + 1;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  LODWORD(v75->__vftable) = 2;
  ims::lowerCase((uint64_t)&v8[1].__shared_owners_, &v79);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
  v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v79.__r_.__value_.__l.__data_, &__p);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v10 + 7, (uint64_t)v75, (uint64_t)v8);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  v11 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v11->__shared_owners_ = 0;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v79, "TransferredToOtherDevice");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Call has been transferred to another device");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v11[1], &v79, &__p, 200, 9, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  ims::lowerCase((uint64_t)&v11[1].__shared_owners_, &v79);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
  v14 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v79.__r_.__value_.__l.__data_, &__p);
  v15 = v11;
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v14 + 7, (uint64_t)&v11[1], (uint64_t)v11);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  v16 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v16->__shared_owners_ = 0;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v79, "CallCompletedElsewhere");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Call completed elsewhere");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v16[1], &v79, &__p, 200, 6, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  ims::lowerCase((uint64_t)&v16[1].__shared_owners_, &v79);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
  v19 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v79.__r_.__value_.__l.__data_, &__p);
  v20 = v16;
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v19 + 7, (uint64_t)&v16[1], (uint64_t)v16);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  v21 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v21->__shared_owners_ = 0;
  v21->__shared_weak_owners_ = 0;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v79, "OtherSecondaryDeviceOnCall");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Secondary device already in use");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v21[1], &v79, &__p, 603, 7, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (v20)
  {
    v22 = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  ims::lowerCase((uint64_t)&v21[1].__shared_owners_, &v79);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
  v24 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v79.__r_.__value_.__l.__data_, &__p);
  v25 = v21;
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v24 + 7, (uint64_t)&v21[1], (uint64_t)v21);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  v26 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v26->__shared_owners_ = 0;
  v26->__shared_weak_owners_ = 0;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v79, "BusyHere");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v26[1], &v79, &__p, 486, 3, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (v25)
  {
    v27 = (unint64_t *)&v25->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  ims::lowerCase((uint64_t)&v26[1].__shared_owners_, &v79);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
  v29 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v79.__r_.__value_.__l.__data_, &__p);
  v30 = v26;
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v29 + 7, (uint64_t)&v26[1], (uint64_t)v26);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  v31 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v31->__shared_owners_ = 0;
  v31->__shared_weak_owners_ = 0;
  v31->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v79, "TransactionDoesNotExist");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v31[1], &v79, &__p, 481, 11, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (v30)
  {
    v32 = (unint64_t *)&v30->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  ims::lowerCase((uint64_t)&v31[1].__shared_owners_, &v79);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
  v34 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v79.__r_.__value_.__l.__data_, &__p);
  v35 = v31;
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v34 + 7, (uint64_t)&v31[1], (uint64_t)v31);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  v36 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v36->__shared_owners_ = 0;
  v36->__shared_weak_owners_ = 0;
  v36->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v79, "RequestTimeout");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v36[1], &v79, &__p, 408, 13, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (v35)
  {
    v37 = (unint64_t *)&v35->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  ims::lowerCase((uint64_t)&v36[1].__shared_owners_, &v79);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
  v39 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v79.__r_.__value_.__l.__data_, &__p);
  v40 = v36;
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v39 + 7, (uint64_t)&v36[1], (uint64_t)v36);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  v41 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v41->__shared_owners_ = 0;
  v41->__shared_weak_owners_ = 0;
  v41->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v79, "TemporarilyUnavailable");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v41[1], &v79, &__p, 480, 14, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (v40)
  {
    v42 = (unint64_t *)&v40->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  ims::lowerCase((uint64_t)&v41[1].__shared_owners_, &v79);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
  v44 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v79.__r_.__value_.__l.__data_, &__p);
  v45 = v41;
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v44 + 7, (uint64_t)&v41[1], (uint64_t)v41);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  v46 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v46->__shared_owners_ = 0;
  v46->__shared_weak_owners_ = 0;
  v46->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v79, "Decline");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v46[1], &v79, &__p, 603, 1, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (v45)
  {
    v47 = (unint64_t *)&v45->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  ims::lowerCase((uint64_t)&v46[1].__shared_owners_, &v79);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
  v49 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v79.__r_.__value_.__l.__data_, &__p);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v49 + 7, (uint64_t)&v46[1], (uint64_t)v46);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  LODWORD(__p.__r_.__value_.__l.__data_) = 1;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const(&)[18],char const(&)[1],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&v79, "RequestTerminated", &SipResponse::kStatusRequestTerminated, (int *)&__p);
  v50 = *(_OWORD *)&v79.__r_.__value_.__l.__data_;
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = 0uLL;
  v76 = v50;
  if (v46)
  {
    v51 = (unint64_t *)&v46->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  size = (std::__shared_weak_count *)v79.__r_.__value_.__l.__size_;
  if (v79.__r_.__value_.__l.__size_)
  {
    v54 = (unint64_t *)(v79.__r_.__value_.__l.__size_ + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  ims::lowerCase(v76 + 8, &v79);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
  v56 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v79.__r_.__value_.__l.__data_, &__p);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v56 + 7, v76, *((uint64_t *)&v76 + 1));
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  v57 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v57->__shared_owners_ = 0;
  v57->__shared_weak_owners_ = 0;
  v57->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v79, "MediaTimeout");
  std::string::basic_string[abi:ne180100]<0>(&__p, "RTP Timeout");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v57[1], &v79, &__p, 0, 20, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (*((_QWORD *)&v76 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v76 + 1));
    }
  }
  ims::lowerCase((uint64_t)&v57[1].__shared_owners_, &v79);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
  v60 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v79.__r_.__value_.__l.__data_, &__p);
  v61 = v57;
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v60 + 7, (uint64_t)&v57[1], (uint64_t)v57);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  v62 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v62->__shared_owners_ = 0;
  v62->__shared_weak_owners_ = 0;
  v62->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v79, "MediaHeartbeatTimeout");
  std::string::basic_string[abi:ne180100]<0>(&__p, "RTCP Timeout");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v62[1], &v79, &__p, 0, 21, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (v61)
  {
    v63 = (unint64_t *)&v61->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  ims::lowerCase((uint64_t)&v62[1].__shared_owners_, &v79);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
  v65 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v79.__r_.__value_.__l.__data_, &__p);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v65 + 7, (uint64_t)&v62[1], (uint64_t)v62);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  LODWORD(__p.__r_.__value_.__l.__data_) = 11;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const(&)[18],char const(&)[1],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&v79, "SessionRedirected", &SipResponse::kStatusMovedTemporarily, (int *)&__p);
  v66 = *(_OWORD *)&v79.__r_.__value_.__l.__data_;
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = 0uLL;
  v77 = v66;
  if (v62)
  {
    v67 = (unint64_t *)&v62->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v69 = (std::__shared_weak_count *)v79.__r_.__value_.__l.__size_;
  if (v79.__r_.__value_.__l.__size_)
  {
    v70 = (unint64_t *)(v79.__r_.__value_.__l.__size_ + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  ims::lowerCase(v77 + 8, &v79);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
  v72 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&v79.__r_.__value_.__l.__data_, &__p);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v72 + 7, v77, *((uint64_t *)&v77 + 1));
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (*((_QWORD *)&v77 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v77 + 1) + 16))(*((_QWORD *)&v77 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v77 + 1));
    }
  }
}

void sub_1BF13AE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v23);
  _Unwind_Resume(a1);
}

void BambiCallIncomingTerminationReasons::BambiCallIncomingTerminationReasons(BambiCallIncomingTerminationReasons *this, const BambiCallIncomingTerminationReasons *a2)
{
  uint64_t v2;
  uint64_t **v3;
  __int128 *v4;
  __int128 *v5;
  uint64_t **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  BOOL v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p[2];
  __int128 v17;
  std::__shared_weak_count *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;

  BambiCallTerminationReasonsBase::BambiCallTerminationReasonsBase(this, a2);
  *(_QWORD *)v2 = off_1E78E2870;
  *(_QWORD *)(v2 + 176) = 0;
  *(_QWORD *)(v2 + 168) = v2 + 176;
  v3 = (uint64_t **)(v2 + 168);
  *(_QWORD *)(v2 + 184) = 0;
  v19 = 0;
  v20 = 0;
  BambiCallTerminationReasonsBase::getCombinedReasonMap((const void ***)v2, &v19);
  v4 = (__int128 *)(v19 + 1);
  v5 = (__int128 *)*v19;
  if ((_QWORD *)*v19 != v19 + 1)
  {
    do
    {
      v18 = 0;
      *(_OWORD *)__p = 0u;
      v17 = 0u;
      std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)__p, v5 + 2);
      v6 = std::__tree<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, *(_DWORD *)(*((_QWORD *)&v17 + 1) + 60), (_DWORD *)(*((_QWORD *)&v17 + 1) + 60));
      std::list<std::shared_ptr<BambiCallAction>>::push_back((uint64_t *)v6 + 5, *((uint64_t *)&v17 + 1), (uint64_t)v18);
      v7 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if (SBYTE7(v17) < 0)
        operator delete(__p[0]);
      v10 = (__int128 *)*((_QWORD *)v5 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(__int128 **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (__int128 *)*((_QWORD *)v5 + 2);
          v12 = *(_QWORD *)v11 == (_QWORD)v5;
          v5 = v11;
        }
        while (!v12);
      }
      v5 = v11;
    }
    while (v11 != v4);
  }
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1BF13B1C8(_Unwind_Exception *a1)
{
  BambiCallTerminationReasonsBase *v1;
  uint64_t v2;

  std::__tree<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>>>::destroy(v2, *((_QWORD **)v1 + 22));
  BambiCallTerminationReasonsBase::~BambiCallTerminationReasonsBase(v1);
  _Unwind_Resume(a1);
}

void BambiCallTerminationReasonsBase::BambiCallTerminationReasonsBase(BambiCallTerminationReasonsBase *this, const BambiCallTerminationReasonsBase *a2)
{
  *(_QWORD *)this = &unk_1E78E28B0;
  *((_DWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 127) = 0u;
  *((_BYTE *)this + 39) = 13;
  qmemcpy((char *)this + 16, "Internal", 8);
  *(_QWORD *)((char *)this + 68) = 0xA000001F4;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 18) = (char *)this + 152;
  *((_QWORD *)this + 20) = 0;
  BambiCallTerminationReasonsBase::assign(this, a2);
}

void sub_1BF13B2A4(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  _QWORD **v3;

  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy(v2, *v3);
  BambiCallTerminationReason::~BambiCallTerminationReason(v1);
  _Unwind_Resume(a1);
}

void BambiCallTerminationReasonsBase::getCombinedReasonMap(const void ***this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  const void ***v13;
  std::__shared_weak_count *v14;

  v13 = 0;
  v14 = 0;
  ((void (*)(const void ****__return_ptr))**this)(&v13);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>::map[abi:ne180100]((uint64_t *)&v10, v13);
  v7 = 0;
  v8 = 0;
  v9 = 0;
  std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>::map[abi:ne180100]((uint64_t *)&v7, this + 18);
  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__node_handle_merge_unique[abi:ne180100]<std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>>(&v7, &v10);
  std::allocate_shared[abi:ne180100]<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>,std::allocator<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>>,std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>&,void>((const void ***)&v7, a2);
  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy((uint64_t)&v7, v8);
  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy((uint64_t)&v10, v11);
  v4 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF13B394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, _QWORD *a14)
{
  uint64_t v14;

  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy((uint64_t)&a13, a14);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v14 - 40);
  _Unwind_Resume(a1);
}

void BambiCallIncomingTerminationReasons::assign(BambiCallIncomingTerminationReasons *this, const BambiCallIncomingTerminationReasons *a2)
{
  uint64_t **v4;
  _QWORD *v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 *v12;
  __int128 *v13;
  BOOL v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *__p[2];
  __int128 v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;

  v4 = (uint64_t **)((char *)this + 168);
  v5 = (_QWORD *)((char *)this + 176);
  std::__tree<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>>>::destroy((uint64_t)this + 168, *((_QWORD **)this + 22));
  *((_QWORD *)this + 21) = v5;
  *((_QWORD *)this + 23) = 0;
  *v5 = 0;
  BambiCallTerminationReasonsBase::assign(this, a2);
  v21 = 0;
  v22 = 0;
  BambiCallTerminationReasonsBase::getCombinedReasonMap((const void ***)this, &v21);
  v6 = (__int128 *)(v21 + 1);
  v7 = (__int128 *)*v21;
  if ((_QWORD *)*v21 != v21 + 1)
  {
    do
    {
      v20 = 0;
      *(_OWORD *)__p = 0u;
      v19 = 0u;
      std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)__p, v7 + 2);
      v8 = std::__tree<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v4, *(_DWORD *)(*((_QWORD *)&v19 + 1) + 60), (_DWORD *)(*((_QWORD *)&v19 + 1) + 60));
      std::list<std::shared_ptr<BambiCallAction>>::push_back((uint64_t *)v8 + 5, *((uint64_t *)&v19 + 1), (uint64_t)v20);
      v9 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      if (SBYTE7(v19) < 0)
        operator delete(__p[0]);
      v12 = (__int128 *)*((_QWORD *)v7 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(__int128 **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (__int128 *)*((_QWORD *)v7 + 2);
          v14 = *(_QWORD *)v13 == (_QWORD)v7;
          v7 = v13;
        }
        while (!v14);
      }
      v7 = v13;
    }
    while (v13 != v6);
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1BF13B538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void BambiCallTerminationReasonsBase::assign(BambiCallTerminationReasonsBase *this, const BambiCallTerminationReasonsBase *a2)
{
  _QWORD *v3;
  uint64_t **v4;
  __int128 *v5;
  char *v6;
  _OWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 *v11;
  __int128 *v12;
  BOOL v13;
  std::string __p;
  _BYTE v15[32];
  std::__shared_weak_count *v16;
  std::string *p_p;

  v3 = (_QWORD *)((char *)this + 152);
  v4 = (uint64_t **)((char *)this + 144);
  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy((uint64_t)this + 144, *((_QWORD **)this + 19));
  *(v3 - 1) = v3;
  *v3 = 0;
  v3[1] = 0;
  v5 = (__int128 *)*((_QWORD *)a2 + 18);
  v6 = (char *)a2 + 152;
  if (v5 != (__int128 *)((char *)a2 + 152))
  {
    do
    {
      v16 = 0;
      memset(v15, 0, sizeof(v15));
      std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)v15, v5 + 2);
      ims::lowerCase((uint64_t)v15, &__p);
      p_p = &__p;
      v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, (_OWORD **)&p_p);
      std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v7 + 7, *(uint64_t *)&v15[24], (uint64_t)v16);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v8 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if ((v15[23] & 0x80000000) != 0)
        operator delete(*(void **)v15);
      v11 = (__int128 *)*((_QWORD *)v5 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(__int128 **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (__int128 *)*((_QWORD *)v5 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v5;
          v5 = v12;
        }
        while (!v13);
      }
      v5 = v12;
    }
    while (v12 != (__int128 *)v6);
  }
}

void sub_1BF13B694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::pair<std::string const,std::shared_ptr<MessageSession>>::~pair((uint64_t)&a16);
  _Unwind_Resume(a1);
}

_QWORD *BambiCallIncomingTerminationReasons::addReason@<X0>(uint64_t **this@<X0>, const BambiCallTerminationReason *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t **v5;

  *a3 = 0;
  a3[1] = 0;
  BambiCallTerminationReasonsBase::addReason(this, a2, a3);
  v5 = std::__tree<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(this + 21, *(_DWORD *)(*a3 + 60), (_DWORD *)(*a3 + 60));
  return std::list<std::shared_ptr<BambiCallAction>>::push_back((uint64_t *)v5 + 5, *a3, a3[1]);
}

void sub_1BF13B704(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiCallTerminationReasonsBase::addReason(uint64_t **this@<X0>, const BambiCallTerminationReason *a2@<X1>, uint64_t *a3@<X8>)
{
  _OWORD *v5;
  std::string __p;
  std::string *p_p;

  *a3 = 0;
  a3[1] = 0;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,BambiCallTerminationReason const&,void>(a2, a3);
  ims::lowerCase(*a3 + 8, &__p);
  p_p = &__p;
  v5 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this + 18, (const void **)&__p.__r_.__value_.__l.__data_, (_OWORD **)&p_p);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v5 + 7, *a3, a3[1]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF13B798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void BambiCallIncomingTerminationReasons::reasonForResponse(BambiCallIncomingTerminationReasons *this@<X0>, const SipResponse *a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  char *v5;
  char *v6;
  char *v7;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  BOOL v13;
  char **v14;
  void *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  int v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int NumMatchesForPattern;
  int v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  double v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::string *v71;
  const char *v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  int v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  std::string v97;
  void *__p[2];
  char v99;
  std::string v100;

  v7 = (char *)*((_QWORD *)this + 22);
  v5 = (char *)this + 176;
  v6 = v7;
  if (!v7)
    goto LABEL_135;
  v10 = *((_DWORD *)a2 + 22);
  v11 = v5;
  do
  {
    v12 = *((_DWORD *)v6 + 8);
    v13 = v12 >= v10;
    if (v12 >= v10)
      v14 = (char **)v6;
    else
      v14 = (char **)(v6 + 8);
    if (v13)
      v11 = v6;
    v6 = *v14;
  }
  while (*v14);
  if (v11 != v5
    && v10 >= *((_DWORD *)v11 + 8)
    && (v15 = SipMessage::header<SipReasonHeader>((uint64_t)a2), v93 = 0, v94 = 0, *((_QWORD *)v11 + 7)))
  {
    v84 = a4;
    v16 = v11 + 40;
    v91 = 0;
    v90 = 0;
    v92 = 0xFFFFFFFFLL;
    if (v15)
    {
      v17 = (uint64_t *)*((_QWORD *)v15 + 8);
      v18 = (uint64_t *)*((_QWORD *)v15 + 9);
      if (v17 != v18)
      {
        v85 = (uint64_t *)*((_QWORD *)v15 + 9);
        while (1)
        {
          v19 = *v17;
          v88 = 0;
          v87 = 0;
          v20 = -1;
          v89 = -1;
          if (!*v17)
            goto LABEL_121;
          v21 = (_QWORD *)*((_QWORD *)v11 + 6);
          if (v21 != v16)
            break;
          v19 = 0;
LABEL_121:
          if (v20 > (int)v92)
          {
            std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100](&v90, v87, v19);
            LODWORD(v92) = v20;
          }
          if (v19)
          {
            v60 = (unint64_t *)(v19 + 8);
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v19);
            }
          }
          if (++v17 == v18)
          {
            std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100](&v93, v90, (uint64_t)v91);
            v62 = v93;
            if (v93)
            {
              std::string::basic_string[abi:ne180100]<0>(&v100, "bambi.call");
              v63 = v84;
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v64 = ImsLogger::debug(ims::_logger, (uint64_t)&v100, (uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v64 + 8), (uint64_t)"using matched reason ", 21);
              *(_BYTE *)(v64 + 17) = 0;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 32))(v64, v93 + 8);
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v64 + 64))(v64, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v64 + 17) = 0;
              if (v99 < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v100.__r_.__value_.__l.__data_);
              v62 = v93;
            }
            else
            {
              v63 = v84;
            }
            v77 = v94;
            *v63 = v62;
            v63[1] = v77;
            v93 = 0;
            v94 = 0;
            goto LABEL_182;
          }
        }
        v86 = v17;
        while (1)
        {
          v22 = v21[2];
          v23 = (std::__shared_weak_count *)v21[3];
          v95 = v22;
          v96 = v23;
          if (v23)
          {
            p_shared_owners = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldxr(p_shared_owners);
            while (__stxr(v25 + 1, p_shared_owners));
          }
          if (*(_BYTE *)(v22 + 132) && (a3 & 1) == 0)
          {
            std::string::basic_string[abi:ne180100]<0>(&v100, "bambi.call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v26 = ImsLogger::debug(ims::_logger, (uint64_t)&v100, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"ignoring override reason ", 25);
            *(_BYTE *)(v26 + 17) = 0;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 32))(v26, v22 + 8);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_46:
            *(_BYTE *)(v26 + 17) = 0;
LABEL_47:
            if (v99 < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v100.__r_.__value_.__l.__data_);
            goto LABEL_51;
          }
          v27 = *(unsigned __int8 *)(v22 + 95);
          if (*(char *)(v22 + 95) < 0)
          {
            if (!*(_QWORD *)(v22 + 80))
            {
LABEL_43:
              v33 = 0;
              goto LABEL_63;
            }
          }
          else if (!*(_BYTE *)(v22 + 95))
          {
            goto LABEL_43;
          }
          if ((v27 & 0x80u) == 0)
            v28 = *(unsigned __int8 *)(v22 + 95);
          else
            v28 = *(_QWORD *)(v22 + 80);
          v29 = *(unsigned __int8 *)(v19 + 23);
          v30 = (char)v29;
          if ((v29 & 0x80u) != 0)
            v29 = *(_QWORD *)(v19 + 8);
          if (v28 != v29)
            goto LABEL_45;
          if (v30 >= 0)
            v31 = (unsigned __int8 *)v19;
          else
            v31 = *(unsigned __int8 **)v19;
          if ((v27 & 0x80) != 0)
          {
            if (memcmp(*(const void **)(v22 + 72), v31, *(_QWORD *)(v22 + 80)))
              goto LABEL_45;
          }
          else if (*(_BYTE *)(v22 + 95))
          {
            v32 = (unsigned __int8 *)(v22 + 72);
            while (*v32 == *v31)
            {
              ++v32;
              ++v31;
              if (!--v27)
                goto LABEL_58;
            }
LABEL_45:
            std::string::basic_string[abi:ne180100]<0>(&v100, "bambi.call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v26 = ImsLogger::debug(ims::_logger, (uint64_t)&v100, (uint64_t)__p);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 32))(v26, v22 + 8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)": unable to match reason protocol (", 35);
            *(_BYTE *)(v26 + 17) = 0;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 32))(v26, v22 + 72);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)" != ", 4);
            *(_BYTE *)(v26 + 17) = 0;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 32))(v26, v19);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)")", 1);
            *(_BYTE *)(v26 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            goto LABEL_46;
          }
LABEL_58:
          std::string::basic_string[abi:ne180100]<0>(&v100, "bambi.call");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v36 = ImsLogger::debug(ims::_logger, (uint64_t)&v100, (uint64_t)__p);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 32))(v36, v22 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)": protocol matched (", 20);
          *(_BYTE *)(v36 + 17) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 32))(v36, v22 + 72);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)")", 1);
          *(_BYTE *)(v36 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v36 + 17) = 0;
          if (v99 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v100.__r_.__value_.__l.__data_);
          v33 = 1;
LABEL_63:
          v37 = *(_DWORD *)(v22 + 56);
          if (v37)
          {
            if (v37 != SipReason::cause((SipReason *)v19))
            {
              std::string::basic_string[abi:ne180100]<0>(&v100, "bambi.call");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v39 = ImsLogger::debug(ims::_logger, (uint64_t)&v100, (uint64_t)__p);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 32))(v39, v22 + 8);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)": unable to match reason cause (", 32);
              *(_BYTE *)(v39 + 17) = 0;
              std::ostream::operator<<();
              *(_BYTE *)(v39 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)" != ", 4);
              *(_BYTE *)(v39 + 17) = 0;
              SipReason::cause((SipReason *)v19);
              std::ostream::operator<<();
              *(_BYTE *)(v39 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)")", 1);
              *(_BYTE *)(v39 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v39 + 17) = 0;
              goto LABEL_47;
            }
            std::string::basic_string[abi:ne180100]<0>(&v100, "bambi.call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v38 = ImsLogger::debug(ims::_logger, (uint64_t)&v100, (uint64_t)__p);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 32))(v38, v22 + 8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)": cause matched (", 17);
            *(_BYTE *)(v38 + 17) = 0;
            SipReason::cause((SipReason *)v19);
            std::ostream::operator<<();
            *(_BYTE *)(v38 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)")", 1);
            *(_BYTE *)(v38 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v38 + 17) = 0;
            if (v99 < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v100.__r_.__value_.__l.__data_);
            ++v33;
          }
          if (*(char *)(v22 + 55) < 0)
          {
            if (!*(_QWORD *)(v22 + 40))
              goto LABEL_84;
          }
          else if (!*(_BYTE *)(v22 + 55))
          {
            goto LABEL_84;
          }
          SipReason::text((SipReason *)v19, &v100);
          NumMatchesForPattern = ims::getNumMatchesForPattern((uint64_t *)&v100, (uint64_t *)(v22 + 32), 1u);
          v41 = NumMatchesForPattern;
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v100.__r_.__value_.__l.__data_);
            if (!v41)
            {
LABEL_110:
              std::string::basic_string[abi:ne180100]<0>(&v100, "bambi.call");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v55 = ImsLogger::debug(ims::_logger, (uint64_t)&v100, (uint64_t)__p);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 32))(v55, v22 + 8);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v55 + 8), (uint64_t)": unable to match reason text (", 31);
              *(_BYTE *)(v55 + 17) = 0;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 32))(v55, v22 + 32);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v55 + 8), (uint64_t)" != ", 4);
              *(_BYTE *)(v55 + 17) = 0;
              v56 = SipReason::text((SipReason *)v19, &v97);
              (*(void (**)(uint64_t, std::string *, double))(*(_QWORD *)v55 + 32))(v55, &v97, v56);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v55 + 8), (uint64_t)")", 1);
              *(_BYTE *)(v55 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v55 + 17) = 0;
              if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v97.__r_.__value_.__l.__data_);
              goto LABEL_47;
            }
          }
          else if (!NumMatchesForPattern)
          {
            goto LABEL_110;
          }
          std::string::basic_string[abi:ne180100]<0>(&v100, "bambi.call");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v42 = ImsLogger::debug(ims::_logger, (uint64_t)&v100, (uint64_t)__p);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 32))(v42, v22 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)": text matched (", 16);
          *(_BYTE *)(v42 + 17) = 0;
          v43 = SipReason::text((SipReason *)v19, &v97);
          (*(void (**)(uint64_t, std::string *, double))(*(_QWORD *)v42 + 32))(v42, &v97, v43);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)")", 1);
          *(_BYTE *)(v42 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v42 + 17) = 0;
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v97.__r_.__value_.__l.__data_);
          if (v99 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v100.__r_.__value_.__l.__data_);
          ++v33;
LABEL_84:
          std::string::basic_string[abi:ne180100]<0>(&v100, "bambi.call");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v44 = ImsLogger::debug(ims::_logger, (uint64_t)&v100, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"matched ", 8);
          *(_BYTE *)(v44 + 17) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 32))(v44, v22 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)" with score ", 12);
          *(_BYTE *)(v44 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v44 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v44 + 17) = 0;
          if (v99 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v100.__r_.__value_.__l.__data_);
          if (v33 < v89)
            goto LABEL_51;
          std::string::basic_string[abi:ne180100]<0>(&v100, "bambi.call");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v45 = ImsLogger::debug(ims::_logger, (uint64_t)&v100, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v45 + 8), (uint64_t)"new highest scoring match is ", 29);
          *(_BYTE *)(v45 + 17) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 32))(v45, v22 + 8);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v45 + 17) = 0;
          if (v99 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v100.__r_.__value_.__l.__data_);
            if (!v23)
            {
LABEL_113:
              v57 = v88;
              v87 = v22;
              v88 = 0;
              if (v57)
              {
                v58 = (unint64_t *)&v57->__shared_owners_;
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
              v89 = v33;
              goto LABEL_119;
            }
          }
          else if (!v23)
          {
            goto LABEL_113;
          }
          v46 = (unint64_t *)&v23->__shared_owners_;
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
          do
            v48 = __ldxr(v46);
          while (__stxr(v48 + 1, v46));
          do
            v49 = __ldxr(v46);
          while (__stxr(v49 + 1, v46));
          v50 = v88;
          v87 = v22;
          v88 = v23;
          if (v50)
          {
            v51 = (unint64_t *)&v50->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
          v89 = v33;
          do
            v53 = __ldaxr(v46);
          while (__stlxr(v53 - 1, v46));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
          do
            v54 = __ldaxr(v46);
          while (__stlxr(v54 - 1, v46));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
LABEL_119:
          v23 = v96;
LABEL_51:
          if (v23)
          {
            v34 = (unint64_t *)&v23->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          v21 = (_QWORD *)v21[1];
          if (v21 == v16)
          {
            v20 = v89;
            v19 = (uint64_t)v88;
            v18 = v85;
            v17 = v86;
            goto LABEL_121;
          }
        }
      }
    }
    if (*((char *)a2 + 119) < 0)
      std::string::__init_copy_ctor_external(&v97, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
    else
      v97 = *(std::string *)((_BYTE *)a2 + 4);
    *a4 = 0;
    a4[1] = 0;
    v65 = (_QWORD *)*((_QWORD *)v11 + 6);
    if (v65 != v16)
    {
      while (1)
      {
        v67 = v65[2];
        v66 = (std::__shared_weak_count *)v65[3];
        if (v66)
        {
          v68 = (unint64_t *)&v66->__shared_owners_;
          do
            v69 = __ldxr(v68);
          while (__stxr(v69 + 1, v68));
        }
        if (!*(_BYTE *)(v67 + 132) || (a3 & 1) != 0)
        {
          if (!*(_DWORD *)(v67 + 56))
          {
            if (*(char *)(v67 + 55) < 0)
            {
              if (!*(_QWORD *)(v67 + 40))
                goto LABEL_162;
            }
            else if (!*(_BYTE *)(v67 + 55))
            {
              goto LABEL_162;
            }
            if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v71 = &v97;
            else
              v71 = (std::string *)v97.__r_.__value_.__r.__words[0];
            if (*(char *)(v67 + 55) >= 0)
              v72 = (const char *)(v67 + 32);
            else
              v72 = *(const char **)(v67 + 32);
            if (!strcasecmp((const char *)v71, v72))
            {
LABEL_162:
              std::string::basic_string[abi:ne180100]<0>(&v100, "bambi.call");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v73 = ImsLogger::debug(ims::_logger, (uint64_t)&v100, (uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v73 + 8), (uint64_t)"matched ", 8);
              *(_BYTE *)(v73 + 17) = 0;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v73 + 32))(v73, v67 + 8);
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v73 + 64))(v73, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v73 + 17) = 0;
              if (v99 < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v100.__r_.__value_.__l.__data_);
              std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100](a4, v67, (uint64_t)v66);
            }
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v100, "bambi.call");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v70 = ImsLogger::debug(ims::_logger, (uint64_t)&v100, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v70 + 8), (uint64_t)"ignoring override reason ", 25);
          *(_BYTE *)(v70 + 17) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 32))(v70, v67 + 8);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v70 + 64))(v70, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v70 + 17) = 0;
          if (v99 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v100.__r_.__value_.__l.__data_);
        }
        if (v66)
        {
          v74 = (unint64_t *)&v66->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        v65 = (_QWORD *)v65[1];
        if (v65 == v16)
        {
          if (*a4)
          {
            std::string::basic_string[abi:ne180100]<0>(&v100, "bambi.call");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v76 = ImsLogger::debug(ims::_logger, (uint64_t)&v100, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v76 + 8), (uint64_t)"using matching reason ", 22);
            *(_BYTE *)(v76 + 17) = 0;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v76 + 32))(v76, *a4 + 8);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v76 + 64))(v76, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v76 + 17) = 0;
            if (v99 < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v100.__r_.__value_.__l.__data_);
          }
          break;
        }
      }
    }
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v97.__r_.__value_.__l.__data_);
LABEL_182:
    v78 = v91;
    if (v91)
    {
      v79 = (unint64_t *)&v91->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    v81 = v94;
    if (v94)
    {
      v82 = (unint64_t *)&v94->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
  }
  else
  {
LABEL_135:
    *a4 = 0;
    a4[1] = 0;
  }
}

void sub_1BF13C874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (*(char *)(v34 - 89) < 0)
    operator delete(*(void **)(v34 - 112));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a10);
  if (a28 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void *SipMessage::header<SipReasonHeader>(uint64_t a1)
{
  unsigned __int8 *v1;
  const void *v2;

  v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 32), "Reason");
  if (v1 && (v2 = (const void *)*((_QWORD *)v1 + 5)) != 0)
  else
    return 0;
}

void BambiCallIncomingTerminationReasons::reasonForByeOrCancelRequest(const void ***this@<X0>, const SipRequest *a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  _QWORD *v14;
  _QWORD *v15;
  std::string::size_type *v16;
  int v17;
  __int128 v18;
  __int128 *v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 *v35;
  __int128 *v36;
  std::string::size_type size;
  std::string *v38;
  int data_low;
  int v40;
  BOOL v41;
  _BOOL4 v42;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v50;
  std::string __p;
  std::string v53;
  void *v54[2];
  char v55;
  _BYTE v56[32];
  std::__shared_weak_count *v57;
  _QWORD *v58;
  std::__shared_weak_count *v59;
  std::string v60;
  std::string v61;

  v6 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)a2 + 112))(a2);
  v7 = v6[23];
  if ((v7 & 0x80u) == 0)
    v8 = v6[23];
  else
    v8 = *((_QWORD *)v6 + 1);
  if (v8 == 3)
  {
    if ((v7 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v6, &SipRequest::kMethodBye, *((_QWORD *)v6 + 1)))
        goto LABEL_23;
    }
    else
    {
      if (!v6[23])
        goto LABEL_23;
      v9 = &SipRequest::kMethodBye;
      while (*v6 == *(unsigned __int8 *)v9)
      {
        ++v6;
        v9 = (__int128 *)((char *)v9 + 1);
        if (!--v7)
          goto LABEL_23;
      }
    }
  }
  v10 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)a2 + 112))(a2);
  v11 = v10[23];
  if ((v11 & 0x80u) == 0)
    v12 = v10[23];
  else
    v12 = *((_QWORD *)v10 + 1);
  if (v12 != 6)
    goto LABEL_119;
  if ((v11 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v10, "CANCEL", *((_QWORD *)v10 + 1)))
      goto LABEL_119;
    goto LABEL_23;
  }
  if (!v10[23])
  {
LABEL_23:
    v14 = SipMessage::header<SipReasonHeader>((uint64_t)a2);
    if (!v14)
      goto LABEL_119;
    v15 = (_QWORD *)v14[8];
    v48 = (_QWORD *)v14[9];
    if (v15 == v48)
      goto LABEL_119;
    while (1)
    {
      v50 = v15;
      v16 = (std::string::size_type *)*v15;
      *a4 = 0;
      a4[1] = 0;
      memset(&v61, 0, sizeof(v61));
      SipReason::text((SipReason *)v16, &v61);
      v17 = SipReason::cause((SipReason *)v16);
      memset(&v60, 0, sizeof(v60));
      if (*((char *)v16 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v60, (const std::string::value_type *)*v16, v16[1]);
      }
      else
      {
        v18 = *(_OWORD *)v16;
        v60.__r_.__value_.__r.__words[2] = v16[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v18;
      }
      *a4 = 0;
      a4[1] = 0;
      v58 = 0;
      v59 = 0;
      BambiCallTerminationReasonsBase::getCombinedReasonMap(this, &v58);
      v19 = (__int128 *)(v58 + 1);
      v20 = (__int128 *)*v58;
      if ((_QWORD *)*v58 != v58 + 1)
        break;
LABEL_101:
      if (*a4)
      {
        std::string::basic_string[abi:ne180100]<0>(v56, "bambi.call");
        std::string::basic_string[abi:ne180100]<0>(v54, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v44 = ImsLogger::debug(ims::_logger, (uint64_t)v56, (uint64_t)v54);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"using matching reason ", 22);
        *(_BYTE *)(v44 + 17) = 0;
        LoggableString::LoggableString(&v53, (const std::string *)(*a4 + 8));
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v44 + 40))(v44, &v53);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v44 + 17) = 0;
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        if (v55 < 0)
          operator delete(v54[0]);
        if ((v56[23] & 0x80000000) != 0)
          operator delete(*(void **)v56);
      }
      v45 = v59;
      if (v59)
      {
        p_shared_owners = (unint64_t *)&v59->__shared_owners_;
        do
          v47 = __ldaxr(p_shared_owners);
        while (__stlxr(v47 - 1, p_shared_owners));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if (*a4)
        return;
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)a4);
      v15 = v50 + 1;
      if (v50 + 1 == v48)
        goto LABEL_119;
    }
    while (1)
    {
      v57 = 0;
      memset(v56, 0, sizeof(v56));
      std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)v56, v20 + 2);
      v21 = *(_QWORD *)&v56[24];
      if (*(_BYTE *)(*(_QWORD *)&v56[24] + 132) && (a3 & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v54, "bambi.call");
        std::string::basic_string[abi:ne180100]<0>(&v53, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v22 = ImsLogger::warn(ims::_logger, (uint64_t)v54, (uint64_t)&v53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"skipping ", 9);
        *(_BYTE *)(v22 + 17) = 0;
        LoggableString::LoggableString(&__p, (const std::string *)(*(_QWORD *)&v56[24] + 8));
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v22 + 40))(v22, &__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)", overrides are not allowed for this call", 41);
        *(_BYTE *)(v22 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v22 + 17) = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        if (v55 < 0)
          operator delete(v54[0]);
        goto LABEL_67;
      }
      v23 = *(_DWORD *)(*(_QWORD *)&v56[24] + 56);
      if (!v23)
      {
        if (*(char *)(*(_QWORD *)&v56[24] + 55) < 0)
        {
          if (*(_QWORD *)(*(_QWORD *)&v56[24] + 40))
            goto LABEL_54;
        }
        else if (*(_BYTE *)(*(_QWORD *)&v56[24] + 55))
        {
          goto LABEL_54;
        }
        size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
        if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v60.__r_.__value_.__l.__size_;
        if (size != 3)
          goto LABEL_67;
        v38 = &v60;
        if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v38 = (std::string *)v60.__r_.__value_.__r.__words[0];
        data_low = LOWORD(v38->__r_.__value_.__l.__data_);
        v40 = v38->__r_.__value_.__s.__data_[2];
        v41 = data_low == 18771 && v40 == 80;
        v42 = !v41;
        if (v42 || v17 == 0)
          goto LABEL_67;
        v23 = *(_DWORD *)(*(_QWORD *)&v56[24] + 60);
      }
      if (v23)
        v24 = v23 == v17;
      else
        v24 = 1;
      if (v24)
      {
LABEL_54:
        v29 = 0;
        goto LABEL_55;
      }
      v25 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)a2 + 112))(a2);
      v26 = v25[23];
      if ((v26 & 0x80u) == 0)
        v27 = v25[23];
      else
        v27 = *((_QWORD *)v25 + 1);
      if (v27 == 6)
      {
        if ((v26 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v25, "CANCEL", *((_QWORD *)v25 + 1)))
            goto LABEL_67;
        }
        else if (v25[23])
        {
          v28 = "CANCEL";
          while (*v25 == *(unsigned __int8 *)v28)
          {
            ++v25;
            ++v28;
            if (!--v26)
              goto LABEL_99;
          }
          goto LABEL_67;
        }
LABEL_99:
        if (v17 == 200)
        {
          v29 = 1;
          v21 = *(_QWORD *)&v56[24];
LABEL_55:
          if (*(char *)(v21 + 55) < 0)
            v30 = *(_QWORD *)(v21 + 40);
          else
            v30 = *(unsigned __int8 *)(v21 + 55);
          if (((v30 == 0) & ~v29) != 0
            || ims::getNumMatchesForPattern((uint64_t *)&v61, (uint64_t *)(v21 + 32), 1u))
          {
            std::string::basic_string[abi:ne180100]<0>(v54, "bambi.call");
            std::string::basic_string[abi:ne180100]<0>(&v53, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v31 = ImsLogger::debug(ims::_logger, (uint64_t)v54, (uint64_t)&v53);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)"matched ", 8);
            *(_BYTE *)(v31 + 17) = 0;
            LoggableString::LoggableString(&__p, (const std::string *)(*(_QWORD *)&v56[24] + 8));
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v31 + 40))(v31, &__p);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v31 + 17) = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v53.__r_.__value_.__l.__data_);
            if (v55 < 0)
              operator delete(v54[0]);
            std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100](a4, *(uint64_t *)&v56[24], (uint64_t)v57);
          }
        }
      }
LABEL_67:
      v32 = v57;
      if (v57)
      {
        v33 = (unint64_t *)&v57->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      if ((v56[23] & 0x80000000) != 0)
        operator delete(*(void **)v56);
      v35 = (__int128 *)*((_QWORD *)v20 + 1);
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = *(__int128 **)v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (__int128 *)*((_QWORD *)v20 + 2);
          v24 = *(_QWORD *)v36 == (_QWORD)v20;
          v20 = v36;
        }
        while (!v24);
      }
      v20 = v36;
      if (v36 == v19)
        goto LABEL_101;
    }
  }
  v13 = "CANCEL";
  while (*v10 == *(unsigned __int8 *)v13)
  {
    ++v10;
    ++v13;
    if (!--v11)
      goto LABEL_23;
  }
LABEL_119:
  *a4 = 0;
  a4[1] = 0;
}

void sub_1BF13D158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  if (*(char *)(v41 - 89) < 0)
    operator delete(*(void **)(v41 - 112));
  _Unwind_Resume(exception_object);
}

void BambiCallTerminationReasons::getDefaultReasonMap(BambiCallTerminationReasons *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;

  v4 = atomic_load((unsigned __int8 *)&qword_1ED70EFB0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1ED70EFB0))
  {
    __cxa_atexit((void (*)(void *))std::weak_ptr<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>>::~weak_ptr, &qword_1ED70EFD0, &dword_1BEDF4000);
    __cxa_guard_release(&qword_1ED70EFB0);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_1ED70EFB8);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ED70EFB8))
  {
    __cxa_atexit(MEMORY[0x1E0DE4AB8], &BambiCallTerminationReasons::getDefaultReasonMap(void)const::sDefaultsMtx, &dword_1BEDF4000);
    __cxa_guard_release(&qword_1ED70EFB8);
  }
  std::mutex::lock(&BambiCallTerminationReasons::getDefaultReasonMap(void)const::sDefaultsMtx);
  *a2 = 0;
  a2[1] = 0;
  if (!qword_1ED70EFD8
    || (v6 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_1ED70EFD8), (a2[1] = (uint64_t)v6) == 0)
    || (v7 = qword_1ED70EFD0, *a2 = qword_1ED70EFD0, !v7))
  {
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)a2);
    *a2 = 0;
    a2[1] = 0;
    (*(void (**)(BambiCallTerminationReasons *))(*(_QWORD *)this + 8))(this);
    v9 = *a2;
    v8 = a2[1];
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 16);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = (std::__shared_weak_count *)qword_1ED70EFD8;
    qword_1ED70EFD0 = v9;
    qword_1ED70EFD8 = v8;
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
  }
  std::mutex::unlock(&BambiCallTerminationReasons::getDefaultReasonMap(void)const::sDefaultsMtx);
}

void sub_1BF13D3BC(_Unwind_Exception *a1)
{
  std::mutex::unlock(&BambiCallTerminationReasons::getDefaultReasonMap(void)const::sDefaultsMtx);
  _Unwind_Resume(a1);
}

void BambiCallTerminationReasons::createDefaultReasonMap(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  uint64_t **v4;
  __int128 v5;
  _OWORD *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _OWORD *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _OWORD *v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _OWORD *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _OWORD *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _OWORD *v47;
  __int128 v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _OWORD *v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _OWORD *v70;
  __int128 v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _OWORD *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  _OWORD *v82;
  __int128 v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  _OWORD *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  _OWORD *v93;
  __int128 v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  _OWORD *v100;
  __int128 v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  _OWORD *v108;
  __int128 v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  _OWORD *v116;
  __int128 v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  _OWORD *v124;
  __int128 v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  _OWORD *v132;
  __int128 v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  _OWORD *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  _OWORD *v144;
  __int128 v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  _OWORD *v151;
  __int128 v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  _OWORD *v159;
  __int128 v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  _OWORD *v167;
  __int128 v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  _OWORD *v175;
  __int128 v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  _OWORD *v183;
  __int128 v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  _OWORD *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  _OWORD *v195;
  __int128 v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  _OWORD *v202;
  __int128 v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  _OWORD *v210;
  __int128 v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  _OWORD *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  _OWORD *v222;
  __int128 v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  _OWORD *v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  _OWORD *v233;
  __int128 v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  _OWORD *v240;
  __int128 v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  _OWORD *v248;
  __int128 v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  _OWORD *v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  _OWORD *v260;
  __int128 v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  _OWORD *v267;
  __int128 v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  _OWORD *v275;
  __int128 v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  _OWORD *v283;
  __int128 v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  _OWORD *v291;
  std::__shared_weak_count *v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  _OWORD *v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  _OWORD *v300;
  __int128 v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  _OWORD *v307;
  __int128 v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  _OWORD *v315;
  __int128 v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  _OWORD *v323;
  std::__shared_weak_count *v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  _OWORD *v328;
  std::__shared_weak_count *v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  _OWORD *v333;
  std::__shared_weak_count *v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  _OWORD *v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  _OWORD *v342;
  unint64_t *v343;
  unint64_t v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  std::__shared_weak_count *v381;
  std::__shared_weak_count *v382;
  std::__shared_weak_count *v383;
  std::__shared_weak_count *v384;
  std::__shared_weak_count *v385;
  std::string v386;
  std::string __p;

  *a1 = 0;
  a1[1] = 0;
  v3 = operator new(0x30uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_1E78E26F0;
  v3[5] = 0;
  a1[1] = v3;
  v3[4] = 0;
  v3[3] = v3 + 4;
  v4 = (uint64_t **)(v3 + 3);
  *a1 = v3 + 3;
  LODWORD(v386.__r_.__value_.__l.__data_) = 0;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[15],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "UserTriggered", (int *)&v386);
  v5 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v345 = v5;
  ims::lowerCase(v5 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v6 + 7, v345, *((uint64_t *)&v345 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 0;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[22],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "RejectedByUser", "Call Rejected By User", (int *)&v386);
  v7 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v345 + 1);
  v346 = v7;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  ims::lowerCase(v346 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v14 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v14 + 7, v346, *((uint64_t *)&v346 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 0;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[22],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "CallWaitingDisabled", "Call Waiting Disabled", (int *)&v386);
  v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v346 + 1);
  v347 = v15;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v20 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  ims::lowerCase(v347 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v22 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v22 + 7, v347, *((uint64_t *)&v347 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 0;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[22],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "DoNotDisturb", "Call Rejected By User", (int *)&v386);
  v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v347 + 1);
  v348 = v23;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v28 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  ims::lowerCase(v348 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v30 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v30 + 7, v348, *((uint64_t *)&v348 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 0;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[22],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "Blocked", "Call Rejected By User", (int *)&v386);
  v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v348 + 1);
  v349 = v31;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v36 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  ims::lowerCase(v349 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v38 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v38 + 7, v349, *((uint64_t *)&v349 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v39 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v39->__shared_owners_ = 0;
  v39->__shared_weak_owners_ = 0;
  v39->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&__p, "SRVCC");
  std::string::basic_string[abi:ne180100]<0>(&v386, "SRVCC");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v39[1], &__p, &v386, 500, 8, 0, 0);
  if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v386.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v40 = (std::__shared_weak_count *)*((_QWORD *)&v349 + 1);
  v381 = v39;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  ims::lowerCase((uint64_t)&v39[1].__shared_owners_, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v43 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v43 + 7, (uint64_t)&v39[1], (uint64_t)v39);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v44 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v44->__shared_owners_ = 0;
  v44->__shared_weak_owners_ = 0;
  v44->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&__p, "DeferToSecondary");
  std::string::basic_string[abi:ne180100]<0>(&v386, "Deferred to Secondary Device");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v44[1], &__p, &v386, 480, 0, 0, 0);
  if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v386.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v381)
  {
    v45 = (unint64_t *)&v381->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
      std::__shared_weak_count::__release_weak(v381);
    }
  }
  ims::lowerCase((uint64_t)&v44[1].__shared_owners_, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v47 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v47 + 7, (uint64_t)&v44[1], (uint64_t)v44);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 0;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[25],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "AvoidVoicemail", "Do not send to voicemail", &SipResponse::kStatusAvoidVoicemail, (int *)&v386);
  v48 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v350 = v48;
  if (v44)
  {
    v49 = (unint64_t *)&v44->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v51 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v52 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  ims::lowerCase(v350 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v54 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v54 + 7, v350, *((uint64_t *)&v350 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 6;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[25],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "CallCompletedElsewhere", "Call completed elsewhere", &SipResponse::kStatusRequestTerminated, (int *)&v386);
  v55 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v350 + 1);
  v351 = v55;
  if (v56)
  {
    v57 = (unint64_t *)&v56->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v60 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  ims::lowerCase(v351 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v62 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v62 + 7, v351, *((uint64_t *)&v351 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 7;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[32],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "OtherSecondaryDeviceOnCall", "Secondary device already in use", &SipResponse::kStatusDecline, (int *)&v386);
  v63 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
  v352 = v63;
  if (v64)
  {
    v65 = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v68 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  ims::lowerCase(v352 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v70 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v70 + 7, v352, *((uint64_t *)&v352 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 34;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[26],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "EstablishingAnotherCall", "Establishing Another Call", &SipResponse::kStatusBusyHere, (int *)&v386);
  v71 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
  v353 = v71;
  if (v72)
  {
    v73 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v76 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  ims::lowerCase(v353 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v78 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v78 + 7, v353, *((uint64_t *)&v353 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v79 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v79->__shared_owners_ = 0;
  v79->__shared_weak_owners_ = 0;
  v79->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&__p, "AlreadyOnMaxCalls");
  std::string::basic_string[abi:ne180100]<0>(&v386, "Already On Max Calls");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v79[1], &__p, &v386, 486, 34, 0, 0);
  if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v386.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*((_QWORD *)&v353 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v353 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v353 + 1) + 16))(*((_QWORD *)&v353 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v353 + 1));
    }
  }
  ims::lowerCase((uint64_t)&v79[1].__shared_owners_, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v82 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v82 + 7, (uint64_t)&v79[1], (uint64_t)v79);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 25;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[32],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "NoLTE", "Moved to non-LTE access network", &SipResponse::kStatusNotAcceptableHere, (int *)&v386);
  v83 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v354 = v83;
  if (v79)
  {
    v84 = (unint64_t *)&v79->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v86 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v87 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  ims::lowerCase(v354 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v89 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v89 + 7, v354, *((uint64_t *)&v354 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v90 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v90->__shared_owners_ = 0;
  v90->__shared_weak_owners_ = 0;
  v90->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&__p, "NonVoiceLTE");
  std::string::basic_string[abi:ne180100]<0>(&v386, "Moved to LTE without VoLTE support");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v90[1], &__p, &v386, 488, 25, 0, 0);
  if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v386.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*((_QWORD *)&v354 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v354 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v354 + 1) + 16))(*((_QWORD *)&v354 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v354 + 1));
    }
  }
  ims::lowerCase((uint64_t)&v90[1].__shared_owners_, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v93 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v93 + 7, (uint64_t)&v90[1], (uint64_t)v90);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 25;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[20],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "NotVoiceRegisteredNoLTE", "Not Acceptable Here", &SipResponse::kStatusNotAcceptableHere, (int *)&v386);
  v94 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v355 = v94;
  if (v90)
  {
    v95 = (unint64_t *)&v90->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v97 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v98 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  ims::lowerCase(v355 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v100 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v100 + 7, v355, *((uint64_t *)&v355 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 25;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[20],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "NotVoiceRegisteredNonVoiceLTE", "Not Acceptable Here", &SipResponse::kStatusNotAcceptableHere, (int *)&v386);
  v101 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v102 = (std::__shared_weak_count *)*((_QWORD *)&v355 + 1);
  v356 = v101;
  if (v102)
  {
    v103 = (unint64_t *)&v102->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v106 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  ims::lowerCase(v356 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v108 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v108 + 7, v356, *((uint64_t *)&v356 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 11;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[16],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "SessionExpired", "Session Expired", (int *)&v386);
  v109 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v110 = (std::__shared_weak_count *)*((_QWORD *)&v356 + 1);
  v357 = v109;
  if (v110)
  {
    v111 = (unint64_t *)&v110->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v114 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  ims::lowerCase(v357 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v116 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v116 + 7, v357, *((uint64_t *)&v357 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 19;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[1],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "MediaError", (int *)&v386);
  v117 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v118 = (std::__shared_weak_count *)*((_QWORD *)&v357 + 1);
  v358 = v117;
  if (v118)
  {
    v119 = (unint64_t *)&v118->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v122 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  ims::lowerCase(v358 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v124 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v124 + 7, v358, *((uint64_t *)&v358 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 20;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[12],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "MediaTimeout", "RTP Timeout", (int *)&SipResponse::kStatusServerInternalError, (int *)&v386);
  v125 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v126 = (std::__shared_weak_count *)*((_QWORD *)&v358 + 1);
  v359 = v125;
  if (v126)
  {
    v127 = (unint64_t *)&v126->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v130 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  ims::lowerCase(v359 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v132 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v132 + 7, v359, *((uint64_t *)&v359 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 21;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[13],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "MediaHeartbeatTimeout", "RTCP Timeout", (int *)&v386);
  v133 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v134 = (std::__shared_weak_count *)*((_QWORD *)&v359 + 1);
  v360 = v133;
  if (v134)
  {
    v135 = (unint64_t *)&v134->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v138 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  ims::lowerCase(v360 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v140 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v140 + 7, v360, *((uint64_t *)&v360 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v141 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v141->__shared_owners_ = 0;
  v141->__shared_weak_owners_ = 0;
  v141->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&__p, "NoAnswer");
  std::string::basic_string[abi:ne180100]<0>(&v386, "No Answer");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v141[1], &__p, &v386, 486, 2, 0, 0);
  if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v386.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*((_QWORD *)&v360 + 1))
  {
    v142 = (unint64_t *)(*((_QWORD *)&v360 + 1) + 8);
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v360 + 1) + 16))(*((_QWORD *)&v360 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v360 + 1));
    }
  }
  ims::lowerCase((uint64_t)&v141[1].__shared_owners_, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v144 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v144 + 7, (uint64_t)&v141[1], (uint64_t)v141);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 0;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[18],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "JoinedConference", "Joined N-way Call", (int *)&SipResponse::kStatusServerInternalError, (int *)&v386);
  v145 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v361 = v145;
  if (v141)
  {
    v146 = (unint64_t *)&v141->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v148 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v149 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  ims::lowerCase(v361 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v151 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v151 + 7, v361, *((uint64_t *)&v361 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 11;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[23],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "ConferenceJoinFailed", "Conference join failed", (int *)&v386);
  v152 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v153 = (std::__shared_weak_count *)*((_QWORD *)&v361 + 1);
  v362 = v152;
  if (v153)
  {
    v154 = (unint64_t *)&v153->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v157 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  ims::lowerCase(v362 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v159 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v159 + 7, v362, *((uint64_t *)&v362 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 0;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[25],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "EmptyConference", "Conference call is empty", (int *)&SipResponse::kStatusServerInternalError, (int *)&v386);
  v160 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v161 = (std::__shared_weak_count *)*((_QWORD *)&v362 + 1);
  v363 = v160;
  if (v161)
  {
    v162 = (unint64_t *)&v161->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v165 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  ims::lowerCase(v363 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v167 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v167 + 7, v363, *((uint64_t *)&v363 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 11;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[13],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "ReferFailed", "REFER failed", (int *)&v386);
  v168 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v169 = (std::__shared_weak_count *)*((_QWORD *)&v363 + 1);
  v364 = v168;
  if (v169)
  {
    v170 = (unint64_t *)&v169->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v173 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  ims::lowerCase(v364 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v175 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v175 + 7, v364, *((uint64_t *)&v364 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 28;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[18],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "OnEmergencyCall", "On Emergency Call", &SipResponse::kStatusBusyHere, (int *)&v386);
  v176 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v177 = (std::__shared_weak_count *)*((_QWORD *)&v364 + 1);
  v365 = v176;
  if (v177)
  {
    v178 = (unint64_t *)&v177->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v181 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  ims::lowerCase(v365 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v183 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v183 + 7, v365, *((uint64_t *)&v365 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 29;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[12],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "InvalidSdp", "Invalid SDP", &SipResponse::kStatusNotAcceptableHere, (int *)&v386);
  v184 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v185 = (std::__shared_weak_count *)*((_QWORD *)&v365 + 1);
  v366 = v184;
  if (v185)
  {
    v186 = (unint64_t *)&v185->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  v188 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v189 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  ims::lowerCase(v366 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v191 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v191 + 7, v366, *((uint64_t *)&v366 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v192 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v192->__shared_owners_ = 0;
  v192->__shared_weak_owners_ = 0;
  v192->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&__p, "MissingSdp");
  std::string::basic_string[abi:ne180100]<0>(&v386, "Missing SDP Answer");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v192[1], &__p, &v386, 488, 29, 0, 0);
  if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v386.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*((_QWORD *)&v366 + 1))
  {
    v193 = (unint64_t *)(*((_QWORD *)&v366 + 1) + 8);
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v366 + 1) + 16))(*((_QWORD *)&v366 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v366 + 1));
    }
  }
  ims::lowerCase((uint64_t)&v192[1].__shared_owners_, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v195 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v195 + 7, (uint64_t)&v192[1], (uint64_t)v192);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 11;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[20],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "CodecNotSupported", "Not Acceptable Here", &SipResponse::kStatusNotAcceptableHere, (int *)&v386);
  v196 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v367 = v196;
  if (v192)
  {
    v197 = (unint64_t *)&v192->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  v199 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v200 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  ims::lowerCase(v367 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v202 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v202 + 7, v367, *((uint64_t *)&v367 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 11;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[20],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "ReceivedRejectSdp", "Received reject SDP", &SipResponse::kStatusNotAcceptableHere, (int *)&v386);
  v203 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v204 = (std::__shared_weak_count *)*((_QWORD *)&v367 + 1);
  v368 = v203;
  if (v204)
  {
    v205 = (unint64_t *)&v204->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }
  v207 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v208 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  ims::lowerCase(v368 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v210 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v210 + 7, v368, *((uint64_t *)&v368 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 11;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[16],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "NoAckReceived", "No ACK received", (int *)&v386);
  v211 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v212 = (std::__shared_weak_count *)*((_QWORD *)&v368 + 1);
  v369 = v211;
  if (v212)
  {
    v213 = (unint64_t *)&v212->__shared_owners_;
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  v215 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v216 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  ims::lowerCase(v369 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v218 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v218 + 7, v369, *((uint64_t *)&v369 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v219 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v219->__shared_owners_ = 0;
  v219->__shared_weak_owners_ = 0;
  v219->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&__p, "PreconditionFailure");
  std::string::basic_string[abi:ne180100]<0>(&v386, "Precondition Failure");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v219[1], &__p, &v386, 580, 23, 0, 2);
  if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v386.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*((_QWORD *)&v369 + 1))
  {
    v220 = (unint64_t *)(*((_QWORD *)&v369 + 1) + 8);
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v369 + 1) + 16))(*((_QWORD *)&v369 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v369 + 1));
    }
  }
  ims::lowerCase((uint64_t)&v219[1].__shared_owners_, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v222 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v222 + 7, (uint64_t)&v219[1], (uint64_t)v219);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 23;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[26],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "WaitForRingingTimeout", "Remote device didn't ring", (int *)&SipResponse::kStatusServerInternalError, (int *)&v386);
  v223 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v370 = v223;
  if (v219)
  {
    v224 = (unint64_t *)&v219->__shared_owners_;
    do
      v225 = __ldaxr(v224);
    while (__stlxr(v225 - 1, v224));
    if (!v225)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }
  v226 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v227 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  ims::lowerCase(v370 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v229 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v229 + 7, v370, *((uint64_t *)&v370 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v230 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v230->__shared_owners_ = 0;
  v230->__shared_weak_owners_ = 0;
  v230->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&__p, "LocalQualityOfServiceTimeout");
  std::string::basic_string[abi:ne180100]<0>(&v386, "Local QoS not established");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v230[1], &__p, &v386, 580, 24, 0, 1);
  if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v386.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*((_QWORD *)&v370 + 1))
  {
    v231 = (unint64_t *)(*((_QWORD *)&v370 + 1) + 8);
    do
      v232 = __ldaxr(v231);
    while (__stlxr(v232 - 1, v231));
    if (!v232)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v370 + 1) + 16))(*((_QWORD *)&v370 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v370 + 1));
    }
  }
  ims::lowerCase((uint64_t)&v230[1].__shared_owners_, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v233 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v233 + 7, (uint64_t)&v230[1], (uint64_t)v230);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 11;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[20],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "HoldResumeTimeout", "Hold/resume timeout", (int *)&SipResponse::kStatusServerInternalError, (int *)&v386);
  v234 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v371 = v234;
  if (v230)
  {
    v235 = (unint64_t *)&v230->__shared_owners_;
    do
      v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
      std::__shared_weak_count::__release_weak(v230);
    }
  }
  v237 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v238 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v239 = __ldaxr(v238);
    while (__stlxr(v239 - 1, v238));
    if (!v239)
    {
      ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
      std::__shared_weak_count::__release_weak(v237);
    }
  }
  ims::lowerCase(v371 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v240 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v240 + 7, v371, *((uint64_t *)&v371 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 0;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[14],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "Deregistering", (int *)&v386);
  v241 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v242 = (std::__shared_weak_count *)*((_QWORD *)&v371 + 1);
  v372 = v241;
  if (v242)
  {
    v243 = (unint64_t *)&v242->__shared_owners_;
    do
      v244 = __ldaxr(v243);
    while (__stlxr(v244 - 1, v243));
    if (!v244)
    {
      ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
      std::__shared_weak_count::__release_weak(v242);
    }
  }
  v245 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v246 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  ims::lowerCase(v372 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v248 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v248 + 7, v372, *((uint64_t *)&v372 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 30;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[14],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "Deinitializing", (int *)&v386);
  v249 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v250 = (std::__shared_weak_count *)*((_QWORD *)&v372 + 1);
  v373 = v249;
  if (v250)
  {
    v251 = (unint64_t *)&v250->__shared_owners_;
    do
      v252 = __ldaxr(v251);
    while (__stlxr(v252 - 1, v251));
    if (!v252)
    {
      ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
      std::__shared_weak_count::__release_weak(v250);
    }
  }
  v253 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v254 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v255 = __ldaxr(v254);
    while (__stlxr(v255 - 1, v254));
    if (!v255)
    {
      ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
      std::__shared_weak_count::__release_weak(v253);
    }
  }
  ims::lowerCase(v373 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v256 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v256 + 7, v373, *((uint64_t *)&v373 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v257 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v257->__shared_owners_ = 0;
  v257->__shared_weak_owners_ = 0;
  v257->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&__p, "RemoteCancel");
  std::string::basic_string[abi:ne180100]<0>(&v386, "Remote end CANCELed a completed transaction");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v257[1], &__p, &v386, 487, 5, 0, 0);
  if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v386.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*((_QWORD *)&v373 + 1))
  {
    v258 = (unint64_t *)(*((_QWORD *)&v373 + 1) + 8);
    do
      v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v373 + 1) + 16))(*((_QWORD *)&v373 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v373 + 1));
    }
  }
  ims::lowerCase((uint64_t)&v257[1].__shared_owners_, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v260 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v260 + 7, (uint64_t)&v257[1], (uint64_t)v257);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 26;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[23],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "ExitEmergencyState", "Emergency state exited", (int *)&v386);
  v261 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v374 = v261;
  if (v257)
  {
    v262 = (unint64_t *)&v257->__shared_owners_;
    do
      v263 = __ldaxr(v262);
    while (__stlxr(v263 - 1, v262));
    if (!v263)
    {
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
    }
  }
  v264 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v265 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v266 = __ldaxr(v265);
    while (__stlxr(v266 - 1, v265));
    if (!v266)
    {
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v264);
    }
  }
  ims::lowerCase(v374 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v267 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v267 + 7, v374, *((uint64_t *)&v374 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 32;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[1],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "AudioUnit", (int *)&v386);
  v268 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v269 = (std::__shared_weak_count *)*((_QWORD *)&v374 + 1);
  v375 = v268;
  if (v269)
  {
    v270 = (unint64_t *)&v269->__shared_owners_;
    do
      v271 = __ldaxr(v270);
    while (__stlxr(v271 - 1, v270));
    if (!v271)
    {
      ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
      std::__shared_weak_count::__release_weak(v269);
    }
  }
  v272 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v273 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v274 = __ldaxr(v273);
    while (__stlxr(v274 - 1, v273));
    if (!v274)
    {
      ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
      std::__shared_weak_count::__release_weak(v272);
    }
  }
  ims::lowerCase(v375 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v275 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v275 + 7, v375, *((uint64_t *)&v375 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 33;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[1],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "AVConferenceCrash", (int *)&v386);
  v276 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v277 = (std::__shared_weak_count *)*((_QWORD *)&v375 + 1);
  v376 = v276;
  if (v277)
  {
    v278 = (unint64_t *)&v277->__shared_owners_;
    do
      v279 = __ldaxr(v278);
    while (__stlxr(v279 - 1, v278));
    if (!v279)
    {
      ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
      std::__shared_weak_count::__release_weak(v277);
    }
  }
  v280 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v281 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v282 = __ldaxr(v281);
    while (__stlxr(v282 - 1, v281));
    if (!v282)
    {
      ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
      std::__shared_weak_count::__release_weak(v280);
    }
  }
  ims::lowerCase(v376 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v283 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v283 + 7, v376, *((uint64_t *)&v376 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 35;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[1],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "BasebandCrash", (int *)&v386);
  v284 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v285 = (std::__shared_weak_count *)*((_QWORD *)&v376 + 1);
  v377 = v284;
  if (v285)
  {
    v286 = (unint64_t *)&v285->__shared_owners_;
    do
      v287 = __ldaxr(v286);
    while (__stlxr(v287 - 1, v286));
    if (!v287)
    {
      ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
      std::__shared_weak_count::__release_weak(v285);
    }
  }
  v288 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v289 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v290 = __ldaxr(v289);
    while (__stlxr(v290 - 1, v289));
    if (!v290)
    {
      ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
      std::__shared_weak_count::__release_weak(v288);
    }
  }
  ims::lowerCase(v377 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v291 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v291 + 7, v377, *((uint64_t *)&v377 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v292 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v292->__shared_owners_ = 0;
  v292->__shared_weak_owners_ = 0;
  v292->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&__p, "BearerRevoked");
  std::string::basic_string[abi:ne180100]<0>(&v386, "Media bearer loss");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v292[1], &__p, &v386, 500, 11, 3, 0);
  if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v386.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v293 = (std::__shared_weak_count *)*((_QWORD *)&v377 + 1);
  v382 = v292;
  if (v293)
  {
    v294 = (unint64_t *)&v293->__shared_owners_;
    do
      v295 = __ldaxr(v294);
    while (__stlxr(v295 - 1, v294));
    if (!v295)
    {
      ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
      std::__shared_weak_count::__release_weak(v293);
    }
  }
  ims::lowerCase((uint64_t)&v292[1].__shared_owners_, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v296 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v296 + 7, (uint64_t)&v292[1], (uint64_t)v292);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v297 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v297->__shared_owners_ = 0;
  v297->__shared_weak_owners_ = 0;
  v297->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&__p, "TransferredToOtherDevice");
  std::string::basic_string[abi:ne180100]<0>(&v386, "Transferred to another device");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v297[1], &__p, &v386, 200, 0, 0, 0);
  if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v386.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v382)
  {
    v298 = (unint64_t *)&v382->__shared_owners_;
    do
      v299 = __ldaxr(v298);
    while (__stlxr(v299 - 1, v298));
    if (!v299)
    {
      ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
      std::__shared_weak_count::__release_weak(v382);
    }
  }
  ims::lowerCase((uint64_t)&v297[1].__shared_owners_, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v300 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v300 + 7, (uint64_t)&v297[1], (uint64_t)v297);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 18;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[1],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "InternalError", (int *)&v386);
  v301 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v378 = v301;
  if (v297)
  {
    v302 = (unint64_t *)&v297->__shared_owners_;
    do
      v303 = __ldaxr(v302);
    while (__stlxr(v303 - 1, v302));
    if (!v303)
    {
      ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
      std::__shared_weak_count::__release_weak(v297);
    }
  }
  v304 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v305 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v306 = __ldaxr(v305);
    while (__stlxr(v306 - 1, v305));
    if (!v306)
    {
      ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
      std::__shared_weak_count::__release_weak(v304);
    }
  }
  ims::lowerCase(v378 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v307 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v307 + 7, v378, *((uint64_t *)&v378 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 11;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[1],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "NetworkError", (int *)&v386);
  v308 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v309 = (std::__shared_weak_count *)*((_QWORD *)&v378 + 1);
  v379 = v308;
  if (v309)
  {
    v310 = (unint64_t *)&v309->__shared_owners_;
    do
      v311 = __ldaxr(v310);
    while (__stlxr(v311 - 1, v310));
    if (!v311)
    {
      ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
      std::__shared_weak_count::__release_weak(v309);
    }
  }
  v312 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v313 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v314 = __ldaxr(v313);
    while (__stlxr(v314 - 1, v313));
    if (!v314)
    {
      ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
      std::__shared_weak_count::__release_weak(v312);
    }
  }
  ims::lowerCase(v379 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v315 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v315 + 7, v379, *((uint64_t *)&v379 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(v386.__r_.__value_.__l.__data_) = 0;
  std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[15],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(&__p, "EmergencyUserTriggered", (int *)&v386);
  v316 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v317 = (std::__shared_weak_count *)*((_QWORD *)&v379 + 1);
  v380 = v316;
  if (v317)
  {
    v318 = (unint64_t *)&v317->__shared_owners_;
    do
      v319 = __ldaxr(v318);
    while (__stlxr(v319 - 1, v318));
    if (!v319)
    {
      ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
      std::__shared_weak_count::__release_weak(v317);
    }
  }
  v320 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v321 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v322 = __ldaxr(v321);
    while (__stlxr(v322 - 1, v321));
    if (!v322)
    {
      ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
      std::__shared_weak_count::__release_weak(v320);
    }
  }
  ims::lowerCase(v380 + 8, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v323 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v323 + 7, v380, *((uint64_t *)&v380 + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v324 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v324->__shared_owners_ = 0;
  v324->__shared_weak_owners_ = 0;
  v324->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&__p, "EmergencyUserTriggeredTimeout");
  std::string::basic_string[abi:ne180100]<0>(&v386, "User ends call SIP response time-out");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v324[1], &__p, &v386, 486, 0, 4, 0);
  if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v386.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v325 = (std::__shared_weak_count *)*((_QWORD *)&v380 + 1);
  v383 = v324;
  if (v325)
  {
    v326 = (unint64_t *)&v325->__shared_owners_;
    do
      v327 = __ldaxr(v326);
    while (__stlxr(v327 - 1, v326));
    if (!v327)
    {
      ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
      std::__shared_weak_count::__release_weak(v325);
    }
  }
  ims::lowerCase((uint64_t)&v324[1].__shared_owners_, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v328 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v328 + 7, (uint64_t)&v324[1], (uint64_t)v324);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v329 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v329->__shared_owners_ = 0;
  v329->__shared_weak_owners_ = 0;
  v329->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&__p, "EmergencyTimeout");
  std::string::basic_string[abi:ne180100]<0>(&v386, "SIP response time-out");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v329[1], &__p, &v386, 500, 17, 4, 0);
  if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v386.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v330 = v383;
  v384 = v329;
  if (v330)
  {
    v331 = (unint64_t *)&v330->__shared_owners_;
    do
      v332 = __ldaxr(v331);
    while (__stlxr(v332 - 1, v331));
    if (!v332)
    {
      ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
      std::__shared_weak_count::__release_weak(v330);
    }
  }
  ims::lowerCase((uint64_t)&v329[1].__shared_owners_, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v333 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v333 + 7, (uint64_t)&v329[1], (uint64_t)v329);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v334 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v334->__shared_owners_ = 0;
  v334->__shared_weak_owners_ = 0;
  v334->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&__p, "EmergencySetupTimeout");
  std::string::basic_string[abi:ne180100]<0>(&v386, "Call-setup time-out");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v334[1], &__p, &v386, 500, 23, 6, 0);
  if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v386.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v335 = v384;
  v385 = v334;
  if (v335)
  {
    v336 = (unint64_t *)&v335->__shared_owners_;
    do
      v337 = __ldaxr(v336);
    while (__stlxr(v337 - 1, v336));
    if (!v337)
    {
      ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
      std::__shared_weak_count::__release_weak(v335);
    }
  }
  ims::lowerCase((uint64_t)&v334[1].__shared_owners_, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v338 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v338 + 7, (uint64_t)&v334[1], (uint64_t)v334);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&v386, 0, sizeof(v386));
  v339 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v339->__shared_owners_ = 0;
  v339->__shared_weak_owners_ = 0;
  v339->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&__p, "TerminateChat");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)&v339[1], &__p, &v386, 200, 0, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v385)
  {
    v340 = (unint64_t *)&v385->__shared_owners_;
    do
      v341 = __ldaxr(v340);
    while (__stlxr(v341 - 1, v340));
    if (!v341)
    {
      ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
      std::__shared_weak_count::__release_weak(v385);
    }
  }
  if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v386.__r_.__value_.__l.__data_);
  ims::lowerCase((uint64_t)&v339[1].__shared_owners_, &__p);
  v386.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v342 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, &v386);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v342 + 7, (uint64_t)&v339[1], (uint64_t)v339);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v339)
  {
    v343 = (unint64_t *)&v339->__shared_owners_;
    do
      v344 = __ldaxr(v343);
    while (__stlxr(v344 - 1, v343));
    if (!v344)
    {
      ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
      std::__shared_weak_count::__release_weak(v339);
    }
  }
}

void sub_1BF140318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v23);
  _Unwind_Resume(a1);
}

uint64_t BambiCallTerminationReasonsBase::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  BOOL v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const void **v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  const void **v30;
  unsigned __int8 *v31;
  int v32;
  __int128 *v33;
  __int128 *v34;
  const void **v35;
  char *v36;
  char *v37;
  const void **v38;
  void **v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  __int128 *v43;
  __int128 *v44;
  uint64_t result;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::string __p;
  _BYTE v50[32];
  std::__shared_weak_count *v51;

  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a2 + 104);
  v6 = (v4 | v5) == 0;
  if (v4)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (!v7)
    v6 = SipParameterMap::operator==((_QWORD *)v4, v5);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(_QWORD *)(a2 + 120);
  v10 = (v8 | v9) == 0;
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    if (*(_QWORD *)(v8 + 16) == *(_QWORD *)(v9 + 16))
    {
      v14 = *(unsigned __int8 **)v8;
      v12 = (unsigned __int8 *)(v8 + 8);
      v13 = v14;
      if (v14 == v12)
      {
        v10 = 1;
      }
      else
      {
        v15 = *(unsigned __int8 **)v9;
        do
        {
          v10 = std::__equal_to::operator()[abi:ne180100]<std::pair<std::string const,std::string>,std::pair<std::string const,std::string>>((uint64_t)v50, v13 + 32, v15 + 32);
          if (!v10)
            break;
          v16 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
          v17 = v13;
          if (v16)
          {
            do
            {
              v13 = v16;
              v16 = *(unsigned __int8 **)v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v13 = (unsigned __int8 *)*((_QWORD *)v17 + 2);
              v7 = *(_QWORD *)v13 == (_QWORD)v17;
              v17 = v13;
            }
            while (!v7);
          }
          v18 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
          if (v18)
          {
            do
            {
              v19 = v18;
              v18 = *(unsigned __int8 **)v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v19 = (unsigned __int8 *)*((_QWORD *)v15 + 2);
              v7 = *(_QWORD *)v19 == (_QWORD)v15;
              v15 = v19;
            }
            while (!v7);
          }
          v15 = v19;
        }
        while (v13 != v12);
      }
    }
    else
    {
      v10 = 0;
    }
  }
  v20 = *(unsigned __int8 *)(a1 + 39);
  if ((v20 & 0x80u) == 0)
    v21 = *(unsigned __int8 *)(a1 + 39);
  else
    v21 = *(_QWORD *)(a1 + 24);
  v22 = *(unsigned __int8 *)(a2 + 39);
  v23 = (char)v22;
  if ((v22 & 0x80u) != 0)
    v22 = *(_QWORD *)(a2 + 24);
  if (v21 != v22)
    return 0;
  v24 = (const void **)(a1 + 16);
  if (v23 >= 0)
    v25 = (unsigned __int8 *)(a2 + 16);
  else
    v25 = *(unsigned __int8 **)(a2 + 16);
  if ((v20 & 0x80) != 0)
  {
    if (memcmp(*v24, v25, *(_QWORD *)(a1 + 24)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    while (*(unsigned __int8 *)v24 == *v25)
    {
      v24 = (const void **)((char *)v24 + 1);
      ++v25;
      if (!--v20)
        goto LABEL_43;
    }
    return 0;
  }
LABEL_43:
  v26 = *(unsigned __int8 *)(a1 + 63);
  if ((v26 & 0x80u) == 0)
    v27 = *(unsigned __int8 *)(a1 + 63);
  else
    v27 = *(_QWORD *)(a1 + 48);
  v28 = *(unsigned __int8 *)(a2 + 63);
  v29 = (char)v28;
  if ((v28 & 0x80u) != 0)
    v28 = *(_QWORD *)(a2 + 48);
  if (v27 != v28)
    return 0;
  v30 = (const void **)(a1 + 40);
  if (v29 >= 0)
    v31 = (unsigned __int8 *)(a2 + 40);
  else
    v31 = *(unsigned __int8 **)(a2 + 40);
  if ((v26 & 0x80) != 0)
  {
    if (!memcmp(*v30, v31, *(_QWORD *)(a1 + 48)))
      goto LABEL_58;
    return 0;
  }
  if (*(_BYTE *)(a1 + 63))
  {
    while (*(unsigned __int8 *)v30 == *v31)
    {
      v30 = (const void **)((char *)v30 + 1);
      ++v31;
      if (!--v26)
        goto LABEL_58;
    }
    return 0;
  }
LABEL_58:
  if (*(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
    return 0;
  v32 = *(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72) ? v6 : 0;
  if ((v32 & v10) != 1 || *(_QWORD *)(a1 + 160) != *(_QWORD *)(a2 + 160))
    return 0;
  v33 = *(__int128 **)(a1 + 144);
  v34 = (__int128 *)(a1 + 152);
  if (v33 != v34)
  {
    v35 = (const void **)(a2 + 152);
    while (1)
    {
      v51 = 0;
      memset(v50, 0, sizeof(v50));
      std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)v50, v33 + 2);
      v36 = ims::lowerCase(*(_QWORD *)&v50[24] + 8, &__p);
      v37 = (char *)*v35;
      if (!*v35)
        goto LABEL_73;
      v38 = v35;
      do
      {
        v36 = (char *)ReasonCompare::operator()((uint64_t)v36, (const void **)v37 + 4, (const void **)&__p.__r_.__value_.__l.__data_);
        v39 = (void **)(v37 + 8);
        if (!(_DWORD)v36)
        {
          v39 = (void **)v37;
          v38 = (const void **)v37;
        }
        v37 = (char *)*v39;
      }
      while (*v39);
      if (v38 == v35 || ReasonCompare::operator()((uint64_t)v36, (const void **)&__p.__r_.__value_.__l.__data_, v38 + 4))
LABEL_73:
        v38 = v35;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v35 == v38 || *(const void **)&v50[24] != v38[7])
        break;
      v40 = v51;
      if (v51)
      {
        p_shared_owners = (unint64_t *)&v51->__shared_owners_;
        do
          v42 = __ldaxr(p_shared_owners);
        while (__stlxr(v42 - 1, p_shared_owners));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      if ((v50[23] & 0x80000000) != 0)
        operator delete(*(void **)v50);
      v43 = (__int128 *)*((_QWORD *)v33 + 1);
      if (v43)
      {
        do
        {
          v44 = v43;
          v43 = *(__int128 **)v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          v44 = (__int128 *)*((_QWORD *)v33 + 2);
          v7 = *(_QWORD *)v44 == (_QWORD)v33;
          v33 = v44;
        }
        while (!v7);
      }
      result = 1;
      v33 = v44;
      if (v44 == v34)
        return result;
    }
    v46 = v51;
    if (v51)
    {
      v47 = (unint64_t *)&v51->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if ((v50[23] & 0x80000000) != 0)
      operator delete(*(void **)v50);
    return 0;
  }
  return 1;
}

void sub_1BF140AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::pair<std::string const,std::shared_ptr<MessageSession>>::~pair((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void BambiCallTerminationReasonsBase::reason(const void ***a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string __p;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v15 = 0;
  v16 = 0;
  BambiCallTerminationReasonsBase::getCombinedReasonMap(a1, &v15);
  v6 = v15;
  ims::lowerCase(a2, &__p);
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::find<std::string>(v6, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v15 + 8 == v7)
  {
    std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,BambiCallTerminationReason const&,void>((const BambiCallTerminationReason *)(a1 + 1), a3);
  }
  else
  {
    *a3 = *(_QWORD *)(v7 + 56);
    v8 = *(_QWORD *)(v7 + 64);
    a3[1] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  v11 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF140BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void BambiCallTerminationReasonsBase::setReasonsFromPref(const void ***a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  pthread_once_t *v8;
  void (*v9)(void);
  __guard *v10;
  _QWORD *(*v11)(_QWORD *);
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  void *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  _BOOL4 v32;
  uint64_t v33;
  std::string::size_type v34;
  uint64_t v35;
  uint64_t v36;
  std::string::size_type v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  __int128 *v43;
  __int128 *v44;
  BOOL v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *(*v50)(_QWORD *);
  __guard *v51;
  void (*v52)(void);
  pthread_once_t *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  std::string::size_type size;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  std::string::size_type v87;
  int v88;
  uint64_t v89;
  const void *v90;
  void *v91;
  const void *v92;
  void *v93;
  int v94;
  uint64_t v95;
  unsigned int v96;
  int v97;
  char v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  void *v107[2];
  char v108;
  void *v109[2];
  char v110;
  std::string v111;
  std::string v112;
  std::__shared_weak_count **v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  void *__p;
  __int128 v117;
  void *v118[4];
  void *v119[2];
  _BYTE v120[32];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  std::string __str;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  std::string v132;

  v129 = 0;
  v130 = 0;
  v131 = 0;
  v126 = 0;
  v127 = 0;
  v128 = 0;
  ImsDictPref::keysAndValues(a2, &v129, &v126);
  v4 = v129;
  if (v130 != v129)
  {
    v5 = 0;
    v6 = "bambi.call";
    v7 = "";
    v8 = &ims::_driverInit;
    v9 = (void (*)(void))ims::createInstance;
    v11 = std::endl[abi:ne180100]<char,std::char_traits<char>>;
    v100 = a3;
    do
    {
      v12 = *(unsigned __int8 *)(a3 + 23);
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(a3 + 8);
      v104 = v5;
      v13 = v4 + 24 * v5;
      if (v12)
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a3, (const void **)v13, &__str);
      }
      else if (*(char *)(v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v13, *(_QWORD *)(v13 + 8));
      }
      else
      {
        v14 = *(_OWORD *)v13;
        __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 + 16);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v14;
      }
      v124 = 0;
      v122 = 0u;
      v123 = 0u;
      *(_OWORD *)&v120[16] = 0u;
      v121 = 0u;
      *(_OWORD *)v119 = 0u;
      *(_OWORD *)v120 = 0u;
      memset(v118, 0, sizeof(v118));
      HIBYTE(v118[3]) = 13;
      qmemcpy(&v118[1], "InternalError", 13);
      *(_QWORD *)&v120[12] = 0xA000001F4;
      __p = 0;
      *(_QWORD *)&v117 = 0;
      BambiCallTerminationReasonsBase::getCombinedReasonMap(a1, &__p);
      v15 = __p;
      ims::lowerCase((uint64_t)&__str, &v132);
      v16 = (_QWORD *)std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::find<std::string>((uint64_t)v15, (const void **)&v132.__r_.__value_.__l.__data_);
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v132.__r_.__value_.__l.__data_);
      if ((char *)__p + 8 == (char *)v16)
      {
        v113 = 0;
        v114 = 0;
      }
      else
      {
        v17 = (std::__shared_weak_count *)v16[8];
        v113 = (std::__shared_weak_count **)v16[7];
        v114 = v17;
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldxr(p_shared_owners);
          while (__stxr(v19 + 1, p_shared_owners));
        }
      }
      v20 = (std::__shared_weak_count *)v117;
      if ((_QWORD)v117)
      {
        v21 = (unint64_t *)(v117 + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = (uint64_t *)v113;
      if (v113)
      {
        LODWORD(v118[0]) = *(_DWORD *)v113;
        std::string::operator=((std::string *)&v118[1], (const std::string *)(v113 + 1));
        std::string::operator=((std::string *)v119, (const std::string *)(v23 + 4));
        v24 = v23[7];
        *(_DWORD *)&v120[16] = *((_DWORD *)v23 + 16);
        *(_QWORD *)&v120[8] = v24;
        std::string::operator=((std::string *)&v120[24], (const std::string *)v23 + 3);
        std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v122, v23 + 12);
        std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v123, v23 + 14);
        v25 = *(_DWORD *)((char *)v23 + 131);
        LODWORD(v124) = *((_DWORD *)v23 + 32);
        *(_DWORD *)((char *)&v124 + 3) = v25;
        std::string::basic_string[abi:ne180100]<0>(&v132, v6);
        std::string::basic_string[abi:ne180100]<0>(&__p, v7);
        pthread_once(v8, v9);
        v26 = ImsLogger::debug(v10[140], (uint64_t)&v132, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"overriding based on existing termination reason ", 48);
        *(_BYTE *)(v26 + 17) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v26 + 32))(v26, &v118[1]);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, v11);
        *(_BYTE *)(v26 + 17) = 0;
        if (SHIBYTE(v117) < 0)
          operator delete(__p);
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v132.__r_.__value_.__l.__data_);
      }
      else
      {
        if (!((unsigned int (*)(const void ***))(*a1)[3])(a1))
        {
          std::string::basic_string[abi:ne180100]<0>(&v132, v6);
          std::string::basic_string[abi:ne180100]<0>(&__p, v7);
          pthread_once(v8, v9);
          v71 = ImsLogger::error(v10[140], (uint64_t)&v132, (uint64_t)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v71 + 8), (uint64_t)"unknown termination reason in prefs: ", 37);
          *(_BYTE *)(v71 + 17) = 0;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v71 + 32))(v71, &__str);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v71 + 64))(v71, v11);
          *(_BYTE *)(v71 + 17) = 0;
          if (SHIBYTE(v117) < 0)
            operator delete(__p);
          if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v132.__r_.__value_.__l.__data_);
          v72 = v114;
          if (v114)
          {
            v73 = (unint64_t *)&v114->__shared_owners_;
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          goto LABEL_144;
        }
        std::string::basic_string[abi:ne180100]<0>(&v132, v6);
        std::string::basic_string[abi:ne180100]<0>(&__p, v7);
        pthread_once(v8, v9);
        v27 = ImsLogger::debug(v10[140], (uint64_t)&v132, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"adding custom termination reason ", 33);
        *(_BYTE *)(v27 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v27 + 32))(v27, &__str);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, v11);
        *(_BYTE *)(v27 + 17) = 0;
        if (SHIBYTE(v117) < 0)
          operator delete(__p);
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v132.__r_.__value_.__l.__data_);
        std::string::operator=((std::string *)&v118[1], &__str);
        BYTE4(v124) = 1;
      }
      v28 = v114;
      if (v114)
      {
        v29 = (unint64_t *)&v114->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v31 = *(uint64_t **)&v126[8 * v104];
      memset(&v132, 0, sizeof(v132));
      v117 = 0uLL;
      __p = &v117;
      v114 = 0;
      v115 = 0;
      v113 = &v114;
      memset(&v112, 0, sizeof(v112));
      if (!v31)
        __cxa_bad_typeid();
      v33 = *v31;
      if (v32)
      {
        v102 = (*(uint64_t (**)(uint64_t *))(v33 + 56))(v31);
      }
      else
      {
        {
          {
            std::string::basic_string[abi:ne180100]<0>(&v111, v6);
            std::string::basic_string[abi:ne180100]<0>(v109, v7);
            pthread_once(v8, v9);
            v75 = ImsLogger::error(v10[140], (uint64_t)&v111, (uint64_t)v109);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v75 + 8), (uint64_t)"value for termination reason ", 29);
            *(_BYTE *)(v75 + 17) = 0;
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v75 + 32))(v75, &__str);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v75 + 8), (uint64_t)" has unknown type", 17);
            *(_BYTE *)(v75 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v75 + 64))(v75, v11);
            *(_BYTE *)(v75 + 17) = 0;
            if (v110 < 0)
              operator delete(v109[0]);
            if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v111.__r_.__value_.__l.__data_);
            goto LABEL_140;
          }
          std::string::basic_string[abi:ne180100]<0>(&v111, "StatusCode");
          v70 = (*(uint64_t (**)(void *, std::string *))(*(_QWORD *)v69 + 88))(v69, &v111);
          if (v70)
            v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 56))(v70);
          else
            v102 = 0;
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v111.__r_.__value_.__l.__data_);
          std::string::basic_string[abi:ne180100]<0>(&v111, "ReasonHeaderText");
          ImsDictPref::stringChildValue((uint64_t)v69, (uint64_t)&v111, (uint64_t)&v132);
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v111.__r_.__value_.__l.__data_);
          std::string::basic_string[abi:ne180100]<0>(&v111, "ReasonHeaderCause");
          v82 = (*(uint64_t (**)(void *, std::string *))(*(_QWORD *)v69 + 88))(v69, &v111);
          if (v82)
            v101 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 56))(v82);
          else
            v101 = 0;
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v111.__r_.__value_.__l.__data_);
          std::string::basic_string[abi:ne180100]<0>(&v111, "ReasonHeaderProtocol");
          ImsDictPref::stringChildValue((uint64_t)v69, (uint64_t)&v111, (uint64_t)&v112);
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v111.__r_.__value_.__l.__data_);
          size = HIBYTE(v112.__r_.__value_.__r.__words[2]);
          if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v112.__r_.__value_.__l.__size_;
          if (!size)
          {
            std::string::basic_string[abi:ne180100]<0>(&v111, "Protocol");
            ImsDictPref::stringChildValue((uint64_t)v69, (uint64_t)&v111, (uint64_t)&v112);
            if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v111.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v111, "EnableCSFB");
          v84 = (*(uint64_t (**)(void *, std::string *))(*(_QWORD *)v69 + 88))(v69, &v111);
          if (v84)
            v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 40))(v84);
          else
            v97 = 0;
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v111.__r_.__value_.__l.__data_);
          std::string::basic_string[abi:ne180100]<0>(&v111, "DisableCSFB");
          v85 = (*(uint64_t (**)(void *, std::string *))(*(_QWORD *)v69 + 88))(v69, &v111);
          if (v85)
            v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 40))(v85);
          else
            v99 = 0;
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v111.__r_.__value_.__l.__data_);
          std::string::basic_string[abi:ne180100]<0>(&v111, "DropsRegistration");
          v86 = (*(uint64_t (**)(void *, std::string *))(*(_QWORD *)v69 + 88))(v69, &v111);
          if (v86)
            v98 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v86 + 40))(v86);
          else
            v98 = 0;
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v111.__r_.__value_.__l.__data_);
          memset(&v111, 0, sizeof(v111));
          std::string::basic_string[abi:ne180100]<0>(v109, "TerminationEvent");
          ImsDictPref::stringChildValue((uint64_t)v69, (uint64_t)v109, (uint64_t)&v111);
          if (v110 < 0)
            operator delete(v109[0]);
          v87 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
          if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v87 = v111.__r_.__value_.__l.__size_;
          if (v87)
          {
            v88 = BambiCallSessionTerminationBaseEvent::reasonForName((uint64_t)&v111);
            if (v88 == 38)
            {
              std::string::basic_string[abi:ne180100]<0>(v109, v6);
              std::string::basic_string[abi:ne180100]<0>(v107, v7);
              pthread_once(v8, v9);
              v89 = ImsLogger::error(v10[140], (uint64_t)v109, (uint64_t)v107);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v89 + 8), (uint64_t)"unknown termination event ", 26);
              *(_BYTE *)(v89 + 17) = 0;
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v89 + 32))(v89, &v111);
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v89 + 64))(v89, v11);
              *(_BYTE *)(v89 + 17) = 0;
              if (v108 < 0)
                operator delete(v107[0]);
              if (v110 < 0)
                operator delete(v109[0]);
              goto LABEL_206;
            }
          }
          else
          {
LABEL_206:
            v88 = 38;
          }
          std::string::basic_string[abi:ne180100]<0>(v109, "ExtraHeaders");
          v90 = (const void *)(*(uint64_t (**)(void *, void **))(*(_QWORD *)v69 + 88))(v69, v109);
          if (v90)
          else
            v91 = 0;
          if (v110 < 0)
          {
            operator delete(v109[0]);
            if (!v91)
              goto LABEL_215;
          }
          else if (!v91)
          {
LABEL_215:
            std::string::basic_string[abi:ne180100]<0>(v109, "ExtraParams");
            v92 = (const void *)(*(uint64_t (**)(void *, void **))(*(_QWORD *)v69 + 88))(v69, v109);
            if (v92)
            else
              v93 = 0;
            if (v110 < 0)
            {
              operator delete(v109[0]);
              if (!v93)
                goto LABEL_223;
            }
            else if (!v93)
            {
LABEL_223:
              if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v111.__r_.__value_.__l.__data_);
              if (v99)
              {
                v94 = 2;
                goto LABEL_229;
              }
              if (v97)
              {
                v94 = 1;
LABEL_229:
                LODWORD(v118[0]) = v94;
              }
              BYTE5(v124) = v98;
              if (v88 != 38)
              {
                std::string::basic_string[abi:ne180100]<0>(&v111, v6);
                std::string::basic_string[abi:ne180100]<0>(v109, v7);
                pthread_once(v8, v9);
                v95 = ImsLogger::debug(v10[140], (uint64_t)&v111, (uint64_t)v109);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v95 + 8), (uint64_t)"Setting termination event for ", 30);
                *(_BYTE *)(v95 + 17) = 0;
                (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v95 + 32))(v95, &__str);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v95 + 8), (uint64_t)" to ", 4);
                *(_BYTE *)(v95 + 17) = 0;
                if (v88 <= 37)
                  v96 = v88;
                else
                  v96 = 10;
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v95 + 32))(v95, reasonStrings + 24 * v96);
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v95 + 64))(v95, v11);
                *(_BYTE *)(v95 + 17) = 0;
                if (v110 < 0)
                  operator delete(v109[0]);
                if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v111.__r_.__value_.__l.__data_);
                *(_DWORD *)&v120[16] = v88;
              }
              goto LABEL_47;
            }
            ImsDictPref::stringMapValue((uint64_t)v93, (uint64_t **)&v113);
            goto LABEL_223;
          }
          ImsDictPref::stringMapValue((uint64_t)v91, (uint64_t **)&__p);
          goto LABEL_215;
        }
        (*(void (**)(std::string *__return_ptr, uint64_t *))(*v31 + 48))(&v111, v31);
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v132.__r_.__value_.__l.__data_);
        v102 = 0;
        v132 = v111;
      }
      v101 = 0;
      BYTE5(v124) = 0;
LABEL_47:
      v34 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
      if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v34 = v112.__r_.__value_.__l.__size_;
      if (v34)
      {
        std::string::basic_string[abi:ne180100]<0>(&v111, v6);
        std::string::basic_string[abi:ne180100]<0>(v109, v7);
        pthread_once(v8, v9);
        v35 = ImsLogger::debug(v10[140], (uint64_t)&v111, (uint64_t)v109);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"Setting reason protocol for ", 28);
        *(_BYTE *)(v35 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v35 + 32))(v35, &__str);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)" to ", 4);
        *(_BYTE *)(v35 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v35 + 32))(v35, &v112);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, v11);
        *(_BYTE *)(v35 + 17) = 0;
        if (v110 < 0)
          operator delete(v109[0]);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
        std::string::operator=((std::string *)&v120[24], &v112);
      }
      if (v102)
      {
        if ((v102 - 300) > 0x18F)
        {
          std::string::basic_string[abi:ne180100]<0>(&v111, v6);
          std::string::basic_string[abi:ne180100]<0>(v109, v7);
          pthread_once(v8, v9);
          v36 = ImsLogger::error(v10[140], (uint64_t)&v111, (uint64_t)v109);
          std::ostream::operator<<();
          *(_BYTE *)(v36 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)" is not a valid SIP status code", 31);
        }
        else
        {
          *(_DWORD *)&v120[12] = v102;
          std::string::basic_string[abi:ne180100]<0>(&v111, v6);
          std::string::basic_string[abi:ne180100]<0>(v109, v7);
          pthread_once(v8, v9);
          v36 = ImsLogger::debug(v10[140], (uint64_t)&v111, (uint64_t)v109);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"Setting SIP status code for ", 28);
          *(_BYTE *)(v36 + 17) = 0;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v36 + 32))(v36, &__str);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)" to ", 4);
          *(_BYTE *)(v36 + 17) = 0;
          std::ostream::operator<<();
        }
        *(_BYTE *)(v36 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, v11);
        *(_BYTE *)(v36 + 17) = 0;
        if (v110 < 0)
          operator delete(v109[0]);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
      }
      v37 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
      if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v37 = v132.__r_.__value_.__l.__size_;
      if (v37)
      {
        std::string::operator=((std::string *)v119, &v132);
        std::string::basic_string[abi:ne180100]<0>(&v111, v6);
        std::string::basic_string[abi:ne180100]<0>(v109, v7);
        pthread_once(v8, v9);
        v38 = ImsLogger::debug(v10[140], (uint64_t)&v111, (uint64_t)v109);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"Setting Reason header text for ", 31);
        *(_BYTE *)(v38 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v38 + 32))(v38, &__str);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)" to ", 4);
        *(_BYTE *)(v38 + 17) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v38 + 32))(v38, v119);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, v11);
        *(_BYTE *)(v38 + 17) = 0;
        if (v110 < 0)
          operator delete(v109[0]);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
      }
      if (v101)
      {
        *(_DWORD *)&v120[8] = v101;
        std::string::basic_string[abi:ne180100]<0>(&v111, v6);
        std::string::basic_string[abi:ne180100]<0>(v109, v7);
        pthread_once(v8, v9);
        v39 = ImsLogger::debug(v10[140], (uint64_t)&v111, (uint64_t)v109);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)"Setting Reason header cause for ", 32);
        *(_BYTE *)(v39 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v39 + 32))(v39, &__str);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)" to ", 4);
        *(_BYTE *)(v39 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v39 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v39 + 64))(v39, v11);
        *(_BYTE *)(v39 + 17) = 0;
        if (v110 < 0)
          operator delete(v109[0]);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
      }
      if (*((_QWORD *)&v117 + 1))
      {
        std::string::basic_string[abi:ne180100]<0>(&v111, v6);
        std::string::basic_string[abi:ne180100]<0>(v109, v7);
        pthread_once(v8, v9);
        v40 = ImsLogger::debug(v10[140], (uint64_t)&v111, (uint64_t)v109);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)"Adding extra headers for Reason ", 32);
        *(_BYTE *)(v40 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v40 + 32))(v40, &__str);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)":", 1);
        *(_BYTE *)(v40 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, v11);
        *(_BYTE *)(v40 + 17) = 0;
        if (v110 < 0)
          operator delete(v109[0]);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
        v41 = __p;
        if (__p != &v117)
        {
          do
          {
            std::string::basic_string[abi:ne180100]<0>(&v111, v6);
            std::string::basic_string[abi:ne180100]<0>(v109, v7);
            pthread_once(v8, v9);
            v42 = ImsLogger::debug(v10[140], (uint64_t)&v111, (uint64_t)v109);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 32))(v42, (uint64_t)v41 + 32);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)": ", 2);
            *(_BYTE *)(v42 + 17) = 0;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 32))(v42, (uint64_t)v41 + 56);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, v11);
            *(_BYTE *)(v42 + 17) = 0;
            if (v110 < 0)
              operator delete(v109[0]);
            if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v111.__r_.__value_.__l.__data_);
            v43 = (__int128 *)*((_QWORD *)v41 + 1);
            if (v43)
            {
              do
              {
                v44 = v43;
                v43 = *(__int128 **)v43;
              }
              while (v43);
            }
            else
            {
              do
              {
                v44 = (__int128 *)*((_QWORD *)v41 + 2);
                v45 = *(_QWORD *)v44 == (_QWORD)v41;
                v41 = v44;
              }
              while (!v45);
            }
            v41 = v44;
          }
          while (v44 != &v117);
        }
        v46 = operator new(0x30uLL);
        v46[1] = 0;
        v46[2] = 0;
        *v46 = &off_1E78E2790;
        v46[5] = 0;
        v46[4] = 0;
        v46[3] = v46 + 4;
        v47 = (std::__shared_weak_count *)*((_QWORD *)&v123 + 1);
        *(_QWORD *)&v123 = v46 + 3;
        *((_QWORD *)&v123 + 1) = v46;
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        if ((void **)v123 != &__p)
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)v123, (__int128 *)__p, &v117);
      }
      v50 = v11;
      v51 = v10;
      v52 = v9;
      v53 = v8;
      v54 = v7;
      v55 = v6;
      if (v115)
      {
        std::string::basic_string[abi:ne180100]<0>(&v111, v6);
        std::string::basic_string[abi:ne180100]<0>(v109, v54);
        pthread_once(v53, v52);
        v56 = ImsLogger::debug(v51[140], (uint64_t)&v111, (uint64_t)v109);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v56 + 8), (uint64_t)"Adding extra params for Reason ", 31);
        *(_BYTE *)(v56 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v56 + 32))(v56, &__str);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v56 + 8), (uint64_t)":", 1);
        *(_BYTE *)(v56 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v56 + 64))(v56, v50);
        *(_BYTE *)(v56 + 17) = 0;
        if (v110 < 0)
          operator delete(v109[0]);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
        v57 = operator new(0x40uLL);
        v57[1] = 0;
        v57[2] = 0;
        *v57 = &off_1E78E27E0;
        v57[3] = &off_1E78B82D8;
        v57[5] = 0;
        v57[6] = 0;
        v57[4] = v57 + 5;
        *((_WORD *)v57 + 28) = 256;
        v58 = (std::__shared_weak_count *)*((_QWORD *)&v122 + 1);
        *(_QWORD *)&v122 = v57 + 3;
        *((_QWORD *)&v122 + 1) = v57;
        if (v58)
        {
          v59 = (unint64_t *)&v58->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v61 = (uint64_t *)v113;
        if (v113 != &v114)
        {
          do
          {
            std::string::basic_string[abi:ne180100]<0>(&v111, v55);
            std::string::basic_string[abi:ne180100]<0>(v109, v54);
            pthread_once(v53, v52);
            v62 = ImsLogger::debug(v51[140], (uint64_t)&v111, (uint64_t)v109);
            (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v62 + 32))(v62, v61 + 4);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v62 + 8), (uint64_t)"=", 1);
            *(_BYTE *)(v62 + 17) = 0;
            (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v62 + 32))(v62, v61 + 7);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v62 + 64))(v62, v50);
            *(_BYTE *)(v62 + 17) = 0;
            if (v110 < 0)
              operator delete(v109[0]);
            if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v111.__r_.__value_.__l.__data_);
            v111.__r_.__value_.__r.__words[0] = (std::string::size_type)(v61 + 4);
            v63 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v122 + 8), (void **)v61 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v111);
            std::string::operator=((std::string *)(v63 + 7), (const std::string *)(v61 + 7));
            v64 = (uint64_t *)v61[1];
            if (v64)
            {
              do
              {
                v65 = v64;
                v64 = (uint64_t *)*v64;
              }
              while (v64);
            }
            else
            {
              do
              {
                v65 = (uint64_t *)v61[2];
                v45 = *v65 == (_QWORD)v61;
                v61 = v65;
              }
              while (!v45);
            }
            v61 = v65;
          }
          while (v65 != (uint64_t *)&v114);
        }
      }
      ((void (*)(uint64_t *__return_ptr, const void ***, void **))(*a1)[2])(&v105, a1, v118);
      v6 = v55;
      v7 = v54;
      v8 = v53;
      v9 = v52;
      v10 = v51;
      v11 = v50;
      v66 = v106;
      if (v106)
      {
        v67 = (unint64_t *)&v106->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
LABEL_140:
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v112.__r_.__value_.__l.__data_);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v113, v114);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, (_QWORD *)v117);
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v132.__r_.__value_.__l.__data_);
LABEL_144:
      v76 = (std::__shared_weak_count *)*((_QWORD *)&v123 + 1);
      if (*((_QWORD *)&v123 + 1))
      {
        v77 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      v79 = (std::__shared_weak_count *)*((_QWORD *)&v122 + 1);
      if (*((_QWORD *)&v122 + 1))
      {
        v80 = (unint64_t *)(*((_QWORD *)&v122 + 1) + 8);
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      if (SHIBYTE(v121) < 0)
        operator delete(*(void **)&v120[24]);
      a3 = v100;
      if ((v120[7] & 0x80000000) != 0)
        operator delete(v119[0]);
      if (SHIBYTE(v118[3]) < 0)
        operator delete(v118[1]);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v5 = v104 + 1;
      v4 = v129;
    }
    while (v104 + 1 < 0xAAAAAAAAAAAAAAABLL * ((v130 - v129) >> 3));
  }
  if (v126)
  {
    v127 = v126;
    operator delete(v126);
  }
  v118[0] = &v129;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v118);
}

void sub_1BF14228C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,_QWORD *a52,uint64_t a53,void *a54,_QWORD *a55,int a56,__int16 a57,char a58,char a59,uint64_t a60)
{
  uint64_t v60;
  void *v62;

  if (a44 < 0)
    operator delete(__p);
  if (a50 < 0)
    operator delete(a45);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a51, a52);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a54, a55);
  if (*(char *)(v60 - 105) < 0)
    operator delete(*(void **)(v60 - 128));
  BambiCallTerminationReason::~BambiCallTerminationReason((void **)&a60);
  if (*(char *)(v60 - 185) < 0)
    operator delete(*(void **)(v60 - 208));
  v62 = *(void **)(v60 - 176);
  if (v62)
  {
    *(_QWORD *)(v60 - 168) = v62;
    operator delete(v62);
  }
  a60 = v60 - 152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a60);
  _Unwind_Resume(a1);
}

BOOL ReasonCompare::operator()(uint64_t a1, const void **a2, const void **a3)
{
  int v5;
  void *v6;
  size_t size;
  size_t v8;
  int v9;
  _BOOL4 v10;
  const void *v11;
  std::string *v12;
  int v13;
  void *v14;
  size_t v15;
  size_t v16;
  int v17;
  _BOOL4 v18;
  const void *v19;
  std::string *v20;
  void *__p[2];
  char v23;
  std::string v24;

  std::string::basic_string[abi:ne180100]<0>(__p, "Override_");
  ims::lowerCase((uint64_t)__p, &v24);
  v5 = SHIBYTE(v24.__r_.__value_.__r.__words[2]);
  v6 = (void *)v24.__r_.__value_.__r.__words[0];
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  else
    size = v24.__r_.__value_.__l.__size_;
  v8 = *((unsigned __int8 *)a2 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = (size_t)a2[1];
  if (size > v8)
  {
    v10 = 0;
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
  if (v9 >= 0)
    v11 = a2;
  else
    v11 = *a2;
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v24;
  else
    v12 = (std::string *)v24.__r_.__value_.__r.__words[0];
  v10 = memcmp(v11, v12, size) == 0;
  if (v5 < 0)
LABEL_16:
    operator delete(v6);
LABEL_17:
  if (v23 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Override_");
  ims::lowerCase((uint64_t)__p, &v24);
  v13 = SHIBYTE(v24.__r_.__value_.__r.__words[2]);
  v14 = (void *)v24.__r_.__value_.__r.__words[0];
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  else
    v15 = v24.__r_.__value_.__l.__size_;
  v16 = *((unsigned __int8 *)a3 + 23);
  v17 = (char)v16;
  if ((v16 & 0x80u) != 0)
    v16 = (size_t)a3[1];
  if (v15 > v16)
  {
    v18 = 0;
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_34;
  }
  if (v17 >= 0)
    v19 = a3;
  else
    v19 = *a3;
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &v24;
  else
    v20 = (std::string *)v24.__r_.__value_.__r.__words[0];
  v18 = memcmp(v19, v20, v15) == 0;
  if (v13 < 0)
LABEL_34:
    operator delete(v14);
LABEL_35:
  if (v23 < 0)
    operator delete(__p[0]);
  if (v10 && !v18)
    return 0;
  if (v10 || !v18)
    return (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)a3) & 0x80u) != 0;
  return 1;
}

void sub_1BF142690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BambiCallIncomingTerminationReasons::canAddCustomReasons(BambiCallIncomingTerminationReasons *this)
{
  return 1;
}

uint64_t BambiCallTerminationReasonsBase::canAddCustomReasons(BambiCallTerminationReasonsBase *this)
{
  return 0;
}

void BambiCallTerminationReasons::~BambiCallTerminationReasons(BambiCallTerminationReasons *this)
{
  BambiCallTerminationReasonsBase::~BambiCallTerminationReasonsBase(this);
  JUMPOUT(0x1C3B87100);
}

void std::__shared_ptr_emplace<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E26F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E26F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

void std::__shared_ptr_emplace<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
}

void std::__shared_ptr_emplace<BambiCallTerminationReason>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiCallTerminationReason>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2740;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

void std::__shared_ptr_emplace<BambiCallTerminationReason>::__on_zero_shared(uint64_t a1)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 136);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 120);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

_OWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;

  v12 = 0;
  v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v11[2] = 1;
    v6 = operator new(0x48uLL);
    v11[1] = a1 + 1;
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    v8[1] = 0;
    v8[2] = 0;
    *v8 = 0;
    *((_QWORD *)v6 + 7) = 0;
    *((_QWORD *)v6 + 8) = 0;
    std::__tree<unsigned int>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

_QWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  const void **v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = (const void **)(v4 + 32);
        a1 = ReasonCompare::operator()(a1, a3, (const void **)(v4 + 32));
        if (!(_DWORD)a1)
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      a1 = ReasonCompare::operator()(a1, v8, a3);
      if (!(_DWORD)a1)
        break;
      v5 = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const(&)[18],char const(&)[1],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(_QWORD *a1, char *a2, int *a3, int *a4)
{
  _QWORD *v8;
  std::string __p;
  std::string v10;

  v8 = operator new(0xA0uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v10, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v8 + 3), &v10, &__p, *a3, *a4, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  *a1 = v8 + 3;
  a1[1] = v8;
}

void sub_1BF142A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::list<std::shared_ptr<BambiCallTerminationReason>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[5] = (uint64_t *)(v7 + 5);
    v7[6] = (uint64_t *)(v7 + 5);
    v7[7] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[15],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(_QWORD *a1, char *a2, int *a3)
{
  _QWORD *v6;
  std::string __p;
  std::string v8;

  v6 = operator new(0xA0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v8, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "User Triggered");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v6 + 3), &v8, &__p, 486, *a3, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_1BF142C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[22],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(_QWORD *a1, char *a2, char *a3, int *a4)
{
  _QWORD *v8;
  std::string __p;
  std::string v10;

  v8 = operator new(0xA0uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v10, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v8 + 3), &v10, &__p, 486, *a4, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  *a1 = v8 + 3;
  a1[1] = v8;
}

void sub_1BF142D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[25],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(_QWORD *a1, char *a2, char *a3, int *a4, int *a5)
{
  _QWORD *v10;
  std::string __p;
  std::string v12;

  v10 = operator new(0xA0uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v12, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v10 + 3), &v12, &__p, *a4, *a5, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_1BF142E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[32],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(_QWORD *a1, char *a2, char *a3, int *a4, int *a5)
{
  _QWORD *v10;
  std::string __p;
  std::string v12;

  v10 = operator new(0xA0uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v12, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v10 + 3), &v12, &__p, *a4, *a5, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_1BF142F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[26],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(_QWORD *a1, char *a2, char *a3, int *a4, int *a5)
{
  _QWORD *v10;
  std::string __p;
  std::string v12;

  v10 = operator new(0xA0uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v12, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v10 + 3), &v12, &__p, *a4, *a5, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_1BF143024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[20],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(_QWORD *a1, char *a2, char *a3, int *a4, int *a5)
{
  _QWORD *v10;
  std::string __p;
  std::string v12;

  v10 = operator new(0xA0uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v12, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v10 + 3), &v12, &__p, *a4, *a5, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_1BF14312C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[16],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(_QWORD *a1, char *a2, char *a3, int *a4)
{
  _QWORD *v8;
  std::string __p;
  std::string v10;

  v8 = operator new(0xA0uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v10, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v8 + 3), &v10, &__p, 500, *a4, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  *a1 = v8 + 3;
  a1[1] = v8;
}

void sub_1BF143230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[1],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(_QWORD *a1, char *a2, int *a3)
{
  _QWORD *v6;
  std::string __p;
  std::string v8;

  v6 = operator new(0xA0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v8, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v6 + 3), &v8, &__p, 500, *a3, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_1BF14332C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[12],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(_QWORD *a1, char *a2, char *a3, int *a4, int *a5)
{
  _QWORD *v10;
  std::string __p;
  std::string v12;

  v10 = operator new(0xA0uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v12, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v10 + 3), &v12, &__p, *a4, *a5, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_1BF143434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[13],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(_QWORD *a1, char *a2, char *a3, int *a4)
{
  _QWORD *v8;
  std::string __p;
  std::string v10;

  v8 = operator new(0xA0uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v10, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v8 + 3), &v10, &__p, 500, *a4, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  *a1 = v8 + 3;
  a1[1] = v8;
}

void sub_1BF143538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[18],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(_QWORD *a1, char *a2, char *a3, int *a4, int *a5)
{
  _QWORD *v10;
  std::string __p;
  std::string v12;

  v10 = operator new(0xA0uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v12, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v10 + 3), &v12, &__p, *a4, *a5, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_1BF143640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[23],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(_QWORD *a1, char *a2, char *a3, int *a4)
{
  _QWORD *v8;
  std::string __p;
  std::string v10;

  v8 = operator new(0xA0uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v10, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v8 + 3), &v10, &__p, 500, *a4, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  *a1 = v8 + 3;
  a1[1] = v8;
}

void sub_1BF143744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,char const* const&,char const(&)[14],unsigned int const&,ims::DisconnectReason::ReasonCode,void>(_QWORD *a1, char *a2, int *a3)
{
  _QWORD *v6;
  std::string __p;
  std::string v8;

  v6 = operator new(0xA0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E78E2740;
  std::string::basic_string[abi:ne180100]<0>(&v8, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Deregistering");
  BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)(v6 + 3), &v8, &__p, 486, *a3, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_1BF143840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1BF1438C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  _BOOL8 v5;
  uint64_t v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (_BOOL8)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>> const&>(_BOOL8 a1, uint64_t a2, const void **a3, __int128 *a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t *v12;
  uint64_t **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v20[3];
  uint64_t *v21;
  uint64_t v22;

  v6 = (uint64_t *)a2;
  v7 = (uint64_t **)a1;
  v21 = 0;
  v22 = 0;
  v8 = (uint64_t *)(a1 + 8);
  if (a1 + 8 == a2 || (a1 = ReasonCompare::operator()(a1, a3, (const void **)(a2 + 32))))
  {
    if (*v7 == v6)
    {
      v10 = (uint64_t)v6;
LABEL_16:
      if (*v6)
      {
        v22 = v10;
        v13 = (uint64_t **)(v10 + 8);
      }
      else
      {
        v22 = (uint64_t)v6;
        v13 = (uint64_t **)v6;
      }
      goto LABEL_30;
    }
    v9 = *v6;
    if (*v6)
    {
      do
      {
        v10 = v9;
        v9 = *(_QWORD *)(v9 + 8);
      }
      while (v9);
    }
    else
    {
      v16 = (uint64_t)v6;
      do
      {
        v10 = *(_QWORD *)(v16 + 16);
        v17 = *(_QWORD *)v10 == v16;
        v16 = v10;
      }
      while (v17);
    }
    if (ReasonCompare::operator()(a1, (const void **)(v10 + 32), a3))
      goto LABEL_16;
LABEL_29:
    v13 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__find_equal<std::string>((uint64_t)v7, &v22, a3);
    goto LABEL_30;
  }
  v11 = ReasonCompare::operator()(a1, (const void **)v6 + 4, a3);
  if (v11)
  {
    v13 = (uint64_t **)(v6 + 1);
    v12 = (uint64_t *)v6[1];
    if (v12)
    {
      v14 = (_QWORD *)v6[1];
      do
      {
        v15 = (uint64_t)v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = (uint64_t)v6;
      do
      {
        v15 = *(_QWORD *)(v18 + 16);
        v17 = *(_QWORD *)v15 == v18;
        v18 = v15;
      }
      while (!v17);
    }
    if ((uint64_t *)v15 != v8)
    {
      if (!ReasonCompare::operator()(v11, a3, (const void **)(v15 + 32)))
        goto LABEL_29;
      v12 = *v13;
    }
    if (v12)
    {
      v22 = v15;
      v13 = (uint64_t **)v15;
    }
    else
    {
      v22 = (uint64_t)v6;
    }
LABEL_30:
    v6 = *v13;
    if (*v13)
      return v6;
    goto LABEL_20;
  }
  v21 = v6;
  v22 = (uint64_t)v6;
  v13 = &v21;
  if (!v6)
  {
LABEL_20:
    v20[2] = (uint64_t *)1;
    v20[0] = (uint64_t *)operator new(0x48uLL);
    v20[1] = v8;
    std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)(v20[0] + 4), a4);
    std::__tree<unsigned int>::__insert_node_at(v7, v22, v13, v20[0]);
    v6 = v20[0];
    v20[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>>>>::reset[abi:ne180100]((uint64_t)v20);
  }
  return v6;
}

void sub_1BF143B44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__node_handle_merge_unique[abi:ne180100]<std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>>(uint64_t **result, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t **v3;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t v11;

  v3 = a2 + 1;
  v2 = *a2;
  if (*a2 != (uint64_t *)(a2 + 1))
  {
    v5 = result;
    do
    {
      v11 = 0;
      result = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::__find_equal<std::string>((uint64_t)v5, &v11, (const void **)v2 + 4);
      v6 = result;
      v7 = (uint64_t *)v2[1];
      v8 = v2;
      if (v7)
      {
        do
        {
          v9 = v7;
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v8[2];
          v10 = *v9 == (_QWORD)v8;
          v8 = v9;
        }
        while (!v10);
      }
      if (!*result)
      {
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(a2, v2);
        result = (uint64_t **)std::__tree<unsigned int>::__insert_node_at(v5, v11, v6, v2);
      }
      v2 = v9;
    }
    while (v9 != (uint64_t *)v3);
  }
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>,std::allocator<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>>,std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>&,void>@<X0>(const void ***a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>>::__shared_ptr_emplace[abi:ne180100]<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>&,std::allocator<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1BF143C60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>>::__shared_ptr_emplace[abi:ne180100]<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>&,std::allocator<std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>>,0>(_QWORD *a1, const void ***a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78E26F0;
  std::map<std::string,std::shared_ptr<BambiCallTerminationReason>,ReasonCompare,std::allocator<std::pair<std::string const,std::shared_ptr<BambiCallTerminationReason>>>>::map[abi:ne180100](a1 + 3, a2);
  return a1;
}

void sub_1BF143CA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<BambiCallTerminationReason,std::allocator<BambiCallTerminationReason>,BambiCallTerminationReason const&,void>@<X0>(const BambiCallTerminationReason *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xA0uLL);
  result = std::__shared_ptr_emplace<BambiCallTerminationReason>::__shared_ptr_emplace[abi:ne180100]<BambiCallTerminationReason const&,std::allocator<BambiCallTerminationReason>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1BF143D00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<BambiCallTerminationReason>::__shared_ptr_emplace[abi:ne180100]<BambiCallTerminationReason const&,std::allocator<BambiCallTerminationReason>,0>(_QWORD *a1, const BambiCallTerminationReason *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78E2740;
  BambiCallTerminationReason::BambiCallTerminationReason((BambiCallTerminationReason *)(a1 + 3), a2);
  return a1;
}

void sub_1BF143D48(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    a1 = ReasonCompare::operator()(a1, (const void **)(v3 + 32), a2);
    v6 = (uint64_t *)(v3 + 8);
    if (!(_DWORD)a1)
    {
      v6 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v6;
  }
  while (*v6);
  if (v5 == v2 || ReasonCompare::operator()(a1, a2, (const void **)(v5 + 32)))
    return v2;
  return v5;
}

void std::__shared_ptr_emplace<std::map<std::string,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::map<std::string,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2790;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

void std::__shared_ptr_emplace<std::map<std::string,std::string>>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
}

void std::__shared_ptr_emplace<SipParameterMap>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E27E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipParameterMap>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E27E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipParameterMap>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void SipViaHop::SipViaHop(SipViaHop *this, const SipViaHop *a2)
{
  uint64_t v3;
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  SipHop::SipHop(this, a2);
  *(_QWORD *)v3 = &off_1E78E28F0;
  *(_OWORD *)(v3 + 104) = 0u;
  v4 = (std::string *)(v3 + 104);
  v5 = v3 + 128;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_QWORD *)(v3 + 136) = 0;
  v6 = *((_QWORD *)a2 + 16);
  if (v6)
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v6 + 32))(&v10);
  else
    v10 = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](v5, &v10);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  std::string::operator=(v4, (const std::string *)((char *)a2 + 104));
}

void sub_1BF143F4C(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;
  uint64_t v3;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3);
  if (v1[127] < 0)
    operator delete(*v2);
  SipHop::~SipHop((SipHop *)v1);
  _Unwind_Resume(a1);
}

void SipViaHop::~SipViaHop(void **this)
{
  *this = &off_1E78E28F0;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 16));
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  *this = off_1E78B8288;
  this[8] = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHost::~SipHost(this + 1);
}

{
  SipViaHop::~SipViaHop(this);
  JUMPOUT(0x1C3B87100);
}

__int128 *SipViaHop::branch(SipViaHop *this)
{
  void **v2;
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "branch");
  v2 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 72, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if ((void **)((char *)this + 80) == v2)
    return &ims::kEmptyString;
  else
    return (__int128 *)(v2 + 7);
}

void sub_1BF14407C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipViaHop::setBranch(uint64_t a1, const std::string *a2)
{
  uint64_t *v4;
  void *__p[2];
  char v6;
  void **v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "branch");
  v7 = __p;
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 72), __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v7);
  std::string::operator=((std::string *)(v4 + 7), a2);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_1BF144118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SipViaHop::supportsRport(SipViaHop *this)
{
  void **v2;
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "rport");
  v2 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 72, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return (void **)((char *)this + 80) != v2;
}

void sub_1BF144194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipViaHop::rport(SipViaHop *this)
{
  char *v1;
  unsigned __int16 v2;
  void *__p[2];
  char v5;

  v1 = (char *)this + 64;
  std::string::basic_string[abi:ne180100]<0>(__p, "rport");
  v2 = SipParameterMap::uintParameter((uint64_t)v1, __p, 0);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1BF14420C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipViaHop::setSupportsRport(uint64_t **this, int a2)
{
  uint64_t *v3;
  std::string __p;
  void *v5[2];
  char v6;
  void **v7;

  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "rport");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v7 = v5;
    v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 9, v5, (uint64_t)&std::piecewise_construct, (__int128 **)&v7);
    std::string::operator=((std::string *)(v3 + 7), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "rport");
    SipParameterMap::clearParameter((uint64_t)(this + 8), v5);
  }
  if (v6 < 0)
    operator delete(v5[0]);
}

void sub_1BF1442E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipViaHop::setRport(SipViaHop *this, uint64_t a2)
{
  char *v4;
  uint64_t result;
  void *__p[2];
  char v7;

  v4 = (char *)this + 64;
  std::string::basic_string[abi:ne180100]<0>(__p, "rport");
  SipParameterMap::setParameter((uint64_t)v4, (__int128 *)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  result = *((_QWORD *)this + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 64))(result, a2);
  return result;
}

void sub_1BF144398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipViaHop::setReceived(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v11;
  std::string __str;
  void **v13;

  memset(&__str, 0, sizeof(__str));
  IpAddress::asString(*a2, (uint64_t)&__str, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "received");
  v13 = __p;
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 72), __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v13);
  std::string::operator=((std::string *)(v4 + 7), &__str);
  if (v11 < 0)
    operator delete(__p[0]);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 32))(__p);
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 128, (__int128 *)__p);
  v5 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v6 = (unint64_t *)((char *)__p[1] + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(_QWORD *)(a1 + 128);
  v9 = SipViaHop::rport((SipViaHop *)a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 64))(v8, v9);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BF1444D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t SipViaHop::keep(SipViaHop *this)
{
  char *v1;
  unint64_t v2;
  void *__p[2];
  char v5;

  v1 = (char *)this + 64;
  std::string::basic_string[abi:ne180100]<0>(__p, "keep");
  v2 = SipParameterMap::uintParameter((uint64_t)v1, __p, 0);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1BF14456C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipViaHop::setSupportsKeep(uint64_t **this, int a2)
{
  uint64_t *v3;
  std::string __p;
  void *v5[2];
  char v6;
  void **v7;

  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "keep");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v7 = v5;
    v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 9, v5, (uint64_t)&std::piecewise_construct, (__int128 **)&v7);
    std::string::operator=((std::string *)(v3 + 7), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "keep");
    SipParameterMap::clearParameter((uint64_t)(this + 8), v5);
  }
  if (v6 < 0)
    operator delete(v5[0]);
}

void sub_1BF144644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ImsOutStream *SipViaHop::toStream(SipViaHop *this, ImsOutStream *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  std::string __p;
  char v9;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"SIP", 3);
  *((_BYTE *)a2 + 17) = 0;
  v4 = (_QWORD *)*((_QWORD *)a2 + 1);
  __p.__r_.__value_.__s.__data_[0] = 47;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&__p, 1);
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"2.0", 3);
  *((_BYTE *)a2 + 17) = 0;
  v5 = (_QWORD *)*((_QWORD *)a2 + 1);
  __p.__r_.__value_.__s.__data_[0] = 47;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&__p, 1);
  *((_BYTE *)a2 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 104));
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  v6 = (_QWORD *)*((_QWORD *)a2 + 1);
  v9 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v9, 1);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(char *, ImsOutStream *))(*((_QWORD *)this + 1) + 8))((char *)this + 8, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  SipParameterMap::toStream((SipViaHop *)((char *)this + 64), a2, 0, 0, 0, 0);
  return a2;
}

void sub_1BF144790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipViaHeader::~SipViaHeader(SipViaHeader *this)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_1E78E2940;
  v2 = (_QWORD *)*((_QWORD *)this + 8);
  v3 = (_QWORD *)*((_QWORD *)this + 9);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)*((_QWORD *)this + 8);
  }
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  SipHeader::~SipHeader((void **)this);
}

{
  SipViaHeader::~SipViaHeader(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipViaHeader::encodeValue(SipViaHeader *this, ImsOutStream *a2)
{
  uint64_t v2;
  unint64_t v5;
  _QWORD *v6;
  char v8;

  v2 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) != v2)
  {
    v5 = 0;
    do
    {
      if (v5)
      {
        v6 = (_QWORD *)*((_QWORD *)a2 + 1);
        v8 = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v8, 1);
        *((_BYTE *)a2 + 17) = 0;
        v2 = *((_QWORD *)this + 8);
      }
      (*(void (**)(_QWORD, ImsOutStream *))(**(_QWORD **)(v2 + 8 * v5) + 40))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *((_QWORD *)this + 8);
    }
    while (v5 < (*((_QWORD *)this + 9) - v2) >> 3);
  }
  return 1;
}

BOOL SipViaHeader::setValueFromString(_QWORD *a1, std::string *a2)
{
  std::string::size_type v4;
  uint64_t v5;
  std::string::size_type v6;
  std::string::size_type size;
  std::string *p_str;
  int data_low;
  int v10;
  uint64_t v12;
  std::string::size_type v13;
  uint64_t v14;
  std::string::size_type v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  std::string::size_type v31;
  std::string::size_type v32;
  std::string *v33;
  int v34;
  int v35;
  std::string v38;
  std::string v39;
  void *__p[2];
  char v41;
  void *v42[2];
  char v43;
  std::string __str;

  v4 = 0;
  memset(&v38, 0, sizeof(v38));
  while (1)
  {
    v4 = ims::nextToken(a2, v4, &v38, 0x2Cu);
    if (v4 == -1)
      break;
    v5 = operator new();
    *(_QWORD *)(v5 + 8) = &off_1E78D08F8;
    *(_QWORD *)(v5 + 48) = 0;
    *(_QWORD *)(v5 + 56) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_WORD *)(v5 + 40) = 0;
    *(_QWORD *)(v5 + 64) = &off_1E78B82D8;
    *(_QWORD *)(v5 + 88) = 0;
    *(_QWORD *)(v5 + 80) = 0;
    *(_QWORD *)(v5 + 72) = v5 + 80;
    *(_WORD *)(v5 + 96) = 256;
    *(_QWORD *)v5 = &off_1E78E28F0;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_OWORD *)(v5 + 120) = 0u;
    *(_QWORD *)(v5 + 136) = 0;
    memset(&v39, 0, sizeof(v39));
    memset(&__str, 0, sizeof(__str));
    v6 = ims::nextToken(&v38, 0, &__str, 0x2Fu);
    if (v6 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(v42, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v14 = ImsLogger::error(ims::_logger, (uint64_t)v42, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Via hop missing protocol name: ", 31);
      *(_BYTE *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v14 + 32))(v14, &v38);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      ims::chomp(&__str, "\r\n\t ", 3);
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __str.__r_.__value_.__l.__size_;
      if (size != 3)
        goto LABEL_13;
      p_str = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      data_low = LOWORD(p_str->__r_.__value_.__l.__data_);
      v10 = p_str->__r_.__value_.__s.__data_[2];
      if (data_low != 18771 || v10 != 80)
      {
LABEL_13:
        std::string::basic_string[abi:ne180100]<0>(v42, "sip.decode");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v12 = ImsLogger::error(ims::_logger, (uint64_t)v42, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Bad protocol name (", 19);
        *(_BYTE *)(v12 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v12 + 32))(v12, &__str);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)") in Via hop: ", 14);
        *(_BYTE *)(v12 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v12 + 32))(v12, &v38);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_14:
        *(_BYTE *)(v12 + 17) = 0;
        if (v41 < 0)
          operator delete(__p[0]);
        if (v43 < 0)
          operator delete(v42[0]);
        v13 = -1;
        goto LABEL_25;
      }
      v31 = ims::nextToken(&v38, v6, &__str, 0x2Fu);
      if (v31 == -1)
      {
        std::string::basic_string[abi:ne180100]<0>(v42, "sip.decode");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v14 = ImsLogger::error(ims::_logger, (uint64_t)v42, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Via hop missing protocol version: ", 34);
        *(_BYTE *)(v14 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v14 + 32))(v14, &v38);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      else
      {
        ims::chomp(&__str, "\r\n\t ", 3);
        v32 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v32 = __str.__r_.__value_.__l.__size_;
        if (v32 != 3)
          goto LABEL_68;
        v33 = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v33 = (std::string *)__str.__r_.__value_.__r.__words[0];
        v34 = LOWORD(v33->__r_.__value_.__l.__data_);
        v35 = v33->__r_.__value_.__s.__data_[2];
        if (v34 != 11826 || v35 != 48)
        {
LABEL_68:
          std::string::basic_string[abi:ne180100]<0>(v42, "sip.decode");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v12 = ImsLogger::error(ims::_logger, (uint64_t)v42, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Bad protocol version (", 22);
          *(_BYTE *)(v12 + 17) = 0;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v12 + 32))(v12, &__str);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)") in Via hop: ", 14);
          *(_BYTE *)(v12 + 17) = 0;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v12 + 32))(v12, &v38);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          goto LABEL_14;
        }
        v13 = ims::nextToken(&v38, v31, &__str, 0x20u);
        if (v13 != -1)
        {
          ims::chomp(&__str, "\r\n\t ", 3);
          std::string::operator=((std::string *)(v5 + 104), &__str);
          goto LABEL_25;
        }
        std::string::basic_string[abi:ne180100]<0>(v42, "sip.decode");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v14 = ImsLogger::error(ims::_logger, (uint64_t)v42, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Via hop missing transport: ", 27);
        *(_BYTE *)(v14 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v14 + 32))(v14, &v38);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
    }
    *(_BYTE *)(v14 + 17) = 0;
    if (v41 < 0)
      operator delete(__p[0]);
    if (v43 < 0)
      operator delete(v42[0]);
    v13 = 0;
LABEL_25:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v13 != -1)
    {
      v15 = ims::nextToken(&v38, v13, &v39, 0x3Bu);
      if (v15 == -1)
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, "sip.decode");
        std::string::basic_string[abi:ne180100]<0>(v42, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v17 = ImsLogger::error(ims::_logger, (uint64_t)&__str, (uint64_t)v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"No host in Via hop: ", 20);
        *(_BYTE *)(v17 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v17 + 32))(v17, &v38);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      else
      {
        ims::chomp(&v39, "\r\n\t ", 3);
        if ((SipHost::fromString(v5 + 8, &v39) & 1) != 0)
        {
          v16 = SipParameterMap::fromString(v5 + 64, &v38, v15, 0);
          goto LABEL_38;
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "sip.decode");
        std::string::basic_string[abi:ne180100]<0>(v42, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v17 = ImsLogger::error(ims::_logger, (uint64_t)&__str, (uint64_t)v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Invalid host in Via hop: ", 25);
        *(_BYTE *)(v17 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v17 + 32))(v17, &v39);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      *(_BYTE *)(v17 + 17) = 0;
      if (v43 < 0)
        operator delete(v42[0]);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    v16 = 0;
LABEL_38:
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if ((v16 & 1) == 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      break;
    }
    v19 = (uint64_t *)a1[9];
    v18 = a1[10];
    if ((unint64_t)v19 >= v18)
    {
      v21 = a1[8];
      v22 = ((uint64_t)v19 - v21) >> 3;
      if ((unint64_t)(v22 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v23 = v18 - v21;
      v24 = v23 >> 2;
      if (v23 >> 2 <= (unint64_t)(v22 + 1))
        v24 = v22 + 1;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
        v25 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
        v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v25);
      else
        v26 = 0;
      v27 = (uint64_t *)(v25 + 8 * v22);
      *v27 = v5;
      v20 = v27 + 1;
      v29 = (char *)a1[8];
      v28 = (char *)a1[9];
      if (v28 != v29)
      {
        do
        {
          v30 = *((_QWORD *)v28 - 1);
          v28 -= 8;
          *--v27 = v30;
        }
        while (v28 != v29);
        v28 = (char *)a1[8];
      }
      a1[8] = v27;
      a1[9] = v20;
      a1[10] = v25 + 8 * v26;
      if (v28)
        operator delete(v28);
    }
    else
    {
      *v19 = v5;
      v20 = v19 + 1;
    }
    a1[9] = v20;
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  return v4 == -1;
}

void sub_1BF14512C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a33 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

BOOL SipViaHeader::mergeHeader(SipViaHeader *this, const SipHeader *lpsrc)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  SipViaHop *v6;
  unint64_t v7;
  SipViaHop **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  SipViaHop **v16;
  char *v17;
  char *v18;
  SipViaHop *v19;

  v4 = v3;
  if (v3 && v3[9] != v3[8])
  {
    v5 = 0;
    do
    {
      v6 = (SipViaHop *)operator new();
      SipViaHop::SipViaHop(v6, *(const SipViaHop **)(v4[8] + 8 * v5));
      v8 = (SipViaHop **)*((_QWORD *)this + 9);
      v7 = *((_QWORD *)this + 10);
      if ((unint64_t)v8 >= v7)
      {
        v10 = *((_QWORD *)this + 8);
        v11 = ((uint64_t)v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        v12 = v7 - v10;
        v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1))
          v13 = v11 + 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v14);
        else
          v15 = 0;
        v16 = (SipViaHop **)(v14 + 8 * v11);
        *v16 = v6;
        v9 = v16 + 1;
        v18 = (char *)*((_QWORD *)this + 8);
        v17 = (char *)*((_QWORD *)this + 9);
        if (v17 != v18)
        {
          do
          {
            v19 = (SipViaHop *)*((_QWORD *)v17 - 1);
            v17 -= 8;
            *--v16 = v19;
          }
          while (v17 != v18);
          v17 = (char *)*((_QWORD *)this + 8);
        }
        *((_QWORD *)this + 8) = v16;
        *((_QWORD *)this + 9) = v9;
        *((_QWORD *)this + 10) = v14 + 8 * v15;
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v8 = v6;
        v9 = v8 + 1;
      }
      *((_QWORD *)this + 9) = v9;
      ++v5;
    }
    while (v5 < (uint64_t)(v4[9] - v4[8]) >> 3);
  }
  return v4 != 0;
}

void sub_1BF145354(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C4006157D98);
  _Unwind_Resume(a1);
}

char *std::vector<SipViaHop *>::insert(char **a1, char *a2, char *a3)
{
  char *v3;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  int64_t v32;
  char *v33;

  v3 = a3;
  v6 = *a1;
  v5 = a1[1];
  v7 = a2 - *a1;
  v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF8];
  v9 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v9)
  {
    v14 = ((v5 - v6) >> 3) + 1;
    if (v14 >> 61)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v16 = v7 >> 3;
    v17 = v9 - (_QWORD)v6;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    if (v18)
    {
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v18);
    }
    else
    {
      v20 = 0;
      v19 = 0;
    }
    v21 = &v20[8 * v16];
    v22 = &v20[8 * v19];
    if (v16 == v19)
    {
      if (v7 < 1)
      {
        if (v6 == a2)
          v24 = 1;
        else
          v24 = v7 >> 2;
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v24);
        v21 = &v25[8 * (v24 >> 2)];
        v22 = &v25[8 * v26];
        if (v20)
          operator delete(v20);
      }
      else
      {
        v23 = v16 + 2;
        if (v16 >= -1)
          v23 = v16 + 1;
        v21 -= 8 * (v23 >> 1);
      }
    }
    *(_QWORD *)v21 = *(_QWORD *)v3;
    v27 = *a1;
    v28 = v21;
    if (*a1 != v8)
    {
      v29 = v8;
      v28 = v21;
      do
      {
        v30 = *((_QWORD *)v29 - 1);
        v29 -= 8;
        *((_QWORD *)v28 - 1) = v30;
        v28 -= 8;
      }
      while (v29 != v27);
    }
    v31 = a1[1];
    v32 = v31 - v8;
    if (v31 != v8)
      memmove(v21 + 8, v8, v31 - v8);
    v33 = *a1;
    *a1 = v28;
    a1[1] = &v21[v32 + 8];
    a1[2] = v22;
    if (v33)
      operator delete(v33);
    return v21;
  }
  else if (v8 == v5)
  {
    *(_QWORD *)v8 = *(_QWORD *)a3;
    a1[1] = v8 + 8;
  }
  else
  {
    v10 = v8 + 8;
    v11 = v5 - 8;
    v12 = a1[1];
    while (v11 < v5)
    {
      v13 = *(_QWORD *)v11;
      v11 += 8;
      *(_QWORD *)v12 = v13;
      v12 += 8;
    }
    a1[1] = v12;
    if (v5 != v10)
      memmove(&v5[-8 * ((v5 - v10) >> 3)], v8, v5 - v10);
    if (v8 <= v3)
      v3 += 8 * (a1[1] > v3);
    *(_QWORD *)v8 = *(_QWORD *)v3;
  }
  return v8;
}

void sub_1BF145578(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

SipViaHop *SipViaHop::clone(SipViaHop *this)
{
  SipViaHop *v2;

  v2 = (SipViaHop *)operator new();
  SipViaHop::SipViaHop(v2, this);
  return v2;
}

void sub_1BF1455D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C4006157D98);
  _Unwind_Resume(a1);
}

uint64_t SipViaHop::transport(SipViaHop *this)
{
  return (uint64_t)this + 104;
}

void SipViaHop::returnAddress(SipViaHop *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = *((_QWORD *)this + 16);
  if (v2)
  {
    v3 = *((_QWORD *)this + 17);
    *a2 = v2;
    a2[1] = v3;
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
  }
  else
  {
    SipHost::ipAddress((SipViaHop *)((char *)this + 8), a2);
  }
}

char **SipViaHeader::clone(const SipViaHop ***this)
{
  char **v2;
  char **v3;
  const SipViaHop **v4;
  const SipViaHop **i;
  const SipViaHop *v6;
  SipViaHop *v7;
  unint64_t v8;
  SipViaHop **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  SipViaHop **v16;
  char *v17;
  char *v18;
  SipViaHop *v19;

  v2 = (char **)operator new();
  SipHeader::SipHeader((SipHeader *)v2, (const SipHeader *)this);
  v2[8] = 0;
  v3 = v2 + 8;
  *v2 = (char *)&off_1E78E2940;
  v2[9] = 0;
  v2[10] = 0;
  v4 = this[8];
  for (i = this[9]; v4 != i; ++v4)
  {
    v6 = *v4;
    v7 = (SipViaHop *)operator new();
    SipViaHop::SipViaHop(v7, v6);
    v9 = (SipViaHop **)v2[9];
    v8 = (unint64_t)v2[10];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v3) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v3;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v14);
      else
        v15 = 0;
      v16 = (SipViaHop **)(v14 + 8 * v11);
      *v16 = v7;
      v10 = (char *)(v16 + 1);
      v18 = v2[8];
      v17 = v2[9];
      if (v17 != v18)
      {
        do
        {
          v19 = (SipViaHop *)*((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v16 = v19;
        }
        while (v17 != v18);
        v17 = *v3;
      }
      v2[8] = (char *)v16;
      v2[9] = v10;
      v2[10] = (char *)(v14 + 8 * v15);
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v9 = v7;
      v10 = (char *)(v9 + 1);
    }
    v2[9] = v10;
  }
  return v2;
}

void sub_1BF145794(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1093C40888A45CFLL);
  _Unwind_Resume(a1);
}

uint64_t SipViaHeader::allowsDuplicates(SipViaHeader *this)
{
  return 1;
}

uint64_t SipViaHeader::allowsMerging(SipViaHeader *this)
{
  return 1;
}

void BambiAccessBarring::BambiAccessBarring(BambiAccessBarring *this)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "bambi");
  ImsLogContainer::ImsLogContainer((uint64_t)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_1E78E29F0;
  *((_WORD *)this + 52) = 100;
  *((_DWORD *)this + 27) = 0;
  *((_BYTE *)this + 112) = 0;
  *((_DWORD *)this + 29) = 0;
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 188) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 24) = (char *)this + 200;
}

void sub_1BF1458AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BambiAccessBarring::~BambiAccessBarring(BambiAccessBarring *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::string __p;

  *(_QWORD *)this = &off_1E78E29F0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
      v4 = *((_QWORD *)this + 18);
    else
      v4 = 0;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v5)
  {
    v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      v7 = v6;
      v8 = *((_QWORD *)this + 21);
      if (v8 && v4)
      {
        if (*(char *)(v8 + 4159) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v8 + 4136), *(_QWORD *)(v8 + 4144));
        else
          __p = *(std::string *)(v8 + 4136);
        (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v4 + 40))(v4, &__p, 4);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*((_QWORD **)this + 25));
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  BambiAccessBarring::~BambiAccessBarring(this);
  JUMPOUT(0x1C3B87100);
}

void BambiAccessBarring::setStack(BambiAccessBarring *a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::string __p;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v22 = 0;
  v23 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 19);
  if (v4 && (v23 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v5 = *((_QWORD *)a1 + 18);
    v22 = v5;
  }
  else
  {
    v5 = 0;
  }
  v20 = 0;
  v21 = 0;
  v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 22);
  if (v6)
  {
    v7 = std::__shared_weak_count::lock(v6);
    v21 = v7;
    if (v7)
    {
      v8 = *((_QWORD *)a1 + 21);
      v20 = v8;
      if (v8)
      {
        if (v5)
        {
          if (*(char *)(v8 + 4159) < 0)
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v8 + 4136), *(_QWORD *)(v8 + 4144));
          else
            __p = *(std::string *)(v8 + 4136);
          (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v5 + 40))(v5, &__p, 4);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  else
  {
    v7 = 0;
  }
  v10 = *a2;
  v9 = a2[1];
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)a1 + 22);
  *((_QWORD *)a1 + 21) = v10;
  *((_QWORD *)a1 + 22) = v9;
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  if (*a2)
    *((_QWORD *)a1 + 20) = *(_QWORD *)(*a2 + 136);
  BambiAccessBarring::registerForUac(a1);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1BF145C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void BambiAccessBarring::setDelegate(BambiAccessBarring *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 18) = v4;
  *((_QWORD *)this + 19) = v3;
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  BambiAccessBarring::registerForUac(this);
}

uint64_t BambiAccessBarring::alwaysListen(BambiAccessBarring *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  SipStack *v5;
  ImsPrefs *v6;
  void **RegisterSmsWhenAccessBarringZeroKey;
  void *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (SipStack *)*((_QWORD *)this + 21);
  if (v5)
  {
    v6 = (ImsPrefs *)SipStack::prefs(v5);
    RegisterSmsWhenAccessBarringZeroKey = (void **)ImsPrefs::getRegisterSmsWhenAccessBarringZeroKey(v6);
    v8 = ImsPrefs::prefWithKey(v6, RegisterSmsWhenAccessBarringZeroKey);
    if (v8)
      v9 = (*(uint64_t (**)(void *))(*(_QWORD *)v8 + 40))(v8);
    else
      v9 = *((_BYTE *)RegisterSmsWhenAccessBarringZeroKey + 57) != 0;
  }
  else
  {
    v9 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v9;
}

void sub_1BF145D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiAccessBarring::updateRegistrationForBarring(BambiAccessBarring *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  std::string __p;
  void *v25[2];
  void *v26[2];
  __int128 v27;
  __int128 v28;
  void *v29[2];
  __int128 v30;
  void *v31[2];
  __int128 v32;
  __int128 v33;
  void *v34[2];
  void *v35[2];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;

  if (!*((_QWORD *)this + 20))
  {
    v12 = (*(uint64_t (**)(BambiAccessBarring *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(BambiAccessBarring *, uint64_t))(*(_QWORD *)this + 16))(this, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Cannot update registration due to barring indication: no BambiClient", 68);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    return;
  }
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v40 = v3;
    if (v3)
    {
      v4 = v3;
      v5 = *((_QWORD *)this + 21);
      v39 = v5;
      if (!v5)
      {
LABEL_45:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      if (!*((_WORD *)this + 52) && (*((_BYTE *)this + 116) & 1) != 0)
      {
        v38 = 0;
        v36 = 0u;
        v37 = 0u;
        *(_OWORD *)v34 = 0u;
        *(_OWORD *)v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        *(_OWORD *)v31 = 0u;
        v28 = 0u;
        *(_OWORD *)v29 = 0u;
        *(_OWORD *)v26 = 0u;
        v27 = 0u;
        *(_OWORD *)v25 = 0u;
        if ((SipStack::allRegisteredServices((SipStack *)v5) & 4) == 0 || (*((_BYTE *)this + 116) & 4) != 0)
        {
          v16 = (*(uint64_t (**)(BambiAccessBarring *))(*(_QWORD *)this + 64))(this);
          (*(void (**)(BambiAccessBarring *, uint64_t))(*(_QWORD *)this + 16))(this, v16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"barring IMS services for both voice and sms", 43);
          *(_BYTE *)(v16 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v16 + 17) = 0;
        }
        else if (BambiAccessBarring::alwaysListen(this))
        {
          v13 = (*(uint64_t (**)(BambiAccessBarring *))(*(_QWORD *)this + 64))(this);
          (*(void (**)(BambiAccessBarring *, uint64_t))(*(_QWORD *)this + 16))(this, v13);
          v14 = (_BYTE *)ImsOutStream::operator<<(v13, "registering for SMS only due to access barring change");
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v14[17] = 0;
          v15 = (_QWORD *)*((_QWORD *)this + 20);
          if (*(char *)(v5 + 4159) < 0)
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v5 + 4136), *(_QWORD *)(v5 + 4144));
          else
            __p = *(std::string *)(v5 + 4136);
          std::string::basic_string[abi:ne180100]<0>(v22, "");
          std::string::basic_string[abi:ne180100]<0>(v20, "");
          BambiClient::updateRegisteredServices(v15, (unsigned __int8 *)&__p, 4, (uint64_t)v25, (uint64_t)v22, (uint64_t)v20, 0);
LABEL_27:
          if (v21 < 0)
            operator delete(v20[0]);
          if (v23 < 0)
            operator delete(v22[0]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        v38 = 0;
        v36 = 0u;
        v37 = 0u;
        *(_OWORD *)v34 = 0u;
        *(_OWORD *)v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        *(_OWORD *)v31 = 0u;
        v28 = 0u;
        *(_OWORD *)v29 = 0u;
        *(_OWORD *)v26 = 0u;
        v27 = 0u;
        *(_OWORD *)v25 = 0u;
        v6 = SipStack::configuredServices((SipStack *)v5);
        if (SipStack::registeredForSms((SipStack *)v5))
        {
          v7 = SipStack::registeredForVoice((SipStack *)v5);
          v8 = (v6 & 1) != 0 ? v7 : 1;
          if ((v8 & 1) == 0)
          {
            v9 = (*(uint64_t (**)(BambiAccessBarring *))(*(_QWORD *)this + 64))(this);
            (*(void (**)(BambiAccessBarring *, uint64_t))(*(_QWORD *)this + 16))(this, v9);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"registering for ", 16);
            *(_BYTE *)(v9 + 17) = 0;
            v10 = SipStack::configuredServices((SipStack *)v5);
            std::string::basic_string[abi:ne180100]<0>(v22, ",");
            BambiServices::namesForServiceMask(v10, (uint64_t)v22, &__p);
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v9 + 32))(v9, &__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" due to access barring change", 29);
            *(_BYTE *)(v9 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v9 + 17) = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v23 < 0)
              operator delete(v22[0]);
            v11 = (_QWORD *)*((_QWORD *)this + 20);
            if (*(char *)(v5 + 4159) < 0)
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v5 + 4136), *(_QWORD *)(v5 + 4144));
            else
              __p = *(std::string *)(v5 + 4136);
            v17 = SipStack::configuredServices((SipStack *)v5);
            std::string::basic_string[abi:ne180100]<0>(v22, "");
            std::string::basic_string[abi:ne180100]<0>(v20, "");
            BambiClient::updateRegisteredServices(v11, (unsigned __int8 *)&__p, v17, (uint64_t)v25, (uint64_t)v22, (uint64_t)v20, 0);
            goto LABEL_27;
          }
        }
      }
      if (SHIBYTE(v36) < 0)
        operator delete(v35[1]);
      if (SHIBYTE(v35[0]) < 0)
        operator delete(v34[0]);
      if (SBYTE7(v32) < 0)
        operator delete(v31[0]);
      if (SHIBYTE(v30) < 0)
        operator delete(v29[1]);
      if (SHIBYTE(v27) < 0)
        operator delete(v26[1]);
      if (SHIBYTE(v26[0]) < 0)
        operator delete(v25[0]);
      goto LABEL_45;
    }
  }
}

void sub_1BF146248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28)
{
  uint64_t v28;

  ims::AccessNetworks::~AccessNetworks(&a28);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v28 - 64);
  _Unwind_Resume(a1);
}

void BambiAccessBarring::updateVoiceInfo(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, ImsResult *a3@<X8>)
{
  uint64_t v6;
  int v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  SipStack *v10;
  ImsPrefs *v11;
  void **HonorSimAccessClassBeforeBarringKey;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  ImsResult *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  BambiClient *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::string __p;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  SipStack *v34;
  std::__shared_weak_count *v35;
  void *v36[2];
  char v37;
  std::string v38;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"received update voice barring factor: ", 38);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)", time: ", 8);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)", SpecialAccessClass: ", 22);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)", services : ", 13);
  *(_BYTE *)(v6 + 17) = 0;
  v7 = *((_DWORD *)a2 + 3);
  std::string::basic_string[abi:ne180100]<0>(v36, ",");
  BambiServices::namesForServiceMask(v7, (uint64_t)v36, &v38);
  LoggableString::LoggableString(&__p, &v38);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 40))(v6, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (v37 < 0)
    operator delete(v36[0]);
  v34 = 0;
  v35 = 0;
  v8 = *(std::__shared_weak_count **)(a1 + 176);
  if (!v8)
  {
    v9 = 0;
    goto LABEL_11;
  }
  v9 = std::__shared_weak_count::lock(v8);
  v35 = v9;
  if (!v9)
  {
LABEL_11:
    v10 = 0;
    goto LABEL_12;
  }
  v10 = *(SipStack **)(a1 + 168);
  v34 = v10;
LABEL_12:
  if (TelephonyRadiosGetRadioVendor() != 1 || !v10)
    goto LABEL_23;
  v11 = (ImsPrefs *)SipStack::prefs(v10);
  HonorSimAccessClassBeforeBarringKey = (void **)ImsPrefs::getHonorSimAccessClassBeforeBarringKey(v11);
  v13 = ImsPrefs::prefWithKey(v11, HonorSimAccessClassBeforeBarringKey);
  if (v13)
  {
    if (!(*(unsigned int (**)(void *))(*(_QWORD *)v13 + 40))(v13))
      goto LABEL_23;
  }
  else if (!*((_BYTE *)HonorSimAccessClassBeforeBarringKey + 57))
  {
    goto LABEL_23;
  }
  v14 = *((unsigned __int8 *)a2 + 8);
  v15 = *(_DWORD *)(a1 + 184);
  if (!v15)
  {
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"SIM access class is zero, all barring indications will be honored", 65);
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
  }
  if (v15 >= 0x800 && ((v15 >> 11) & (__rbit32(v14) >> 27)) != v15 >> 11)
  {
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 1073741825;
    v17 = ImsResult::operator<<<char [52]>((uint64_t)&__p, "Barring indication not intended for our sim class (");
    v18 = ImsResult::operator<<<unsigned int>(v17);
    v19 = (ImsResult *)ImsResult::operator<<<char [2]>(v18, ")");
    ImsLogContainer::logResult((ImsLogContainer *)a1, v19);
    ImsResult::ImsResult(a3, v19);
    goto LABEL_47;
  }
LABEL_23:
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  *((_QWORD *)a3 + 7) = 0;
  *((_QWORD *)a3 + 8) = 0;
  *((_QWORD *)a3 + 5) = 0;
  *((_QWORD *)a3 + 6) = 0;
  *(_QWORD *)a3 = &off_1E78B7238;
  *((_QWORD *)a3 + 1) = &_bambiDomain;
  *((_QWORD *)a3 + 4) = 0;
  if (!*((_BYTE *)a2 + 16))
  {
    *a2 = 100;
    *((_DWORD *)a2 + 1) = 0;
    *((_BYTE *)a2 + 8) = 0;
    *((_DWORD *)a2 + 3) = 1;
    *((_BYTE *)a2 + 16) = 1;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 1073741825;
    v20 = ImsResult::operator<<<char [15]>((uint64_t)&__p, "invalid factor");
    ImsResult::operator=((uint64_t)a3, v20);
    ImsResult::~ImsResult((ImsResult *)&__p);
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"Received AccessBarring information is invalid, but letting it through", 69);
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v21 + 17) = 0;
  }
  v22 = *a2;
  if (v22 == *(unsigned __int16 *)(a1 + 104)
    && *((_DWORD *)a2 + 3) == *(_DWORD *)(a1 + 116)
    && *((_DWORD *)a2 + 1) == *(_DWORD *)(a1 + 108)
    && *((unsigned __int8 *)a2 + 8) == *(unsigned __int8 *)(a1 + 112))
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"Barring ignored, no change in barring information", 49);
    *(_BYTE *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_37;
  }
  if (!*(_BYTE *)(a1 + 136))
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"Barring ignored, non-LTE RAT", 28);
    *(_BYTE *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_37:
    *(_BYTE *)(v23 + 17) = 0;
    if (!v9)
      return;
    goto LABEL_48;
  }
  if ((unsigned __int16 *)(a1 + 104) != a2)
  {
    *(_WORD *)(a1 + 104) = v22;
    *(_DWORD *)(a1 + 108) = *((_DWORD *)a2 + 1);
    *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 8);
    *(_DWORD *)(a1 + 116) = *((_DWORD *)a2 + 3);
    *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 16);
  }
  *(_BYTE *)(a1 + 188) = 0;
  v24 = *(BambiClient **)(a1 + 160);
  if (v24)
  {
    if (BambiClient::callCount(v24))
    {
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"not updating registration state due to barring factor change while in active call", 81);
      *(_BYTE *)(v25 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v25 + 17) = 0;
      *(_BYTE *)(a1 + 188) = 1;
    }
    else
    {
      BambiAccessBarring::updateRegistrationForBarring((BambiAccessBarring *)a1);
    }
  }
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"updated voice barring factor: ", 30);
  *(_BYTE *)(v26 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v26 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)", time: ", 8);
  *(_BYTE *)(v26 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v26 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)", services : ", 13);
  *(_BYTE *)(v26 + 17) = 0;
  v27 = *(_DWORD *)(a1 + 116);
  std::string::basic_string[abi:ne180100]<0>(v36, ",");
  BambiServices::namesForServiceMask(v27, (uint64_t)v36, &v38);
  LoggableString::LoggableString(&__p, &v38);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v26 + 40))(v26, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v26 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (v37 < 0)
    operator delete(v36[0]);
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
  LODWORD(__p.__r_.__value_.__r.__words[2]) = 0;
  ImsResult::operator=((uint64_t)a3, (uint64_t)&__p);
LABEL_47:
  ImsResult::~ImsResult((ImsResult *)&__p);
  if (!v9)
    return;
LABEL_48:
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v29 = __ldaxr(p_shared_owners);
  while (__stlxr(v29 - 1, p_shared_owners));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_1BF146A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  ImsResult *v29;

  ImsResult::~ImsResult((ImsResult *)&a10);
  ImsResult::~ImsResult(v29);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<unsigned int>(uint64_t a1)
{
  ImsStringOutStream *v2;

  v2 = *(ImsStringOutStream **)(a1 + 24);
  if (!v2)
  {
    v2 = (ImsStringOutStream *)operator new();
    ImsStringOutStream::ImsStringOutStream(v2, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v2;
  }
  std::ostream::operator<<();
  *((_BYTE *)v2 + 17) = 0;
  return a1;
}

void sub_1BF146B60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [2]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BF146C04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t BambiAccessBarring::isServiceBarred(uint64_t **a1, int a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  int v7;
  BOOL v8;
  uint64_t **v9;
  char *v10;
  time_t v11;
  time_t v12;
  uint64_t v13;
  tm *v14;
  uint64_t v15;
  _QWORD *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  size_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  tm *v27;
  std::string __p;
  std::string v30;

  v4 = a1[25];
  if (v4)
  {
    v5 = a1 + 24;
    v6 = (uint64_t *)(a1 + 25);
    do
    {
      v7 = *((_DWORD *)v4 + 8);
      v8 = v7 < a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v4;
      else
        v9 = (uint64_t **)(v4 + 1);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != (uint64_t *)(a1 + 25) && *((_DWORD *)v6 + 8) <= a2)
    {
      if (std::chrono::system_clock::now().__d_.__rep_ / 1000 <= v6[6] + *((unsigned int *)v6 + 10))
      {
        v21 = ((uint64_t (*)(uint64_t **))(*a1)[8])(a1);
        ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"UAC barring is in effect for service ", 37);
        *(_BYTE *)(v21 + 17) = 0;
        v22 = ims::Services::nameForService(a2);
        v23 = strlen(v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)v22, v23);
        *(_BYTE *)(v21 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v21 + 17) = 0;
        return 1;
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v5, v6);
      operator delete(v6);
    }
  }
  if (!*((_BYTE *)a1 + 139))
  {
    v15 = ((uint64_t (*)(uint64_t **))(*a1)[8])(a1);
    ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v15);
    v16 = *(_QWORD **)(v15 + 8);
    v17 = "access barring is not enabled";
    v18 = 29;
LABEL_21:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v19 = 0;
    *(_BYTE *)(v15 + 17) = 0;
    return v19;
  }
  if (!*((_BYTE *)a1 + 138))
  {
    v15 = ((uint64_t (*)(uint64_t **))(*a1)[8])(a1);
    ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v15);
    v16 = *(_QWORD **)(v15 + 8);
    v17 = "not listening for access barring";
    v18 = 32;
    goto LABEL_21;
  }
  memset(&v30, 0, sizeof(v30));
  v10 = (char *)ims::Services::nameForService(a2);
  std::string::basic_string[abi:ne180100]<0>(&v30, v10);
  if ((*((_DWORD *)a1 + 29) & a2) == 0)
  {
    v20 = ((uint64_t (*)(uint64_t **))(*a1)[8])(a1);
    ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"service ", 8);
    *(_BYTE *)(v20 + 17) = 0;
    LoggableString::LoggableString(&__p, &v30);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v20 + 40))(v20, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)" not barred", 11);
    *(_BYTE *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_28;
  }
  v11 = time(0);
  v12 = v11;
  if (a2 != 1 || v11 >= (uint64_t)a1[16])
  {
    if (*((_DWORD *)a1 + 27))
    {
      if (*((unsigned __int16 *)a1 + 52) <= (unsigned __int16)((int)random() % 100))
      {
        v24 = random();
        HIDWORD(v25) = 1071854387;
        LODWORD(v25) = *((_DWORD *)a1 + 27);
        a1[16] = (uint64_t *)(v12 + (((double)((v24 + 1) % 100) / 100.0 * 0.6 + 0.7) * (double)v25));
        v26 = ((uint64_t (*)(uint64_t **))(*a1)[4])(a1);
        ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"barring ", 8);
        *(_BYTE *)(v26 + 17) = 0;
        LoggableString::LoggableString(&__p, &v30);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v26 + 40))(v26, &__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)" call (barringFactor = ", 23);
        *(_BYTE *)(v26 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v26 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)", rand3 = ", 10);
        *(_BYTE *)(v26 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v26 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)", rand4 = ", 10);
        *(_BYTE *)(v26 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v26 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)", Ty = ", 7);
        *(_BYTE *)(v26 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v26 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)")", 1);
        *(_BYTE *)(v26 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v26 + 17) = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v13 = ((uint64_t (*)(uint64_t **))(*a1)[4])(a1);
        ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"access barring is in effect until ", 34);
        *(_BYTE *)(v13 + 17) = 0;
        ims::formatTimeAndIntervalFromNow((ims *)a1[16], v13, v27);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        goto LABEL_34;
      }
      v20 = ((uint64_t (*)(uint64_t **))(*a1)[8])(a1);
      ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"allowing ", 9);
      *(_BYTE *)(v20 + 17) = 0;
      LoggableString::LoggableString(&__p, &v30);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v20 + 40))(v20, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)" call (barringFactor = ", 23);
      *(_BYTE *)(v20 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v20 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)", rand3 = ", 10);
      *(_BYTE *)(v20 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v20 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)")", 1);
      *(_BYTE *)(v20 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      v20 = ((uint64_t (*)(uint64_t **))(*a1)[8])(a1);
      ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"no ", 3);
      *(_BYTE *)(v20 + 17) = 0;
      LoggableString::LoggableString(&__p, &v30);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v20 + 40))(v20, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)" service access barring in effect", 33);
      *(_BYTE *)(v20 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
LABEL_28:
    *(_BYTE *)(v20 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v19 = 0;
    goto LABEL_35;
  }
  v13 = ((uint64_t (*)(uint64_t **))(*a1)[4])(a1);
  ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"access barring is still in effect until ", 40);
  *(_BYTE *)(v13 + 17) = 0;
  ims::formatTimeAndIntervalFromNow((ims *)a1[16], v13, v14);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_34:
  *(_BYTE *)(v13 + 17) = 0;
  v19 = 1;
LABEL_35:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  return v19;
}

void sub_1BF147378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BambiAccessBarring::isVoiceRegistrationBarred(BambiAccessBarring *this)
{
  uint64_t v2;
  _QWORD *v3;
  const char *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (*((_BYTE *)this + 139))
  {
    if (*((_BYTE *)this + 138))
    {
      if (*((_BYTE *)this + 136))
      {
        if ((*((_BYTE *)this + 116) & 1) != 0)
        {
          v6 = *((unsigned __int16 *)this + 52);
          v2 = (*(uint64_t (**)(BambiAccessBarring *))(*(_QWORD *)this + 64))(this);
          (*(void (**)(BambiAccessBarring *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
          v3 = *(_QWORD **)(v2 + 8);
          if (!v6)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"isVoiceRegistrationBarred: zero barring factor for voice, service barred", 72);
            v7 = 1;
            goto LABEL_12;
          }
          v4 = "isVoiceRegistrationBarred: non-zero barring factor";
          v5 = 50;
        }
        else
        {
          v2 = (*(uint64_t (**)(BambiAccessBarring *))(*(_QWORD *)this + 64))(this);
          (*(void (**)(BambiAccessBarring *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
          v3 = *(_QWORD **)(v2 + 8);
          v4 = "isVoiceRegistrationBarred: voice service not barred";
          v5 = 51;
        }
      }
      else
      {
        v2 = (*(uint64_t (**)(BambiAccessBarring *))(*(_QWORD *)this + 64))(this);
        (*(void (**)(BambiAccessBarring *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
        v3 = *(_QWORD **)(v2 + 8);
        v4 = "isVoiceRegistrationBarred: not on LTE";
        v5 = 37;
      }
    }
    else
    {
      v2 = (*(uint64_t (**)(BambiAccessBarring *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(BambiAccessBarring *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
      v3 = *(_QWORD **)(v2 + 8);
      v4 = "isVoiceRegistrationBarred: not listening for access barring";
      v5 = 59;
    }
  }
  else
  {
    v2 = (*(uint64_t (**)(BambiAccessBarring *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(BambiAccessBarring *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
    v3 = *(_QWORD **)(v2 + 8);
    v4 = "isVoiceRegistrationBarred: access barring is not enabled";
    v5 = 56;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
  v7 = 0;
LABEL_12:
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  return v7;
}

uint64_t BambiAccessBarring::clear(BambiAccessBarring *this)
{
  uint64_t v2;
  uint64_t result;

  *((_WORD *)this + 52) = 100;
  *((_DWORD *)this + 27) = 0;
  *((_BYTE *)this + 112) = 0;
  *((_BYTE *)this + 120) = 0;
  *((_DWORD *)this + 29) = 0;
  *((_QWORD *)this + 16) = 0;
  v2 = (*(uint64_t (**)(BambiAccessBarring *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(BambiAccessBarring *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"clearing access barring values", 30);
  *(_BYTE *)(v2 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  return result;
}

uint64_t BambiAccessBarring::reset(BambiAccessBarring *this)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(BambiAccessBarring *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(BambiAccessBarring *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"resetting settings", 18);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  *((_DWORD *)this + 34) = 0;
  return BambiAccessBarring::clear(this);
}

void BambiAccessBarring::checkFlags(BambiAccessBarring *this)
{
  int v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  ImsPrefs *v12;
  const ImsPrefsKeyEnum *AccessBarringTypeKey;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::string __p;
  std::string v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  v2 = *((unsigned __int8 *)this + 139);
  if (*((_BYTE *)this + 139))
  {
    if ((BambiAccessBarring::alwaysListen(this) & 1) != 0)
    {
      v3 = (char *)this + 138;
      if (*((_BYTE *)this + 138))
        return;
      *v3 = 1;
LABEL_9:
      v4 = (*(uint64_t (**)(BambiAccessBarring *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(BambiAccessBarring *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"should listen for access barring changes", 40);
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v4 + 17) = 0;
      goto LABEL_11;
    }
    v2 = *((unsigned __int8 *)this + 137);
    if (*((_BYTE *)this + 137))
      v2 = *((_BYTE *)this + 136) != 0;
  }
  v3 = (char *)this + 138;
  if (*((unsigned __int8 *)this + 138) == v2)
    return;
  *v3 = v2;
  if (v2)
    goto LABEL_9;
  v5 = (*(uint64_t (**)(BambiAccessBarring *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(BambiAccessBarring *, uint64_t))(*(_QWORD *)this + 16))(this, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"shouldn't listen for access barring changes", 43);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  BambiAccessBarring::clear(this);
LABEL_11:
  v26 = 0;
  v27 = 0;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v6 && (v27 = std::__shared_weak_count::lock(v6)) != 0)
  {
    v7 = *((_QWORD *)this + 18);
    v26 = v7;
  }
  else
  {
    v7 = 0;
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    v25 = v9;
    if (v9)
    {
      v10 = v9;
      v11 = *((_QWORD *)this + 21);
      v24 = v11;
      if (v7 && v11)
      {
        memset(&v23, 0, sizeof(v23));
        v12 = (ImsPrefs *)SipStack::prefs((SipStack *)v11);
        AccessBarringTypeKey = (const ImsPrefsKeyEnum *)ImsPrefs::getAccessBarringTypeKey(v12);
        ImsPrefs::stringValue(v12, AccessBarringTypeKey, &v23);
        if (*v3)
        {
          v14 = *(unsigned int *)(v11 + 4076);
          if (*(char *)(v11 + 4159) < 0)
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v11 + 4136), *(_QWORD *)(v11 + 4144));
          else
            __p = *(std::string *)(v11 + 4136);
          v15 = nas::barringTypeFromString((uint64_t)&v23);
          (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, &__p, v14, v15);
        }
        else
        {
          if (*(char *)(v11 + 4159) < 0)
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v11 + 4136), *(_QWORD *)(v11 + 4144));
          else
            __p = *(std::string *)(v11 + 4136);
          v16 = nas::barringTypeFromString((uint64_t)&v23);
          (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v7 + 32))(v7, &__p, v16);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v23.__r_.__value_.__l.__data_);
      }
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  v19 = v27;
  if (v27)
  {
    v20 = (unint64_t *)&v27->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1BF1479B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void BambiAccessBarring::registrationStateChanged(BambiAccessBarring *this, int a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;

  if (*((unsigned __int8 *)this + 137) != a2)
  {
    *((_BYTE *)this + 137) = a2;
    v4 = (*(uint64_t (**)(BambiAccessBarring *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(BambiAccessBarring *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
    if (a2)
      v5 = "";
    else
      v5 = "not ";
    if (a2)
      v6 = 0;
    else
      v6 = 4;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)v5, v6);
    *(_BYTE *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"registered", 10);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    BambiAccessBarring::checkFlags(this);
  }
}

void BambiAccessBarring::allCallsEnded(BambiAccessBarring *this)
{
  uint64_t v2;

  if (*((_BYTE *)this + 188))
  {
    v2 = (*(uint64_t (**)(BambiAccessBarring *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(BambiAccessBarring *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"All calls have ended, update registration for deferred barring indication", 73);
    *(_BYTE *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v2 + 17) = 0;
    *((_BYTE *)this + 188) = 0;
    BambiAccessBarring::updateRegistrationForBarring(this);
  }
}

void BambiAccessBarring::setEnabled(BambiAccessBarring *this, int a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;

  if (*((unsigned __int8 *)this + 139) != a2)
  {
    *((_BYTE *)this + 139) = a2;
    v4 = (*(uint64_t (**)(BambiAccessBarring *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(BambiAccessBarring *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"access barring is ", 18);
    *(_BYTE *)(v4 + 17) = 0;
    if (a2)
      v5 = "";
    else
      v5 = "not ";
    if (a2)
      v6 = 0;
    else
      v6 = 4;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)v5, v6);
    *(_BYTE *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"enabled", 7);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    BambiAccessBarring::checkFlags(this);
  }
}

uint64_t BambiAccessBarring::updateSimAccessClass(BambiAccessBarring *this, const unsigned int *a2)
{
  uint64_t v3;
  uint64_t result;

  *((_DWORD *)this + 46) = *a2;
  v3 = (*(uint64_t (**)(BambiAccessBarring *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(BambiAccessBarring *, uint64_t))(*(_QWORD *)this + 16))(this, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Our sim class is ", 17);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  return result;
}

uint64_t **BambiAccessBarring::setUacBarring(uint64_t a1, int a2, int a3)
{
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v5;
  uint64_t **result;
  int v7;
  int *v8;

  v7 = a2;
  if (!a3)
    return (uint64_t **)std::__tree<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::__map_value_compare<ims::Services::ServiceType,std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::less<ims::Services::ServiceType>,true>,std::allocator<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>>>::__erase_unique<ims::Services::ServiceType>(a1 + 192, &v7);
  v5 = std::chrono::system_clock::now().__d_.__rep_ / 1000;
  v8 = &v7;
  result = std::__tree<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::__map_value_compare<ims::Services::ServiceType,std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::less<ims::Services::ServiceType>,true>,std::allocator<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>>>::__emplace_unique_key_args<ims::Services::ServiceType,std::piecewise_construct_t const&,std::tuple<ims::Services::ServiceType const&>,std::tuple<>>((uint64_t **)(a1 + 192), &v7, (uint64_t)&std::piecewise_construct, &v8);
  *((_DWORD *)result + 10) = a3;
  *((_DWORD *)result + 11) = 0;
  result[6] = (uint64_t *)v5;
  return result;
}

_QWORD *BambiAccessBarring::logPrefix(BambiAccessBarring *this, ImsOutStream *a2)
{
  _QWORD *result;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"AccessBarring: ", 15);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

uint64_t std::__tree<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::__map_value_compare<ims::Services::ServiceType,std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::less<ims::Services::ServiceType>,true>,std::allocator<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>>>::__erase_unique<ims::Services::ServiceType>(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 < v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (!v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32))
    return 0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

uint64_t **std::__tree<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::__map_value_compare<ims::Services::ServiceType,std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::less<ims::Services::ServiceType>,true>,std::allocator<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>>>::__emplace_unique_key_args<ims::Services::ServiceType,std::piecewise_construct_t const&,std::tuple<ims::Services::ServiceType const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x38uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = 0;
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void SDPMediaCrypto::value(SDPMediaCrypto *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::string *v10;
  std::string::size_type size;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _OWORD v15[4];
  void *__p[2];
  __int128 v17;
  __int128 v18;
  _OWORD v19[9];
  uint64_t v20;
  std::string v21;
  char v22;

  if (*((_BYTE *)this + 72))
  {
    memset(&v21, 0, sizeof(v21));
    if ((base64Encode(*((_QWORD *)this + 6), *((_QWORD *)this + 7) - *((_QWORD *)this + 6), &v21) & 1) != 0)
    {
      v20 = 0;
      v18 = 0u;
      memset(v19, 0, sizeof(v19));
      *(_OWORD *)__p = 0u;
      v17 = 0u;
      memset(v15, 0, sizeof(v15));
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
      v4 = (_QWORD *)std::ostream::operator<<();
      v22 = 32;
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v22, 1);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"AES_CM_128_HMAC_SHA1_80", 23);
      v22 = 32;
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v22, 1);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"inline", 6);
      v22 = 58;
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v22, 1);
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v21;
      else
        v10 = (std::string *)v21.__r_.__value_.__r.__words[0];
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
      else
        size = v21.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, size);
      if (!*((_BYTE *)this + 73))
      {
        v22 = 32;
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v22, 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"UNENCRYPTED_SRTP", 16);
      }
      if (!*((_BYTE *)this + 74))
      {
        v22 = 32;
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v22, 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"UNENCRYPTED_SRTCP", 17);
      }
      if (!*((_BYTE *)this + 75))
      {
        v22 = 32;
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v22, 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"UNAUTHENTICATED_SRTP", 20);
      }
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15 + 8, a2);
      *(_QWORD *)&v15[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v15 + *(_QWORD *)(*(_QWORD *)&v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      *((_QWORD *)&v15[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
      if (SHIBYTE(v17) < 0)
        operator delete(__p[1]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C3B8707C](v19);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(a2, "");
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

void sub_1BF148138(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 41) < 0)
    operator delete(*(void **)(v1 - 64));
  _Unwind_Resume(exception_object);
}

BOOL SDPMediaCrypto::valid(SDPMediaCrypto *this)
{
  return *((_BYTE *)this + 8) && *((_BYTE *)this + 72) != 0;
}

void SipConnectionUser::setTransport(uint64_t a1, _QWORD *a2, int a3)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v24 = 0;
  v25 = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
  {
    v7 = std::__shared_weak_count::lock(v6);
    v25 = v7;
    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 8);
      v24 = v8;
      goto LABEL_6;
    }
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
LABEL_6:
  v9 = *a2;
  if (v8 != *a2)
  {
    v10 = a2[1];
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 16);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = *(std::__shared_weak_count **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v10;
    if (v13)
      std::__shared_weak_count::__release_weak(v13);
    if (a3)
    {
      if (*a2)
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 80))(*a2, a1))
        {
          std::string::basic_string[abi:ne180100]<0>(v22, "sip.txn");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v14 = ImsLogger::debug(ims::_logger, (uint64_t)v22, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"added connection user to ", 25);
          *(_BYTE *)(v14 + 17) = 0;
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 104))(*a2, v14);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v14 + 17) = 0;
          if (v21 < 0)
            operator delete(__p[0]);
          if (v23 < 0)
            operator delete(v22[0]);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v22, "sip.txn");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v15 = ImsLogger::debug(ims::_logger, (uint64_t)v22, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Failed to add connection user to ", 33);
          *(_BYTE *)(v15 + 17) = 0;
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 104))(*a2, v15);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v15 + 17) = 0;
          if (v21 < 0)
            operator delete(__p[0]);
          if (v23 < 0)
            operator delete(v22[0]);
          v16 = *(std::__shared_weak_count **)(a1 + 16);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          if (v16)
            std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (v8)
      {
        std::string::basic_string[abi:ne180100]<0>(v22, "sip.txn");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v17 = ImsLogger::debug(ims::_logger, (uint64_t)v22, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"removing connection user from ", 30);
        *(_BYTE *)(v17 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 104))(v8, v17);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v17 + 17) = 0;
        if (v21 < 0)
          operator delete(__p[0]);
        if (v23 < 0)
          operator delete(v22[0]);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 88))(v8, a1);
      }
    }
  }
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1BF1484F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void SipConnectionUser::~SipConnectionUser(SipConnectionUser *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  *(_QWORD *)this = off_1E78E2AC0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (!v3)
      goto LABEL_14;
    v4 = v3;
    v5 = *((_QWORD *)this + 1);
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (v7)
    {
      if (!v5)
      {
LABEL_14:
        v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
        if (v11)
          std::__shared_weak_count::__release_weak(v11);
        return;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v4);
      if (!v5)
        goto LABEL_14;
    }
    v12 = 0;
    v13 = 0;
    (*(void (**)(SipConnectionUser *, uint64_t *, uint64_t))(*(_QWORD *)this + 48))(this, &v12, 1);
    v8 = v13;
    if (v13)
    {
      v9 = (unint64_t *)&v13->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    goto LABEL_14;
  }
}

uint64_t SipTransaction::SipTransaction(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const std::string *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  SipUserAgent *v19;
  std::string __p;

  *(_QWORD *)a1 = off_1E78E2D68;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_QWORD *)(a1 + 72) = off_1E78E2AC0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v10 = a2[1];
  *(_QWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v10 - 48)) = a2[2];
  *(_QWORD *)(a1 + 120) = 0;
  v11 = a1 + 120;
  *(_BYTE *)(a1 + 108) = 1;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.txn");
  ImsLogContainer::ImsLogContainer(v11 + 48, &__p, (const std::string *)(a3 + 64));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  v12 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 72) = off_1E78E2BB8;
  *(_QWORD *)(a1 + 96) = a2[3];
  *(_QWORD *)(a1 + *(_QWORD *)(v12 - 24)) = a2[4];
  *(_QWORD *)(a1 + 168) = &unk_1E78E2C68;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 368) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 376) = a1 + 384;
  *(_WORD *)(a1 + 400) = 256;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 408));
  std::string::operator=((std::string *)(a1 + 320), a5);
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)a4 + 32))(&__p);
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 296, (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v14 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  *(_QWORD *)(a1 + 312) = a3;
  v16 = *(std::__shared_weak_count **)(a1 + 352);
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_BYTE *)(a1 + 360) = 1;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 512) = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.txn");
  std::string::operator=((std::string *)(a1 + 456), &__p);
  std::string::operator=((std::string *)(a1 + 480), (const std::string *)(a3 + 64));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v19 = (SipUserAgent *)SipTransportLayer::userAgent((SipTransportLayer *)a3);
  *(_QWORD *)(a1 + 544) = SipUserAgent::config(v19) + 512;
  return a1;
}

void sub_1BF1488E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, SipConnectionUser *a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t *v20;
  SipLockable *v21;
  uint64_t v22;
  SipTimerContainer *v23;
  std::__shared_weak_count *v25;

  SipTimerContainer::~SipTimerContainer(v23);
  *(_QWORD *)(v19 + 368) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v19 + 376, *(_QWORD **)(v19 + 384));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v22);
  if (*(char *)(v19 + 343) < 0)
    operator delete(*a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a13);
  v25 = *(std::__shared_weak_count **)(v19 + 280);
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
  ImsLogContainer::~ImsLogContainer(a11);
  SipLockable::~SipLockable(v21, v20);
  SipConnectionUser::~SipConnectionUser(a12);
  SipTypedStateMachine<SipTransactionState>::~SipTypedStateMachine((_QWORD *)v19);
  _Unwind_Resume(a1);
}

_QWORD *SipTypedStateMachine<SipTransactionState>::~SipTypedStateMachine(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1E78E2D68;
  v2 = (uint64_t)(a1 + 7);
  v3 = (uint64_t)(a1 + 2);
  std::__hash_table<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>>>::clear((uint64_t)(a1 + 2));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2);
  std::__hash_table<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<ImsOutStream>>>>::~__hash_table(v3);
  return a1;
}

void SipTransaction::~SipTransaction(SipTransaction *this, uint64_t *a2)
{
  uint64_t v4;
  SipConnectionUser *v5;
  SipLockable *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *((_QWORD *)this + 9) = off_1E78E2BB8;
  v5 = (SipTransaction *)((char *)this + 72);
  *((_QWORD *)this + 12) = a2[3];
  v6 = (SipTransaction *)((char *)this + 96);
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[4];
  *((_QWORD *)this + 21) = &unk_1E78E2C68;
  v7 = (char *)this + 168;
  v8 = ImsLogContainer::debugStream((SipTransaction *)((char *)this + 168));
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v7 + 16))(v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"~SipTransaction", 15);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  v9 = *((_QWORD *)this + 36);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 69);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  SipTimerContainer::~SipTimerContainer((SipTransaction *)((char *)this + 408));
  *((_QWORD *)this + 46) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 376, *((_QWORD **)this + 48));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 344);
  if (*((char *)this + 343) < 0)
    operator delete(*((void **)this + 40));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 296);
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  *((_QWORD *)this + 21) = off_1E78CFE68;
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  if (*((char *)this + 199) < 0)
    operator delete(*((void **)this + 22));
  SipLockable::~SipLockable(v6, a2 + 1);
  SipConnectionUser::~SipConnectionUser(v5);
  SipTypedStateMachine<SipTransactionState>::~SipTypedStateMachine(this);
}

void SipTransaction::logPrefix(SipTransaction *this, ImsOutStream *a2)
{
  void *__p[2];
  char v4;

  (*(void (**)(void **__return_ptr, char *))(*((_QWORD *)this + 12) + 24))(__p, (char *)this + 96);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
  *((_BYTE *)a2 + 17) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1BF148C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'SipTransaction::logPrefix(SipTransaction *this, ImsOutStream *a2)
{
  SipTransaction::logPrefix((SipTransaction *)((char *)this - 168), a2);
}

void SipTransaction::initialize(SipTransaction *this)
{
  SipTerminationLockBase *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::string __p;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v2 = (SipTerminationLockBase *)operator new();
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v11, (_QWORD *)this + 34);
  if (v11)
    v3 = v11 + 96;
  else
    v3 = 0;
  v13 = v3;
  v14 = v12;
  v11 = 0;
  v12 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "mainLock");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock(v2, &v13, &__p);
  *((_QWORD *)this + 69) = v2;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v4 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1BF148D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v17 - 32);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  MEMORY[0x1C3B87100](v16, 0x10B3C40AC51C97CLL);
  _Unwind_Resume(a1);
}

void SipTransaction::terminationLocksReleased(SipTransaction *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  char *v14;
  __int128 *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::string v21;
  std::string v22;
  std::string v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v2 = (_QWORD *)((char *)this + 168);
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 21) + 64))((char *)this + 168);
  (*(void (**)(_QWORD *, uint64_t))(*v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"SipTransaction::terminationLocksReleased", 40);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  SipTimerContainer::cancelAllTimers((SipTimerContainer *)(v2 + 30));
  v4 = v2[22];
  if (v4)
  {
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v24, (_QWORD *)this + 34);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v24);
    v5 = v2 + 22;
    v6 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 44);
    *v5 = 0;
    v5[1] = 0;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  memset(&v23, 0, sizeof(v23));
  v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 36) + 112))(*((_QWORD *)this + 36));
  if (*(char *)(v12 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v12, *(_QWORD *)(v12 + 8));
  }
  else
  {
    v13 = *(_OWORD *)v12;
    v23.__r_.__value_.__r.__words[2] = *(_QWORD *)(v12 + 16);
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v13;
  }
  memset(&v22, 0, sizeof(v22));
  if (*((char *)this + 343) < 0)
    std::string::__init_copy_ctor_external(&v22, *((const std::string::value_type **)this + 40), *((_QWORD *)this + 41));
  else
    v22 = *(std::string *)((char *)this + 320);
  memset(&v21, 0, sizeof(v21));
  v14 = (char *)SipMessage::header<SipCallIdHeader>(*((_QWORD *)this + 36));
  v15 = (__int128 *)(v14 + 64);
  if (!v14)
    v15 = &ims::kEmptyString;
  if (*((char *)v15 + 23) < 0)
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
  else
    v21 = *(std::string *)v15;
  SipTransactionLayer::transactionTerminated(*((_QWORD **)this + 39), (uint64_t)&v22, (uint64_t)&v23);
  v19 = 0;
  v20 = 0;
  (*(void (**)(char *, uint64_t *, uint64_t))(*((_QWORD *)this + 9) + 48))((char *)this + 72, &v19, 1);
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_1BF149010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'SipTransaction::terminationLocksReleased(SipTransaction *this)
{
  SipTransaction::terminationLocksReleased((SipTransaction *)((char *)this - 96));
}

uint64_t SipTransaction::retryEnabled(SipTransaction *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  size_t v7;
  int v8;
  int v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = *((_QWORD *)this + 10);
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
  }
  v4 = 0;
LABEL_6:
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 21) + 64))((char *)this + 168);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 21) + 16))((char *)this + 168, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" _retryEnabled: ", 16);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" transport->isReliable: ", 24);
  *(_BYTE *)(v5 + 17) = 0;
  if (v4)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4))
      v6 = "true";
    else
      v6 = "false";
  }
  else
  {
    v6 = "no transport";
  }
  v7 = strlen(v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)v6, v7);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  v8 = *((unsigned __int8 *)this + 360);
  v9 = *((_BYTE *)this + 360) == 0;
  if (v4 && v8)
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v9 ^ 1u;
}

void sub_1BF149228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipTransaction::transitionToState(SipTransaction *this, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  const std::string *v12;
  uint64_t v13;
  std::string __p;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _OWORD v20[3];

  memset(v20, 0, sizeof(v20));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v16, (_QWORD *)this + 34);
  if (v16)
    v4 = v16 + 96;
  else
    v4 = 0;
  v18 = v4;
  v19 = v17;
  v16 = 0;
  v17 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "transitionToState");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v20, &v18, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v17;
  if (v17)
  {
    v9 = (unint64_t *)&v17->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 21) + 64))((char *)this + 168);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 21) + 16))((char *)this + 168, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"transitioning to state [", 24);
  *(_BYTE *)(v11 + 17) = 0;
  v12 = (const std::string *)(*(uint64_t (**)(SipTransaction *, uint64_t))(*(_QWORD *)this + 16))(this, a2);
  LoggableString::LoggableString(&__p, v12);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 40))(v11, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v13 = SipTypedStateMachine<SipTransactionState>::transitionToState(this, a2);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v20);
  return v13;
}

void sub_1BF149414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t SipTypedStateMachine<SipTransactionState>::transitionToState(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *i;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const std::string *v12;
  std::string::size_type v14;
  _QWORD *v15;
  std::string::size_type v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *size;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::string::size_type v36;
  std::__shared_weak_count *v37;
  std::string __p;

  v4 = a1[3];
  if (v4)
  {
    v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      v6 = a2;
      if (v4 <= a2)
        v6 = a2 % v4;
    }
    else
    {
      v6 = ((_DWORD)v4 - 1) & a2;
    }
    v7 = *(uint64_t ***)(a1[2] + 8 * v6);
    if (v7)
    {
      for (i = *v7; i; i = (uint64_t *)*i)
      {
        v9 = i[1];
        if (v9 == a2)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)a2)
          {
            v14 = a1[7];
            v16 = a1[8];
            v15 = a1 + 7;
            __p.__r_.__value_.__r.__words[0] = v14;
            __p.__r_.__value_.__l.__size_ = v16;
            if (v16)
            {
              v17 = (unint64_t *)(v16 + 8);
              do
                v18 = __ldxr(v17);
              while (__stxr(v18 + 1, v17));
            }
            if (v14)
            {
              v19 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v14 + 48))(v14);
              (*(void (**)(std::string::size_type, uint64_t))(*(_QWORD *)v14 + 64))(v14, a2);
            }
            else
            {
              v19 = 0;
            }
            std::shared_ptr<IpAddress>::operator=[abi:ne180100](a1 + 7, i + 3);
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v15 + 56))(*v15, v19);
            v36 = v14;
            v37 = (std::__shared_weak_count *)v16;
            if (v16)
            {
              v20 = (unint64_t *)(v16 + 8);
              do
                v21 = __ldxr(v20);
              while (__stxr(v21 + 1, v20));
            }
            v22 = (std::__shared_weak_count *)a1[8];
            v34 = a1[7];
            v35 = v22;
            if (v22)
            {
              p_shared_owners = (unint64_t *)&v22->__shared_owners_;
              do
                v24 = __ldxr(p_shared_owners);
              while (__stxr(v24 + 1, p_shared_owners));
            }
            (*(void (**)(_QWORD *, std::string::size_type *, uint64_t *))(*a1 + 56))(a1, &v36, &v34);
            v25 = v35;
            if (v35)
            {
              v26 = (unint64_t *)&v35->__shared_owners_;
              do
                v27 = __ldaxr(v26);
              while (__stlxr(v27 - 1, v26));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
            }
            v28 = v37;
            if (v37)
            {
              v29 = (unint64_t *)&v37->__shared_owners_;
              do
                v30 = __ldaxr(v29);
              while (__stlxr(v30 - 1, v29));
              if (!v30)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
            }
            size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
            {
              v32 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v33 = __ldaxr(v32);
              while (__stlxr(v33 - 1, v32));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
            return 1;
          }
        }
        else
        {
          if (v5.u32[0] > 1uLL)
          {
            if (v9 >= v4)
              v9 %= v4;
          }
          else
          {
            v9 &= v4 - 1;
          }
          if (v9 != v6)
            break;
        }
      }
    }
  }
  v10 = a1[1];
  if (v10)
  {
    v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v10 + 56))(a1[1]);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"transitionToState: no such state ", 33);
    *(_BYTE *)(v11 + 17) = 0;
    v12 = (const std::string *)(*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, a2);
    LoggableString::LoggableString(&__p, v12);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 40))(v11, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1BF149788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t SipTransaction::handleStateTransition(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::string __p;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  _OWORD v27[3];

  memset(v27, 0, sizeof(v27));
  v5 = a1 + 34;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v23, a1 + 34);
  if (v23)
    v6 = v23 + 96;
  else
    v6 = 0;
  v25 = v6;
  v26 = v24;
  v23 = 0;
  v24 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "transactionCompleted");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v27, &v25, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v24;
  if (v24)
  {
    v11 = (unint64_t *)&v24->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (*(uint64_t (**)(_QWORD *))(a1[21] + 64))(a1 + 21);
  (*(void (**)(_QWORD *, uint64_t))(a1[21] + 16))(a1 + 21, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"SipTransaction::handleStateTransition", 37);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 48))(*a3) == 4)
  {
    v14 = a1[43];
    if (v14)
    {
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v20, v5);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 40))(v14, &v20);
      v15 = v21;
      if (v21)
      {
        v16 = (unint64_t *)&v21->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
  }
  else if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 48))(*a3) == 7)
  {
    v18 = a1[69];
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    a1[69] = 0;
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v27);
}

void sub_1BF1499EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t SipTransaction::abort(SipTransaction *this)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 168;
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 21) + 64))((char *)this + 168);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"aborting transaction", 20);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  return (*(uint64_t (**)(SipTransaction *, uint64_t))(*(_QWORD *)this + 32))(this, 4);
}

char *SipTransaction::nameForStateId(SipTransaction *this, unsigned int a2)
{
  if (a2 <= 8)
    return &stateNames[24 * a2];
  else
    return "Invalid";
}

uint64_t SipTransaction::timerValue(uint64_t a1, const SipTimer *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v16;

  v4 = *(_QWORD *)(a1 + 312);
  v5 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v4 + 16));
  v16 = v5;
  if (!*(_QWORD *)(*(_QWORD *)(v4 + 8) + 144))
  {
    v12 = v5;
    v9 = 0;
LABEL_9:
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    return v9;
  }
  v6 = *(_QWORD *)(a1 + 312);
  v7 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v6 + 16));
  v8 = SipUserAgent::config(*(SipUserAgent **)(*(_QWORD *)(v6 + 8) + 144));
  v9 = SipTimers::timerValue((SipTimers *)(v8 + 512), a2, 0);
  v10 = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = v16;
  if (v16)
    goto LABEL_9;
  return v9;
}

void sub_1BF149BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t SipTransaction::handleError(SipTransaction *this, const ImsResult *a2)
{
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::string __p;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  _OWORD v30[3];

  memset(v30, 0, sizeof(v30));
  v4 = (_QWORD *)((char *)this + 272);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v26, (_QWORD *)this + 34);
  if (v26)
    v5 = v26 + 96;
  else
    v5 = 0;
  v28 = v5;
  v29 = v27;
  v26 = 0;
  v27 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "handleError");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v30, &v28, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v27;
  if (v27)
  {
    v10 = (unint64_t *)&v27->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (char *)this + 168;
  v13 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 21) + 64))((char *)this + 168);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 21) + 16))((char *)this + 168, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"SipTransaction::handleError", 27);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  v14 = (*(uint64_t (**)(SipTransaction *))(*(_QWORD *)this + 144))(this);
  v15 = *((_QWORD *)this + 21);
  if (v14)
  {
    v16 = (*(uint64_t (**)(char *))(v15 + 64))((char *)this + 168);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 16))(v12, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"already completed.  Ignoring error ", 35);
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(const ImsResult *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v16);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
  }
  else
  {
    v17 = (*(uint64_t (**)(char *))(v15 + 56))((char *)this + 168);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 16))((char *)this + 168, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"terminating due to error: ", 26);
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(const ImsResult *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    v18 = *((_QWORD *)this + 43);
    if (v18)
    {
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v23, v4);
      (*(void (**)(uint64_t, const ImsResult *, uint64_t *))(*(_QWORD *)v18 + 32))(v18, a2, &v23);
      v19 = v24;
      if (v24)
      {
        v20 = (unint64_t *)&v24->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
    (*(void (**)(SipTransaction *, uint64_t))(*(_QWORD *)this + 32))(this, 7);
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v30);
}

void sub_1BF149EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'SipTransaction::handleError(SipTransaction *this, const ImsResult *a2)
{
  return SipTransaction::handleError((SipTransaction *)((char *)this - 72), a2);
}

void SipTransaction::handleTimeout(SipTransaction *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v7[2];
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v12 = 0;
  v13 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v13 = v3;
    if (v3)
    {
      v4 = *((_QWORD *)this + 10);
      v12 = v4;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
    }
  }
  else
  {
    v3 = 0;
  }
  SipTransaction::reportTimeoutToIRat(this);
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v7[0] = &off_1E78B7238;
  v7[1] = &SipResultDomain::_domain;
  v8 = 408;
  (*(void (**)(SipTransaction *, _QWORD *))(*(_QWORD *)this + 112))(this, v7);
  ImsResult::~ImsResult((ImsResult *)v7);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF14A030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 32);
  _Unwind_Resume(a1);
}

void SipTransaction::reportTimeoutToIRat(SipTransaction *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  int v36;
  unint64_t *v37;
  unint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  __int128 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::string v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v71 = 0;
  v72 = 0;
  v70 = 0;
  v2 = *((_QWORD *)this + 39);
  v3 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v3)
  {
    v4 = 0;
    goto LABEL_5;
  }
  v4 = std::__shared_weak_count::lock(v3);
  if (!v4)
  {
LABEL_5:
    v5 = 0;
    goto LABEL_6;
  }
  v5 = *(_QWORD *)(v2 + 8);
LABEL_6:
  LOBYTE(v70) = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v5 + 3136));
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v8 = *((_QWORD *)this + 39);
  v9 = *(std::__shared_weak_count **)(v8 + 16);
  if (v9 && (v10 = std::__shared_weak_count::lock(v9)) != 0)
  {
    v11 = v10;
    v71 = *(unsigned int *)(*(_QWORD *)(v8 + 8) + 4076);
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    v71 = MEMORY[0xFEC];
  }
  LODWORD(v72) = 0;
  v14 = *((_QWORD *)this + 36);
  if (v14)
  {
    v15 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 112))(v14);
    v16 = v15[23];
    if ((v16 & 0x80u) == 0)
      v17 = v15[23];
    else
      v17 = *((_QWORD *)v15 + 1);
    if (v17 != 8)
      goto LABEL_30;
    if ((v16 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v15, "REGISTER", *((_QWORD *)v15 + 1)))
        goto LABEL_30;
    }
    else if (v15[23])
    {
      v18 = "REGISTER";
      while (*v15 == *(unsigned __int8 *)v18)
      {
        ++v15;
        ++v18;
        if (!--v16)
          goto LABEL_40;
      }
LABEL_30:
      v19 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 36) + 112))(*((_QWORD *)this + 36));
      v20 = v19[23];
      if ((v20 & 0x80u) == 0)
        v21 = v19[23];
      else
        v21 = *((_QWORD *)v19 + 1);
      if (v21 != 7)
        goto LABEL_48;
      if ((v20 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v19, "MESSAGE", *((_QWORD *)v19 + 1)))
          goto LABEL_48;
      }
      else if (v19[23])
      {
        v22 = "MESSAGE";
        while (*v19 == *(unsigned __int8 *)v22)
        {
          ++v19;
          ++v22;
          if (!--v20)
            goto LABEL_58;
        }
LABEL_48:
        v32 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 36) + 112))(*((_QWORD *)this + 36));
        v33 = v32[23];
        if ((v33 & 0x80u) == 0)
          v34 = v32[23];
        else
          v34 = *((_QWORD *)v32 + 1);
        if (v34 == 6)
        {
          if ((v33 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v32, "INVITE", *((_QWORD *)v32 + 1)))
              goto LABEL_100;
          }
          else
          {
            if (!v32[23])
              goto LABEL_100;
            v35 = "INVITE";
            while (*v32 == *(unsigned __int8 *)v35)
            {
              ++v32;
              ++v35;
              if (!--v33)
                goto LABEL_100;
            }
          }
        }
        v39 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 36) + 112))(*((_QWORD *)this + 36));
        v40 = v39[23];
        if ((v40 & 0x80u) == 0)
          v41 = v39[23];
        else
          v41 = *((_QWORD *)v39 + 1);
        if (v41 == 5)
        {
          if ((v40 & 0x80) == 0)
          {
            if (v39[23])
            {
              v42 = "PRACK";
              while (*v39 == *(unsigned __int8 *)v42)
              {
                ++v39;
                ++v42;
                if (!--v40)
                  goto LABEL_100;
              }
              goto LABEL_79;
            }
LABEL_100:
            v36 = 4;
            goto LABEL_115;
          }
          if (!memcmp(*(const void **)v39, "PRACK", *((_QWORD *)v39 + 1)))
            goto LABEL_100;
        }
LABEL_79:
        v43 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 36) + 112))(*((_QWORD *)this + 36));
        v44 = v43[23];
        if ((v44 & 0x80u) == 0)
          v45 = v43[23];
        else
          v45 = *((_QWORD *)v43 + 1);
        if (v45 != 3)
          goto LABEL_90;
        if ((v44 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v43, &SipRequest::kMethodAck, *((_QWORD *)v43 + 1)))
            goto LABEL_90;
        }
        else if (v43[23])
        {
          v46 = &SipRequest::kMethodAck;
          while (*v43 == *(unsigned __int8 *)v46)
          {
            ++v43;
            v46 = (__int128 *)((char *)v46 + 1);
            v36 = 4;
            if (!--v44)
              goto LABEL_115;
          }
LABEL_90:
          v47 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 36) + 112))(*((_QWORD *)this + 36));
          v48 = v47[23];
          if ((v48 & 0x80u) == 0)
            v49 = v47[23];
          else
            v49 = *((_QWORD *)v47 + 1);
          if (v49 == 6)
          {
            if ((v48 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v47, "CANCEL", *((_QWORD *)v47 + 1)))
                goto LABEL_114;
            }
            else
            {
              if (!v47[23])
                goto LABEL_114;
              v50 = "CANCEL";
              while (*v47 == *(unsigned __int8 *)v50)
              {
                ++v47;
                ++v50;
                v36 = 5;
                if (!--v48)
                  goto LABEL_115;
              }
            }
          }
          v51 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 36) + 112))(*((_QWORD *)this + 36));
          v52 = v51[23];
          if ((v52 & 0x80u) == 0)
            v53 = v51[23];
          else
            v53 = *((_QWORD *)v51 + 1);
          if (v53 == 3)
          {
            if ((v52 & 0x80) == 0)
            {
              if (v51[23])
              {
                v54 = &SipRequest::kMethodBye;
                while (*v51 == *(unsigned __int8 *)v54)
                {
                  ++v51;
                  v54 = (__int128 *)((char *)v54 + 1);
                  if (!--v52)
                    goto LABEL_114;
                }
                goto LABEL_113;
              }
LABEL_114:
              v36 = 5;
              goto LABEL_115;
            }
            if (!memcmp(*(const void **)v51, &SipRequest::kMethodBye, *((_QWORD *)v51 + 1)))
              goto LABEL_114;
          }
LABEL_113:
          v36 = 6;
          goto LABEL_115;
        }
        goto LABEL_100;
      }
LABEL_58:
      v36 = 3;
LABEL_115:
      LODWORD(v72) = v36;
      goto LABEL_116;
    }
LABEL_40:
    v23 = *((_QWORD *)this + 39);
    v24 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v23 + 16));
    v25 = *(_QWORD *)(*(_QWORD *)(v23 + 8) + 144);
    v26 = *(_QWORD *)(v25 + 248);
    v27 = *(std::__shared_weak_count **)(v25 + 256);
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      v30 = *(_DWORD *)(v26 + 532);
      do
        v31 = __ldaxr(v28);
      while (__stlxr(v31 - 1, v28));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    else
    {
      v30 = *(_DWORD *)(v26 + 532);
    }
    v37 = (unint64_t *)&v24->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    if (v30 == 3)
      v36 = 2;
    else
      v36 = 1;
    goto LABEL_115;
  }
LABEL_116:
  v55 = *((_QWORD *)this + 39);
  v69 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v55 + 16));
  v68 = *(_QWORD *)(v55 + 8);
  v56 = *(_QWORD *)(v68 + 136);
  v57 = *((_QWORD *)this + 39);
  v58 = *(std::__shared_weak_count **)(v57 + 16);
  if (v58)
  {
    v59 = std::__shared_weak_count::lock(v58);
    if (v59)
    {
      v60 = *(_QWORD *)(v57 + 8);
      goto LABEL_121;
    }
  }
  else
  {
    v59 = 0;
  }
  v60 = 0;
LABEL_121:
  if (*(char *)(v60 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(v60 + 4136), *(_QWORD *)(v60 + 4144));
  else
    v67 = *(std::string *)(v60 + 4136);
  v61 = *(_QWORD *)(v56 + 248);
  if (v61)
    (*(void (**)(uint64_t, std::string *, uint64_t *))(*(_QWORD *)v61 + 136))(v61, &v67, &v70);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (v59)
  {
    v62 = (unint64_t *)&v59->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v64 = v69;
  if (v69)
  {
    v65 = (unint64_t *)&v69->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
}

void sub_1BF14A67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

BOOL SipTransaction::completed(SipTransaction *this)
{
  return (*(unsigned int (**)(SipTransaction *))(*(_QWORD *)this + 24))(this) > 3;
}

BOOL `non-virtual thunk to'SipTransaction::completed(SipTransaction *this)
{
  return (*(unsigned int (**)(char *))(*((_QWORD *)this - 9) + 24))((char *)this - 72) > 3;
}

uint64_t SipTransaction::transactionMapKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[4];
  void *__p[2];
  __int128 v19;
  __int128 v20;
  _BYTE v21[144];
  uint64_t v22;

  v22 = 0;
  memset(v21, 0, sizeof(v21));
  v19 = 0u;
  v20 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v17, 0, sizeof(v17));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
  v6 = *(char *)(a1 + 23);
  if (v6 >= 0)
    v7 = a1;
  else
    v7 = *(_QWORD *)a1;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v7, v8);
  LOBYTE(v15) = 45;
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v15, 1);
  v11 = *(char *)(a2 + 23);
  if (v11 >= 0)
    v12 = a2;
  else
    v12 = *(_QWORD *)a2;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a2 + 23);
  else
    v13 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v17 + 8, &v15);
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = v15;
  *(_QWORD *)(a3 + 16) = v16;
  *(_QWORD *)&v17[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v17 + *(_QWORD *)(*(_QWORD *)&v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v17[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v19) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v21);
}

void sub_1BF14A848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t SipTransaction::messageEncoding(SipTransaction *this)
{
  SipTransportLayer *v1;
  uint64_t result;

  v1 = (SipTransportLayer *)*((_QWORD *)this + 39);
  result = SipTransportLayer::userAgent(v1);
  if (result)
    return SipTransportLayer::userAgent(v1) + 288;
  return result;
}

uint64_t SipSessionInterface::SipSessionInterface(uint64_t a1, uint64_t *a2, const std::string *a3, const std::string *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *size;
  unint64_t *v15;
  unint64_t v16;
  std::string __p;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v8 = ImsLogContainer::ImsLogContainer(a1, a3, a4);
  v9 = a2[1];
  *(_QWORD *)(v8 + 104) = v9;
  *(_QWORD *)(v8 + 104 + *(_QWORD *)(v9 - 48)) = a2[2];
  *(_BYTE *)(v8 + 116) = 1;
  *(_QWORD *)(v8 + 136) = 0;
  *(_QWORD *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 120) = v8 + 128;
  *(_DWORD *)(v8 + 112) = 0;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  v10 = *a2;
  *(_QWORD *)v8 = *a2;
  *(_QWORD *)(v8 + 104) = a2[3];
  *(_QWORD *)(v8 + *(_QWORD *)(v10 - 24)) = a2[4];
  v19 = 0;
  v20 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "MainLock");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)(a1 + 192), &v19, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v11 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 264));
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 408));
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_QWORD *)(a1 + 552) = a1 + 560;
  *(_QWORD *)(a1 + 576) = a1 + 584;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 240, (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v15 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  *(_BYTE *)(a1 + 256) = 1;
  *(_QWORD *)(a1 + 368) = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  std::string::operator=((std::string *)(a1 + 312), a3);
  std::string::operator=((std::string *)(a1 + 336), a4);
  *(_QWORD *)(a1 + 512) = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  std::string::operator=((std::string *)(a1 + 456), a3);
  std::string::operator=((std::string *)(a1 + 480), a4);
  return a1;
}

void sub_1BF14AAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, SipTimerContainer *a10, SipTimerContainer *a11, uint64_t a12, uint64_t *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  SipLockable *v21;
  uint64_t v22;
  std::__shared_weak_count *v24;

  SipTimerContainer::~SipTimerContainer(a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v22);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(a12);
  v24 = *(std::__shared_weak_count **)(v20 + 184);
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
  SipLockable::~SipLockable(v21, a13);
  ImsLogContainer::~ImsLogContainer((void **)v20);
  _Unwind_Resume(a1);
}

void SipSessionInterface::~SipSessionInterface(SipSessionInterface *this, uint64_t *a2)
{
  uint64_t v4;
  SipLockable *v5;
  std::__shared_weak_count *v6;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *((_QWORD *)this + 13) = a2[3];
  v5 = (SipSessionInterface *)((char *)this + 104);
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[4];
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 600);
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<MediaSessionInterface>>>>::destroy((uint64_t)this + 576, *((_QWORD **)this + 73));
  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy((uint64_t)this + 552, *((_QWORD **)this + 70));
  SipTimerContainer::~SipTimerContainer((SipSessionInterface *)((char *)this + 408));
  SipTimerContainer::~SipTimerContainer((SipSessionInterface *)((char *)this + 264));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 240);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)this + 192);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  SipLockable::~SipLockable(v5, a2 + 1);
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void SipSessionInterface::initialize(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v4 = a1 + 192;
  v5 = (_QWORD *)(a1 + 176);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v19, (_QWORD *)(a1 + 176));
  if (v19)
    v6 = v19 + 104;
  else
    v6 = 0;
  v21 = v6;
  v22 = v20;
  v19 = 0;
  v20 = 0;
  SipTypedTerminationLock<SipLockable>::set(v4, &v21);
  v7 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v20;
  if (v20)
  {
    v11 = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 + 240), a2);
  v13 = *(_QWORD *)(a1 + 240);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v17, v5);
  SipDialog::attachSession(v13, &v17);
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1BF14AD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipSessionInterface::removeAllAckHandlers(SipSessionInterface *this)
{
  uint64_t v2;
  void **v3;
  void **v4;
  std::string *v5;
  __int128 *v6;
  __int128 v7;
  void **v8;
  void **v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  void **v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  SipSessionInterface *v22;
  void **v23;
  void **v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  void **v30;
  void **v31;
  int v32;
  SipSessionInterface *v33;
  SipSessionInterface *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  void **v44;
  std::__shared_weak_count *v45;
  void **v46;
  std::string *v47;
  std::string *v48;
  unint64_t v49;

  v2 = (*(uint64_t (**)(SipSessionInterface *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipSessionInterface *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"removing all ACK handlers", 25);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v3 = (void **)*((_QWORD *)this + 69);
  v4 = (void **)((char *)this + 560);
  if (v3 != (void **)((char *)this + 560))
  {
    v5 = 0;
    do
    {
      v6 = (__int128 *)(v3 + 4);
      if ((unint64_t)v5 >= v49)
      {
        v5 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v47, v6);
      }
      else
      {
        if (*((char *)v3 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)v3[4], (std::string::size_type)v3[5]);
        }
        else
        {
          v7 = *v6;
          v5->__r_.__value_.__r.__words[2] = (std::string::size_type)v3[6];
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v7;
        }
        ++v5;
      }
      v48 = v5;
      v8 = (void **)v3[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (void **)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (void **)v3[2];
          v10 = *v9 == v3;
          v3 = v9;
        }
        while (!v10);
      }
      v3 = v9;
    }
    while (v9 != v4);
    v11 = (uint64_t)v47;
    if (v5 != v47)
    {
      v12 = 0;
      do
      {
        v44 = 0;
        v45 = 0;
        v13 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 552, (void **)(v11 + 24 * v12));
        if (v4 != v13)
        {
          v14 = (void **)v13[7];
          v15 = (std::__shared_weak_count *)v13[8];
          v44 = v14;
          v45 = v15;
          if (v15)
          {
            p_shared_owners = (unint64_t *)&v15->__shared_owners_;
            do
              v17 = __ldxr(p_shared_owners);
            while (__stxr(v17 + 1, p_shared_owners));
          }
          if (v14)
          {
            v18 = (*(uint64_t (**)(SipSessionInterface *))(*(_QWORD *)this + 64))(this);
            (*(void (**)(SipSessionInterface *, uint64_t))(*(_QWORD *)this + 16))(this, v18);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"forcing ", 8);
            *(_BYTE *)(v18 + 17) = 0;
            (*((void (**)(void **, uint64_t))v14[16] + 2))(v14 + 16, v18);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)" to terminate its transaction", 29);
            *(_BYTE *)(v18 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v18 + 17) = 0;
            *((_BYTE *)v14 + 336) = 1;
            v19 = v14[21];
            if (v19)
              (*(void (**)(void *, uint64_t))(*(_QWORD *)v19 + 32))(v19, 7);
          }
          if (v15)
          {
            v20 = (unint64_t *)&v15->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
        }
        ++v12;
        v11 = (uint64_t)v47;
      }
      while (v12 < 0xAAAAAAAAAAAAAAABLL * (((char *)v48 - (char *)v47) >> 3));
    }
  }
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v22 = (SipSessionInterface *)*((_QWORD *)this + 72);
  if (v22 != (SipSessionInterface *)((char *)this + 584))
  {
    v23 = 0;
    do
    {
      if (v23 >= v46)
      {
        v24 = v44;
        v25 = ((char *)v23 - (char *)v44) >> 2;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62)
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        v27 = (char *)v46 - (char *)v44;
        if (((char *)v46 - (char *)v44) >> 1 > v26)
          v26 = v27 >> 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
          v28 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)&v46, v28);
          v24 = v44;
          v23 = (void **)&v45->__vftable;
        }
        else
        {
          v29 = 0;
        }
        v30 = (void **)&v29[4 * v25];
        *(_DWORD *)v30 = *((_DWORD *)v22 + 8);
        v31 = (void **)((char *)v30 + 4);
        while (v23 != v24)
        {
          v32 = *((_DWORD *)v23 - 1);
          v23 = (void **)((char *)v23 - 4);
          *((_DWORD *)v30 - 1) = v32;
          v30 = (void **)((char *)v30 - 4);
        }
        v44 = v30;
        v45 = (std::__shared_weak_count *)v31;
        v46 = (void **)&v29[4 * v28];
        if (v24)
          operator delete(v24);
        v23 = v31;
      }
      else
      {
        *(_DWORD *)v23 = *((_DWORD *)v22 + 8);
        v23 = (void **)((char *)v23 + 4);
      }
      v45 = (std::__shared_weak_count *)v23;
      v33 = (SipSessionInterface *)*((_QWORD *)v22 + 1);
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = *(SipSessionInterface **)v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (SipSessionInterface *)*((_QWORD *)v22 + 2);
          v10 = *(_QWORD *)v34 == (_QWORD)v22;
          v22 = v34;
        }
        while (!v10);
      }
      v22 = v34;
    }
    while (v34 != (SipSessionInterface *)((char *)this + 584));
    if (v23 == v44)
      goto LABEL_67;
    v35 = 0;
    v23 = v44;
    do
    {
      v42 = 0;
      v43 = 0;
      SipSessionInterface::ackReceiveHandlerForCseq((uint64_t)this, *((_DWORD *)v23 + v35), &v42);
      v36 = v42;
      if (v42)
      {
        v37 = (*(uint64_t (**)(SipSessionInterface *))(*(_QWORD *)this + 64))(this);
        (*(void (**)(SipSessionInterface *, uint64_t))(*(_QWORD *)this + 16))(this, v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"forcing ", 8);
        *(_BYTE *)(v37 + 17) = 0;
        (*(void (**)(_QWORD *, uint64_t))(*v36 + 16))(v36, v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)" to terminate its transaction", 29);
        *(_BYTE *)(v37 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v37 + 17) = 0;
        v38 = v36[18];
        if (v38)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 32))(v38, 7);
      }
      v39 = v43;
      if (v43)
      {
        v40 = (unint64_t *)&v43->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      ++v35;
      v23 = v44;
    }
    while (v35 < ((char *)v45 - (char *)v44) >> 2);
    if (v44)
    {
LABEL_67:
      v45 = (std::__shared_weak_count *)v23;
      operator delete(v23);
    }
  }
  v44 = (void **)&v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v44);
}

void sub_1BF14B2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15)
{
  __p = &a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t SipSessionInterface::ackReceiveHandlerForCseq@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = *(_QWORD *)(this + 584);
  if (!v3)
    goto LABEL_12;
  v4 = this + 584;
  do
  {
    v5 = *(_DWORD *)(v3 + 32);
    v6 = v5 >= a2;
    if (v5 >= a2)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (v6)
      v4 = v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 != this + 584 && *(_DWORD *)(v4 + 32) <= a2)
  {
    v9 = *(_QWORD *)(v4 + 40);
    v8 = *(_QWORD *)(v4 + 48);
    *a3 = v9;
    a3[1] = v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
  }
  return this;
}

void SipSessionInterface::addAckRetransmitHandlerForClientTransaction(uint64_t a1, uint64_t a2, const SipResponse *a3, int a4)
{
  char *v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t v30;
  unint64_t *p_shared_weak_owners;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char v43;
  char v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  void **v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  std::string *v58;
  __int128 v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  __int128 v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  void *__p[2];
  uint64_t v89;

  if (!*(_QWORD *)a2
  {
    v84 = 0;
    v85 = 0;
    v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)"can't add ACK retransmit handler for non-invite transaction ", 60);
    *(_BYTE *)(v54 + 17) = 0;
    v55 = *(_QWORD *)a2 + *(_QWORD *)(**(_QWORD **)a2 - 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 16))(v55, v54);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v54 + 17) = 0;
    return;
  }
  v9 = v8;
  v10 = *(std::__shared_weak_count **)(a2 + 8);
  v84 = (uint64_t)v8;
  v85 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"adding ACK retransmit handler for transaction ", 46);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)&v9[*(_QWORD *)(*(_QWORD *)v9 - 24)] + 16))(&v9[*(_QWORD *)(*(_QWORD *)v9 - 24)], v13);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  v82 = 0;
  v83 = 0;
  if (a4)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 128))(__p, a1);
    std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v82, (uint64_t *)__p);
    v14 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v15 = (unint64_t *)((char *)__p[1] + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  v80 = 0;
  v81 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v79, (_QWORD *)(a1 + 176));
  v17 = (std::__shared_weak_count *)operator new(0x170uLL);
  v18 = v17;
  v17->__shared_owners_ = 0;
  v19 = (unint64_t *)&v17->__shared_owners_;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2DD0;
  v20 = &v17[1].__vftable;
  *(_OWORD *)__p = v79;
  v79 = 0uLL;
  v86 = v84;
  v87 = v85;
  if (v85)
  {
    v21 = (unint64_t *)&v85->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  SipAckRetransmitHandler::SipAckRetransmitHandler((uint64_t)&v17[1], (uint64_t)__p, &v86);
  v23 = v87;
  if (v87)
  {
    v24 = (unint64_t *)&v87->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v27 = (unint64_t *)((char *)__p[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v80 = (uint64_t)v20;
  v81 = v18;
  v29 = (std::__shared_weak_count *)v18[7].__vftable;
  if (v29)
  {
    if (v29->__shared_owners_ != -1)
      goto LABEL_38;
    do
      v30 = __ldxr(v19);
    while (__stxr(v30 + 1, v19));
    p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
    do
      v32 = __ldxr(p_shared_weak_owners);
    while (__stxr(v32 + 1, p_shared_weak_owners));
    v18[6].__shared_weak_owners_ = (uint64_t)v20;
    v18[7].__vftable = (std::__shared_weak_count_vtbl *)v18;
    std::__shared_weak_count::__release_weak(v29);
  }
  else
  {
    do
      v33 = __ldxr(v19);
    while (__stxr(v33 + 1, v19));
    v34 = (unint64_t *)&v18->__shared_weak_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    v18[6].__shared_weak_owners_ = (uint64_t)v20;
    v18[7].__vftable = (std::__shared_weak_count_vtbl *)v18;
  }
  do
    v36 = __ldaxr(v19);
  while (__stlxr(v36 - 1, v19));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_38:
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v80;
  v77 = v82;
  v78 = v83;
  if (v83)
  {
    v41 = (unint64_t *)&v83->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = SipAckRetransmitHandler::initialize(v40, a3, &v77);
  v44 = v43;
  v45 = v78;
  if (!v78)
    goto LABEL_50;
  v46 = (unint64_t *)&v78->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
    if ((v44 & 1) != 0)
    {
LABEL_51:
      v48 = v84;
      v49 = (void **)(v84 + 320);
      v50 = *(_QWORD **)(a1 + 560);
      v51 = (_QWORD *)(a1 + 560);
      v52 = (_QWORD *)(a1 + 560);
      if (!v50)
        goto LABEL_63;
      v51 = (_QWORD *)(a1 + 560);
      while (1)
      {
        while (1)
        {
          v52 = v50;
          v53 = v50 + 4;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v49, (void **)v50 + 4) & 0x80) == 0)
            break;
          v50 = (_QWORD *)*v52;
          v51 = v52;
          if (!*v52)
            goto LABEL_63;
        }
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v53, v49) & 0x80) == 0)
          break;
        v51 = v52 + 1;
        v50 = (_QWORD *)v52[1];
        if (!v50)
          goto LABEL_63;
      }
      v56 = (_QWORD *)*v51;
      if (!*v51)
      {
LABEL_63:
        v89 = 0;
        v57 = operator new(0x48uLL);
        __p[0] = v57;
        __p[1] = (void *)(a1 + 560);
        v58 = (std::string *)(v57 + 4);
        if (*(char *)(v48 + 343) < 0)
        {
          std::string::__init_copy_ctor_external(v58, *(const std::string::value_type **)(v48 + 320), *(_QWORD *)(v48 + 328));
        }
        else
        {
          v59 = *(_OWORD *)v49;
          v57[6] = v49[2];
          *(_OWORD *)&v58->__r_.__value_.__l.__data_ = v59;
        }
        v57[7] = 0;
        v57[8] = 0;
        LOBYTE(v89) = 1;
        *v57 = 0;
        v57[1] = 0;
        v57[2] = v52;
        *v51 = v57;
        v60 = **(_QWORD **)(a1 + 552);
        if (v60)
        {
          *(_QWORD *)(a1 + 552) = v60;
          v57 = (_QWORD *)*v51;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 560), v57);
        ++*(_QWORD *)(a1 + 568);
        v56 = __p[0];
        __p[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>>>>::reset[abi:ne180100]((uint64_t)__p);
      }
      v62 = v80;
      v61 = v81;
      if (v81)
      {
        v63 = (unint64_t *)&v81->__shared_owners_;
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      v65 = (std::__shared_weak_count *)v56[8];
      v56[7] = v62;
      v56[8] = v61;
      if (v65)
      {
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v80 + 72))(__p);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)(a1 + 104) + 32))(a1 + 104, __p);
      if (SHIBYTE(v89) < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
LABEL_50:
    if ((v43 & 1) != 0)
      goto LABEL_51;
  }
  v68 = v81;
  if (v81)
  {
    v69 = (unint64_t *)&v81->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = v83;
  if (v83)
  {
    v72 = (unint64_t *)&v83->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = v85;
  if (v85)
  {
    v75 = (unint64_t *)&v85->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
}

void sub_1BF14B9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipDialogFork>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void SipSessionInterface::removeAckRetransmitHandler(uint64_t **a1, std::string *a2)
{
  uint64_t **v4;
  void **v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18[2];
  uint64_t v19;
  void *__p;
  char v21;

  v4 = a1 + 69;
  v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(a1 + 69), (void **)&a2->__r_.__value_.__l.__data_);
  if (a1 + 70 != (uint64_t **)v5)
  {
    v6 = (uint64_t *)v5;
    v7 = ((uint64_t (*)(uint64_t **))(*a1)[8])(a1);
    ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"removing ACK retransmit handler for transaction ", 48);
    *(_BYTE *)(v7 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)v18, a2);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 56))(v7, v18);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v21 < 0)
      operator delete(__p);
    if (SHIBYTE(v19) < 0)
      operator delete(v18[0]);
    v9 = v6[7];
    v8 = (std::__shared_weak_count *)v6[8];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v12 = (uint64_t *)v6[1];
    if (v12)
    {
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v14 = v6;
      do
      {
        v13 = (uint64_t *)v14[2];
        v15 = *v13 == (_QWORD)v14;
        v14 = v13;
      }
      while (!v15);
    }
    if (*v4 == v6)
      *v4 = v13;
    a1[71] = (uint64_t *)((char *)a1[71] - 1);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(a1[70], v6);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)(v6 + 4));
    operator delete(v6);
    v18[0] = 0;
    v18[1] = 0;
    v19 = 0;
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v9 + 72))(v18, v9);
    ((void (*)(uint64_t **, void **))a1[13][5])(a1 + 13, v18);
    if (SHIBYTE(v19) < 0)
      operator delete(v18[0]);
    if (v8)
    {
      v16 = (unint64_t *)&v8->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1BF14BC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipSessionInterface::addAckReceiveHandlerForServerTransaction(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _DWORD *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  SipAckReceiveHandler *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t v24;
  unint64_t *p_shared_weak_owners;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  SipAckReceiveHandler *v34;
  uint64_t *v35;
  uint64_t **v36;
  unsigned int v37;
  uint64_t **v38;
  void *v39;
  uint64_t v40;
  uint64_t *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  void *__p[2];
  char v52;
  __int128 v53;
  SipAckReceiveHandler *v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;

  v6 = SipMessage::header<SipCSeqHeader>(*(_QWORD *)(*a2 + 288));
  if (v6)
    v7 = v6[15];
  else
    v7 = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"adding ACK receive handler for transaction ", 43);
  *(_BYTE *)(v8 + 17) = 0;
  v9 = *a2 + *(_QWORD *)(*(_QWORD *)*a2 - 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" with cseq ", 11);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  v54 = 0;
  v55 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v53, (_QWORD *)(a1 + 176));
  v10 = (std::__shared_weak_count *)operator new(0x158uLL);
  v11 = v10;
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2E20;
  v13 = (SipAckReceiveHandler *)&v10[1];
  *(_OWORD *)__p = v53;
  v53 = 0uLL;
  v14 = (std::__shared_weak_count *)a2[1];
  v56 = *a2;
  v57 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  SipAckReceiveHandler::SipAckReceiveHandler((uint64_t)&v10[1], (uint64_t)__p, &v56, a3);
  v17 = v57;
  if (v57)
  {
    v18 = (unint64_t *)&v57->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v21 = (unint64_t *)((char *)__p[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v54 = v13;
  v55 = v11;
  v23 = (std::__shared_weak_count *)v11[6].__vftable;
  if (v23)
  {
    if (v23->__shared_owners_ != -1)
      goto LABEL_30;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v26 = __ldxr(p_shared_weak_owners);
    while (__stxr(v26 + 1, p_shared_weak_owners));
    v11[5].__shared_weak_owners_ = (uint64_t)v13;
    v11[6].__vftable = (std::__shared_weak_count_vtbl *)v11;
    std::__shared_weak_count::__release_weak(v23);
  }
  else
  {
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
    v28 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    v11[5].__shared_weak_owners_ = (uint64_t)v13;
    v11[6].__vftable = (std::__shared_weak_count_vtbl *)v11;
  }
  do
    v30 = __ldaxr(p_shared_owners);
  while (__stlxr(v30 - 1, p_shared_owners));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_30:
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v54;
  if ((SipAckReceiveHandler::initialize(v54) & 1) != 0)
  {
    v35 = *(uint64_t **)(a1 + 584);
    if (v35)
    {
      while (1)
      {
        while (1)
        {
          v36 = (uint64_t **)v35;
          v37 = *((_DWORD *)v35 + 8);
          if (v37 <= v7)
            break;
          v35 = *v36;
          v38 = v36;
          if (!*v36)
            goto LABEL_44;
        }
        if (v37 >= v7)
          break;
        v35 = v36[1];
        if (!v35)
        {
          v38 = v36 + 1;
          goto LABEL_44;
        }
      }
      v39 = v36;
    }
    else
    {
      v38 = (uint64_t **)(a1 + 584);
      v36 = (uint64_t **)(a1 + 584);
LABEL_44:
      v39 = operator new(0x38uLL);
      *((_DWORD *)v39 + 8) = v7;
      *((_QWORD *)v39 + 5) = 0;
      *((_QWORD *)v39 + 6) = 0;
      *(_QWORD *)v39 = 0;
      *((_QWORD *)v39 + 1) = 0;
      *((_QWORD *)v39 + 2) = v36;
      *v38 = (uint64_t *)v39;
      v40 = **(_QWORD **)(a1 + 576);
      v41 = (uint64_t *)v39;
      if (v40)
      {
        *(_QWORD *)(a1 + 576) = v40;
        v41 = *v38;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 584), v41);
      ++*(_QWORD *)(a1 + 592);
      v34 = v54;
    }
    v42 = v55;
    if (v55)
    {
      v43 = (unint64_t *)&v55->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = (std::__shared_weak_count *)*((_QWORD *)v39 + 6);
    *((_QWORD *)v39 + 5) = v34;
    *((_QWORD *)v39 + 6) = v42;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v54 + 24))(__p);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)(a1 + 104) + 32))(a1 + 104, __p);
    if (v52 < 0)
      operator delete(__p[0]);
  }
  v48 = v55;
  if (v55)
  {
    v49 = (unint64_t *)&v55->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

void sub_1BF14C0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void SipSessionInterface::removeAckReceiveHandler(SipSessionInterface *this, unsigned int a2)
{
  char *v2;
  char *v4;
  unsigned int v5;
  BOOL v6;
  char **v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  BOOL v16;
  unint64_t *v17;
  unint64_t v18;
  void *__p[2];
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v2 = (char *)*((_QWORD *)this + 73);
  if (v2)
  {
    v4 = (char *)this + 584;
    do
    {
      v5 = *((_DWORD *)v2 + 8);
      v6 = v5 >= a2;
      if (v5 >= a2)
        v7 = (char **)v2;
      else
        v7 = (char **)(v2 + 8);
      if (v6)
        v4 = v2;
      v2 = *v7;
    }
    while (*v7);
    if (v4 != (char *)this + 584 && *((_DWORD *)v4 + 8) <= a2)
    {
      v8 = (*(uint64_t (**)(SipSessionInterface *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipSessionInterface *, uint64_t))(*(_QWORD *)this + 16))(this, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"removing ACK receive handler for cseq ", 38);
      *(_BYTE *)(v8 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      v10 = *((_QWORD *)v4 + 5);
      v9 = (std::__shared_weak_count *)*((_QWORD *)v4 + 6);
      v21 = v10;
      v22 = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v13 = (char *)*((_QWORD *)v4 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        v15 = v4;
        do
        {
          v14 = (char *)*((_QWORD *)v15 + 2);
          v16 = *(_QWORD *)v14 == (_QWORD)v15;
          v15 = v14;
        }
        while (!v16);
      }
      if (*((char **)this + 72) == v4)
        *((_QWORD *)this + 72) = v14;
      --*((_QWORD *)this + 74);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 73), (uint64_t *)v4);
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(v4 + 40));
      operator delete(v4);
      __p[0] = 0;
      __p[1] = 0;
      v20 = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v10 + 24))(__p, v10);
      (*(void (**)(char *, void **))(*((_QWORD *)this + 13) + 40))((char *)this + 104, __p);
      if (SHIBYTE(v20) < 0)
        operator delete(__p[0]);
      if (v9)
      {
        v17 = (unint64_t *)&v9->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
  }
}

void sub_1BF14C31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void SipSessionInterface::sendAck(uint64_t a1@<X0>, SipRequest *a2@<X1>, _QWORD *a3@<X2>, char a4@<W3>, ImsResult *a5@<X8>)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  SipOfferAnswer *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const ImsResult *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  _BYTE v36[72];
  uint64_t v37;
  void (**v38)(ImsResult *__hidden);
  uint64_t *v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  v7 = *(_QWORD *)(a1 + 240);
  if (*(_QWORD *)(v7 + 2056) != 1)
  {
    v44 = 0;
    v45 = 0;
LABEL_24:
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v38 = &off_1E78B7238;
    v39 = &_bambiDomain;
    v40 = 1073741826;
    v28 = ImsResult::operator<<<char [32]>((uint64_t)&v38, "sendAck called when dialog has ");
    v37 = *(_QWORD *)(*(_QWORD *)(a1 + 240) + 2056);
    v29 = ImsResult::operator<<<unsigned long>(v28);
    v30 = (const ImsResult *)ImsResult::operator<<<char [7]>(v29, " forks");
    ImsResult::ImsResult(a5, v30);
    ImsResult::~ImsResult((ImsResult *)&v38);
    goto LABEL_25;
  }
  v10 = *(_QWORD *)(v7 + 2040);
  v11 = *(_QWORD *)(v10 + 56);
  v12 = *(std::__shared_weak_count **)(v10 + 64);
  v44 = v11;
  v45 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (!v11)
    goto LABEL_24;
  if ((a4 & 1) == 0)
  {
    v15 = *(SipOfferAnswer **)(v11 + 656);
    v16 = *(std::__shared_weak_count **)(v11 + 664);
    v38 = (void (**)(ImsResult *__hidden))v15;
    v39 = (uint64_t *)v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    SipOfferAnswer::updateWithOutgoingMessage(v15, (uint64_t)a2, (std::string *)(*a3 + 320), (uint64_t)v36);
    ImsResult::~ImsResult((ImsResult *)v36);
    if (v16)
    {
      v19 = (unint64_t *)&v16->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  v21 = *(_QWORD **)(a1 + 240);
  v22 = (std::__shared_weak_count *)a3[1];
  v34 = *a3;
  v35 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  SipDialog::sendAck(v21, a2, (uint64_t)&v34, a5);
  v25 = v35;
  if (v35)
  {
    v26 = (unint64_t *)&v35->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
LABEL_25:
  v31 = v45;
  if (v45)
  {
    v32 = (unint64_t *)&v45->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_1BF14C55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v14 - 64);
  _Unwind_Resume(a1);
}

BOOL SipSessionInterface::handleAck(SipSessionInterface *this, const SipRequest *a2)
{
  _DWORD *v4;
  unsigned int v5;
  SipAckReceiveHandler *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  SipAckReceiveHandler *v12;
  std::__shared_weak_count *v13;

  v4 = SipMessage::header<SipCSeqHeader>((uint64_t)a2);
  if (v4)
    v5 = v4[15];
  else
    v5 = 0;
  v12 = 0;
  v13 = 0;
  SipSessionInterface::ackReceiveHandlerForCseq((uint64_t)this, v5, &v12);
  v6 = v12;
  if (v12)
  {
    SipAckReceiveHandler::handleAck(v12, a2);
  }
  else
  {
    v7 = (*(uint64_t (**)(SipSessionInterface *))(*(_QWORD *)this + 32))(this);
    (*(void (**)(SipSessionInterface *, uint64_t))(*(_QWORD *)this + 16))(this, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"no handler for incoming ACK with CSeq ", 38);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" (maybe a dup?)", 15);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v6 != 0;
}

void sub_1BF14C6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipSessionInterface::handleResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  void **v11;
  SipAckRetransmitHandler *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v6 = (char *)SipMessage::header<SipCSeqHeader>(a2);
  v7 = (__int128 *)(v6 + 64);
  if (!v6)
    v7 = &ims::kEmptyString;
  v8 = *((unsigned __int8 *)v7 + 23);
  if ((v8 & 0x80u) == 0)
    v9 = *((unsigned __int8 *)v7 + 23);
  else
    v9 = *((_QWORD *)v7 + 1);
  if (v9 != 6)
    return 0;
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v7, "INVITE", *((_QWORD *)v7 + 1)))
      return 0;
  }
  else if (*((_BYTE *)v7 + 23))
  {
    v10 = "INVITE";
    while (*(unsigned __int8 *)v7 == *(unsigned __int8 *)v10)
    {
      v7 = (__int128 *)((char *)v7 + 1);
      ++v10;
      if (!--v8)
        goto LABEL_14;
    }
    return 0;
  }
LABEL_14:
  if ((*(_DWORD *)(a2 + 88) - 200) <= 0x63)
  {
    v11 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 552, (void **)(*(_QWORD *)a3 + 320));
    if ((void **)(a1 + 560) != v11)
    {
      v12 = (SipAckRetransmitHandler *)v11[7];
      v13 = (std::__shared_weak_count *)v11[8];
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      if (v12)
        SipAckRetransmitHandler::retransmitAck(v12);
      if (!v13)
        goto LABEL_25;
      v16 = (unint64_t *)&v13->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        if (v12)
          return 1;
      }
      else
      {
LABEL_25:
        if (v12)
          return 1;
      }
    }
  }
  return 0;
}

void sub_1BF14C83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipSessionInterface::sendResponseInTransaction(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v4 = *(std::__shared_weak_count **)(a1 + 240);
  v5 = (std::__shared_weak_count *)a3[1];
  v11 = *a3;
  v12 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  SipDialog::sendQueuedResponseInTransaction(v4, a2, &v11, a4);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BF14C8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipSessionInterface::removeClientTransaction(uint64_t **a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  std::string __p;

  v4 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 288) + 112))(*(_QWORD *)(*a2 + 288));
  v5 = v4[23];
  if ((v5 & 0x80u) == 0)
    v6 = v4[23];
  else
    v6 = *((_QWORD *)v4 + 1);
  if (v6 != 6)
    return;
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v4, "INVITE", *((_QWORD *)v4 + 1)))
      return;
    goto LABEL_12;
  }
  if (!v4[23])
  {
LABEL_12:
    v8 = *a2;
    if (*(char *)(*a2 + 343) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v8 + 320), *(_QWORD *)(v8 + 328));
    else
      __p = *(std::string *)(v8 + 320);
    SipSessionInterface::removeAckRetransmitHandler(a1, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  v7 = "INVITE";
  while (*v4 == *(unsigned __int8 *)v7)
  {
    ++v4;
    ++v7;
    if (!--v5)
      goto LABEL_12;
  }
}

void sub_1BF14C9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipSessionInterface::removeServerTransaction(SipSessionInterface *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  _DWORD *v8;
  unsigned int v9;

  v4 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 288) + 112))(*(_QWORD *)(*(_QWORD *)a2 + 288));
  v5 = v4[23];
  if ((v5 & 0x80u) == 0)
    v6 = v4[23];
  else
    v6 = *((_QWORD *)v4 + 1);
  if (v6 != 6)
    return;
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v4, "INVITE", *((_QWORD *)v4 + 1)))
      return;
    goto LABEL_13;
  }
  if (!v4[23])
  {
LABEL_13:
    v8 = SipMessage::header<SipCSeqHeader>(*(_QWORD *)(*(_QWORD *)a2 + 288));
    if (v8)
      v9 = v8[15];
    else
      v9 = 0;
    SipSessionInterface::removeAckReceiveHandler(a1, v9);
    return;
  }
  v7 = "INVITE";
  while (*v4 == *(unsigned __int8 *)v7)
  {
    ++v4;
    ++v7;
    if (!--v5)
      goto LABEL_13;
  }
}

void SipSessionInterface::terminationLocksReleased(SipSessionInterface *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  SipDialog *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = (*(uint64_t (**)(SipSessionInterface *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipSessionInterface *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"SipSessionInterface::terminationLocksReleased()", 47);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  v5 = (SipDialog *)*((_QWORD *)this + 30);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  v3 = (_QWORD *)((char *)this + 240);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100](v3);
  SipDialog::detachSession(v5);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF14CBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipSessionInterface::terminationLocksReleased(SipSessionInterface *this)
{
  SipSessionInterface::terminationLocksReleased((SipSessionInterface *)((char *)this - 104));
}

void SipSessionInterface::deinitialize(SipSessionInterface *this)
{
  char *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  v1 = (char *)this + 192;
  (*(void (**)(SipSessionInterface *))(*(_QWORD *)this + 88))(this);
  v5 = 0;
  v6 = 0;
  SipTypedTerminationLock<SipLockable>::set((uint64_t)v1, &v5);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF14CC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipSessionInterface::logPrefix(std::__shared_weak_count *this, ImsOutStream *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v11 = 0;
  v12 = 0;
  SipSessionInterface::stack(this, &v11);
  if (v11)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v11 + 104))(v9);
    (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" [", 2);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(void **__return_ptr, uint64_t *))(this[4].__shared_owners_ + 24))(__p, &this[4].__shared_owners_);
    (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"]: ", 3);
    *((_BYTE *)a2 + 17) = 0;
    if (v8 < 0)
      operator delete(__p[0]);
  }
  else
  {
    (*(void (**)(void **__return_ptr, uint64_t *))(this[4].__shared_owners_ + 24))(v9, &this[4].__shared_owners_);
    (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
    *((_BYTE *)a2 + 17) = 0;
  }
  if (v10 < 0)
    operator delete(v9[0]);
  v4 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF14CDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v20 - 32);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *SipSessionInterface::stack@<X0>(std::__shared_weak_count *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count_vtbl *v3;
  void (__cdecl *v4)(std::__shared_weak_count *__hidden);
  uint64_t v5;

  v3 = this[10].__vftable;
  if (v3 && (v4 = v3[5].~__shared_weak_count_0) != 0 && (v5 = *((_QWORD *)v4 + 17)) != 0)
  {
    *a2 = 0;
    a2[1] = 0;
    this = *(std::__shared_weak_count **)(v5 + 16);
    if (this)
    {
      this = std::__shared_weak_count::lock(this);
      a2[1] = this;
      if (this)
        *a2 = *(_QWORD *)(v5 + 8);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

uint64_t SipSessionInterface::setPreferredTransportGroup(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t result;

  v3 = a1 + 75;
  if (*a2)
  {
    std::shared_ptr<IpAddress>::operator=[abi:ne180100](v3, a2);
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"set preferred transport to ", 27);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 104))(*a2, v5);
  }
  else
  {
    std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100](v3);
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"cleared preferred transport", 27);
    *(_BYTE *)(v5 + 17) = 0;
  }
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  return result;
}

void SipSessionInterface::terminationReason(std::__shared_weak_count *a1@<X0>, uint64_t a2@<X1>, BambiCallTerminationReason *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  SipSessionInterface::stack(a1, &v8);
  SipStack::callTerminationReason(v8, a2, a3);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BF14CFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipAckRetransmitHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2DD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipAckRetransmitHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2DD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipAckRetransmitHandler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<SipAckReceiveHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2E20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipAckReceiveHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E2E20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipAckReceiveHandler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t SipSecurityMechanism::SipSecurityMechanism(uint64_t a1, const std::string *a2)
{
  *(_QWORD *)a1 = off_1E78D3E40;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  *(_QWORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 64) = 256;
  std::string::operator=((std::string *)(a1 + 8), a2);
  return a1;
}

void sub_1BF14D0EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = v4;
  *(_QWORD *)(v1 + 32) = v5;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3, *(_QWORD **)(v1 + 48));
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

double SipSecurityMechanism::preference(SipSecurityMechanism *this)
{
  void **v2;
  __int128 *v3;

  v2 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 40, (void **)&SipSecurityMechanism::kParameterPreference);
  if ((void **)((char *)this + 48) == v2)
    v3 = &ims::kEmptyString;
  else
    v3 = (__int128 *)(v2 + 7);
  if ((*((char *)v3 + 23) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)v3 + 23))
      return 0.0;
    return strtod((const char *)v3, 0);
  }
  if (*((_QWORD *)v3 + 1))
  {
    v3 = *(__int128 **)v3;
    return strtod((const char *)v3, 0);
  }
  return 0.0;
}

_QWORD *SipSecurityMechanism::fromString(std::string *a1)
{
  std::string::size_type v2;
  uint64_t v3;
  std::string::size_type size;
  std::string *p_s1;
  std::string *v6;
  _QWORD *v7;
  void (**v8)(SipGenericSecurityMechanism *__hidden);
  std::string __s1;

  memset(&__s1, 0, sizeof(__s1));
  v2 = ims::nextToken(a1, 0, &__s1, 0x3Bu);
  if (v2 == -1)
  {
    v7 = 0;
    goto LABEL_17;
  }
  ims::chomp(&__s1, "\r\n\t ", 3);
  v3 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    size = __s1.__r_.__value_.__l.__size_;
  if (size != 10)
    goto LABEL_14;
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      v6 = &SipIPSec3gppSecurityMechanism::kMechanismName;
      while (p_s1->__r_.__value_.__s.__data_[0] == v6->__r_.__value_.__s.__data_[0])
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        v6 = (std::string *)((char *)v6 + 1);
        if (!--v3)
          goto LABEL_15;
      }
      goto LABEL_14;
    }
LABEL_15:
    v7 = (_QWORD *)operator new();
    SipSecurityMechanism::SipSecurityMechanism((uint64_t)v7, &SipIPSec3gppSecurityMechanism::kMechanismName);
    v8 = &off_1E78DF128;
    goto LABEL_16;
  }
  if (!memcmp(__s1.__r_.__value_.__l.__data_, &SipIPSec3gppSecurityMechanism::kMechanismName, __s1.__r_.__value_.__l.__size_))goto LABEL_15;
LABEL_14:
  v7 = (_QWORD *)operator new();
  SipSecurityMechanism::SipSecurityMechanism((uint64_t)v7, &__s1);
  v8 = &off_1E78E2EB8;
LABEL_16:
  *v7 = v8;
  SipParameterMap::fromString((uint64_t)(v7 + 4), a1, v2, 0);
LABEL_17:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1BF14D2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1C3B87100](v15, 0x10B3C40D6137D5ALL);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void SipGenericSecurityMechanism::~SipGenericSecurityMechanism(SipGenericSecurityMechanism *this)
{
  SipSecurityMechanism::~SipSecurityMechanism(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipGenericSecurityMechanism::clone(SipGenericSecurityMechanism *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = v2;
  *(_QWORD *)v2 = off_1E78D3E40;
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v2 + 8), *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)(v2 + 8) = *(_OWORD *)((char *)this + 8);
    *(_QWORD *)(v2 + 24) = *((_QWORD *)this + 3);
  }
  *(_QWORD *)(v3 + 32) = &off_1E78B82D8;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)(v3 + 40), *((void ***)this + 5), (void **)this + 6);
  *(_BYTE *)(v3 + 65) = 1;
  *(_BYTE *)(v3 + 64) = *((_BYTE *)this + 64);
  *(_QWORD *)v3 = &off_1E78E2EB8;
  return v3;
}

void sub_1BF14D420(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40D6137D5ALL);
  _Unwind_Resume(a1);
}

uint64_t SipGenericSecurityMechanism::matches(SipGenericSecurityMechanism *this, const SipSecurityMechanism *a2)
{
  return 0;
}

void SipGeoPrivShapeCircle::SipGeoPrivShapeCircle(SipGeoPrivShapeCircle *this, double a2, double a3, double a4)
{
  void **v7;
  void **v8;
  void **v9;
  std::string v10;

  *(_OWORD *)((char *)this + 8) = 0u;
  v7 = (void **)((char *)this + 8);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_QWORD *)this = &off_1E78E2F10;
  *((_QWORD *)this + 7) = 0;
  v8 = (void **)((char *)this + 56);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  std::to_string(&v10, a2);
  if (*((char *)this + 31) < 0)
    operator delete(*v7);
  *(std::string *)v7 = v10;
  std::to_string(&v10, a3);
  v9 = (void **)((char *)this + 32);
  if (*((char *)this + 55) < 0)
    operator delete(*v9);
  *(_OWORD *)v9 = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 6) = *((_QWORD *)&v10.__r_.__value_.__l + 2);
  std::to_string(&v10, a4);
  if (*((char *)this + 79) < 0)
    operator delete(*v8);
  *(std::string *)v8 = v10;
}

void sub_1BF14D554(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 79) < 0)
    operator delete(*v2);
  SipWarning::~SipWarning((void **)v1);
  _Unwind_Resume(a1);
}

void SipGeoPrivShapeCircle::~SipGeoPrivShapeCircle(void **this)
{
  *this = &off_1E78E2F10;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  SipWarning::~SipWarning(this);
}

{
  SipGeoPrivShapeCircle::~SipGeoPrivShapeCircle(this);
  JUMPOUT(0x1C3B87100);
}

std::string *SipGeoPrivShapeCircle::format@<X0>(SipGeoPrivShapeCircle *this@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  int v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  const std::string::value_type *v11;
  char *v12;
  const std::string::value_type *v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;

  if (*((char *)this + 31) < 0)
  {
    if (*((_QWORD *)this + 2))
      goto LABEL_3;
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
  if (!*((_BYTE *)this + 31))
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "");
LABEL_3:
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v4 = (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "<gs:Circle srsName=\"urn:ogc:def:crs:EPSG::4326\">\r\n<gml:pos>");
  v5 = *((char *)this + 31);
  if (v5 >= 0)
    v6 = (char *)this + 8;
  else
    v6 = (const std::string::value_type *)*((_QWORD *)this + 1);
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)this + 31);
  else
    v7 = *((_QWORD *)this + 2);
  std::string::append(v4, v6, v7);
  std::string::append(a2, " ", 1uLL);
  v8 = *((char *)this + 55);
  if (v8 >= 0)
    v9 = (char *)this + 32;
  else
    v9 = (const std::string::value_type *)*((_QWORD *)this + 4);
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)this + 55);
  else
    v10 = *((_QWORD *)this + 5);
  std::string::append(a2, v9, v10);
  std::string::append(a2, "</gml:pos>\r\n<gs:radius uom=\"urn:ogc:def:uom:EPSG::9001\">", 0x38uLL);
  v13 = (const std::string::value_type *)*((_QWORD *)this + 7);
  v12 = (char *)this + 56;
  v11 = v13;
  v14 = v12[23];
  if (v14 >= 0)
    v15 = v12;
  else
    v15 = v11;
  if (v14 >= 0)
    v16 = v12[23];
  else
    v16 = *((_QWORD *)v12 + 1);
  std::string::append(a2, v15, v16);
  return std::string::append(a2, "</gs:radius>\r\n</gs:Circle>\r\n", 0x1CuLL);
}

void sub_1BF14D6F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t SipGeoPrivShapeCircle::clone(SipGeoPrivShapeCircle *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_QWORD *)v2 = &off_1E78E2F10;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = 0;
  std::string::operator=((std::string *)(v2 + 8), (const std::string *)((char *)this + 8));
  std::string::operator=((std::string *)(v2 + 32), (const std::string *)((char *)this + 32));
  std::string::operator=((std::string *)(v2 + 56), (const std::string *)((char *)this + 56));
  return v2;
}

void sub_1BF14D7A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 79) < 0)
    operator delete(*v2);
  SipWarning::~SipWarning((void **)v1);
  MEMORY[0x1C3B87100]();
  _Unwind_Resume(a1);
}

void SipGeoPrivShapeEllipsoid::SipGeoPrivShapeEllipsoid(SipGeoPrivShapeEllipsoid *this, double a2, double a3, double a4, double a5, double a6, double a7)
{
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  void **v18;
  __int128 v19;
  uint64_t v20;

  *(_OWORD *)((char *)this + 8) = 0u;
  v13 = (char *)this + 8;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_QWORD *)this = &off_1E78E2F40;
  *(_OWORD *)((char *)this + 56) = 0u;
  v14 = (char *)this + 56;
  *(_OWORD *)((char *)this + 104) = 0u;
  v15 = (char *)this + 104;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  v16 = (char *)this + 80;
  v17 = (char *)this + 128;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  toStringPrecision(a2, &v19, 5);
  if (*((char *)this + 31) < 0)
    operator delete(*(void **)v13);
  *(_OWORD *)v13 = v19;
  *((_QWORD *)v13 + 2) = v20;
  toStringPrecision(a3, &v19, 5);
  v18 = (void **)((char *)this + 32);
  if (*((char *)this + 55) < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = v19;
  *((_QWORD *)this + 6) = v20;
  toStringPrecision(a4, &v19, 1);
  if (*((char *)this + 79) < 0)
    operator delete(*(void **)v14);
  *(_OWORD *)v14 = v19;
  *((_QWORD *)v14 + 2) = v20;
  toStringPrecision(a5, &v19, 1);
  if (*((char *)this + 103) < 0)
    operator delete(*(void **)v16);
  *(_OWORD *)v16 = v19;
  *((_QWORD *)v16 + 2) = v20;
  toStringPrecision(a6, &v19, 1);
  if (*((char *)this + 127) < 0)
    operator delete(*(void **)v15);
  *(_OWORD *)v15 = v19;
  *((_QWORD *)v15 + 2) = v20;
  toStringPrecision(a7, &v19, 1);
  if (*((char *)this + 151) < 0)
    operator delete(*(void **)v17);
  *(_OWORD *)v17 = v19;
  *((_QWORD *)v17 + 2) = v20;
}

void sub_1BF14D9A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  if (*(char *)(v1 + 151) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 127) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 103) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 79) < 0)
    operator delete(*v2);
  SipWarning::~SipWarning((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t toStringPrecision(double a1, _QWORD *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[4];
  void *__p[2];
  __int128 v10;
  __int128 v11;
  _OWORD v12[9];
  uint64_t v13;

  v13 = 0;
  v11 = 0u;
  memset(v12, 0, sizeof(v12));
  *(_OWORD *)__p = 0u;
  v10 = 0u;
  memset(v8, 0, sizeof(v8));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v5 = *(_QWORD *)&v8[0];
  if (a3 >= 15)
    v6 = 15;
  else
    v6 = a3;
  *(_QWORD *)((char *)&v8[1] + *(_QWORD *)(*(_QWORD *)&v8[0] - 24)) = v6;
  *(_DWORD *)((char *)v8 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v8 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v8 + 8, a2);
  *(_QWORD *)&v8[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(*(_QWORD *)&v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v8[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v10) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v12);
}

void sub_1BF14DB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipGeoPrivShapeEllipsoid::~SipGeoPrivShapeEllipsoid(void **this)
{
  *this = &off_1E78E2F40;
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  SipWarning::~SipWarning(this);
}

{
  SipGeoPrivShapeEllipsoid::~SipGeoPrivShapeEllipsoid(this);
  JUMPOUT(0x1C3B87100);
}

std::string *SipGeoPrivShapeEllipsoid::format@<X0>(SipGeoPrivShapeEllipsoid *this@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  int v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  const std::string::value_type *v20;
  char *v21;
  const std::string::value_type *v22;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;

  if (*((char *)this + 31) < 0)
  {
    if (*((_QWORD *)this + 2))
      goto LABEL_3;
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
  if (!*((_BYTE *)this + 31))
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "");
LABEL_3:
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v4 = (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "<gs:Ellipsoid srsName=\"urn:ogc:def:crs:EPSG::4979\">\r\n<gml:pos>");
  v5 = *((char *)this + 31);
  if (v5 >= 0)
    v6 = (char *)this + 8;
  else
    v6 = (const std::string::value_type *)*((_QWORD *)this + 1);
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)this + 31);
  else
    v7 = *((_QWORD *)this + 2);
  std::string::append(v4, v6, v7);
  std::string::append(a2, " ", 1uLL);
  v8 = *((char *)this + 55);
  if (v8 >= 0)
    v9 = (char *)this + 32;
  else
    v9 = (const std::string::value_type *)*((_QWORD *)this + 4);
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)this + 55);
  else
    v10 = *((_QWORD *)this + 5);
  std::string::append(a2, v9, v10);
  std::string::append(a2, " ", 1uLL);
  v11 = *((char *)this + 127);
  if (v11 >= 0)
    v12 = (char *)this + 104;
  else
    v12 = (const std::string::value_type *)*((_QWORD *)this + 13);
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)this + 127);
  else
    v13 = *((_QWORD *)this + 14);
  std::string::append(a2, v12, v13);
  std::string::append(a2, "</gml:pos>\r\n<gs:semiMajorAxis uom=\"urn:ogc:def:uom:EPSG::9001\">", 0x3FuLL);
  v14 = *((char *)this + 79);
  if (v14 >= 0)
    v15 = (char *)this + 56;
  else
    v15 = (const std::string::value_type *)*((_QWORD *)this + 7);
  if (v14 >= 0)
    v16 = *((unsigned __int8 *)this + 79);
  else
    v16 = *((_QWORD *)this + 8);
  std::string::append(a2, v15, v16);
  std::string::append(a2, "</gs:semiMajorAxis>\r\n<gs:semiMinorAxis uom=\"urn:ogc:def:uom:EPSG::9001\">", 0x48uLL);
  v17 = *((char *)this + 103);
  if (v17 >= 0)
    v18 = (char *)this + 80;
  else
    v18 = (const std::string::value_type *)*((_QWORD *)this + 10);
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)this + 103);
  else
    v19 = *((_QWORD *)this + 11);
  std::string::append(a2, v18, v19);
  std::string::append(a2, "</gs:semiMinorAxis>\r\n<gs:verticalAxis uom=\"urn:ogc:def:uom:EPSG::9001\">", 0x47uLL);
  v22 = (const std::string::value_type *)*((_QWORD *)this + 16);
  v21 = (char *)this + 128;
  v20 = v22;
  v23 = v21[23];
  if (v23 >= 0)
    v24 = v21;
  else
    v24 = v20;
  if (v23 >= 0)
    v25 = v21[23];
  else
    v25 = *((_QWORD *)v21 + 1);
  std::string::append(a2, v24, v25);
  return std::string::append(a2, "</gs:verticalAxis>\r\n<gs:orientation uom=\"urn:ogc:def:uom:EPSG::9102\">0</gs:orientation>\r\n</gs:Ellipsoid>\r\n", 0x6AuLL);
}

void sub_1BF14DD9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t SipGeoPrivShapeEllipsoid::clone(SipGeoPrivShapeEllipsoid *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_QWORD *)v2 = &off_1E78E2F40;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  std::string::operator=((std::string *)(v2 + 8), (const std::string *)((char *)this + 8));
  std::string::operator=((std::string *)(v2 + 32), (const std::string *)((char *)this + 32));
  std::string::operator=((std::string *)(v2 + 56), (const std::string *)((char *)this + 56));
  std::string::operator=((std::string *)(v2 + 80), (const std::string *)((char *)this + 80));
  std::string::operator=((std::string *)(v2 + 104), (const std::string *)((char *)this + 104));
  std::string::operator=((std::string *)(v2 + 128), (const std::string *)((char *)this + 128));
  return v2;
}

void sub_1BF14DE8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  if (*(char *)(v1 + 151) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 127) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 103) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 79) < 0)
    operator delete(*v2);
  SipWarning::~SipWarning((void **)v1);
  MEMORY[0x1C3B87100]();
  _Unwind_Resume(a1);
}

uint64_t SipGeoLocationBody::SipGeoLocationBody(uint64_t a1, uint64_t a2, const std::string *a3, const std::string *a4, int a5, char a6, char a7, char a8)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _BYTE *v15;
  std::string *v16;
  std::string *v17;
  char *v18;
  _BYTE *v19;
  __int128 v21;
  uint64_t v22;

  *(_QWORD *)a1 = &off_1E78E2F70;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 24) = &off_1E78D08F8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = &off_1E78BFCE8;
  v12 = a1 + 16;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 80) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_BYTE *)(a1 + 113) = 1;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 344) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 352) = a1 + 360;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 384) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 392) = a1 + 400;
  *(_BYTE *)(a1 + 112) = 1;
  *(_WORD *)(a1 + 376) = 257;
  *(_WORD *)(a1 + 416) = 257;
  *(_BYTE *)(a1 + 336) = 0;
  v13 = a1 + 424;
  v14 = (char *)(a1 + 448);
  v15 = (_BYTE *)(a1 + 472);
  v16 = (std::string *)(a1 + 592);
  v17 = (std::string *)(a1 + 616);
  *(_QWORD *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_BYTE *)(a1 + 8) = a6;
  *(_BYTE *)(a1 + 9) = a7;
  *(_BYTE *)(a1 + 10) = a8;
  SipUri::operator=((SipUri *)(a1 + 16), a2);
  SipUri::asString(v12, 1, &v21);
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)v13);
  *(_OWORD *)v13 = v21;
  *(_QWORD *)(v13 + 16) = v22;
  if (*(char *)(a1 + 471) < 0)
  {
    *(_QWORD *)(a1 + 456) = 4;
    v18 = *(char **)(a1 + 448);
  }
  else
  {
    *(_BYTE *)(a1 + 471) = 4;
    v18 = v14;
  }
  strcpy(v18, "Wifi");
  if (*(char *)(a1 + 495) < 0)
  {
    *(_QWORD *)(a1 + 480) = 0;
    v19 = *(_BYTE **)(a1 + 472);
  }
  else
  {
    *(_BYTE *)(a1 + 495) = 0;
    v19 = v15;
  }
  *v19 = 0;
  std::string::operator=(v16, a3);
  *(_DWORD *)(a1 + 656) = a5;
  std::string::operator=(v17, a4);
  return a1;
}

void sub_1BF14E0EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  SipUri *v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1 + 640);
  if (*(char *)(v1 + 639) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 615) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 591) < 0)
    operator delete(*(void **)(v1 + 568));
  if (*(char *)(v1 + 567) < 0)
    operator delete(*(void **)(v1 + 544));
  if (*(char *)(v1 + 543) < 0)
    operator delete(*(void **)(v1 + 520));
  if (*(char *)(v1 + 519) < 0)
    operator delete(*(void **)(v1 + 496));
  if (*(char *)(v1 + 495) < 0)
    operator delete(*v7);
  if (*(char *)(v1 + 471) < 0)
    operator delete(*v6);
  if (*(char *)(v1 + 447) < 0)
    operator delete(*v5);
  SipUri::~SipUri(v2);
  _Unwind_Resume(a1);
}

std::string *SipGeoLocationBody::_timeStamp(std::string *this, uint64_t a2)
{
  std::string *v4;
  int v5;
  const std::string::value_type *v6;
  std::string::size_type v7;

  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  v4 = (std::string *)std::string::basic_string[abi:ne180100]<0>(this, "<dm:timestamp>");
  v5 = *(char *)(a2 + 495);
  if (v5 >= 0)
    v6 = (const std::string::value_type *)(a2 + 472);
  else
    v6 = *(const std::string::value_type **)(a2 + 472);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 495);
  else
    v7 = *(_QWORD *)(a2 + 480);
  std::string::append(v4, v6, v7);
  return std::string::append(this, "</dm:timestamp>\r\n", 0x11uLL);
}

void sub_1BF14E204(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

double SipGeoLocationBody::setCountry(uint64_t a1, const std::string *a2)
{
  double result;
  void **v4;
  __int128 v5;
  uint64_t v6;
  time_t v7[9];
  uint64_t v8;

  std::string::operator=((std::string *)(a1 + 496), a2);
  if (*(char *)(a1 + 495) < 0)
  {
    if (*(_QWORD *)(a1 + 480))
      return result;
  }
  else if (*(_BYTE *)(a1 + 495))
  {
    return result;
  }
  v4 = (void **)(a1 + 472);
  v8 = 0;
  memset(&v7[1], 0, 64);
  v7[0] = time(0);
  gmtime_r(v7, (tm *)&v7[2]);
  ImsInternetDateTime::toString((ImsInternetDateTime *)v7, &v5);
  if (*(char *)(a1 + 495) < 0)
    operator delete(*v4);
  result = *(double *)&v5;
  *(_OWORD *)v4 = v5;
  *(_QWORD *)(a1 + 488) = v6;
  return result;
}

double SipGeoLocationBody::setTimestamp(SipGeoLocationBody *this, double a2)
{
  time_t v3;
  void **v4;
  double result;
  __int128 v6;
  uint64_t v7;
  time_t v8[9];
  uint64_t v9;

  if (a2 == 0.0)
    v3 = time(0);
  else
    v3 = (uint64_t)a2;
  v9 = 0;
  memset(&v8[1], 0, 64);
  v8[0] = v3;
  gmtime_r(v8, (tm *)&v8[2]);
  ImsInternetDateTime::toString((ImsInternetDateTime *)v8, &v6);
  v4 = (void **)((char *)this + 472);
  if (*((char *)this + 495) < 0)
    operator delete(*v4);
  result = *(double *)&v6;
  *(_OWORD *)v4 = v6;
  *((_QWORD *)this + 61) = v7;
  return result;
}

double SipGeoLocationBody::setEllipsoid(SipGeoLocationBody *a1, double *a2)
{
  SipGeoPrivShapeEllipsoid *v4;

  v4 = (SipGeoPrivShapeEllipsoid *)operator new();
  SipGeoPrivShapeEllipsoid::SipGeoPrivShapeEllipsoid(v4, *a2, a2[1], a2[2], a2[2], a2[3], a2[4]);
  std::shared_ptr<SipGeoPrivShape>::reset[abi:ne180100]<SipGeoPrivShapeEllipsoid,void>((_QWORD *)a1 + 80, (uint64_t)v4);
  return SipGeoLocationBody::setTimestamp(a1, a2[5]);
}

void sub_1BF14E3D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1093C4055A416EELL);
  _Unwind_Resume(a1);
}

void std::shared_ptr<SipGeoPrivShape>::reset[abi:ne180100]<SipGeoPrivShapeEllipsoid,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<SipGeoPrivShape>::shared_ptr[abi:ne180100]<SipGeoPrivShapeEllipsoid,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

double SipGeoLocationBody::setCircle(SipGeoLocationBody *this, double a2, double a3, double a4, double a5)
{
  SipGeoPrivShapeCircle *v10;

  v10 = (SipGeoPrivShapeCircle *)operator new();
  SipGeoPrivShapeCircle::SipGeoPrivShapeCircle(v10, a2, a3, a4);
  std::shared_ptr<SipGeoPrivShape>::reset[abi:ne180100]<SipGeoPrivShapeCircle,void>((_QWORD *)this + 80, (uint64_t)v10);
  return SipGeoLocationBody::setTimestamp(this, a5);
}

void sub_1BF14E4E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1093C406ED0B5F1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<SipGeoPrivShape>::reset[abi:ne180100]<SipGeoPrivShapeCircle,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<SipGeoPrivShape>::shared_ptr[abi:ne180100]<SipGeoPrivShapeCircle,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

std::string *SipGeoLocationBody::setFullCivic(uint64_t a1, const std::string *a2, const std::string *a3, const std::string *a4, const std::string *a5)
{
  SipGeoLocationBody::setCountry(a1, a2);
  std::string::operator=((std::string *)(a1 + 520), a3);
  std::string::operator=((std::string *)(a1 + 544), a4);
  return std::string::operator=((std::string *)(a1 + 568), a5);
}

void SipGeoLocationBody::encode(SipGeoLocationBody *this, ImsOutStream *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  uint64_t v21;
  std::string *v22;
  std::string::size_type v23;
  uint64_t v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  void **v29;
  std::string::size_type v30;
  std::string *v31;
  int v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  int v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  int v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  int v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  std::string *v44;
  std::string::size_type v45;
  uint64_t v46;
  std::string *v47;
  int v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  std::string::size_type v56;
  std::string *v57;
  std::string::size_type v58;
  void *v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  std::string::size_type v63;
  std::string v64;
  std::string v65;
  void *__p[2];
  int64_t v67;
  std::string v68;
  std::string v69;

  memset(&v65, 0, sizeof(v65));
  std::string::basic_string[abi:ne180100]<0>(&v65, "<?xml version=\"1.0\"?>\r\n");
  memset(&v69, 0, sizeof(v69));
  v4 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v69, "<presence xmlns=\"urn:ietf:params:xml:ns:pidf\" xmlns:dm=\"urn:ietf:params:xml:ns:pidf:data-model\" xmlns:gp=\"urn:ietf:params:xml:ns:pidf:geopriv10\" xmlns:gml=\"http://www.opengis.net/gml\" xmlns:gs=\"http://www.opengis.net/pidflo/1.0\"");
  if (*((char *)this + 519) < 0)
  {
    if (!*((_QWORD *)this + 63))
      goto LABEL_6;
    goto LABEL_5;
  }
  if (*((_BYTE *)this + 519))
LABEL_5:
    std::string::append(v4, " xmlns:cl=\"urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr\"", 0x3BuLL);
LABEL_6:
  v5 = *((_QWORD *)this + 80);
  if (!v5)
    goto LABEL_12;
  if (*(char *)(v5 + 31) < 0)
  {
    if (!*(_QWORD *)(v5 + 16))
      goto LABEL_12;
    goto LABEL_11;
  }
  if (*(_BYTE *)(v5 + 31))
LABEL_11:
    std::string::append(&v69, " xmlns:con=\"urn:ietf:params:xml:ns:geopriv:conf\"", 0x30uLL);
LABEL_12:
  std::string::append(&v69, " entity=\"", 9uLL);
  v6 = *((char *)this + 447);
  if (v6 >= 0)
    v7 = (char *)this + 424;
  else
    v7 = (const std::string::value_type *)*((_QWORD *)this + 53);
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)this + 447);
  else
    v8 = *((_QWORD *)this + 54);
  std::string::append(&v69, v7, v8);
  std::string::append(&v69, "\">\r\n", 4uLL);
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v69;
  else
    v9 = (std::string *)v69.__r_.__value_.__r.__words[0];
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  else
    size = v69.__r_.__value_.__l.__size_;
  std::string::append(&v65, (const std::string::value_type *)v9, size);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  if (*((_BYTE *)this + 9))
  {
    memset(&v69, 0, sizeof(v69));
    v11 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v69, "<tuple id=\"");
    v12 = *((char *)this + 471);
    if (v12 >= 0)
      v13 = (char *)this + 448;
    else
      v13 = (const std::string::value_type *)*((_QWORD *)this + 56);
    if (v12 >= 0)
      v14 = *((unsigned __int8 *)this + 471);
    else
      v14 = *((_QWORD *)this + 57);
    std::string::append(v11, v13, v14);
    std::string::append(&v69, "\">\r\n<status>\r\n", 0xEuLL);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v69;
    else
      v15 = (std::string *)v69.__r_.__value_.__r.__words[0];
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    else
      v16 = v69.__r_.__value_.__l.__size_;
  }
  else
  {
    memset(&v69, 0, sizeof(v69));
    v17 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v69, "<dm:device id=\"");
    v18 = *((char *)this + 471);
    if (v18 >= 0)
      v19 = (char *)this + 448;
    else
      v19 = (const std::string::value_type *)*((_QWORD *)this + 56);
    if (v18 >= 0)
      v20 = *((unsigned __int8 *)this + 471);
    else
      v20 = *((_QWORD *)this + 57);
    std::string::append(v17, v19, v20);
    std::string::append(&v69, "\">\r\n", 4uLL);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v69;
    else
      v15 = (std::string *)v69.__r_.__value_.__r.__words[0];
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    else
      v16 = v69.__r_.__value_.__l.__size_;
  }
  std::string::append(&v65, (const std::string::value_type *)v15, v16);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  memset(&v64, 0, sizeof(v64));
  std::string::basic_string[abi:ne180100]<0>(&v64, "<gp:geopriv>\r\n<gp:location-info>\r\n");
  v21 = *((_QWORD *)this + 80);
  if (!v21)
    goto LABEL_70;
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v21 + 24))(&v69);
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v69;
  else
    v22 = (std::string *)v69.__r_.__value_.__r.__words[0];
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  else
    v23 = v69.__r_.__value_.__l.__size_;
  std::string::append(&v64, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  v24 = *((_QWORD *)this + 80);
  if (!v24)
    goto LABEL_70;
  if (*(char *)(v24 + 31) < 0)
  {
    if (*(_QWORD *)(v24 + 16))
      goto LABEL_65;
LABEL_70:
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    goto LABEL_71;
  }
  if (!*(_BYTE *)(v24 + 31))
    goto LABEL_70;
LABEL_65:
  std::to_string(&v68, *((_DWORD *)this + 164));
  v25 = std::string::insert(&v68, 0, "<con:confidence pdf=\"normal\">", 0x1DuLL);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v69.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v69, "</con:confidence>\r\n", 0x13uLL);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v67 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
LABEL_71:
  if (v67 >= 0)
    v29 = __p;
  else
    v29 = (void **)__p[0];
  if (v67 >= 0)
    v30 = HIBYTE(v67);
  else
    v30 = (std::string::size_type)__p[1];
  std::string::append(&v64, (const std::string::value_type *)v29, v30);
  if (SHIBYTE(v67) < 0)
    operator delete(__p[0]);
  if ((*((char *)this + 519) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 519))
      goto LABEL_81;
LABEL_91:
    std::string::basic_string[abi:ne180100]<0>(&v69, "");
    goto LABEL_123;
  }
  if (!*((_QWORD *)this + 63))
    goto LABEL_91;
LABEL_81:
  memset(&v69, 0, sizeof(v69));
  v31 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v69, "<cl:civicAddress>\r\n<cl:country>");
  v32 = *((char *)this + 519);
  if (v32 >= 0)
    v33 = (char *)this + 496;
  else
    v33 = (const std::string::value_type *)*((_QWORD *)this + 62);
  if (v32 >= 0)
    v34 = *((unsigned __int8 *)this + 519);
  else
    v34 = *((_QWORD *)this + 63);
  std::string::append(v31, v33, v34);
  std::string::append(&v69, "</cl:country>\r\n", 0xFuLL);
  if (*((char *)this + 543) < 0)
  {
    if (!*((_QWORD *)this + 66))
      goto LABEL_100;
  }
  else if (!*((_BYTE *)this + 543))
  {
    goto LABEL_100;
  }
  std::string::append(&v69, "<cl:A1>", 7uLL);
  v35 = *((char *)this + 543);
  if (v35 >= 0)
    v36 = (char *)this + 520;
  else
    v36 = (const std::string::value_type *)*((_QWORD *)this + 65);
  if (v35 >= 0)
    v37 = *((unsigned __int8 *)this + 543);
  else
    v37 = *((_QWORD *)this + 66);
  std::string::append(&v69, v36, v37);
  std::string::append(&v69, "</cl:A1>\r\n", 0xAuLL);
LABEL_100:
  if (*((char *)this + 567) < 0)
  {
    if (!*((_QWORD *)this + 69))
      goto LABEL_111;
  }
  else if (!*((_BYTE *)this + 567))
  {
    goto LABEL_111;
  }
  std::string::append(&v69, "<cl:A3>", 7uLL);
  v38 = *((char *)this + 567);
  if (v38 >= 0)
    v39 = (char *)this + 544;
  else
    v39 = (const std::string::value_type *)*((_QWORD *)this + 68);
  if (v38 >= 0)
    v40 = *((unsigned __int8 *)this + 567);
  else
    v40 = *((_QWORD *)this + 69);
  std::string::append(&v69, v39, v40);
  std::string::append(&v69, "</cl:A3>\r\n", 0xAuLL);
LABEL_111:
  if ((*((char *)this + 591) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 591))
      goto LABEL_122;
LABEL_115:
    std::string::append(&v69, "<cl:PC>", 7uLL);
    v41 = *((char *)this + 591);
    if (v41 >= 0)
      v42 = (char *)this + 568;
    else
      v42 = (const std::string::value_type *)*((_QWORD *)this + 71);
    if (v41 >= 0)
      v43 = *((unsigned __int8 *)this + 591);
    else
      v43 = *((_QWORD *)this + 72);
    std::string::append(&v69, v42, v43);
    std::string::append(&v69, "</cl:PC>\r\n", 0xAuLL);
    goto LABEL_122;
  }
  if (*((_QWORD *)this + 72))
    goto LABEL_115;
LABEL_122:
  std::string::append(&v69, "</cl:civicAddress>\r\n", 0x14uLL);
LABEL_123:
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = &v69;
  else
    v44 = (std::string *)v69.__r_.__value_.__r.__words[0];
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  else
    v45 = v69.__r_.__value_.__l.__size_;
  std::string::append(&v64, (const std::string::value_type *)v44, v45);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  std::string::append(&v64, "</gp:location-info>\r\n", 0x15uLL);
  if (*((char *)this + 639) < 0)
  {
    if (!*((_QWORD *)this + 78))
      goto LABEL_146;
  }
  else if (!*((_BYTE *)this + 639))
  {
    goto LABEL_146;
  }
  v46 = *((_QWORD *)this + 80);
  if (!v46)
    goto LABEL_146;
  if (*(char *)(v46 + 31) < 0)
  {
    if (*(_QWORD *)(v46 + 16))
      goto LABEL_138;
LABEL_146:
    std::string::basic_string[abi:ne180100]<0>(&v69, "");
    goto LABEL_147;
  }
  if (!*(_BYTE *)(v46 + 31))
    goto LABEL_146;
LABEL_138:
  memset(&v69, 0, sizeof(v69));
  v47 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v69, "<gp:method>");
  v48 = *((char *)this + 639);
  if (v48 >= 0)
    v49 = (char *)this + 616;
  else
    v49 = (const std::string::value_type *)*((_QWORD *)this + 77);
  if (v48 >= 0)
    v50 = *((unsigned __int8 *)this + 639);
  else
    v50 = *((_QWORD *)this + 78);
  std::string::append(v47, v49, v50);
  std::string::append(&v69, "</gp:method>\r\n", 0xEuLL);
LABEL_147:
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v51 = &v69;
  else
    v51 = (std::string *)v69.__r_.__value_.__r.__words[0];
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  else
    v52 = v69.__r_.__value_.__l.__size_;
  std::string::append(&v64, (const std::string::value_type *)v51, v52);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  std::string::append(&v64, "<gp:usage-rules/>\r\n</gp:geopriv>\r\n", 0x22uLL);
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = &v64;
  else
    v53 = (std::string *)v64.__r_.__value_.__r.__words[0];
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v54 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  else
    v54 = v64.__r_.__value_.__l.__size_;
  std::string::append(&v65, (const std::string::value_type *)v53, v54);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (*((_BYTE *)this + 9))
  {
    memset(&v68, 0, sizeof(v68));
    std::string::basic_string[abi:ne180100]<0>(&v68, "</status>\r\n");
    SipGeoLocationBody::_timeStamp(&v69, (uint64_t)this);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v55 = &v69;
    else
      v55 = (std::string *)v69.__r_.__value_.__r.__words[0];
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v56 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    else
      v56 = v69.__r_.__value_.__l.__size_;
    std::string::append(&v68, (const std::string::value_type *)v55, v56);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    std::string::append(&v68, "</tuple>\r\n", 0xAuLL);
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v57 = &v68;
    else
      v57 = (std::string *)v68.__r_.__value_.__r.__words[0];
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
    else
      v58 = v68.__r_.__value_.__l.__size_;
    std::string::append(&v65, (const std::string::value_type *)v57, v58);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    {
      v59 = (void *)v68.__r_.__value_.__r.__words[0];
LABEL_188:
      operator delete(v59);
    }
  }
  else
  {
    memset(&v69, 0, sizeof(v69));
    SipGeoLocationBody::_timeStamp(&v69, (uint64_t)this);
    std::string::append(&v69, "</dm:device>\r\n", 0xEuLL);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v60 = &v69;
    else
      v60 = (std::string *)v69.__r_.__value_.__r.__words[0];
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v61 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    else
      v61 = v69.__r_.__value_.__l.__size_;
    std::string::append(&v65, (const std::string::value_type *)v60, v61);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    {
      v59 = (void *)v69.__r_.__value_.__r.__words[0];
      goto LABEL_188;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v69, "</presence>\r\n");
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v62 = &v69;
  else
    v62 = (std::string *)v69.__r_.__value_.__r.__words[0];
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v63 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  else
    v63 = v69.__r_.__value_.__l.__size_;
  std::string::append(&v65, (const std::string::value_type *)v62, v63);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 32))(a2, &v65);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
}

void sub_1BF14EDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (*(char *)(v32 - 41) < 0)
    operator delete(*(void **)(v32 - 64));
  if (a32 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

unint64_t SipGeoLocationBody::contentLength(SipGeoLocationBody *this)
{
  unint64_t v2;
  void *v4[2];
  unsigned __int8 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v6, 1);
  (*(void (**)(SipGeoLocationBody *, __int128 *, _QWORD))(*(_QWORD *)this + 64))(this, &v6, 0);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v7 + 1) + 8, v4);
  if ((char)v5 < 0)
  {
    v2 = (unint64_t)v4[1];
    operator delete(v4[0]);
  }
  else
  {
    v2 = v5;
  }
  *(_QWORD *)&v6 = &off_1E78D7A10;
  if ((_BYTE)v7 && *((_QWORD *)&v6 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v6 + 1) + 8))(*((_QWORD *)&v6 + 1));
  return v2;
}

void sub_1BF14EFD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15)
  {
    if (a14)
      (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipGeoLocationBody::decode()
{
  return 1;
}

{
  return 1;
}

void SipGeoLocationBody::addedToPart(SipGeoLocationBody *this, SipBodyPart *a2)
{
  char *v4;
  std::string __p;
  void *v6[2];
  char v7;

  v4 = (char *)this + 16;
  if (*((_BYTE *)this + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "Content-ID");
    SipUri::getContentIdString((uint64_t)v4, (uint64_t)this + 592, 0, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "Content-ID");
    SipUri::asString((uint64_t)v4, 0, &__p);
  }
  SipBodyPart::setHeader((unint64_t *)a2, (uint64_t)v6, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v7 < 0)
    operator delete(v6[0]);
  if (*((_BYTE *)this + 10))
    SipBodyPart::setHeader((unint64_t *)a2, (uint64_t)"Content-Disposition", &SipGeoLocationBody::kContentDisposition);
}

void sub_1BF14F0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void SipGeoLocationBody::~SipGeoLocationBody(void **this)
{
  SipGeoLocationBody::~SipGeoLocationBody(this);
  JUMPOUT(0x1C3B87100);
}

{
  *this = &off_1E78E2F70;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 80));
  if (*((char *)this + 639) < 0)
    operator delete(this[77]);
  if (*((char *)this + 615) < 0)
    operator delete(this[74]);
  if (*((char *)this + 591) < 0)
    operator delete(this[71]);
  if (*((char *)this + 567) < 0)
    operator delete(this[68]);
  if (*((char *)this + 543) < 0)
    operator delete(this[65]);
  if (*((char *)this + 519) < 0)
    operator delete(this[62]);
  if (*((char *)this + 495) < 0)
    operator delete(this[59]);
  if (*((char *)this + 471) < 0)
    operator delete(this[56]);
  if (*((char *)this + 447) < 0)
    operator delete(this[53]);
  SipUri::~SipUri((SipUri *)(this + 2));
}

uint64_t SipGeoLocationBody::clone(SipGeoLocationBody *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E78E2F70;
  *(_QWORD *)(v2 + 16) = &off_1E78BFCE8;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 24) = &off_1E78D08F8;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_WORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 80) = &off_1E78B82D8;
  *(_QWORD *)(v2 + 88) = v2 + 96;
  *(_BYTE *)(v2 + 113) = 1;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_QWORD *)(v2 + 328) = 0;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_QWORD *)(v2 + 360) = 0;
  *(_QWORD *)(v2 + 368) = 0;
  *(_QWORD *)(v2 + 344) = &off_1E78B82D8;
  *(_QWORD *)(v2 + 352) = v2 + 360;
  *(_QWORD *)(v2 + 400) = 0;
  *(_QWORD *)(v2 + 408) = 0;
  *(_QWORD *)(v2 + 384) = &off_1E78B82D8;
  *(_QWORD *)(v2 + 392) = v2 + 400;
  *(_BYTE *)(v2 + 112) = 1;
  *(_WORD *)(v2 + 376) = 257;
  *(_WORD *)(v2 + 416) = 257;
  *(_BYTE *)(v2 + 336) = 0;
  *(_QWORD *)(v2 + 648) = 0;
  *(_OWORD *)(v2 + 616) = 0u;
  *(_OWORD *)(v2 + 632) = 0u;
  *(_OWORD *)(v2 + 584) = 0u;
  *(_OWORD *)(v2 + 600) = 0u;
  *(_OWORD *)(v2 + 552) = 0u;
  *(_OWORD *)(v2 + 568) = 0u;
  *(_OWORD *)(v2 + 520) = 0u;
  *(_OWORD *)(v2 + 536) = 0u;
  *(_OWORD *)(v2 + 488) = 0u;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 456) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(_BYTE *)(v2 + 8) = *((_BYTE *)this + 8);
  *(_WORD *)(v2 + 9) = *(_WORD *)((char *)this + 9);
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  SipUri::operator=((SipUri *)(v2 + 16), (uint64_t)this + 16);
  std::string::operator=((std::string *)(v2 + 424), (const std::string *)((char *)this + 424));
  std::string::operator=((std::string *)(v2 + 448), (const std::string *)((char *)this + 448));
  std::string::operator=((std::string *)(v2 + 472), (const std::string *)((char *)this + 472));
  std::string::operator=((std::string *)(v2 + 496), (const std::string *)((char *)this + 496));
  std::string::operator=((std::string *)(v2 + 520), (const std::string *)((char *)this + 520));
  std::string::operator=((std::string *)(v2 + 544), (const std::string *)((char *)this + 544));
  std::string::operator=((std::string *)(v2 + 568), (const std::string *)((char *)this + 568));
  std::string::operator=((std::string *)(v2 + 592), (const std::string *)((char *)this + 592));
  std::string::operator=((std::string *)(v2 + 616), (const std::string *)((char *)this + 616));
  *(_DWORD *)(v2 + 656) = *((_DWORD *)this + 164);
  v3 = *((_QWORD *)this + 80);
  if (v3)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    v5 = (_QWORD *)operator new();
    *v5 = &off_1E78E3068;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v4;
    *(_QWORD *)(v2 + 640) = v4;
    v6 = *(std::__shared_weak_count **)(v2 + 648);
    *(_QWORD *)(v2 + 648) = v5;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  return v2;
}

void sub_1BF14F3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void **a11, void **a12)
{
  char *v12;
  SipUri *v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;
  void **v19;
  void **v20;
  uint64_t v21;

  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(v12 + 640));
  if (v12[639] < 0)
    operator delete(*v16);
  if (v12[615] < 0)
    operator delete(*v15);
  if (v12[591] < 0)
    operator delete(*v20);
  if (v12[567] < 0)
    operator delete(*v19);
  if (v12[543] < 0)
    operator delete(*v18);
  if (v12[519] < 0)
    operator delete(*v17);
  if (v12[495] < 0)
    operator delete(*a11);
  if (v12[471] < 0)
    operator delete(*a12);
  if (v12[447] < 0)
    operator delete(*v14);
  SipUri::~SipUri(v13);
  MEMORY[0x1C3B87100](v12, 0x10B3C4094684CABLL);
  _Unwind_Resume(a1);
}

const char *SipGeoLocationBody::contentType(SipGeoLocationBody *this)
{
  return "application/pidf+xml";
}

void std::__shared_ptr_pointer<SipGeoPrivShape *,std::shared_ptr<SipGeoPrivShape>::__shared_ptr_default_delete<SipGeoPrivShape,SipGeoPrivShape>,std::allocator<SipGeoPrivShape>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_pointer<SipGeoPrivShape *,std::shared_ptr<SipGeoPrivShape>::__shared_ptr_default_delete<SipGeoPrivShape,SipGeoPrivShape>,std::allocator<SipGeoPrivShape>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<SipGeoPrivShape *,std::shared_ptr<SipGeoPrivShape>::__shared_ptr_default_delete<SipGeoPrivShape,SipGeoPrivShape>,std::allocator<SipGeoPrivShape>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<SipGeoPrivShape>::shared_ptr[abi:ne180100]<SipGeoPrivShapeEllipsoid,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E78E30E0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1BF14F668(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<SipGeoPrivShapeEllipsoid *,std::shared_ptr<SipGeoPrivShape>::__shared_ptr_default_delete<SipGeoPrivShape,SipGeoPrivShapeEllipsoid>,std::allocator<SipGeoPrivShapeEllipsoid>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_pointer<SipGeoPrivShapeEllipsoid *,std::shared_ptr<SipGeoPrivShape>::__shared_ptr_default_delete<SipGeoPrivShape,SipGeoPrivShapeEllipsoid>,std::allocator<SipGeoPrivShapeEllipsoid>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<SipGeoPrivShapeEllipsoid *,std::shared_ptr<SipGeoPrivShape>::__shared_ptr_default_delete<SipGeoPrivShape,SipGeoPrivShapeEllipsoid>,std::allocator<SipGeoPrivShapeEllipsoid>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<SipGeoPrivShape>::shared_ptr[abi:ne180100]<SipGeoPrivShapeCircle,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E78E3158;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1BF14F75C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<SipGeoPrivShapeCircle *,std::shared_ptr<SipGeoPrivShape>::__shared_ptr_default_delete<SipGeoPrivShape,SipGeoPrivShapeCircle>,std::allocator<SipGeoPrivShapeCircle>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_pointer<SipGeoPrivShapeCircle *,std::shared_ptr<SipGeoPrivShape>::__shared_ptr_default_delete<SipGeoPrivShape,SipGeoPrivShapeCircle>,std::allocator<SipGeoPrivShapeCircle>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<SipGeoPrivShapeCircle *,std::shared_ptr<SipGeoPrivShape>::__shared_ptr_default_delete<SipGeoPrivShape,SipGeoPrivShapeCircle>,std::allocator<SipGeoPrivShapeCircle>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t _GLOBAL__sub_I_SipGeoLocationBody_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&SipGeoLocationBody::kContentDisposition, "render; handling=optional");
  return __cxa_atexit(MEMORY[0x1E0DE44D0], &SipGeoLocationBody::kContentDisposition, &dword_1BEDF4000);
}

void LazuliToPathHeader::LazuliToPathHeader(LazuliToPathHeader *this, const LazuliRouteSet *a2)
{
  std::string *v3;

  v3 = LazuliHeader::LazuliHeader((std::string *)this, (const std::string *)"To-Path");
  v3->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78E31D0;
  LazuliRouteSet::LazuliRouteSet((LazuliRouteSet *)&v3[2].__r_.__value_.__r.__words[1], a2);
}

void sub_1BF14F884(_Unwind_Exception *a1)
{
  void **v1;

  LazuliHeader::~LazuliHeader(v1);
  _Unwind_Resume(a1);
}

void LazuliToPathHeader::create(std::__shared_weak_count **a1@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v3 = (std::__shared_weak_count *)operator new(0x88uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E3250;
  v5 = v3 + 1;
  LazuliHeader::LazuliHeader((std::string *)&v3[1], (const std::string *)"To-Path");
  v3[3].__shared_owners_ = (uint64_t)&off_1E78EF3C0;
  *(_OWORD *)&v3[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v3[4].__shared_owners_ = 0u;
  v3[5].std::__shared_count = 0u;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E32A0;
  shared_weak_owners = (std::__shared_weak_count *)v3[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v3[1].__shared_owners_ = (uint64_t)v5;
    v3[1].__shared_weak_owners_ = (uint64_t)v3;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v3[1].__shared_owners_ = (uint64_t)v5;
    v3[1].__shared_weak_owners_ = (uint64_t)v3;
  }
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_14:
  *a1 = v5;
  a1[1] = v3;
}

void sub_1BF14F9B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t LazuliToPathHeader::encodeValue(LazuliToPathHeader *this, ImsOutStream *a2)
{
  LazuliRouteSet::toStream((LazuliToPathHeader *)((char *)this + 56), a2);
  return 1;
}

BOOL LazuliToPathHeader::setValueFromString(uint64_t a1, std::string *a2)
{
  _QWORD *v2;
  _BOOL8 v3;

  v2 = (_QWORD *)(a1 + 56);
  v3 = LazuliRouteSet::fromString((LazuliRouteSet *)(a1 + 56), a2);
  if (!v3)
    SipRouteSet::clear(v2);
  return v3;
}

std::string::size_type LazuliToPathHeader::findParameterMarker(int a1, std::string *this)
{
  std::string::size_type v3;
  std::string::size_type size;
  std::string::size_type v5;
  std::string::size_type v6;

  v3 = 0;
  while (1)
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) != 0)
      size = this->__r_.__value_.__l.__size_;
    if (v3 >= size)
      return -1;
    v5 = std::string::find(this, 60, v3);
    if (v5 == -1)
      break;
    v6 = std::string::find(this, 62, v5);
    v3 = v6 + 1;
    if (v6 == -1)
      return -1;
  }
  return std::string::find(this, 59, v3);
}

void LazuliToPathHeader::~LazuliToPathHeader(void **this)
{
  *this = &off_1E78E31D0;
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)(this + 7));
  LazuliHeader::~LazuliHeader(this);
}

{
  *this = &off_1E78E31D0;
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)(this + 7));
  LazuliHeader::~LazuliHeader(this);
  JUMPOUT(0x1C3B87100);
}

double LazuliToPathHeader::clone@<D0>(LazuliToPathHeader *this@<X0>, _OWORD *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  double result;
  __int128 v7;

  v4 = (std::string *)operator new(0x88uLL);
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78C8078;
  v4[1].__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78DE938;
  v4[1].__r_.__value_.__l.__size_ = 0;
  v4[1].__r_.__value_.__r.__words[2] = 0;
  v5 = v4 + 2;
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    v4[2].__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
  v4[3].__r_.__value_.__s.__data_[0] = *((_BYTE *)this + 48);
  v4[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78E31D0;
  LazuliRouteSet::LazuliRouteSet((LazuliRouteSet *)&v4[3].__r_.__value_.__r.__words[1], (LazuliToPathHeader *)((char *)this + 56));
  *(_QWORD *)&v7 = v4 + 1;
  *((_QWORD *)&v7 + 1) = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v7, &v4[1].__r_.__value_.__l.__size_, (uint64_t)&v4[1]);
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

void sub_1BF14FBF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *shared_weak_owners;
  void *v4;

  shared_weak_owners = (std::__shared_weak_count *)v1[1].__shared_weak_owners_;
  if (shared_weak_owners)
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliToPathHeader::create(void)::HeaderWrapper,std::allocator<LazuliToPathHeader::create(void)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E3250;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliToPathHeader::create(void)::HeaderWrapper,std::allocator<LazuliToPathHeader::create(void)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E3250;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<LazuliToPathHeader::create(void)::HeaderWrapper,std::allocator<LazuliToPathHeader::create(void)::HeaderWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void LazuliToPathHeader::create(void)::HeaderWrapper::~HeaderWrapper(void **a1)
{
  *a1 = &off_1E78E31D0;
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)(a1 + 7));
  LazuliHeader::~LazuliHeader(a1);
}

{
  *a1 = &off_1E78E31D0;
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)(a1 + 7));
  LazuliHeader::~LazuliHeader(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipTcpTransport::SipTcpTransport(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::string v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::string __p;
  uint64_t v33[2];

  v7 = (std::__shared_weak_count *)a2[1];
  v33[0] = *a2;
  v33[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    SipTransport::SipTransport((_QWORD *)a1, v33, a3);
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    SipTransport::SipTransport((_QWORD *)a1, v33, a3);
  }
  *(_QWORD *)(a1 + 32) = off_1E78D0820;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.tport");
  ImsLogContainer::ImsLogContainer(a1 + 40, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)a1 = &off_1E78E3320;
  *(_QWORD *)(a1 + 32) = &unk_1E78E33B8;
  *(_QWORD *)(a1 + 40) = &unk_1E78E33E0;
  *(_QWORD *)(a1 + 144) = &unk_1E78E3440;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 240) = 1;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 184, (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  *(_DWORD *)(a1 + 304) = a4;
  v14 = *a2;
  v15 = *(std::__shared_weak_count **)(v14 + 200);
  if (!v15)
    return a1;
  v16 = std::__shared_weak_count::lock(v15);
  v31 = v16;
  if (!v16)
    return a1;
  v17 = *(_QWORD *)(v14 + 192);
  v30 = v17;
  if (!v17)
  {
    v21 = v16;
LABEL_41:
    v24 = (unint64_t *)&v21->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    return a1;
  }
  memset(&__p, 0, sizeof(__p));
  v28 = 0;
  v29 = 0;
  v18 = *(std::__shared_weak_count **)(v17 + 16);
  if (v18)
  {
    v19 = std::__shared_weak_count::lock(v18);
    v29 = v19;
    if (v19)
    {
      v20 = *(_QWORD *)(v17 + 8);
      v28 = v20;
      goto LABEL_25;
    }
  }
  else
  {
    v19 = 0;
  }
  v20 = 0;
LABEL_25:
  if (*(char *)(v20 + 4159) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v20 + 4136), *(_QWORD *)(v20 + 4144));
  else
    __p = *(std::string *)(v20 + 4136);
  if (v19)
  {
    v22 = (unint64_t *)&v19->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v27, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v27 = __p;
  std::string::operator=((std::string *)(a1 + 72), &v27);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v21 = v31;
  if (v31)
    goto LABEL_41;
  return a1;
}

void sub_1BF14FFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;

  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (*(char *)(v25 + 303) < 0)
    operator delete(*(void **)(v25 + 280));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v25 + 264);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v30);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>>>::~__hash_table(v29);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v28);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v27);
  v32 = *(std::__shared_weak_count **)(v25 + 160);
  if (v32)
    std::__shared_weak_count::__release_weak(v32);
  ImsLogContainer::~ImsLogContainer(v26);
  *(_QWORD *)v25 = off_1E78C6EE0;
  v33 = *(std::__shared_weak_count **)(v25 + 16);
  if (v33)
    std::__shared_weak_count::__release_weak(v33);
  _Unwind_Resume(a1);
}

void SipTcpTransport::~SipTcpTransport(SipTcpTransport *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78E3320;
  *((_QWORD *)this + 4) = &unk_1E78E33B8;
  *((_QWORD *)this + 5) = &unk_1E78E33E0;
  *((_QWORD *)this + 18) = &unk_1E78E3440;
  SipTcpTransport::close(this);
  if (*((char *)this + 303) < 0)
    operator delete(*((void **)this + 35));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 248);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>>>::~__hash_table((uint64_t)this + 200);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 184);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 168);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *((_QWORD *)this + 5) = off_1E78CFE68;
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  *(_QWORD *)this = off_1E78C6EE0;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

{
  SipTcpTransport::~SipTcpTransport(this);
  JUMPOUT(0x1C3B87100);
}

void SipTcpTransport::close(SipTcpTransport *this)
{
  _QWORD **v2;
  uint64_t v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  void ***v18;
  void **v19;
  uint64_t *v20;
  void **v21;
  void **v22;
  void **v23;
  BOOL v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p;
  std::__shared_weak_count *v30;
  uint64_t v31;

  SipTcpTransport::removeConnections(this, 0, 0, 1);
  v2 = (_QWORD **)((char *)this + 168);
  v3 = *((_QWORD *)this + 21);
  if (!v3)
    goto LABEL_38;
  v4 = (uint64_t *)(v3 + 104);
  v5 = *(std::__shared_weak_count **)(v3 + 112);
  if (!v5)
  {
    *v4 = 0;
    *(_QWORD *)(v3 + 112) = 0;
    goto LABEL_13;
  }
  v6 = std::__shared_weak_count::lock(v5);
  if (v6)
  {
    v7 = v6;
    v8 = *v4;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (v10)
    {
      if (v8)
        goto LABEL_13;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
        goto LABEL_13;
    }
  }
  v11 = *(std::__shared_weak_count **)(v3 + 112);
  *v4 = 0;
  *(_QWORD *)(v3 + 112) = 0;
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
LABEL_13:
  if (!*((_QWORD *)this + 33))
    goto LABEL_38;
  v12 = (uint64_t)*v2;
  SipSocketMultiplexer<ImsListenSocketInterfaceDelegate>::delegateForRemoteAddress(*v2, (uint64_t *)this + 33, &__p);
  if (!v30)
    goto LABEL_26;
  v13 = std::__shared_weak_count::lock(v30);
  if (!v13)
  {
    if (v30)
      std::__shared_weak_count::__release_weak(v30);
    goto LABEL_26;
  }
  v14 = v13;
  v15 = __p;
  v16 = (unint64_t *)&v13->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
  if (!v15)
  {
LABEL_26:
    __p = 0;
    v30 = 0;
    v31 = 0;
    IpAddress::asString(*((_QWORD *)this + 33), (uint64_t)&__p, 3);
    v18 = (void ***)(v12 + 80);
    v19 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v12 + 80, &__p);
    v20 = (uint64_t *)v19;
    if ((void **)(v12 + 88) != v19)
    {
      v21 = (void **)v19[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (void **)*v21;
        }
        while (v21);
      }
      else
      {
        v23 = v19;
        do
        {
          v22 = (void **)v23[2];
          v24 = *v22 == v23;
          v23 = v22;
        }
        while (!v24);
      }
      if (*v18 == v19)
        *v18 = v22;
      v25 = *(uint64_t **)(v12 + 88);
      --*(_QWORD *)(v12 + 96);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v25, v20);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,0>((uint64_t)(v20 + 4));
      operator delete(v20);
    }
    if (SHIBYTE(v31) < 0)
      operator delete(__p);
  }
LABEL_38:
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 21);
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 31);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 33);
}

void sub_1BF1503D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'SipTcpTransport::~SipTcpTransport(SipTcpTransport *this)
{
  SipTcpTransport::~SipTcpTransport((SipTcpTransport *)((char *)this - 32));
}

{
  SipTcpTransport::~SipTcpTransport((SipTcpTransport *)((char *)this - 40));
}

{
  SipTcpTransport::~SipTcpTransport((SipTcpTransport *)((char *)this - 144));
}

{
  SipTcpTransport::~SipTcpTransport((SipTcpTransport *)((char *)this - 32));
  JUMPOUT(0x1C3B87100);
}

{
  SipTcpTransport::~SipTcpTransport((SipTcpTransport *)((char *)this - 40));
  JUMPOUT(0x1C3B87100);
}

{
  SipTcpTransport::~SipTcpTransport((SipTcpTransport *)((char *)this - 144));
  JUMPOUT(0x1C3B87100);
}

_QWORD *SipTcpTransport::logPrefix(SipTcpTransport *this, ImsOutStream *a2)
{
  _QWORD *result;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"SipTcpTransport: ", 17);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

_QWORD *`non-virtual thunk to'SipTcpTransport::logPrefix(SipTcpTransport *this, ImsOutStream *a2)
{
  _QWORD *result;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"SipTcpTransport: ", 17);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

void SipTcpTransport::handleIncomingConnection(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v22, (_QWORD *)(a1 + 152));
  if (v22)
    v4 = v22 + 144;
  else
    v4 = 0;
  v24 = v4;
  v25 = v23;
  v22 = 0;
  v23 = 0;
  v5 = a2[1];
  v20 = *a2;
  v21 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  SipTcpConnection::create(&v24, &v20, 0, &v26);
  SipTcpTransport::addConnection(a1, &v26);
  v8 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v21;
  if (v21)
  {
    v12 = (unint64_t *)&v21->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v25;
  if (v25)
  {
    v15 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v23;
  if (v23)
  {
    v18 = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1BF150680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v13 - 32);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SipTcpTransport::addConnection(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unint64_t v16;
  void **v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  std::string *v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  int8x8_t prime;
  void *v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint8x8_t v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *i;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t *v56;
  unint64_t v57;
  float v58;
  float v59;
  _BOOL8 v60;
  unint64_t v61;
  unint64_t v62;
  int8x8_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  uint8x8_t v69;
  unint64_t v70;
  uint8x8_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  void *v77;
  unint64_t v78;
  void *v79;
  void *v80;
  void *v81[2];
  uint64_t v82;
  void *__p;
  std::__shared_weak_count *v84;
  uint64_t v85;

  v4 = *a2;
  LoggableString::LoggableString((LoggableString *)&__p, "Transport");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 32))(v4, &__p);
  if (SHIBYTE(v85) < 0)
    operator delete(__p);
  v5 = *a2;
  v6 = *(_DWORD *)(a1 + 240);
  *(_DWORD *)(a1 + 240) = v6 + 1;
  *(_DWORD *)(v5 + 352) = v6;
  v81[0] = 0;
  v81[1] = 0;
  v82 = 0;
  v7 = *(void **)(v5 + 272);
  if (v7)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v7 + 104))(&__p);
    v7 = __p;
  }
  else
  {
    __p = 0;
    v84 = 0;
  }
  IpAddress::asString((uint64_t)v7, (uint64_t)v81, 0);
  v8 = v84;
  if (v84)
  {
    p_shared_owners = (unint64_t *)&v84->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 224, (uint64_t)v81);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 208);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    v15 = v14.u32[0];
    if (v14.u32[0] > 1uLL)
    {
      v16 = v11;
      if (v11 >= v13)
        v16 = v11 % v13;
    }
    else
    {
      v16 = (v13 - 1) & v11;
    }
    v17 = *(void ***)(*(_QWORD *)(a1 + 200) + 8 * v16);
    if (v17)
    {
      v18 = (char *)*v17;
      if (*v17)
      {
        do
        {
          v19 = *((_QWORD *)v18 + 1);
          if (v19 == v12)
          {
            if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 232, (unsigned __int8 *)v18 + 16, (unsigned __int8 *)v81) & 1) != 0)goto LABEL_87;
          }
          else
          {
            if (v15 > 1)
            {
              if (v19 >= v13)
                v19 %= v13;
            }
            else
            {
              v19 &= v13 - 1;
            }
            if (v19 != v16)
              break;
          }
          v18 = *(char **)v18;
        }
        while (v18);
      }
    }
  }
  else
  {
    v16 = 0;
  }
  v85 = 0;
  v20 = operator new(0x50uLL);
  v21 = (_QWORD *)(a1 + 216);
  __p = v20;
  v84 = (std::__shared_weak_count *)(a1 + 216);
  *v20 = 0;
  v20[1] = v12;
  v22 = (std::string *)(v20 + 2);
  if (SHIBYTE(v82) < 0)
  {
    std::string::__init_copy_ctor_external(v22, (const std::string::value_type *)v81[0], (std::string::size_type)v81[1]);
  }
  else
  {
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)v81;
    v20[4] = v82;
  }
  *(_OWORD *)(v20 + 7) = 0u;
  *(_OWORD *)(v20 + 5) = 0u;
  *((_DWORD *)v20 + 18) = 1065353216;
  LOBYTE(v85) = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 224) + 1);
  v24 = *(float *)(a1 + 232);
  if (!v13 || (float)(v24 * (float)v13) < v23)
  {
    v25 = 1;
    if (v13 >= 3)
      v25 = (v13 & (v13 - 1)) != 0;
    v26 = v25 | (2 * v13);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      prime = (int8x8_t)v27;
    else
      prime = (int8x8_t)v26;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v13 = *(_QWORD *)(a1 + 208);
    if (*(_QWORD *)&prime > v13)
      goto LABEL_43;
    if (*(_QWORD *)&prime < v13)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 224) / *(float *)(a1 + 232));
      if (v13 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (*(_QWORD *)&prime <= v35)
        prime = (int8x8_t)v35;
      if (*(_QWORD *)&prime >= v13)
      {
        v13 = *(_QWORD *)(a1 + 208);
      }
      else
      {
        if (prime)
        {
LABEL_43:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v29 = operator new(8 * *(_QWORD *)&prime);
          v30 = *(void **)(a1 + 200);
          *(_QWORD *)(a1 + 200) = v29;
          if (v30)
            operator delete(v30);
          v31 = 0;
          *(int8x8_t *)(a1 + 208) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v31++) = 0;
          while (*(_QWORD *)&prime != v31);
          v32 = (_QWORD *)*v21;
          if (*v21)
          {
            v33 = v32[1];
            v34 = (uint8x8_t)vcnt_s8(prime);
            v34.i16[0] = vaddlv_u8(v34);
            if (v34.u32[0] > 1uLL)
            {
              if (v33 >= *(_QWORD *)&prime)
                v33 %= *(_QWORD *)&prime;
            }
            else
            {
              v33 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v33) = v21;
            v38 = (_QWORD *)*v32;
            if (*v32)
            {
              do
              {
                v39 = v38[1];
                if (v34.u32[0] > 1uLL)
                {
                  if (v39 >= *(_QWORD *)&prime)
                    v39 %= *(_QWORD *)&prime;
                }
                else
                {
                  v39 &= *(_QWORD *)&prime - 1;
                }
                if (v39 != v33)
                {
                  v40 = *(_QWORD *)(a1 + 200);
                  if (!*(_QWORD *)(v40 + 8 * v39))
                  {
                    *(_QWORD *)(v40 + 8 * v39) = v32;
                    goto LABEL_68;
                  }
                  *v32 = *v38;
                  *v38 = **(_QWORD **)(*(_QWORD *)(a1 + 200) + 8 * v39);
                  **(_QWORD **)(*(_QWORD *)(a1 + 200) + 8 * v39) = v38;
                  v38 = v32;
                }
                v39 = v33;
LABEL_68:
                v32 = v38;
                v38 = (_QWORD *)*v38;
                v33 = v39;
              }
              while (v38);
            }
          }
          v13 = (unint64_t)prime;
          goto LABEL_72;
        }
        v79 = *(void **)(a1 + 200);
        *(_QWORD *)(a1 + 200) = 0;
        if (v79)
          operator delete(v79);
        v13 = 0;
        *(_QWORD *)(a1 + 208) = 0;
      }
    }
LABEL_72:
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
        v16 = v12 % v13;
      else
        v16 = v12;
    }
    else
    {
      v16 = (v13 - 1) & v12;
    }
  }
  v41 = *(_QWORD **)(*(_QWORD *)(a1 + 200) + 8 * v16);
  v18 = (char *)__p;
  if (v41)
  {
    *(_QWORD *)__p = *v41;
LABEL_85:
    *v41 = v18;
    goto LABEL_86;
  }
  *(_QWORD *)__p = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v18;
  *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v16) = v21;
  if (*(_QWORD *)v18)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v18 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v42 >= v13)
        v42 %= v13;
    }
    else
    {
      v42 &= v13 - 1;
    }
    v41 = (_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v42);
    goto LABEL_85;
  }
LABEL_86:
  __p = 0;
  ++*(_QWORD *)(a1 + 224);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
LABEL_87:
  v44 = *a2;
  v43 = a2[1];
  v45 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v46 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v45 >> 47) ^ v45);
  v47 = 0x9DDFEA08EB382D69 * (v46 ^ (v46 >> 47));
  v48 = *((_QWORD *)v18 + 6);
  if (v48)
  {
    v49 = (uint8x8_t)vcnt_s8((int8x8_t)v48);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      v50 = 0x9DDFEA08EB382D69 * (v46 ^ (v46 >> 47));
      if (v47 >= v48)
        v50 = v47 % v48;
    }
    else
    {
      v50 = v47 & (v48 - 1);
    }
    v51 = *(_QWORD **)(*((_QWORD *)v18 + 5) + 8 * v50);
    if (v51)
    {
      for (i = (_QWORD *)*v51; i; i = (_QWORD *)*i)
      {
        v53 = i[1];
        if (v53 == v47)
        {
          if (i[2] == v44)
            goto LABEL_163;
        }
        else
        {
          if (v49.u32[0] > 1uLL)
          {
            if (v53 >= v48)
              v53 %= v48;
          }
          else
          {
            v53 &= v48 - 1;
          }
          if (v53 != v50)
            break;
        }
      }
    }
  }
  else
  {
    v50 = 0;
  }
  v85 = 1;
  v54 = operator new(0x20uLL);
  v55 = v18 + 56;
  __p = v54;
  v84 = (std::__shared_weak_count *)(v18 + 56);
  *v54 = 0;
  v54[1] = v47;
  v54[2] = v44;
  v54[3] = v43;
  if (v43)
  {
    v56 = (unint64_t *)(v43 + 8);
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  v58 = (float)(unint64_t)(*((_QWORD *)v18 + 8) + 1);
  v59 = *((float *)v18 + 18);
  if (!v48 || (float)(v59 * (float)v48) < v58)
  {
    v60 = 1;
    if (v48 >= 3)
      v60 = (v48 & (v48 - 1)) != 0;
    v61 = v60 | (2 * v48);
    v62 = vcvtps_u32_f32(v58 / v59);
    if (v61 <= v62)
      v63 = (int8x8_t)v62;
    else
      v63 = (int8x8_t)v61;
    if (*(_QWORD *)&v63 == 1)
    {
      v63 = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&v63 & (*(_QWORD *)&v63 - 1)) != 0)
    {
      v63 = (int8x8_t)std::__next_prime(*(_QWORD *)&v63);
    }
    v48 = *((_QWORD *)v18 + 6);
    if (*(_QWORD *)&v63 > v48)
      goto LABEL_119;
    if (*(_QWORD *)&v63 < v48)
    {
      v70 = vcvtps_u32_f32((float)*((unint64_t *)v18 + 8) / *((float *)v18 + 18));
      if (v48 < 3 || (v71 = (uint8x8_t)vcnt_s8((int8x8_t)v48), v71.i16[0] = vaddlv_u8(v71), v71.u32[0] > 1uLL))
      {
        v70 = std::__next_prime(v70);
      }
      else
      {
        v72 = 1 << -(char)__clz(v70 - 1);
        if (v70 >= 2)
          v70 = v72;
      }
      if (*(_QWORD *)&v63 <= v70)
        v63 = (int8x8_t)v70;
      if (*(_QWORD *)&v63 >= v48)
      {
        v48 = *((_QWORD *)v18 + 6);
      }
      else
      {
        if (v63)
        {
LABEL_119:
          if (*(_QWORD *)&v63 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v64 = operator new(8 * *(_QWORD *)&v63);
          v65 = (void *)*((_QWORD *)v18 + 5);
          *((_QWORD *)v18 + 5) = v64;
          if (v65)
            operator delete(v65);
          v66 = 0;
          *((int8x8_t *)v18 + 6) = v63;
          do
            *(_QWORD *)(*((_QWORD *)v18 + 5) + 8 * v66++) = 0;
          while (*(_QWORD *)&v63 != v66);
          v67 = (_QWORD *)*v55;
          if (*v55)
          {
            v68 = v67[1];
            v69 = (uint8x8_t)vcnt_s8(v63);
            v69.i16[0] = vaddlv_u8(v69);
            if (v69.u32[0] > 1uLL)
            {
              if (v68 >= *(_QWORD *)&v63)
                v68 %= *(_QWORD *)&v63;
            }
            else
            {
              v68 &= *(_QWORD *)&v63 - 1;
            }
            *(_QWORD *)(*((_QWORD *)v18 + 5) + 8 * v68) = v55;
            v73 = (_QWORD *)*v67;
            if (*v67)
            {
              do
              {
                v74 = v73[1];
                if (v69.u32[0] > 1uLL)
                {
                  if (v74 >= *(_QWORD *)&v63)
                    v74 %= *(_QWORD *)&v63;
                }
                else
                {
                  v74 &= *(_QWORD *)&v63 - 1;
                }
                if (v74 != v68)
                {
                  v75 = *((_QWORD *)v18 + 5);
                  if (!*(_QWORD *)(v75 + 8 * v74))
                  {
                    *(_QWORD *)(v75 + 8 * v74) = v67;
                    goto LABEL_144;
                  }
                  *v67 = *v73;
                  *v73 = **(_QWORD **)(*((_QWORD *)v18 + 5) + 8 * v74);
                  **(_QWORD **)(*((_QWORD *)v18 + 5) + 8 * v74) = v73;
                  v73 = v67;
                }
                v74 = v68;
LABEL_144:
                v67 = v73;
                v73 = (_QWORD *)*v73;
                v68 = v74;
              }
              while (v73);
            }
          }
          v48 = (unint64_t)v63;
          goto LABEL_148;
        }
        v80 = (void *)*((_QWORD *)v18 + 5);
        *((_QWORD *)v18 + 5) = 0;
        if (v80)
          operator delete(v80);
        v48 = 0;
        *((_QWORD *)v18 + 6) = 0;
      }
    }
LABEL_148:
    if ((v48 & (v48 - 1)) != 0)
    {
      if (v47 >= v48)
        v50 = v47 % v48;
      else
        v50 = v47;
    }
    else
    {
      v50 = (v48 - 1) & v47;
    }
  }
  v76 = *(_QWORD **)(*((_QWORD *)v18 + 5) + 8 * v50);
  v77 = __p;
  if (v76)
  {
    *(_QWORD *)__p = *v76;
LABEL_161:
    *v76 = v77;
    goto LABEL_162;
  }
  *(_QWORD *)__p = *((_QWORD *)v18 + 7);
  *((_QWORD *)v18 + 7) = v77;
  *(_QWORD *)(*((_QWORD *)v18 + 5) + 8 * v50) = v55;
  if (*(_QWORD *)v77)
  {
    v78 = *(_QWORD *)(*(_QWORD *)v77 + 8);
    if ((v48 & (v48 - 1)) != 0)
    {
      if (v78 >= v48)
        v78 %= v48;
    }
    else
    {
      v78 &= v48 - 1;
    }
    v76 = (_QWORD *)(*((_QWORD *)v18 + 5) + 8 * v78);
    goto LABEL_161;
  }
LABEL_162:
  __p = 0;
  ++*((_QWORD *)v18 + 8);
  std::unique_ptr<std::__hash_node<std::shared_ptr<SipTcpConnection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<SipTcpConnection>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
LABEL_163:
  if (SHIBYTE(v82) < 0)
    operator delete(v81[0]);
}

void sub_1BF150FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipTcpTransport::handleIncomingConnection(uint64_t a1, uint64_t *a2)
{
  SipTcpTransport::handleIncomingConnection(a1 - 32, a2);
}

void SipTcpTransport::initialize(SipTcpTransport *this@<X0>, std::string *__str@<X3>, _QWORD *a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t *v29;
  unint64_t v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  __int128 v48;
  const ImsResult *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;
  uint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  _BYTE *v86;
  _QWORD *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  NSObject *v92;
  int v93;
  char v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  NSObject *v108;
  int v109;
  void *__p[2];
  char v112;
  _QWORD v113[2];
  dispatch_object_t object;
  uint64_t v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count *v117[2];
  int v118;
  char v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  _QWORD v123[2];
  uint64_t v124;
  std::__shared_weak_count *v125;
  __int128 v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count *v128;

  v11 = (_QWORD *)((char *)this + 168);
  if (*((_QWORD *)this + 21))
    SipTcpTransport::close(this);
  std::string::operator=((std::string *)((char *)this + 280), __str);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(__p, (_QWORD *)this + 19);
  v12 = operator new(0xA0uLL);
  v13 = v12;
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_1E78E3520;
  v14 = v12 + 3;
  v15 = (std::__shared_weak_count *)__p[1];
  if (__p[0])
    v16 = (std::__shared_weak_count *)((char *)__p[0] + 32);
  else
    v16 = 0;
  v117[0] = v16;
  v117[1] = (std::__shared_weak_count *)__p[1];
  __p[0] = 0;
  __p[1] = 0;
  SipListenSocketMultiplexer::SipListenSocketMultiplexer(v12 + 3, (uint64_t *)v117);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 21) = v14;
  *((_QWORD *)this + 22) = v13;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v23 = (unint64_t *)((char *)__p[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(std::__shared_weak_count **__return_ptr, SipTcpTransport *))(*(_QWORD *)this + 104))(v117, this);
  v127 = 0;
  v128 = 0;
  if (!v117[1])
    goto LABEL_56;
  v128 = std::__shared_weak_count::lock(v117[1]);
  if (v128)
  {
    v25 = v117[0];
    v127 = v117[0];
  }
  else
  {
    v25 = 0;
  }
  if (v117[1])
    std::__shared_weak_count::__release_weak(v117[1]);
  if (!v25)
  {
LABEL_56:
    v126 = 0uLL;
    v48 = 0uLL;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    LODWORD(v26) = 104;
    *(_QWORD *)(a6 + 64) = 0;
LABEL_57:
    v120 = v48;
    v121 = v48;
    v122 = v48;
    v117[0] = (std::__shared_weak_count *)&off_1E78B7238;
    v117[1] = (std::__shared_weak_count *)&_bambiDomain;
    v118 = 0x40000000;
    v49 = (const ImsResult *)ImsResult::operator<<<char [28]>((uint64_t)v117, "NetworkManager un-available");
    ImsResult::ImsResult((ImsResult *)a6, v49);
    ImsResult::~ImsResult((ImsResult *)v117);
    v50 = 0;
    goto LABEL_58;
  }
  ((void (*)(std::__shared_weak_count **__return_ptr, std::__shared_weak_count *))v25->__vftable[5].~__shared_weak_count)(v117, v25);
  v26 = LODWORD(v117[0]);
  v126 = 0uLL;
  ((void (*)(std::__shared_weak_count **__return_ptr, std::__shared_weak_count *))v25->__vftable[4].__on_zero_shared)(v117, v25);
  v28 = v117[0];
  v27 = v117[1];
  if (!v117[1])
    goto LABEL_32;
  v29 = &v117[1]->__shared_owners_;
  do
    v30 = __ldaxr((unint64_t *)v29);
  while (__stlxr(v30 - 1, (unint64_t *)v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v28)
      goto LABEL_134;
  }
  else
  {
LABEL_32:
    if (!v28)
      goto LABEL_134;
  }
  ((void (*)(void **__return_ptr))v127->__vftable[4].__on_zero_shared)(__p);
  v31 = __p[0];
  v32 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  v124 = *((_QWORD *)this + 21);
  v125 = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  (*(void (**)(std::__shared_weak_count **__return_ptr, void *, uint64_t *, std::string *, uint64_t))(*(_QWORD *)v31 + 120))(v117, v31, &v124, __str, v26);
  v35 = *(_OWORD *)v117;
  v117[0] = 0;
  v117[1] = 0;
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
  v126 = v35;
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v117[1];
  if (v117[1])
  {
    v40 = &v117[1]->__shared_owners_;
    do
      v41 = __ldaxr((unint64_t *)v40);
    while (__stlxr(v41 - 1, (unint64_t *)v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v125;
  if (v125)
  {
    v43 = (unint64_t *)&v125->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v46 = (unint64_t *)((char *)__p[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
LABEL_134:
  v50 = v126;
  v48 = 0uLL;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_QWORD *)(a6 + 64) = 0;
  if (!v50)
    goto LABEL_57;
  v108 = sImsDispatchQueue;
  if (sImsDispatchQueue)
  {
    __p[0] = (void *)sImsDispatchQueue;
LABEL_138:
    dispatch_retain(v108);
    goto LABEL_139;
  }
  v108 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
  sImsDispatchQueue = (uint64_t)v108;
  __p[0] = v108;
  if (v108)
    goto LABEL_138;
LABEL_139:
  v123[0] = &off_1E78B7BD8;
  v123[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v117, "");
  (*(void (**)(uint64_t, _QWORD *, void **, uint64_t, _QWORD, _QWORD *, std::__shared_weak_count **, std::string *, char))(*(_QWORD *)v50 + 16))(v50, a3, __p, a4, 0, v123, v117, __str, 1);
  if (v119 < 0)
    operator delete(v117[0]);
  ims::CFType::~CFType((ims::CFType *)v123);
  if (__p[0])
    dispatch_release((dispatch_object_t)__p[0]);
LABEL_58:
  if (!(*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a6 + 8) + 24))(*(_QWORD *)(a6 + 8), *(unsigned int *)(a6 + 16)))
  {
    v54 = *v11;
    v55 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
    if (*((_QWORD *)&v126 + 1))
    {
      v56 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
      do
        v58 = __ldxr(v56);
      while (__stxr(v58 + 1, v56));
    }
    v59 = *(std::__shared_weak_count **)(v54 + 128);
    *(_QWORD *)(v54 + 120) = v50;
    *(_QWORD *)(v54 + 128) = v55;
    if (v59)
    {
      v60 = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    if (v55)
    {
      v62 = (unint64_t *)&v55->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v64 = *(_QWORD *)(*v11 + 120);
    v65 = *(std::__shared_weak_count **)(*v11 + 128);
    v115 = v64;
    v116 = v65;
    if (v65)
    {
      v66 = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v64 + 56))(__p);
    (*(void (**)(std::__shared_weak_count **__return_ptr))(*(_QWORD *)__p[0] + 32))(v117);
    v68 = (_QWORD *)((char *)this + 248);
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 248, (__int128 *)v117);
    v69 = v117[1];
    if (v117[1])
    {
      v70 = &v117[1]->__shared_owners_;
      do
        v71 = __ldaxr((unint64_t *)v70);
      while (__stlxr(v71 - 1, (unint64_t *)v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v72 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v73 = (unint64_t *)((char *)__p[1] + 8);
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    v75 = v116;
    if (v116)
    {
      v76 = (unint64_t *)&v116->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    v78 = *(std::__shared_weak_count **)(*v11 + 120);
    v79 = *(std::__shared_weak_count **)(*v11 + 128);
    v117[0] = v78;
    v117[1] = v79;
    if (v79)
    {
      v80 = (unint64_t *)&v79->__shared_owners_;
      do
        v81 = __ldxr(v80);
      while (__stxr(v81 + 1, v80));
    }
    ((void (*)(std::__shared_weak_count *, _QWORD))v78->__vftable[1].~__shared_weak_count_0)(v78, *((unsigned int *)this + 76));
    if (v79)
    {
      v82 = (unint64_t *)&v79->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 56))(*a3) == (_DWORD)a5)
      goto LABEL_121;
    v115 = 0;
    v116 = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a3 + 32))(&v115);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v115 + 64))(v115, a5);
    v84 = (char *)this + 40;
    v85 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 5) + 64))((char *)this + 40);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 5) + 16))((char *)this + 40, v85);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v85 + 8), (uint64_t)"Opening listener socket for outgoing connection: ", 49);
    *(_BYTE *)(v85 + 17) = 0;
    v86 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v115 + 40))(v115, v85);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v86 + 64))(v86, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v86[17] = 0;
    v87 = operator new(0xA0uLL);
    v87[1] = 0;
    v87[2] = 0;
    *v87 = &off_1E78BEA58;
    v117[0] = 0;
    v117[1] = 0;
    ImsListenSocket::ImsListenSocket((uint64_t)(v87 + 3), (uint64_t *)v117, v26);
    __p[0] = v87 + 3;
    __p[1] = v87;
    std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)__p, v87 + 4, (uint64_t)(v87 + 3));
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 184, (__int128 *)__p);
    v88 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v89 = (unint64_t *)((char *)__p[1] + 8);
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    v91 = *((_QWORD *)this + 23);
    v92 = sImsDispatchQueue;
    if (sImsDispatchQueue)
    {
      object = (dispatch_object_t)sImsDispatchQueue;
    }
    else
    {
      v92 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
      sImsDispatchQueue = (uint64_t)v92;
      object = v92;
      if (!v92)
        goto LABEL_110;
    }
    dispatch_retain(v92);
LABEL_110:
    v113[0] = &off_1E78B7BD8;
    v113[1] = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    LOBYTE(v109) = 1;
    (*(void (**)(std::__shared_weak_count **__return_ptr, uint64_t, uint64_t *, dispatch_object_t *, uint64_t, _QWORD, _QWORD *, void **, std::string *, int))(*(_QWORD *)v91 + 40))(v117, v91, &v115, &object, a4, 0, v113, __p, __str, v109);
    ImsResult::operator=(a6, (uint64_t)v117);
    ImsResult::~ImsResult((ImsResult *)v117);
    if (v112 < 0)
      operator delete(__p[0]);
    ims::CFType::~CFType((ims::CFType *)v113);
    if (object)
      dispatch_release(object);
    v93 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a6 + 8) + 24))(*(_QWORD *)(a6 + 8), *(unsigned int *)(a6 + 16));
    v94 = v93;
    if (v93)
    {
      v95 = (*(uint64_t (**)(char *))(*(_QWORD *)v84 + 56))((char *)this + 40);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v84 + 16))((char *)this + 40, v95);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v95 + 8), (uint64_t)"Unable to open listener socket: ", 32);
      *(_BYTE *)(v95 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 16))(a6, v95);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v95 + 64))(v95, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v95 + 17) = 0;
      SipTcpTransport::close(this);
      std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100](v11);
    }
    v96 = v116;
    if (!v116)
      goto LABEL_120;
    v97 = (unint64_t *)&v116->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
      if ((v94 & 1) != 0)
        goto LABEL_122;
    }
    else
    {
LABEL_120:
      if ((v94 & 1) != 0)
        goto LABEL_122;
    }
LABEL_121:
    v100 = *((_QWORD *)this + 5);
    v99 = (char *)this + 40;
    v101 = (*(uint64_t (**)(char *))(v100 + 64))(v99);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v99 + 16))(v99, v101);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v101 + 8), (uint64_t)"outgoing connections will use port ", 35);
    *(_BYTE *)(v101 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v101 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v101 + 64))(v101, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v101 + 17) = 0;
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v68 + 64))(*v68, a5);
    goto LABEL_122;
  }
  v52 = *((_QWORD *)this + 5);
  v51 = (char *)this + 40;
  v53 = (*(uint64_t (**)(char *))(v52 + 56))(v51);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v51 + 16))(v51, v53);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v53 + 8), (uint64_t)"unable to initialize TCP transport: ", 36);
  *(_BYTE *)(v53 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 16))(a6, v53);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v53 + 64))(v53, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v53 + 17) = 0;
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100](v11);
LABEL_122:
  v102 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
  if (*((_QWORD *)&v126 + 1))
  {
    v103 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v128;
  if (v128)
  {
    v106 = (unint64_t *)&v128->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
}

void sub_1BF151B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, dispatch_object_t object, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, dispatch_object_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  if (a27 < 0)
    operator delete(__p);
  ims::CFType::~CFType((ims::CFType *)&a35);
  if (object)
    dispatch_release(object);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v35 - 128);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v35 - 104);
  _Unwind_Resume(a1);
}

void SipTcpTransport::initialize(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  const ImsResult *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  if (*(_QWORD *)(*(_QWORD *)a2 + 168))
  {
    std::string::operator=((std::string *)(a1 + 280), (const std::string *)(*(_QWORD *)a2 + 280));
    v9 = *(_QWORD *)(*(_QWORD *)a2 + 168);
    v8 = *(_QWORD *)(*(_QWORD *)a2 + 176);
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = *(std::__shared_weak_count **)(a1 + 176);
    *(_QWORD *)(a1 + 168) = v9;
    *(_QWORD *)(a1 + 176) = v8;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    *(_DWORD *)(a1 + 304) = *(_DWORD *)(*(_QWORD *)a2 + 304);
    v15 = *(_QWORD *)(a1 + 168);
    v16 = *(_QWORD *)(v15 + 120);
    v17 = *(std::__shared_weak_count **)(v15 + 128);
    v30 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v16 + 56))(&v31);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v31 + 32))(&v33);
    v20 = (_QWORD *)(a1 + 248);
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)v20, &v33);
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v32;
    if (v32)
    {
      v25 = (unint64_t *)&v32->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v30)
    {
      v27 = (unint64_t *)&v30->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v20 + 64))(*v20, a3);
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0;
  }
  else
  {
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    *(_QWORD *)&v33 = &off_1E78B7238;
    *((_QWORD *)&v33 + 1) = &_bambiDomain;
    v34 = 1073741825;
    v29 = (const ImsResult *)ImsResult::operator<<<char [30]>((uint64_t)&v33, "old transport not initialized");
    ImsResult::ImsResult((ImsResult *)a4, v29);
    ImsResult::~ImsResult((ImsResult *)&v33);
  }
}

void sub_1BF151F18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SipTcpTransport::removeConnections(SipTcpTransport *this, int a2, int a3, int a4)
{
  _QWORD *v5;
  char *v7;
  void ***v8;
  _QWORD *i;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  _QWORD *j;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void **v25;
  void **v26;
  char *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  char v38;
  SipTcpConnection *v40;
  std::__shared_weak_count *v41;
  _BYTE v42[72];
  uint64_t v43;
  std::__shared_weak_count *v44;
  void **v45;
  void **v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  void ***v51;

  v48 = 0;
  v49 = 0;
  v50 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v5 = (_QWORD *)*((_QWORD *)this + 27);
  if (v5)
  {
    v7 = (char *)this + 40;
    v38 = a3;
    if (a3)
      v8 = (void ***)&v48;
    else
      v8 = &v45;
    do
    {
      for (i = (_QWORD *)v5[7]; i; i = (_QWORD *)*i)
      {
        v10 = i + 2;
        if (a2)
        {
          v11 = *v10 + 328;
          while (1)
          {
            v11 = *(_QWORD *)v11;
            if (!v11)
              break;
            if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 16) + 40))(*(_QWORD *)(v11 + 16)) & 1) == 0)
            {
              v12 = (*(uint64_t (**)(char *))(*(_QWORD *)v7 + 64))((char *)this + 40);
              (*(void (**)(char *, uint64_t))(*(_QWORD *)v7 + 16))((char *)this + 40, v12);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"keeping ", 8);
              *(_BYTE *)(v12 + 17) = 0;
              v13 = (_BYTE *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v10 + 104))(*v10, v12);
              (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v13[17] = 0;
              goto LABEL_12;
            }
          }
        }
        std::vector<std::shared_ptr<SipDialogFork>>::push_back[abi:ne180100]((uint64_t)v8, (__int128 *)i + 1);
LABEL_12:
        ;
      }
      v5 = (_QWORD *)*v5;
    }
    while (v5);
    v14 = v48;
    for (j = v49; v14 != j; v14 += 2)
    {
      v16 = (*(uint64_t (**)(char *))(*(_QWORD *)v7 + 64))((char *)this + 40);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v7 + 16))((char *)this + 40, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"forceReset for ", 15);
      *(_BYTE *)(v16 + 17) = 0;
      v17 = (_BYTE *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v14 + 104))(*v14, v16);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v17[17] = 0;
      v18 = *v14;
      *(_BYTE *)(v18 + 506) = v38;
      v19 = (std::__shared_weak_count *)v14[1];
      v43 = v18;
      v44 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
      }
      (*(void (**)(SipTcpTransport *, uint64_t *))(*(_QWORD *)this + 80))(this, &v43);
      v22 = v44;
      if (v44)
      {
        v23 = (unint64_t *)&v44->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
  }
  v25 = v45;
  v26 = v46;
  if (v45 != v46)
  {
    v27 = (char *)this + 40;
    if (a4)
      v28 = "resetOnDelete for ";
    else
      v28 = "no resetOnDelete for ";
    if (a4)
      v29 = 18;
    else
      v29 = 21;
    do
    {
      v30 = (*(uint64_t (**)(char *))(*(_QWORD *)v27 + 64))((char *)this + 40);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v27 + 16))((char *)this + 40, v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"shutdown with ", 14);
      *(_BYTE *)(v30 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)v28, v29);
      *(_BYTE *)(v30 + 17) = 0;
      v31 = (_BYTE *)(*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)*v25 + 104))(*v25, v30);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v31[17] = 0;
      SipTcpConnection::shutdown((SipTcpConnection *)*v25, a4, (uint64_t)v42);
      ImsResult::~ImsResult((ImsResult *)v42);
      v32 = (std::__shared_weak_count *)v25[1];
      v40 = (SipTcpConnection *)*v25;
      v41 = v32;
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      (*(void (**)(SipTcpTransport *, SipTcpConnection **))(*(_QWORD *)this + 80))(this, &v40);
      v35 = v41;
      if (v41)
      {
        v36 = (unint64_t *)&v41->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v25 += 2;
    }
    while (v25 != v26);
  }
  v51 = &v45;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
  v45 = (void **)&v48;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v45);
}

void sub_1BF152310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void **a23)
{
  uint64_t v23;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  *(_QWORD *)(v23 - 96) = &a23;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 96));
  a23 = (void **)(v23 - 120);
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

double SipTcpTransport::setRemoteOutboundAddress@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  double result;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  __int128 v21;

  if (*(_QWORD *)(a1 + 168))
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a2 + 32))(&v21);
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 264, &v21);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
    if (*((_QWORD *)&v21 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v19, (_QWORD *)(a1 + 152));
    v9 = v20;
    if (v19)
      v10 = v19 + 32;
    else
      v10 = 0;
    *(_QWORD *)&v21 = v10;
    *((_QWORD *)&v21 + 1) = v20;
    v11 = *(_QWORD *)(a1 + 168);
    v17 = v10;
    v18 = v20;
    if (v20)
    {
      p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
      do
        v13 = __ldxr(p_shared_weak_owners);
      while (__stxr(v13 + 1, p_shared_weak_owners));
    }
    SipSocketMultiplexer<ImsListenSocketInterfaceDelegate>::addDelegateForRemoteAddress(v11, &v17, a2);
    if (v18)
      std::__shared_weak_count::__release_weak(v18);
    result = 0.0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741827;
  }
  return result;
}

void sub_1BF1524E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void SipSocketMultiplexer<ImsListenSocketInterfaceDelegate>::addDelegateForRemoteAddress(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  void *__p[2];
  uint64_t v12;
  void **v13;

  __p[0] = 0;
  __p[1] = 0;
  v12 = 0;
  IpAddress::asString(*a3, (uint64_t)__p, 3);
  v13 = __p;
  v5 = std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 80), __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v13);
  v7 = *a2;
  v6 = a2[1];
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = (std::__shared_weak_count *)v5[8];
  v5[7] = v7;
  v5[8] = v6;
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
}

void sub_1BF1525AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ImsOutStream *SipTcpTransport::printConnectionMap(ImsOutStream *this, ImsOutStream *a2)
{
  _QWORD *i;
  uint64_t **j;

  if (*((_QWORD *)this + 28))
  {
    for (i = (_QWORD *)*((_QWORD *)this + 27); i; i = (_QWORD *)*i)
    {
      for (j = (uint64_t **)i[7]; j; j = (uint64_t **)*j)
        this = SipTcpConnection::printDebugInfo((SipTcpConnection *)j[2], a2);
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"no connections", 14);
    *((_BYTE *)a2 + 17) = 0;
    this = (ImsOutStream *)(*(uint64_t (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
  }
  return this;
}

void SipTcpTransport::removeConnection(std::__shared_weak_count *a1, SipTcpConnection **a2)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  uint64_t *p_shared_weak_owners;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 **v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int8 *v31;
  int8x8_t shared_weak_owners;
  unint64_t v33;
  uint8x8_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  SipTcpConnection *v41;
  SipTcpConnection *v42;
  uint64_t v43[2];
  void *v44[2];
  uint64_t v45;
  void *__p;
  std::__shared_weak_count *v47;
  char v48;
  char v49;

  v44[0] = 0;
  v44[1] = 0;
  v45 = 0;
  v4 = (void *)*((_QWORD *)*a2 + 34);
  if (v4)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v4 + 104))(&__p);
    v4 = __p;
  }
  else
  {
    __p = 0;
    v47 = 0;
  }
  IpAddress::asString((uint64_t)v4, (uint64_t)v44, 0);
  v5 = v47;
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = &a1[8].__shared_owners_;
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(&a1[8].__shared_owners_, (unsigned __int8 *)v44);
  if (v9)
  {
    v10 = v9;
    v11 = *(int8x8_t *)(v9 + 48);
    if (v11)
    {
      v12 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ ((unint64_t)*a2 >> 32));
      v13 = 0x9DDFEA08EB382D69 * (((unint64_t)*a2 >> 32) ^ (v12 >> 47) ^ v12);
      v14 = 0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47));
      v15 = (uint8x8_t)vcnt_s8(v11);
      v15.i16[0] = vaddlv_u8(v15);
      if (v15.u32[0] > 1uLL)
      {
        v16 = v14;
        if (v14 >= *(_QWORD *)&v11)
          v16 = v14 % *(_QWORD *)&v11;
      }
      else
      {
        v16 = v14 & (*(_QWORD *)&v11 - 1);
      }
      v20 = *((_QWORD *)v9 + 5);
      v21 = *(unsigned __int8 ***)(v20 + 8 * v16);
      if (v21)
      {
        v22 = *v21;
        if (v22)
        {
          v23 = *(_QWORD *)&v11 - 1;
          do
          {
            v24 = *((_QWORD *)v22 + 1);
            if (v24 == v14)
            {
              if (*((SipTcpConnection **)v22 + 2) == *a2)
              {
                if (v15.u32[0] > 1uLL)
                {
                  if (v14 >= *(_QWORD *)&v11)
                    v14 %= *(_QWORD *)&v11;
                }
                else
                {
                  v14 &= v23;
                }
                v25 = *(unsigned __int8 **)(v20 + 8 * v14);
                do
                {
                  v26 = v25;
                  v25 = *(unsigned __int8 **)v25;
                }
                while (v25 != v22);
                if (v26 == v9 + 56)
                  goto LABEL_46;
                v27 = *((_QWORD *)v26 + 1);
                if (v15.u32[0] > 1uLL)
                {
                  if (v27 >= *(_QWORD *)&v11)
                    v27 %= *(_QWORD *)&v11;
                }
                else
                {
                  v27 &= v23;
                }
                if (v27 != v14)
                {
LABEL_46:
                  if (!*(_QWORD *)v22)
                    goto LABEL_47;
                  v28 = *(_QWORD *)(*(_QWORD *)v22 + 8);
                  if (v15.u32[0] > 1uLL)
                  {
                    if (v28 >= *(_QWORD *)&v11)
                      v28 %= *(_QWORD *)&v11;
                  }
                  else
                  {
                    v28 &= v23;
                  }
                  if (v28 != v14)
LABEL_47:
                    *(_QWORD *)(v20 + 8 * v14) = 0;
                }
                v29 = *(_QWORD *)v22;
                if (*(_QWORD *)v22)
                {
                  v30 = *(_QWORD *)(v29 + 8);
                  if (v15.u32[0] > 1uLL)
                  {
                    if (v30 >= *(_QWORD *)&v11)
                      v30 %= *(_QWORD *)&v11;
                  }
                  else
                  {
                    v30 &= v23;
                  }
                  if (v30 != v14)
                  {
                    *(_QWORD *)(*((_QWORD *)v9 + 5) + 8 * v30) = v26;
                    v29 = *(_QWORD *)v22;
                  }
                }
                *(_QWORD *)v26 = v29;
                *(_QWORD *)v22 = 0;
                --*((_QWORD *)v9 + 8);
                __p = v22;
                v47 = (std::__shared_weak_count *)(v9 + 56);
                v48 = 1;
                std::unique_ptr<std::__hash_node<std::shared_ptr<SipTcpConnection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<SipTcpConnection>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
                break;
              }
            }
            else
            {
              if (v15.u32[0] > 1uLL)
              {
                if (v24 >= *(_QWORD *)&v11)
                  v24 %= *(_QWORD *)&v11;
              }
              else
              {
                v24 &= v23;
              }
              if (v24 != v16)
                break;
            }
            v22 = *(unsigned __int8 **)v22;
          }
          while (v22);
        }
      }
    }
    if (!*((_QWORD *)v10 + 8))
    {
      v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(&a1[8].__shared_owners_, (unsigned __int8 *)v44);
      if (v31)
      {
        shared_weak_owners = (int8x8_t)a1[8].__shared_weak_owners_;
        v33 = *((_QWORD *)v31 + 1);
        v34 = (uint8x8_t)vcnt_s8(shared_weak_owners);
        v34.i16[0] = vaddlv_u8(v34);
        if (v34.u32[0] > 1uLL)
        {
          if (v33 >= *(_QWORD *)&shared_weak_owners)
            v33 %= *(_QWORD *)&shared_weak_owners;
        }
        else
        {
          v33 &= *(_QWORD *)&shared_weak_owners - 1;
        }
        v35 = *(unsigned __int8 **)(*v8 + 8 * v33);
        do
        {
          v36 = v35;
          v35 = *(unsigned __int8 **)v35;
        }
        while (v35 != v31);
        if (v36 == (unsigned __int8 *)&a1[9])
          goto LABEL_75;
        v37 = *((_QWORD *)v36 + 1);
        if (v34.u32[0] > 1uLL)
        {
          if (v37 >= *(_QWORD *)&shared_weak_owners)
            v37 %= *(_QWORD *)&shared_weak_owners;
        }
        else
        {
          v37 &= *(_QWORD *)&shared_weak_owners - 1;
        }
        if (v37 != v33)
        {
LABEL_75:
          if (!*(_QWORD *)v31)
            goto LABEL_76;
          v38 = *(_QWORD *)(*(_QWORD *)v31 + 8);
          if (v34.u32[0] > 1uLL)
          {
            if (v38 >= *(_QWORD *)&shared_weak_owners)
              v38 %= *(_QWORD *)&shared_weak_owners;
          }
          else
          {
            v38 &= *(_QWORD *)&shared_weak_owners - 1;
          }
          if (v38 != v33)
LABEL_76:
            *(_QWORD *)(*v8 + 8 * v33) = 0;
        }
        v39 = *(_QWORD *)v31;
        if (*(_QWORD *)v31)
        {
          v40 = *(_QWORD *)(v39 + 8);
          if (v34.u32[0] > 1uLL)
          {
            if (v40 >= *(_QWORD *)&shared_weak_owners)
              v40 %= *(_QWORD *)&shared_weak_owners;
          }
          else
          {
            v40 &= *(_QWORD *)&shared_weak_owners - 1;
          }
          if (v40 != v33)
          {
            *(_QWORD *)(*v8 + 8 * v40) = v36;
            v39 = *(_QWORD *)v31;
          }
        }
        *(_QWORD *)v36 = v39;
        *(_QWORD *)v31 = 0;
        --a1[9].__shared_owners_;
        __p = v31;
        v47 = a1 + 9;
        v48 = 1;
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
      }
    }
    v41 = *a2;
    v43[0] = 0;
    v43[1] = 0;
    SipTcpConnection::setManager(v41, v43);
    v42 = *a2;
    LoggableString::LoggableString((LoggableString *)&__p, "Transport");
    (*(void (**)(SipTcpConnection *, void **))(*(_QWORD *)v42 + 40))(v42, &__p);
    if (v49 < 0)
      operator delete(__p);
  }
  else
  {
    v18 = a1[1].__shared_weak_owners_;
    p_shared_weak_owners = &a1[1].__shared_weak_owners_;
    v19 = (*(uint64_t (**)(uint64_t *))(v18 + 56))(p_shared_weak_owners);
    (*(void (**)(uint64_t *, uint64_t))(*p_shared_weak_owners + 16))(p_shared_weak_owners, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"received close event for connection to unknown host ", 52);
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v19 + 32))(v19, v44);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v19 + 17) = 0;
  }
  if (SHIBYTE(v45) < 0)
    operator delete(v44[0]);
}

void sub_1BF152B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'SipTcpTransport::removeConnection(uint64_t a1, SipTcpConnection **a2)
{
  SipTcpTransport::removeConnection((std::__shared_weak_count *)(a1 - 144), a2);
}

void SipTcpTransport::setServiceClass(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v2 = *(_QWORD **)(a1 + 216);
  if (v2)
  {
    while (1)
    {
      v4 = (_QWORD *)v2[7];
      if (v4)
        break;
LABEL_21:
      v2 = (_QWORD *)*v2;
      if (!v2)
        return;
    }
    while (1)
    {
      v5 = v4[2];
      if (v5 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 176))(v5))
      {
        v6 = v4[2];
        v8 = *(_QWORD *)(v6 + 272);
        v7 = *(std::__shared_weak_count **)(v6 + 280);
        if (!v7)
          goto LABEL_10;
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
          if (v8)
          {
LABEL_11:
            v12 = v4[2];
            v13 = *(_QWORD *)(v12 + 272);
            v14 = *(std::__shared_weak_count **)(v12 + 280);
            if (v14)
            {
              v15 = (unint64_t *)&v14->__shared_owners_;
              do
                v16 = __ldxr(v15);
              while (__stxr(v16 + 1, v15));
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 160))(v13, a2);
            if (v14)
            {
              v17 = (unint64_t *)&v14->__shared_owners_;
              do
                v18 = __ldaxr(v17);
              while (__stlxr(v18 - 1, v17));
              if (!v18)
              {
                ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                std::__shared_weak_count::__release_weak(v14);
              }
            }
          }
        }
        else
        {
LABEL_10:
          if (v8)
            goto LABEL_11;
        }
      }
      v4 = (_QWORD *)*v4;
      if (!v4)
        goto LABEL_21;
    }
  }
}

void sub_1BF152CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipTcpTransport::updateCrlfKeepAliveInterval(SipTcpTransport *this, int a2, int a3)
{
  _QWORD *i;
  uint64_t **j;
  uint64_t *v7;

  for (i = (_QWORD *)*((_QWORD *)this + 27); i; i = (_QWORD *)*i)
  {
    for (j = (uint64_t **)i[7]; j; j = (uint64_t **)*j)
    {
      v7 = j[2];
      if (v7)
      {
        if ((*(unsigned int (**)(uint64_t *))(*v7 + 176))(v7))
          SipTcpConnection::updateCrlfKeepAliveInterval((SipTcpConnection *)j[2], a2, a3);
      }
    }
  }
}

void SipTcpTransport::updateCrlfKeepAliveNetwork(SipTcpTransport *this)
{
  _QWORD *i;
  _QWORD *j;
  uint64_t v3;
  SipTcpConnection *v4;

  for (i = (_QWORD *)*((_QWORD *)this + 27); i; i = (_QWORD *)*i)
  {
    for (j = (_QWORD *)i[7]; j; j = (_QWORD *)*j)
    {
      v3 = j[2];
      if (v3)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 176))(v3))
        {
          v4 = (SipTcpConnection *)j[2];
          SipTcpConnection::stopCrlfKeepAlive(v4);
          SipTcpConnection::startCrlfKeepAlive((std::__shared_weak_count **)v4);
        }
      }
    }
  }
}

void SipTcpTransport::handleKeepAliveWake(SipTcpTransport *this)
{
  _QWORD *i;
  uint64_t **j;
  uint64_t *v3;

  for (i = (_QWORD *)*((_QWORD *)this + 27); i; i = (_QWORD *)*i)
  {
    for (j = (uint64_t **)i[7]; j; j = (uint64_t **)*j)
    {
      v3 = j[2];
      if (v3)
      {
        if ((*(unsigned int (**)(uint64_t *))(*v3 + 176))(v3))
          SipTcpConnection::handleKeepAliveWake((SipTcpConnection *)j[2]);
      }
    }
  }
}

void SipTcpTransport::localAddress(SipTcpTransport *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *((_QWORD *)this + 21);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 120);
    v4 = *(std::__shared_weak_count **)(v2 + 128);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
    if (v4)
    {
      v7 = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_1BF152E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipTcpTransport::send(uint64_t a1@<X0>, uint64_t *a2@<X3>, uint64_t *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned __int8 *v12;
  std::__shared_weak_count *ForceResetExistingTransportsKey;
  ImsPrefs *v14;
  void *v15;
  _QWORD *v16;
  _BYTE *v17;
  SipTcpConnection **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  SipTcpConnection *v23;
  uint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  _BYTE *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD v68[3];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  SipTcpConnection *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74[2];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  __int128 v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  __int128 v86;
  void *v87[2];
  uint64_t v88;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 88))(*a2) & 1) == 0)
  {
    v9 = *(_QWORD *)(a1 + 40);
    v8 = a1 + 40;
    v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"invalid address specified in send: ", 35);
    *(_BYTE *)(v10 + 17) = 0;
    v11 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 40))(*a2, v10);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v11[17] = 0;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 1073741825;
    return;
  }
  v72 = 0;
  v73 = 0;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68[0] = &off_1E78B7238;
  v68[1] = &_bambiDomain;
  v68[2] = 0x40000000;
  if (a3 && *a3)
  {
    std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v72, a3);
    if (!v72)
    {
LABEL_92:
      v59 = *(std::__shared_weak_count **)(a1 + 16);
      if (v59)
      {
        v60 = std::__shared_weak_count::lock(v59);
        v74[1] = v60;
        if (v60)
        {
          v61 = v60;
          v62 = *(std::__shared_weak_count **)(a1 + 8);
          v74[0] = v62;
          if (v62)
            ((void (*)(std::__shared_weak_count *, _QWORD *))v62->__vftable[4].~__shared_weak_count_0)(v62, v68);
          p_shared_owners = (unint64_t *)&v61->__shared_owners_;
          do
            v64 = __ldaxr(p_shared_owners);
          while (__stlxr(v64 - 1, p_shared_owners));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
      }
      ImsResult::ImsResult(a4, (uint64_t)v68);
      goto LABEL_101;
    }
LABEL_90:
    std::shared_ptr<IpAddress>::operator=[abi:ne180100](a3, (uint64_t *)&v72);
    v23 = v72;
    goto LABEL_91;
  }
  v87[0] = 0;
  v87[1] = 0;
  v88 = 0;
  IpAddress::asString(*a2, (uint64_t)v87, 0);
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>((_QWORD *)(a1 + 200), (unsigned __int8 *)v87);
  v86 = 0uLL;
  (*(void (**)(std::__shared_weak_count **__return_ptr, uint64_t))(*(_QWORD *)a1 + 104))(v74, a1);
  v84 = 0;
  v85 = 0;
  if (v74[1])
  {
    v85 = std::__shared_weak_count::lock(v74[1]);
    if (v85)
    {
      ForceResetExistingTransportsKey = v74[0];
      v84 = v74[0];
    }
    else
    {
      ForceResetExistingTransportsKey = 0;
    }
    if (v74[1])
      std::__shared_weak_count::__release_weak(v74[1]);
    if (ForceResetExistingTransportsKey)
    {
      v14 = (ImsPrefs *)((uint64_t (*)(std::__shared_weak_count *))ForceResetExistingTransportsKey->__vftable[4].__get_deleter)(ForceResetExistingTransportsKey);
      ForceResetExistingTransportsKey = (std::__shared_weak_count *)ImsPrefs::getForceResetExistingTransportsKey(v14);
      v15 = ImsPrefs::prefWithKey(v14, (void **)&ForceResetExistingTransportsKey->__vftable);
      if (!v15)
      {
        LODWORD(ForceResetExistingTransportsKey) = BYTE1(ForceResetExistingTransportsKey[2].__shared_owners_) != 0;
        if (!v12)
          goto LABEL_29;
        goto LABEL_19;
      }
      LODWORD(ForceResetExistingTransportsKey) = (*(uint64_t (**)(void *))(*(_QWORD *)v15 + 40))(v15);
    }
    if (!v12)
      goto LABEL_29;
  }
  else
  {
    LODWORD(ForceResetExistingTransportsKey) = 0;
    if (!v12)
      goto LABEL_29;
  }
LABEL_19:
  v16 = (_QWORD *)*((_QWORD *)v12 + 7);
  if (v16)
  {
    while (1)
    {
      v18 = (SipTcpConnection **)(v16 + 2);
      v17 = (_BYTE *)v16[2];
      if (v17[505])
      {
        if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v17 + 176))(v17))
        {
          std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v86, v16 + 2);
          v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a1 + 40);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40, v19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"reusing existing connection ", 28);
          *(_BYTE *)(v19 + 17) = 0;
          v20 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v86 + 104))(v86, v19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)" for outgoing message", 21);
          *(_BYTE *)(v20 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v20 + 17) = 0;
          goto LABEL_29;
        }
        if (((*(unsigned int (**)(SipTcpConnection *))(*(_QWORD *)*v18 + 184))(*v18) & ForceResetExistingTransportsKey) == 1)
          break;
      }
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_29;
    }
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 48))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"existing connection ", 20);
    *(_BYTE *)(v21 + 17) = 0;
    v22 = (*(uint64_t (**)(SipTcpConnection *, uint64_t))(*(_QWORD *)*v18 + 104))(*v18, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)" is attempting shutdown.  Forcing reset.", 40);
    *(_BYTE *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v22 + 17) = 0;
    SipTcpConnection::resetSocket(*v18);
  }
LABEL_29:
  v23 = (SipTcpConnection *)v86;
  if ((_QWORD)v86)
  {
LABEL_69:
    v42 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
    v86 = 0uLL;
    goto LABEL_70;
  }
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v81, (_QWORD *)(a1 + 152));
  if ((_QWORD)v81)
    v24 = v81 + 144;
  else
    v24 = 0;
  v82 = v24;
  v83 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
  v81 = 0uLL;
  v79 = 0;
  v80 = 0;
  SipTcpConnection::create(&v82, &v79, 0, v74);
  v25 = *(_OWORD *)v74;
  v74[0] = 0;
  v74[1] = 0;
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
  v86 = v25;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v74[1];
  if (v74[1])
  {
    v30 = &v74[1]->__shared_owners_;
    do
      v31 = __ldaxr((unint64_t *)v30);
    while (__stlxr(v31 - 1, (unint64_t *)v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v80;
  if (v80)
  {
    v33 = (unint64_t *)&v80->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v83;
  if (v83)
  {
    v36 = (unint64_t *)&v83->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
  if (*((_QWORD *)&v81 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v78 = 0;
  v77 = 0u;
  v75 = 0u;
  v76 = 0u;
  *(_OWORD *)v74 = 0u;
  SipTcpConnection::initializeOutgoing(v86, a1 + 248, (uint64_t)a2, a1 + 280, 1, *(unsigned int *)(a1 + 304), (ImsResult *)v74);
  if (!((unsigned int (*)(std::__shared_weak_count *, _QWORD))v74[1]->__get_deleter)(v74[1], v75))
  {
    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 64))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40, v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v43 + 8), (uint64_t)"creating new connection for outgoing message: ", 46);
    *(_BYTE *)(v43 + 17) = 0;
    v44 = (_BYTE *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v86 + 104))(v86, v43);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v44[17] = 0;
    v45 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
    v81 = v86;
    if (*((_QWORD *)&v86 + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    SipTcpTransport::addConnection(a1, (uint64_t *)&v81);
    if (v45)
    {
      v48 = (unint64_t *)&v45->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    ImsResult::~ImsResult((ImsResult *)v74);
    v23 = (SipTcpConnection *)v86;
    goto LABEL_69;
  }
  ImsResult::operator=((uint64_t)v68, (uint64_t)v74);
  v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 56))(a1 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40, v41);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)"unable to initialize outgoing connection", 40);
  *(_BYTE *)(v41 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v41 + 17) = 0;
  ImsResult::~ImsResult((ImsResult *)v74);
  v23 = 0;
  v42 = 0;
LABEL_70:
  v50 = v85;
  if (v85)
  {
    v51 = (unint64_t *)&v85->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
  if (*((_QWORD *)&v86 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (SHIBYTE(v88) < 0)
    operator delete(v87[0]);
  v56 = v73;
  v72 = v23;
  v73 = v42;
  if (v56)
  {
    v57 = (unint64_t *)&v56->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
    v23 = v72;
  }
  if (!v23)
    goto LABEL_92;
  if (a3)
    goto LABEL_90;
LABEL_91:
  SipTcpConnection::sendData(v23, a4);
LABEL_101:
  ImsResult::~ImsResult((ImsResult *)v68);
  v65 = v73;
  if (v73)
  {
    v66 = (unint64_t *)&v73->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
}

void sub_1BF153728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  ImsResult::~ImsResult((ImsResult *)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void SipTcpTransport::sendMessageFromConnection(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6 && (v9 = std::__shared_weak_count::lock(v6)) != 0)
  {
    v10 = v9;
    v11 = *(_QWORD *)(a1 + 8);
    if (v11)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 120))(v11, a2, a3);
    }
    else
    {
      *(_OWORD *)(a4 + 24) = 0u;
      *(_OWORD *)(a4 + 40) = 0u;
      *(_OWORD *)(a4 + 56) = 0u;
      *(_QWORD *)a4 = &off_1E78B7238;
      *(_QWORD *)(a4 + 8) = &_bambiDomain;
      *(_DWORD *)(a4 + 16) = 0x40000000;
    }
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0x40000000;
  }
}

void sub_1BF1538FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipTcpTransport::sendMessageFromConnection(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  SipTcpTransport::sendMessageFromConnection(a1 - 144, a2, a3, a4);
}

uint64_t SipTcpTransport::shouldResetConnection()
{
  return 0;
}

uint64_t `non-virtual thunk to'SipTcpTransport::shouldResetConnection()
{
  return 0;
}

void SipTcpTransport::triggerSocketErrors(SipTcpTransport *this, const ImsResult *a2)
{
  _QWORD *v2;
  __int128 *i;
  _QWORD *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  void **v15;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v2 = (_QWORD *)*((_QWORD *)this + 27);
  if (v2)
  {
    do
    {
      for (i = (__int128 *)(v2 + 7);
            ;
            std::vector<std::shared_ptr<SipDialogFork>>::push_back[abi:ne180100]((uint64_t)&v12, i + 1))
      {
        i = *(__int128 **)i;
        if (!i)
          break;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
    v5 = v12;
    v6 = v13;
    while (1)
    {
      if (v5 == v6)
        goto LABEL_18;
      v8 = *(_QWORD *)(*v5 + 272);
      v7 = *(std::__shared_weak_count **)(*v5 + 280);
      if (!v7)
        break;
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (v11)
        break;
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
        goto LABEL_14;
LABEL_15:
      v5 += 2;
    }
    if (!v8)
      goto LABEL_15;
LABEL_14:
    (*(void (**)(_QWORD, const ImsResult *))(*(_QWORD *)*v5 + 144))(*v5, a2);
    goto LABEL_15;
  }
LABEL_18:
  v15 = (void **)&v12;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v15);
}

void sub_1BF153A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void SipTcpTransport::handleErrorFromConnection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v6 = std::__shared_weak_count::lock(v4);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)(a1 + 8);
      if (v8)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 168))(v8, a3);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF153AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipTcpTransport::handleErrorFromConnection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  SipTcpTransport::handleErrorFromConnection(a1 - 144, a2, a3);
}

void SipTcpTransport::processIncomingMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12[2];

  v7 = (std::__shared_weak_count *)a7[1];
  v12[0] = *a7;
  v12[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  SipTransport::processIncomingMessage(a1, a2, a3, a4, a5, a6, v12);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1BF153B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipTcpTransport::processIncomingMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  SipTcpTransport::processIncomingMessage(a1 - 144, a2, a3, a4, a5, a6, a7);
}

char *SipTcpTransport::name(SipTcpTransport *this)
{
  return &SipTransport::kTransportTCP;
}

uint64_t SipTcpTransport::group@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 16);
  *a2 = *(_QWORD *)(this + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void SipTcpTransport::transportLayer(SipTcpTransport *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[2];

  SipTransport::transportLayer(this, v8);
  v3 = (std::__shared_weak_count *)v8[1];
  *a2 = v8[0];
  a2[1] = v3;
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t SipTcpTransport::messageEncoding(SipTcpTransport *this)
{
  return *((_QWORD *)this + 3);
}

void SipTcpTransport::stackId(SipTcpTransport *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 11);
  }
}

uint64_t `non-virtual thunk to'SipTcpTransport::group@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this - 128);
  *a2 = *(_QWORD *)(this - 136);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void `non-virtual thunk to'SipTcpTransport::transportLayer(SipTcpTransport *this@<X0>, _QWORD *a2@<X8>)
{
  SipTcpTransport::transportLayer((SipTcpTransport *)((char *)this - 144), a2);
}

uint64_t `non-virtual thunk to'SipTcpTransport::messageEncoding(SipTcpTransport *this)
{
  return *((_QWORD *)this - 15);
}

void `non-virtual thunk to'SipTcpTransport::stackId(const std::string::value_type **this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this - 49) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(this - 9), (std::string::size_type)*(this - 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(this - 9);
    a2->__r_.__value_.__r.__words[2] = (std::string::size_type)*(this - 7);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,0>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    operator delete(v4);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__shared_ptr_emplace<SipListenSocketMultiplexer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E3520;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipListenSocketMultiplexer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E3520;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipListenSocketMultiplexer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v11 = 0;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0x48uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1BF153F44(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::shared_ptr<SipTcpConnection>>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::unique_ptr<std::__hash_node<std::shared_ptr<SipTcpConnection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<SipTcpConnection>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void SipProxyAuthorizationHeader::SipProxyAuthorizationHeader(SipProxyAuthorizationHeader *this)
{
  uint64_t v1;

  v1 = SipHeader::SipHeader((uint64_t)this, (const std::string *)"Authorization");
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)v1 = &off_1E78E3570;
  std::string::operator=((std::string *)(v1 + 8), (const std::string *)"Proxy-Authorization");
}

void sub_1BF15402C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)v1 = &off_1E78CC338;
  v3 = *(_QWORD *)(v1 + 64);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  SipHeader::~SipHeader((void **)v1);
  _Unwind_Resume(a1);
}

void SipProxyAuthorizationHeader::SipProxyAuthorizationHeader(SipProxyAuthorizationHeader *this, const SipAuthenticateHeader *a2)
{
  SipHeader *v2;

  v2 = SipAuthorizationHeader::SipAuthorizationHeader(this, a2);
  *(_QWORD *)v2 = &off_1E78E3570;
  std::string::operator=((std::string *)((char *)v2 + 8), (const std::string *)"Proxy-Authorization");
}

void sub_1BF15409C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)v1 = &off_1E78CC338;
  v3 = *(_QWORD *)(v1 + 64);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  SipHeader::~SipHeader((void **)v1);
  _Unwind_Resume(a1);
}

void SipProxyAuthorizationHeader::~SipProxyAuthorizationHeader(SipProxyAuthorizationHeader *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E78CC338;
  v2 = *((_QWORD *)this + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  SipHeader::~SipHeader((void **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E78CC338;
  v2 = *((_QWORD *)this + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipProxyAuthorizationHeader::clone(SipProxyAuthorizationHeader *this)
{
  uint64_t v2;

  v2 = operator new();
  SipAuthorizationHeader::SipAuthorizationHeader((SipHeader *)v2, this);
  *(_QWORD *)v2 = &off_1E78E3570;
  std::string::operator=((std::string *)(v2 + 8), (const std::string *)"Proxy-Authorization");
  return v2;
}

void sub_1BF1541C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)v1 = &off_1E78CC338;
  v3 = *(_QWORD *)(v1 + 64);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  SipHeader::~SipHeader((void **)v1);
  MEMORY[0x1C3B87100](v1, 0x10B3C40ADE1DEA6);
  _Unwind_Resume(a1);
}

void BambiConferenceCallStateMachine::setCall(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;

  v5 = *a2;
  v4 = a2[1];
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::__shared_weak_count *)a1[12];
  a1[11] = v5;
  a1[12] = v4;
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  v9 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  if (v9)
    v11 = v9 + 1816;
  else
    v11 = 0;
  if (v10)
  {
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
  }
  v15 = (std::__shared_weak_count *)a1[10];
  a1[9] = v11;
  a1[10] = v10;
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
}

void BambiConferenceCallStateMachine::stateMachineName(BambiConferenceCallStateMachine *this@<X0>, LoggableString *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_6;
  }
  v5 = std::__shared_weak_count::lock(v4);
  if (!v5 || (v6 = *((_QWORD *)this + 11)) == 0)
  {
LABEL_6:
    LoggableString::LoggableString(a2, "Unknown Conference");
    if (!v5)
      return;
    goto LABEL_7;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
LABEL_7:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1BF154384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiConferenceCall::constructStateMachine(BambiConferenceCall *this)
{
  void *v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  const void *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  std::__shared_weak_count_vtbl *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *shared_owners;
  unint64_t v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  const void *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  std::__shared_weak_count_vtbl *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  const void *v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  std::__shared_weak_count_vtbl *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  const void *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  std::__shared_weak_count_vtbl *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  const void *v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  std::__shared_weak_count_vtbl *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132[2];
  uint64_t v133[2];
  uint64_t v134[2];
  uint64_t v135[2];
  uint64_t v136;
  uint64_t v137;
  uint64_t v138[2];
  uint64_t v139[2];
  uint64_t v140;
  uint64_t v141;
  const void *v142;
  std::__shared_weak_count *v143;

  v140 = 0;
  v141 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v142, (_QWORD *)this + 22);
  if (v142
  {
    v140 = (uint64_t)v2;
    v141 = (uint64_t)v143;
    v3 = (uint64_t *)&v142;
  }
  else
  {
    v3 = &v140;
  }
  *v3 = 0;
  v3[1] = 0;
  v4 = v143;
  if (v143)
  {
    p_shared_owners = (unint64_t *)&v143->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (_QWORD *)((char *)this + 1888);
  v8 = (std::__shared_weak_count *)v141;
  v139[0] = v140;
  v139[1] = v141;
  if (v141)
  {
    v9 = (unint64_t *)(v141 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    BambiConferenceCallStateMachine::setCall(v7, v139);
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    BambiConferenceCallStateMachine::setCall(v7, v139);
  }
  v13 = (const void *)v140;
  v12 = (std::__shared_weak_count *)v141;
  v14 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v15 = v14;
  v14->__shared_owners_ = 0;
  v16 = (unint64_t *)&v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E3B48;
  v17 = (std::__shared_weak_count_vtbl *)&v14[1];
  v142 = v13;
  v143 = v12;
  if (v12)
  {
    v18 = (unint64_t *)&v12->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  BambiConferenceCallWaitingForHoldState::BambiConferenceCallWaitingForHoldState((SipState *)&v14[1], &v142);
  if (v12)
  {
    v20 = (unint64_t *)&v12->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v136 = (uint64_t)v17;
  v137 = (uint64_t)v15;
  shared_owners = (std::__shared_weak_count *)v15[9].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      goto LABEL_39;
    do
      v23 = __ldxr(v16);
    while (__stxr(v23 + 1, v16));
    p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v25 = __ldxr(p_shared_weak_owners);
    while (__stxr(v25 + 1, p_shared_weak_owners));
    v15[9].__vftable = v17;
    v15[9].__shared_owners_ = (uint64_t)v15;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v26 = __ldxr(v16);
    while (__stxr(v26 + 1, v16));
    v27 = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    v15[9].__vftable = v17;
    v15[9].__shared_owners_ = (uint64_t)v15;
  }
  do
    v29 = __ldaxr(v16);
  while (__stlxr(v29 - 1, v16));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_39:
  v30 = (std::__shared_weak_count *)v137;
  v138[0] = v136;
  v138[1] = v137;
  v136 = 0;
  v137 = 0;
  SipTypedStateMachine<BambiConferenceCallState>::addState((uint64_t)v7, v138);
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v34 = (const void *)v140;
  v33 = (std::__shared_weak_count *)v141;
  v35 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v36 = v35;
  v35->__shared_owners_ = 0;
  v37 = (unint64_t *)&v35->__shared_owners_;
  v35->__shared_weak_owners_ = 0;
  v35->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E3B98;
  v38 = (std::__shared_weak_count_vtbl *)&v35[1];
  v142 = v34;
  v143 = v33;
  if (v33)
  {
    v39 = (unint64_t *)&v33->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  BambiConferenceCallSessionRequestedState::BambiConferenceCallSessionRequestedState((SipState *)&v35[1], &v142);
  if (v33)
  {
    v41 = (unint64_t *)&v33->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v136 = (uint64_t)v38;
  v137 = (uint64_t)v36;
  v43 = (std::__shared_weak_count *)v36[9].__shared_owners_;
  if (v43)
  {
    if (v43->__shared_owners_ != -1)
      goto LABEL_65;
    do
      v44 = __ldxr(v37);
    while (__stxr(v44 + 1, v37));
    v45 = (unint64_t *)&v36->__shared_weak_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
    v36[9].__vftable = v38;
    v36[9].__shared_owners_ = (uint64_t)v36;
    std::__shared_weak_count::__release_weak(v43);
  }
  else
  {
    do
      v47 = __ldxr(v37);
    while (__stxr(v47 + 1, v37));
    v48 = (unint64_t *)&v36->__shared_weak_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
    v36[9].__vftable = v38;
    v36[9].__shared_owners_ = (uint64_t)v36;
  }
  do
    v50 = __ldaxr(v37);
  while (__stlxr(v50 - 1, v37));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
LABEL_65:
  v51 = (std::__shared_weak_count *)v137;
  v135[0] = v136;
  v135[1] = v137;
  v136 = 0;
  v137 = 0;
  SipTypedStateMachine<BambiConferenceCallState>::addState((uint64_t)v7, v135);
  if (v51)
  {
    v52 = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = (std::__shared_weak_count *)v137;
  if (v137)
  {
    v55 = (unint64_t *)(v137 + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v58 = (const void *)v140;
  v57 = (std::__shared_weak_count *)v141;
  v59 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v60 = v59;
  v59->__shared_owners_ = 0;
  v61 = (unint64_t *)&v59->__shared_owners_;
  v59->__shared_weak_owners_ = 0;
  v59->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E3BE8;
  v62 = (std::__shared_weak_count_vtbl *)&v59[1];
  v142 = v58;
  v143 = v57;
  if (v57)
  {
    v63 = (unint64_t *)&v57->__shared_owners_;
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  BambiConferenceCallSessionConfirmedState::BambiConferenceCallSessionConfirmedState((SipState *)&v59[1], &v142);
  if (v57)
  {
    v65 = (unint64_t *)&v57->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v136 = (uint64_t)v62;
  v137 = (uint64_t)v60;
  v67 = (std::__shared_weak_count *)v60[9].__shared_owners_;
  if (v67)
  {
    if (v67->__shared_owners_ != -1)
      goto LABEL_96;
    do
      v68 = __ldxr(v61);
    while (__stxr(v68 + 1, v61));
    v69 = (unint64_t *)&v60->__shared_weak_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
    v60[9].__vftable = v62;
    v60[9].__shared_owners_ = (uint64_t)v60;
    std::__shared_weak_count::__release_weak(v67);
  }
  else
  {
    do
      v71 = __ldxr(v61);
    while (__stxr(v71 + 1, v61));
    v72 = (unint64_t *)&v60->__shared_weak_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
    v60[9].__vftable = v62;
    v60[9].__shared_owners_ = (uint64_t)v60;
  }
  do
    v74 = __ldaxr(v61);
  while (__stlxr(v74 - 1, v61));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
LABEL_96:
  v75 = (std::__shared_weak_count *)v137;
  v134[0] = v136;
  v134[1] = v137;
  v136 = 0;
  v137 = 0;
  SipTypedStateMachine<BambiConferenceCallState>::addState((uint64_t)v7, v134);
  if (v75)
  {
    v76 = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = (std::__shared_weak_count *)v137;
  if (v137)
  {
    v79 = (unint64_t *)(v137 + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v82 = (const void *)v140;
  v81 = (std::__shared_weak_count *)v141;
  v83 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v84 = v83;
  v83->__shared_owners_ = 0;
  v85 = (unint64_t *)&v83->__shared_owners_;
  v83->__shared_weak_owners_ = 0;
  v83->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E3C38;
  v86 = (std::__shared_weak_count_vtbl *)&v83[1];
  v142 = v82;
  v143 = v81;
  if (v81)
  {
    v87 = (unint64_t *)&v81->__shared_owners_;
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
  }
  BambiConferenceCallWaitToResumeConfirmedSessionState::BambiConferenceCallWaitToResumeConfirmedSessionState((SipState *)&v83[1], &v142);
  if (v81)
  {
    v89 = (unint64_t *)&v81->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v136 = (uint64_t)v86;
  v137 = (uint64_t)v84;
  v91 = (std::__shared_weak_count *)v84[9].__shared_owners_;
  if (v91)
  {
    if (v91->__shared_owners_ != -1)
      goto LABEL_127;
    do
      v92 = __ldxr(v85);
    while (__stxr(v92 + 1, v85));
    v93 = (unint64_t *)&v84->__shared_weak_owners_;
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
    v84[9].__vftable = v86;
    v84[9].__shared_owners_ = (uint64_t)v84;
    std::__shared_weak_count::__release_weak(v91);
  }
  else
  {
    do
      v95 = __ldxr(v85);
    while (__stxr(v95 + 1, v85));
    v96 = (unint64_t *)&v84->__shared_weak_owners_;
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
    v84[9].__vftable = v86;
    v84[9].__shared_owners_ = (uint64_t)v84;
  }
  do
    v98 = __ldaxr(v85);
  while (__stlxr(v98 - 1, v85));
  if (!v98)
  {
    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
    std::__shared_weak_count::__release_weak(v84);
  }
LABEL_127:
  v99 = (std::__shared_weak_count *)v137;
  v133[0] = v136;
  v133[1] = v137;
  v136 = 0;
  v137 = 0;
  SipTypedStateMachine<BambiConferenceCallState>::addState((uint64_t)v7, v133);
  if (v99)
  {
    v100 = (unint64_t *)&v99->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = (std::__shared_weak_count *)v137;
  if (v137)
  {
    v103 = (unint64_t *)(v137 + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v106 = (const void *)v140;
  v105 = (std::__shared_weak_count *)v141;
  v107 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v108 = v107;
  v107->__shared_owners_ = 0;
  v109 = (unint64_t *)&v107->__shared_owners_;
  v107->__shared_weak_owners_ = 0;
  v107->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E3C88;
  v110 = (std::__shared_weak_count_vtbl *)&v107[1];
  v142 = v106;
  v143 = v105;
  if (v105)
  {
    v111 = (unint64_t *)&v105->__shared_owners_;
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 1, v111));
  }
  BambiConferenceCallSessionTerminatedState::BambiConferenceCallSessionTerminatedState((SipState *)&v107[1], &v142);
  if (v105)
  {
    v113 = (unint64_t *)&v105->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v136 = (uint64_t)v110;
  v137 = (uint64_t)v108;
  v115 = (std::__shared_weak_count *)v108[9].__shared_owners_;
  if (v115)
  {
    if (v115->__shared_owners_ != -1)
      goto LABEL_158;
    do
      v116 = __ldxr(v109);
    while (__stxr(v116 + 1, v109));
    v117 = (unint64_t *)&v108->__shared_weak_owners_;
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 1, v117));
    v108[9].__vftable = v110;
    v108[9].__shared_owners_ = (uint64_t)v108;
    std::__shared_weak_count::__release_weak(v115);
  }
  else
  {
    do
      v119 = __ldxr(v109);
    while (__stxr(v119 + 1, v109));
    v120 = (unint64_t *)&v108->__shared_weak_owners_;
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 1, v120));
    v108[9].__vftable = v110;
    v108[9].__shared_owners_ = (uint64_t)v108;
  }
  do
    v122 = __ldaxr(v109);
  while (__stlxr(v122 - 1, v109));
  if (!v122)
  {
    ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
    std::__shared_weak_count::__release_weak(v108);
  }
LABEL_158:
  v123 = (std::__shared_weak_count *)v137;
  v132[0] = v136;
  v132[1] = v137;
  v136 = 0;
  v137 = 0;
  SipTypedStateMachine<BambiConferenceCallState>::addState((uint64_t)v7, v132);
  if (v123)
  {
    v124 = (unint64_t *)&v123->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = (std::__shared_weak_count *)v137;
  if (v137)
  {
    v127 = (unint64_t *)(v137 + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = (std::__shared_weak_count *)v141;
  if (v141)
  {
    v130 = (unint64_t *)(v141 + 8);
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
}

void sub_1BF154D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v17 - 80);
  _Unwind_Resume(a1);
}

_QWORD *SipTypedStateMachine<BambiConferenceCallState>::addState(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *i;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  void *v36;
  _QWORD v37[3];

  result = (_QWORD *)*a2;
  if (!*a2)
    return result;
  v5 = (*(uint64_t (**)(_QWORD *))(*result + 48))(result);
  v6 = v5;
  v7 = v5;
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v5;
      if (v8 <= v5)
        v10 = v5 % v8;
    }
    else
    {
      v10 = ((_DWORD)v8 - 1) & v5;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)(a1 + 16) + 8 * v10);
    if (v11)
    {
      for (i = *v11; i; i = (uint64_t *)*i)
      {
        v13 = i[1];
        if (v13 == v5)
        {
          if (*((_DWORD *)i + 4) == v5)
            return std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100](i + 3, *a2, a2[1]);
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= v8)
              v13 %= v8;
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v10)
            break;
        }
      }
    }
  }
  else
  {
    v10 = 0;
  }
  v14 = (_QWORD *)(a1 + 32);
  v37[2] = 1;
  v15 = operator new(0x28uLL);
  v37[0] = v15;
  v37[1] = a1 + 32;
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = v6;
  v15[3] = 0;
  v15[4] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v17 = *(float *)(a1 + 48);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v10;
    goto LABEL_66;
  }
  v18 = 1;
  if (v8 >= 3)
    v18 = (v8 & (v8 - 1)) != 0;
  v19 = v18 | (2 * v8);
  v20 = vcvtps_u32_f32(v16 / v17);
  if (v19 <= v20)
    prime = (int8x8_t)v20;
  else
    prime = (int8x8_t)v19;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v8 = *(_QWORD *)(a1 + 24);
  }
  if (*(_QWORD *)&prime <= v8)
  {
    if (*(_QWORD *)&prime >= v8)
      goto LABEL_62;
    v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
    if (v8 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
    {
      v28 = std::__next_prime(v28);
    }
    else
    {
      v30 = 1 << -(char)__clz(v28 - 1);
      if (v28 >= 2)
        v28 = v30;
    }
    if (*(_QWORD *)&prime <= v28)
      prime = (int8x8_t)v28;
    if (*(_QWORD *)&prime >= v8)
    {
      v8 = *(_QWORD *)(a1 + 24);
      goto LABEL_62;
    }
    if (!*(_QWORD *)&prime)
    {
      v36 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (v36)
        operator delete(v36);
      v8 = 0;
      *(_QWORD *)(a1 + 24) = 0;
      goto LABEL_62;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v22 = operator new(8 * *(_QWORD *)&prime);
  v23 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v22;
  if (v23)
    operator delete(v23);
  v24 = 0;
  *(int8x8_t *)(a1 + 24) = prime;
  do
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v24++) = 0;
  while (*(_QWORD *)&prime != v24);
  v25 = (_QWORD *)*v14;
  if (*v14)
  {
    v26 = v25[1];
    v27 = (uint8x8_t)vcnt_s8(prime);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      if (v26 >= *(_QWORD *)&prime)
        v26 %= *(_QWORD *)&prime;
    }
    else
    {
      v26 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v26) = v14;
    v31 = (_QWORD *)*v25;
    if (*v25)
    {
      do
      {
        v32 = v31[1];
        if (v27.u32[0] > 1uLL)
        {
          if (v32 >= *(_QWORD *)&prime)
            v32 %= *(_QWORD *)&prime;
        }
        else
        {
          v32 &= *(_QWORD *)&prime - 1;
        }
        if (v32 != v26)
        {
          v33 = *(_QWORD *)(a1 + 16);
          if (!*(_QWORD *)(v33 + 8 * v32))
          {
            *(_QWORD *)(v33 + 8 * v32) = v25;
            goto LABEL_58;
          }
          *v25 = *v31;
          *v31 = **(_QWORD **)(*(_QWORD *)(a1 + 16) + 8 * v32);
          **(_QWORD **)(*(_QWORD *)(a1 + 16) + 8 * v32) = v31;
          v31 = v25;
        }
        v32 = v26;
LABEL_58:
        v25 = v31;
        v31 = (_QWORD *)*v31;
        v26 = v32;
      }
      while (v31);
    }
  }
  v8 = (unint64_t)prime;
LABEL_62:
  if ((v8 & (v8 - 1)) != 0)
  {
    if (v8 <= v7)
      v7 %= v8;
  }
  else
  {
    v7 = ((_DWORD)v8 - 1) & v7;
  }
LABEL_66:
  v34 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8 * v7);
  i = (uint64_t *)v37[0];
  if (v34)
  {
    *(_QWORD *)v37[0] = *v34;
  }
  else
  {
    *(_QWORD *)v37[0] = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = i;
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v7) = v14;
    if (!*i)
      goto LABEL_75;
    v35 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v35 >= v8)
        v35 %= v8;
    }
    else
    {
      v35 &= v8 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v35);
  }
  *v34 = i;
LABEL_75:
  v37[0] = 0;
  ++*(_QWORD *)(a1 + 40);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,void *>>>>::reset[abi:ne180100]((uint64_t)v37);
  return std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100](i + 3, *a2, a2[1]);
}

void sub_1BF155240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void BambiConferenceCall::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, BambiConferenceCall **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  std::allocate_shared[abi:ne180100]<BambiConferenceCall,std::allocator<BambiConferenceCall>,std::shared_ptr<SipStack> &,std::shared_ptr<RTPManager> &,void>(a1, a2, a3);
  BambiConferenceCall::constructStateMachine(*a3);
}

void sub_1BF155294(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiConferenceCall::terminationLocksReleased(BambiConferenceCall *this)
{
  _QWORD *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;

  v2 = (_QWORD *)*((_QWORD *)this + 233);
  v3 = (_QWORD *)*((_QWORD *)this + 234);
  if (v2 == v3)
    goto LABEL_26;
  do
  {
    v4 = *(std::__shared_weak_count **)(*v2 + 152);
    if (!v4)
      goto LABEL_22;
    v5 = *(_QWORD *)(*v2 + 144);
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v8 = std::__shared_weak_count::lock(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v8)
      goto LABEL_22;
    if (v5)
    {
      v9 = *v2;
      v10 = (std::__shared_weak_count *)v2[1];
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      if (*(_QWORD *)(v5 + 1472) == v9)
      {
        std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)(v5 + 1472));
        if (v10)
        {
LABEL_14:
          v13 = (unint64_t *)&v10->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
      else if (v10)
      {
        goto LABEL_14;
      }
    }
    v15 = (unint64_t *)&v8->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
LABEL_22:
    v2 += 2;
  }
  while (v2 != v3);
  v2 = (_QWORD *)*((_QWORD *)this + 234);
  v17 = (_QWORD *)*((_QWORD *)this + 233);
  if (v2 != v17)
  {
    do
    {
      v2 -= 2;
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v2);
    }
    while (v2 != v17);
    v2 = v17;
  }
LABEL_26:
  *((_QWORD *)this + 234) = v2;
  v18 = *((_QWORD *)this + 243);
  if (v18)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 64))(v18, 0);
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 244);
    *((_QWORD *)this + 243) = 0;
    *((_QWORD *)this + 244) = 0;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  BambiCall::terminationLocksReleased(this);
}

uint64_t std::vector<std::shared_ptr<BambiCall>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<IMSCallInfo *>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

uint64_t BambiConferenceCall::addCalls(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  void **p_p;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count ***v36;
  std::__shared_weak_count ***v37;
  std::__shared_weak_count **v38;
  void *v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  void *__p;
  std::__shared_weak_count *v43;
  char v44;
  void *v45;
  std::__shared_weak_count *v46;
  char v47;
  void *v48;
  std::__shared_weak_count *v49;

  v4 = *(_QWORD *)(a1 + 1944);
  if (v4 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4) == 5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v45, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::debug(ims::_logger, (uint64_t)&v45, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Can't add calls to a terminated conference", 42);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (v44 < 0)
      operator delete(__p);
    if (v47 < 0)
      operator delete(v45);
    return 0;
  }
  else
  {
    v8 = *a2;
    v7 = a2[1];
    *(_DWORD *)(a1 + 1996) = 0;
    for (*(_DWORD *)(a1 + 1992) += (unint64_t)(v7 - v8) >> 4; v8 != v7; v8 += 16)
    {
      v9 = *(std::__shared_weak_count **)(v8 + 8);
      v39 = *(void **)v8;
      v40 = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      v45 = 0;
      v46 = 0;
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&__p, (_QWORD *)(a1 + 176));
      if (__p
      {
        v45 = v12;
        v46 = v43;
        p_p = &__p;
      }
      else
      {
        p_p = &v45;
      }
      *p_p = 0;
      p_p[1] = 0;
      v14 = v43;
      if (v43)
      {
        v15 = (unint64_t *)&v43->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (v39 && (v17 = v45) != 0)
      {
        v41 = 0uLL;
        __p = v39;
        v43 = v40;
        if (v40)
        {
          v18 = (unint64_t *)&v40->__shared_owners_;
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v48 = v17;
        v49 = v46;
        if (v46)
        {
          v20 = (unint64_t *)&v46->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        BambiConferenceParticipant::create((uint64_t *)&__p, (uint64_t *)&v48, (uint64_t)v39 + 1040, &v41);
        v22 = v49;
        if (v49)
        {
          v23 = (unint64_t *)&v49->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v25 = v43;
        if (v43)
        {
          v26 = (unint64_t *)&v43->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        std::vector<std::shared_ptr<BambiConferenceParticipant>>::push_back[abi:ne180100]((char **)(a1 + 1864), &v41);
      }
      else
      {
        v41 = 0uLL;
      }
      v28 = v46;
      if (v46)
      {
        v29 = (unint64_t *)&v46->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v31 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v32 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      if (v40)
      {
        v34 = (unint64_t *)&v40->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
    v36 = *(std::__shared_weak_count ****)(a1 + 1864);
    v37 = *(std::__shared_weak_count ****)(a1 + 1872);
    while (v36 != v37)
    {
      v38 = *v36;
      v36 += 2;
      BambiConferenceParticipant::start(v38);
    }
    return 1;
  }
}

void sub_1BF15592C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipTypedStateMachine<BambiConferenceCallState>::currentStateId(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

void **BambiConferenceCall::weakParticipants@<X0>(void **this@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  void *v19[6];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = this[233];
  v3 = this[234];
  if (v2 != v3)
  {
    v5 = 0;
    v6 = a2 + 2;
    do
    {
      v7 = *(_OWORD *)v2;
      v8 = v2[1];
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 16);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
        v5 = (_QWORD *)a2[1];
      }
      if ((unint64_t)v5 >= *v6)
      {
        v18 = v7;
        v11 = ((uint64_t)v5 - *a2) >> 4;
        if ((unint64_t)(v11 + 1) >> 60)
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        v12 = *v6 - *a2;
        v13 = v12 >> 3;
        if (v12 >> 3 <= (unint64_t)(v11 + 1))
          v13 = v11 + 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
          v14 = 0xFFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        v19[4] = v6;
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)v6, v14);
        v16 = &v15[16 * v11];
        v19[0] = v15;
        v19[1] = v16;
        v19[3] = &v15[16 * v17];
        *(_OWORD *)v16 = v18;
        v19[2] = v16 + 16;
        std::vector<std::weak_ptr<BambiConferenceParticipant>>::__swap_out_circular_buffer(a2, v19);
        v5 = (_QWORD *)a2[1];
        this = std::__split_buffer<std::weak_ptr<BambiConferenceParticipant>>::~__split_buffer(v19);
      }
      else
      {
        *v5 = v7;
        v5[1] = v8;
        v5 += 2;
        a2[1] = (uint64_t)v5;
      }
      a2[1] = (uint64_t)v5;
      v2 += 2;
    }
    while (v2 != v3);
  }
  return this;
}

void sub_1BF155AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::__split_buffer<std::weak_ptr<BambiConferenceParticipant>>::~__split_buffer((void **)va);
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<BambiConferenceParticipant>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>(v4, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = *a1;
    v23 = a1[1];
    if (v23 == *a1)
    {
      v11 = v18 + 16;
      *a1 = v18;
      a1[1] = v18 + 16;
      a1[2] = &v16[16 * v17];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v23 - 1);
        v23 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v23 = 0;
        *((_QWORD *)v23 + 1) = 0;
      }
      while (v23 != v22);
      v23 = *a1;
      v26 = (uint64_t)a1[1];
      v11 = v18 + 16;
      *a1 = v24;
      a1[1] = v18 + 16;
      a1[2] = &v16[16 * v17];
      while ((char *)v26 != v23)
      {
        v26 -= 16;
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v26);
      }
    }
    if (v23)
      operator delete(v23);
  }
  else
  {
    v8 = *((_QWORD *)a2 + 1);
    *(_QWORD *)v7 = *(_QWORD *)a2;
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
}

uint64_t BambiConferenceCall::removeParticipant(uint64_t a1, uint64_t *a2, int a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  const SipUri *v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41[2];
  std::string __p[3];
  _QWORD v43[11];
  __int128 v44;
  char v45;
  __int128 v46;
  _OWORD v47[3];

  memset(v47, 0, sizeof(v47));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v44, (_QWORD *)(a1 + 176));
  v46 = v44;
  v44 = 0uLL;
  LoggableString::LoggableString((LoggableString *)__p, "removeParticipant");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v47, (uint64_t *)&v46, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(a1 + 72);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 72) + 16))(a1 + 72, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"BambiConferenceCall::removeParticipant", 38);
  *(_BYTE *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v12 + 17) = 0;
  if (!*(_QWORD *)(a1 + 384))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(&v44, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v15 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)&v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"removeParticipant: no SIP session", 33);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_29;
  }
  v13 = *a2;
  if (!*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(&v44, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v15 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)&v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"removeParticipant: can't remove unknown participant", 51);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_29:
    *(_BYTE *)(v15 + 17) = 0;
LABEL_30:
    if (v45 < 0)
      operator delete((void *)v44);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v24 = 0;
    goto LABEL_35;
  }
  for (i = *(_QWORD **)(a1 + 1864); ; i += 2)
  {
    if (i == *(_QWORD **)(a1 + 1872))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(&v44, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v16 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)&v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"removeParticipant: ", 19);
      *(_BYTE *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*a2 + 264) + 40))(*a2 + 264, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" is not a participant in call ", 30);
      *(_BYTE *)(v16 + 17) = 0;
      v17 = *(_QWORD *)(a1 + 384);
      v18 = *(_QWORD *)(v17 + 240);
      v19 = *(std::__shared_weak_count **)(v17 + 248);
      v43[9] = v18;
      v43[10] = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 + 1504) + 16))(v18 + 1504, v16);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v16 + 17) = 0;
      if (v19)
      {
        v22 = (unint64_t *)&v19->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      goto LABEL_30;
    }
    if (*i == v13)
      break;
  }
  if (a3)
    v26 = 9;
  else
    v26 = 7;
  BambiCallParticipant::setState(v13, v26, 1);
  *(_BYTE *)(a1 + 2026) = a3;
  if ((a3 & 1) != 0)
    goto LABEL_43;
  if (*(_QWORD *)(a1 + 1872) - *(_QWORD *)(a1 + 1864) == 16)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "EmptyConference");
    (*(void (**)(_QWORD *__return_ptr, uint64_t, std::string *))(*(_QWORD *)a1 + 80))(v43, a1, __p);
    ImsResult::~ImsResult((ImsResult *)v43);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_43:
    v24 = 1;
    goto LABEL_35;
  }
  *(_QWORD *)&v44 = 0;
  v27 = *(uint64_t **)(a1 + 384);
  v28 = (_QWORD *)*a2;
  if (*(char *)(*a2 + 799) < 0)
    v29 = v28[98];
  else
    v29 = *(unsigned __int8 *)(*a2 + 799);
  v30 = (std::__shared_weak_count *)a2[1];
  if (v29)
    v31 = (const SipUri *)(v28 + 84);
  else
    v31 = (const SipUri *)(v28 + 33);
  v41[0] = *a2;
  v41[1] = (uint64_t)v30;
  if (v30)
  {
    v32 = (unint64_t *)&v30->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  SipSession::refer(v27, v31, (const std::string *)&SipRequest::kMethodBye, v41, (SipEventPackage **)&v44, (uint64_t)__p);
  v34 = (*(uint64_t (**)(std::string::size_type, _QWORD))(*(_QWORD *)__p[0].__r_.__value_.__l.__size_ + 24))(__p[0].__r_.__value_.__l.__size_, LODWORD(__p[0].__r_.__value_.__r.__words[2]));
  ImsResult::~ImsResult((ImsResult *)__p);
  if (v30)
  {
    v35 = (unint64_t *)&v30->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v24 = v34 ^ 1u;
  v37 = *a2;
  v38 = v44;
  v39 = *(_QWORD *)(v37 + 232);
  if (v39)
  {
    v40 = *(std::__shared_weak_count **)(v39 + 48);
    *(_QWORD *)(v39 + 40) = 0;
    *(_QWORD *)(v39 + 48) = 0;
    if (v40)
      std::__shared_weak_count::__release_weak(v40);
  }
  *(_QWORD *)(v37 + 232) = v38;
LABEL_35:
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v47);
  return v24;
}

void sub_1BF1561AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  ImsResult::~ImsResult((ImsResult *)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v32 - 96);
  _Unwind_Resume(a1);
}

void BambiConferenceCall::setParticipantState(BambiCall *this, uint64_t *a2, int a3)
{
  std::__shared_weak_count *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[6];
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[2];
  __int128 v34;
  char v35;

  v8 = *((_QWORD *)this + 22);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  v7 = (_QWORD *)((char *)this + 176);
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  v11 = BambiCall::bambiClient(this);
  LoggableString::LoggableString((LoggableString *)&v34, "setParticipantState");
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v31, v7);
  v12 = (std::__shared_weak_count *)v32;
  v33[0] = v31;
  v33[1] = v32;
  v31 = 0;
  v32 = 0;
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 1174405120;
  v26[2] = ___ZN19BambiConferenceCall19setParticipantStateENSt3__110shared_ptrI26BambiConferenceParticipantEEN20BambiCallParticipant16ParticipantStateE_block_invoke;
  v26[3] = &__block_descriptor_tmp_44;
  v26[4] = this;
  v26[5] = v8;
  v27 = v6;
  if (v6)
  {
    v13 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = (std::__shared_weak_count *)a2[1];
  v28 = *a2;
  v29 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v30 = a3;
  BambiClient::performBlock(v11, &v34, v33, v26);
  if (v12)
  {
    v18 = (unint64_t *)&v12->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v20 = (std::__shared_weak_count *)v32;
  if (v32)
  {
    v21 = (unint64_t *)(v32 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v35 < 0)
    operator delete((void *)v34);
  v23 = v29;
  if (v29)
  {
    v24 = (unint64_t *)&v29->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_1BF156468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v23);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  if (*(char *)(v24 - 65) < 0)
    operator delete(*(void **)(v24 - 88));
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  _Unwind_Resume(a1);
}

void ___ZN19BambiConferenceCall19setParticipantStateENSt3__110shared_ptrI26BambiConferenceParticipantEEN20BambiCallParticipant16ParticipantStateE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  std::__shared_weak_count *v16;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    v16 = v4;
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(a1 + 40))
      {
        v6 = *(_QWORD *)(a1 + 56);
        if (v6)
        {
          for (i = *(_QWORD **)(v3 + 1864); ; i += 2)
          {
            if (i == *(_QWORD **)(v3 + 1872))
            {
              std::string::basic_string[abi:ne180100]<0>(v13, "bambi.conf");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v8 = ImsLogger::debug(ims::_logger, (uint64_t)v13, (uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Can't set state for unknown participant", 39);
              *(_BYTE *)(v8 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              goto LABEL_11;
            }
            if (*i == v6)
              break;
          }
          BambiCallParticipant::setState(v6, *(unsigned int *)(a1 + 72), 1);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v13, "bambi.conf");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v8 = ImsLogger::debug(ims::_logger, (uint64_t)v13, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Can't set state for NULL participant", 36);
          *(_BYTE *)(v8 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_11:
          *(_BYTE *)(v8 + 17) = 0;
          if (v12 < 0)
            operator delete(__p[0]);
          if (v14 < 0)
            operator delete(v13[0]);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF1566A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9BambiCallEE56c54_ZTSNSt3__110shared_ptrI26BambiConferenceParticipantEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[8];
  result[7] = a2[7];
  result[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9BambiCallEE56c54_ZTSNSt3__110shared_ptrI26BambiConferenceParticipantEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 56);
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

BOOL BambiConferenceCall::start(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  std::string *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26;
  const std::string::value_type **v27;
  __int128 v28;
  int64x2_t v29;
  std::string *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  void *v39[2];
  char v40;
  void *v41[2];
  char v42;
  void *v43;
  char v44;
  std::string __p;
  std::string *v46;
  int64x2_t v47;
  std::string *v48;
  uint64_t v49;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 == v4)
  {
    std::string::basic_string[abi:ne180100]<0>(v41, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(&v46, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v33 = ImsLogger::error(ims::_logger, (uint64_t)v41, (uint64_t)&v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"Can't start a conference call with no participants", 50);
    *(_BYTE *)(v33 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v33 + 17) = 0;
    if (v47.i8[15] < 0)
      operator delete(v46);
    if (v42 < 0)
      operator delete(v41[0]);
  }
  else
  {
    v36 = *a2;
    v35 = a2[1];
    SipTypedStateMachine<BambiConferenceCallState>::transitionToState((_QWORD *)(a1 + 1888), 1);
    if (a3)
    {
      v7 = *a2;
      v8 = a2[1];
      if (*a2 != v8)
      {
        v38 = a2[1];
        v9 = "";
        do
        {
          v10 = *(_QWORD *)v7;
          SipUri::SipUri((SipUri *)v41, (const SipUri *)(*(_QWORD *)v7 + 1040));
          if (*(char *)(v10 + 487) < 0)
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v10 + 464), *(_QWORD *)(v10 + 472));
          else
            __p = *(std::string *)(v10 + 464);
          v11 = *(_QWORD *)(a1 + 1848);
          v12 = *(_QWORD *)(a1 + 1856);
          if (v11 >= v12)
          {
            v14 = *(_QWORD *)(a1 + 1840);
            v15 = 0x84BDA12F684BDA13 * ((uint64_t)(v11 - v14) >> 4);
            v16 = v15 + 1;
            if (v15 + 1 > 0x97B425ED097B42)
              std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
            v17 = 0x84BDA12F684BDA13 * ((uint64_t)(v12 - v14) >> 4);
            if (2 * v17 > v16)
              v16 = 2 * v17;
            if (v17 >= 0x4BDA12F684BDA1)
              v18 = 0x97B425ED097B42;
            else
              v18 = v16;
            v49 = a1 + 1856;
            if (v18)
            {
              if (v18 > 0x97B425ED097B42)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v19 = (std::string *)operator new(432 * v18);
            }
            else
            {
              v19 = 0;
            }
            v20 = v9;
            v46 = v19;
            v47.i64[0] = (uint64_t)(v19 + 18 * v15);
            v47.i64[1] = v47.i64[0];
            v48 = &v19[18 * v18];
            SipUri::SipUri((SipUri *)v47.i64[0], (const SipUri *)v41);
            v19[18 * v15 + 17] = __p;
            memset(&__p, 0, sizeof(__p));
            v21 = v47.i64[0];
            v22 = v47.i64[1] + 432;
            v47.i64[1] += 432;
            v23 = *(_QWORD *)(a1 + 1848);
            v24 = *(_QWORD *)(a1 + 1840);
            if (v23 == v24)
            {
              v29 = vdupq_n_s64(v23);
            }
            else
            {
              v25 = 0;
              do
              {
                SipUri::SipUri((SipUri *)(v21 + v25 - 432), (const SipUri *)(v23 + v25 - 432));
                v26 = (std::string *)(v21 + v25 - 24);
                v27 = (const std::string::value_type **)(v23 + v25 - 24);
                if (*(char *)(v23 + v25 - 1) < 0)
                {
                  std::string::__init_copy_ctor_external(v26, *v27, *(_QWORD *)(v23 + v25 - 16));
                }
                else
                {
                  v28 = *(_OWORD *)v27;
                  *(_QWORD *)(v21 + v25 - 8) = *(_QWORD *)(v23 + v25 - 8);
                  *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v28;
                }
                v25 -= 432;
              }
              while (v23 + v25 != v24);
              v29 = *(int64x2_t *)(a1 + 1840);
              v22 = v47.i64[1];
              v21 += v25;
              v8 = v38;
            }
            *(_QWORD *)(a1 + 1840) = v21;
            *(_QWORD *)(a1 + 1848) = v22;
            v47 = v29;
            v30 = *(std::string **)(a1 + 1856);
            *(_QWORD *)(a1 + 1856) = v48;
            v48 = v30;
            v46 = (std::string *)v29.i64[0];
            std::__split_buffer<std::pair<SipUri,std::string>>::~__split_buffer((uint64_t)&v46);
            v31 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            *(_QWORD *)(a1 + 1848) = v22;
            v9 = v20;
            if (v31 < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
            SipUri::SipUri(*(SipUri **)(a1 + 1848), (const SipUri *)v41);
            v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(_QWORD *)(v11 + 424) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)(v11 + 408) = v13;
            memset(&__p, 0, sizeof(__p));
            *(_QWORD *)(a1 + 1848) = v11 + 432;
          }
          SipUri::~SipUri((SipUri *)v41);
          std::string::basic_string[abi:ne180100]<0>(&v46, "bambi.conf");
          std::string::basic_string[abi:ne180100]<0>(v39, v9);
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v32 = ImsLogger::debug(ims::_logger, (uint64_t)&v46, (uint64_t)v39);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"Adding initial invitee (", 24);
          *(_BYTE *)(v32 + 17) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v7 + 1040) + 40))(*(_QWORD *)v7 + 1040, v32);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)", ", 2);
          *(_BYTE *)(v32 + 17) = 0;
          ObfuscatedString::ObfuscatedString((uint64_t)v41, (const std::string *)(*(_QWORD *)v7 + 464));
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v32 + 56))(v32, v41);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)")", 1);
          *(_BYTE *)(v32 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v32 + 17) = 0;
          if (v44 < 0)
            operator delete(v43);
          if (v42 < 0)
            operator delete(v41[0]);
          if (v40 < 0)
            operator delete(v39[0]);
          if (v47.i8[15] < 0)
            operator delete(v46);
          v7 += 16;
        }
        while (v7 != v8);
      }
    }
    BambiConferenceCall::addCalls(a1, a2);
    v4 = v35;
    v3 = v36;
  }
  return v3 != v4;
}

void sub_1BF156C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipTypedStateMachine<BambiConferenceCallState>::transitionToState(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *i;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const std::string *v12;
  std::string::size_type v14;
  _QWORD *v15;
  std::string::size_type v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *size;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::string::size_type v36;
  std::__shared_weak_count *v37;
  std::string __p;

  v4 = a1[3];
  if (v4)
  {
    v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      v6 = a2;
      if (v4 <= a2)
        v6 = a2 % v4;
    }
    else
    {
      v6 = ((_DWORD)v4 - 1) & a2;
    }
    v7 = *(uint64_t ***)(a1[2] + 8 * v6);
    if (v7)
    {
      for (i = *v7; i; i = (uint64_t *)*i)
      {
        v9 = i[1];
        if (v9 == a2)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)a2)
          {
            v14 = a1[7];
            v16 = a1[8];
            v15 = a1 + 7;
            __p.__r_.__value_.__r.__words[0] = v14;
            __p.__r_.__value_.__l.__size_ = v16;
            if (v16)
            {
              v17 = (unint64_t *)(v16 + 8);
              do
                v18 = __ldxr(v17);
              while (__stxr(v18 + 1, v17));
            }
            if (v14)
            {
              v19 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v14 + 48))(v14);
              (*(void (**)(std::string::size_type, uint64_t))(*(_QWORD *)v14 + 64))(v14, a2);
            }
            else
            {
              v19 = 0;
            }
            std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100](a1 + 7, i[3], i[4]);
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v15 + 56))(*v15, v19);
            v36 = v14;
            v37 = (std::__shared_weak_count *)v16;
            if (v16)
            {
              v20 = (unint64_t *)(v16 + 8);
              do
                v21 = __ldxr(v20);
              while (__stxr(v21 + 1, v20));
            }
            v22 = (std::__shared_weak_count *)a1[8];
            v34 = a1[7];
            v35 = v22;
            if (v22)
            {
              p_shared_owners = (unint64_t *)&v22->__shared_owners_;
              do
                v24 = __ldxr(p_shared_owners);
              while (__stxr(v24 + 1, p_shared_owners));
            }
            (*(void (**)(_QWORD *, std::string::size_type *, uint64_t *))(*a1 + 56))(a1, &v36, &v34);
            v25 = v35;
            if (v35)
            {
              v26 = (unint64_t *)&v35->__shared_owners_;
              do
                v27 = __ldaxr(v26);
              while (__stlxr(v27 - 1, v26));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
            }
            v28 = v37;
            if (v37)
            {
              v29 = (unint64_t *)&v37->__shared_owners_;
              do
                v30 = __ldaxr(v29);
              while (__stlxr(v30 - 1, v29));
              if (!v30)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
            }
            size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
            {
              v32 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v33 = __ldaxr(v32);
              while (__stlxr(v33 - 1, v32));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
            return 1;
          }
        }
        else
        {
          if (v5.u32[0] > 1uLL)
          {
            if (v9 >= v4)
              v9 %= v4;
          }
          else
          {
            v9 &= v4 - 1;
          }
          if (v9 != v6)
            break;
        }
      }
    }
  }
  v10 = a1[1];
  if (v10)
  {
    v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v10 + 56))(a1[1]);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"transitionToState: no such state ", 33);
    *(_BYTE *)(v11 + 17) = 0;
    v12 = (const std::string *)(*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, a2);
    LoggableString::LoggableString(&__p, v12);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 40))(v11, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1BF157064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void std::pair<SipUri,std::string>::~pair(void **this)
{
  if (*((char *)this + 431) < 0)
    operator delete(this[51]);
  SipUri::~SipUri((SipUri *)this);
}

uint64_t BambiConferenceCall::startSessionWithConferenceServer(BambiConferenceCall *this)
{
  _BYTE v3[8];
  uint64_t v4;
  unsigned int v5;

  BambiCall::internalStart(this, (uint64_t)v3);
  *((_BYTE *)this + 2024) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 24))(v4, v5) ^ 1;
  ImsResult::~ImsResult((ImsResult *)v3);
  return *((unsigned __int8 *)this + 2024);
}

void sub_1BF15712C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

BOOL BambiConferenceCall::supportsConferenceEvents(BambiConferenceCall *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  SipUserAgent *v5;
  _BOOL8 v6;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v1 = *((_QWORD *)this + 48);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 240);
  if (v3 && (v4 = *(_QWORD *)(v3 + 208)) != 0)
    v5 = *(SipUserAgent **)(v4 + 136);
  else
    v5 = 0;
  if (*(_BYTE *)(SipUserAgent::config(v5) + 618))
    return 1;
  v8 = *((_QWORD *)this + 48);
  v9 = *(_QWORD *)(v8 + 240);
  v10 = *(std::__shared_weak_count **)(v8 + 248);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v6 = SipDialog::remoteSideAllowsEvent(v9, (uint64_t)"conference");
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v6;
}

void sub_1BF157210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiConferenceCall::subscribeToConferenceEvents(BambiConferenceCall *this)
{
  SipSession *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BOOL4 v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  SipUserAgent *v15;
  char *v16;
  std::string *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  SipUserAgent *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  SipEventPackage *v30;
  std::__shared_weak_count *v31;
  char *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::string *v45;
  const std::string *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  void *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  char *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count *v97;
  __int128 v98;
  char *v99;
  std::string::size_type size;
  void *__p[2];
  char v102;
  std::string v103;

  v2 = (SipSession *)*((_QWORD *)this + 48);
  if (!v2 || (SipSession::confirmed(v2) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v103, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::debug(ims::_logger, (uint64_t)&v103, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Invalid session, don't send subscribe", 37);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_7;
  }
  if (*((char *)this + 2023) < 0)
  {
    if (*((_QWORD *)this + 251))
      goto LABEL_5;
  }
  else if (*((_BYTE *)this + 2023))
  {
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(&v103, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::debug(ims::_logger, (uint64_t)&v103, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Already subscribed to Conference Events", 39);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_7:
    *(_BYTE *)(v3 + 17) = 0;
    if (v102 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    return;
  }
  v4 = *((_QWORD *)this + 48);
  v5 = *(_QWORD *)(v4 + 240);
  v6 = *(std::__shared_weak_count **)(v4 + 248);
  v103.__r_.__value_.__r.__words[0] = v5;
  v103.__r_.__value_.__l.__size_ = (std::string::size_type)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = SipDialog::remoteSideAllowsEvent(v5, (uint64_t)"conference");
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&v103, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v12 = ImsLogger::debug(ims::_logger, (uint64_t)&v103, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Conference server supports conference events.  Great!", 53);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_29;
  }
  v13 = *(_QWORD *)(*((_QWORD *)this + 48) + 240);
  if (v13 && (v14 = *(_QWORD *)(v13 + 208)) != 0)
    v15 = *(SipUserAgent **)(v14 + 136);
  else
    v15 = 0;
  if (*(_BYTE *)(SipUserAgent::config(v15) + 618))
  {
    std::string::basic_string[abi:ne180100]<0>(&v103, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v12 = ImsLogger::debug(ims::_logger, (uint64_t)&v103, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Local override to always Subscribe.", 35);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_29:
    *(_BYTE *)(v12 + 17) = 0;
    if (v102 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    v99 = 0;
    size = 0;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v103, (_QWORD *)this + 22);
    if (v103.__r_.__value_.__r.__words[0]
    {
      v99 = v16;
      size = v103.__r_.__value_.__l.__size_;
      v17 = &v103;
    }
    else
    {
      v17 = (std::string *)&v99;
    }
    v17->__r_.__value_.__r.__words[0] = 0;
    v17->__r_.__value_.__l.__size_ = 0;
    v18 = (std::__shared_weak_count *)v103.__r_.__value_.__l.__size_;
    if (v103.__r_.__value_.__l.__size_)
    {
      v19 = (unint64_t *)(v103.__r_.__value_.__l.__size_ + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v98 = 0uLL;
    v21 = *(_QWORD *)(*((_QWORD *)this + 48) + 240);
    if (v21 && (v22 = *(_QWORD *)(v21 + 208)) != 0)
      v23 = *(SipUserAgent **)(v22 + 136);
    else
      v23 = 0;
    if (!*(_BYTE *)(SipUserAgent::config(v23) + 619) || *((_BYTE *)this + 2025))
    {
      v24 = *((_QWORD *)this + 48);
      v26 = *(_QWORD *)(v24 + 240);
      v25 = *(std::__shared_weak_count **)(v24 + 248);
      v96 = v25;
      if (v25)
      {
        v27 = (unint64_t *)&v25->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v29 = operator new();
      v30 = (SipEventPackage *)v29;
      v31 = (std::__shared_weak_count *)size;
      if (v99)
        v32 = v99 + 1832;
      else
        v32 = 0;
      if (size)
      {
        v33 = (unint64_t *)(size + 16);
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
        *(_QWORD *)(v29 + 16) = 0;
        *(_QWORD *)(v29 + 24) = 0;
        *(_QWORD *)v29 = &off_1E78DEE90;
        *(_QWORD *)(v29 + 8) = 0;
        *(_QWORD *)(v29 + 32) = v32;
        *(_QWORD *)(v29 + 40) = v31;
        do
          v35 = __ldxr(v33);
        while (__stxr(v35 + 1, v33));
      }
      else
      {
        *(_QWORD *)(v29 + 16) = 0;
        *(_QWORD *)(v29 + 24) = 0;
        *(_QWORD *)v29 = &off_1E78DEE90;
        *(_QWORD *)(v29 + 8) = 0;
        *(_QWORD *)(v29 + 32) = v32;
        *(_QWORD *)(v29 + 40) = 0;
      }
      *(_BYTE *)(v29 + 48) = 0;
      std::string::basic_string[abi:ne180100]<0>(&v103, "");
      SipDialog::subscribeToEventPackage(v26, v30, &v103, 0, __p);
      v36 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
      v98 = v36;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v41 = (unint64_t *)((char *)__p[1] + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v103.__r_.__value_.__l.__data_);
      if (v31)
        std::__shared_weak_count::__release_weak(v31);
      if (v96)
      {
        v43 = (unint64_t *)&v96->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      *((_BYTE *)this + 2025) = 0;
LABEL_81:
      if ((_QWORD)v98)
      {
        v45 = (std::string *)((char *)this + 2000);
        v46 = *(const std::string **)(v98 + 232);
        v47 = *(std::__shared_weak_count **)(v98 + 240);
        v103.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
        v103.__r_.__value_.__l.__size_ = (std::string::size_type)v47;
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldxr(v48);
          while (__stxr(v49 + 1, v48));
        }
        std::string::operator=(v45, v46 + 64);
        if (v47)
        {
          v50 = (unint64_t *)&v47->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
      }
      else
      {
        (*(void (**)(BambiConferenceCall *))(*(_QWORD *)this + 168))(this);
      }
      v52 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
      if (*((_QWORD *)&v98 + 1))
      {
        v53 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v55 = (std::__shared_weak_count *)size;
      if (size)
      {
        v56 = (unint64_t *)(size + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      return;
    }
    v95 = 0;
    v97 = 0;
    v58 = *((_QWORD *)this + 48);
    v59 = *(_QWORD *)(v58 + 240);
    v60 = *(std::__shared_weak_count **)(v58 + 248);
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
      if (*(_QWORD *)(v59 + 2056) == 1)
      {
        v63 = *(_QWORD *)(v59 + 2040);
        v65 = *(_QWORD *)(v63 + 56);
        v64 = *(std::__shared_weak_count **)(v63 + 64);
        v95 = v65;
        v97 = v64;
        if (v64)
        {
          v66 = (unint64_t *)&v64->__shared_owners_;
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
        }
      }
      else
      {
        v95 = 0;
        v97 = 0;
      }
      do
        v74 = __ldaxr(v61);
      while (__stlxr(v74 - 1, v61));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    else if (*(_QWORD *)(v59 + 2056) == 1)
    {
      v69 = *(_QWORD *)(v59 + 2040);
      v71 = *(_QWORD *)(v69 + 56);
      v70 = *(std::__shared_weak_count **)(v69 + 64);
      v95 = v71;
      v97 = v70;
      if (v70)
      {
        v72 = (unint64_t *)&v70->__shared_owners_;
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
    }
    v75 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
    if (v75)
    {
      v76 = std::__shared_weak_count::lock(v75);
      if (v76)
      {
        v77 = *((_QWORD *)this + 44);
        if (v95)
        {
          if (v77)
          {
            v78 = *(_QWORD *)(v77 + 144);
            v80 = *(void **)(v78 + 176);
            v79 = *(unint64_t **)(v78 + 184);
            __p[0] = v80;
            __p[1] = v79;
            if (v79)
            {
              v81 = v79 + 1;
              do
                v82 = __ldxr(v81);
              while (__stxr(v82 + 1, v81));
            }
            v83 = operator new();
            v84 = (std::__shared_weak_count *)size;
            if (v99)
              v85 = v99 + 1832;
            else
              v85 = 0;
            if (size)
            {
              v86 = (unint64_t *)(size + 16);
              do
                v87 = __ldxr(v86);
              while (__stxr(v87 + 1, v86));
              *(_QWORD *)(v83 + 16) = 0;
              *(_QWORD *)(v83 + 24) = 0;
              *(_QWORD *)v83 = &off_1E78DEE90;
              *(_QWORD *)(v83 + 8) = 0;
              *(_QWORD *)(v83 + 32) = v85;
              *(_QWORD *)(v83 + 40) = v84;
              do
                v88 = __ldxr(v86);
              while (__stxr(v88 + 1, v86));
            }
            else
            {
              *(_QWORD *)(v83 + 16) = 0;
              *(_QWORD *)(v83 + 24) = 0;
              *(_QWORD *)v83 = &off_1E78DEE90;
              *(_QWORD *)(v83 + 8) = 0;
              *(_QWORD *)(v83 + 32) = v85;
              *(_QWORD *)(v83 + 40) = 0;
            }
            *(_BYTE *)(v83 + 48) = 0;
            SipDialogManager::subscribeToEventPackage((SipDialogManager *)v80, (SipEventPackage *)v83, (const SipUri *)(v95 + 184), &v103);
            std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)&v98, (__int128 *)&v103);
            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v103);
            if (v84)
              std::__shared_weak_count::__release_weak(v84);
            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)__p);
            *((_BYTE *)this + 2025) = 1;
LABEL_150:
            v91 = (unint64_t *)&v76->__shared_owners_;
            do
              v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
              std::__shared_weak_count::__release_weak(v76);
            }
LABEL_154:
            if (v97)
            {
              v93 = (unint64_t *)&v97->__shared_owners_;
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 - 1, v93));
              if (!v94)
              {
                ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                std::__shared_weak_count::__release_weak(v97);
              }
            }
            goto LABEL_81;
          }
        }
      }
    }
    else
    {
      v76 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(&v103, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    v89 = ims::debug((uint64_t)&v103, (uint64_t)__p);
    v90 = (_BYTE *)ImsOutStream::operator<<(v89, "No active fork. Can't subscribe");
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v90 + 64))(v90, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v90[17] = 0;
    if (v102 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    if (!v76)
      goto LABEL_154;
    goto LABEL_150;
  }
  std::string::basic_string[abi:ne180100]<0>(&v103, "bambi.conf");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v68 = ImsLogger::debug(ims::_logger, (uint64_t)&v103, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v68 + 8), (uint64_t)"Conference server doesn't say it supports conference events. No Local override either.", 86);
  *(_BYTE *)(v68 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v68 + 64))(v68, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v68 + 17) = 0;
  if (v102 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  (*(void (**)(BambiConferenceCall *))(*(_QWORD *)this + 168))(this);
}

void sub_1BF157C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::__shared_weak_count *v22;

  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void BambiConferenceCall::handleSubscribeFailed(std::__shared_weak_count **this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t *v17[3];
  void *__p[2];
  __int128 v19;
  _OWORD v20[2];
  uint64_t v21;
  _QWORD v22[6];
  std::__shared_weak_count *v23;
  uint64_t v24[2];
  void **v25;
  uint64_t v26;
  char v27;

  std::string::basic_string[abi:ne180100]<0>(__p, "bambi.conf");
  std::string::basic_string[abi:ne180100]<0>(&v25, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Failed to subscribe to conference event", 39);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v27 < 0)
    operator delete(v25);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  BambiConferenceCall::clearConferenceEventSubscription((BambiConferenceCall *)this, 0);
  if (!*((_BYTE *)this + 2025))
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    *(_OWORD *)__p = 0u;
    v19 = 0u;
    BambiConferenceCall::weakParticipants((void **)this, (uint64_t *)v17);
    BambiCallConferenceEvent::BambiCallConferenceEvent((uint64_t)__p, 3, v17);
    v25 = (void **)v17;
    std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v25);
    ((void (*)(std::__shared_weak_count **, void **))(*this)[2].__shared_owners_)(this, __p);
    __p[0] = off_1E78C9130;
    v25 = (void **)v20 + 1;
    std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v25);
    __p[0] = &off_1E78BD300;
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (!*((_QWORD *)&v19 + 1))
      return;
    goto LABEL_29;
  }
  v4 = this[22];
  v3 = this[23];
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  v7 = BambiCall::bambiClient((BambiCall *)this);
  LoggableString::LoggableString((LoggableString *)__p, "setParticipantState");
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v25, this + 22);
  v8 = (std::__shared_weak_count *)v26;
  v24[0] = (uint64_t)v25;
  v24[1] = v26;
  v25 = 0;
  v26 = 0;
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 1174405120;
  v22[2] = ___ZN19BambiConferenceCall21handleSubscribeFailedEv_block_invoke;
  v22[3] = &__block_descriptor_tmp_26_3;
  v22[4] = this;
  v22[5] = v4;
  v23 = v3;
  if (v3)
  {
    v9 = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  BambiClient::performBlock(v7, (__int128 *)__p, v24, v22);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (std::__shared_weak_count *)v26;
  if (v26)
  {
    v14 = (unint64_t *)(v26 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  if (v23)
    std::__shared_weak_count::__release_weak(v23);
  if (v3)
  {
    v16 = v3;
LABEL_29:
    std::__shared_weak_count::__release_weak(v16);
  }
}

void sub_1BF158004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  BambiCallConferenceEvent::~BambiCallConferenceEvent((BambiCallConferenceEvent *)&__p);
  _Unwind_Resume(a1);
}

void BambiConferenceCall::clearConferenceEventSubscription(BambiConferenceCall *this, int a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  SipSubscription *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  const void *v20;
  std::__shared_weak_count **v21;
  std::__shared_weak_count **v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  SipSubscription *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;

  v35 = 0;
  v36 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v36 = v5;
    if (v5)
    {
      v6 = *((_QWORD *)this + 44);
      v35 = v6;
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = 0;
LABEL_6:
  if (*((char *)this + 2023) < 0)
  {
    if (!*((_QWORD *)this + 251))
      goto LABEL_41;
  }
  else if (!*((_BYTE *)this + 2023))
  {
    goto LABEL_41;
  }
  v33 = 0;
  v34 = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 144);
    v9 = *(_QWORD *)(v7 + 176);
    v8 = *(std::__shared_weak_count **)(v7 + 184);
    v31 = v9;
    v32 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    SipDialogManager::getSubscription(v9, (uint64_t)"conference", (uint64_t)this + 2000, __p, &v33);
    if (v30 < 0)
      operator delete(__p[0]);
    if (v8)
    {
      v12 = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v14 = v33;
    if (v33)
    {
      if (a2)
      {
        v15 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)this + 45));
        __p[0] = *((void **)this + 44);
        __p[1] = v15;
        v16 = SipUserAgent::config(*((SipUserAgent **)__p[0] + 18));
        v17 = SipTimers::timerValue((SipTimers *)(v16 + 512), (const SipTimer *)&SipTimers::kTimerT1, 0);
        SipSubscription::scheduleTermination(v14, 2 * v17, *((_BYTE *)this + 2026));
        v18 = (unint64_t *)&v15->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        v14 = v33;
      }
      v20 = (const void *)*((_QWORD *)v14 + 31);
      if (v20)
      {
        if (v21)
        {
          v22 = v21;
          v23 = v21[5];
          v22[4] = 0;
          v22[5] = 0;
          if (v23)
            std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
  }
  if (*((char *)this + 2023) < 0)
  {
    **((_BYTE **)this + 250) = 0;
    *((_QWORD *)this + 251) = 0;
  }
  else
  {
    *((_BYTE *)this + 2000) = 0;
    *((_BYTE *)this + 2023) = 0;
  }
  v24 = v34;
  if (v34)
  {
    v25 = (unint64_t *)&v34->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v5 = v36;
LABEL_41:
  if (v5)
  {
    v27 = (unint64_t *)&v5->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BF158310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v18 - 48);
  _Unwind_Resume(a1);
}

void ___ZN19BambiConferenceCall21handleSubscribeFailedEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  BambiConferenceCall *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;
  std::__shared_weak_count *v14;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (BambiConferenceCall *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v14 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        std::string::basic_string[abi:ne180100]<0>(v11, "bambi.conf");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v6 = ImsLogger::debug(ims::_logger, (uint64_t)v11, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Try Subscribe in dialog.", 24);
        *(_BYTE *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v6 + 17) = 0;
        if (v10 < 0)
          operator delete(__p[0]);
        if (v12 < 0)
          operator delete(v11[0]);
        BambiConferenceCall::subscribeToConferenceEvents(v3);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF158488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'BambiConferenceCall::handleSubscribeFailed(std::__shared_weak_count **this)
{
  BambiConferenceCall::handleSubscribeFailed(this - 229);
}

void BambiConferenceCall::handleSubscribeSuccess(void **this)
{
  uint64_t v2;
  uint64_t *v3[3];
  void *__p[2];
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;
  void **v8[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(__p, "bambi.conf");
  std::string::basic_string[abi:ne180100]<0>(v8, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Successfully subscribed to conference event", 43);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v9 < 0)
    operator delete(v8[0]);
  if (SBYTE7(v5) < 0)
    operator delete(__p[0]);
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  *(_OWORD *)__p = 0u;
  v5 = 0u;
  BambiConferenceCall::weakParticipants(this, (uint64_t *)v3);
  BambiCallConferenceEvent::BambiCallConferenceEvent((uint64_t)__p, 4, v3);
  v8[0] = (void **)v3;
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](v8);
  (*((void (**)(void **, void **))*this + 7))(this, __p);
  __p[0] = off_1E78C9130;
  v8[0] = (void **)v6 + 1;
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](v8);
  __p[0] = &off_1E78BD300;
  if (*((_QWORD *)&v5 + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v5 + 1));
}

void sub_1BF158624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  BambiCallConferenceEvent::~BambiCallConferenceEvent((BambiCallConferenceEvent *)&__p);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'BambiConferenceCall::handleSubscribeSuccess(void **this)
{
  BambiConferenceCall::handleSubscribeSuccess(this - 229);
}

uint64_t BambiConferenceCall::processCallEvent(uint64_t **this, BambiCallEvent *lpsrc)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  SipUserAgent *v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_weak_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  SipUserAgent *v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::string __p;
  void *v40[2];
  char v41;
  void *v42[2];
  char v43;

  v4 = *((_DWORD *)lpsrc + 2);
  if (v4 == 15)
  {
    BambiConferenceCall::clearConferenceEventSubscription((BambiConferenceCall *)this, 1);
    if (v8)
    {
      v9 = v8;
      std::string::basic_string[abi:ne180100]<0>(v42, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(v40, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v10 = ImsLogger::debug(ims::_logger, (uint64_t)v42, (uint64_t)v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Saving termination reason : ", 28);
      *(_BYTE *)(v10 + 17) = 0;
      v11 = v9[10];
      if (v11 > 37)
        v11 = 10;
      LoggableString::LoggableString(&__p, (const std::string *)(reasonStrings + 24 * v11));
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v10 + 40))(v10, &__p);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v10 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42[0]);
      v12 = this[233];
      v13 = this[234];
      if (v12 != v13)
      {
        v14 = v9[10];
        do
        {
          v15 = *v12;
          v12 += 2;
          *(_DWORD *)(v15 + 1292) = v14;
        }
        while (v12 != v13);
      }
    }
    v16 = this + 236;
    v17 = 5;
    goto LABEL_28;
  }
  if (v4 == 9)
  {
    v5 = this[48][30];
    if (v5 && (v6 = *(_QWORD *)(v5 + 208)) != 0)
      v7 = *(SipUserAgent **)(v6 + 136);
    else
      v7 = 0;
    if (!*(_BYTE *)(SipUserAgent::config(v7) + 620))
      BambiConferenceCall::subscribeToConferenceEvents((BambiConferenceCall *)this);
    if (*((_DWORD *)this + 111) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v42, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(v40, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v31 = ImsLogger::debug(ims::_logger, (uint64_t)v42, (uint64_t)v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)"Call is confirmed, but media is not active. Waiting for Media to get activated.", 79);
      *(_BYTE *)(v31 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v31 + 17) = 0;
      if (v41 < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42[0]);
      goto LABEL_29;
    }
    std::string::basic_string[abi:ne180100]<0>(v42, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(v40, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v18 = ImsLogger::debug(ims::_logger, (uint64_t)v42, (uint64_t)v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"Call is confirmed, and media is active. Moving to SessionConfirmed state.", 73);
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v18 + 17) = 0;
    if (v41 < 0)
      operator delete(v40[0]);
    if (v43 < 0)
      operator delete(v42[0]);
    v16 = this + 236;
    v17 = 3;
LABEL_28:
    SipTypedStateMachine<BambiConferenceCallState>::transitionToState(v16, v17);
LABEL_29:
    v4 = *((_DWORD *)lpsrc + 2);
  }
  if ((v4 & 0xFFFFFFFE) == 0xE)
  {
    if (v19)
    {
      v20 = v19;
      if (!*((_BYTE *)v19 + 145))
      {
        if (v19[6])
        {
          v32 = this[48];
          if (v32)
          {
            v33 = v32[30];
            if (v33)
            {
              v34 = *(_QWORD *)(v33 + 208);
              if (v34)
              {
                v35 = *(SipUserAgent **)(v34 + 136);
                if (v35)
                {
                  v36 = SipUserAgent::config(v35);
                  *((_BYTE *)this + 2027) = SipResponseCodeMap::containsResponseCodeForMethod(v36 + 1288, (void **)"INVITE", *(_DWORD *)(v20[6] + 88), 0);
                }
              }
            }
          }
        }
      }
    }
  }
  if (!v21)
    return BambiCall::processCallEvent((BambiCall *)this, lpsrc);
  v22 = v21;
  if (v21[16] != 2)
    return BambiCall::processCallEvent((BambiCall *)this, lpsrc);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v37, this + 22);
  v23 = v37;
  v24 = v38;
  if (v38)
  {
    p_shared_weak_owners = (unint64_t *)&v38->__shared_weak_owners_;
    do
      v26 = __ldxr(p_shared_weak_owners);
    while (__stxr(v26 + 1, p_shared_weak_owners));
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 2) = v23;
  *((_QWORD *)v22 + 3) = v24;
  if (v27)
  {
    std::__shared_weak_count::__release_weak(v27);
    v24 = v38;
  }
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return (*(uint64_t (**)(uint64_t *, _DWORD *))(*this[50] + 16))(this[50], v22);
}

void sub_1BF158AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

void BambiConferenceCall::handleConferenceNotification(BambiConferenceCall *this, const SipConferenceInfo *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SipUserAgent *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BambiConferenceCall *v14;
  BambiConferenceParticipant **v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  const SipConferenceUser *v28;
  uint64_t MatchingEndpointStatus;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const SipConferenceUser *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BambiConferenceCall *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  BambiConferenceCall *v46;
  BambiConferenceParticipant **v47;
  BambiConferenceParticipant **v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  BambiConferenceCall *v53;
  const SipUri *v54;
  SipUri *v55;
  SipUri *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  BambiConferenceCall *v60;
  void **p_p;
  BOOL v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  char **v88;
  _QWORD *v89;
  char *v90;
  uint64_t v91;
  unsigned int v92;
  const SipConferenceInfo *v93;
  BambiConferenceParticipant **v94;
  unint64_t v95;
  uint64_t v96;
  BambiConferenceCall *v97;
  uint64_t v98;
  BambiConferenceCall *v99;
  void *v100[2];
  char v101;
  void *v102[2];
  char v103;
  void *v104;
  std::__shared_weak_count *v105;
  char v106;
  void *v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  __int128 v110[4];
  void *__p;
  uint64_t (**v112)(SipHost *__hidden);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (**v119)(SipParameterMap *__hidden);
  uint64_t *v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  void (**v137)(SipParameterMap *__hidden);
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void (**v142)(SipParameterMap *__hidden);
  uint64_t *v143;
  uint64_t v144;
  __int128 v145;
  void *v146;
  std::__shared_weak_count *v147;
  char v148;
  void *v149;
  uint64_t (**v150)(SipHost *__hidden);
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void (**v157)(SipParameterMap *__hidden);
  uint64_t *v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  void (**v175)(SipParameterMap *__hidden);
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void (**v180)(SipParameterMap *__hidden);
  uint64_t *v181;
  uint64_t v182;
  __int128 v183;

  std::string::basic_string[abi:ne180100]<0>(&v149, "bambi.conf");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v149, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"BambiConferenceCall::handleConferenceNotification", 49);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (SHIBYTE(v113) < 0)
    operator delete(__p);
  if (SHIBYTE(v151) < 0)
    operator delete(v149);
  v5 = *(_QWORD *)(*((_QWORD *)this + 48) + 240);
  if (v5 && (v6 = *(_QWORD *)(v5 + 208)) != 0)
    v7 = *(SipUserAgent **)(v6 + 136);
  else
    v7 = 0;
  v8 = SipUserAgent::config(v7);
  v9 = *((_DWORD *)a2 + 104);
  v93 = a2;
  v99 = this;
  if (*(_BYTE *)(v8 + 621))
  {
    if (v9 == 2)
      goto LABEL_72;
    goto LABEL_73;
  }
  switch(v9)
  {
    case 3:
      std::string::basic_string[abi:ne180100]<0>(&__p, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(&v146, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v83 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v146);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v83 + 8), (uint64_t)"Received conference notification with state deleted", 51);
      *(_BYTE *)(v83 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v83 + 64))(v83, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v83 + 17) = 0;
      if (v148 < 0)
        operator delete(v146);
      if (SHIBYTE(v113) < 0)
        operator delete(__p);
      v84 = *((_DWORD *)a2 + 105);
      if (v84 <= *((_DWORD *)this + 507))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "bambi.conf");
        std::string::basic_string[abi:ne180100]<0>(&v146, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v85 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v146);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v85 + 8), (uint64_t)"Stale notification (version = ", 30);
        *(_BYTE *)(v85 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v85 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v85 + 8), (uint64_t)"), ignoring it.", 15);
        *(_BYTE *)(v85 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v85 + 64))(v85, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v85 + 17) = 0;
        if (v148 < 0)
          operator delete(v146);
      }
      else
      {
        *((_DWORD *)this + 507) = v84;
        std::string::basic_string[abi:ne180100]<0>(&__p, "EmptyConference");
        (*(void (**)(void **__return_ptr, BambiConferenceCall *, void **))(*(_QWORD *)this + 80))(&v149, this, &__p);
        ImsResult::~ImsResult((ImsResult *)&v149);
      }
      if ((SHIBYTE(v113) & 0x80000000) == 0)
        return;
      v86 = __p;
      goto LABEL_191;
    case 2:
LABEL_72:
      std::string::basic_string[abi:ne180100]<0>(&v149, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v32 = ImsLogger::debug(ims::_logger, (uint64_t)&v149, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"Received conference notification with state partial", 51);
      *(_BYTE *)(v32 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_74;
    case 1:
      std::string::basic_string[abi:ne180100]<0>(&v149, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v10 = ImsLogger::debug(ims::_logger, (uint64_t)&v149, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Received conference notification with state Full", 48);
      *(_BYTE *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v10 + 17) = 0;
      if (SHIBYTE(v113) < 0)
        operator delete(__p);
      if (SHIBYTE(v151) < 0)
        operator delete(v149);
      v11 = *((_DWORD *)a2 + 105);
      if (v11 > *((_DWORD *)this + 507))
      {
        *((_DWORD *)this + 507) = v11;
        v96 = *((_QWORD *)a2 + 55);
        v98 = *((_QWORD *)a2 + 56);
        std::string::basic_string[abi:ne180100]<0>(&v149, "bambi.conf");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v12 = ImsLogger::debug(ims::_logger, (uint64_t)&v149, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Users in the NOTIFY = ", 22);
        v13 = v98 - v96;
        *(_BYTE *)(v12 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v12 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v12 + 17) = 0;
        if (SHIBYTE(v113) < 0)
          operator delete(__p);
        if (SHIBYTE(v151) < 0)
          operator delete(v149);
        v107 = 0;
        v108 = 0;
        v109 = 0;
        v14 = this;
        std::vector<std::shared_ptr<BambiConferenceParticipant>>::__init_with_size[abi:ne180100]<std::shared_ptr<BambiConferenceParticipant>*,std::shared_ptr<BambiConferenceParticipant>*>((char *)&v107, *((_QWORD **)this + 233), *((_QWORD **)this + 234), (uint64_t)(*((_QWORD *)this + 234) - *((_QWORD *)this + 233)) >> 4);
        v15 = (BambiConferenceParticipant **)v107;
        v94 = (BambiConferenceParticipant **)v108;
        if (v107 != v108)
        {
          if ((unint64_t)(v13 >> 3) <= 1)
            v16 = 1;
          else
            v16 = v13 >> 3;
          do
          {
            v183 = 0u;
            v179 = 257;
            v174 = 0u;
            v160 = 0u;
            v154 = 0;
            v155 = 0;
            v156 = 0;
            v152 = 0;
            v153 = 0;
            v151 = 0;
            v159 = 0;
            *(_QWORD *)&v160 = 0;
            v157 = &off_1E78B82D8;
            v158 = &v159;
            v150 = &off_1E78D08F8;
            v149 = &off_1E78BFCE8;
            v161 = 0u;
            v162 = 0u;
            v163 = 0u;
            v164 = 0u;
            v165 = 0u;
            v166 = 0u;
            v167 = 0u;
            v168 = 0u;
            v169 = 0u;
            v170 = 0u;
            v171 = 0u;
            v172 = 0u;
            v173 = 0u;
            *(_QWORD *)&v174 = 0;
            v177 = 0;
            v178 = 0;
            v175 = &off_1E78B82D8;
            v176 = &v177;
            v182 = 0;
            *(_QWORD *)&v183 = 0;
            v180 = &off_1E78B82D8;
            v181 = &v182;
            WORD4(v160) = 257;
            WORD4(v183) = 257;
            __p = 0;
            v112 = 0;
            v17 = (std::__shared_weak_count *)*((_QWORD *)v14 + 45);
            if (v17)
            {
              v17 = std::__shared_weak_count::lock(v17);
              v18 = v17;
              v112 = (uint64_t (**)(SipHost *__hidden))v17;
              if (v17)
              {
                v17 = (std::__shared_weak_count *)*((_QWORD *)v14 + 44);
                __p = v17;
              }
            }
            else
            {
              v18 = 0;
            }
            SipStack::makeOutgoingSipUri((SipStack *)v17, (BambiConferenceParticipant *)((char *)*v15 + 264), (SipUri *)&v149, (uint64_t)&v146);
            ImsResult::~ImsResult((ImsResult *)&v146);
            if (v18)
            {
              p_shared_owners = (unint64_t *)&v18->__shared_owners_;
              do
                v20 = __ldaxr(p_shared_owners);
              while (__stlxr(v20 - 1, p_shared_owners));
              if (!v20)
              {
                ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                std::__shared_weak_count::__release_weak(v18);
              }
            }
            v145 = 0u;
            v141 = 257;
            v136 = 0u;
            v122 = 0u;
            v116 = 0;
            v117 = 0;
            v118 = 0;
            v114 = 0;
            v115 = 0;
            v113 = 0;
            v121 = 0;
            *(_QWORD *)&v122 = 0;
            v119 = &off_1E78B82D8;
            v120 = &v121;
            __p = &off_1E78BFCE8;
            v112 = &off_1E78D08F8;
            v123 = 0u;
            v124 = 0u;
            v125 = 0u;
            v126 = 0u;
            v127 = 0u;
            v128 = 0u;
            v129 = 0u;
            v130 = 0u;
            v131 = 0u;
            v132 = 0u;
            v133 = 0u;
            v134 = 0u;
            v135 = 0u;
            *(_QWORD *)&v136 = 0;
            v139 = 0;
            v140 = 0;
            v137 = &off_1E78B82D8;
            v138 = &v139;
            v144 = 0;
            *(_QWORD *)&v145 = 0;
            v142 = &off_1E78B82D8;
            v143 = &v144;
            WORD4(v122) = 257;
            WORD4(v145) = 257;
            if (v98 == v96)
            {
              MatchingEndpointStatus = 9;
            }
            else
            {
              v21 = 0;
              while (1)
              {
                v22 = *((_QWORD *)a2 + 55);
                v23 = v21 >= (*((_QWORD *)a2 + 56) - v22) >> 3 ? 0 : *(_QWORD *)(v22 + 8 * v21);
                SipUri::clear((SipUri *)&__p);
                v104 = 0;
                v105 = 0;
                v24 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
                if (v24)
                {
                  v24 = std::__shared_weak_count::lock(v24);
                  v25 = v24;
                  v105 = v24;
                  if (v24)
                  {
                    v24 = (std::__shared_weak_count *)*((_QWORD *)this + 44);
                    v104 = v24;
                  }
                }
                else
                {
                  v25 = 0;
                }
                SipStack::makeOutgoingSipUri((SipStack *)v24, (const SipUri *)(v23 + 8), (SipUri *)&__p, (uint64_t)v110);
                ImsResult::~ImsResult((ImsResult *)v110);
                if (v25)
                {
                  v26 = (unint64_t *)&v25->__shared_owners_;
                  do
                    v27 = __ldaxr(v26);
                  while (__stlxr(v27 - 1, v26));
                  if (!v27)
                  {
                    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                    std::__shared_weak_count::__release_weak(v25);
                  }
                }
                if (SipUri::userMatch((SipUri *)&v149, (const SipUri *)&__p))
                  break;
                if (++v21 == v16)
                {
                  MatchingEndpointStatus = 9;
                  goto LABEL_56;
                }
              }
              MatchingEndpointStatus = BambiConferenceCall::findMatchingEndpointStatus((BambiConferenceCall *)v23, v28);
LABEL_56:
              v14 = this;
            }
            if (*((int *)*v15 + 60) <= 5 && (_DWORD)MatchingEndpointStatus == 9)
            {
              std::string::basic_string[abi:ne180100]<0>(&v104, "bambi.conf");
              std::string::basic_string[abi:ne180100]<0>(v102, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v30 = ImsLogger::debug(ims::_logger, (uint64_t)&v104, (uint64_t)v102);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"Participant ", 12);
              *(_BYTE *)(v30 + 17) = 0;
              (*((void (**)(SipUri *, ImsOutStream *))v149 + 5))((SipUri *)&v149, (ImsOutStream *)v30);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)" has not yet joined, so ignoring disconnected notification", 58);
              *(_BYTE *)(v30 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v30 + 17) = 0;
              if (v103 < 0)
                operator delete(v102[0]);
              if (v106 < 0)
                operator delete(v104);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(&v104, "bambi.conf");
              std::string::basic_string[abi:ne180100]<0>(v102, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v31 = ImsLogger::debug(ims::_logger, (uint64_t)&v104, (uint64_t)v102);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)"Participant ", 12);
              *(_BYTE *)(v31 + 17) = 0;
              (*((void (**)(SipUri *, ImsOutStream *))v149 + 5))((SipUri *)&v149, (ImsOutStream *)v31);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)", status = ", 11);
              *(_BYTE *)(v31 + 17) = 0;
              SipConferenceEndpoint::statusAsString(MatchingEndpointStatus, v100);
              (*(void (**)(uint64_t, void **))(*(_QWORD *)v31 + 32))(v31, v100);
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v31 + 17) = 0;
              if (v101 < 0)
                operator delete(v100[0]);
              if (v103 < 0)
                operator delete(v102[0]);
              if (v106 < 0)
                operator delete(v104);
              BambiConferenceParticipant::handleConferenceNotification(*v15, MatchingEndpointStatus, (SipUri *)&__p);
            }
            SipUri::~SipUri((SipUri *)&__p);
            SipUri::~SipUri((SipUri *)&v149);
            v15 += 2;
          }
          while (v15 != v94);
        }
        v149 = &v107;
        std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
        return;
      }
      std::string::basic_string[abi:ne180100]<0>(&v149, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v87 = ImsLogger::debug(ims::_logger, (uint64_t)&v149, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v87 + 8), (uint64_t)"Stale notification (version = ", 30);
      *(_BYTE *)(v87 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v87 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v87 + 8), (uint64_t)"), ignoring it.", 15);
      *(_BYTE *)(v87 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v87 + 64))(v87, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v87 + 17) = 0;
      if (SHIBYTE(v113) < 0)
        operator delete(__p);
      if ((SHIBYTE(v151) & 0x80000000) == 0)
        return;
      v86 = v149;
LABEL_191:
      operator delete(v86);
      return;
  }
LABEL_73:
  std::string::basic_string[abi:ne180100]<0>(&v149, "bambi.conf");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v32 = ImsLogger::debug(ims::_logger, (uint64_t)&v149, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"Treating notification as Partial.", 33);
  *(_BYTE *)(v32 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_74:
  *(_BYTE *)(v32 + 17) = 0;
  if (SHIBYTE(v113) < 0)
    operator delete(__p);
  if (SHIBYTE(v151) < 0)
    operator delete(v149);
  v34 = *((_QWORD *)a2 + 55);
  v33 = *((_QWORD *)a2 + 56);
  std::string::basic_string[abi:ne180100]<0>(&v149, "bambi.conf");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v35 = ImsLogger::info(ims::_logger, (uint64_t)&v149, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"Users in the NOTIFY = ", 22);
  v36 = v33 - v34;
  *(_BYTE *)(v35 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v35 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v35 + 17) = 0;
  if (SHIBYTE(v113) < 0)
    operator delete(__p);
  if (SHIBYTE(v151) < 0)
    operator delete(v149);
  if (v33 != v34)
  {
    v38 = 0;
    v39 = v36 >> 3;
    if ((unint64_t)(v36 >> 3) <= 1)
      v39 = 1;
    v90 = (char *)this + 72;
    v91 = v39;
    v88 = (char **)((char *)this + 1864);
    v89 = (_QWORD *)((char *)this + 176);
    while (1)
    {
      v40 = *((_QWORD *)v93 + 55);
      v41 = v38 >= (*((_QWORD *)v93 + 56) - v40) >> 3 ? 0 : *(BambiConferenceCall **)(v40 + 8 * v38);
      v95 = v38;
      v97 = v41;
      if (*((_DWORD *)v41 + 104) == 3)
        break;
      v92 = BambiConferenceCall::findMatchingEndpointStatus(v41, v37);
      if (v92)
        goto LABEL_92;
LABEL_115:
      v53 = this;
      v54 = (BambiConferenceCall *)((char *)v97 + 8);
      v55 = (SipUri *)*((_QWORD *)v53 + 230);
      v56 = (SipUri *)*((_QWORD *)v53 + 231);
      while (1)
      {
        if (v55 == v56)
        {
          v57 = (*(uint64_t (**)(char *))(*(_QWORD *)v90 + 64))(v90);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v90 + 16))(v90, v57);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v57 + 8), (uint64_t)"User (", 6);
          *(_BYTE *)(v57 + 17) = 0;
          (*(void (**)(const SipUri *, uint64_t))(*(_QWORD *)v54 + 40))(v54, v57);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v57 + 8), (uint64_t)") is not a participant", 22);
          *(_BYTE *)(v57 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v57 + 17) = 0;
          this = v99;
          goto LABEL_120;
        }
        if (SipUri::equals(v55, v54, 1))
          break;
        v55 = (SipUri *)((char *)v55 + 432);
      }
      v58 = (*(uint64_t (**)(char *))(*(_QWORD *)v90 + 64))(v90);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v90 + 16))(v90, v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v58 + 8), (uint64_t)"adding initial invitee ", 23);
      *(_BYTE *)(v58 + 17) = 0;
      (*(void (**)(const SipUri *, uint64_t))(*(_QWORD *)v54 + 40))(v54, v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v58 + 8), (uint64_t)" as a participant", 17);
      *(_BYTE *)(v58 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v58 + 17) = 0;
      v110[0] = 0uLL;
      v150 = 0;
      v149 = 0;
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&__p, v89);
      if (__p)
      {
        v60 = v99;
        if (v59)
        {
          v149 = v59;
          v150 = v112;
          p_p = &__p;
        }
        else
        {
          p_p = &v149;
        }
      }
      else
      {
        p_p = &v149;
        v60 = v99;
      }
      *p_p = 0;
      p_p[1] = 0;
      v66 = (std::__shared_weak_count *)v112;
      if (v112)
      {
        v67 = (unint64_t *)(v112 + 1);
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      v110[0] = 0uLL;
      if (v149)
      {
        __p = 0;
        v112 = 0;
        v146 = v149;
        v147 = (std::__shared_weak_count *)v150;
        if (v150)
        {
          v69 = (unint64_t *)(v150 + 1);
          do
            v70 = __ldxr(v69);
          while (__stxr(v70 + 1, v69));
        }
        BambiConferenceParticipant::create((uint64_t *)&__p, (uint64_t *)&v146, (uint64_t)v54, v110);
        v71 = v147;
        if (v147)
        {
          v72 = (unint64_t *)&v147->__shared_owners_;
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        v74 = (std::__shared_weak_count *)v112;
        if (v112)
        {
          v75 = (unint64_t *)(v112 + 1);
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        std::vector<std::shared_ptr<BambiConferenceParticipant>>::push_back[abi:ne180100](v88, v110);
      }
      v77 = (std::__shared_weak_count *)v150;
      this = v60;
      if (v150)
      {
        v78 = (unint64_t *)(v150 + 1);
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      v80 = (std::__shared_weak_count *)*((_QWORD *)&v110[0] + 1);
      if (*((_QWORD *)&v110[0] + 1))
      {
        v81 = (unint64_t *)(*((_QWORD *)&v110[0] + 1) + 8);
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
LABEL_120:
      v38 = v95 + 1;
      if (v95 + 1 == v91)
        return;
    }
    v92 = 9;
LABEL_92:
    v183 = 0u;
    v179 = 257;
    v174 = 0u;
    v160 = 0u;
    v154 = 0;
    v155 = 0;
    v156 = 0;
    v152 = 0;
    v153 = 0;
    v151 = 0;
    v159 = 0;
    *(_QWORD *)&v160 = 0;
    v157 = &off_1E78B82D8;
    v158 = &v159;
    v150 = &off_1E78D08F8;
    v149 = &off_1E78BFCE8;
    v161 = 0u;
    v162 = 0u;
    v163 = 0u;
    v164 = 0u;
    v165 = 0u;
    v166 = 0u;
    v167 = 0u;
    v168 = 0u;
    v169 = 0u;
    v170 = 0u;
    v171 = 0u;
    v172 = 0u;
    v173 = 0u;
    *(_QWORD *)&v174 = 0;
    v177 = 0;
    v178 = 0;
    v175 = &off_1E78B82D8;
    v176 = &v177;
    v182 = 0;
    *(_QWORD *)&v183 = 0;
    v180 = &off_1E78B82D8;
    v181 = &v182;
    WORD4(v160) = 257;
    WORD4(v183) = 257;
    __p = 0;
    v112 = 0;
    v42 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
    if (v42)
    {
      v42 = std::__shared_weak_count::lock(v42);
      v43 = v42;
      v112 = (uint64_t (**)(SipHost *__hidden))v42;
      if (v42)
      {
        v42 = (std::__shared_weak_count *)*((_QWORD *)this + 44);
        __p = v42;
      }
    }
    else
    {
      v43 = 0;
    }
    SipStack::makeOutgoingSipUri((SipStack *)v42, (BambiConferenceCall *)((char *)v97 + 8), (SipUri *)&v149, (uint64_t)&v146);
    ImsResult::~ImsResult((ImsResult *)&v146);
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = this;
    v47 = (BambiConferenceParticipant **)*((_QWORD *)this + 233);
    v48 = (BambiConferenceParticipant **)*((_QWORD *)v46 + 234);
    while (1)
    {
      if (v47 == v48)
      {
        SipUri::~SipUri((SipUri *)&v149);
        this = v99;
        goto LABEL_115;
      }
      v145 = 0u;
      v141 = 257;
      v136 = 0u;
      v122 = 0u;
      v116 = 0;
      v117 = 0;
      v118 = 0;
      v114 = 0;
      v115 = 0;
      v113 = 0;
      v121 = 0;
      *(_QWORD *)&v122 = 0;
      v119 = &off_1E78B82D8;
      v120 = &v121;
      __p = &off_1E78BFCE8;
      v112 = &off_1E78D08F8;
      v123 = 0u;
      v124 = 0u;
      v125 = 0u;
      v126 = 0u;
      v127 = 0u;
      v128 = 0u;
      v129 = 0u;
      v130 = 0u;
      v131 = 0u;
      v132 = 0u;
      v133 = 0u;
      v134 = 0u;
      v135 = 0u;
      *(_QWORD *)&v136 = 0;
      v139 = 0;
      v140 = 0;
      v137 = &off_1E78B82D8;
      v138 = &v139;
      v144 = 0;
      *(_QWORD *)&v145 = 0;
      v142 = &off_1E78B82D8;
      v143 = &v144;
      WORD4(v122) = 257;
      WORD4(v145) = 257;
      v107 = 0;
      v108 = 0;
      v49 = (std::__shared_weak_count *)*((_QWORD *)v99 + 45);
      if (v49)
      {
        v49 = std::__shared_weak_count::lock(v49);
        v50 = v49;
        v108 = v49;
        if (v49)
        {
          v49 = (std::__shared_weak_count *)*((_QWORD *)v99 + 44);
          v107 = v49;
        }
      }
      else
      {
        v50 = 0;
      }
      SipStack::makeOutgoingSipUri((SipStack *)v49, (BambiConferenceParticipant *)((char *)*v47 + 264), (SipUri *)&__p, (uint64_t)v110);
      ImsResult::~ImsResult((ImsResult *)v110);
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      if (SipUri::userMatch((SipUri *)&__p, (const SipUri *)&v149))
        break;
      SipUri::~SipUri((SipUri *)&__p);
      v47 += 2;
    }
    v62 = v92 == 9 && *((_DWORD *)*v47 + 60) <= 5;
    v63 = !v62;
    if (v62)
    {
      std::string::basic_string[abi:ne180100]<0>(&v107, "bambi.conf");
      this = v99;
      std::string::basic_string[abi:ne180100]<0>(&v104, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v65 = ImsLogger::debug(ims::_logger, (uint64_t)&v107, (uint64_t)&v104);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v65 + 8), (uint64_t)"Participant ", 12);
      *(_BYTE *)(v65 + 17) = 0;
      (*((void (**)(void **, uint64_t))__p + 5))(&__p, v65);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v65 + 8), (uint64_t)" has not yet joined, so ignoring disconnected notification", 58);
      *(_BYTE *)(v65 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v65 + 64))(v65, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v65 + 17) = 0;
      if (v106 < 0)
        operator delete(v104);
      if (SHIBYTE(v109) < 0)
        operator delete(v107);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v107, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(&v104, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v64 = ImsLogger::debug(ims::_logger, (uint64_t)&v107, (uint64_t)&v104);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v64 + 8), (uint64_t)"Participant ", 12);
      *(_BYTE *)(v64 + 17) = 0;
      (*((void (**)(void **, uint64_t))__p + 5))(&__p, v64);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v64 + 8), (uint64_t)", status = ", 11);
      *(_BYTE *)(v64 + 17) = 0;
      SipConferenceEndpoint::statusAsString(v92, v102);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v64 + 32))(v64, v102);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v64 + 64))(v64, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v64 + 17) = 0;
      if (v103 < 0)
        operator delete(v102[0]);
      if (v106 < 0)
        operator delete(v104);
      if (SHIBYTE(v109) < 0)
        operator delete(v107);
      BambiConferenceParticipant::handleConferenceNotification(*v47, v92, (SipUri *)&v149);
      this = v99;
    }
    SipUri::~SipUri((SipUri *)&__p);
    SipUri::~SipUri((SipUri *)&v149);
    if ((v63 & 1) != 0)
      goto LABEL_120;
    goto LABEL_115;
  }
}

void sub_1BF15A110(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x327]) < 0)
    operator delete((void *)STACK[0x310]);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'BambiConferenceCall::handleConferenceNotification(BambiConferenceCall *this, const SipConferenceInfo *a2)
{
  BambiConferenceCall::handleConferenceNotification((BambiConferenceCall *)((char *)this - 1832), a2);
}

uint64_t BambiConferenceCall::findMatchingEndpointStatus(BambiConferenceCall *this, const SipConferenceUser *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  const SipUri *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;

  v3 = *((_QWORD *)this + 57);
  v2 = *((_QWORD *)this + 58);
  v4 = v2 - v3;
  if (v2 == v3)
  {
LABEL_8:
    std::string::basic_string[abi:ne180100]<0>(v15, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::debug(ims::_logger, (uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"No matching endpoint in the notify ", 35);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (v14 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15[0]);
    return 0;
  }
  else
  {
    v6 = 0;
    v7 = (BambiConferenceCall *)((char *)this + 8);
    if ((unint64_t)(v4 >> 3) <= 1)
      v8 = 1;
    else
      v8 = v4 >> 3;
    while (1)
    {
      v9 = *(_QWORD *)(*((_QWORD *)this + 57) + 8 * v6);
      v10 = SipUri::equals((SipUri *)(v9 + 8), v7, 1);
      if (v4 == 8 || v10)
        return *(unsigned int *)(v9 + 448);
      if (v8 == ++v6)
        goto LABEL_8;
    }
  }
}

void sub_1BF15A458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BambiConferenceCall::handleParticipantStateChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *p_shared_weak_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD v64[9];
  _BYTE v65[72];
  uint64_t *v66[3];
  uint64_t *v67[3];
  void *__p[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  void **v75[2];
  char v76;
  void *v77;
  std::__shared_weak_count *v78;
  void *v79;
  std::__shared_weak_count *v80;

  v8 = a1 + 72;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(a1 + 72);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"BambiConferenceCall::handleParticipantStateChange", 49);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (*(_QWORD *)a2
  {
    v11 = *(std::__shared_weak_count **)(a2 + 8);
    v79 = v10;
    v80 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  else
  {
    v79 = 0;
    v80 = 0;
  }
  v14 = *(void **)(a1 + 1944);
  v15 = *(std::__shared_weak_count **)(a1 + 1952);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (v18)
    {
      if (!v14)
        goto LABEL_34;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if (!v14)
        goto LABEL_34;
    }
    v19 = *(unint64_t **)(a1 + 1952);
    v14 = *(void **)(a1 + 1944);
    __p[0] = v14;
    __p[1] = v19;
    if (v19)
    {
      v20 = v19 + 1;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  else
  {
    if (!v14)
      goto LABEL_34;
    __p[0] = *(void **)(a1 + 1944);
    __p[1] = 0;
  }
  v77 = v79;
  v78 = v80;
  if (v80)
  {
    v22 = (unint64_t *)&v80->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  (*(void (**)(void *, void **, uint64_t, uint64_t))(*(_QWORD *)v14 + 72))(v14, &v77, a3, a4);
  v24 = v78;
  if (v78)
  {
    v25 = (unint64_t *)&v78->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (__p[1])
  {
    v27 = (unint64_t *)((char *)__p[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      (*(void (**)(void *))(*(_QWORD *)__p[1] + 16))(__p[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
    }
  }
LABEL_34:
  if ((a4 - 8) <= 2)
  {
    v29 = *(_QWORD *)(a1 + 1864);
    v30 = *(_QWORD **)(a1 + 1872);
    if ((_QWORD *)v29 != v30)
    {
      v31 = v79;
      v32 = -v29;
      while (*(void **)v29 != v79)
      {
        v29 += 16;
        v32 -= 16;
        if ((_QWORD *)v29 == v30)
          goto LABEL_68;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(v75, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v33 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v75);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"removing participant ", 21);
      *(_BYTE *)(v33 + 17) = 0;
      (*(void (**)(_QWORD *, uint64_t))(v31[33] + 40))(v31 + 33, v33);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v33 + 17) = 0;
      if (v76 < 0)
        operator delete(v75[0]);
      if (SBYTE7(v69) < 0)
        operator delete(__p[0]);
      v34 = -v32;
      v35 = 16 - v32;
      v36 = *(_QWORD *)(a1 + 1872);
      if (16 - v32 != v36)
      {
        do
        {
          v37 = v34 + 16;
          std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](v34, (__int128 *)(v34 + 16));
          v38 = v34 + 32;
          v34 += 16;
        }
        while (v38 != v36);
        v35 = *(_QWORD *)(a1 + 1872);
        v34 = v37;
      }
      while (v35 != v34)
        v35 = std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v35 - 16);
      *(_QWORD *)(a1 + 1872) = v34;
      v39 = *(std::__shared_weak_count **)(*(_QWORD *)a2 + 152);
      if (v39)
      {
        v40 = *(_QWORD *)(*(_QWORD *)a2 + 144);
        p_shared_weak_owners = (unint64_t *)&v39->__shared_weak_owners_;
        do
          v42 = __ldxr(p_shared_weak_owners);
        while (__stxr(v42 + 1, p_shared_weak_owners));
        v43 = std::__shared_weak_count::lock(v39);
        std::__shared_weak_count::__release_weak(v39);
        if (v43)
        {
          if (v40)
          {
            v73 = 0;
            v74 = 0;
            std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v40 + 1472), &v73);
            v44 = v74;
            if (v74)
            {
              v45 = (unint64_t *)&v74->__shared_owners_;
              do
                v46 = __ldaxr(v45);
              while (__stlxr(v46 - 1, v45));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                std::__shared_weak_count::__release_weak(v44);
              }
            }
          }
          v47 = (unint64_t *)&v43->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
      }
      std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)a2);
      v49 = v80;
      v79 = 0;
      v80 = 0;
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
    }
LABEL_68:
    std::string::basic_string[abi:ne180100]<0>(__p, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(v75, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v52 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v75);
    std::ostream::operator<<();
    *(_BYTE *)(v52 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v52 + 8), (uint64_t)" participants remaining", 23);
    *(_BYTE *)(v52 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v52 + 17) = 0;
    if (v76 < 0)
      operator delete(v75[0]);
    if (SBYTE7(v69) < 0)
      operator delete(__p[0]);
  }
  if ((_DWORD)a4 != 6)
  {
    if ((_DWORD)a4 != 10)
      goto LABEL_86;
    ++*(_DWORD *)(a1 + 1996);
  }
  v53 = *(_DWORD *)(a1 + 1992);
  if (v53)
  {
    v54 = v53 - 1;
    *(_DWORD *)(a1 + 1992) = v54;
    if (v54)
    {
      v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v55 + 8), (uint64_t)"still waiting for ", 18);
      *(_BYTE *)(v55 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v55 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v55 + 8), (uint64_t)" participant", 12);
      *(_BYTE *)(v55 + 17) = 0;
      v56 = *(_DWORD *)(a1 + 1992);
      if (v56 == 1)
        v57 = "";
      else
        v57 = "s";
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v55 + 8), (uint64_t)v57, v56 != 1);
      *(_BYTE *)(v55 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v55 + 17) = 0;
    }
    else
    {
      if (*(_DWORD *)(a1 + 1996))
      {
        v72 = 0;
        v70 = 0u;
        v71 = 0u;
        *(_OWORD *)__p = 0u;
        v69 = 0u;
        BambiConferenceCall::weakParticipants((void **)a1, (uint64_t *)v66);
        BambiCallConferenceEvent::BambiCallConferenceEvent((uint64_t)__p, 2, v66);
        v75[0] = (void **)v66;
        std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](v75);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 56))(a1, __p);
        *(_DWORD *)(a1 + 1996) = 0;
      }
      else
      {
        v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v58 + 8), (uint64_t)"everyone joined", 15);
        *(_BYTE *)(v58 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v58 + 17) = 0;
        v72 = 0;
        v70 = 0u;
        v71 = 0u;
        *(_OWORD *)__p = 0u;
        v69 = 0u;
        BambiConferenceCall::weakParticipants((void **)a1, (uint64_t *)v67);
        BambiCallConferenceEvent::BambiCallConferenceEvent((uint64_t)__p, 1, v67);
        v75[0] = (void **)v67;
        std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](v75);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 56))(a1, __p);
      }
      __p[0] = off_1E78C9130;
      v75[0] = (void **)&v70 + 1;
      std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](v75);
      __p[0] = &off_1E78BD300;
      if (*((_QWORD *)&v69 + 1))
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v69 + 1));
    }
  }
LABEL_86:
  if (*(_QWORD *)(a1 + 1864) == *(_QWORD *)(a1 + 1872))
  {
    v59 = *(_QWORD *)(a1 + 1944);
    if (v59 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v59 + 48))(v59) == 3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(v75, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v60 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v75);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v60 + 8), (uint64_t)"All participants left, ending the conference call", 49);
      *(_BYTE *)(v60 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v60 + 64))(v60, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "bambi.conf");
      std::string::basic_string[abi:ne180100]<0>(v75, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v60 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v75);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v60 + 8), (uint64_t)"All participants failed to join, ending the conference call", 59);
      *(_BYTE *)(v60 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v60 + 64))(v60, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    *(_BYTE *)(v60 + 17) = 0;
    if (v76 < 0)
      operator delete(v75[0]);
    if (SBYTE7(v69) < 0)
      operator delete(__p[0]);
    if (*(_BYTE *)(a1 + 2026))
    {
      BambiConferenceCall::clearConferenceEventSubscription((BambiConferenceCall *)a1, 1);
      BambiCall::silentHangUp(a1, 8, (ImsResult *)v65);
      ImsResult::~ImsResult((ImsResult *)v65);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "EmptyConference");
      (*(void (**)(_QWORD *__return_ptr, uint64_t, void **))(*(_QWORD *)a1 + 80))(v64, a1, __p);
      ImsResult::~ImsResult((ImsResult *)v64);
      if (SBYTE7(v69) < 0)
        operator delete(__p[0]);
    }
  }
  v61 = v80;
  if (v80)
  {
    v62 = (unint64_t *)&v80->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
}

void sub_1BF15ADDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  BambiCallConferenceEvent::~BambiCallConferenceEvent((BambiCallConferenceEvent *)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v38 - 80);
  _Unwind_Resume(a1);
}

uint64_t SipTypedStateMachine<BambiConferenceCallState>::currentState@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 64);
  *a2 = *(_QWORD *)(result + 56);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void `non-virtual thunk to'BambiConferenceCall::handleParticipantStateChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BambiConferenceCall::handleParticipantStateChange(a1 - 1824, a2, a3, a4);
}

uint64_t BambiConferenceCall::conferenceCallActivated(BambiConferenceCall *this)
{
  uint64_t result;
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  result = *((_QWORD *)this + 243);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
    if ((_DWORD)result == 4)
    {
      v3 = (_QWORD *)((char *)this + 1888);
      v5 = *((_QWORD *)this + 9);
      v4 = (char *)this + 72;
      v6 = (*(uint64_t (**)(char *))(v5 + 64))(v4);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))(v4, v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Back to confirmed state", 23);
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v6 + 17) = 0;
      return SipTypedStateMachine<BambiConferenceCallState>::transitionToState(v3, 3);
    }
  }
  return result;
}

void BambiConferenceCall::resumeConferenceCall(BambiConferenceCall *this)
{
  char *v2;
  uint64_t v3;

  if ((*((_DWORD *)this + 110) & 0xFFFFFFFE) == 2)
  {
    v2 = (char *)this + 72;
    v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Resume the conference call", 26);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    BambiCall::performLocalResume(this);
  }
}

void BambiConferenceCall::cleanupOnTimeout(void **this)
{
  void *__p[2];
  char v3;
  _QWORD v4[9];
  uint64_t *v5[3];
  __int128 v6;
  __int128 v7;
  _BYTE v8[32];
  uint64_t v9;

  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v7 = 0u;
  v6 = 0u;
  BambiConferenceCall::weakParticipants(this, (uint64_t *)v5);
  BambiCallConferenceEvent::BambiCallConferenceEvent((uint64_t)&v6, 2, v5);
  __p[0] = v5;
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  (*((void (**)(void **, __int128 *))*this + 7))(this, &v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "EmptyConference");
  (*((void (**)(_QWORD *__return_ptr, void **, void **))*this + 10))(v4, this, __p);
  ImsResult::~ImsResult((ImsResult *)v4);
  if (v3 < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v6 = off_1E78C9130;
  __p[0] = &v8[8];
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  *(_QWORD *)&v6 = &off_1E78BD300;
  if (*((_QWORD *)&v7 + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v7 + 1));
}

void sub_1BF15B118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  BambiCallConferenceEvent::~BambiCallConferenceEvent((BambiCallConferenceEvent *)(v15 - 96));
  _Unwind_Resume(a1);
}

void BambiConferenceCall::loggableName(BambiConferenceCall *this@<X0>, std::string *a2@<X8>)
{
  std::string v4;
  void *__p;
  char v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = 0;
  v7 = 0u;
  v8 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v7, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v7 + 1), (uint64_t)"BambiConferenceCall ", 20);
  BYTE1(v8) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&v4, (const std::string *)((char *)this + 464));
  (*(void (**)(__int128 *, std::string *))(v7 + 56))(&v7, &v4);
  if (v6 < 0)
    operator delete(__p);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v8 + 1) + 8, &v4);
  LoggableString::LoggableString(a2, &v4);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  *(_QWORD *)&v7 = &off_1E78D7A10;
  if ((_BYTE)v8)
  {
    if (*((_QWORD *)&v7 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v7 + 1) + 8))(*((_QWORD *)&v7 + 1));
  }
}

void sub_1BF15B24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20)
  {
    if (a19)
      (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiConferenceCall::nameForStateId(BambiConferenceCall *this, unsigned int a2)
{
  unsigned int v2;

  if (a2 <= 6)
    v2 = a2;
  else
    v2 = 0;
  return (uint64_t)&stateNames + 24 * v2;
}

uint64_t `non-virtual thunk to'BambiConferenceCall::nameForStateId(BambiConferenceCall *this, unsigned int a2)
{
  unsigned int v2;

  if (a2 <= 6)
    v2 = a2;
  else
    v2 = 0;
  return (uint64_t)&stateNames + 24 * v2;
}

void BambiConferenceCall::handleStateTransition(BambiConferenceCall *this, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  const std::string *v7;
  const std::string *v8;
  std::string __p;
  std::string v10;

  v5 = (char *)this + 72;
  v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v5 + 16))(v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"state transition [", 18);
  *(_BYTE *)(v6 + 17) = 0;
  v5 += 1816;
  v7 = (const std::string *)SipSimpleStateMachine<BambiConferenceCallState>::nameForStateId((uint64_t)v5, a2);
  LoggableString::LoggableString(&v10, v7);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 40))(v6, &v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" --> ", 5);
  *(_BYTE *)(v6 + 17) = 0;
  v8 = (const std::string *)SipSimpleStateMachine<BambiConferenceCallState>::nameForStateId((uint64_t)v5, a3);
  LoggableString::LoggableString(&__p, v8);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 40))(v6, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
}

void sub_1BF15B424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *SipSimpleStateMachine<BambiConferenceCallState>::nameForStateId(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v3)
    return "Unknown";
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return "Unknown";
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 72);
  if (v7)
  {
    a2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (v9)
      return (const char *)a2;
  }
  else
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (v11)
      return "Unknown";
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (!v7)
    return "Unknown";
  return (const char *)a2;
}

void sub_1BF15B524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'BambiConferenceCall::handleStateTransition(BambiConferenceCall *this, uint64_t a2, uint64_t a3)
{
  BambiConferenceCall::handleStateTransition((BambiConferenceCall *)((char *)this - 1816), a2, a3);
}

void BambiConferenceCall::prepareInvite(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, SipMessage *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const void **v25;
  unsigned __int8 *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  _QWORD *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  SipMessage *v65;
  char v66;
  _QWORD *v67;
  SipRecipientListBody *v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  void *__p[2];
  char v73;
  _QWORD *v74;
  std::__shared_weak_count *v75;
  void (**v76)(ImsResult *__hidden);
  uint64_t *v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _QWORD *v82;
  std::__shared_weak_count *v83;
  char v84;

  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v76 = &off_1E78B7238;
  v77 = &_bambiDomain;
  v78 = 0;
  if (((*(uint64_t (**)(uint64_t *, _QWORD))(_bambiDomain + 24))(&_bambiDomain, 0) & 1) != 0)
    goto LABEL_13;
  v8 = a2[23];
  v9 = (v8 & 0x80u) == 0 ? a2[23] : *((_QWORD *)a2 + 1);
  if (v9 != 13)
    goto LABEL_13;
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, "InitialInvite", *((_QWORD *)a2 + 1)))
      goto LABEL_13;
  }
  else if (a2[23])
  {
    v10 = "InitialInvite";
    while (*a2 == *(unsigned __int8 *)v10)
    {
      ++a2;
      ++v10;
      if (!--v8)
        goto LABEL_15;
    }
LABEL_13:
    ImsResult::ImsResult(a4, (uint64_t)&v76);
    goto LABEL_14;
  }
LABEL_15:
  if (a1[230] == a1[231])
    goto LABEL_111;
  v68 = (SipRecipientListBody *)operator new();
  SipRecipientListBody::SipRecipientListBody(v68);
  v11 = a1[230];
  v12 = a1[231];
  if (v11 == v12)
    goto LABEL_110;
  v65 = a3;
  v66 = 0;
  v67 = a1 + 9;
  do
  {
    v74 = 0;
    v75 = 0;
    v13 = (_QWORD *)a1[233];
    v14 = (_QWORD *)a1[234];
    while (v13 != v14)
    {
      v15 = *(std::__shared_weak_count **)(*v13 + 152);
      if (!v15)
        goto LABEL_46;
      v16 = *(_QWORD *)(*v13 + 144);
      p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
      do
        v18 = __ldxr(p_shared_weak_owners);
      while (__stxr(v18 + 1, p_shared_weak_owners));
      v19 = std::__shared_weak_count::lock(v15);
      if (!v19)
      {
        v20 = v15;
LABEL_45:
        std::__shared_weak_count::__release_weak(v20);
        goto LABEL_46;
      }
      v20 = v19;
      std::__shared_weak_count::__release_weak(v15);
      if (v16)
      {
        v21 = *(unsigned __int8 *)(v16 + 487);
        if ((v21 & 0x80u) == 0)
          v22 = *(unsigned __int8 *)(v16 + 487);
        else
          v22 = *(_QWORD *)(v16 + 472);
        v23 = *(unsigned __int8 *)(v11 + 431);
        v24 = (char)v23;
        if ((v23 & 0x80u) != 0)
          v23 = *(_QWORD *)(v11 + 416);
        if (v22 == v23)
        {
          v25 = (const void **)(v16 + 464);
          if (v24 >= 0)
            v26 = (unsigned __int8 *)(v11 + 408);
          else
            v26 = *(unsigned __int8 **)(v11 + 408);
          if ((v21 & 0x80) != 0)
          {
            if (!memcmp(*v25, v26, *(_QWORD *)(v16 + 472)))
            {
LABEL_59:
              v33 = (std::__shared_weak_count *)v13[1];
              v74 = (_QWORD *)*v13;
              v75 = v33;
              if (v33)
              {
                p_shared_owners = (unint64_t *)&v33->__shared_owners_;
                do
                  v35 = __ldxr(p_shared_owners);
                while (__stxr(v35 + 1, p_shared_owners));
              }
              v36 = (unint64_t *)&v20->__shared_owners_;
              do
                v37 = __ldaxr(v36);
              while (__stlxr(v37 - 1, v36));
              if (!v37)
              {
                ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v20->__on_zero_shared)(v20, v26);
                std::__shared_weak_count::__release_weak(v20);
              }
              if (v74)
              {
                v38 = (std::__shared_weak_count *)v74[19];
                if (v38)
                {
                  v39 = (_QWORD *)v74[18];
                  v40 = (unint64_t *)&v38->__shared_weak_owners_;
                  do
                    v41 = __ldxr(v40);
                  while (__stxr(v41 + 1, v40));
                  v82 = 0;
                  v83 = std::__shared_weak_count::lock(v38);
                  if (v83)
                  {
                    v82 = v39;
                    std::__shared_weak_count::__release_weak(v38);
                    if (v39)
                    {
                      v42 = v39[48];
                      v43 = (std::__shared_weak_count *)v39[49];
                      if (v43)
                      {
                        v44 = (unint64_t *)&v43->__shared_owners_;
                        do
                          v45 = __ldxr(v44);
                        while (__stxr(v45 + 1, v44));
                        do
                          v46 = __ldaxr(v44);
                        while (__stlxr(v46 - 1, v44));
                        if (!v46)
                        {
                          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                          std::__shared_weak_count::__release_weak(v43);
                        }
                      }
                      if (v42)
                      {
                        v47 = (*(uint64_t (**)(_QWORD *))(*v67 + 64))(v67);
                        (*(void (**)(_QWORD *, uint64_t))(*v67 + 16))(v67, v47);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v47 + 8), (uint64_t)"adding participant to INVITE: ", 30);
                        *(_BYTE *)(v47 + 17) = 0;
                        (*(void (**)(_QWORD *, uint64_t))(v74[33] + 40))(v74 + 33, v47);
                        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                        *(_BYTE *)(v47 + 17) = 0;
                        v48 = v82[48];
                        v49 = (std::__shared_weak_count *)v82[49];
                        v69 = v49;
                        if (v49)
                        {
                          v50 = (unint64_t *)&v49->__shared_owners_;
                          do
                            v51 = __ldxr(v50);
                          while (__stxr(v51 + 1, v50));
                        }
                        v53 = *(_QWORD *)(v48 + 240);
                        v52 = *(std::__shared_weak_count **)(v48 + 248);
                        v70 = v53;
                        v71 = v52;
                        if (v52)
                        {
                          v54 = (unint64_t *)&v52->__shared_owners_;
                          do
                            v55 = __ldxr(v54);
                          while (__stxr(v55 + 1, v54));
                        }
                        SipRecipientListBody::addRecipient((uint64_t)v68, &v70, (uint64_t)__p);
                        ImsResult::operator=((uint64_t)&v76, (uint64_t)__p);
                        ImsResult::~ImsResult((ImsResult *)__p);
                        v56 = v71;
                        if (v71)
                        {
                          v57 = (unint64_t *)&v71->__shared_owners_;
                          do
                            v58 = __ldaxr(v57);
                          while (__stlxr(v58 - 1, v57));
                          if (!v58)
                          {
                            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                            std::__shared_weak_count::__release_weak(v56);
                          }
                        }
                        if (v69)
                        {
                          v59 = (unint64_t *)&v69->__shared_owners_;
                          do
                            v60 = __ldaxr(v59);
                          while (__stlxr(v60 - 1, v59));
                          if (!v60)
                          {
                            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                            std::__shared_weak_count::__release_weak(v69);
                          }
                        }
                        if (((*(uint64_t (**)(uint64_t *, _QWORD))(*v77 + 24))(v77, v78) & 1) != 0)
                        {
                          v61 = (*(uint64_t (**)(_QWORD *))(*v67 + 56))(v67);
                          (*(void (**)(_QWORD *, uint64_t))(*v67 + 16))(v67, v61);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v61 + 8), (uint64_t)"unable to add recipient to INVITE: ", 35);
                          *(_BYTE *)(v61 + 17) = 0;
                          ((void (*)(ImsResult *, ImsOutStream *))v76[2])((ImsResult *)&v76, (ImsOutStream *)v61);
                          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v61 + 64))(v61, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                          *(_BYTE *)(v61 + 17) = 0;
                        }
                        else
                        {
                          v66 = 1;
                        }
                      }
                    }
                  }
                  else
                  {
                    std::__shared_weak_count::__release_weak(v38);
                  }
                }
                else
                {
                  v82 = 0;
                  v83 = 0;
                }
                v62 = v83;
                if (v83)
                {
                  v63 = (unint64_t *)&v83->__shared_owners_;
                  do
                    v64 = __ldaxr(v63);
                  while (__stlxr(v64 - 1, v63));
                  if (!v64)
                  {
                    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                    std::__shared_weak_count::__release_weak(v62);
                  }
                }
              }
              goto LABEL_52;
            }
          }
          else
          {
            if (!*(_BYTE *)(v16 + 487))
              goto LABEL_59;
            while (*(unsigned __int8 *)v25 == *v26)
            {
              v25 = (const void **)((char *)v25 + 1);
              ++v26;
              if (!--v21)
                goto LABEL_59;
            }
          }
        }
      }
      v27 = (unint64_t *)&v20->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        goto LABEL_45;
      }
LABEL_46:
      v13 += 2;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "bambi.conf");
    std::string::basic_string[abi:ne180100]<0>(&v82, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v29 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"No participant with Call-ID ", 28);
    *(_BYTE *)(v29 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 32))(v29, v11 + 408);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v29 + 17) = 0;
    if (v84 < 0)
      operator delete(v82);
    if (v73 < 0)
      operator delete(__p[0]);
    v74 = 0;
    v75 = 0;
LABEL_52:
    v30 = v75;
    if (v75)
    {
      v31 = (unint64_t *)&v75->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v11 += 432;
  }
  while (v11 != v12);
  if ((v66 & 1) == 0)
  {
LABEL_110:
    (*(void (**)(SipRecipientListBody *))(*(_QWORD *)v68 + 8))(v68);
    goto LABEL_111;
  }
  SipMessage::addBody((uint64_t)v65, (uint64_t)v68);
  std::string::basic_string[abi:ne180100]<0>(__p, "recipient-list-invite");
  SipMessage::addRequiredOption(v65, __p);
  if (v73 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "application/sdp, application/3gpp-ims+xml");
  SipMessage::addHeader(v65, (uint64_t)"Accept", (uint64_t)__p, 0);
  if (v73 < 0)
    operator delete(__p[0]);
LABEL_111:
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_QWORD *)a4 = &off_1E78B7238;
  *(_QWORD *)(a4 + 8) = &_bambiDomain;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_14:
  ImsResult::~ImsResult((ImsResult *)&v76);
}

void sub_1BF15BC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  if (a22 < 0)
    operator delete(__p);
  ImsResult::~ImsResult((ImsResult *)&a31);
  _Unwind_Resume(a1);
}

void BambiConferenceCall::deferredEndWithReason(BambiConferenceCall *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BambiConferenceCall::clearConferenceEventSubscription(a1, 1);
  BambiCall::deferredEndWithReason(a1, a2, a3);
}

void BambiConferenceCall::handleMediaSessionActivated(BambiConferenceCall *this)
{
  SipSession *v2;
  uint64_t v3;
  uint64_t v4;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  v2 = (SipSession *)*((_QWORD *)this + 48);
  if (v2)
  {
    if (SipSession::confirmed(v2))
    {
      v3 = *((_QWORD *)this + 243);
      if (v3)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3) == 2)
        {
          std::string::basic_string[abi:ne180100]<0>(v7, "bambi.conf");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v4 = ImsLogger::debug(ims::_logger, (uint64_t)v7, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Media is active and call is confirmed, Moving to SessionConfirmed state.", 72);
          *(_BYTE *)(v4 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v4 + 17) = 0;
          if (v6 < 0)
            operator delete(__p[0]);
          if (v8 < 0)
            operator delete(v7[0]);
          SipTypedStateMachine<BambiConferenceCallState>::transitionToState((_QWORD *)this + 236, 3);
        }
      }
    }
  }
  BambiCall::handleMediaSessionActivated(this);
}

void sub_1BF15BE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BambiConferenceCallStateMachine::~BambiConferenceCallStateMachine(BambiConferenceCallStateMachine *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E78E3880;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  SipSimpleStateMachine<BambiConferenceCallState>::~SipSimpleStateMachine((uint64_t)this);
}

{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E78E3880;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  SipSimpleStateMachine<BambiConferenceCallState>::~SipSimpleStateMachine((uint64_t)this);
  JUMPOUT(0x1C3B87100);
}

void SipSimpleStateMachine<BambiConferenceCallState>::handleStateTransition(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)(a1 + 72);
      if (v9)
      {
        if (*a2)
          v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
        else
          v10 = 0;
        v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 48))(*a3);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, v10, v11);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1BF15C028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiConferenceCall::~BambiConferenceCall(BambiConferenceCall *this)
{
  BambiConferenceCall::~BambiConferenceCall(this);
  JUMPOUT(0x1C3B87100);
}

{
  std::__shared_weak_count *v2;
  void **v3;
  void **v4;
  void *v5;
  void **v6;

  *(_QWORD *)this = &off_1E78E3628;
  *((_QWORD *)this + 9) = &unk_1E78E36F8;
  *((_QWORD *)this + 227) = &unk_1E78E3758;
  *((_QWORD *)this + 228) = &unk_1E78E3788;
  *((_QWORD *)this + 229) = &unk_1E78E37B0;
  if (*((char *)this + 2023) < 0)
    operator delete(*((void **)this + 250));
  *((_QWORD *)this + 236) = &off_1E78E3880;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 248);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  SipSimpleStateMachine<BambiConferenceCallState>::~SipSimpleStateMachine((uint64_t)this + 1888);
  v6 = (void **)((char *)this + 1864);
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v3 = (void **)*((_QWORD *)this + 230);
  if (v3)
  {
    v4 = (void **)*((_QWORD *)this + 231);
    v5 = (void *)*((_QWORD *)this + 230);
    if (v4 != v3)
    {
      do
      {
        v4 -= 54;
        std::pair<SipUri,std::string>::~pair(v4);
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 230);
    }
    *((_QWORD *)this + 231) = v3;
    operator delete(v5);
  }
  BambiCall::~BambiCall(this, (uint64_t *)off_1E78E37E8);
}

uint64_t BambiConferenceCall::isConferenceCall(BambiConferenceCall *this)
{
  return 1;
}

uint64_t BambiConferenceCall::canJoinConference(BambiConferenceCall *this)
{
  return 0;
}

void `non-virtual thunk to'BambiConferenceCall::~BambiConferenceCall(BambiConferenceCall *this)
{
  BambiConferenceCall::~BambiConferenceCall((BambiConferenceCall *)((char *)this - 72));
}

{
  BambiConferenceCall::~BambiConferenceCall((BambiConferenceCall *)((char *)this - 72));
  JUMPOUT(0x1C3B87100);
}

{
  BambiConferenceCall::~BambiConferenceCall((BambiConferenceCall *)((char *)this - 1816));
}

{
  BambiConferenceCall::~BambiConferenceCall((BambiConferenceCall *)((char *)this - 1816));
  JUMPOUT(0x1C3B87100);
}

{
  BambiConferenceCall::~BambiConferenceCall((BambiConferenceCall *)((char *)this - 1824));
}

{
  BambiConferenceCall::~BambiConferenceCall((BambiConferenceCall *)((char *)this - 1824));
  JUMPOUT(0x1C3B87100);
}

{
  BambiConferenceCall::~BambiConferenceCall((BambiConferenceCall *)((char *)this - 1832));
}

{
  BambiConferenceCall::~BambiConferenceCall((BambiConferenceCall *)((char *)this - 1832));
  JUMPOUT(0x1C3B87100);
}

void SipSimpleStateMachine<BambiConferenceCallState>::~SipSimpleStateMachine(uint64_t a1)
{
  SipSimpleStateMachine<BambiConferenceCallState>::~SipSimpleStateMachine(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipSimpleStateMachine<BambiConferenceCallState>::~SipSimpleStateMachine(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t i;
  void *v5;

  *(_QWORD *)a1 = &off_1E78E3A98;
  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *(_QWORD *)a1 = off_1E78E3AF0;
  if (*(_QWORD *)(a1 + 40))
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>>>::__deallocate_node(*(_QWORD **)(a1 + 32));
    *(_QWORD *)(a1 + 32) = 0;
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 40) = 0;
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 56);
  std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>>>::__deallocate_node(*(_QWORD **)(a1 + 32));
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

uint64_t std::__split_buffer<std::pair<SipUri,std::string>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 432;
    std::pair<SipUri,std::string>::~pair((void **)(i - 432));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__shared_ptr_emplace<BambiConferenceCallWaitingForHoldState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E3B48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiConferenceCallWaitingForHoldState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E3B48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<BambiConferenceCallWaitingForHoldState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<BambiConferenceCallSessionRequestedState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E3B98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiConferenceCallSessionRequestedState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E3B98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<BambiConferenceCallSessionRequestedState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<BambiConferenceCallSessionConfirmedState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E3BE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiConferenceCallSessionConfirmedState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E3BE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<BambiConferenceCallSessionConfirmedState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<BambiConferenceCallWaitToResumeConfirmedSessionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E3C38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiConferenceCallWaitToResumeConfirmedSessionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E3C38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<BambiConferenceCallWaitToResumeConfirmedSessionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<BambiConferenceCallSessionTerminatedState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E3C88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiConferenceCallSessionTerminatedState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E3C88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<BambiConferenceCallSessionTerminatedState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<BambiConferenceCall,std::allocator<BambiConferenceCall>,std::shared_ptr<SipStack> &,std::shared_ptr<RTPManager> &,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x808uLL);
  std::__shared_ptr_emplace<BambiConferenceCall>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipStack> &,std::shared_ptr<RTPManager> &,std::allocator<BambiConferenceCall>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a3, v6 + 25, (uint64_t)(v6 + 3));
}

void sub_1BF15C514(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<BambiConferenceCall>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipStack> &,std::shared_ptr<RTPManager> &,std::allocator<BambiConferenceCall>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78E3CD8;
  std::construct_at[abi:ne180100]<BambiConferenceCall,std::shared_ptr<SipStack> &,std::shared_ptr<RTPManager> &,BambiConferenceCall*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1BF15C55C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BambiConferenceCall>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E3CD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiConferenceCall>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E3CD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<BambiConferenceCall>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::construct_at[abi:ne180100]<BambiConferenceCall,std::shared_ptr<SipStack> &,std::shared_ptr<RTPManager> &,BambiConferenceCall*>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  v5 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  v27 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = *a3;
  v9 = (std::__shared_weak_count *)a3[1];
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)a1 = &off_1E78B7B60;
  v30 = v5;
  v31 = v4;
  if (v4)
  {
    v12 = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v28 = v8;
  v29 = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  BambiCall::BambiCall(a1, (uint64_t *)off_1E78E37E8, &v30, &v28, 0);
  v16 = v29;
  if (v29)
  {
    v17 = (unint64_t *)&v29->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v31;
  if (v31)
  {
    v20 = (unint64_t *)&v31->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  *(_QWORD *)a1 = &off_1E78E3628;
  *(_QWORD *)(a1 + 72) = &unk_1E78E36F8;
  *(_QWORD *)(a1 + 1816) = &unk_1E78E3758;
  *(_QWORD *)(a1 + 1824) = &unk_1E78E3788;
  *(_QWORD *)(a1 + 1832) = &unk_1E78E37B0;
  *(_QWORD *)(a1 + 1928) = 0;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_DWORD *)(a1 + 1936) = 1065353216;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_QWORD *)(a1 + 1888) = &off_1E78E3880;
  *(_QWORD *)(a1 + 2024) = 0;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  if (v9)
  {
    v22 = (unint64_t *)&v9->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v27)
  {
    v24 = (unint64_t *)&v27->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  return a1;
}

void sub_1BF15C7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_4()
{
  uint64_t i;

  for (i = 0; i != -144; i -= 24)
  {
    if (*((char *)&stateNames + i + 143) < 0)
      operator delete(*(void **)((char *)&stateNames + i + 120));
  }
}

uint64_t _GLOBAL__sub_I_BambiConferenceCall_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(stateNames, "Unknown");
  std::string::basic_string[abi:ne180100]<0>(&stateNames[3], "WaitingForHold");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED70E4B8, "SessionRequested");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED70E4D0, "SessionConfirmed");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED70E4E8, "WaitToResumeConfirmedSession");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED70E500, "SessionTerminated");
  return __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_4, 0, &dword_1BEDF4000);
}

void sub_1BF15C914(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  while (1)
  {
    if (*(char *)(v2 - 1) < 0)
      operator delete(*(void **)(v2 - 24));
    v2 -= 24;
    if (v2 == v1)
      _Unwind_Resume(exception_object);
  }
}

uint64_t SipSubscription::SipSubscription(uint64_t a1, uint64_t *a2, const std::string *a3)
{
  char *v6;
  uint64_t v7;
  std::string __p;

  *(_QWORD *)(a1 + 104) = &off_1E78B7B60;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.sub");
  ImsLogContainer::ImsLogContainer(a1, &__p, (const std::string *)(*a2 + 112));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 116) = 1;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 128;
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)a1 = &off_1E78E3D30;
  *(_QWORD *)(a1 + 104) = &unk_1E78E3DD8;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 224) = 256;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 256));
  v6 = (char *)(a1 + 416);
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 + 232), a2);
  std::string::operator=((std::string *)(a1 + 448), a3);
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.sub");
  v7 = *a2;
  std::string::operator=((std::string *)(a1 + 304), &__p);
  std::string::operator=((std::string *)(a1 + 328), (const std::string *)(v7 + 112));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 360) = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  *(_BYTE *)(a1 + 440) = 1;
  if (*(char *)(a1 + 439) < 0)
  {
    *(_QWORD *)(a1 + 424) = 7;
    v6 = *(char **)(a1 + 416);
  }
  else
  {
    *(_BYTE *)(a1 + 439) = 7;
  }
  strcpy(v6, "unknown");
  *(_WORD *)(a1 + 472) = 0;
  *(_BYTE *)(a1 + 474) = 0;
  return a1;
}

void sub_1BF15CB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  SipLockable *v16;
  uint64_t v17;
  uint64_t v18;
  SipTimerContainer *v19;
  void **v20;
  uint64_t v21;
  void **v22;
  std::__shared_weak_count *v24;

  if (*(char *)(v15 + 471) < 0)
    operator delete(*v20);
  if (*(char *)(v15 + 439) < 0)
    operator delete(*v22);
  SipTimerContainer::~SipTimerContainer(v19);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v18);
  *(_QWORD *)(v15 + 192) = v21;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v17, *(_QWORD **)(v15 + 208));
  v24 = *(std::__shared_weak_count **)(v15 + 184);
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
  SipLockable::~SipLockable(v16, (uint64_t *)off_1E78E3E18);
  ImsLogContainer::~ImsLogContainer((void **)v15);
  _Unwind_Resume(a1);
}

void SipSubscription::initializeEventPackage(std::string *this, SipEventPackage *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const SipParameterMap *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  this[10].__r_.__value_.__l.__size_ = (std::string::size_type)a2;
  if (a2)
  {
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v12, &this[7].__r_.__value_.__l.__size_);
    v4 = v12;
    v5 = v13;
    if (v13)
    {
      p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 2) = v4;
    *((_QWORD *)a2 + 3) = v5;
    if (v8)
    {
      std::__shared_weak_count::__release_weak(v8);
      v5 = v13;
    }
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v11 = *(const SipParameterMap **)(this[10].__r_.__value_.__l.__size_ + 8);
    if (v11)
      SipParameterMap::addParameters(this + 8, v11);
  }
  this[19].__r_.__value_.__s.__data_[19] = 1;
}

void SipSubscription::create(uint64_t *a1@<X0>, SipEventPackage *a2@<X1>, const std::string *a3@<X2>, std::string **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  std::allocate_shared[abi:ne180100]<SipSubscription,std::allocator<SipSubscription>,std::shared_ptr<SipDialog> &,std::string const&,void>(a1, a3, a4);
  SipSubscription::initializeEventPackage(*a4, a2);
}

void sub_1BF15CCD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipSubscription::~SipSubscription(SipSubscription *this)
{
  SipLockable *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  _QWORD v22[2];
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  *(_QWORD *)this = &off_1E78E3D30;
  *((_QWORD *)this + 13) = &unk_1E78E3DD8;
  v2 = (SipSubscription *)((char *)this + 104);
  v3 = ImsLogContainer::debugStream(this);
  (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"SipSubscription::deinitializeEventPackage()", 43);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (!*((_BYTE *)this + 475))
    goto LABEL_31;
  SipTimerContainer::cancelAllTimers((SipSubscription *)((char *)this + 256));
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 29);
  v7 = (char *)this + 416;
  v8 = *((unsigned __int8 *)this + 439);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *((_QWORD *)this + 53);
  if (v8 == 10)
  {
    if (v9 < 0)
      v7 = *(char **)v7;
    v15 = *(_QWORD *)v7;
    v16 = *((unsigned __int16 *)v7 + 4);
    if (v15 == 0x74616E696D726574 && v16 == 25701)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (v8 != 7)
    goto LABEL_23;
  if (v9 < 0)
    v7 = *(char **)v7;
  v10 = *(_DWORD *)v7;
  v11 = *(_DWORD *)(v7 + 3);
  if (v10 != 1852534389 || v11 != 1853321070)
  {
LABEL_23:
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 31) + 32))(*((_QWORD *)this + 31), 0);
    goto LABEL_24;
  }
  v13 = *((_QWORD *)this + 31);
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v22[0] = &off_1E78B7238;
  v22[1] = &_bambiDomain;
  v23 = 0x40000000;
  v14 = ImsResult::operator<<<char [28]>((uint64_t)v22, "destructed in unknown state");
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v13 + 40))(v13, v14, 0);
  ImsResult::~ImsResult((ImsResult *)v22);
LABEL_24:
  v18 = *((_QWORD *)this + 31);
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  *((_BYTE *)this + 475) = 0;
  if (v4)
  {
    v19 = (unint64_t *)&v4->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
LABEL_31:
  if (*((char *)this + 471) < 0)
    operator delete(*((void **)this + 56));
  if (*((char *)this + 439) < 0)
    operator delete(*((void **)this + 52));
  SipTimerContainer::~SipTimerContainer((SipSubscription *)((char *)this + 256));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  *((_QWORD *)this + 24) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 200, *((_QWORD **)this + 26));
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  SipLockable::~SipLockable(v2, (uint64_t *)off_1E78E3E18);
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  SipSubscription::~SipSubscription(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'SipSubscription::~SipSubscription(SipSubscription *this)
{
  SipSubscription::~SipSubscription((SipSubscription *)((char *)this - 104));
}

{
  SipSubscription::~SipSubscription((SipSubscription *)((char *)this - 104));
  JUMPOUT(0x1C3B87100);
}

void SipSubscription::loggableName(SipSubscription *this@<X0>, std::string *a2@<X8>)
{
  const std::string *v4;
  const std::string *v5;
  void *__p[2];
  char v7;
  std::string v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v9, 1);
  if (*((_QWORD *)this + 29))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v9 + 1), (uint64_t)"Subscription ", 13);
    BYTE1(v10) = 0;
    v4 = (const std::string *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 31) + 16))(*((_QWORD *)this + 31));
    LoggableString::LoggableString(&v8, v4);
    (*(void (**)(__int128 *, std::string *))(v9 + 40))(&v9, &v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v9 + 1), (uint64_t)" ", 1);
    BYTE1(v10) = 0;
    (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 29) + 56))(__p);
    (*(void (**)(__int128 *, void **))(v9 + 40))(&v9, __p);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v9 + 1), (uint64_t)"Subscription ", 13);
    BYTE1(v10) = 0;
    v5 = (const std::string *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 31) + 16))(*((_QWORD *)this + 31));
    LoggableString::LoggableString(&v8, v5);
    (*(void (**)(__int128 *, std::string *))(v9 + 40))(&v9, &v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v9 + 1), (uint64_t)" ???", 4);
    BYTE1(v10) = 0;
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v10 + 1) + 8, &v8);
  LoggableString::LoggableString(a2, &v8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  *(_QWORD *)&v9 = &off_1E78D7A10;
  if ((_BYTE)v10)
  {
    if (*((_QWORD *)&v9 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v9 + 1) + 8))(*((_QWORD *)&v9 + 1));
  }
}

void sub_1BF15D194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a23)
  {
    if (a22)
      (*(void (**)(uint64_t))(*(_QWORD *)a22 + 8))(a22);
  }
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'SipSubscription::loggableName(SipSubscription *this@<X0>, std::string *a2@<X8>)
{
  SipSubscription::loggableName((SipSubscription *)((char *)this - 104), a2);
}

void SipSubscription::logPrefix(SipSubscription *this, ImsOutStream *a2)
{
  void *__p[2];
  char v4;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 112))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
  *((_BYTE *)a2 + 17) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1BF15D288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipSubscription::handleTerminate(SipSubscription *this, const SipResponse *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  std::string::size_type v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  _QWORD *v16;
  const char *v17;
  uint64_t v18;
  std::string::size_type size;
  std::string *v20;
  int data;
  int v22;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  _BYTE v33[72];
  _QWORD v34[3];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  std::string v38;

  v6 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"SipSubscription::handleTerminate", 32);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  v7 = (char *)this + 416;
  v8 = *((unsigned __int8 *)this + 439);
  v9 = (char)v8;
  v10 = *((_QWORD *)this + 53);
  if ((v8 & 0x80u) != 0)
    v8 = *((_QWORD *)this + 53);
  if (v8 == 10)
  {
    v11 = *(char **)v7;
    if (v9 >= 0)
      v11 = (char *)this + 416;
    v12 = *(_QWORD *)v11;
    v13 = *((unsigned __int16 *)v11 + 4);
    if (v12 == 0x74616E696D726574 && v13 == 25701)
    {
      v15 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v15);
      v16 = *(_QWORD **)(v15 + 8);
      v17 = "handleTerminate called when we're already terminated";
      v18 = 52;
LABEL_18:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
      *(_BYTE *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v15 + 17) = 0;
      return;
    }
  }
  if (*((_BYTE *)this + 473))
  {
    if (v9 < 0)
    {
      *((_QWORD *)this + 53) = 18;
      v7 = (char *)*((_QWORD *)this + 52);
    }
    else
    {
      *((_BYTE *)this + 439) = 18;
    }
    strcpy(v7, "terminationPending");
    v15 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v15);
    v16 = *(_QWORD **)(v15 + 8);
    v17 = "delaying termination until NOTIFY handler completes";
    v18 = 51;
    goto LABEL_18;
  }
  memset(&v38, 0, sizeof(v38));
  if (v9 < 0)
  {
    std::string::__init_copy_ctor_external(&v38, *((const std::string::value_type **)this + 52), v10);
    if (*((char *)this + 439) < 0)
    {
      *((_QWORD *)this + 53) = 10;
      v7 = (char *)*((_QWORD *)this + 52);
      goto LABEL_21;
    }
  }
  else
  {
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)v7;
    v38.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 54);
  }
  *((_BYTE *)this + 439) = 10;
LABEL_21:
  strcpy(v7, "terminated");
  SipTimerContainer::cancelAllTimers((SipSubscription *)((char *)this + 256));
  size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v38.__r_.__value_.__l.__size_;
  if (size != 7)
    goto LABEL_30;
  v20 = &v38;
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v20 = (std::string *)v38.__r_.__value_.__r.__words[0];
  data = (int)v20->__r_.__value_.__l.__data_;
  v22 = *(_DWORD *)((char *)v20->__r_.__value_.__r.__words + 3);
  if (data == 1852534389 && v22 == 1853321070)
  {
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34[0] = &off_1E78B7238;
    v34[1] = &_bambiDomain;
    v34[2] = 0x40000000;
    if (a2)
    {
      v29 = (unsigned int *)SipMessage::header<SipRetryAfterHeader>((uint64_t)a2);
      if (v29)
        v30 = v29[26];
      else
        v30 = 0;
      SipResultDomain::makeResult(a2, (uint64_t)v33);
      ImsResult::operator=((uint64_t)v34, (uint64_t)v33);
      ImsResult::~ImsResult((ImsResult *)v33);
    }
    else
    {
      v30 = 0;
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 31) + 40))(*((_QWORD *)this + 31), v34, v30);
    ImsResult::~ImsResult((ImsResult *)v34);
  }
  else
  {
LABEL_30:
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 31) + 32))(*((_QWORD *)this + 31), a3);
  }
  v24 = (_QWORD *)*((_QWORD *)this + 29);
  if (v24)
  {
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v31, (_QWORD *)this + 22);
    SipDialog::subscriptionTerminated(v24, &v31);
    v25 = v32;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  else
  {
    v28 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"no dialog to notify of our termination", 38);
    *(_BYTE *)(v28 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v28 + 17) = 0;
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
}

void sub_1BF15D698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  ImsResult::~ImsResult((ImsResult *)va);
  ImsResult::~ImsResult((ImsResult *)va1);
  if (*(char *)(v3 - 41) < 0)
    operator delete(*(void **)(v3 - 64));
  _Unwind_Resume(a1);
}

void SipSubscription::updateResubscribeTimer(SipSubscription *this, unsigned int a2, int a3)
{
  time_t v6;
  time_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  tm *v16;
  uint64_t v17;
  tm *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  std::string __p;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = time(0);
  v7 = v6 + a2;
  if (v7 == *((_QWORD *)this + 50) && a3 == 0)
    return;
  *((_QWORD *)this + 50) = v7;
  if (a2)
  {
    if (a2 <= 0x4B0)
      v9 = a2 >> 1;
    else
      v9 = a2 - 600;
    *((_QWORD *)this + 51) = v6 + v9;
    v11 = *((_QWORD *)this + 22);
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
    if (v10)
    {
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v13 = __ldxr(p_shared_weak_owners);
      while (__stxr(v13 + 1, p_shared_weak_owners));
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
    }
    v15 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 32))(this);
    (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"subscription expires ", 21);
    *(_BYTE *)(v15 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(*((ims **)this + 50), v15, v16);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
    v17 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 32))(this);
    (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"will resubscribe ", 17);
    *(_BYTE *)(v17 + 17) = 0;
    ims::formatTimeAndIntervalFromNow(*((ims **)this + 51), v17, v18);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "SubscriptionRenewalTimer");
    if (v10)
    {
      v19 = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v33 = 0;
    v21 = operator new(0x20uLL);
    *v21 = &off_1E78E3F58;
    v21[1] = this;
    v21[2] = v11;
    v21[3] = v10;
    v33 = v21;
    SipTimerContainer::startTimer((_QWORD *)this + 32, (uint64_t)&__p, (uint64_t)v32, 1000 * v9, 1);
    v22 = v33;
    if (v33 == v32)
    {
      v23 = 4;
      v22 = v32;
    }
    else
    {
      if (!v33)
        goto LABEL_23;
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_23:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "SubscriptionExpirationTimer");
    if (v10)
    {
      v24 = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v31 = 0;
    v26 = operator new(0x20uLL);
    *v26 = &off_1E78E3F58;
    v26[1] = this;
    v26[2] = v11;
    v26[3] = v10;
    v31 = v26;
    SipTimerContainer::startTimer((_QWORD *)this + 32, (uint64_t)&__p, (uint64_t)v30, 1000 * a2, 1);
    v27 = v31;
    if (v31 == v30)
    {
      v28 = 4;
      v27 = v30;
    }
    else
    {
      if (!v31)
      {
LABEL_33:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v10)
        {
          std::__shared_weak_count::__release_weak(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        return;
      }
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
    goto LABEL_33;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "SubscriptionTimer");
  SipTimerContainer::cancelTimer((SipSubscription *)((char *)this + 256), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF15DA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipSubscription::handleSubscribeResponse(char *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  char *v7;
  std::string *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v13;
  unsigned int v14;

  v4 = (*(uint64_t (**)(char *))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"SipSubscription::handleSubscribeResponse", 40);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  v14 = 0;
  v5 = *(_DWORD *)(a2 + 88);
  if (v5 - 200 > 0x63)
  {
    if (v5 == 423)
    {
      v13 = 0;
      if (SipMessage::headerValueAsUint32(a2, "Min-Expires", &v13))
      {
        v8 = (std::string *)*((_QWORD *)a1 + 29);
        if (v8)
          SipDialog::resetIfNecessary(v8);
        v9 = (*(uint64_t (**)(char *))(*(_QWORD *)a1 + 64))(a1);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"retrying subscription using Min-Expires = ", 42);
        *(_BYTE *)(v9 + 17) = 0;
        v10 = v13;
        std::ostream::operator<<();
        *(_BYTE *)(v9 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v9 + 17) = 0;
        SipSubscription::subscribeWithExpiration((SipSubscription *)a1, v10);
      }
      else
      {
        v11 = (*(uint64_t (**)(char *))(*(_QWORD *)a1 + 64))(a1);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"couldn't get Min-Expires value from 423 response", 48);
        *(_BYTE *)(v11 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v11 + 17) = 0;
      }
    }
    else if (v5 >= 0x12C)
    {
      (*(void (**)(char *, uint64_t, BOOL))(*(_QWORD *)a1 + 80))(a1, a2, a1[472] == 0);
    }
  }
  else
  {
    SipMessage::headerValueAsUint32(a2, "Expires", &v14);
    v6 = v14;
    if (v14)
    {
      if (a1[439] < 0)
      {
        *((_QWORD *)a1 + 53) = 6;
        v7 = (char *)*((_QWORD *)a1 + 52);
      }
      else
      {
        v7 = a1 + 416;
        a1[439] = 6;
      }
      strcpy(v7, "active");
    }
    SipSubscription::updateResubscribeTimer((SipSubscription *)a1, v6, 0);
    (*(void (**)(_QWORD))(**((_QWORD **)a1 + 31) + 48))(*((_QWORD *)a1 + 31));
  }
  return 1;
}

BOOL SipSubscription::subscribeWithExpiration(SipSubscription *this, int a2)
{
  uint64_t v4;
  SipRequest *RequestInDialog;
  const void *v6;
  void *v7;
  SipHeader *v8;
  SipHeader *v9;
  char *v10;
  const std::string *v11;
  uint64_t *v12;
  uint64_t **v13;
  SipHeader *v14;
  uint64_t v15;
  _BOOL8 v16;
  void **v17;
  __int128 *v18;
  uint64_t **v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void *__p[2];
  char v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  __int128 *v29;
  __int128 *v30;
  uint64_t v31;

  v4 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"SipSubscription::subscribeWithExpiration", 40);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (!*((_QWORD *)this + 29))
  {
    v15 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"can't subscribe if we don't have a dialog", 41);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v16 = 0;
    *(_BYTE *)(v15 + 17) = 0;
    return v16;
  }
  SipTimerContainer::cancelAllTimers((SipSubscription *)((char *)this + 256));
  RequestInDialog = SipDialog::createRequestInDialog(*((_QWORD *)this + 29), (const std::string *)"SUBSCRIBE", 0);
  SipMessage::addHeader(RequestInDialog, (uint64_t)"Expires", a2, 0);
  v6 = (const void *)SipMessageEncodingMap::headerPrototypeWithName(*((_QWORD **)RequestInDialog + 10), (uint64_t)"Event");
  if (v6
  {
  }
  else
  {
    v10 = 0;
  }
  v11 = (const std::string *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 31) + 16))(*((_QWORD *)this + 31));
  std::string::operator=((std::string *)(v10 + 104), v11);
  SipParameterMap::addParameters((std::string *)(v10 + 64), (SipSubscription *)((char *)this + 192));
  if (*((char *)this + 471) < 0)
  {
    if (!*((_QWORD *)this + 57))
      goto LABEL_11;
    goto LABEL_10;
  }
  if (*((_BYTE *)this + 471))
  {
LABEL_10:
    v29 = (__int128 *)&kParameterId;
    v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v10 + 9, (void **)&kParameterId, (uint64_t)&std::piecewise_construct, &v29);
    std::string::operator=((std::string *)(v12 + 7), (const std::string *)((char *)this + 448));
  }
LABEL_11:
  v29 = 0;
  v30 = 0;
  v31 = 0;
  (*(void (**)(_QWORD, __int128 **))(**((_QWORD **)this + 31) + 64))(*((_QWORD *)this + 31), &v29);
  if (v29 != v30)
  {
    v13 = (uint64_t **)SipMessageEncodingMap::headerPrototypeWithName(*((_QWORD **)RequestInDialog + 10), (uint64_t)"Accept");
    if (v13)
    {
      if (v13)
      {
        v14 = (SipHeader *)((uint64_t (*)(uint64_t **))(*v13)[4])(v13);
        if (v14)
        {
          v13 = (uint64_t **)SipMessage::addHeader(RequestInDialog, v14, 0);
          if (v13)
        }
        else
        {
          v13 = 0;
        }
      }
    }
    v17 = (void **)v29;
    v18 = v30;
    if (v29 != v30)
    {
      v19 = v13 + 8;
      do
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v19, v17, (uint64_t)v17);
        v17 += 3;
      }
      while (v17 != (void **)v18);
    }
  }
  v20 = (_QWORD *)*((_QWORD *)this + 29);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  SipDialog::sendRequest(v20, RequestInDialog, (uint64_t)__p, &v27);
  v21 = v28;
  v16 = v27 != 0;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v26 < 0)
    operator delete(__p[0]);
  if (RequestInDialog)
    (*(void (**)(SipRequest *))(*(_QWORD *)RequestInDialog + 8))(RequestInDialog);
  __p[0] = &v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v16;
}

void sub_1BF15E0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a14 < 0)
    operator delete(__p);
  __p = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t SipSubscription::handleTransactionResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"SipSubscription::handleTransactionResponse", 42);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  v7 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a3 + 288) + 112))(*(_QWORD *)(*(_QWORD *)a3 + 288));
  v8 = v7[23];
  if ((v8 & 0x80u) == 0)
    v9 = v7[23];
  else
    v9 = *((_QWORD *)v7 + 1);
  if (v9 == 9)
  {
    if ((v8 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v7, "SUBSCRIBE", *((_QWORD *)v7 + 1)))
        goto LABEL_23;
    }
    else
    {
      if (!v7[23])
        goto LABEL_23;
      v10 = "SUBSCRIBE";
      while (*v7 == *(unsigned __int8 *)v10)
      {
        ++v7;
        ++v10;
        if (!--v8)
          goto LABEL_23;
      }
    }
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a3 + 288) + 112))(*(_QWORD *)(*(_QWORD *)a3 + 288));
  v12 = *(unsigned __int8 *)(result + 23);
  if ((v12 & 0x80u) == 0)
    v13 = *(unsigned __int8 *)(result + 23);
  else
    v13 = *(_QWORD *)(result + 8);
  if (v13 != 5)
    return result;
  if ((v12 & 0x80) != 0)
  {
    result = memcmp(*(const void **)result, "REFER", *(_QWORD *)(result + 8));
    if ((_DWORD)result)
      return result;
LABEL_23:
    v15 = *(uint64_t **)(a2 + 8);
    if (v15 == &SipResultDomain::_domain)
    {
      v17 = *(_QWORD *)(a1 + 232);
      if (v17 && (v18 = *(_QWORD *)(v17 + 208)) != 0 && *(_QWORD *)(v18 + 136))
      {
        v19 = operator new();
        v16 = v19;
        v20 = *(_DWORD *)(a2 + 16);
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 208);
        if (v21)
          v21 = *(_QWORD *)(v21 + 136);
        *(_QWORD *)(v19 + 56) = 0;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_DWORD *)(v19 + 64) = 1065353216;
        *(_QWORD *)(v19 + 72) = 0;
        *(_QWORD *)(v19 + 80) = v21 + 288;
        *(_QWORD *)v19 = off_1E78E40E8;
        *(_QWORD *)(v19 + 104) = 0;
        *(_QWORD *)(v19 + 112) = 0;
        *(_QWORD *)(v19 + 96) = 0;
        *(_DWORD *)(v19 + 88) = v20;
        v15 = *(uint64_t **)(a2 + 8);
      }
      else
      {
        v16 = 0;
        v15 = &SipResultDomain::_domain;
      }
    }
    else
    {
      v16 = 0;
    }
    if ((*(unsigned int (**)(uint64_t *, _QWORD))(*v15 + 24))(v15, *(unsigned int *)(a2 + 16)))
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, BOOL))(*(_QWORD *)a1 + 80))(a1, v16, *(_BYTE *)(a1 + 472) == 0);
      if (!v16)
        return result;
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 48))(*(_QWORD *)(a1 + 248));
      if (!v16)
        return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  if (!*(_BYTE *)(result + 23))
    goto LABEL_23;
  v14 = "REFER";
  while (*(unsigned __int8 *)result == *(unsigned __int8 *)v14)
  {
    ++result;
    ++v14;
    if (!--v12)
      goto LABEL_23;
  }
  return result;
}

uint64_t SipSubscription::terminateWithoutUnsubscribing(SipSubscription *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  BOOL v10;
  uint64_t result;
  uint64_t v12;

  v2 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"SipSubscription::terminateWithoutUnsubscribing", 46);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  v3 = *((unsigned __int8 *)this + 439);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *((_QWORD *)this + 53);
  if (v3 == 18
    && (v4 >= 0 ? (v5 = (char *)this + 416) : (v5 = (char *)*((_QWORD *)this + 52)),
        (v6 = *(_QWORD *)v5, v7 = *((_QWORD *)v5 + 1), v8 = *((unsigned __int16 *)v5 + 8), v6 == 0x74616E696D726574)
      ? (v9 = v7 == 0x69646E65506E6F69)
      : (v9 = 0),
        v9 ? (v10 = v8 == 26478) : (v10 = 0),
        v10))
  {
    v12 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"terminateWithoutUnsubscribing: termination is already pending", 61);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    result = 0;
    *(_BYTE *)(v12 + 17) = 0;
  }
  else
  {
    (*(void (**)(SipSubscription *, _QWORD, _QWORD))(*(_QWORD *)this + 80))(this, 0, 0);
    return 1;
  }
  return result;
}

BOOL SipSubscription::unsubscribe(SipSubscription *this)
{
  uint64_t v2;
  char **v3;
  uint64_t v4;
  int v5;
  char *v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v2 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"SipSubscription::unsubscribe", 28);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  v3 = (char **)((char *)this + 416);
  v4 = *((unsigned __int8 *)this + 439);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)this + 53);
  if (v4 == 18)
  {
    if (v5 >= 0)
      v11 = (char *)this + 416;
    else
      v11 = *v3;
    v12 = *(_QWORD *)v11;
    v13 = *((_QWORD *)v11 + 1);
    v8 = *((unsigned __int16 *)v11 + 8);
    v9 = v12 == 0x74616E696D726574 && v13 == 0x69646E65506E6F69;
    v10 = 26478;
  }
  else
  {
    if (v4 != 10)
      goto LABEL_20;
    if (v5 >= 0)
      v6 = (char *)this + 416;
    else
      v6 = *v3;
    v7 = *(_QWORD *)v6;
    v8 = *((unsigned __int16 *)v6 + 4);
    v9 = v7 == 0x74616E696D726574;
    v10 = 25701;
  }
  if (v9 && v8 == v10)
  {
    v18 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"unsubscribe: already in state ", 30);
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v18 + 32))(v18, (char *)this + 416);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v18 + 17) = 0;
    return 1;
  }
LABEL_20:
  if (!*((_BYTE *)this + 472))
  {
    *((_BYTE *)this + 472) = 1;
    v16 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"canceling subscription", 22);
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    return SipSubscription::subscribeWithExpiration(this, 0);
  }
  v15 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"unsubscribe already in progress", 31);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
  return 1;
}

uint64_t SipSubscription::handleNotification(SipSubscription *this, const SipRequest *a2, SipResponse *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v13;
  int v14;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  tm *v21;
  uint64_t v22;
  int v23;
  SipSubscription *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t v30;
  std::string __p;

  v6 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"SipSubscription::handleNotification", 35);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  v7 = (char *)SipMessage::header<SipSubscriptionStateHeader>((uint64_t)a2);
  if (v7)
  {
    v8 = v7;
    memset(&__p, 0, sizeof(__p));
    if (v7[127] < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v7 + 13), *((_QWORD *)v7 + 14));
    else
      __p = *(std::string *)(v7 + 104);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (size != 10)
      goto LABEL_17;
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v13 = p_p->__r_.__value_.__r.__words[0];
    v14 = LOWORD(p_p->__r_.__value_.__r.__words[1]);
    if (v13 == 0x74616E696D726574 && v14 == 25701)
    {
      if (*((char *)this + 439) < 0)
      {
        *((_QWORD *)this + 53) = 18;
        v17 = (char *)*((_QWORD *)this + 52);
      }
      else
      {
        v17 = (char *)this + 416;
        *((_BYTE *)this + 439) = 18;
      }
      strcpy(v17, "terminationPending");
      v18 = *(_QWORD *)this;
      if (*((_BYTE *)this + 472))
      {
        v19 = (*(uint64_t (**)(SipSubscription *))(v18 + 64))(this);
        (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"unsubscribe completed", 21);
        *(_BYTE *)(v19 + 17) = 0;
        v20 = (_BYTE *)(v19 + 17);
      }
      else
      {
        v19 = (*(uint64_t (**)(SipSubscription *))(v18 + 32))(this);
        (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"subscription terminated by network.  Expected expiration was ", 61);
        *(_BYTE *)(v19 + 17) = 0;
        v20 = (_BYTE *)(v19 + 17);
        ims::formatTimeAndIntervalFromNow(*((ims **)this + 50), v19, v21);
      }
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *v20 = 0;
    }
    else
    {
LABEL_17:
      std::string::operator=((std::string *)((char *)this + 416), &__p);
      if (v8 + 80 != (char *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v8 + 72), (void **)"expires"))
      {
        v16 = SipParameterMap::uintParameter((uint64_t)(v8 + 64), (void **)"expires", 0);
        SipSubscription::updateResubscribeTimer(this, v16, 0);
      }
    }
    *((_BYTE *)this + 473) = 1;
    v10 = (*(uint64_t (**)(_QWORD, const SipRequest *, SipResponse *))(**((_QWORD **)this + 31) + 24))(*((_QWORD *)this + 31), a2, a3);
    *((_BYTE *)this + 473) = 0;
    v22 = *((unsigned __int8 *)this + 439);
    v23 = (char)v22;
    if ((v22 & 0x80u) != 0)
      v22 = *((_QWORD *)this + 53);
    if (v22 == 18)
    {
      v24 = v23 >= 0 ? (SipSubscription *)((char *)this + 416) : (SipSubscription *)*((_QWORD *)this + 52);
      v25 = *(_QWORD *)v24;
      v26 = *((_QWORD *)v24 + 1);
      v27 = *((unsigned __int16 *)v24 + 8);
      v28 = v25 == 0x74616E696D726574 && v26 == 0x69646E65506E6F69;
      if (v28 && v27 == 26478)
      {
        v30 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 64))(this);
        (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"done with NOTIFY, moving from ", 30);
        *(_BYTE *)(v30 + 17) = 0;
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v30 + 32))(v30, (char *)this + 416);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)" to ", 4);
        *(_BYTE *)(v30 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"terminated", 10);
        *(_BYTE *)(v30 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v30 + 17) = 0;
        (*(void (**)(SipSubscription *, _QWORD, BOOL))(*(_QWORD *)this + 80))(this, 0, *((_BYTE *)this + 472) == 0);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v9 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 48))(this);
    (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"NOTIFY request has no Subscription-State header", 47);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "Missing Subscription-State header");
    *((_DWORD *)a3 + 22) = 400;
    std::string::operator=((std::string *)a3 + 4, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  return v10;
}

void sub_1BF15EBE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipSubscription::scheduleTermination(SipSubscription *this, unsigned int a2, char a3)
{
  time_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  tm *v12;
  const char *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  void *__p[2];
  char v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 474) = a3;
  v5 = time(0);
  *((_QWORD *)this + 50) = v5;
  v7 = *((_QWORD *)this + 22);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  v11 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 32))(this);
  (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"subscription terminates at ", 27);
  *(_BYTE *)(v11 + 17) = 0;
  ims::formatTimeAndIntervalFromNow((ims *)(v5 + a2), v11, v12);
  if (*((_BYTE *)this + 474))
    v13 = " silently";
  else
    v13 = "";
  if (*((_BYTE *)this + 474))
    v14 = 9;
  else
    v14 = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)v13, v14);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "DelayedTerminationTimer");
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v23 = 0;
  v17 = operator new(0x20uLL);
  *v17 = &off_1E78E3FD8;
  v17[1] = this;
  v17[2] = v7;
  v17[3] = v6;
  v23 = v17;
  SipTimerContainer::startTimer((_QWORD *)this + 32, (uint64_t)__p, (uint64_t)v22, a2, 1);
  v18 = v23;
  if (v23 == v22)
  {
    v19 = 4;
    v18 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_19;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_19:
  if (v21 < 0)
    operator delete(__p[0]);
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1BF15EE00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  std::__shared_weak_count *v18;
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a18;
  if (a18 == v19)
  {
    v22 = 4;
    v21 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  if (a14 < 0)
    operator delete(__p);
  if (v18)
  {
    std::__shared_weak_count::__release_weak(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(exception_object);
}

SipSubscription *SipSubscription::handleTimer(SipSubscription *this, uint64_t a2)
{
  SipSubscription *v2;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v27;
  uint64_t v28;

  v2 = this;
  v3 = *(unsigned __int8 *)(a2 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  switch(v3)
  {
    case 23:
      if (v4 >= 0)
        v13 = (uint64_t *)a2;
      else
        v13 = *(uint64_t **)a2;
      v14 = *v13;
      v15 = v13[1];
      v16 = *(uint64_t *)((char *)v13 + 15);
      if (v14 == 0x54646579616C6544 && v15 == 0x6974616E696D7265 && v16 == 0x72656D69546E6F69)
      {
        if (*((_BYTE *)this + 474))
        {
          return (SipSubscription *)SipSubscription::terminateWithoutUnsubscribing(this);
        }
        else
        {
          v28 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 64))(this);
          (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v28);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"ending subscription", 19);
          *(_BYTE *)(v28 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v28 + 17) = 0;
          return (SipSubscription *)SipSubscription::unsubscribe(v2);
        }
      }
      break;
    case 27:
      if (v4 >= 0)
        v19 = (uint64_t *)a2;
      else
        v19 = *(uint64_t **)a2;
      v20 = *v19;
      v21 = v19[1];
      v22 = v19[2];
      v23 = *(uint64_t *)((char *)v19 + 19);
      if (v20 == 0x7069726373627553
        && v21 == 0x697078456E6F6974
        && v22 == 0x69546E6F69746172
        && v23 == 0x72656D69546E6F69)
      {
        v27 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 64))(this);
        (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"subscription expired", 20);
        *(_BYTE *)(v27 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v27 + 17) = 0;
        return (SipSubscription *)(*(uint64_t (**)(SipSubscription *, _QWORD, uint64_t))(*(_QWORD *)v2 + 80))(v2, 0, 1);
      }
      break;
    case 24:
      if (v4 >= 0)
        v5 = (uint64_t *)a2;
      else
        v5 = *(uint64_t **)a2;
      v6 = *v5;
      v7 = v5[1];
      v8 = v5[2];
      if (v6 == 0x7069726373627553 && v7 == 0x656E65526E6F6974 && v8 == 0x72656D69546C6177)
      {
        if (*((_BYTE *)this + 440))
        {
          v11 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 64))(this);
          (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"renewing subscription", 21);
          *(_BYTE *)(v11 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v11 + 17) = 0;
          v12 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v2 + 31) + 56))(*((_QWORD **)v2 + 31));
          return (SipSubscription *)SipSubscription::subscribeWithExpiration(v2, v12);
        }
      }
      break;
  }
  return this;
}

void SipSubscription::checkTimers(SipSubscription *this)
{
  SipTimerContainer *v2;
  uint64_t v3;
  time_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  tm *v9;
  int v10;
  std::string __p;

  v2 = (SipSubscription *)((char *)this + 256);
  std::string::basic_string[abi:ne180100]<0>(&__p, "SubscriptionExpirationTimer");
  SipTimerContainer::cancelTimer(v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "SubscriptionRenewalTimer");
  SipTimerContainer::cancelTimer(v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*((_QWORD *)this + 50))
  {
    v3 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"checkTimers: no expiration time", 31);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
  }
  v4 = time(0);
  if (v4 >= *((_QWORD *)this + 50))
  {
    v7 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 48))(this);
    (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"oops, missed my expiration time", 31);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(SipSubscription *, _QWORD, uint64_t))(*(_QWORD *)this + 80))(this, 0, 1);
  }
  else
  {
    v5 = v4;
    if (*((_BYTE *)this + 440) && v4 >= *((_QWORD *)this + 51) - 10)
    {
      v8 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"I'm supposed to renew at ", 25);
      *(_BYTE *)(v8 + 17) = 0;
      ims::formatTimeAndIntervalFromNow(*((ims **)this + 51), v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)". Doing it now.", 15);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 31) + 56))(*((_QWORD *)this + 31));
      SipSubscription::subscribeWithExpiration(this, v10);
    }
    else
    {
      v6 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"restarting expiration timer", 27);
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v6 + 17) = 0;
      SipSubscription::updateResubscribeTimer(this, *((_DWORD *)this + 100) - v5, 1);
    }
  }
}

void sub_1BF15F408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ImsOutStream *SipSubscription::printSubscriptionInfo(SipSubscription *this, ImsOutStream *a2, int a3)
{
  const std::string *v6;
  _QWORD *v7;
  tm *v8;
  const char *v9;
  uint64_t v10;
  const void *v11;
  _BYTE *v12;
  _BYTE *v13;
  const char *v14;
  uint64_t v15;
  std::string __p;

  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Event:      ", 16);
  *((_BYTE *)a2 + 17) = 0;
  v6 = (const std::string *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 31) + 16))(*((_QWORD *)this + 31));
  LoggableString::LoggableString(&__p, v6);
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*((char *)this + 471) < 0)
  {
    if (!*((_QWORD *)this + 57))
      goto LABEL_8;
  }
  else if (!*((_BYTE *)this + 471))
  {
    goto LABEL_8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Id:         ", 16);
  *((_BYTE *)a2 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 448));
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!a3)
      goto LABEL_15;
    goto LABEL_9;
  }
LABEL_8:
  if (!a3)
    goto LABEL_15;
LABEL_9:
  v7 = (_QWORD *)*((_QWORD *)a2 + 1);
  if (*((_QWORD *)this + 29))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"    CallId:     ", 16);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(uint64_t, ImsOutStream *))(*(_QWORD *)(*((_QWORD *)this + 29) + 1504) + 16))(*((_QWORD *)this + 29) + 1504, a2);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"    CallId:     ???", 19);
    *((_BYTE *)a2 + 17) = 0;
  }
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
LABEL_15:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    State:      ", 16);
  *((_BYTE *)a2 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 416));
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Expiration: ", 16);
  *((_BYTE *)a2 + 17) = 0;
  ims::formatTimeAndIntervalFromNow(*((ims **)this + 50), (uint64_t)a2, v8);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    AutoRenew:  ", 16);
  *((_BYTE *)a2 + 17) = 0;
  if (*((_BYTE *)this + 440))
    v9 = "on";
  else
    v9 = "off";
  if (*((_BYTE *)this + 440))
    v10 = 2;
  else
    v10 = 3;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)v9, v10);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  v11 = (const void *)*((_QWORD *)this + 31);
  if (v11)
  {
    if (v12)
    {
      v13 = v12;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    RCS group:  ", 16);
      *((_BYTE *)a2 + 17) = 0;
      if (v13[48])
        v14 = "yes";
      else
        v14 = "no";
      if (v13[48])
        v15 = 3;
      else
        v15 = 2;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)v14, v15);
      *((_BYTE *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((_BYTE *)a2 + 17) = 0;
    }
  }
  return a2;
}

void sub_1BF15F780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipSubscription::determineIncomingMessageCategory(SipSubscription *this, const SipRequest *a2, unint64_t a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  const char *v13;
  uint64_t v14;

  v6 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"SipSubscription::determineIncomingMessageCategory - ", 52);
  *(_BYTE *)(v6 + 17) = 0;
  if (a3)
    v7 = "Response";
  else
    v7 = "Request";
  if (a3)
    v8 = 8;
  else
    v8 = 7;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)v7, v8);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (a3 | (unint64_t)SipMessage::header<SipSubscriptionStateHeader>((uint64_t)a2))
  {
    v9 = *((_QWORD *)this + 31);
    if (v9)
      return (*(uint64_t (**)(uint64_t, const SipRequest *))(*(_QWORD *)v9 + 72))(v9, a2);
    v11 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v11);
    v12 = *(_QWORD **)(v11 + 8);
    v13 = "We don't have an associated event package";
    v14 = 41;
  }
  else
  {
    v11 = (*(uint64_t (**)(SipSubscription *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipSubscription *, uint64_t))(*(_QWORD *)this + 16))(this, v11);
    v12 = *(_QWORD **)(v11 + 8);
    v13 = "Request has no Subscription-State header";
    v14 = 40;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  return 0;
}

void std::allocate_shared[abi:ne180100]<SipSubscription,std::allocator<SipSubscription>,std::shared_ptr<SipDialog> &,std::string const&,void>(uint64_t *a1@<X1>, const std::string *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x1F8uLL);
  std::__shared_ptr_emplace<SipSubscription>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipDialog> &,std::string const&,std::allocator<SipSubscription>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a3, v6 + 25, (uint64_t)(v6 + 3));
}

void sub_1BF15F978(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<SipSubscription>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipDialog> &,std::string const&,std::allocator<SipSubscription>,0>(_QWORD *a1, uint64_t *a2, const std::string *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78E3F08;
  std::construct_at[abi:ne180100]<SipSubscription,std::shared_ptr<SipDialog> &,std::string const&,SipSubscription*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1BF15F9C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipSubscription>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E3F08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSubscription>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E3F08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipSubscription>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::construct_at[abi:ne180100]<SipSubscription,std::shared_ptr<SipDialog> &,std::string const&,SipSubscription*>(uint64_t a1, uint64_t *a2, const std::string *a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v4 = a2[1];
  v11 = *a2;
  v12 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  SipSubscription::SipSubscription(a1, &v11, a3);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_1BF15FAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78E3F58;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78E3F58;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78E3F58;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78E3F58;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 104))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF15FCA8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::updateResubscribeTimer(unsigned int,BOOL)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78E3FD8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78E3FD8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78E3FD8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78E3FD8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 104))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF15FF10(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0,std::allocator<SipSubscription::scheduleTermination(unsigned int,BOOL)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *SipReferEventPackage::SipReferEventPackage(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;

  a1[2] = 0;
  a1[3] = 0;
  *a1 = &off_1E78E4058;
  a1[1] = 0;
  a1[5] = 0;
  a1[6] = 0;
  v5 = *a2;
  v6 = a2[1];
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = (std::__shared_weak_count *)a1[6];
    a1[5] = v5;
    a1[6] = v6;
    if (v9)
      std::__shared_weak_count::__release_weak(v9);
  }
  else
  {
    a1[6] = 0;
    a1[5] = v5;
  }
  v10 = operator new();
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 28) = 0u;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = a3;
  a1[4] = v10;
  return a1;
}

void sub_1BF160040(_Unwind_Exception *a1)
{
  SipEventPackage *v1;
  std::__shared_weak_count **v2;

  if (*v2)
    std::__shared_weak_count::__release_weak(*v2);
  SipEventPackage::~SipEventPackage(v1);
  _Unwind_Resume(a1);
}

void SipReferEventPackage::~SipReferEventPackage(SipReferEventPackage *this)
{
  SipMessageDecoder *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78E4058;
  v2 = (SipMessageDecoder *)*((_QWORD *)this + 4);
  if (v2)
  {
    SipMessageDecoder::~SipMessageDecoder(v2);
    MEMORY[0x1C3B87100]();
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  SipEventPackage::~SipEventPackage(this);
}

{
  SipReferEventPackage::~SipReferEventPackage(this);
  JUMPOUT(0x1C3B87100);
}

void *SipReferEventPackage::decodeSipFragmentFromNotify(SipReferEventPackage *this, const SipRequest *a2, SipMessageEncodingMap *a3)
{
  const void *v3;
  char *v5;
  __int128 v6;
  void *v7;
  BOOL v8;
  std::string::pointer v9;
  BOOL v10;
  _OWORD v12[3];
  uint64_t v13;
  const SipRequest *v14;
  std::string::pointer v15;
  std::string __str;

  v3 = (const void *)*((_QWORD *)this + 9);
  if (!v3)
    return 0;
  if (!v5)
    return 0;
  memset(&__str, 0, sizeof(__str));
  if (v5[31] < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v5 + 1), *((_QWORD *)v5 + 2));
  }
  else
  {
    v6 = *(_OWORD *)(v5 + 8);
    __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 3);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v6;
  }
  ims::chomp(&__str, "\r\n\t ", 3);
  std::string::append(&__str, "\n", 1uLL);
  v15 = 0;
  memset(v12, 0, sizeof(v12));
  v13 = 0;
  v14 = a2;
  v8 = SipMessageDecoder::decodeSipfrag((uint64_t)v12, (const std::string::value_type *)&__str, &v15);
  v9 = v15;
  if (v15)
    v10 = v8;
  else
    v10 = 0;
  if (v10)
  {
    if (!v7)
      (*(void (**)(std::string::pointer))(*(_QWORD *)v9 + 8))(v9);
  }
  else
  {
    v7 = 0;
  }
  SipMessageDecoder::~SipMessageDecoder((SipMessageDecoder *)v12);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1BF160218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  SipMessageDecoder::~SipMessageDecoder((SipMessageDecoder *)&a9);
  if (*(char *)(v9 - 25) < 0)
    operator delete(*(void **)(v9 - 48));
  _Unwind_Resume(a1);
}

uint64_t SipReferEventPackage::handleNotification(SipReferEventPackage *this, const SipRequest *a2, SipResponse *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  uint64_t v7;
  const void *v8;
  char *v9;
  __int128 *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  _BOOL4 v16;
  std::string::pointer v17;
  _BOOL4 v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v22;
  void *v23[2];
  char v24;
  std::string::pointer v25;
  void *__p[2];
  char v27;
  std::string __str;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v29 = 0;
  v30 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v4)
  {
    v6 = std::__shared_weak_count::lock(v4);
    v30 = v6;
    if (v6)
    {
      v7 = *((_QWORD *)this + 5);
      v29 = v7;
      if (v7)
      {
        v8 = (const void *)*((_QWORD *)a2 + 9);
        if (v8
        {
          v25 = 0;
          memset(&__str, 0, sizeof(__str));
          v10 = (__int128 *)(v9 + 8);
          if (v9[31] < 0)
          {
            std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v9 + 1), *((_QWORD *)v9 + 2));
          }
          else
          {
            v11 = *v10;
            __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 3);
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v11;
          }
          ims::chomp(&__str, "\r\n\t ", 3);
          std::string::append(&__str, "\n", 1uLL);
          v16 = SipMessageDecoder::decodeSipfrag(*((_QWORD *)this + 4), (const std::string::value_type *)&__str, &v25);
          v17 = v25;
          if (v25)
            v18 = v16;
          else
            v18 = 0;
          if (v18)
          {
            (*(void (**)(uint64_t, std::string::pointer))(*(_QWORD *)v7 + 24))(v7, v25);
            (*(void (**)(std::string::pointer))(*(_QWORD *)v17 + 8))(v17);
LABEL_27:
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
LABEL_29:
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v20 = __ldaxr(p_shared_owners);
            while (__stlxr(v20 - 1, p_shared_owners));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
            return 1;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "sip.refer");
          std::string::basic_string[abi:ne180100]<0>(v23, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v22 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v23);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"SipReferEventPackage: unable to decode message from sipfrag: ", 61);
          *(_BYTE *)(v22 + 17) = 0;
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v22 + 32))(v22, v10);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v22 + 17) = 0;
          if (v24 < 0)
            operator delete(v23[0]);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__str, "sip.refer");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v13 = ImsLogger::debug(ims::_logger, (uint64_t)&__str, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Ignoring refer notification of type ", 36);
          *(_BYTE *)(v13 + 17) = 0;
          v14 = *((_QWORD *)a2 + 9);
          if (v14)
            v15 = (__int128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
          else
            v15 = &SipBody::kGenericContentType;
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v13 + 32))(v13, v15);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v13 + 17) = 0;
        }
        if (v27 < 0)
          operator delete(__p[0]);
        goto LABEL_27;
      }
    }
  }
  else
  {
    v6 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "sip.refer");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v12 = ImsLogger::debug(ims::_logger, (uint64_t)&__str, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"SipReferEventPackage: no delegate to handle notification", 56);
  *(_BYTE *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v12 + 17) = 0;
  if (v27 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v6)
    goto LABEL_29;
  return 1;
}

void sub_1BF1605C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v28 - 48);
  _Unwind_Resume(a1);
}

uint64_t SipReferEventPackage::desiredExpirationInterval(SipReferEventPackage *this)
{
  return 0;
}

void SipReferEventPackage::acceptedContentTypes(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  void *__p[2];
  std::string::size_type v16;
  std::__split_buffer<std::string> __v;

  std::string::basic_string[abi:ne180100]<0>(__p, "message/sipfrag");
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= v3)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *(_QWORD *)a2) >> 3);
    v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *(_QWORD *)a2) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    if (v9)
      v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v9);
    else
      v10 = 0;
    v11 = v10 + v6;
    __v.__first_ = v10;
    __v.__begin_ = v11;
    __v.__end_cap_.__value_ = &v10[v9];
    v12 = *(_OWORD *)__p;
    v11->__r_.__value_.__r.__words[2] = v16;
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
    __p[1] = 0;
    v16 = 0;
    __p[0] = 0;
    __v.__end_ = v11 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
    v13 = *(_QWORD *)(a2 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v14 = SHIBYTE(v16);
    *(_QWORD *)(a2 + 8) = v13;
    if (v14 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v5 = *(_OWORD *)__p;
    *(_QWORD *)(v4 + 16) = v16;
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(a2 + 8) = v4 + 24;
  }
}

void sub_1BF160780(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a15);
  if (a14 < 0)
    operator delete(__pa);
  _Unwind_Resume(__p);
}

void SipReferEventPackage::handleSubscriptionFailed(SipReferEventPackage *this, ImsResult *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = *((_QWORD *)this + 5);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF16083C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipReferEventPackage::handleSubscriptionTerminated(SipReferEventPackage *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *((_QWORD *)this + 5);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF1608E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipReferEventPackage::handleSubscriptionSuccess(SipReferEventPackage *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *((_QWORD *)this + 5);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF160984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipReferEventPackage::determineIncomingMessageCategory(SipReferEventPackage *this, const SipRequest *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (!v3)
    return 0;
  v4 = std::__shared_weak_count::lock(v3);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = *((_QWORD *)this + 5);
  if (v6)
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  else
    v7 = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v7;
}

void sub_1BF160A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const char *SipReferEventPackage::name(SipReferEventPackage *this)
{
  return "refer";
}

void ImsNetworkReachabilityMonitor::~ImsNetworkReachabilityMonitor(CFTypeRef *this)
{
  ImsNetworkReachabilityMonitor::stopMonitoring(this);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 3));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
}

void ImsNetworkReachabilityMonitor::stopMonitoring(CFTypeRef *this)
{
  const __SCNetworkReachability *v2;

  v2 = (const __SCNetworkReachability *)*this;
  if (v2)
  {
    SCNetworkReachabilitySetDispatchQueue(v2, 0);
    CFRelease(*this);
    *this = 0;
  }
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100](this + 3);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100](this + 1);
}

void ImsNetworkReachabilityMonitor::setDelegate(const __SCNetworkReachability **this, ImsNetworkReachabilityDelegate *a2)
{
  const __SCNetworkReachability *v4;
  const __SCNetworkReachability *v5;
  NSObject *v6;

  v4 = *this;
  if (*this)
  {
    v5 = this[6];
    if (a2)
    {
      if (!v5)
      {
        v6 = sImsDispatchQueue;
        if (!sImsDispatchQueue)
        {
          v6 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
          sImsDispatchQueue = (uint64_t)v6;
        }
        goto LABEL_8;
      }
    }
    else if (v5)
    {
      v6 = 0;
LABEL_8:
      SCNetworkReachabilitySetDispatchQueue(v4, v6);
    }
  }
  this[6] = a2;
  ImsNetworkReachabilityMonitor::updateInfo(this);
}

void ImsNetworkReachabilityMonitor::updateInfo(const __SCNetworkReachability **this)
{
  const __SCNetworkReachability *v2;
  SCNetworkReachabilityFlags flags;

  flags = 0;
  v2 = *this;
  if (v2)
  {
    if (SCNetworkReachabilityGetFlags(v2, &flags))
      ImsNetworkReachabilityMonitor::reachabilityChanged((ImsNetworkReachabilityMonitor *)this, flags);
  }
}

const __SCNetworkReachability *ImsNetworkReachabilityMonitor::getReachability(_QWORD *a1, _QWORD *a2)
{
  const sockaddr *v3;
  const sockaddr *v4;
  const __SCNetworkReachability *result;
  const __SCNetworkReachability *v6;
  int v7;
  SCNetworkReachabilityFlags flags;

  v3 = (const sockaddr *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 72))(*a1);
  v4 = (const sockaddr *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2);
  result = SCNetworkReachabilityCreateWithAddressPair(0, v3, v4);
  if (result)
  {
    v6 = result;
    flags = 0;
    v7 = SCNetworkReachabilityGetFlags(result, &flags);
    CFRelease(v6);
    if (v7)
      return (const __SCNetworkReachability *)((flags >> 1) & 1);
    else
      return 0;
  }
  return result;
}

BOOL ImsNetworkReachabilityMonitor::_startMonitoring(ImsNetworkReachabilityMonitor *this)
{
  const __SCNetworkReachability *v1;
  const __SCNetworkReachability *v3;
  NSObject *v4;
  SCNetworkReachabilityContext v6;

  *((_DWORD *)this + 10) = 0;
  v1 = *(const __SCNetworkReachability **)this;
  if (*(_QWORD *)this)
  {
    v6.version = 0;
    memset(&v6.retain, 0, 24);
    v6.info = this;
    SCNetworkReachabilitySetCallback(v1, (SCNetworkReachabilityCallBack)ImsNetworkReachabilityMonitor::callback, &v6);
    if (*((_QWORD *)this + 6))
    {
      v3 = *(const __SCNetworkReachability **)this;
      v4 = sImsDispatchQueue;
      if (!sImsDispatchQueue)
      {
        v4 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
        sImsDispatchQueue = (uint64_t)v4;
      }
      SCNetworkReachabilitySetDispatchQueue(v3, v4);
      ImsNetworkReachabilityMonitor::updateInfo((const __SCNetworkReachability **)this);
    }
  }
  return v1 != 0;
}

SCNetworkReachabilityRef ImsNetworkReachabilityMonitor::startMonitoring(CFTypeRef *a1, _QWORD *a2, _QWORD *a3)
{
  const sockaddr *v6;
  const sockaddr *v7;
  SCNetworkReachabilityRef result;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;

  ImsNetworkReachabilityMonitor::stopMonitoring(a1);
  v6 = (const sockaddr *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2);
  v7 = (const sockaddr *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
  result = SCNetworkReachabilityCreateWithAddressPair(0, v6, v7);
  *a1 = result;
  if (result)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a2 + 32))(&v15);
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)(a1 + 1), &v15);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a3 + 32))(&v15);
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)(a1 + 3), &v15);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    return (SCNetworkReachabilityRef)ImsNetworkReachabilityMonitor::_startMonitoring((ImsNetworkReachabilityMonitor *)a1);
  }
  return result;
}

void ImsNetworkReachabilityMonitor::callback(ImsNetworkReachabilityMonitor *this, const __SCNetworkReachability *a2, ImsNetworkReachabilityMonitor *a3, void *a4)
{
  if (a3)
    ImsNetworkReachabilityMonitor::reachabilityChanged(a3, (int)a2);
}

void ImsNetworkReachabilityMonitor::reachabilityChanged(ImsNetworkReachabilityMonitor *this, int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *__p[2];
  char v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;

  std::string::basic_string[abi:ne180100]<0>(v11, "net.reach");
  std::string::basic_string[abi:ne180100]<0>(v9, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v11, (uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Reachability for ", 17);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" is (", 5);
  v5 = 0;
  *(_BYTE *)(v4 + 17) = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  if ((a2 & 1) != 0)
  {
    v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v17, (__int128 *)"transient");
    v18 = v5;
  }
  if ((a2 & 2) != 0)
  {
    if (v5 >= v19)
    {
      v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v17, (__int128 *)"reachable");
    }
    else
    {
      *(_OWORD *)v5 = *(_OWORD *)"reachable";
      *(_QWORD *)(v5 + 16) = 0x900000000000000;
      v5 += 24;
    }
    v18 = v5;
  }
  if ((a2 & 4) != 0)
  {
    if (v5 >= v19)
    {
      v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v17, (__int128 *)"connection required");
    }
    else
    {
      strcpy((char *)v5, "connection required");
      *(_DWORD *)(v5 + 20) = unk_1BF29783C;
      v5 += 24;
    }
    v18 = v5;
  }
  if ((a2 & 8) != 0)
  {
    if (v5 >= v19)
    {
      v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v17, (__int128 *)"on traffic");
    }
    else
    {
      *(_OWORD *)v5 = *(_OWORD *)"on traffic";
      *(_QWORD *)(v5 + 16) = 0xA00000000000000;
      v5 += 24;
    }
    v18 = v5;
  }
  if ((a2 & 0x10) != 0)
  {
    if (v5 >= v19)
    {
      v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v17, (__int128 *)"intervention required");
    }
    else
    {
      strcpy((char *)v5, "intervention required");
      *(_WORD *)(v5 + 22) = unk_1BF2978B6;
      v5 += 24;
    }
    v18 = v5;
  }
  if ((a2 & 0x20) != 0)
  {
    if (v5 >= v19)
    {
      v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v17, (__int128 *)"on demand");
    }
    else
    {
      *(_OWORD *)v5 = *(_OWORD *)"on demand";
      *(_QWORD *)(v5 + 16) = 0x900000000000000;
      v5 += 24;
    }
    v18 = v5;
  }
  if ((a2 & 0x10000) != 0)
  {
    if (v5 >= v19)
    {
      v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v17, (__int128 *)"local address");
    }
    else
    {
      *(_OWORD *)v5 = *(_OWORD *)"local address";
      *(_QWORD *)(v5 + 16) = 0xD00000000000000;
      v5 += 24;
    }
    v18 = v5;
  }
  if ((a2 & 0x20000) != 0)
  {
    if (v5 >= v19)
    {
      v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v17, (__int128 *)"is direct");
    }
    else
    {
      *(_OWORD *)v5 = *(_OWORD *)"is direct";
      *(_QWORD *)(v5 + 16) = 0x900000000000000;
      v5 += 24;
    }
    v18 = v5;
  }
  if ((a2 & 8) != 0)
  {
    if (v5 >= v19)
    {
      v6 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v17, (__int128 *)"automatic");
    }
    else
    {
      *(_OWORD *)v5 = *(_OWORD *)"automatic";
      *(_QWORD *)(v5 + 16) = 0x900000000000000;
      v6 = v5 + 24;
    }
    v18 = v6;
  }
  std::string::basic_string[abi:ne180100]<0>(v13, ",");
  ims::join<std::__wrap_iter<std::string const*>>((uint64_t)v17, v18, (uint64_t)v13, __p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 32))(v4, __p);
  if (v16 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  __p[0] = &v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)")", 1);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (*((_DWORD *)this + 10) != a2)
  {
    *((_DWORD *)this + 10) = a2;
    v7 = *((_QWORD *)this + 6);
    if (v7)
    {
      (*(void (**)(uint64_t, ImsNetworkReachabilityMonitor *, char *))(*(_QWORD *)v7 + 16))(v7, this, (char *)this + 40);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v17, "net.reach");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::debug(ims::_logger, (uint64_t)&v17, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"no delegate for reachability change", 35);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (v16 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v19) < 0)
        operator delete(v17);
    }
  }
}

void sub_1BF16127C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 33) < 0)
    operator delete(*(void **)(v33 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t std::map<unsigned int,std::string>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::destroy(*(char **)(a1 + 8));
  return a1;
}

uint64_t SipResponse::SipResponse(uint64_t a1, int a2, std::string *__str, uint64_t a4)
{
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a4;
  *(_QWORD *)a1 = off_1E78E40E8;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 88) = a2;
  std::string::operator=((std::string *)(a1 + 96), __str);
  return a1;
}

void sub_1BF1613C4(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[119] < 0)
    operator delete(*v2);
  SipMessage::~SipMessage((SipMessage *)v1);
  _Unwind_Resume(a1);
}

void SipResponse::SipResponse(SipResponse *this, int a2, const SipRequest *a3)
{
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = (_QWORD *)*((_QWORD *)a3 + 10);
  *((_QWORD *)this + 7) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 16) = 1065353216;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = v4;
  *(_QWORD *)this = off_1E78E40E8;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 22) = a2;
  if (v4)
  {
    SipMessageEncodingMap::copyHeadersFromRequestToResponse(v4, a3, this, 0);
    v5 = *((_QWORD *)this + 10);
    if (v5)
    {
      v6 = *(std::__shared_weak_count **)(v5 + 184);
      if (v6)
      {
        v7 = std::__shared_weak_count::lock(v6);
        if (v7)
        {
          v8 = v7;
          v9 = *(_QWORD *)(v5 + 176);
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (v11)
          {
            if (!v9)
              return;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v8);
            if (!v9)
              return;
          }
          SipMessageEncodingMap::initializeResponseFromTemplate(*((SipMessageEncodingMap **)this + 10), this);
        }
      }
    }
  }
}

void sub_1BF1614CC(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[119] < 0)
    operator delete(*v2);
  SipMessage::~SipMessage((SipMessage *)v1);
  _Unwind_Resume(a1);
}

void SipResponse::SipResponse(SipResponse *this, const std::string *a2)
{
  uint64_t v3;

  SipMessage::SipMessage(this, (const SipMessage *)a2);
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)v3 = off_1E78E40E8;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  *(_DWORD *)(v3 + 88) = a2[3].__r_.__value_.__r.__words[2];
  std::string::operator=((std::string *)(v3 + 96), a2 + 4);
}

void sub_1BF16154C(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[119] < 0)
    operator delete(*v2);
  SipMessage::~SipMessage((SipMessage *)v1);
  _Unwind_Resume(a1);
}

void SipResponse::encodeStartLine(const std::string *this, ImsOutStream *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  const std::string *v10;
  unsigned int v11;
  const std::string *v12;
  std::string __p;

  LoggableString::LoggableString((LoggableString *)&__p, "SIP/2.0 ");
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" ", 1);
  *((_BYTE *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(this[4].__r_.__value_.__r.__words[2]) < 0)
  {
    if (this[4].__r_.__value_.__l.__size_)
      goto LABEL_5;
  }
  else if (*((_BYTE *)&this[4].__r_.__value_.__s + 23))
  {
LABEL_5:
    LoggableString::LoggableString(&__p, this + 4);
    (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
    goto LABEL_22;
  }
  v4 = qword_1ED7042F8;
  if (qword_1ED7042F8)
  {
    v5 = this[3].__r_.__value_.__r.__words[2];
    v6 = &qword_1ED7042F8;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 >= v5;
      if (v7 >= v5)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (v8)
        v6 = (uint64_t *)v4;
      v4 = *v9;
    }
    while (*v9);
    v10 = (const std::string *)&ims::kEmptyString;
    if (v6 != &qword_1ED7042F8)
    {
      v11 = *((_DWORD *)v6 + 8);
      v12 = (const std::string *)(v6 + 5);
      if (v11 <= v5)
        v10 = v12;
    }
  }
  else
  {
    v10 = (const std::string *)&ims::kEmptyString;
  }
  LoggableString::LoggableString(&__p, v10);
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
LABEL_22:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF1616C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipResponse::debugStr@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _OWORD v5[5];
  void *__p[2];
  __int128 v7;
  __int128 v8;
  _OWORD v9[9];
  uint64_t v10;

  v10 = 0;
  v8 = 0u;
  memset(v9, 0, sizeof(v9));
  *(_OWORD *)__p = 0u;
  v7 = 0u;
  memset(v5, 0, sizeof(v5));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v5[1] + 8, a1);
  *(_QWORD *)&v5[0] = *MEMORY[0x1E0DE4F50];
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(*(_QWORD *)&v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v5[1] = v3;
  *((_QWORD *)&v5[1] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v7) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B8707C](v9);
}

void sub_1BF1617D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipResponse::longDebugStr@<X0>(SipResponse *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  __int128 *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[4];
  void *__p[2];
  __int128 v14;
  __int128 v15;
  _OWORD v16[9];
  uint64_t v17;

  v17 = 0;
  v15 = 0u;
  memset(v16, 0, sizeof(v16));
  *(_OWORD *)__p = 0u;
  v14 = 0u;
  memset(v12, 0, sizeof(v12));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  v4 = (_QWORD *)std::ostream::operator<<();
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"_", 1);
  v6 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)this);
  v7 = (__int128 *)(v6 + 64);
  if (!v6)
    v7 = &ims::kEmptyString;
  v8 = *((char *)v7 + 23);
  if (v8 >= 0)
    v9 = (uint64_t)v7;
  else
    v9 = *(_QWORD *)v7;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)v7 + 23);
  else
    v10 = *((_QWORD *)v7 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v9, v10);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12 + 8, a2);
  *(_QWORD *)&v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(*(_QWORD *)&v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v12[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v14) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v16);
}

void sub_1BF161918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *SipResponse::nextHop(SipResponse *this)
{
  _QWORD *result;
  uint64_t v2;

  result = SipMessage::firstHeaderWithType<SipViaHeader>((uint64_t)this);
  if (result)
  {
    v2 = result[8];
    if (v2 == result[9])
      return 0;
    else
      return *(_QWORD **)v2;
  }
  return result;
}

SipHeader *SipMessage::header<SipRSeqHeader>(SipMessage *a1, int a2)
{
  SipHeader *result;

  result = SipMessage::headerWithName(a1, (unsigned __int8 *)&SipHeader::kHeaderRSeq, a2);
  if (result)
  return result;
}

void SipResponse::associatedUris(SipResponse *this, SipRouteSet *a2)
{
  char *v3;

  v3 = (char *)SipMessage::header<SipPAssociatedUriHeader>((uint64_t)this);
  if (v3)
    SipRouteSet::addHops(a2, (const SipRouteSet *)(v3 + 64), 0, 0, 0);
}

void *SipMessage::header<SipPAssociatedUriHeader>(uint64_t a1)
{
  unsigned __int8 *v1;
  const void *v2;

  v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 32), "P-Associated-URI");
  if (v1 && (v2 = (const void *)*((_QWORD *)v1 + 5)) != 0)
  else
    return 0;
}

BOOL SipResponse::requiresPrack(SipResponse *this)
{
  _BOOL8 v2;
  void *__p[2];
  char v5;

  if ((*((_DWORD *)this + 22) - 101) > 0x62)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "100rel");
  v2 = SipMessage::requiresOption((uint64_t)this, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1BF161A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipResponse::setStatusFromImsResult(SipResponse *this, const ImsResult *a2)
{
  uint64_t *v3;
  int v4;
  std::string __str;

  v3 = (uint64_t *)*((_QWORD *)a2 + 1);
  if (v3 == &SipResultDomain::_domain)
  {
    *((_DWORD *)this + 22) = *((_DWORD *)a2 + 4);
    ImsResult::description(a2, &__str);
    std::string::operator=((std::string *)this + 4, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  else
  {
    if (((*(uint64_t (**)(uint64_t *, _QWORD))(*v3 + 24))(v3, *((unsigned int *)a2 + 4)) & 1) != 0)
      v4 = 500;
    else
      v4 = 200;
    *((_DWORD *)this + 22) = v4;
  }
}

void sub_1BF161B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

SipResponse *SipResponse::clone(const std::string *this)
{
  SipResponse *v2;

  v2 = (SipResponse *)operator new();
  SipResponse::SipResponse(v2, this);
  return v2;
}

void sub_1BF161BF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10F3C409A54A9F4);
  _Unwind_Resume(a1);
}

uint64_t SipMessage::canUpdateOutboundViaHeader(SipMessage *this)
{
  return 0;
}

double SipMessage::updateInboundViaHeader@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_1E78B7238;
  *(_QWORD *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t SipMessage::needsDefaultRoute(SipMessage *this)
{
  return 0;
}

uint64_t _GLOBAL__sub_I_SipResponse_cpp()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  char *v12;
  std::string *v13;
  _DWORD *v14;
  const std::string::value_type **v15;
  uint64_t v16;
  _DWORD v18[2];
  _QWORD v19[3];
  int v20;
  _QWORD v21[3];
  int v22;
  _QWORD v23[3];
  int v24;
  _QWORD v25[3];
  int v26;
  _QWORD v27[3];
  int v28;
  _QWORD v29[3];
  int v30;
  _QWORD v31[3];
  int v32;
  _QWORD v33[3];
  int v34;
  _QWORD v35[3];
  int v36;
  _QWORD v37[3];
  int v38;
  _QWORD v39[3];
  int v40;
  _QWORD v41[3];
  int v42;
  _QWORD v43[3];
  int v44;
  _QWORD v45[3];
  int v46;
  _QWORD v47[3];
  int v48;
  _QWORD v49[3];
  int v50;
  _QWORD v51[3];
  int v52;
  _QWORD v53[3];
  int v54;
  _QWORD v55[3];
  int v56;
  _QWORD v57[3];
  int v58;
  _QWORD v59[3];
  int v60;
  _QWORD v61[3];
  int v62;
  _QWORD v63[3];
  int v64;
  _QWORD v65[3];
  int v66;
  _QWORD v67[3];
  int v68;
  _QWORD v69[3];
  int v70;
  _QWORD v71[3];
  int v72;
  _QWORD v73[3];
  int v74;
  _QWORD v75[3];
  int v76;
  _QWORD v77[3];
  int v78;
  _QWORD v79[3];
  int v80;
  _QWORD v81[3];
  int v82;
  _QWORD v83[3];
  int v84;
  _QWORD v85[3];
  int v86;
  _QWORD v87[3];
  int v88;
  _QWORD v89[3];
  int v90;
  _QWORD v91[3];
  int v92;
  _QWORD v93[3];
  int v94;
  _QWORD v95[3];
  int v96;
  _QWORD v97[3];
  int v98;
  _QWORD v99[3];
  int v100;
  _QWORD v101[3];
  int v102;
  _QWORD v103[3];
  int v104;
  _QWORD v105[3];
  int v106;
  _QWORD v107[3];
  int v108;
  _QWORD v109[3];
  int v110;
  _QWORD v111[3];
  int v112;
  _QWORD v113[3];
  int v114;
  _QWORD v115[3];
  int v116;
  _QWORD v117[3];
  int v118;
  _QWORD v119[3];
  int v120;
  _QWORD v121[3];
  int v122;
  _QWORD v123[3];
  int v124;
  _QWORD v125[3];
  int v126;
  _QWORD v127[3];
  int v128;
  _QWORD v129[5];

  v129[3] = *MEMORY[0x1E0C80C00];
  v18[0] = 100;
  std::string::basic_string[abi:ne180100]<0>(v19, "Trying");
  v20 = 180;
  std::string::basic_string[abi:ne180100]<0>(v21, "Ringing");
  v22 = 181;
  std::string::basic_string[abi:ne180100]<0>(v23, "Call Is Being Forwarded");
  v24 = 182;
  std::string::basic_string[abi:ne180100]<0>(v25, "Queued");
  v26 = 183;
  std::string::basic_string[abi:ne180100]<0>(v27, "Session Progress");
  v28 = 200;
  std::string::basic_string[abi:ne180100]<0>(v29, "OK");
  v30 = 202;
  std::string::basic_string[abi:ne180100]<0>(v31, "Accepted");
  v32 = 300;
  std::string::basic_string[abi:ne180100]<0>(v33, "Multiple Choices");
  v34 = 301;
  std::string::basic_string[abi:ne180100]<0>(v35, "Moved Permanently");
  v36 = 302;
  std::string::basic_string[abi:ne180100]<0>(v37, "Moved Temporarily");
  v38 = 305;
  std::string::basic_string[abi:ne180100]<0>(v39, "Use Proxy");
  v40 = 380;
  std::string::basic_string[abi:ne180100]<0>(v41, "Alternative Service");
  v42 = 400;
  std::string::basic_string[abi:ne180100]<0>(v43, "Bad Request");
  v44 = 401;
  std::string::basic_string[abi:ne180100]<0>(v45, "Unauthorized");
  v46 = 402;
  std::string::basic_string[abi:ne180100]<0>(v47, "Payment Required");
  v48 = 403;
  std::string::basic_string[abi:ne180100]<0>(v49, "Forbidden");
  v50 = 404;
  std::string::basic_string[abi:ne180100]<0>(v51, "Not Found");
  v52 = 405;
  std::string::basic_string[abi:ne180100]<0>(v53, "Not Allowed");
  v54 = 406;
  std::string::basic_string[abi:ne180100]<0>(v55, "Not Acceptable");
  v56 = 407;
  std::string::basic_string[abi:ne180100]<0>(v57, "Authentication Required");
  v58 = 408;
  std::string::basic_string[abi:ne180100]<0>(v59, "Request Timeout");
  v60 = 410;
  std::string::basic_string[abi:ne180100]<0>(v61, "Gone");
  v62 = 413;
  std::string::basic_string[abi:ne180100]<0>(v63, "Request Entity Too Large");
  v64 = 414;
  std::string::basic_string[abi:ne180100]<0>(v65, "Request Uri Too Large");
  v66 = 415;
  std::string::basic_string[abi:ne180100]<0>(v67, "Unsupported Media Type");
  v68 = 416;
  std::string::basic_string[abi:ne180100]<0>(v69, "Unsupported Uri Scheme");
  v70 = 420;
  std::string::basic_string[abi:ne180100]<0>(v71, "Bad Extension");
  v72 = 421;
  std::string::basic_string[abi:ne180100]<0>(v73, "Extension Required");
  v74 = 422;
  std::string::basic_string[abi:ne180100]<0>(v75, "Session Interval Too Small");
  v76 = 423;
  std::string::basic_string[abi:ne180100]<0>(v77, "Interval Too Brief");
  v78 = 478;
  std::string::basic_string[abi:ne180100]<0>(v79, "Unresolveable Destination");
  v80 = 480;
  std::string::basic_string[abi:ne180100]<0>(v81, "Temporarily Unavailable");
  v82 = 481;
  std::string::basic_string[abi:ne180100]<0>(v83, "Transaction Does Not Exist");
  v84 = 482;
  std::string::basic_string[abi:ne180100]<0>(v85, "Loop Detected");
  v86 = 483;
  std::string::basic_string[abi:ne180100]<0>(v87, "Too Many Hops");
  v88 = 484;
  std::string::basic_string[abi:ne180100]<0>(v89, "Address Incomplete");
  v90 = 485;
  std::string::basic_string[abi:ne180100]<0>(v91, "Ambiguous");
  v92 = 486;
  std::string::basic_string[abi:ne180100]<0>(v93, "Busy Here");
  v94 = 487;
  std::string::basic_string[abi:ne180100]<0>(v95, "Request Terminated");
  v96 = 488;
  std::string::basic_string[abi:ne180100]<0>(v97, "Not Acceptable Here");
  v98 = 489;
  std::string::basic_string[abi:ne180100]<0>(v99, "Bad Event");
  v100 = 491;
  std::string::basic_string[abi:ne180100]<0>(v101, "Request Pending");
  v102 = 493;
  std::string::basic_string[abi:ne180100]<0>(v103, "Undecipherable");
  v104 = 500;
  std::string::basic_string[abi:ne180100]<0>(v105, "Server Internal Error");
  v106 = 501;
  std::string::basic_string[abi:ne180100]<0>(v107, "Not Implemented");
  v108 = 502;
  std::string::basic_string[abi:ne180100]<0>(v109, "Bad Gateway");
  v110 = 503;
  std::string::basic_string[abi:ne180100]<0>(v111, "Service Unavailable");
  v112 = 504;
  std::string::basic_string[abi:ne180100]<0>(v113, "Server Timeout");
  v114 = 505;
  std::string::basic_string[abi:ne180100]<0>(v115, "SIP Version Not Supported");
  v116 = 513;
  std::string::basic_string[abi:ne180100]<0>(v117, "Message Too Large");
  v118 = 580;
  std::string::basic_string[abi:ne180100]<0>(v119, "Precondition Failure");
  v120 = 600;
  std::string::basic_string[abi:ne180100]<0>(v121, "Busy Everywhere");
  v122 = 603;
  std::string::basic_string[abi:ne180100]<0>(v123, "Decline");
  v124 = 604;
  std::string::basic_string[abi:ne180100]<0>(v125, "Does Not Exist Anywhere");
  v126 = 606;
  std::string::basic_string[abi:ne180100]<0>(v127, "Not Acceptable");
  v128 = 607;
  std::string::basic_string[abi:ne180100]<0>(v129, "Do not send to voicemail");
  v0 = 0;
  v1 = 0;
  qword_1ED7042F8 = 0;
  v2 = &qword_1ED7042F8;
  qword_1ED704300 = 0;
  _statusTextMap = (uint64_t)&qword_1ED7042F8;
  while (1)
  {
    v3 = &v18[8 * v1];
    v4 = *v3;
    if (v2 == &qword_1ED7042F8)
    {
      v6 = &qword_1ED7042F8;
LABEL_10:
      if (v0)
      {
        v9 = v6 + 1;
        if (v6[1])
          goto LABEL_28;
      }
      else
      {
LABEL_21:
        v9 = &qword_1ED7042F8;
        v6 = &qword_1ED7042F8;
      }
LABEL_22:
      v12 = (char *)operator new(0x40uLL);
      *((_DWORD *)v12 + 8) = v4;
      v13 = (std::string *)(v12 + 40);
      v14 = &v18[8 * v1];
      v15 = (const std::string::value_type **)(v14 + 2);
      if (*((char *)v3 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *v15, *((_QWORD *)v14 + 2));
      }
      else
      {
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)v15;
        *((_QWORD *)v12 + 7) = *((_QWORD *)v14 + 3);
      }
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = v6;
      *v9 = (uint64_t)v12;
      if (*(_QWORD *)_statusTextMap)
      {
        _statusTextMap = *(_QWORD *)_statusTextMap;
        v12 = (char *)*v9;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1ED7042F8, (uint64_t *)v12);
      ++qword_1ED704300;
      goto LABEL_28;
    }
    v5 = (uint64_t *)v0;
    if (v0)
    {
      do
      {
        v6 = v5;
        v5 = (uint64_t *)v5[1];
      }
      while (v5);
    }
    else
    {
      v7 = &qword_1ED7042F8;
      do
      {
        v6 = (uint64_t *)v7[2];
        v8 = *v6 == (_QWORD)v7;
        v7 = v6;
      }
      while (v8);
    }
    if (*((_DWORD *)v6 + 8) < v4)
      goto LABEL_10;
    if (!v0)
      goto LABEL_21;
    v10 = v0;
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t *)v10;
        v11 = *(_DWORD *)(v10 + 32);
        if (v11 <= v4)
          break;
        v10 = *v6;
        v9 = v6;
        if (!*v6)
          goto LABEL_22;
      }
      if (v11 >= v4)
        break;
      v10 = v6[1];
      if (!v10)
      {
        v9 = v6 + 1;
        goto LABEL_22;
      }
    }
LABEL_28:
    if (++v1 == 56)
      break;
    v2 = (uint64_t *)_statusTextMap;
    v0 = qword_1ED7042F8;
  }
  v16 = 448;
  do
  {
    if (SHIBYTE(v18[v16 - 1]) < 0)
      operator delete(*(void **)&v18[v16 - 6]);
    v16 -= 8;
  }
  while (v16 * 4);
  return __cxa_atexit((void (*)(void *))std::map<unsigned int,std::string>::~map[abi:ne180100], &_statusTextMap, &dword_1BEDF4000);
}

void sub_1BF1624FC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t SipAlternativeService::parseChild(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t *v4;
  int *v5;
  int v7;
  int v8;

  v2 = *((unsigned __int8 *)a2 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  if (v2 == 6)
  {
    if (v3 >= 0)
      v5 = (int *)a2;
    else
      v5 = (int *)*a2;
    if (*v5 == 1769235297 && *((_WORD *)v5 + 2) == 28271)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
    v7 = *v5;
    v8 = *((unsigned __int16 *)v5 + 2);
    if (v7 == 1935762802 && v8 == 28271)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  }
  else if (v2 == 4)
  {
    v4 = v3 >= 0 ? a2 : (uint64_t *)*a2;
    if (*(_DWORD *)v4 == 1701869940)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  }
  return result;
}

std::string *SipServiceInfo::setText(uint64_t a1, int a2, std::string *__str)
{
  return std::string::operator=((std::string *)(a1 + 8), __str);
}

uint64_t Sip3gppImsInfo::createChild(_QWORD *a1, uint64_t **a2)
{
  uint64_t *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;

  v3 = (uint64_t *)*((unsigned __int8 *)a2 + 23);
  v4 = (char)v3;
  if ((char)v3 < 0)
    v3 = a2[1];
  if (v3 == (uint64_t *)12)
  {
    if (v4 >= 0)
      v20 = (uint64_t *)a2;
    else
      v20 = *a2;
    v21 = *v20;
    v22 = *((_DWORD *)v20 + 2);
    if (v21 != 0x2D65636976726573 || v22 != 1868983913)
      return 0;
    v11 = operator new();
    *(_QWORD *)v11 = off_1E78E4280;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 24) = 0;
    v13 = (uint64_t *)a1[2];
    v24 = a1[3];
    if ((unint64_t)v13 >= v24)
    {
      v26 = a1[1];
      v27 = ((uint64_t)v13 - v26) >> 3;
      if (!((unint64_t)(v27 + 1) >> 61))
      {
        v28 = v24 - v26;
        v29 = v28 >> 2;
        if (v28 >> 2 <= (unint64_t)(v27 + 1))
          v29 = v27 + 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v29;
        if (v30)
          v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v30);
        else
          v31 = 0;
        v32 = (uint64_t *)(v30 + 8 * v27);
        v33 = v30 + 8 * v31;
        *v32 = v11;
        v25 = v32 + 1;
        v37 = (char *)a1[1];
        v34 = (char *)a1[2];
        if (v34 == v37)
          goto LABEL_51;
        do
        {
          v38 = *((_QWORD *)v34 - 1);
          v34 -= 8;
          *--v32 = v38;
        }
        while (v34 != v37);
        goto LABEL_50;
      }
LABEL_55:
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
LABEL_34:
    *v13 = v11;
    v25 = v13 + 1;
LABEL_53:
    a1[2] = v25;
    return v11;
  }
  if (v3 == (uint64_t *)19)
  {
    v5 = v4 >= 0 ? (uint64_t *)a2 : *a2;
    v6 = *v5;
    v7 = v5[1];
    v8 = *(uint64_t *)((char *)v5 + 11);
    v9 = v6 == 0x74616E7265746C61 && v7 == 0x767265732D657669;
    if (v9 && v8 == 0x656369767265732DLL)
    {
      v11 = operator new();
      *(_QWORD *)v11 = off_1E78E4208;
      *(_OWORD *)(v11 + 8) = 0u;
      *(_OWORD *)(v11 + 24) = 0u;
      *(_OWORD *)(v11 + 40) = 0u;
      *(_OWORD *)(v11 + 56) = 0u;
      *(_QWORD *)(v11 + 72) = 0;
      v13 = (uint64_t *)a1[2];
      v12 = a1[3];
      if ((unint64_t)v13 >= v12)
      {
        v14 = a1[1];
        v15 = ((uint64_t)v13 - v14) >> 3;
        if (!((unint64_t)(v15 + 1) >> 61))
        {
          v16 = v12 - v14;
          v17 = v16 >> 2;
          if (v16 >> 2 <= (unint64_t)(v15 + 1))
            v17 = v15 + 1;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v17;
          if (v18)
            v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v18);
          else
            v19 = 0;
          v32 = (uint64_t *)(v18 + 8 * v15);
          v33 = v18 + 8 * v19;
          *v32 = v11;
          v25 = v32 + 1;
          v35 = (char *)a1[1];
          v34 = (char *)a1[2];
          if (v34 == v35)
            goto LABEL_51;
          do
          {
            v36 = *((_QWORD *)v34 - 1);
            v34 -= 8;
            *--v32 = v36;
          }
          while (v34 != v35);
LABEL_50:
          v34 = (char *)a1[1];
LABEL_51:
          a1[1] = v32;
          a1[2] = v25;
          a1[3] = v33;
          if (v34)
            operator delete(v34);
          goto LABEL_53;
        }
        goto LABEL_55;
      }
      goto LABEL_34;
    }
  }
  return 0;
}

void Sip3gppImsInfo::Sip3gppImsInfo(Sip3gppImsInfo *this, const Sip3gppImsInfo *a2)
{
  char **v3;
  _QWORD *v4;
  _QWORD *i;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  *((_QWORD *)this + 1) = 0;
  v3 = (char **)((char *)this + 8);
  *(_QWORD *)this = &off_1E78E4180;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = (_QWORD *)*((_QWORD *)a2 + 1);
  for (i = (_QWORD *)*((_QWORD *)a2 + 2); v4 != i; ++v4)
  {
    v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 96))(*v4);
    v7 = v6;
    v9 = (uint64_t *)*((_QWORD *)this + 2);
    v8 = *((_QWORD *)this + 3);
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v3) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v3;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v14);
      else
        v15 = 0;
      v16 = (uint64_t *)(v14 + 8 * v11);
      *v16 = v7;
      v10 = v16 + 1;
      v18 = (char *)*((_QWORD *)this + 1);
      v17 = (char *)*((_QWORD *)this + 2);
      if (v17 != v18)
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v16 = v19;
        }
        while (v17 != v18);
        v17 = *v3;
      }
      *((_QWORD *)this + 1) = v16;
      *((_QWORD *)this + 2) = v10;
      *((_QWORD *)this + 3) = v14 + 8 * v15;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v9 = v6;
      v10 = v9 + 1;
    }
    *((_QWORD *)this + 2) = v10;
  }
}

void sub_1BF1629D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void Sip3gppImsInfo::~Sip3gppImsInfo(Sip3gppImsInfo *this)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_1E78E4180;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)*((_QWORD *)this + 1);
  }
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  Sip3gppImsInfo::~Sip3gppImsInfo(this);
  JUMPOUT(0x1C3B87100);
}

unsigned __int8 *Sip3gppImsInfo::alternativeServiceWithServiceType(uint64_t a1, unsigned __int8 **a2)
{
  const void **v2;
  const void **v3;
  char v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    v4 = *((_BYTE *)a2 + 23);
    if (v4 >= 0)
      v5 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    else
      v5 = a2[1];
    if (v4 >= 0)
      v6 = (unsigned __int8 *)a2;
    else
      v6 = *a2;
    do
    {
      if (*v2)
      {
        if (v7)
        {
          v8 = v7;
          v9 = v7[31];
          v10 = (v9 & 0x80u) == 0 ? (unsigned __int8 *)v7[31] : (unsigned __int8 *)*((_QWORD *)v7 + 2);
          if (v10 == v5)
          {
            if ((v9 & 0x80) != 0)
            {
              if (!memcmp(*((const void **)v7 + 1), v6, *((_QWORD *)v7 + 2)))
                return v8;
            }
            else
            {
              if (!v7[31])
                return v8;
              v11 = 0;
              while (v7[v11 + 8] == v6[v11])
              {
                if (v9 == ++v11)
                  return v8;
              }
            }
          }
        }
      }
      ++v2;
    }
    while (v2 != v3);
  }
  return 0;
}

void SipAlternativeService::~SipAlternativeService(void **this)
{
  *this = off_1E78E4208;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78E4208;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipAlternativeService::clone(SipAlternativeService *this)
{
  uint64_t v2;
  uint64_t v3;
  std::string *v4;

  v2 = operator new();
  v3 = v2;
  *(_QWORD *)v2 = off_1E78E4208;
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v2 + 8), *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)(v2 + 8) = *(_OWORD *)((char *)this + 8);
    *(_QWORD *)(v2 + 24) = *((_QWORD *)this + 3);
  }
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v3 + 32), *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)(v3 + 32) = *((_OWORD *)this + 2);
    *(_QWORD *)(v3 + 48) = *((_QWORD *)this + 6);
  }
  v4 = (std::string *)(v3 + 56);
  if (*((char *)this + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 7), *((_QWORD *)this + 8));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 56);
    *(_QWORD *)(v3 + 72) = *((_QWORD *)this + 9);
  }
  return v3;
}

void sub_1BF162D2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  MEMORY[0x1C3B87100](v1, 0x1093C406ED0B5F1);
  _Unwind_Resume(a1);
}

void SipServiceInfo::~SipServiceInfo(void **this)
{
  *this = off_1E78E4280;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78E4280;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

_QWORD *SipServiceInfo::clone(SipServiceInfo *this)
{
  _QWORD *v2;
  std::string *v3;

  v2 = (_QWORD *)operator new();
  *v2 = off_1E78E4280;
  v3 = (std::string *)(v2 + 1);
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    v2[3] = *((_QWORD *)this + 3);
  }
  return v2;
}

void sub_1BF162E78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1093C402D7449D9);
  _Unwind_Resume(a1);
}

uint64_t SipDialogFork::SipDialogFork(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::string __p;

  *(_QWORD *)a1 = &off_1E78B7B60;
  v4 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.dlg");
  ImsLogContainer::ImsLogContainer(v4, &__p, (const std::string *)(*a2 + 112));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)a1 = &off_1E78E4328;
  *(_QWORD *)(a1 + 8) = &unk_1E78E4388;
  *(_QWORD *)(a1 + 112) = &unk_1E78E43E8;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_DWORD *)(a1 + 180) = 1;
  *(_QWORD *)(a1 + 184) = &off_1E78BFCE8;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 192) = &off_1E78D08F8;
  *(_QWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_WORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_QWORD *)(a1 + 248) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 256) = a1 + 264;
  *(_BYTE *)(a1 + 281) = 1;
  *(_QWORD *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_QWORD *)(a1 + 512) = &off_1E78B82D8;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_QWORD *)(a1 + 520) = a1 + 528;
  *(_BYTE *)(a1 + 545) = 1;
  *(_QWORD *)(a1 + 552) = &off_1E78B82D8;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_QWORD *)(a1 + 560) = a1 + 568;
  *(_BYTE *)(a1 + 280) = 1;
  *(_BYTE *)(a1 + 544) = 1;
  *(_WORD *)(a1 + 584) = 257;
  *(_BYTE *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 592) = &off_1E78EC610;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_QWORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 688) = 0;
  *(_BYTE *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_QWORD *)(a1 + 672) = a1 + 680;
  *(_QWORD *)(a1 + 696) = 0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 704));
  *(_DWORD *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 852) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 856) = a1 + 864;
  v6 = *a2;
  v5 = a2[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(std::__shared_weak_count **)(a1 + 144);
  *(_QWORD *)(a1 + 136) = v6;
  *(_QWORD *)(a1 + 144) = v5;
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  *(_QWORD *)(a1 + 808) = a1;
  v10 = *a2;
  std::string::operator=((std::string *)(a1 + 752), (const std::string *)(a1 + 16));
  std::string::operator=((std::string *)(a1 + 776), (const std::string *)(v10 + 112));
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(*a2 + 1840);
  return a1;
}

void sub_1BF1630A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;
  uint64_t v16;
  SipUri *v17;
  SipRouteSet *v18;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;

  std::__tree<std::string>::destroy(v16 + 672, *(char **)(v16 + 680));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v16 + 656);
  SipRouteSet::~SipRouteSet(v18);
  SipUri::~SipUri(v17);
  if (*(char *)(v16 + 175) < 0)
    operator delete(*(void **)(v16 + 152));
  v20 = *(std::__shared_weak_count **)(v16 + 144);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  v21 = *(std::__shared_weak_count **)(v16 + 128);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  ImsLogContainer::~ImsLogContainer(v15);
  _Unwind_Resume(a1);
}

void SipDialogFork::initialize(SipDialogFork *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  __int128 v10;

  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v8, (_QWORD *)this + 15);
  std::allocate_shared[abi:ne180100]<SipOfferAnswer,std::allocator<SipOfferAnswer>,std::shared_ptr<SipDialogFork>,void>(&v8, &v10);
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 656, &v10);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BF1631FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SipDialogFork::create(_QWORD *a1@<X0>, SipDialogFork **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  std::allocate_shared[abi:ne180100]<SipDialogFork,std::allocator<SipDialogFork>,std::shared_ptr<SipDialog> &,void>(a1, a2);
  SipDialogFork::initialize(*a2);
}

void sub_1BF16324C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipDialogFork::~SipDialogFork(SipDialogFork *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78E4328;
  *((_QWORD *)this + 1) = &unk_1E78E4388;
  *((_QWORD *)this + 14) = &unk_1E78E43E8;
  std::__tree<std::__value_type<unsigned int,SipForkBearer>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SipForkBearer>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SipForkBearer>>>::destroy(*((_QWORD **)this + 108));
  SipTimerContainer::~SipTimerContainer((SipDialogFork *)((char *)this + 704));
  std::__tree<std::string>::destroy((uint64_t)this + 672, *((char **)this + 85));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 656);
  SipRouteSet::~SipRouteSet((SipDialogFork *)((char *)this + 592));
  SipUri::~SipUri((SipDialogFork *)((char *)this + 184));
  if (*((char *)this + 175) < 0)
    operator delete(*((void **)this + 19));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  *((_QWORD *)this + 1) = off_1E78CFE68;
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

{
  SipDialogFork::~SipDialogFork(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'SipDialogFork::~SipDialogFork(SipDialogFork *this)
{
  SipDialogFork::~SipDialogFork((SipDialogFork *)((char *)this - 8));
}

{
  SipDialogFork::~SipDialogFork((SipDialogFork *)((char *)this - 112));
}

{
  SipDialogFork::~SipDialogFork((SipDialogFork *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

{
  SipDialogFork::~SipDialogFork((SipDialogFork *)((char *)this - 112));
  JUMPOUT(0x1C3B87100);
}

double SipDialogFork::initializeMobileTerminated@<D0>(SipDialogFork *this@<X0>, const SipRequest *a2@<X1>, uint64_t a3@<X8>)
{
  SipUriHeader *v5;
  __int128 *v6;
  double result;

  v5 = (SipUriHeader *)SipMessage::header<SipFromHeader>((uint64_t)a2);
  if (v5)
    v6 = SipUriHeader::tag(v5);
  else
    v6 = &ims::kEmptyString;
  std::string::operator=((std::string *)((char *)this + 152), (const std::string *)v6);
  result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

void SipDialogFork::initializeMobileOriginated(uint64_t a1@<X0>, const SipMessage *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  SipUriHeader *v8;
  __int128 *v9;
  __int128 v10;
  std::string::size_type size;
  const ImsResult *v12;
  _BYTE v13[72];
  _QWORD v14[2];
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  std::string __str;

  v8 = (SipUriHeader *)SipMessage::header<SipToHeader>((uint64_t)a2);
  if (v8)
    v9 = SipUriHeader::tag(v8);
  else
    v9 = &ims::kEmptyString;
  memset(&__str, 0, sizeof(__str));
  if (*((char *)v9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v10 = *v9;
    __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v10;
  }
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size)
  {
    std::string::operator=((std::string *)(a1 + 152), &__str);
    SipDialogFork::updateRouteSet((SipDialogFork *)a1, a2, 1);
    SipDialogFork::handleTargetRefresh((SipDialogFork *)a1, a2);
    SipOfferAnswer::updateWithOutgoingMessage(*(SipOfferAnswer **)(a1 + 656), *(_QWORD *)(*(_QWORD *)a3 + 288), (std::string *)(*(_QWORD *)a3 + 320), (uint64_t)v13);
    ImsResult::~ImsResult((ImsResult *)v13);
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0;
  }
  else
  {
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v14[0] = &off_1E78B7238;
    v14[1] = &_bambiDomain;
    v15 = 1073741825;
    v12 = (const ImsResult *)ImsResult::operator<<<char [25]>((uint64_t)v14, "empty to tag in response");
    ImsResult::ImsResult((ImsResult *)a4, v12);
    ImsResult::~ImsResult((ImsResult *)v14);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BF163588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  ImsResult::~ImsResult((ImsResult *)va);
  if (*(char *)(v10 - 41) < 0)
    operator delete(*(void **)(v10 - 64));
  _Unwind_Resume(a1);
}

uint64_t SipDialogFork::handleTargetRefresh(SipDialogFork *this, const SipMessage *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v6;
  SipUri *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const char *v13;
  uint64_t v14;

  result = (uint64_t)SipMessage::header<SipContactHeader>((uint64_t)a2);
  if (result)
  {
    v4 = *(_QWORD *)(result + 72);
    if (v4 && v4 != *(_QWORD *)(result + 80))
    {
      v6 = v4 + 8;
      v7 = (SipDialogFork *)((char *)this + 184);
      result = SipUri::equals((SipUri *)(v4 + 8), (SipDialogFork *)((char *)this + 184), 1);
      if ((result & 1) == 0)
      {
        if (*((char *)this + 311) < 0)
          v8 = *((_QWORD *)this + 37);
        else
          v8 = *((unsigned __int8 *)this + 311);
        v10 = *((_QWORD *)this + 1);
        v9 = (char *)this + 8;
        v11 = (*(uint64_t (**)(char *))(v10 + 64))(v9);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v9 + 16))(v9, v11);
        v12 = *(_QWORD **)(v11 + 8);
        if (v8)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"updating remote contact from ", 29);
          *(_BYTE *)(v11 + 17) = 0;
          (*(void (**)(SipUri *, uint64_t))(*(_QWORD *)v7 + 40))(v7, v11);
          v12 = *(_QWORD **)(v11 + 8);
          v13 = " to ";
          v14 = 4;
        }
        else
        {
          v13 = "setting remote contact to ";
          v14 = 26;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
        *(_BYTE *)(v11 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 40))(v6, v11);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v11 + 17) = 0;
        return (uint64_t)SipUri::operator=(v7, v6);
      }
    }
  }
  return result;
}

void SipDialogFork::logPrefix(SipDialogFork *this, ImsOutStream *a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  void *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p[2];
  char v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *v20;
  std::__shared_weak_count *v21;
  char v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v23 = 0;
  v24 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v4)
  {
    v24 = std::__shared_weak_count::lock(v4);
    if (v24)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
      v23 = v5;
      if (v5)
      {
        SipDialog::stack(v5, &v20);
        v7 = v20;
        v6 = v21;
        if (!v21)
          goto LABEL_8;
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
          if (v7)
            goto LABEL_9;
        }
        else
        {
LABEL_8:
          if (v7)
          {
LABEL_9:
            SipDialog::stack(v23, &v18);
            (*(void (**)(void **__return_ptr))(*(_QWORD *)v18 + 104))(&v20);
            (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, &v20);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" [", 2);
            *((_BYTE *)a2 + 17) = 0;
            (*(void (**)(void **__return_ptr, SipDialogFork *))(*(_QWORD *)this + 24))(__p, this);
            (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"]: ", 3);
            *((_BYTE *)a2 + 17) = 0;
            if (v17 < 0)
              operator delete(__p[0]);
            if (v22 < 0)
              operator delete(v20);
            v10 = v19;
            if (v19)
            {
              v11 = (unint64_t *)&v19->__shared_owners_;
              do
                v12 = __ldaxr(v11);
              while (__stlxr(v12 - 1, v11));
              if (!v12)
              {
                ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                std::__shared_weak_count::__release_weak(v10);
              }
            }
            goto LABEL_21;
          }
        }
      }
    }
  }
  (*(void (**)(void **__return_ptr, SipDialogFork *))(*(_QWORD *)this + 24))(&v20, this);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, &v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
  *((_BYTE *)a2 + 17) = 0;
  if (v22 < 0)
    operator delete(v20);
LABEL_21:
  v13 = v24;
  if (v24)
  {
    v14 = (unint64_t *)&v24->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1BF163904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v22 - 48);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipDialogFork::logPrefix(SipDialogFork *this, ImsOutStream *a2)
{
  SipDialogFork::logPrefix((SipDialogFork *)((char *)this - 8), a2);
}

void SipDialogFork::loggableName(SipDialogFork *this@<X0>, std::string *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::string __p;
  void *v10;
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v14, 1);
  v12 = 0;
  v13 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_7;
  }
  v5 = std::__shared_weak_count::lock(v4);
  v13 = v5;
  if (!v5 || (v6 = *((_QWORD *)this + 17), (v12 = v6) == 0))
  {
LABEL_7:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v14 + 1), (uint64_t)"Unknown dialog", 14);
    BYTE1(v15) = 0;
    if (!v5)
      goto LABEL_12;
    goto LABEL_8;
  }
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v6 + 56))(&__p);
  (*(void (**)(__int128 *, std::string *))(v14 + 40))(&v14, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_8:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_12:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v14 + 1), (uint64_t)"/", 1);
  BYTE1(v15) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&__p, (const std::string *)((char *)this + 152));
  (*(void (**)(__int128 *, std::string *))(v14 + 56))(&v14, &__p);
  if (v11 < 0)
    operator delete(v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v15 + 1) + 8, &__p);
  LoggableString::LoggableString(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v14 = &off_1E78D7A10;
  if ((_BYTE)v15)
  {
    if (*((_QWORD *)&v14 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v14 + 1) + 8))(*((_QWORD *)&v14 + 1));
  }
}

void sub_1BF163B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void (**a20)(ImsOutStream *__hidden this),uint64_t a21,char a22)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  a20 = &off_1E78D7A10;
  if (a22)
  {
    if (a21)
      (*(void (**)(uint64_t))(*(_QWORD *)a21 + 8))(a21);
  }
  _Unwind_Resume(a1);
}

void SipDialogFork::fillCommonRequestHeaders(SipDialogFork *this, SipRequest *a2)
{
  SipHeader *v4;
  SipHeader *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  if (*((char *)this + 311) < 0)
  {
    if (*((_QWORD *)this + 37))
      goto LABEL_3;
  }
  else if (*((_BYTE *)this + 311))
  {
LABEL_3:
    SipUri::operator=((SipRequest *)((char *)a2 + 112), (uint64_t)this + 184);
    goto LABEL_4;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v6)
  {
    v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      v8 = v7;
      v9 = *((_QWORD *)this + 17);
      if (v9)
        SipUri::operator=((SipRequest *)((char *)a2 + 112), v9 + 224);
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
LABEL_4:
  if ((*((char *)this + 175) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 175))
      goto LABEL_7;
    goto LABEL_6;
  }
  if (*((_QWORD *)this + 20))
  {
LABEL_6:
    v4 = SipMessage::header<SipToHeader>(a2, 1);
    SipUriHeader::setTag((uint64_t)v4, (uint64_t)this + 152);
  }
LABEL_7:
  SipMessage::removeHeadersWithName(a2, "Route");
  if (*((_QWORD *)this + 75) != *((_QWORD *)this + 76))
  {
    v5 = SipMessage::header<SipRouteHeader>(a2, 1);
    SipRouteSet::addHops((SipHeader *)((char *)v5 + 64), (SipDialogFork *)((char *)this + 592), 0, 0, 0);
  }
}

void sub_1BF163CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipDialogFork::verifyAndUpdateRemoteCSeq(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _DWORD *v6;
  unsigned int v7;
  uint64_t v8;
  const std::string *v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const std::string *v15;
  _DWORD *v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD v34[11];
  std::string __str;
  void *__p[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  void *v42[2];
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  if (*(_DWORD *)(a1 + 176))
  {
    v6 = SipMessage::header<SipCSeqHeader>(a2);
    if (v6)
      v7 = v6[15];
    else
      v7 = 0;
    if (v7 < *(_DWORD *)(a1 + 176))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 64))(a1 + 8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"received out of order ", 22);
      *(_BYTE *)(v8 + 17) = 0;
      v9 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
      LoggableString::LoggableString((std::string *)__p, v9);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 40))(v8, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" request (expecting > ", 22);
      *(_BYTE *)(v8 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v8 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" but got ", 9);
      *(_BYTE *)(v8 + 17) = 0;
      SipMessage::header<SipCSeqHeader>(a2);
      std::ostream::operator<<();
      *(_BYTE *)(v8 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)")", 1);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (SBYTE7(v37) < 0)
        operator delete(__p[0]);
      v22 = *(std::__shared_weak_count **)(a1 + 144);
      if (!v22)
        return 0;
      v23 = std::__shared_weak_count::lock(v22);
      v45 = v23;
      if (!v23)
        return 0;
      v24 = *(_QWORD *)(a1 + 136);
      v44 = v24;
      if (v24)
      {
        v43 = 0;
        v41 = 0u;
        *(_OWORD *)v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        *(_OWORD *)__p = 0u;
        std::string::basic_string[abi:ne180100]<0>(&__str, "Request received out of order");
        v25 = *(_QWORD *)(v24 + 208);
        v26 = *(std::__shared_weak_count **)(v24 + 216);
        v34[9] = v25;
        v34[10] = v26;
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldxr(p_shared_owners);
          while (__stxr(v28 + 1, p_shared_owners));
        }
        SipResponse::SipResponse((uint64_t)__p, 500, &__str, *(_QWORD *)(v25 + 136) + 288);
        if (v26)
        {
          v29 = (unint64_t *)&v26->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        (*(void (**)(_QWORD *__return_ptr, _QWORD, void **, uint64_t))(*(_QWORD *)*a3 + 168))(v34, *a3, __p, 1);
        ImsResult::~ImsResult((ImsResult *)v34);
        __p[0] = off_1E78E40E8;
        if (SHIBYTE(v43) < 0)
          operator delete(v42[0]);
        SipMessage::~SipMessage((SipMessage *)__p);
        v31 = v45;
        if (!v45)
          return 0;
      }
      else
      {
        v31 = v23;
      }
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      return 0;
    }
    v10 = SipMessage::header<SipCSeqHeader>(a2);
    if (v10)
      v11 = v10[15];
    else
      v11 = 0;
    if (v11 == *(_DWORD *)(a1 + 176))
    {
      v13 = *(_QWORD *)(a1 + 8);
      v12 = a1 + 8;
      v14 = (*(uint64_t (**)(uint64_t))(v13 + 64))(v12);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"ignoring duplicate ", 19);
      *(_BYTE *)(v14 + 17) = 0;
      v15 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
      LoggableString::LoggableString((std::string *)__p, v15);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v14 + 40))(v14, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" request", 8);
      *(_BYTE *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v14 + 17) = 0;
      if (SBYTE7(v37) < 0)
        operator delete(__p[0]);
      return 0;
    }
  }
  v16 = SipMessage::header<SipCSeqHeader>(a2);
  if (v16)
    v17 = v16[15];
  else
    v17 = 0;
  v19 = *(_QWORD *)(a1 + 8);
  v18 = (_DWORD *)(a1 + 8);
  v18[42] = v17;
  v20 = (*(uint64_t (**)(_DWORD *))(v19 + 64))(v18);
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v18 + 16))(v18, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"updated remote cseq to ", 23);
  *(_BYTE *)(v20 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v20 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v20 + 17) = 0;
  return 1;
}

void sub_1BF16414C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  SipResponse::~SipResponse(&a26);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v31 - 64);
  _Unwind_Resume(a1);
}

void SipDialogFork::updateRouteSet(SipDialogFork *this, const SipMessage *a2, char a3)
{
  SipRouteSet *v6;
  _QWORD *v7;
  uint64_t i;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *__p;
  _BYTE *v19;
  uint64_t v20;

  v6 = (SipDialogFork *)((char *)this + 592);
  SipRouteSet::clear((_QWORD *)this + 74);
  __p = 0;
  v19 = 0;
  v20 = 0;
  if (SipMessage::allHeadersWithType<SipRecordRouteHeader>((uint64_t)a2, (uint64_t)&__p))
  {
    v7 = __p;
    if ((a3 & 1) != 0)
    {
      for (i = ((unint64_t)(v19 - (_BYTE *)__p) >> 3); (int)i >= 1; i = v9)
      {
        v9 = i - 1;
        SipRouteSet::addHops(v6, (const SipRouteSet *)(*((_QWORD *)__p + i - 1) + 64), 1, 0, 0);
      }
    }
    else if (v19 != __p)
    {
      v14 = 0;
      do
      {
        SipRouteSet::addHops(v6, (const SipRouteSet *)(v7[v14++] + 64), 0, 0, 0);
        v7 = __p;
      }
      while (v14 < (v19 - (_BYTE *)__p) >> 3);
    }
    v16 = *((_QWORD *)this + 1);
    v15 = (char *)this + 8;
    v15[640] = 1;
    v17 = (*(uint64_t (**)(char *))(v16 + 64))(v15);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v15 + 16))(v15, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"updated route set: ", 19);
    *(_BYTE *)(v17 + 17) = 0;
    v13 = (_BYTE *)(v17 + 17);
    SipRouteSet::toStream(v6, (ImsOutStream *)v17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    v11 = *((_QWORD *)this + 1);
    v10 = (char *)this + 8;
    v12 = (*(uint64_t (**)(char *))(v11 + 64))(v10);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v10 + 16))(v10, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"no Record-Route headers.  Clearing route set.", 45);
    *(_BYTE *)(v12 + 17) = 0;
    v13 = (_BYTE *)(v12 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *v13 = 0;
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
}

void sub_1BF16436C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SipMessage::allHeadersWithType<SipRecordRouteHeader>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 *v9;
  const void *v10;
  unint64_t v11;
  size_t v12;
  void *v14;
  void *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;

  v2 = *(_QWORD **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 == v3)
  {
    v26 = v2;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *(unsigned __int8 **)(v3 + 8 * v7);
      if ((char)v9[31] < 0)
      {
        v10 = (const void *)*((_QWORD *)v9 + 1);
        v11 = *((_QWORD *)v9 + 2);
      }
      else
      {
        v10 = v9 + 8;
        v11 = v9[31];
      }
      if (v11 >= 0xC)
        v12 = 12;
      else
        v12 = v11;
      if (!memcmp(v10, &SipHeader::kHeaderRecordRoute, v12) && v11 == 12)
      {
        v15 = v14;
        v16 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v2 >= v16)
        {
          v18 = *(_QWORD **)a2;
          v19 = ((uint64_t)v2 - *(_QWORD *)a2) >> 3;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 61)
            std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
          v21 = v16 - (_QWORD)v18;
          if (v21 >> 2 > v20)
            v20 = v21 >> 2;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
            v22 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v22 = v20;
          if (v22)
          {
            if (v22 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v23 = (char *)operator new(8 * v22);
          }
          else
          {
            v23 = 0;
          }
          v24 = &v23[8 * v19];
          *(_QWORD *)v24 = v15;
          v17 = v24 + 8;
          if (v2 != v18)
          {
            do
            {
              v25 = *--v2;
              *((_QWORD *)v24 - 1) = v25;
              v24 -= 8;
            }
            while (v2 != v18);
            v2 = *(_QWORD **)a2;
          }
          *(_QWORD *)a2 = v24;
          *(_QWORD *)(a2 + 8) = v17;
          *(_QWORD *)(a2 + 16) = &v23[8 * v22];
          if (v2)
            operator delete(v2);
        }
        else
        {
          *v2 = v14;
          v17 = v2 + 1;
        }
        *(_QWORD *)(a2 + 8) = v17;
        v2 = v17;
        v3 = *(_QWORD *)(a1 + 8);
        v4 = *(_QWORD *)(a1 + 16);
      }
      v7 = ++v8;
    }
    while (v8 < (unint64_t)((v4 - v3) >> 3));
    v26 = *(_QWORD **)a2;
  }
  return v26 != v2;
}

uint64_t SipDialogFork::printForkInfo(SipDialogFork *this, ImsOutStream *a2)
{
  uint64_t v4;
  uint64_t result;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Local cseq:     ", 20);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Remote cseq:    ", 20);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Remote contact: ", 20);
  *((_BYTE *)a2 + 17) = 0;
  v4 = *((_QWORD *)this + 23);
  this = (SipDialogFork *)((char *)this + 184);
  (*(void (**)(SipDialogFork *, ImsOutStream *))(v4 + 40))(this, a2);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Route set:      ", 20);
  *((_BYTE *)a2 + 17) = 0;
  SipRouteSet::toStream((SipDialogFork *)((char *)this + 408), a2);
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    Offer/Answer:   ", 20);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(_QWORD, ImsOutStream *))(**((_QWORD **)this + 59) + 16))(*((_QWORD *)this + 59), a2);
  result = (*(uint64_t (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

void SipDialogFork::handleRemoteSdpOffer(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void **a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v9;
  SipDialog *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  void (**v16)(ImsResult *__hidden);
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  ImsResult *v24;
  ImsResult *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *p_shared_weak_owners;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  ImsResult *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  ImsResult *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  SipDialogFork *v62;
  std::__shared_weak_count *v63;
  SDPModel *v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  xpc_object_t object;
  SDPModel *v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  void (**v73)(ImsResult *__hidden);
  uint64_t *v74;
  int v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  SipDialog *v79;
  std::__shared_weak_count *v80;

  v79 = 0;
  v80 = 0;
  v6 = (std::__shared_weak_count *)a1[18];
  if (!v6)
  {
    v9 = 0;
    goto LABEL_22;
  }
  v9 = std::__shared_weak_count::lock(v6);
  v80 = v9;
  if (!v9 || (v10 = (SipDialog *)a1[17], (v79 = v10) == 0))
  {
LABEL_22:
    v76 = 0u;
    v77 = 0u;
    v78 = 0u;
    v73 = &off_1E78B7238;
    v74 = &_bambiDomain;
    v75 = 1073741826;
    v24 = (ImsResult *)ImsResult::operator<<<char [30]>((uint64_t)&v73, "no dialog to handle SDP offer");
    ImsLogContainer::logResult((ImsLogContainer *)(a1 + 1), v24);
    ImsResult::ImsResult((ImsResult *)a4, v24);
    ImsResult::~ImsResult((ImsResult *)&v73);
    if (!v9)
      return;
    goto LABEL_77;
  }
  v71 = 0;
  v72 = 0;
  SipDialog::sipSession(v10, &v71);
  if (!v71)
  {
    v76 = 0u;
    v77 = 0u;
    v78 = 0u;
    v73 = &off_1E78B7238;
    v74 = &_bambiDomain;
    v75 = 1073741826;
    v25 = (ImsResult *)ImsResult::operator<<<char [31]>((uint64_t)&v73, "no session to handle SDP offer");
    ImsLogContainer::logResult((ImsLogContainer *)(a1 + 1), v25);
    ImsResult::ImsResult((ImsResult *)a4, v25);
LABEL_46:
    ImsResult::~ImsResult((ImsResult *)&v73);
    goto LABEL_71;
  }
  if (*(_BYTE *)(v71 + 1320))
  {
    v11 = *(_QWORD *)(v71 + 1136);
    v12 = *(std::__shared_weak_count **)(v71 + 1144);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v11)
    {
      *(_QWORD *)(a4 + 64) = 0;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      v16 = *(void (***)(ImsResult *__hidden))(v71 + 1136);
      v17 = *(_QWORD *)(v71 + 1144);
      v73 = v16;
      v74 = (uint64_t *)v17;
      if (v17)
      {
        v18 = (unint64_t *)(v17 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = a2[1];
      v69 = (SDPModel *)*a2;
      v70 = (std::__shared_weak_count *)v20;
      if (v20)
      {
        v21 = (unint64_t *)(v20 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = *a3;
      object = v23;
      if (v23)
        xpc_retain(v23);
      else
        object = xpc_null_create();
      LazuliSession::handleSdpOfferInFork(v16, (uint64_t *)&v69, &object, a4);
      xpc_release(object);
      object = 0;
      v44 = v70;
      if (v70)
      {
        v45 = (unint64_t *)&v70->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v47 = (std::__shared_weak_count *)v74;
      if (v74)
      {
        v48 = (unint64_t *)(v74 + 1);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a4 + 8) + 24))(*(_QWORD *)(a4 + 8), *(unsigned int *)(a4 + 16)))
      {
        v51 = a1[1];
        v50 = a1 + 1;
        v52 = (*(uint64_t (**)(_QWORD *))(v51 + 56))(v50);
        (*(void (**)(_QWORD *, uint64_t))(*v50 + 16))(v50, v52);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v52 + 8), (uint64_t)"media layer rejected SDP offer: ", 32);
        *(_BYTE *)(v52 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, v52);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v52 + 17) = 0;
        goto LABEL_71;
      }
      ImsResult::~ImsResult((ImsResult *)a4);
LABEL_70:
      *(_OWORD *)(a4 + 24) = 0u;
      *(_OWORD *)(a4 + 40) = 0u;
      *(_OWORD *)(a4 + 56) = 0u;
      *(_QWORD *)a4 = &off_1E78B7238;
      *(_QWORD *)(a4 + 8) = &_bambiDomain;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_71;
    }
    v76 = 0u;
    v77 = 0u;
    v78 = 0u;
    v73 = &off_1E78B7238;
    v74 = &_bambiDomain;
    v75 = 1073741826;
    v43 = (ImsResult *)ImsResult::operator<<<char [38]>((uint64_t)&v73, "no lazuli session to handle SDP offer");
    ImsLogContainer::logResult((ImsLogContainer *)(a1 + 1), v43);
    ImsResult::ImsResult((ImsResult *)a4, v43);
    goto LABEL_46;
  }
  v26 = *(std::__shared_weak_count **)(v71 + 776);
  if (!v26)
  {
    v66 = 0;
    v67 = 0;
    goto LABEL_63;
  }
  v27 = *(_QWORD *)(v71 + 768);
  p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
  do
    v29 = __ldxr(p_shared_weak_owners);
  while (__stxr(v29 + 1, p_shared_weak_owners));
  v66 = 0;
  v67 = std::__shared_weak_count::lock(v26);
  if (!v67)
  {
    std::__shared_weak_count::__release_weak(v26);
    goto LABEL_63;
  }
  v66 = v27;
  std::__shared_weak_count::__release_weak(v26);
  if (!v27)
  {
LABEL_63:
    v76 = 0u;
    v77 = 0u;
    v78 = 0u;
    v73 = &off_1E78B7238;
    v74 = &_bambiDomain;
    v75 = 1073741826;
    v53 = (ImsResult *)ImsResult::operator<<<char [28]>((uint64_t)&v73, "no call to handle SDP offer");
    ImsLogContainer::logResult((ImsLogContainer *)(a1 + 1), v53);
    ImsResult::ImsResult((ImsResult *)a4, v53);
    ImsResult::~ImsResult((ImsResult *)&v73);
    v42 = 0;
    goto LABEL_64;
  }
  *(_QWORD *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  v30 = a2[1];
  v64 = (SDPModel *)*a2;
  v65 = (std::__shared_weak_count *)v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v62, a1 + 15);
  BambiCall::handleSdpOfferInFork(v27, &v64, &v62, a4);
  v33 = v63;
  if (v63)
  {
    v34 = (unint64_t *)&v63->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v65;
  if (v65)
  {
    v37 = (unint64_t *)&v65->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a4 + 8) + 24))(*(_QWORD *)(a4 + 8), *(unsigned int *)(a4 + 16)))
  {
    v40 = a1[1];
    v39 = a1 + 1;
    v41 = (*(uint64_t (**)(_QWORD *))(v40 + 56))(v39);
    (*(void (**)(_QWORD *, uint64_t))(*v39 + 16))(v39, v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)"media layer rejected SDP offer: ", 32);
    *(_BYTE *)(v41 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, v41);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v42 = 0;
    *(_BYTE *)(v41 + 17) = 0;
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)a4);
    v42 = 1;
  }
LABEL_64:
  v54 = v67;
  if (v67)
  {
    v55 = (unint64_t *)&v67->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if ((v42 & 1) != 0)
    goto LABEL_70;
LABEL_71:
  v57 = v72;
  if (v72)
  {
    v58 = (unint64_t *)&v72->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v9 = v80;
  if (v80)
  {
LABEL_77:
    v60 = (unint64_t *)&v9->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BF164D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, xpc_object_t object, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v20 - 80);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipDialogFork::handleRemoteSdpOffer(uint64_t a1@<X0>, uint64_t *a2@<X1>, void **a3@<X2>, uint64_t a4@<X8>)
{
  SipDialogFork::handleRemoteSdpOffer((_QWORD *)(a1 - 112), a2, a3, a4);
}

void SipDialogFork::handleRemoteSdpAnswer(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void **a4@<X3>, uint64_t a5@<X8>)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v11;
  SipDialog *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  void (**v18)(ImsResult *__hidden);
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  ImsResult *v29;
  ImsResult *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  unint64_t *p_shared_weak_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  ImsResult *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  ImsResult *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  xpc_object_t object;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  void (**v91)(ImsResult *__hidden);
  uint64_t *v92;
  int v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  SipDialog *v97;
  std::__shared_weak_count *v98;

  v97 = 0;
  v98 = 0;
  v7 = (std::__shared_weak_count *)a1[18];
  if (!v7)
  {
    v11 = 0;
    goto LABEL_25;
  }
  v11 = std::__shared_weak_count::lock(v7);
  v98 = v11;
  if (!v11 || (v12 = (SipDialog *)a1[17], (v97 = v12) == 0))
  {
LABEL_25:
    v94 = 0u;
    v95 = 0u;
    v96 = 0u;
    v91 = &off_1E78B7238;
    v92 = &_bambiDomain;
    v93 = 1073741826;
    v29 = (ImsResult *)ImsResult::operator<<<char [31]>((uint64_t)&v91, "no dialog to handle SDP answer");
    ImsLogContainer::logResult((ImsLogContainer *)(a1 + 1), v29);
    ImsResult::ImsResult((ImsResult *)a5, v29);
    ImsResult::~ImsResult((ImsResult *)&v91);
    if (!v11)
      return;
    goto LABEL_93;
  }
  v89 = 0;
  v90 = 0;
  SipDialog::sipSession(v12, &v89);
  if (!v89)
  {
    v94 = 0u;
    v95 = 0u;
    v96 = 0u;
    v91 = &off_1E78B7238;
    v92 = &_bambiDomain;
    v93 = 1073741826;
    v30 = (ImsResult *)ImsResult::operator<<<char [32]>((uint64_t)&v91, "no session to handle SDP answer");
    ImsLogContainer::logResult((ImsLogContainer *)(a1 + 1), v30);
    ImsResult::ImsResult((ImsResult *)a5, v30);
LABEL_57:
    ImsResult::~ImsResult((ImsResult *)&v91);
    goto LABEL_87;
  }
  if (*(_BYTE *)(v89 + 1320))
  {
    v13 = *(_QWORD *)(v89 + 1136);
    v14 = *(std::__shared_weak_count **)(v89 + 1144);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v13)
    {
      *(_QWORD *)(a5 + 64) = 0;
      *(_OWORD *)(a5 + 32) = 0u;
      *(_OWORD *)(a5 + 48) = 0u;
      *(_OWORD *)a5 = 0u;
      *(_OWORD *)(a5 + 16) = 0u;
      v18 = *(void (***)(ImsResult *__hidden))(v89 + 1136);
      v19 = *(_QWORD *)(v89 + 1144);
      v91 = v18;
      v92 = (uint64_t *)v19;
      if (v19)
      {
        v20 = (unint64_t *)(v19 + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v22 = (std::__shared_weak_count *)a2[1];
      v87 = *a2;
      v88 = v22;
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v25 = (std::__shared_weak_count *)a3[1];
      v85 = *a3;
      v86 = v25;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v28 = *a4;
      object = v28;
      if (v28)
        xpc_retain(v28);
      else
        object = xpc_null_create();
      LazuliSession::handleSdpAnswerInFork(v18, &v87, &v85, &object, a5);
      xpc_release(object);
      object = 0;
      v55 = v86;
      if (v86)
      {
        v56 = (unint64_t *)&v86->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v58 = v88;
      if (v88)
      {
        v59 = (unint64_t *)&v88->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = (std::__shared_weak_count *)v92;
      if (v92)
      {
        v62 = (unint64_t *)(v92 + 1);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a5 + 8) + 24))(*(_QWORD *)(a5 + 8), *(unsigned int *)(a5 + 16)))
      {
        v65 = a1[1];
        v64 = a1 + 1;
        v66 = (*(uint64_t (**)(_QWORD *))(v65 + 56))(v64);
        (*(void (**)(_QWORD *, uint64_t))(*v64 + 16))(v64, v66);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v66 + 8), (uint64_t)"media layer rejected SDP answer: ", 33);
        *(_BYTE *)(v66 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 16))(a5, v66);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v66 + 64))(v66, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v66 + 17) = 0;
        goto LABEL_87;
      }
      ImsResult::~ImsResult((ImsResult *)a5);
LABEL_86:
      *(_OWORD *)(a5 + 24) = 0u;
      *(_OWORD *)(a5 + 40) = 0u;
      *(_OWORD *)(a5 + 56) = 0u;
      *(_QWORD *)a5 = &off_1E78B7238;
      *(_QWORD *)(a5 + 8) = &_bambiDomain;
      *(_DWORD *)(a5 + 16) = 0;
      goto LABEL_87;
    }
    v94 = 0u;
    v95 = 0u;
    v96 = 0u;
    v91 = &off_1E78B7238;
    v92 = &_bambiDomain;
    v93 = 1073741826;
    v54 = (ImsResult *)ImsResult::operator<<<char [39]>((uint64_t)&v91, "no lazuli session to handle SDP answer");
    ImsLogContainer::logResult((ImsLogContainer *)(a1 + 1), v54);
    ImsResult::ImsResult((ImsResult *)a5, v54);
    goto LABEL_57;
  }
  v31 = *(std::__shared_weak_count **)(v89 + 776);
  if (!v31)
  {
    v82 = 0;
    v83 = 0;
    goto LABEL_79;
  }
  v32 = *(_QWORD *)(v89 + 768);
  p_shared_weak_owners = (unint64_t *)&v31->__shared_weak_owners_;
  do
    v34 = __ldxr(p_shared_weak_owners);
  while (__stxr(v34 + 1, p_shared_weak_owners));
  v82 = 0;
  v83 = std::__shared_weak_count::lock(v31);
  if (!v83)
  {
    std::__shared_weak_count::__release_weak(v31);
    goto LABEL_79;
  }
  v82 = v32;
  std::__shared_weak_count::__release_weak(v31);
  if (!v32)
  {
LABEL_79:
    v94 = 0u;
    v95 = 0u;
    v96 = 0u;
    v91 = &off_1E78B7238;
    v92 = &_bambiDomain;
    v93 = 1073741826;
    v67 = (ImsResult *)ImsResult::operator<<<char [29]>((uint64_t)&v91, "no call to handle SDP answer");
    ImsLogContainer::logResult((ImsLogContainer *)(a1 + 1), v67);
    ImsResult::ImsResult((ImsResult *)a5, v67);
    ImsResult::~ImsResult((ImsResult *)&v91);
    v53 = 0;
    goto LABEL_80;
  }
  *(_QWORD *)(a5 + 64) = 0;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  v35 = (std::__shared_weak_count *)a2[1];
  v80 = *a2;
  v81 = v35;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v38 = (std::__shared_weak_count *)a3[1];
  v78 = *a3;
  v79 = v38;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v76, a1 + 15);
  BambiCall::handleSdpAnswerInFork(v32, &v80, &v78, a5);
  v41 = v77;
  if (v77)
  {
    v42 = (unint64_t *)&v77->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v79;
  if (v79)
  {
    v45 = (unint64_t *)&v79->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v81;
  if (v81)
  {
    v48 = (unint64_t *)&v81->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a5 + 8) + 24))(*(_QWORD *)(a5 + 8), *(unsigned int *)(a5 + 16)))
  {
    v51 = a1[1];
    v50 = a1 + 1;
    v52 = (*(uint64_t (**)(_QWORD *))(v51 + 56))(v50);
    (*(void (**)(_QWORD *, uint64_t))(*v50 + 16))(v50, v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v52 + 8), (uint64_t)"media layer rejected SDP answer: ", 33);
    *(_BYTE *)(v52 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 16))(a5, v52);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v53 = 0;
    *(_BYTE *)(v52 + 17) = 0;
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)a5);
    v53 = 1;
  }
LABEL_80:
  v68 = v83;
  if (v83)
  {
    v69 = (unint64_t *)&v83->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if ((v53 & 1) != 0)
    goto LABEL_86;
LABEL_87:
  v71 = v90;
  if (v90)
  {
    v72 = (unint64_t *)&v90->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v11 = v98;
  if (v98)
  {
LABEL_93:
    v74 = (unint64_t *)&v11->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF165580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, xpc_object_t object, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v24 - 96);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipDialogFork::handleRemoteSdpAnswer(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void **a4@<X3>, uint64_t a5@<X8>)
{
  SipDialogFork::handleRemoteSdpAnswer((_QWORD *)(a1 - 112), a2, a3, a4, a5);
}

uint64_t SipDialogFork::preconditionsSatisfied(SipDialogFork *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  SipDialog *v5;
  void **v6;
  void **v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  SipDialog *v17;
  std::__shared_weak_count *v18;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  v18 = v3;
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (SipDialog *)*((_QWORD *)this + 17);
  v17 = v5;
  if (!v5)
  {
    v8 = 0;
LABEL_17:
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    return v8;
  }
  v15 = 0;
  v16 = 0;
  SipDialog::sipSession(v5, &v15);
  if (v15)
  {
    v6 = (void **)(v15 + 1400);
    v7 = (void **)((char *)this + 152);
    if (SipPreconditions::preconditionsActiveInFork((void **)(v15 + 1400), v7))
      v8 = SipPreconditions::preconditionsSatisfiedInFork(v6, v7);
    else
      v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v4 = v18;
  if (v18)
    goto LABEL_17;
  return v8;
}

void sub_1BF165768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SipDialogFork::handleOfferAnswerStateUpdated(SipDialogFork *this)
{
  std::__shared_weak_count *v2;
  SipDialog *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  SipDialog *v12;
  std::__shared_weak_count *v13;

  v12 = 0;
  v13 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v2)
  {
    v13 = std::__shared_weak_count::lock(v2);
    if (v13)
    {
      v3 = (SipDialog *)*((_QWORD *)this + 17);
      v12 = v3;
      if (v3)
      {
        if (SipOfferAnswer::satisfied(*((SipOfferAnswer **)this + 82)))
        {
          if (SipDialogFork::preconditionsSatisfied(this))
          {
            std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v10, (_QWORD *)this + 15);
            SipDialog::setActiveFork(v3, &v10, 0);
            v4 = v11;
            if (v11)
            {
              p_shared_owners = (unint64_t *)&v11->__shared_owners_;
              do
                v6 = __ldaxr(p_shared_owners);
              while (__stlxr(v6 - 1, p_shared_owners));
              if (!v6)
              {
                ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
                std::__shared_weak_count::__release_weak(v4);
              }
            }
          }
        }
      }
    }
  }
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1BF165870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipDialogFork::handleOfferAnswerStateUpdated(SipDialogFork *this)
{
  SipDialogFork::handleOfferAnswerStateUpdated((SipDialogFork *)((char *)this - 112));
}

uint64_t SipDialogFork::hasOutstandingPracks(SipDialogFork *this)
{
  std::__shared_weak_count *v2;
  void **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void **v21;
  std::__shared_weak_count *v22;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  v21 = 0;
  v22 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v2)
  {
    v22 = std::__shared_weak_count::lock(v2);
    if (v22)
    {
      v3 = (void **)*((_QWORD *)this + 17);
      v21 = v3;
      if (v3)
      {
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v19, (_QWORD *)this + 15);
        SipDialog::currentClientTransactions((uint64_t)v3, (uint64_t)&v16, "PRACK", &v19);
        v4 = v20;
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          if (!v6)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
      }
    }
  }
  v7 = v22;
  if (v22)
  {
    v8 = (unint64_t *)&v22->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v16;
  if (v17 == v16)
  {
    v14 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + v11) + 144))(*(_QWORD *)(v10 + v11));
      if ((v13 & 1) == 0)
        break;
      ++v12;
      v10 = v16;
      v11 += 16;
    }
    while (v12 < (v17 - v16) >> 4);
    v14 = v13 ^ 1u;
  }
  v21 = (void **)&v16;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v21);
  return v14;
}

void sub_1BF1659E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 32);
  *(_QWORD *)(v2 - 32) = va;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 32));
  _Unwind_Resume(a1);
}

void SipDialogFork::handleTimer(SipDialogFork *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  _BYTE v7[72];

  v2 = a2[23];
  if ((v2 & 0x80u) == 0)
    v3 = a2[23];
  else
    v3 = *((_QWORD *)a2 + 1);
  v4 = qword_1ED70E640;
  if (byte_1ED70E64F >= 0)
    v4 = byte_1ED70E64F;
  if (v3 != v4)
    return;
  if (byte_1ED70E64F >= 0)
    v6 = &kPreconditionUpdateTimerName;
  else
    v6 = (uint64_t *)kPreconditionUpdateTimerName;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v6, *((_QWORD *)a2 + 1)))
      return;
    goto LABEL_16;
  }
  if (!a2[23])
  {
LABEL_16:
    SipDialogFork::sendPreconditionUpdate(a1, 0, (uint64_t)v7);
    ImsResult::~ImsResult((ImsResult *)v7);
    return;
  }
  while (*a2 == *(unsigned __int8 *)v6)
  {
    ++a2;
    v6 = (uint64_t *)((char *)v6 + 1);
    if (!--v2)
      goto LABEL_16;
  }
}

void SipDialogFork::sendPreconditionUpdate(SipDialogFork *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  uint64_t v8;
  SipSession *v9;
  std::string *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  ImsLogContainer *v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  SipUserAgent *v50;
  ImsResult *v51;
  void **v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  unint64_t *p_shared_weak_owners;
  unint64_t v61;
  unint64_t v62;
  unsigned int v63;
  char *v64;
  uint64_t (*v65)(char *);
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  _QWORD v76[5];
  _QWORD v77[2];
  __int16 v78;
  _QWORD v79[2];
  uint64_t v80[2];
  void *v81;
  uint64_t *v82;
  int v83;
  char v84;
  void *__p[2];
  __int128 v86;
  __int128 v87;
  void **v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  _QWORD *v92;
  uint64_t v93;
  _BYTE v94[24];
  _BYTE *v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v90 = 0;
  v91 = 0;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_11;
  }
  v7 = std::__shared_weak_count::lock(v5);
  v91 = v7;
  if (!v7 || (v8 = *((_QWORD *)this + 17), (v90 = v8) == 0))
  {
LABEL_11:
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
    if (!v7)
      return;
    goto LABEL_54;
  }
  v88 = 0;
  v89 = 0;
  SipDialog::sipSession((SipDialog *)v8, &v88);
  v9 = (SipSession *)v88;
  if (!v88)
  {
LABEL_29:
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
    goto LABEL_48;
  }
  v10 = (std::string *)((char *)this + 152);
  if (!SipPreconditions::needToSendUpdateInFork((uint64_t)(v88 + 175), (void **)this + 19))
  {
    v15 = *((_QWORD *)this + 1);
    v14 = (char *)this + 8;
    v16 = (*(uint64_t (**)(char *))(v15 + 64))(v14);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v14 + 16))(v14, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"sendPreconditionUpdate: don't need to send UPDATE in fork ", 58);
    *(_BYTE *)(v16 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&v81, v10);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v16 + 56))(v16, &v81);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    if (SBYTE7(v86) < 0)
      operator delete(__p[0]);
    if (v84 < 0)
      operator delete(v81);
    goto LABEL_29;
  }
  if (!*(_BYTE *)(v8 + 1920) && !*((_BYTE *)v9 + 856))
  {
    v30 = *((_QWORD *)this + 1);
    v29 = (char *)this + 8;
    v31 = (*(uint64_t (**)(char *))(v30 + 64))(v29);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v29 + 16))(v29, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)"sendPreconditionUpdate: not sending UPDATE from MT", 50);
    *(_BYTE *)(v31 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v31 + 17) = 0;
    goto LABEL_29;
  }
  if (SipSession::hasOutstandingResponseSdp(v9))
  {
    v12 = *((_QWORD *)this + 1);
    v11 = (char *)this + 8;
    v13 = (*(uint64_t (**)(char *))(v12 + 64))(v11);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))(v11, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"sendPreconditionUpdate: we still have outstanding response SDP awaiting a PRACK", 79);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_46:
    *(_BYTE *)(v13 + 17) = 0;
    goto LABEL_47;
  }
  v17 = *((_QWORD *)this + 82);
  v18 = *(_QWORD *)(v17 + 152);
  v19 = *(_QWORD **)(v18 + 16);
  v20 = *(std::__shared_weak_count **)(v18 + 24);
  v81 = v19;
  v82 = (uint64_t *)v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  if (v19[5] && v19[7])
  {
    v23 = 1;
  }
  else
  {
    v24 = *(_QWORD *)(v17 + 152);
    v25 = *(_QWORD **)(v24 + 16);
    v26 = *(std::__shared_weak_count **)(v24 + 24);
    v92 = v25;
    v93 = (uint64_t)v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v23 = SipOfferAnswerExchange::empty((SipOfferAnswerExchange *)v25)
       || SipOfferAnswerExchange::localAnswerPending((SipOfferAnswerExchange *)v25);
    if (v26)
    {
      v32 = (unint64_t *)&v26->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v20 = (std::__shared_weak_count *)v82;
  }
  if (v20)
  {
    v34 = (unint64_t *)&v20->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (!v23)
  {
    v13 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 64))((char *)this + 8);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 1) + 16))((char *)this + 8, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"sendPreconditionUpdate: can't send SDP right now. Current O/A state: ", 69);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 82) + 16))(*((_QWORD *)this + 82), v13);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_46;
  }
  if (SipDialogFork::hasOutstandingPracks(this))
  {
    v37 = *((_QWORD *)this + 1);
    v36 = (char *)this + 8;
    v38 = (*(uint64_t (**)(char *))(v37 + 64))(v36);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v36 + 16))(v36, v38);
    v39 = (_BYTE *)ImsOutStream::operator<<(v38, "sendPreconditionUpdate: still have outstanding PRACKs in fork ");
    ObfuscatedString::ObfuscatedString((uint64_t)&v81, v10);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)v39 + 56))(v39, &v81);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v39[17] = 0;
    ims::AccessNetwork::~AccessNetwork(&v81);
LABEL_47:
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741838;
    goto LABEL_48;
  }
  if (!a2
    || *(_BYTE *)(v8 + 1920)
    || (v45 = v88, (SipPreconditions::preconditionsSatisfiedInFork(v88 + 175, (void **)this + 19) & 1) != 0))
  {
    v46 = (SipDialogFork *)((char *)this + 8);
    v47 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 64))((char *)this + 8);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 1) + 16))((char *)this + 8, v47);
    v48 = (_BYTE *)ImsOutStream::operator<<(v47, "sending precondition update in fork ");
    ObfuscatedString::ObfuscatedString((uint64_t)&v81, (const std::string *)((char *)this + 152));
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)v48 + 56))(v48, &v81);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v48[17] = 0;
    ims::AccessNetwork::~AccessNetwork(&v81);
    v92 = 0;
    v93 = 0;
    SipDialogFork::createSdpOffer(this, "UPDATE", (unsigned __int8 *)&SipSession::kUpdateTypePreconditions, &v92);
    if (v92)
    {
      v49 = *(_QWORD *)(v8 + 208);
      if (v49)
        v50 = *(SipUserAgent **)(v49 + 136);
      else
        v50 = 0;
      if (*(_BYTE *)(SipUserAgent::config(v50) + 813))
        SDPModel::setDirectionForSessionAndMedia(v92, 1);
      *(_QWORD *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      v52 = v88;
      v80[0] = (uint64_t)v92;
      v80[1] = v93;
      if (v93)
      {
        v53 = (unint64_t *)(v93 + 8);
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(v79, (_QWORD *)this + 15);
      memset(v76, 0, 24);
      v76[3] = &off_1E78B82D8;
      v77[0] = 0;
      v77[1] = 0;
      v76[4] = v77;
      v78 = 256;
      SipSession::sendUpdateWithSdpInFork((uint64_t *)v52, v80, (uint64_t)v79, &SipSession::kUpdateTypePreconditions, (uint64_t)v76, a3);
      SipReason::~SipReason((SipReason *)v76);
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v79);
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v80);
      if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a3 + 8) + 24))(*(_QWORD *)(a3 + 8), *(unsigned int *)(a3 + 16)))
      {
        v55 = (*(uint64_t (**)(char *))(*(_QWORD *)v46 + 56))((char *)this + 8);
        (*(void (**)(ImsLogContainer *, uint64_t))(*(_QWORD *)v46 + 16))(v46, v55);
        v56 = ImsOutStream::operator<<(v55, "couldn't send precondition UPDATE in fork ");
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v56 + 32))(v56, v10);
        v57 = (_BYTE *)ImsOutStream::operator<<(v56, ": ");
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a3 + 16))(a3, v57);
        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v57[17] = 0;
        SipPreconditions::setNeedToSendUpdateInFork((__int128 *)(v52 + 175), v10, 1);
      }
    }
    else
    {
      *(_OWORD *)__p = 0u;
      v86 = 0u;
      v87 = 0u;
      v81 = &off_1E78B7238;
      v82 = &_bambiDomain;
      v83 = 1073741826;
      v51 = (ImsResult *)ImsResult::operator<<<char [53]>((uint64_t)&v81, "sendPreconditionUpdate: unable to create SDP to send");
      ImsLogContainer::logResult(v46, v51);
      ImsResult::ImsResult((ImsResult *)a3, v51);
      ImsResult::~ImsResult((ImsResult *)&v81);
    }
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v92);
    goto LABEL_48;
  }
  v59 = *((_QWORD *)this + 15);
  v58 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v58)
  {
    p_shared_weak_owners = (unint64_t *)&v58->__shared_weak_owners_;
    do
      v61 = __ldxr(p_shared_weak_owners);
    while (__stxr(v61 + 1, p_shared_weak_owners));
    do
      v62 = __ldxr(p_shared_weak_owners);
    while (__stxr(v62 + 1, p_shared_weak_owners));
  }
  v63 = *((_DWORD *)v45 + 212);
  v64 = (char *)this + 8;
  v65 = *(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 64);
  if (v63)
  {
    v66 = v65((char *)this + 8);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v64 + 16))((char *)this + 8, v66);
    v67 = ImsOutStream::operator<<(v66, "sendPreconditionUpdate: waiting ");
    std::ostream::operator<<();
    *(_BYTE *)(v67 + 17) = 0;
    v68 = (_BYTE *)ImsOutStream::operator<<(v67, "ms for UPDATE from MO");
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v68 + 64))(v68, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v68[17] = 0;
    if (v58)
    {
      v69 = (unint64_t *)&v58->__shared_weak_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    v95 = 0;
    v71 = operator new(0x20uLL);
    *v71 = &off_1E78E4558;
    v71[1] = this;
    v71[2] = v59;
    v71[3] = v58;
    v95 = v71;
    SipTimerContainer::startTimer((_QWORD *)this + 88, (uint64_t)&kPreconditionUpdateTimerName, (uint64_t)v94, v63, 0);
    v72 = v95;
    if (v95 == v94)
    {
      v73 = 4;
      v72 = v94;
    }
    else
    {
      if (!v95)
        goto LABEL_89;
      v73 = 5;
    }
    (*(void (**)(void))(*v72 + 8 * v73))();
  }
  else
  {
    v74 = v65((char *)this + 8);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v64 + 16))(v64, v74);
    v75 = (_BYTE *)ImsOutStream::operator<<(v74, "waiting indefinitely for UPDATE from MO");
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v75 + 64))(v75, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v75[17] = 0;
  }
LABEL_89:
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 1073741838;
  if (v58)
  {
    std::__shared_weak_count::__release_weak(v58);
    std::__shared_weak_count::__release_weak(v58);
  }
LABEL_48:
  v40 = v89;
  if (v89)
  {
    v41 = (unint64_t *)&v89->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v7 = v91;
  if (v91)
  {
LABEL_54:
    v43 = (unint64_t *)&v7->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1BF1664A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  std::__shared_weak_count *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;

  v25 = *(_QWORD **)(v23 - 80);
  if (v25 == v22)
  {
    v26 = 4;
    v25 = (_QWORD *)(v23 - 104);
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_6:
  if (v21)
  {
    std::__shared_weak_count::__release_weak(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v23 - 152);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v23 - 136);
  _Unwind_Resume(a1);
}

double SipDialogFork::setBearer(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t **v5;
  uint64_t *v6;
  double result;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  char v11;
  unsigned int v12;
  unsigned int *v13;

  v12 = a2;
  v8 = __PAIR64__(a4, a2);
  v10 = 0;
  v9 = 0uLL;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&v9, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1);
  v11 = 1;
  v13 = &v12;
  v5 = std::__tree<std::__value_type<unsigned int,SipForkBearer>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SipForkBearer>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SipForkBearer>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 856), &v12, (uint64_t)&std::piecewise_construct, &v13);
  v5[5] = (uint64_t *)v8;
  v6 = v5[6];
  if (v6)
  {
    v5[7] = v6;
    operator delete(v6);
    v5[6] = 0;
    v5[7] = 0;
    v5[8] = 0;
  }
  result = *(double *)&v9;
  *((_OWORD *)v5 + 3) = v9;
  v5[8] = v10;
  *((_BYTE *)v5 + 72) = v11;
  return result;
}

void sub_1BF166674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipDialogFork::getBearerPortCount(SipDialogFork *this, unsigned int a2)
{
  char *v2;
  char *v3;
  unsigned int v4;
  BOOL v5;
  char **v6;

  v2 = (char *)*((_QWORD *)this + 108);
  if (!v2)
    return 0;
  v3 = (char *)this + 864;
  do
  {
    v4 = *((_DWORD *)v2 + 8);
    v5 = v4 >= a2;
    if (v4 >= a2)
      v6 = (char **)v2;
    else
      v6 = (char **)(v2 + 8);
    if (v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 != (char *)this + 864 && *((_DWORD *)v3 + 8) <= a2)
    return (uint64_t)(*((_QWORD *)v3 + 7) - *((_QWORD *)v3 + 6)) >> 1;
  else
    return 0;
}

void SipDialogFork::handlePreconditionsSatisfied(SipDialogFork *this)
{
  std::__shared_weak_count *v2;
  SipDialog *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  SipDialog *v12;
  std::__shared_weak_count *v13;

  v12 = 0;
  v13 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v2)
  {
    v13 = std::__shared_weak_count::lock(v2);
    if (v13)
    {
      v3 = (SipDialog *)*((_QWORD *)this + 17);
      v12 = v3;
      if (v3)
      {
        if (SipOfferAnswer::satisfied(*((SipOfferAnswer **)this + 82)))
        {
          if (SipDialogFork::preconditionsSatisfied(this))
          {
            std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v10, (_QWORD *)this + 15);
            SipDialog::setActiveFork(v3, &v10, 0);
            v4 = v11;
            if (v11)
            {
              p_shared_owners = (unint64_t *)&v11->__shared_owners_;
              do
                v6 = __ldaxr(p_shared_owners);
              while (__stlxr(v6 - 1, p_shared_owners));
              if (!v6)
              {
                ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
                std::__shared_weak_count::__release_weak(v4);
              }
            }
          }
        }
      }
    }
  }
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1BF1667D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SipDialogFork::createSdpOffer(SipDialogFork *this@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  ImsPrefs *v14;
  void **UseSDPTemplateForUpdatesKey;
  void *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  unsigned __int8 *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  ImsPrefs *v30;
  void **UseSDPTemplateForAllInvitesKey;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  _BOOL4 v45;
  SipStack *v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;

  v7 = a2[23];
  if ((v7 & 0x80u) == 0)
    v8 = a2[23];
  else
    v8 = *((_QWORD *)a2 + 1);
  if (v8 != 6)
    goto LABEL_12;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, "INVITE", *((_QWORD *)a2 + 1)))
      goto LABEL_12;
LABEL_17:
    v18 = a3[23];
    if ((v18 & 0x80u) == 0)
      v19 = a3[23];
    else
      v19 = *((_QWORD *)a3 + 1);
    if (v19 != 21)
      goto LABEL_39;
    if ((v18 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a3, "InviteTypeTTYReinvite", *((_QWORD *)a3 + 1)))
        goto LABEL_39;
    }
    else if (a3[23])
    {
      v20 = "InviteTypeTTYReinvite";
      v21 = a3;
      v17 = 1;
      while (*v21 == *(unsigned __int8 *)v20)
      {
        ++v21;
        ++v20;
        if (!--v18)
          goto LABEL_58;
      }
LABEL_39:
      v27 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
      if (v27)
      {
        v28 = std::__shared_weak_count::lock(v27);
        v50 = v28;
        if (v28)
        {
          v12 = v28;
          v29 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
          v49 = v29;
          if (v29)
          {
            SipDialog::stack(v29, &v47);
            v30 = (ImsPrefs *)SipStack::prefs(v47);
            UseSDPTemplateForAllInvitesKey = (void **)ImsPrefs::getUseSDPTemplateForAllInvitesKey(v30);
            v32 = ImsPrefs::prefWithKey(v30, UseSDPTemplateForAllInvitesKey);
            if (v32)
              v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v32 + 40))(v32);
            else
              v17 = *((_BYTE *)UseSDPTemplateForAllInvitesKey + 57) != 0;
            v33 = v48;
            if (v48)
            {
              p_shared_owners = (unint64_t *)&v48->__shared_owners_;
              do
                v35 = __ldaxr(p_shared_owners);
              while (__stlxr(v35 - 1, p_shared_owners));
              if (!v35)
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
              }
            }
            v12 = v50;
            if (!v50)
              goto LABEL_58;
          }
          else
          {
            v17 = 0;
          }
          v36 = (unint64_t *)&v12->__shared_owners_;
          do
            v26 = __ldaxr(v36);
          while (__stlxr(v26 - 1, v36));
          goto LABEL_56;
        }
      }
LABEL_44:
      v17 = 0;
      goto LABEL_58;
    }
    v17 = 1;
    goto LABEL_58;
  }
  if (!a2[23])
    goto LABEL_17;
  v9 = "INVITE";
  while (*a2 == *(unsigned __int8 *)v9)
  {
    ++a2;
    ++v9;
    if (!--v7)
      goto LABEL_17;
  }
LABEL_12:
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v10)
    goto LABEL_44;
  v11 = std::__shared_weak_count::lock(v10);
  v50 = v11;
  if (!v11)
    goto LABEL_44;
  v12 = v11;
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  v49 = v13;
  if (!v13)
  {
    v17 = 0;
LABEL_35:
    v25 = (unint64_t *)&v12->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
LABEL_56:
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    goto LABEL_58;
  }
  SipDialog::stack(v13, &v47);
  v14 = (ImsPrefs *)SipStack::prefs(v47);
  UseSDPTemplateForUpdatesKey = (void **)ImsPrefs::getUseSDPTemplateForUpdatesKey(v14);
  v16 = ImsPrefs::prefWithKey(v14, UseSDPTemplateForUpdatesKey);
  if (v16)
    v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v16 + 40))(v16);
  else
    v17 = *((_BYTE *)UseSDPTemplateForUpdatesKey + 57) != 0;
  v22 = v48;
  if (v48)
  {
    v23 = (unint64_t *)&v48->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v12 = v50;
  if (v50)
    goto LABEL_35;
LABEL_58:
  v37 = a3[23];
  if ((v37 & 0x80u) == 0)
    v38 = a3[23];
  else
    v38 = *((_QWORD *)a3 + 1);
  v39 = qword_1ED70DB10;
  if (byte_1ED70DB1F >= 0)
    v39 = byte_1ED70DB1F;
  if (v38 == v39)
  {
    if (byte_1ED70DB1F >= 0)
      v40 = &SipSession::kInviteTypeSessionRefresh;
    else
      v40 = (uint64_t *)SipSession::kInviteTypeSessionRefresh;
    if ((v37 & 0x80) != 0)
    {
      v45 = memcmp(*(const void **)a3, v40, *((_QWORD *)a3 + 1)) != 0;
    }
    else if (a3[23])
    {
      v41 = v37 - 1;
      do
      {
        v43 = *a3++;
        v42 = v43;
        v44 = *(unsigned __int8 *)v40;
        v40 = (uint64_t *)((char *)v40 + 1);
        v45 = v42 != v44;
      }
      while (v42 == v44 && v41-- != 0);
    }
    else
    {
      v45 = 0;
    }
  }
  else
  {
    v45 = 1;
  }
  SipDialogFork::createSdpToSend(this, v17, v45, a4);
}

void sub_1BF166B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SipDialogFork::outstandingResponseSdpPracked(SipDialogFork *this)
{
  char *v2;
  uint64_t v3;
  _BYTE v4[72];

  v2 = (char *)this + 8;
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 64))((char *)this + 8);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"all outstanding response SDP has been PRACKed", 45);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  SipDialogFork::sendPreconditionUpdate(this, 1, (uint64_t)v4);
  ImsResult::~ImsResult((ImsResult *)v4);
}

void SipDialogFork::handleClientTransactionCompleted(SipDialogFork *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[72];

  v4 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 288) + 112))(*(_QWORD *)(*(_QWORD *)a2 + 288));
  v5 = v4[23];
  if ((v5 & 0x80u) == 0)
    v6 = v4[23];
  else
    v6 = *((_QWORD *)v4 + 1);
  if (v6 != 5)
    return;
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v4, "PRACK", *((_QWORD *)v4 + 1)))
      return;
    goto LABEL_12;
  }
  if (!v4[23])
  {
LABEL_12:
    v8 = *(_QWORD *)(*(_QWORD *)a2 + 560);
    if (v8)
    {
      if ((*(_DWORD *)(v8 + 88) - 200) <= 0x63)
      {
        v9 = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)a1 + 1) + 64))((_QWORD *)a1 + 1);
        (*(void (**)(_QWORD *, uint64_t))(*((_QWORD *)a1 + 1) + 16))((_QWORD *)a1 + 1, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"client PRACK transaction completed successfully. Seeing if we need to send an update.", 85);
        *(_BYTE *)(v9 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v9 + 17) = 0;
        SipDialogFork::sendPreconditionUpdate(a1, 1, (uint64_t)v10);
        ImsResult::~ImsResult((ImsResult *)v10);
      }
    }
    return;
  }
  v7 = "PRACK";
  while (*v4 == *(unsigned __int8 *)v7)
  {
    ++v4;
    ++v7;
    if (!--v5)
      goto LABEL_12;
  }
}

uint64_t SipDialogFork::incrementSdpVersion(SipDialogFork *this)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)((char *)this + 8);
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 64))((char *)this + 8);
  (*(void (**)(_QWORD *, uint64_t))(*v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"incrementing sdp version to ", 28);
  *(_BYTE *)(v2 + 17) = 0;
  ++v1[86];
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  return v1[86];
}

void SipDialogFork::createSdpToSend(SipDialogFork *this@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v9;
  SipDialog *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  SipSession *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  std::__shared_weak_count *v54;
  uint64_t v55[2];
  __int128 v56;
  __int128 v57;
  uint64_t *v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count **v62;
  std::__shared_weak_count *v63;
  SipDialog *v64;
  std::__shared_weak_count *v65;

  v64 = 0;
  v65 = 0;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v6)
  {
    v9 = 0;
    goto LABEL_16;
  }
  v9 = std::__shared_weak_count::lock(v6);
  v65 = v9;
  if (!v9 || (v10 = (SipDialog *)*((_QWORD *)this + 17), (v64 = v10) == 0))
  {
LABEL_16:
    *a4 = 0;
    a4[1] = 0;
    if (!v9)
      return;
    goto LABEL_80;
  }
  v62 = 0;
  v63 = 0;
  SipDialog::sipSession(v10, &v62);
  if (!v62)
  {
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_74;
  }
  SipOfferAnswer::remote(*((SipOfferAnswer **)this + 82), &v58);
  v11 = v58[1];
  v60 = *v58;
  v61 = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = v59;
  if (v59)
  {
    p_shared_owners = (unint64_t *)&v59->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v58 = 0;
  v59 = 0;
  if (a2)
  {
    v17 = (SipSession *)v62;
    SipSession::localTemplateSdp((SipSession *)v62, (uint64_t *)&v58);
  }
  else
  {
    v18 = v60;
    if (v60)
    {
      v57 = 0uLL;
      v17 = (SipSession *)v62;
      goto LABEL_26;
    }
    v17 = (SipSession *)v62;
    ((void (*)(uint64_t **__return_ptr, std::__shared_weak_count **))(*v62)[5].__shared_owners_)(&v58, v62);
  }
  v57 = 0uLL;
  if (v58)
  {
    std::allocate_shared[abi:ne180100]<SDPModel,std::allocator<SDPModel>,std::shared_ptr<SDPModel> const&,void>((uint64_t *)&v58, &v56);
    v57 = v56;
    v19 = (_QWORD *)v56;
    if (!a3)
    {
LABEL_24:
      v20 = *((_QWORD *)this + 87);
      goto LABEL_36;
    }
LABEL_35:
    v20 = SipDialogFork::incrementSdpVersion(this);
LABEL_36:
    v19[18] = v20;
    v27 = v62[97];
    if (v27)
    {
      v28 = v62[96];
      p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
      *(_QWORD *)&v56 = 0;
      v31 = std::__shared_weak_count::lock(v27);
      *((_QWORD *)&v56 + 1) = v31;
      if (v31)
      {
        *(_QWORD *)&v56 = v28;
        std::__shared_weak_count::__release_weak(v27);
        if (v28)
        {
          v53 = v19;
          v54 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
          if (*((_QWORD *)&v57 + 1))
          {
            v32 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
          }
          BambiCall::setDirectionForSdpBasedOnHoldState(v28, &v53);
          v34 = v54;
          if (v54)
          {
            v35 = (unint64_t *)&v54->__shared_owners_;
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          *(_OWORD *)a4 = v57;
          v57 = 0uLL;
          v31 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
          goto LABEL_53;
        }
      }
      else
      {
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    else
    {
      v31 = 0;
      v56 = 0uLL;
    }
    *a4 = 0;
    a4[1] = 0;
LABEL_53:
    if (v31)
    {
      v37 = (unint64_t *)&v31->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v39 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
    if (*((_QWORD *)&v57 + 1))
    {
      v40 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    goto LABEL_64;
  }
  v18 = v60;
  if (v60)
  {
LABEL_26:
    v21 = (std::__shared_weak_count *)v61;
    v55[0] = v18;
    v55[1] = v61;
    if (v61)
    {
      v22 = (unint64_t *)(v61 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    SipSession::createLocalSdpForFork((uint64_t)v17, v55, &v56);
    v24 = v56;
    v56 = 0uLL;
    v57 = v24;
    if (v21)
    {
      v25 = (unint64_t *)&v21->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v19 = (_QWORD *)v57;
    if (!a3)
      goto LABEL_24;
    goto LABEL_35;
  }
  *a4 = 0;
  a4[1] = 0;
LABEL_64:
  v42 = v59;
  if (v59)
  {
    v43 = (unint64_t *)&v59->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)v61;
  if (v61)
  {
    v46 = (unint64_t *)(v61 + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
LABEL_74:
  v48 = v63;
  if (v63)
  {
    v49 = (unint64_t *)&v63->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v9 = v65;
  if (v65)
  {
LABEL_80:
    v51 = (unint64_t *)&v9->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BF167238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v20 - 88);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v20 - 72);
  _Unwind_Resume(a1);
}

uint64_t SipDialogFork::setSdpVersion(SipDialogFork *this, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t result;

  v3 = (char *)this + 8;
  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 87) = a2;
  v4 = (*(uint64_t (**)(char *))(v2 + 64))((char *)this + 8);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"initial SDP version is ", 23);
  *(_BYTE *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  return result;
}

void SipDialogFork::stackId(SipDialogFork *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 7);
  }
}

void `non-virtual thunk to'SipDialogFork::stackId(const std::string::value_type **this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this - 49) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(this - 9), (std::string::size_type)*(this - 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(this - 9);
    a2->__r_.__value_.__r.__words[2] = (std::string::size_type)*(this - 7);
  }
}

void std::__tree<std::__value_type<unsigned int,SipForkBearer>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SipForkBearer>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SipForkBearer>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,SipForkBearer>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SipForkBearer>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SipForkBearer>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,SipForkBearer>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SipForkBearer>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SipForkBearer>>>::destroy(a1[1]);
    v2 = (void *)a1[6];
    if (v2)
    {
      a1[7] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

void std::allocate_shared[abi:ne180100]<SipOfferAnswer,std::allocator<SipOfferAnswer>,std::shared_ptr<SipDialogFork>,void>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0xC8uLL);
  std::__shared_ptr_emplace<SipOfferAnswer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipDialogFork>,std::allocator<SipOfferAnswer>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a2, v4 + 17, (uint64_t)(v4 + 3));
}

void sub_1BF16742C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<SipOfferAnswer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipDialogFork>,std::allocator<SipOfferAnswer>,0>(_QWORD *a1, _QWORD *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78E44A0;
  std::construct_at[abi:ne180100]<SipOfferAnswer,std::shared_ptr<SipDialogFork>,SipOfferAnswer*>((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1BF167474(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipOfferAnswer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E44A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipOfferAnswer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E44A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipOfferAnswer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::construct_at[abi:ne180100]<SipOfferAnswer,std::shared_ptr<SipDialogFork>,SipOfferAnswer*>(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v8[2];

  v3 = (std::__shared_weak_count *)a2[1];
  if (*a2)
    v4 = *a2 + 112;
  else
    v4 = 0;
  v8[0] = v4;
  v8[1] = v3;
  *a2 = 0;
  a2[1] = 0;
  SipOfferAnswer::SipOfferAnswer(a1, v8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void sub_1BF167554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<SipDialogFork,std::allocator<SipDialogFork>,std::shared_ptr<SipDialog> &,void>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x388uLL);
  std::__shared_ptr_emplace<SipDialogFork>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipDialog> &,std::allocator<SipDialogFork>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a2, v4 + 18, (uint64_t)(v4 + 3));
}

void sub_1BF1675B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<SipDialogFork>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipDialog> &,std::allocator<SipDialogFork>,0>(_QWORD *a1, _QWORD *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78E44F0;
  std::construct_at[abi:ne180100]<SipDialogFork,std::shared_ptr<SipDialog> &,SipDialogFork*>((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1BF1675FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipDialogFork>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E44F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipDialogFork>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E44F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipDialogFork>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::construct_at[abi:ne180100]<SipDialogFork,std::shared_ptr<SipDialog> &,SipDialogFork*>(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  SipDialogFork::SipDialogFork(a1, v9);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void sub_1BF1676E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned int,SipForkBearer>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SipForkBearer>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SipForkBearer>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x50uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *((_QWORD *)v11 + 9) = 0;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::__tree<std::__value_type<unsigned int,SipForkBearer>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SipForkBearer>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SipForkBearer>>>::__erase_unique<unsigned int>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32))
    return 0;
  std::__tree<std::__value_type<unsigned int,SipForkBearer>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SipForkBearer>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SipForkBearer>>>::erase((uint64_t **)a1, (uint64_t *)v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<unsigned int,SipForkBearer>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SipForkBearer>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SipForkBearer>>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  void *v4;

  v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(a1, a2);
  v4 = (void *)a2[6];
  if (v4)
  {
    a2[7] = (uint64_t)v4;
    operator delete(v4);
  }
  operator delete(a2);
  return v3;
}

_QWORD *std::__function::__func<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0,std::allocator<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78E4558;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0,std::allocator<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78E4558;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0,std::allocator<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78E4558;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0,std::allocator<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78E4558;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0,std::allocator<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0,std::allocator<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0,std::allocator<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 72))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF167A50(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0,std::allocator<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0,std::allocator<SipDialogFork::sendPreconditionUpdate(BOOL)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t _GLOBAL__sub_I_SipDialogFork_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&kPreconditionUpdateTimerName, "PreconditionUpdateTimer");
  return __cxa_atexit(MEMORY[0x1E0DE44D0], &kPreconditionUpdateTimerName, &dword_1BEDF4000);
}

std::string *SipClientNonInviteTransactionState::SipClientNonInviteTransactionState(std::string *a1, std::string::size_type *a2)
{
  std::string::size_type v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::string::size_type v10;
  std::__shared_weak_count *v11;

  v3 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  SipTransactionState::SipTransactionState(a1, &v10);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78E45D8;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E78E4658;
  return a1;
}

void sub_1BF167BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipClientNonInviteTryingTransactionState::SipClientNonInviteTryingTransactionState(uint64_t a1, std::string::size_type *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::string::size_type v9[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = (std::string::size_type)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  SipClientNonInviteTransactionState::SipClientNonInviteTransactionState((std::string *)a1, v9);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *(_QWORD *)a1 = &off_1E78E4688;
  *(_QWORD *)(a1 + 8) = &unk_1E78E4710;
  *(_DWORD *)(a1 + 224) = 1;
  return a1;
}

void sub_1BF167C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipClientNonInviteTryingTransactionState::enterState(SipClientNonInviteTryingTransactionState *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  SipTransaction *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 56) = 1;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = (SipTransaction *)*((_QWORD *)this + 26);
      if (!v5 || !SipTransaction::retryEnabled(v5))
      {
LABEL_17:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v7 = *((_QWORD *)this + 24);
      v6 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
      if (v6)
      {
        p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      v12 = operator new(0x20uLL);
      *v12 = &off_1E78E4910;
      v12[1] = this;
      v12[2] = v7;
      v12[3] = v6;
      v18 = v12;
      SipTimerContainer::startSipTimer((_QWORD *)this + 3, (uint64_t)&SipTimers::kTimerE, (uint64_t)v17, *((_DWORD *)this + 56));
      v13 = v18;
      if (v18 == v17)
      {
        v14 = 4;
        v13 = v17;
      }
      else
      {
        if (!v18)
          goto LABEL_15;
        v14 = 5;
      }
      (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_15:
      if (v6)
      {
        std::__shared_weak_count::__release_weak(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      goto LABEL_17;
    }
  }
}

void sub_1BF167DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  std::__shared_weak_count *v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  if (v15)
  {
    std::__shared_weak_count::__release_weak(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void SipClientNonInviteTryingTransactionState::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  SipTransaction *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD v20[11];
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v20[10] = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(SipTransaction **)(a1 + 208);
      v20[9] = v7;
      if (!v7 || !operator==(a2, (uint64_t)&SipTimers::kTimerE) || !SipTransaction::retryEnabled(v7))
      {
LABEL_21:
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        return;
      }
      v8 = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)v7 + 21) + 64))((_QWORD *)v7 + 21);
      (*(void (**)(_QWORD *, uint64_t))(*((_QWORD *)v7 + 21) + 16))((_QWORD *)v7 + 21, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"resending request", 17);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(_QWORD *__return_ptr, SipTransaction *))(*(_QWORD *)v7 + 128))(v20, v7);
      ImsResult::~ImsResult((ImsResult *)v20);
      v10 = *(_QWORD *)(a1 + 192);
      v9 = *(std::__shared_weak_count **)(a1 + 200);
      if (v9)
      {
        p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
        do
          v12 = __ldxr(p_shared_weak_owners);
        while (__stxr(v12 + 1, p_shared_weak_owners));
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
        *(_DWORD *)(a1 + 224) *= 2;
        do
          v14 = __ldxr(p_shared_weak_owners);
        while (__stxr(v14 + 1, p_shared_weak_owners));
      }
      else
      {
        *(_DWORD *)(a1 + 224) *= 2;
      }
      v22 = 0;
      v15 = operator new(0x20uLL);
      *v15 = &off_1E78E4990;
      v15[1] = a1;
      v15[2] = v10;
      v15[3] = v9;
      v22 = v15;
      SipTimerContainer::startSipTimer((_QWORD *)(a1 + 24), (uint64_t)&SipTimers::kTimerE, (uint64_t)v21, *(_DWORD *)(a1 + 224));
      v16 = v22;
      if (v22 == v21)
      {
        v17 = 4;
        v16 = v21;
      }
      else
      {
        if (!v22)
          goto LABEL_19;
        v17 = 5;
      }
      (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_19:
      if (v9)
      {
        std::__shared_weak_count::__release_weak(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      goto LABEL_21;
    }
  }
}

void sub_1BF168088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  std::__shared_weak_count *v24;
  char *v26;
  uint64_t v27;

  v26 = a23;
  if (a23 == v23)
  {
    v27 = 4;
    v26 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  if (v24)
  {
    std::__shared_weak_count::__release_weak(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

BOOL SipClientNonInviteTryingTransactionState::handleResponse(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 208);
  v8 = v7 != 0;
  if (v7)
  {
    if ((*(_DWORD *)(a2 + 88) - 100) < 0x64)
      v9 = 3;
    else
      v9 = 4;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, v9);
  }
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v8;
}

void sub_1BF1681B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipClientNonInviteTryingTransactionState::handleConnectionError(SipClientNonInviteTryingTransactionState *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 24);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v2)
  {
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    *((_DWORD *)this + 56) = 1;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }
  else
  {
    *((_DWORD *)this + 56) = 1;
  }
  v8 = operator new(0x20uLL);
  *v8 = &off_1E78E4A10;
  v8[1] = this;
  v8[2] = v3;
  v8[3] = v2;
  v12 = v8;
  SipTimerContainer::startSipTimer((_QWORD *)this + 3, (uint64_t)&SipTimers::kTimerE, (uint64_t)v11, *((_DWORD *)this + 56));
  v9 = v12;
  if (v12 == v11)
  {
    v10 = 4;
    v9 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_14;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_14:
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1BF1682E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  std::__shared_weak_count *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  if (v13)
  {
    std::__shared_weak_count::__release_weak(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

std::string *SipClientNonInviteProceedingTransactionState::SipClientNonInviteProceedingTransactionState(std::string *a1, std::string::size_type *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::string::size_type v9[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = (std::string::size_type)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  SipClientNonInviteTransactionState::SipClientNonInviteTransactionState(a1, v9);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78E4740;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E78E47C8;
  return a1;
}

void sub_1BF1683E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipClientNonInviteProceedingTransactionState::enterState(SipClientNonInviteProceedingTransactionState *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  SipTransaction *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string __p;
  SipTransaction *v24;
  std::__shared_weak_count *v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v25 = v3;
    if (v3)
    {
      v4 = v3;
      v5 = (SipTransaction *)*((_QWORD *)this + 26);
      v24 = v5;
      if (!v5 || !SipTransaction::retryEnabled(v5))
      {
LABEL_24:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v7 = *((_QWORD *)this + 24);
      v6 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
      if (v6)
      {
        p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
      }
      if (byte_1ED70CEE0[23] < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)byte_1ED70CEE0, *(std::string::size_type *)&byte_1ED70CEE0[8]);
      else
        __p = *(std::string *)byte_1ED70CEE0;
      if (v6)
      {
        v11 = (unint64_t *)&v6->__shared_weak_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v27 = 0;
      v13 = operator new(0x20uLL);
      *v13 = &off_1E78E4A90;
      v13[1] = this;
      v13[2] = v7;
      v13[3] = v6;
      v27 = v13;
      v14 = SipTimers::timerValue(*((SipTimers **)this + 20), (const SipTimer *)&SipTimers::kTimerT2, 0);
      SipTimerContainer::startTimer((_QWORD *)this + 3, (uint64_t)&__p, (uint64_t)v26, v14, 0);
      v19 = v27;
      if (v27 == v26)
      {
        v20 = 4;
        v19 = v26;
      }
      else
      {
        if (!v27)
        {
LABEL_20:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (v6)
          {
            std::__shared_weak_count::__release_weak(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          goto LABEL_24;
        }
        v20 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v19 + 8 * v20))(v19, v15, v16, v17, v18);
      goto LABEL_20;
    }
  }
}

void sub_1BF1685C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  std::__shared_weak_count *v20;

  if (v20)
  {
    std::__shared_weak_count::__release_weak(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void SipClientNonInviteProceedingTransactionState::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  SipTransaction *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::string __p;
  _QWORD v25[11];
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v25[10] = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(SipTransaction **)(a1 + 208);
      v25[9] = v7;
      if (!v7 || !operator==(a2, (uint64_t)&SipTimers::kTimerE) || !SipTransaction::retryEnabled(v7))
      {
LABEL_25:
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        return;
      }
      v8 = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)v7 + 21) + 64))((_QWORD *)v7 + 21);
      (*(void (**)(_QWORD *, uint64_t))(*((_QWORD *)v7 + 21) + 16))((_QWORD *)v7 + 21, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"resending request", 17);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(_QWORD *__return_ptr, SipTransaction *))(*(_QWORD *)v7 + 128))(v25, v7);
      ImsResult::~ImsResult((ImsResult *)v25);
      v10 = *(_QWORD *)(a1 + 192);
      v9 = *(std::__shared_weak_count **)(a1 + 200);
      if (v9)
      {
        p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
        do
          v12 = __ldxr(p_shared_weak_owners);
        while (__stxr(v12 + 1, p_shared_weak_owners));
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
      }
      if (byte_1ED70CEE0[23] < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)byte_1ED70CEE0, *(std::string::size_type *)&byte_1ED70CEE0[8]);
      else
        __p = *(std::string *)byte_1ED70CEE0;
      if (v9)
      {
        v14 = (unint64_t *)&v9->__shared_weak_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v27 = 0;
      v16 = operator new(0x20uLL);
      *v16 = &off_1E78E4B10;
      v16[1] = a1;
      v16[2] = v10;
      v16[3] = v9;
      v27 = v16;
      v17 = SipTimers::timerValue(*(SipTimers **)(a1 + 160), (const SipTimer *)&SipTimers::kTimerT2, 0);
      SipTimerContainer::startTimer((_QWORD *)(a1 + 24), (uint64_t)&__p, (uint64_t)v26, v17, 0);
      v20 = v27;
      if (v27 == v26)
      {
        v21 = 4;
        v20 = v26;
      }
      else
      {
        if (!v27)
        {
LABEL_21:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (v9)
          {
            std::__shared_weak_count::__release_weak(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          goto LABEL_25;
        }
        v21 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v20 + 8 * v21))(v20, v18, v19);
      goto LABEL_21;
    }
  }
}

void sub_1BF1688C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  std::__shared_weak_count *v25;

  if (v25)
  {
    std::__shared_weak_count::__release_weak(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

BOOL SipClientNonInviteProceedingTransactionState::handleResponse(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if ((*(_DWORD *)(a2 + 88) - 100) < 0x64)
    return 1;
  v4 = *(std::__shared_weak_count **)(a1 + 216);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 208);
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, 4);
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (v9)
          return 1;
      }
      else
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (v11)
          return 0;
      }
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v7 != 0;
    }
  }
  return 0;
}

void sub_1BF168A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *SipClientNonInviteCompletedTransactionState::SipClientNonInviteCompletedTransactionState(std::string *a1, std::string::size_type *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::string::size_type v9[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = (std::string::size_type)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  SipClientNonInviteTransactionState::SipClientNonInviteTransactionState(a1, v9);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78E47F8;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E78E4880;
  return a1;
}

void sub_1BF168AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipClientNonInviteCompletedTransactionState::enterState(SipClientNonInviteCompletedTransactionState *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  std::string __p;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  _BYTE *v38;
  _BYTE v39[24];
  _BYTE *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v35 = 0;
  v36 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (!v2)
    goto LABEL_34;
  v36 = std::__shared_weak_count::lock(v2);
  if (!v36)
    goto LABEL_34;
  v3 = *((_QWORD *)this + 26);
  v35 = v3;
  if (!v3)
    goto LABEL_34;
  v5 = *((_QWORD *)this + 24);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = *(std::__shared_weak_count **)(v3 + 88);
  if (!v9)
  {
    v33 = 0;
    v34 = 0;
    goto LABEL_17;
  }
  v10 = *(_QWORD *)(v3 + 80);
  v11 = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  v33 = 0;
  v34 = std::__shared_weak_count::lock(v9);
  if (v34)
  {
    v33 = v10;
    std::__shared_weak_count::__release_weak(v9);
    if (v10 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10))
    {
      if (byte_1ED70CFA0[23] < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)byte_1ED70CFA0, *(std::string::size_type *)&byte_1ED70CFA0[8]);
      else
        __p = *(std::string *)byte_1ED70CFA0;
      if (v4)
      {
        v24 = (unint64_t *)&v4->__shared_weak_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v40 = 0;
      v26 = operator new(0x20uLL);
      *v26 = &off_1E78E4B90;
      v26[1] = this;
      v26[2] = v5;
      v26[3] = v4;
      v40 = v26;
      SipTimerContainer::startTimer((_QWORD *)this + 3, (uint64_t)&__p, (uint64_t)v39, 0, 0);
      v30 = v40;
      if (v40 == v39)
      {
        v31 = 4;
        v30 = v39;
      }
      else
      {
        if (!v40)
          goto LABEL_49;
        v31 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v30 + 8 * v31))(v30, v27, v28, v29);
LABEL_49:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_27;
    }
LABEL_17:
    if (!v4)
      goto LABEL_22;
    goto LABEL_20;
  }
  std::__shared_weak_count::__release_weak(v9);
  if (!v4)
    goto LABEL_22;
LABEL_20:
  v13 = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
LABEL_22:
  v15 = operator new(0x20uLL);
  *v15 = &off_1E78E4B90;
  v15[1] = this;
  v15[2] = v5;
  v15[3] = v4;
  v38 = v15;
  SipTimerContainer::startSipTimer((_QWORD *)this + 3, (uint64_t)&SipTimers::kTimerK, (uint64_t)v37, 0);
  v16 = v38;
  if (v38 == v37)
  {
    v17 = 4;
    v16 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_27;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_27:
  v18 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_34:
  v21 = v36;
  if (v36)
  {
    v22 = (unint64_t *)&v36->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1BF168DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::__shared_weak_count *v26;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (v26)
  {
    std::__shared_weak_count::__release_weak(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void SipClientNonInviteCompletedTransactionState::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (operator==(a2, (uint64_t)&SipTimers::kTimerK))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 216);
    if (v3)
    {
      v4 = std::__shared_weak_count::lock(v3);
      if (v4)
      {
        v5 = v4;
        v6 = *(_QWORD *)(a1 + 208);
        if (v6)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, 7);
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void sub_1BF168F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipClientNonInviteCompletedTransactionState::handleResponse(SipClientNonInviteCompletedTransactionState *this, const SipResponse *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = *((_QWORD *)this + 26);
      if (v6)
      {
        v8 = *(_QWORD *)(v6 + 168);
        v7 = v6 + 168;
        v9 = (*(uint64_t (**)(uint64_t))(v8 + 64))(v7);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"ignoring response", 17);
        *(_BYTE *)(v9 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v9 + 17) = 0;
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  return 0;
}

void sub_1BF16904C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipClientNonInviteTryingTransactionState::~SipClientNonInviteTryingTransactionState(SipClientNonInviteTryingTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipClientNonInviteTryingTransactionState::id(SipClientNonInviteTryingTransactionState *this)
{
  return 1;
}

void `non-virtual thunk to'SipClientNonInviteTryingTransactionState::~SipClientNonInviteTryingTransactionState(SipClientNonInviteTryingTransactionState *this)
{
  SipTransactionState::~SipTransactionState((SipClientNonInviteTryingTransactionState *)((char *)this - 8));
}

{
  SipTransactionState::~SipTransactionState((SipClientNonInviteTryingTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void SipClientNonInviteProceedingTransactionState::~SipClientNonInviteProceedingTransactionState(SipClientNonInviteProceedingTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipClientNonInviteProceedingTransactionState::id(SipClientNonInviteProceedingTransactionState *this)
{
  return 3;
}

void `non-virtual thunk to'SipClientNonInviteProceedingTransactionState::~SipClientNonInviteProceedingTransactionState(SipClientNonInviteProceedingTransactionState *this)
{
  SipTransactionState::~SipTransactionState((SipClientNonInviteProceedingTransactionState *)((char *)this - 8));
}

{
  SipTransactionState::~SipTransactionState((SipClientNonInviteProceedingTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void SipClientNonInviteCompletedTransactionState::~SipClientNonInviteCompletedTransactionState(SipClientNonInviteCompletedTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipClientNonInviteCompletedTransactionState::id(SipClientNonInviteCompletedTransactionState *this)
{
  return 4;
}

void `non-virtual thunk to'SipClientNonInviteCompletedTransactionState::~SipClientNonInviteCompletedTransactionState(SipClientNonInviteCompletedTransactionState *this)
{
  SipTransactionState::~SipTransactionState((SipClientNonInviteCompletedTransactionState *)((char *)this - 8));
}

{
  SipTransactionState::~SipTransactionState((SipClientNonInviteCompletedTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void SipClientNonInviteTransactionState::~SipClientNonInviteTransactionState(SipClientNonInviteTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'SipClientNonInviteTransactionState::~SipClientNonInviteTransactionState(SipClientNonInviteTransactionState *this)
{
  SipTransactionState::~SipTransactionState((SipClientNonInviteTransactionState *)((char *)this - 8));
}

{
  SipTransactionState::~SipTransactionState((SipClientNonInviteTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78E4910;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78E4910;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78E4910;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78E4910;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF1693BC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78E4990;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78E4990;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78E4990;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78E4990;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF169624(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

_QWORD *std::__function::__func<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78E4A10;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78E4A10;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78E4A10;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78E4A10;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF16988C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0,std::allocator<SipClientNonInviteTryingTransactionState::handleConnectionError(void)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78E4A90;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78E4A90;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78E4A90;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78E4A90;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF169AF4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78E4B10;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78E4B10;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78E4B10;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78E4B10;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF169D5C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0,std::allocator<SipClientNonInviteProceedingTransactionState::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

_QWORD *std::__function::__func<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78E4B90;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78E4B90;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78E4B90;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78E4B90;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF169FC4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0,std::allocator<SipClientNonInviteCompletedTransactionState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void XcapDocumentSimservs::XcapDocumentSimservs(XcapDocumentSimservs *this)
{
  __int128 *v2;
  unsigned __int8 v3;
  char *v4;

  v3 = 0;
  v4 = (char *)&v3;
  v2 = (__int128 *)(std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v3, (uint64_t)&std::piecewise_construct, &v4)+ 5);
  *(_QWORD *)this = &off_1E78CE278;
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)this + 8, (__int128 *)"simservs", v2);
  *((_QWORD *)this + 8) = "simservs";
  *((_QWORD *)this + 9) = v2;
  *((_BYTE *)this + 80) = 1;
  *(_QWORD *)this = &off_1E78E4C10;
  *((_QWORD *)this + 1) = &unk_1E78E4CA8;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = (char *)this + 96;
}

void XcapDocumentSimservs::~XcapDocumentSimservs(XcapDocumentSimservs *this)
{
  char *v2;
  void **v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  BOOL v9;
  void *__p[2];
  __int128 v11;

  *(_QWORD *)this = &off_1E78E4C10;
  v2 = (char *)this + 96;
  *((_QWORD *)this + 1) = &unk_1E78E4CA8;
  v3 = (void **)((char *)this + 8);
  v4 = (char *)this + 88;
  v5 = (_QWORD *)*((_QWORD *)this + 11);
  if (v5 != (_QWORD *)((char *)this + 96))
  {
    do
    {
      *(_OWORD *)__p = 0u;
      v11 = 0u;
      if (*((char *)v5 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v5[4], v5[5]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v5 + 2);
        *(_QWORD *)&v11 = v5[6];
      }
      v6 = v5[7];
      *((_QWORD *)&v11 + 1) = v6;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      if (SBYTE7(v11) < 0)
        operator delete(__p[0]);
      v7 = (char *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char *)v5[2];
          v9 = *(_QWORD *)v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v2);
  }
  std::__tree<std::string>::destroy((uint64_t)v4, *((char **)this + 12));
  bambi::XmlTreeItem::~XmlTreeItem(v3);
}

{
  XcapDocumentSimservs::~XcapDocumentSimservs(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'XcapDocumentSimservs::~XcapDocumentSimservs(XcapDocumentSimservs *this)
{
  XcapDocumentSimservs::~XcapDocumentSimservs((XcapDocumentSimservs *)((char *)this - 8));
}

{
  XcapDocumentSimservs::~XcapDocumentSimservs((XcapDocumentSimservs *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

XcapDocumentCommWaiting *XcapDocumentSimservs::createChild(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  std::string::size_type size;
  std::string *p_s1;
  const char *v6;
  uint64_t v7;
  size_t v8;
  std::string::size_type v9;
  std::string *p_p;
  const char *v11;
  uint64_t v12;
  XcapDocumentCommWaiting *v13;
  uint64_t v14;
  uint64_t *v15;
  std::string *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  std::string *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  std::string *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  std::string *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  std::string *v32;
  std::string __s1;
  std::string __p;

  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  v3 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    size = __s1.__r_.__value_.__l.__size_;
  if (size != 8)
    goto LABEL_12;
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(__s1.__r_.__value_.__l.__data_, "simservs", __s1.__r_.__value_.__l.__size_))
      goto LABEL_12;
LABEL_22:
    v13 = (XcapDocumentCommWaiting *)a1;
    goto LABEL_101;
  }
  if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    goto LABEL_22;
  p_s1 = &__s1;
  v6 = "simservs";
  while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v6)
  {
    p_s1 = (std::string *)((char *)p_s1 + 1);
    ++v6;
    if (!--v3)
      goto LABEL_22;
  }
LABEL_12:
  memset(&__p, 0, sizeof(__p));
  XcapNs::stripXcapNs((uint64_t)&__s1, &__p);
  v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v8 = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v9 = __p.__r_.__value_.__l.__size_;
  if (v9 != 21)
    goto LABEL_24;
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(__p.__r_.__value_.__l.__data_, "communication-waiting", __p.__r_.__value_.__l.__size_))
      goto LABEL_24;
LABEL_36:
    v13 = (XcapDocumentCommWaiting *)operator new();
    XcapDocumentCommWaiting::XcapDocumentCommWaiting(v13);
    goto LABEL_96;
  }
  if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
    goto LABEL_36;
  p_p = &__p;
  v11 = "communication-waiting";
  v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  while (p_p->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v11)
  {
    p_p = (std::string *)((char *)p_p + 1);
    ++v11;
    if (!--v12)
      goto LABEL_36;
  }
LABEL_24:
  v14 = qword_1ED70CC60;
  if (byte_1ED70CC6F >= 0)
    v14 = byte_1ED70CC6F;
  if (v9 != v14)
    goto LABEL_38;
  if (byte_1ED70CC6F >= 0)
    v15 = &XcapDocumentCommDiversion::kName;
  else
    v15 = (uint64_t *)XcapDocumentCommDiversion::kName;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(__p.__r_.__value_.__l.__data_, v15, v8))
      goto LABEL_38;
LABEL_50:
    v13 = (XcapDocumentCommWaiting *)operator new();
    XcapDocumentCommDiversion::XcapDocumentCommDiversion(v13);
    goto LABEL_96;
  }
  if (!(_DWORD)v7)
    goto LABEL_50;
  v16 = &__p;
  v17 = v7;
  while (v16->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v15)
  {
    v16 = (std::string *)((char *)v16 + 1);
    v15 = (uint64_t *)((char *)v15 + 1);
    if (!--v17)
      goto LABEL_50;
  }
LABEL_38:
  v18 = qword_1ED70C910;
  if (byte_1ED70C91F >= 0)
    v18 = byte_1ED70C91F;
  if (v9 != v18)
    goto LABEL_52;
  if (byte_1ED70C91F >= 0)
    v19 = &XcapDocumentOIP::kName;
  else
    v19 = (uint64_t *)XcapDocumentOIP::kName;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(__p.__r_.__value_.__l.__data_, v19, v8))
      goto LABEL_52;
LABEL_64:
    v13 = (XcapDocumentCommWaiting *)operator new();
    XcapDocumentOIP::XcapDocumentOIP(v13);
    goto LABEL_96;
  }
  if (!(_DWORD)v7)
    goto LABEL_64;
  v20 = &__p;
  v21 = v7;
  while (v20->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v19)
  {
    v20 = (std::string *)((char *)v20 + 1);
    v19 = (uint64_t *)((char *)v19 + 1);
    if (!--v21)
      goto LABEL_64;
  }
LABEL_52:
  v22 = qword_1ED70C928;
  if (byte_1ED70C937 >= 0)
    v22 = byte_1ED70C937;
  if (v9 != v22)
    goto LABEL_66;
  if (byte_1ED70C937 >= 0)
    v23 = &XcapDocumentOIR::kName;
  else
    v23 = (uint64_t *)XcapDocumentOIR::kName;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(__p.__r_.__value_.__l.__data_, v23, v8))
      goto LABEL_66;
LABEL_78:
    v13 = (XcapDocumentCommWaiting *)operator new();
    XcapDocumentOIR::XcapDocumentOIR(v13);
    goto LABEL_96;
  }
  if (!(_DWORD)v7)
    goto LABEL_78;
  v24 = &__p;
  v25 = v7;
  while (v24->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v23)
  {
    v24 = (std::string *)((char *)v24 + 1);
    v23 = (uint64_t *)((char *)v23 + 1);
    if (!--v25)
      goto LABEL_78;
  }
LABEL_66:
  v26 = qword_1ED70CC18;
  if (byte_1ED70CC27 >= 0)
    v26 = byte_1ED70CC27;
  if (v9 != v26)
    goto LABEL_80;
  if (byte_1ED70CC27 >= 0)
    v27 = &XcapDocumentCallBarring::kNameIncoming;
  else
    v27 = (uint64_t *)XcapDocumentCallBarring::kNameIncoming;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(__p.__r_.__value_.__l.__data_, v27, v8))
      goto LABEL_80;
LABEL_92:
    v13 = (XcapDocumentCommWaiting *)operator new();
    XcapDocumentCallBarring::XcapDocumentCallBarring((uint64_t)v13, 1);
    goto LABEL_96;
  }
  if (!(_DWORD)v7)
    goto LABEL_92;
  v28 = &__p;
  v29 = v7;
  while (v28->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v27)
  {
    v28 = (std::string *)((char *)v28 + 1);
    v27 = (uint64_t *)((char *)v27 + 1);
    if (!--v29)
      goto LABEL_92;
  }
LABEL_80:
  v30 = qword_1ED70CC30;
  if (byte_1ED70CC3F >= 0)
    v30 = byte_1ED70CC3F;
  if (v9 != v30)
    goto LABEL_94;
  if (byte_1ED70CC3F >= 0)
    v31 = &XcapDocumentCallBarring::kNameOutgoing;
  else
    v31 = (uint64_t *)XcapDocumentCallBarring::kNameOutgoing;
  if ((v7 & 0x80) != 0)
  {
    if (!memcmp(__p.__r_.__value_.__l.__data_, v31, v8))
      goto LABEL_95;
LABEL_94:
    v13 = 0;
    goto LABEL_96;
  }
  if ((_DWORD)v7)
  {
    v32 = &__p;
    while (v32->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v31)
    {
      v32 = (std::string *)((char *)v32 + 1);
      v31 = (uint64_t *)((char *)v31 + 1);
      if (!--v7)
        goto LABEL_95;
    }
    goto LABEL_94;
  }
LABEL_95:
  v13 = (XcapDocumentCommWaiting *)operator new();
  XcapDocumentCallBarring::XcapDocumentCallBarring((uint64_t)v13, 0);
LABEL_96:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v13)
      goto LABEL_101;
    goto LABEL_100;
  }
  if (v13)
  {
LABEL_100:
    __p.__r_.__value_.__r.__words[0] = *((_QWORD *)v13 + 8);
    std::__tree<std::__value_type<std::string,XcapDocumentBase *>,std::__map_value_compare<std::string,std::__value_type<std::string,XcapDocumentBase *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,XcapDocumentBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 11, (void **)__p.__r_.__value_.__l.__data_, (__int128 **)&__p)[7] = (uint64_t)v13;
  }
LABEL_101:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  return v13;
}

void sub_1BF16A728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  MEMORY[0x1C3B87100](v20, 0x10F3C40CDEF8A80);
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(a1);
}

void XcapDocumentSimservs::parseChild(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  size_t size;
  std::string::size_type v9;
  std::string *v10;
  const char *v11;
  uint64_t v12;
  std::string *p_s1;
  const char *v14;
  uint64_t v15;
  const void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t *v19;
  std::string *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  std::string *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  std::string *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  std::string *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  std::string *v36;
  std::string __s1;

  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  v7 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    v9 = __s1.__r_.__value_.__l.__size_;
  if (v9 == 21)
  {
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
        goto LABEL_86;
      p_s1 = &__s1;
      v14 = "communication-waiting";
      v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v14)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v14;
        if (!--v15)
          goto LABEL_86;
      }
      goto LABEL_21;
    }
    v16 = (const void *)__s1.__r_.__value_.__r.__words[0];
    v17 = "communication-waiting";
LABEL_20:
    if (!memcmp(v16, v17, __s1.__r_.__value_.__l.__size_))
      goto LABEL_86;
    goto LABEL_21;
  }
  if (v9 != 8)
    goto LABEL_21;
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v16 = (const void *)__s1.__r_.__value_.__r.__words[0];
    v17 = "simservs";
    goto LABEL_20;
  }
  if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    goto LABEL_86;
  v10 = &__s1;
  v11 = "simservs";
  v12 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  while (v10->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v11)
  {
    v10 = (std::string *)((char *)v10 + 1);
    ++v11;
    if (!--v12)
      goto LABEL_86;
  }
LABEL_21:
  v18 = qword_1ED70CC60;
  if (byte_1ED70CC6F >= 0)
    v18 = byte_1ED70CC6F;
  if (v9 == v18)
  {
    if (byte_1ED70CC6F >= 0)
      v19 = &XcapDocumentCommDiversion::kName;
    else
      v19 = (uint64_t *)XcapDocumentCommDiversion::kName;
    if ((v7 & 0x80) != 0)
    {
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v19, size))
        goto LABEL_86;
    }
    else
    {
      if (!v7)
        goto LABEL_86;
      v20 = &__s1;
      v21 = v6;
      while (v20->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v19)
      {
        v20 = (std::string *)((char *)v20 + 1);
        v19 = (uint64_t *)((char *)v19 + 1);
        if (!--v21)
          goto LABEL_86;
      }
    }
  }
  v22 = qword_1ED70C910;
  if (byte_1ED70C91F >= 0)
    v22 = byte_1ED70C91F;
  if (v9 == v22)
  {
    if (byte_1ED70C91F >= 0)
      v23 = &XcapDocumentOIP::kName;
    else
      v23 = (uint64_t *)XcapDocumentOIP::kName;
    if ((v7 & 0x80) != 0)
    {
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v23, size))
        goto LABEL_86;
    }
    else
    {
      if (!v7)
        goto LABEL_86;
      v24 = &__s1;
      v25 = v6;
      while (v24->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v23)
      {
        v24 = (std::string *)((char *)v24 + 1);
        v23 = (uint64_t *)((char *)v23 + 1);
        if (!--v25)
          goto LABEL_86;
      }
    }
  }
  v26 = qword_1ED70C928;
  if (byte_1ED70C937 >= 0)
    v26 = byte_1ED70C937;
  if (v9 == v26)
  {
    if (byte_1ED70C937 >= 0)
      v27 = &XcapDocumentOIR::kName;
    else
      v27 = (uint64_t *)XcapDocumentOIR::kName;
    if ((v7 & 0x80) != 0)
    {
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v27, size))
        goto LABEL_86;
    }
    else
    {
      if (!v7)
        goto LABEL_86;
      v28 = &__s1;
      v29 = v6;
      while (v28->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v27)
      {
        v28 = (std::string *)((char *)v28 + 1);
        v27 = (uint64_t *)((char *)v27 + 1);
        if (!--v29)
          goto LABEL_86;
      }
    }
  }
  v30 = qword_1ED70CC30;
  if (byte_1ED70CC3F >= 0)
    v30 = byte_1ED70CC3F;
  if (v9 == v30)
  {
    if (byte_1ED70CC3F >= 0)
      v31 = &XcapDocumentCallBarring::kNameOutgoing;
    else
      v31 = (uint64_t *)XcapDocumentCallBarring::kNameOutgoing;
    if ((v7 & 0x80) != 0)
    {
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v31, size))
        goto LABEL_86;
    }
    else
    {
      if (!v7)
        goto LABEL_86;
      v32 = &__s1;
      v33 = v6;
      while (v32->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v31)
      {
        v32 = (std::string *)((char *)v32 + 1);
        v31 = (uint64_t *)((char *)v31 + 1);
        if (!--v33)
          goto LABEL_86;
      }
    }
  }
  v34 = qword_1ED70CC18;
  if (byte_1ED70CC27 >= 0)
    v34 = byte_1ED70CC27;
  if (v9 != v34)
    goto LABEL_87;
  if (byte_1ED70CC27 >= 0)
    v35 = &XcapDocumentCallBarring::kNameIncoming;
  else
    v35 = (uint64_t *)XcapDocumentCallBarring::kNameIncoming;
  if ((v7 & 0x80) == 0)
  {
    if (v7)
    {
      v36 = &__s1;
      while (v36->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v35)
      {
        v36 = (std::string *)((char *)v36 + 1);
        v35 = (uint64_t *)((char *)v35 + 1);
        if (!--v6)
          goto LABEL_86;
      }
LABEL_87:
      if ((v7 & 0x80) == 0)
        return;
      goto LABEL_88;
    }
LABEL_86:
    bambi::XmlParserItem::parseChild(a1, a2, a3);
    LOBYTE(v7) = *((_BYTE *)&__s1.__r_.__value_.__s + 23);
    goto LABEL_87;
  }
  if (!memcmp(__s1.__r_.__value_.__l.__data_, v35, size))
    goto LABEL_86;
LABEL_88:
  operator delete(__s1.__r_.__value_.__l.__data_);
}

void sub_1BF16AB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void XcapDocumentSimservs::constructTree(XcapDocumentSimservs *this@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  BOOL v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  _BYTE v30[32];

  *a2 = 0;
  a2[1] = 0;
  v4 = (char *)this + 8;
  bambi::XmlTreeItem::makeNode((XcapDocumentSimservs *)((char *)this + 8), a2);
  v5 = (_QWORD *)*((_QWORD *)this + 11);
  v6 = (char *)this + 96;
  if (v5 != (_QWORD *)((char *)this + 96))
  {
    do
    {
      memset(v30, 0, sizeof(v30));
      if (*((char *)v5 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v30, (const std::string::value_type *)v5[4], v5[5]);
      }
      else
      {
        *(_OWORD *)v30 = *((_OWORD *)v5 + 2);
        *(_QWORD *)&v30[16] = v5[6];
      }
      *(_QWORD *)&v30[24] = v5[7];
      v28 = 0;
      v29 = 0;
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)&v30[24] + 128))(&v28);
      v7 = a2[1];
      v26 = *a2;
      v27 = (std::__shared_weak_count *)v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v24 = v28;
      v25 = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      (*(void (**)(char *, uint64_t *, uint64_t *))(*(_QWORD *)v4 + 56))(v4, &v26, &v24);
      v12 = v25;
      if (v25)
      {
        v13 = (unint64_t *)&v25->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = v27;
      if (v27)
      {
        v16 = (unint64_t *)&v27->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = v29;
      if (v29)
      {
        v19 = (unint64_t *)&v29->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if ((v30[23] & 0x80000000) != 0)
        operator delete(*(void **)v30);
      v21 = (char *)v5[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = *(char **)v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (char *)v5[2];
          v23 = *(_QWORD *)v22 == (_QWORD)v5;
          v5 = v22;
        }
        while (!v23);
      }
      v5 = v22;
    }
    while (v22 != v6);
  }
}

void sub_1BF16AD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'XcapDocumentSimservs::constructTree(XcapDocumentSimservs *this@<X0>, uint64_t *a2@<X8>)
{
  XcapDocumentSimservs::constructTree((XcapDocumentSimservs *)((char *)this - 8), a2);
}

uint64_t XcapDocumentSimservs::asString@<X0>(XcapDocumentSimservs *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  const std::locale::facet *v5;
  _QWORD *v6;
  char *v7;
  std::locale::id *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  char *v13;
  char *v14;
  BOOL v15;
  void *__p[2];
  unsigned __int8 v18;
  std::locale v19[2];
  __int128 v20;
  _OWORD v21[4];
  void *v22[2];
  __int128 v23;
  __int128 v24;
  _BYTE v25[144];
  uint64_t v26;
  std::locale v27;

  v26 = 0;
  v24 = 0u;
  memset(v25, 0, sizeof(v25));
  v23 = 0u;
  *(_OWORD *)v22 = 0u;
  memset(v21, 0, sizeof(v21));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"*** SIMSERVS DOCUMENT ***", 25);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(v19, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(v19);
  std::ostream::put();
  std::ostream::flush();
  v6 = (_QWORD *)*((_QWORD *)this + 11);
  v7 = (char *)this + 96;
  if (v6 != (_QWORD *)((char *)this + 96))
  {
    v8 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      *(_OWORD *)&v19[0].__locale_ = 0u;
      v20 = 0u;
      if (*((char *)v6 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v19, (const std::string::value_type *)v6[4], v6[5]);
      }
      else
      {
        *(_OWORD *)&v19[0].__locale_ = *((_OWORD *)v6 + 2);
        *(_QWORD *)&v20 = v6[6];
      }
      *((_QWORD *)&v20 + 1) = v6[7];
      (*(void (**)(void **__return_ptr))(**((_QWORD **)&v20 + 1) + 104))(__p);
      if ((v18 & 0x80u) == 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v10 = v18;
      else
        v10 = (uint64_t)__p[1];
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v9, v10);
      std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
      v12 = std::locale::use_facet(&v27, v8);
      ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
      std::locale::~locale(&v27);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v18 < 0)
        operator delete(__p[0]);
      if (SBYTE7(v20) < 0)
        operator delete(v19[0].__locale_);
      v13 = (char *)v6[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (char *)v6[2];
          v15 = *(_QWORD *)v14 == (_QWORD)v6;
          v6 = v14;
        }
        while (!v15);
      }
      v6 = v14;
    }
    while (v14 != v7);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v21 + 8, a2);
  *(_QWORD *)&v21[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v21 + *(_QWORD *)(*(_QWORD *)&v21[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v21[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v23) < 0)
    operator delete(v22[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v25);
}

void sub_1BF16B054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  std::locale::~locale(&a16);
  std::ostringstream::~ostringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t XcapDocumentSimservs::clone(XcapDocumentSimservs *this)
{
  uint64_t v2;
  std::string *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  BOOL v9;
  void *__p[2];
  __int128 v12;
  void **v13;

  v2 = operator new();
  *(_QWORD *)(v2 + 8) = off_1E78EC640;
  *(_QWORD *)v2 = &off_1E78CE278;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  std::vector<bambi::XmlTreeNs>::__init_with_size[abi:ne180100]<bambi::XmlTreeNs*,bambi::XmlTreeNs*>((_QWORD *)(v2 + 16), *((_QWORD *)this + 2), *((_QWORD *)this + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 4));
  v3 = (std::string *)(v2 + 40);
  if (*((char *)this + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
    *(_QWORD *)(v2 + 56) = *((_QWORD *)this + 7);
  }
  *(_OWORD *)(v2 + 64) = *((_OWORD *)this + 4);
  *(_BYTE *)(v2 + 80) = *((_BYTE *)this + 80);
  *(_QWORD *)v2 = &off_1E78E4C10;
  *(_QWORD *)(v2 + 8) = &unk_1E78E4CA8;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 88) = v2 + 96;
  *(_QWORD *)(v2 + 104) = 0;
  v4 = (_QWORD *)*((_QWORD *)this + 11);
  v5 = (char *)this + 96;
  if (v4 != (_QWORD *)((char *)this + 96))
  {
    do
    {
      *(_OWORD *)__p = 0u;
      v12 = 0u;
      if (*((char *)v4 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v4[4], v4[5]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v4 + 2);
        *(_QWORD *)&v12 = v4[6];
      }
      *((_QWORD *)&v12 + 1) = v4[7];
      v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v12 + 1) + 96))(*((_QWORD *)&v12 + 1));
      v13 = __p;
      std::__tree<std::__value_type<std::string,XcapDocumentBase *>,std::__map_value_compare<std::string,std::__value_type<std::string,XcapDocumentBase *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,XcapDocumentBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v2 + 88), __p, (__int128 **)&v13)[7] = v6;
      if (SBYTE7(v12) < 0)
        operator delete(__p[0]);
      v7 = (char *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char *)v4[2];
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != v5);
  }
  return v2;
}

void sub_1BF16B280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  MEMORY[0x1C3B87100](v14, 0x10F3C40D88640EDLL);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,XcapDocumentBase *>,std::__map_value_compare<std::string,std::__value_type<std::string,XcapDocumentBase *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,XcapDocumentBase *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, __int128 **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  _QWORD *v9;
  __int128 *v10;
  uint64_t *v11;
  std::string *v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_9:
    v10 = *a3;
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = (std::string *)(v11 + 4);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v13 = *v10;
      v11[6] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    v11[7] = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    *v6 = v11;
    v14 = (uint64_t *)**a1;
    v15 = v11;
    if (v14)
    {
      *a1 = v14;
      v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = v5 + 4;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0)
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_9;
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, a2) & 0x80) == 0)
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_9;
  }
  v11 = *v6;
  if (!*v6)
    goto LABEL_9;
  return v11;
}

void sub_1BF16B3FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void IMSXcapManager::~IMSXcapManager(IMSXcapManager *this)
{
  char *v2;
  _QWORD *v3;
  char *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t i;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  BOOL v18;
  void *v19[2];
  __int128 v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;

  *(_QWORD *)this = &off_1E78E4D38;
  *((_QWORD *)this + 1) = &unk_1E78E4D80;
  v2 = (char *)this + 32;
  v3 = (_QWORD *)*((_QWORD *)this + 4);
  v4 = (char *)this + 40;
  if (v3 != (_QWORD *)((char *)this + 40))
  {
    do
    {
      *(_OWORD *)v19 = 0u;
      v20 = 0u;
      if (*((char *)v3 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v19, (const std::string::value_type *)v3[4], v3[5]);
      }
      else
      {
        *(_OWORD *)v19 = *((_OWORD *)v3 + 2);
        *(_QWORD *)&v20 = v3[6];
      }
      *((_QWORD *)&v20 + 1) = v3[7];
      v5 = ims::getValueFromMap<std::string,XcapCarrierHandle *>((uint64_t)v2, v19, 0);
      v6 = v5;
      if (v5)
      {
        v7 = v5 + 52;
        for (i = v5[53]; (uint64_t *)i != v7; i = *(_QWORD *)(i + 8))
        {
          v9 = *(uint64_t **)(i + 16);
          if (v9)
          {
            v10 = AuthQueueItem<BambiClient>::~AuthQueueItem(v9);
            MEMORY[0x1C3B87100](v10, 0x1032C403FAF6B48);
          }
        }
        if (v6[54])
        {
          v12 = v6[52];
          v11 = (uint64_t *)v6[53];
          v13 = *v11;
          *(_QWORD *)(v13 + 8) = *(_QWORD *)(v12 + 8);
          **(_QWORD **)(v12 + 8) = v13;
          v6[54] = 0;
          if (v11 != v7)
          {
            do
            {
              v14 = (uint64_t *)v11[1];
              operator delete(v11);
              v11 = v14;
            }
            while (v14 != v7);
          }
        }
        (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v23, "xcap");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v15 = ImsLogger::error(ims::_logger, (uint64_t)v23, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Unable to deinitialize unknown stack ID ", 40);
        *(_BYTE *)(v15 + 17) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v15 + 32))(v15, v19);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v15 + 17) = 0;
        if (v22 < 0)
          operator delete(__p[0]);
        if (v24 < 0)
          operator delete(v23[0]);
      }
      if (**((_QWORD **)&v20 + 1))
        (*(void (**)(_QWORD))(***((_QWORD ***)&v20 + 1) + 8))(**((_QWORD **)&v20 + 1));
      if (SBYTE7(v20) < 0)
        operator delete(v19[0]);
      v16 = (char *)v3[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(char **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (char *)v3[2];
          v18 = *(_QWORD *)v17 == (_QWORD)v3;
          v3 = v17;
        }
        while (!v18);
      }
      v3 = v17;
    }
    while (v17 != v4);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 5));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  IMSXcapManager::~IMSXcapManager(this);
  JUMPOUT(0x1C3B87100);
}

void sub_1BF16B68C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  __clang_call_terminate(a1);
}

void `non-virtual thunk to'IMSXcapManager::~IMSXcapManager(IMSXcapManager *this)
{
  IMSXcapManager::~IMSXcapManager((IMSXcapManager *)((char *)this - 8));
}

{
  IMSXcapManager::~IMSXcapManager((IMSXcapManager *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void IMSXcapManager::initialize(uint64_t a1, uint64_t a2, uint64_t a3, ImsPrefs *a4)
{
  _QWORD **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  _QWORD *v15;
  uint64_t *v16;
  std::string *v17;
  _QWORD *v18;
  uint64_t *v19;
  void **ImpiKey;
  ImsPrefs *v21;
  void **v22;
  void **DomainKey;
  ImsPrefs *v24;
  void **v25;
  void **DeviceIMEIKey;
  ImsPrefs *v27;
  void **v28;
  void **XcapUtInterfaceTypeKey;
  ImsPrefs *v30;
  void *v31;
  int v32;
  void **v33;
  int v34;
  void **v35;
  unsigned int *v36;
  unsigned int v37;
  BOOL v38;
  int v39;
  int v40;
  void **XcapImeiHeaderNameInBsfRequestKey;
  std::string *v42;
  void **XcapAuidKey;
  std::string *v44;
  void **XcapContentTypeKey;
  std::string *v46;
  void **XcapRequestTimeoutValueKey;
  void *v48;
  ImsPrefs *v49;
  void **XcapUnsolicitedRequestDelayKey;
  void *v51;
  ImsPrefs *v52;
  void **XcapReuseAuthCredentialsKey;
  void *v54;
  unint64_t v55;
  void **XcapHttpVersionKey;
  std::string *v57;
  void **XcapNafUseSecureTransportKey;
  ImsPrefs *v59;
  void **XcapUseSecureTransportKey;
  void **v61;
  void *v62;
  unint64_t v63;
  void **XcapNafHostKey;
  std::string *v65;
  void **XcapNafPortKey;
  ImsPrefs *v67;
  void **v68;
  void *v69;
  uint64_t v70;
  void **XcapBsfUseSecureTransportKey;
  ImsPrefs *v72;
  void **v73;
  void **v74;
  void *v75;
  unint64_t v76;
  void **XcapBsfHostKey;
  std::string *v78;
  void **XcapBsfPortKey;
  ImsPrefs *v80;
  void **v81;
  void *v82;
  uint64_t v83;
  void **XcapPreferredGbaModeKey;
  ImsPrefs *v85;
  void **XcapImpuRankKey;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  ImsPrefs *v100;
  void **XcapForbiddenHttpErrorCodesKey;
  ImsPrefs *v102;
  void **XcapDisableOnNetworkErrorKey;
  void *v104;
  unint64_t v105;
  void **AllCDIVRulesKey;
  void *v107;
  unint64_t v108;
  void **XcapServeMultipleCDIVRulesPerRequestKey;
  void *v110;
  unint64_t v111;
  void **XcapCFErasureSupportKey;
  void *v113;
  unint64_t v114;
  void **XcapCFMediaTagSupportKey;
  void *v116;
  unint64_t v117;
  void **XcapCBSupportKey;
  void *v119;
  unint64_t v120;
  void **XcapCBMediaTagSupportKey;
  void *v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  void *v128;
  uint64_t v129;
  dispatch_time_t v130;
  uint64_t v131;
  dispatch_time_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  void *__p[2];
  __int128 v143;
  __int128 v144;
  void *v145[2];
  __int128 v146;
  __int128 v147;
  __int128 v148;
  _BYTE v149[144];
  uint64_t v150;
  void *v151[2];
  char v152;
  std::string v153;

  v8 = (_QWORD **)(a1 + 32);
  v9 = (uint64_t)ims::getValueFromMap<std::string,XcapCarrierHandle *>(a1 + 32, (void **)a3, 0);
  v10 = (_QWORD *)v9;
  if (!v9)
  {
    v10 = (_QWORD *)operator new();
    *(_OWORD *)v10 = 0u;
    *((_OWORD *)v10 + 1) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 6) = 0u;
    *((_OWORD *)v10 + 7) = 0u;
    *((_OWORD *)v10 + 8) = 0u;
    *((_OWORD *)v10 + 9) = 0u;
    *((_OWORD *)v10 + 10) = 0u;
    *((_OWORD *)v10 + 11) = 0u;
    *((_OWORD *)v10 + 12) = 0u;
    *((_OWORD *)v10 + 13) = 0u;
    *((_OWORD *)v10 + 14) = 0u;
    *((_OWORD *)v10 + 15) = 0u;
    *((_OWORD *)v10 + 16) = 0u;
    *((_OWORD *)v10 + 17) = 0u;
    *((_OWORD *)v10 + 18) = 0u;
    *((_OWORD *)v10 + 19) = 0u;
    *((_OWORD *)v10 + 20) = 0u;
    *((_OWORD *)v10 + 21) = 0u;
    *((_OWORD *)v10 + 22) = 0u;
    *((_OWORD *)v10 + 23) = 0u;
    *((_OWORD *)v10 + 24) = 0u;
    *((_OWORD *)v10 + 25) = 0u;
    *((_OWORD *)v10 + 26) = 0u;
    v10[54] = 0;
    SipImpuRank::SipImpuRank((SipImpuRank *)(v10 + 46));
    v10[52] = v10 + 52;
    v10[53] = v10 + 52;
    v10[54] = 0;
    v11 = operator new();
    XcapClient::XcapClient(v11, (__int128 *)a3, a1);
    *v10 = v11;
    v13 = (uint64_t **)(a1 + 40);
    v12 = *(uint64_t **)(a1 + 40);
    if (v12)
    {
      while (1)
      {
        while (1)
        {
          v14 = (uint64_t **)v12;
          v15 = v12 + 4;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a3, (void **)v12 + 4) & 0x80) == 0)break;
          v12 = *v14;
          v13 = v14;
          if (!*v14)
            goto LABEL_10;
        }
        v9 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v15, (void **)a3);
        if ((v9 & 0x80) == 0)
          break;
        v13 = v14 + 1;
        v12 = v14[1];
        if (!v12)
          goto LABEL_10;
      }
      v16 = *v13;
      if (*v13)
        goto LABEL_16;
    }
    else
    {
      v14 = (uint64_t **)(a1 + 40);
    }
LABEL_10:
    v16 = (uint64_t *)operator new(0x40uLL);
    v17 = (std::string *)(v16 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v16[6] = *(_QWORD *)(a3 + 16);
    }
    v16[7] = 0;
    *v16 = 0;
    v16[1] = 0;
    v16[2] = (uint64_t)v14;
    *v13 = v16;
    v18 = (_QWORD *)**v8;
    v19 = v16;
    if (v18)
    {
      *v8 = v18;
      v19 = *v13;
    }
    v9 = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 40), v19);
    ++*(_QWORD *)(a1 + 48);
LABEL_16:
    v16[7] = (uint64_t)v10;
  }
  ImpiKey = (void **)ImsPrefs::getImpiKey((ImsPrefs *)v9);
  ImsPrefs::stringValue(a4, ImpiKey);
  stringOrDefault((std::string *)__p, (uint64_t)&v153, a2 + 32);
  v22 = (void **)(v10 + 5);
  if (*((char *)v10 + 63) < 0)
    operator delete(*v22);
  *(_OWORD *)v22 = *(_OWORD *)__p;
  v10[7] = v143;
  BYTE7(v143) = 0;
  LOBYTE(__p[0]) = 0;
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  if (v10 + 1 != (_QWORD *)a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v10 + 2), *(std::string **)(a2 + 8), *(__int128 **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  DomainKey = (void **)ImsPrefs::getDomainKey(v21);
  ImsPrefs::stringValue(a4, DomainKey);
  stringOrDefault((std::string *)__p, (uint64_t)&v153, a2 + 56);
  v25 = (void **)(v10 + 8);
  if (*((char *)v10 + 87) < 0)
    operator delete(*v25);
  *(_OWORD *)v25 = *(_OWORD *)__p;
  v10[10] = v143;
  BYTE7(v143) = 0;
  LOBYTE(__p[0]) = 0;
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  DeviceIMEIKey = (void **)ImsPrefs::getDeviceIMEIKey(v24);
  ImsPrefs::stringValue(a4, DeviceIMEIKey);
  stringOrDefault((std::string *)__p, (uint64_t)&v153, a2 + 80);
  v28 = (void **)(v10 + 11);
  if (*((char *)v10 + 111) < 0)
    operator delete(*v28);
  *(_OWORD *)v28 = *(_OWORD *)__p;
  v10[13] = v143;
  BYTE7(v143) = 0;
  LOBYTE(__p[0]) = 0;
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  *((_BYTE *)v10 + 200) = *(_BYTE *)(a2 + 192);
  XcapUtInterfaceTypeKey = (void **)ImsPrefs::getXcapUtInterfaceTypeKey(v27);
  v30 = (ImsPrefs *)ImsPrefs::stringValue(a4, XcapUtInterfaceTypeKey);
  v31 = (void *)BYTE7(v143);
  v32 = SBYTE7(v143);
  if (SBYTE7(v143) < 0)
    v31 = __p[1];
  if (v31 == (void *)3)
  {
    v35 = (void **)__p[0];
    if ((SBYTE7(v143) & 0x80u) == 0)
      v35 = __p;
    if (*(unsigned __int16 *)v35 ^ 0x6D49 | *((unsigned __int8 *)v35 + 2) ^ 0x73)
      v34 = 2;
    else
      v34 = 1;
  }
  else if (v31 == (void *)4)
  {
    v36 = (unsigned int *)__p[0];
    if ((SBYTE7(v143) & 0x80u) == 0)
      v36 = (unsigned int *)__p;
    v37 = bswap32(*v36);
    v38 = v37 >= 0x54657374;
    v39 = v37 > 0x54657374;
    v40 = !v38;
    if (v39 == v40)
      v34 = 3;
    else
      v34 = 2;
  }
  else if (v31 == (void *)8)
  {
    v33 = (void **)__p[0];
    if ((SBYTE7(v143) & 0x80u) == 0)
      v33 = __p;
    v34 = 2 * (*v33 != (void *)0x74656E7265746E49);
  }
  else
  {
    v34 = 2;
  }
  *((_DWORD *)v10 + 2) = v34;
  if (v32 < 0)
    operator delete(__p[0]);
  XcapImeiHeaderNameInBsfRequestKey = (void **)ImsPrefs::getXcapImeiHeaderNameInBsfRequestKey(v30);
  ImsPrefs::stringValue(a4, XcapImeiHeaderNameInBsfRequestKey);
  v42 = std::string::operator=((std::string *)(v10 + 22), (const std::string *)__p);
  if (SBYTE7(v143) < 0)
    operator delete(__p[0]);
  XcapAuidKey = (void **)ImsPrefs::getXcapAuidKey((ImsPrefs *)v42);
  ImsPrefs::stringValue(a4, XcapAuidKey);
  v44 = std::string::operator=((std::string *)v10 + 10, (const std::string *)__p);
  if (SBYTE7(v143) < 0)
    operator delete(__p[0]);
  XcapContentTypeKey = (void **)ImsPrefs::getXcapContentTypeKey((ImsPrefs *)v44);
  ImsPrefs::stringValue(a4, XcapContentTypeKey);
  v46 = std::string::operator=((std::string *)v10 + 11, (const std::string *)__p);
  if (SBYTE7(v143) < 0)
    operator delete(__p[0]);
  XcapRequestTimeoutValueKey = (void **)ImsPrefs::getXcapRequestTimeoutValueKey((ImsPrefs *)v46);
  v48 = ImsPrefs::prefWithKey(a4, XcapRequestTimeoutValueKey);
  if (v48)
    v49 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v48 + 56))(v48);
  else
    v49 = (ImsPrefs *)*((unsigned int *)XcapRequestTimeoutValueKey + 15);
  *((_DWORD *)v10 + 72) = (_DWORD)v49;
  XcapUnsolicitedRequestDelayKey = (void **)ImsPrefs::getXcapUnsolicitedRequestDelayKey(v49);
  v51 = ImsPrefs::prefWithKey(a4, XcapUnsolicitedRequestDelayKey);
  if (v51)
    v52 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v51 + 56))(v51);
  else
    v52 = (ImsPrefs *)*((unsigned int *)XcapUnsolicitedRequestDelayKey + 15);
  *((_DWORD *)v10 + 73) = (_DWORD)v52;
  XcapReuseAuthCredentialsKey = (void **)ImsPrefs::getXcapReuseAuthCredentialsKey(v52);
  v54 = ImsPrefs::prefWithKey(a4, XcapReuseAuthCredentialsKey);
  if (v54)
    v55 = (*(uint64_t (**)(void *))(*(_QWORD *)v54 + 40))(v54);
  else
    v55 = *((_BYTE *)XcapReuseAuthCredentialsKey + 57) != 0;
  *((_BYTE *)v10 + 296) = v55;
  XcapHttpVersionKey = (void **)ImsPrefs::getXcapHttpVersionKey((ImsPrefs *)v55);
  ImsPrefs::stringValue(a4, XcapHttpVersionKey);
  std::string::operator=((std::string *)v10 + 14, (const std::string *)__p);
  if (SBYTE7(v143) < 0)
    operator delete(__p[0]);
  v57 = std::string::operator=((std::string *)(v10 + 26), (const std::string *)(a2 + 200));
  XcapNafUseSecureTransportKey = (void **)ImsPrefs::getXcapNafUseSecureTransportKey((ImsPrefs *)v57);
  v59 = (ImsPrefs *)ImsPrefs::prefWithKey(a4, XcapNafUseSecureTransportKey);
  if (v59)
    XcapUseSecureTransportKey = (void **)ImsPrefs::getXcapNafUseSecureTransportKey(v59);
  else
    XcapUseSecureTransportKey = (void **)ImsPrefs::getXcapUseSecureTransportKey(0);
  v61 = XcapUseSecureTransportKey;
  v62 = ImsPrefs::prefWithKey(a4, XcapUseSecureTransportKey);
  if (v62)
    v63 = (*(uint64_t (**)(void *))(*(_QWORD *)v62 + 40))(v62);
  else
    v63 = *((_BYTE *)v61 + 57) != 0;
  *((_BYTE *)v10 + 140) = v63;
  XcapNafHostKey = (void **)ImsPrefs::getXcapNafHostKey((ImsPrefs *)v63);
  ImsPrefs::stringValue(a4, XcapNafHostKey);
  v65 = std::string::operator=((std::string *)(v10 + 14), (const std::string *)__p);
  if (SBYTE7(v143) < 0)
    operator delete(__p[0]);
  XcapNafPortKey = (void **)ImsPrefs::getXcapNafPortKey((ImsPrefs *)v65);
  v67 = (ImsPrefs *)ImsPrefs::prefWithKey(a4, XcapNafPortKey);
  if (v67)
  {
    v68 = (void **)ImsPrefs::getXcapNafPortKey(v67);
    v69 = ImsPrefs::prefWithKey(a4, v68);
    if (v69)
      v70 = (*(uint64_t (**)(void *))(*(_QWORD *)v69 + 56))(v69);
    else
      v70 = *((unsigned int *)v68 + 15);
  }
  else if (*((_BYTE *)v10 + 140))
  {
    v70 = 443;
  }
  else
  {
    v70 = 80;
  }
  *((_DWORD *)v10 + 34) = v70;
  XcapBsfUseSecureTransportKey = (void **)ImsPrefs::getXcapBsfUseSecureTransportKey((ImsPrefs *)v70);
  v72 = (ImsPrefs *)ImsPrefs::prefWithKey(a4, XcapBsfUseSecureTransportKey);
  if (v72)
    v73 = (void **)ImsPrefs::getXcapBsfUseSecureTransportKey(v72);
  else
    v73 = (void **)ImsPrefs::getXcapUseSecureTransportKey(0);
  v74 = v73;
  v75 = ImsPrefs::prefWithKey(a4, v73);
  if (v75)
    v76 = (*(uint64_t (**)(void *))(*(_QWORD *)v75 + 40))(v75);
  else
    v76 = *((_BYTE *)v74 + 57) != 0;
  *((_BYTE *)v10 + 172) = v76;
  XcapBsfHostKey = (void **)ImsPrefs::getXcapBsfHostKey((ImsPrefs *)v76);
  ImsPrefs::stringValue(a4, XcapBsfHostKey);
  v78 = std::string::operator=((std::string *)v10 + 6, (const std::string *)__p);
  if (SBYTE7(v143) < 0)
    operator delete(__p[0]);
  XcapBsfPortKey = (void **)ImsPrefs::getXcapBsfPortKey((ImsPrefs *)v78);
  v80 = (ImsPrefs *)ImsPrefs::prefWithKey(a4, XcapBsfPortKey);
  if (v80)
  {
    v81 = (void **)ImsPrefs::getXcapBsfPortKey(v80);
    v82 = ImsPrefs::prefWithKey(a4, v81);
    if (v82)
      v83 = (*(uint64_t (**)(void *))(*(_QWORD *)v82 + 56))(v82);
    else
      v83 = *((unsigned int *)v81 + 15);
  }
  else if (*((_BYTE *)v10 + 172))
  {
    v83 = 443;
  }
  else
  {
    v83 = 80;
  }
  *((_DWORD *)v10 + 42) = v83;
  v139 = 0;
  v140 = 0;
  v141 = 0;
  XcapPreferredGbaModeKey = (void **)ImsPrefs::getXcapPreferredGbaModeKey((ImsPrefs *)v83);
  v85 = (ImsPrefs *)ImsPrefs::stringValue(a4, XcapPreferredGbaModeKey);
  *((_DWORD *)v10 + 58) = *((_BYTE *)v10 + 200) == 0;
  v136 = 0;
  v137 = 0;
  v138 = 0;
  XcapImpuRankKey = (void **)ImsPrefs::getXcapImpuRankKey(v85);
  ImsPrefs::stringValue(a4, XcapImpuRankKey);
  v150 = 0;
  v148 = 0u;
  memset(v149, 0, sizeof(v149));
  v146 = 0u;
  v147 = 0u;
  v144 = 0u;
  *(_OWORD *)v145 = 0u;
  *(_OWORD *)__p = 0u;
  v143 = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"MDN@domain", 10);
  v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)",", 1);
  v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"MDN@other", 9);
  v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)",", 1);
  v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"IMSI@domain", 11);
  v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)",", 1);
  v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"IMSI@3gpp", 9);
  v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)",", 1);
  v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"IMSI@other", 10);
  v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)",", 1);
  v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"sip:other@domain", 16);
  v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"sip:other", 9);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[1], &v153);
  __p[0] = *(void **)MEMORY[0x1E0DE4F60];
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  __p[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  if (SHIBYTE(v147) < 0)
    operator delete(*((void **)&v146 + 1));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  v99 = MEMORY[0x1C3B8707C](v149);
  if (!SipImpuRank::_setRanksFromString(v99, (int **)v10 + 46, (uint64_t)&v153))
    SipImpuRank::resetNormalRanksToDefault((SipImpuRank *)(v10 + 46));
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  std::vector<std::string>::__clear[abi:ne180100](v10 + 38);
  v133 = 0;
  v134 = 0;
  v135 = 0;
  XcapForbiddenHttpErrorCodesKey = (void **)ImsPrefs::getXcapForbiddenHttpErrorCodesKey(v100);
  v102 = (ImsPrefs *)ImsPrefs::stringValue(a4, XcapForbiddenHttpErrorCodesKey);
  XcapDisableOnNetworkErrorKey = (void **)ImsPrefs::getXcapDisableOnNetworkErrorKey(v102);
  v104 = ImsPrefs::prefWithKey(a4, XcapDisableOnNetworkErrorKey);
  if (v104)
    v105 = (*(uint64_t (**)(void *))(*(_QWORD *)v104 + 40))(v104);
  else
    v105 = *((_BYTE *)XcapDisableOnNetworkErrorKey + 57) != 0;
  *((_BYTE *)v10 + 328) = v105;
  AllCDIVRulesKey = (void **)ImsPrefs::getXcapFetchAllCDIVRulesKey((ImsPrefs *)v105);
  v107 = ImsPrefs::prefWithKey(a4, AllCDIVRulesKey);
  if (v107)
    v108 = (*(uint64_t (**)(void *))(*(_QWORD *)v107 + 40))(v107);
  else
    v108 = *((_BYTE *)AllCDIVRulesKey + 57) != 0;
  *((_BYTE *)v10 + 360) = v108;
  XcapServeMultipleCDIVRulesPerRequestKey = (void **)ImsPrefs::getXcapServeMultipleCDIVRulesPerRequestKey((ImsPrefs *)v108);
  v110 = ImsPrefs::prefWithKey(a4, XcapServeMultipleCDIVRulesPerRequestKey);
  if (v110)
    v111 = (*(uint64_t (**)(void *))(*(_QWORD *)v110 + 40))(v110);
  else
    v111 = *((_BYTE *)XcapServeMultipleCDIVRulesPerRequestKey + 57) != 0;
  *((_BYTE *)v10 + 361) = v111;
  XcapCFErasureSupportKey = (void **)ImsPrefs::getXcapCFErasureSupportKey((ImsPrefs *)v111);
  v113 = ImsPrefs::prefWithKey(a4, XcapCFErasureSupportKey);
  if (v113)
    v114 = (*(uint64_t (**)(void *))(*(_QWORD *)v113 + 40))(v113);
  else
    v114 = *((_BYTE *)XcapCFErasureSupportKey + 57) != 0;
  *((_BYTE *)v10 + 362) = v114;
  XcapCFMediaTagSupportKey = (void **)ImsPrefs::getXcapCFMediaTagSupportKey((ImsPrefs *)v114);
  v116 = ImsPrefs::prefWithKey(a4, XcapCFMediaTagSupportKey);
  if (v116)
    v117 = (*(uint64_t (**)(void *))(*(_QWORD *)v116 + 40))(v116);
  else
    v117 = *((_BYTE *)XcapCFMediaTagSupportKey + 57) != 0;
  *((_BYTE *)v10 + 363) = v117;
  XcapCBSupportKey = (void **)ImsPrefs::getXcapCBSupportKey((ImsPrefs *)v117);
  v119 = ImsPrefs::prefWithKey(a4, XcapCBSupportKey);
  if (v119)
    v120 = (*(uint64_t (**)(void *))(*(_QWORD *)v119 + 40))(v119);
  else
    v120 = *((_BYTE *)XcapCBSupportKey + 57) != 0;
  *((_BYTE *)v10 + 364) = v120;
  XcapCBMediaTagSupportKey = (void **)ImsPrefs::getXcapCBMediaTagSupportKey((ImsPrefs *)v120);
  v122 = ImsPrefs::prefWithKey(a4, XcapCBMediaTagSupportKey);
  if (v122)
    v123 = (*(uint64_t (**)(void *))(*(_QWORD *)v122 + 40))(v122);
  else
    v123 = *((_BYTE *)XcapCBMediaTagSupportKey + 57) != 0;
  *((_BYTE *)v10 + 365) = v123;
  std::string::basic_string[abi:ne180100]<0>(__p, "xcap");
  std::string::basic_string[abi:ne180100]<0>(&v153, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v124 = ImsLogger::info(ims::_logger, (uint64_t)__p, (uint64_t)&v153);
  IMSXcapManager::printConfig(v124, v124, (uint64_t)v10);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  if (SBYTE7(v143) < 0)
    operator delete(__p[0]);
  if (((*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v10 + 24))(*v10, v10 + 1) & 1) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "xcap");
    std::string::basic_string[abi:ne180100]<0>(&v153, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v125 = ImsLogger::info(ims::_logger, (uint64_t)__p, (uint64_t)&v153);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v125 + 8), (uint64_t)"Successfully initialized XCAP client. Ready to process requests", 63);
    *(_BYTE *)(v125 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v125 + 64))(v125, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v125 + 17) = 0;
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v153.__r_.__value_.__l.__data_);
    if (SBYTE7(v143) < 0)
      operator delete(__p[0]);
    memset(&v153, 0, sizeof(v153));
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v153, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v153 = *(std::string *)a3;
    v128 = (void *)MEMORY[0x1E0C809B0];
    if (*((_DWORD *)v10 + 73))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "xcap");
      std::string::basic_string[abi:ne180100]<0>(v151, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v129 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v151);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v129 + 8), (uint64_t)"Schedule unsolicited CF request [in ", 36);
      *(_BYTE *)(v129 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v129 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v129 + 8), (uint64_t)" seconds] to fetch all Rule Ids", 31);
      *(_BYTE *)(v129 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v129 + 64))(v129, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v129 + 17) = 0;
      if (v152 < 0)
        operator delete(v151[0]);
      if (SBYTE7(v143) < 0)
        operator delete(__p[0]);
      v130 = dispatch_time(0, 1000000 * (1000 * *((_DWORD *)v10 + 73)));
      __p[0] = v128;
      __p[1] = (void *)1174405120;
      *(_QWORD *)&v143 = ___ZN14IMSXcapManager37_triggerUnsolicitedCallForwardRequestEP17XcapCarrierHandleRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke;
      *((_QWORD *)&v143 + 1) = &__block_descriptor_tmp_99;
      *(_QWORD *)&v144 = a1;
      *((_QWORD *)&v144 + 1) = v10;
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v145, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)v145 = *(_OWORD *)&v153.__r_.__value_.__l.__data_;
        *(_QWORD *)&v146 = *((_QWORD *)&v153.__r_.__value_.__l + 2);
      }
      dispatch_after(v130, MEMORY[0x1E0C80D38], __p);
      if (SBYTE7(v146) < 0)
        operator delete(v145[0]);
    }
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v153.__r_.__value_.__l.__data_);
    memset(&v153, 0, sizeof(v153));
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v153, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v153 = *(std::string *)a3;
    if (*((_BYTE *)v10 + 364) && *((_DWORD *)v10 + 73))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "xcap");
      std::string::basic_string[abi:ne180100]<0>(v151, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v131 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v151);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v131 + 8), (uint64_t)"Schedule unsolicited CB request [in ", 36);
      *(_BYTE *)(v131 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v131 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v131 + 8), (uint64_t)" seconds] to fetch all Rule Ids", 31);
      *(_BYTE *)(v131 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v131 + 64))(v131, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v131 + 17) = 0;
      if (v152 < 0)
        operator delete(v151[0]);
      if (SBYTE7(v143) < 0)
        operator delete(__p[0]);
      v132 = dispatch_time(0, 1000000 * (1000 * *((_DWORD *)v10 + 73)));
      __p[0] = v128;
      __p[1] = (void *)1174405120;
      *(_QWORD *)&v143 = ___ZN14IMSXcapManager37_triggerUnsolicitedCallBarringRequestEP17XcapCarrierHandleRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke;
      *((_QWORD *)&v143 + 1) = &__block_descriptor_tmp_104_2;
      *(_QWORD *)&v144 = a1;
      *((_QWORD *)&v144 + 1) = v10;
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v145, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)v145 = *(_OWORD *)&v153.__r_.__value_.__l.__data_;
        *(_QWORD *)&v146 = *((_QWORD *)&v153.__r_.__value_.__l + 2);
      }
      dispatch_after(v132, MEMORY[0x1E0C80D38], __p);
      if (SBYTE7(v146) < 0)
        operator delete(v145[0]);
    }
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    {
      v127 = (void *)v153.__r_.__value_.__r.__words[0];
      goto LABEL_175;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "xcap");
    std::string::basic_string[abi:ne180100]<0>(&v153, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v126 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)&v153);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v126 + 8), (uint64_t)"Failed to initialize Bambi Xcap Client", 38);
    *(_BYTE *)(v126 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v126 + 64))(v126, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v126 + 17) = 0;
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v153.__r_.__value_.__l.__data_);
    if (SBYTE7(v143) < 0)
    {
      v127 = __p[0];
LABEL_175:
      operator delete(v127);
    }
  }
  if (SHIBYTE(v135) < 0)
    operator delete(v133);
  if (SHIBYTE(v138) < 0)
    operator delete(v136);
  if (SHIBYTE(v141) < 0)
    operator delete(v139);
}

void sub_1BF16C84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 89) < 0)
    operator delete(*(void **)(v33 - 112));
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void *ims::getValueFromMap<std::string,XcapCarrierHandle *>(uint64_t a1, void **a2, uint64_t a3)
{
  void **v5;
  _QWORD *v6;
  void **v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  v5 = (void **)(a1 + 8);
  v6 = *(_QWORD **)(a1 + 8);
  if (!v6)
    goto LABEL_12;
  v7 = (void **)(a1 + 8);
  do
  {
    v8 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v6 + 4, a2);
    if (v8 >= 0)
      v9 = v6;
    else
      v9 = v6 + 1;
    if (v8 >= 0)
      v7 = (void **)v6;
    v6 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v7 != v5
    && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v7 + 4) & 0x80) == 0)
  {
    return v7[7];
  }
LABEL_12:
  std::string::basic_string[abi:ne180100]<0>(v14, "rtp.util");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::debug(ims::_logger, (uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"getValueFromMap", 15);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" Object not found [key=", 23);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 32))(v10, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (v13 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  return (void *)a3;
}

void sub_1BF16CB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void stringOrDefault(std::string *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3)
    a3 = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
}

uint64_t IMSXcapManager::printConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *v5;
  int v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const std::string::value_type **v11;
  std::string::size_type v12;
  const char *v13;
  uint64_t v14;
  const std::string::value_type **v15;
  std::string::size_type v16;
  const char *v17;
  uint64_t v18;
  _QWORD *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t result;
  void *v40[2];
  char v41;
  std::string __p;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"****************** XCAP Config ***************", 46);
  *(_BYTE *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"SIM Type: ", 10);
  *(_BYTE *)(a2 + 17) = 0;
  if (*(_BYTE *)(a3 + 200))
    v5 = "ISIM";
  else
    v5 = "USIM";
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)v5, 4);
  *(_BYTE *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"IMPI: ", 6);
  *(_BYTE *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3 + 40);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"DOMAIN: ", 8);
  *(_BYTE *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3 + 64);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"IMEI: ", 6);
  *(_BYTE *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3 + 88);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"AUID: ", 6);
  *(_BYTE *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3 + 240);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"Content Type: ", 14);
  *(_BYTE *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3 + 264);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"Connection Service Type: ", 25);
  *(_BYTE *)(a2 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, off_1E78E5190[*(int *)(a3 + 8)]);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a2 + 32))(a2, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"GBA Mode: ", 10);
  *(_BYTE *)(a2 + 17) = 0;
  v6 = *(_DWORD *)(a3 + 232);
  if (v6)
    v7 = "GBA_ME";
  else
    v7 = "GBA_U";
  if (v6)
    v8 = 6;
  else
    v8 = 5;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)v7, v8);
  *(_BYTE *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"Reuse Auth Credentials ? ", 25);
  *(_BYTE *)(a2 + 17) = 0;
  if (*(_BYTE *)(a3 + 296))
    v9 = "Yes";
  else
    v9 = "No";
  if (*(_BYTE *)(a3 + 296))
    v10 = 3;
  else
    v10 = 2;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)v9, v10);
  *(_BYTE *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"NAF: ", 5);
  *(_BYTE *)(a2 + 17) = 0;
  v11 = (const std::string::value_type **)(a3 + 112);
  if (*(char *)(a3 + 135) < 0)
  {
    v12 = *(_QWORD *)(a3 + 120);
    if (v12)
    {
      std::string::__init_copy_ctor_external(&__p, *v11, v12);
      goto LABEL_24;
    }
  }
  else if (*(_BYTE *)(a3 + 135))
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v11;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 128);
    goto LABEL_24;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "<DEFAULT>");
LABEL_24:
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a2 + 32))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)":", 1);
  *(_BYTE *)(a2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)":", 1);
  *(_BYTE *)(a2 + 17) = 0;
  if (*(_BYTE *)(a3 + 140))
    v13 = "Secure";
  else
    v13 = "Insecure";
  if (*(_BYTE *)(a3 + 140))
    v14 = 6;
  else
    v14 = 8;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)v13, v14);
  *(_BYTE *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"BSF: ", 5);
  *(_BYTE *)(a2 + 17) = 0;
  v15 = (const std::string::value_type **)(a3 + 144);
  if (*(char *)(a3 + 167) < 0)
  {
    v16 = *(_QWORD *)(a3 + 152);
    if (v16)
    {
      std::string::__init_copy_ctor_external(&__p, *v15, v16);
      goto LABEL_38;
    }
  }
  else if (*(_BYTE *)(a3 + 167))
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v15;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 160);
    goto LABEL_38;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "<DEFAULT>");
LABEL_38:
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a2 + 32))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)":", 1);
  *(_BYTE *)(a2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)":", 1);
  *(_BYTE *)(a2 + 17) = 0;
  if (*(_BYTE *)(a3 + 172))
    v17 = "Secure";
  else
    v17 = "Insecure";
  if (*(_BYTE *)(a3 + 172))
    v18 = 6;
  else
    v18 = 8;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)v17, v18);
  *(_BYTE *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"Request Timeout: ", 17);
  *(_BYTE *)(a2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)" seconds", 8);
  *(_BYTE *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(a2 + 17) = 0;
  v19 = *(_QWORD **)(a2 + 8);
  if (*(_DWORD *)(a3 + 292))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Unsolicited Requests: ON, Delay: ", 33);
    *(_BYTE *)(a2 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(a2 + 17) = 0;
    v19 = *(_QWORD **)(a2 + 8);
    v20 = " seconds";
    v21 = 8;
  }
  else
  {
    v20 = "Unsolicited Requests: OFF";
    v21 = 25;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
  *(_BYTE *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(a2 + 17) = 0;
  if ((*(char *)(a3 + 199) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a3 + 199))
      goto LABEL_52;
    goto LABEL_51;
  }
  if (*(_QWORD *)(a3 + 184))
  {
LABEL_51:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"IMEI Header name: ", 18);
    *(_BYTE *)(a2 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3 + 176);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(a2 + 17) = 0;
  }
LABEL_52:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"IMPU ranking:", 13);
  *(_BYTE *)(a2 + 17) = 0;
  v22 = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(a2 + 17) = 0;
  SipImpuRank::logRanks(v22, a2, (uint64_t *)(a3 + 368), 1);
  if (*(_QWORD *)(a3 + 312) != *(_QWORD *)(a3 + 304))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"Forbidden Http Error Codes: ", 28);
    *(_BYTE *)(a2 + 17) = 0;
    v23 = *(_QWORD *)(a3 + 304);
    v24 = *(_QWORD *)(a3 + 312);
    std::string::basic_string[abi:ne180100]<0>(v40, ", ");
    ims::join<std::__wrap_iter<std::string *>>(v23, v24, (uint64_t)v40, &__p);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a2 + 32))(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v41 < 0)
      operator delete(v40[0]);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(a2 + 17) = 0;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"Disable on network error: ", 26);
  *(_BYTE *)(a2 + 17) = 0;
  if (*(_BYTE *)(a3 + 328))
    v25 = "True";
  else
    v25 = "False";
  if (*(_BYTE *)(a3 + 328))
    v26 = 4;
  else
    v26 = 5;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)v25, v26);
  *(_BYTE *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"CDIV: All Rules - ", 18);
  *(_BYTE *)(a2 + 17) = 0;
  if (*(_BYTE *)(a3 + 360))
    v27 = "True";
  else
    v27 = "False";
  if (*(_BYTE *)(a3 + 360))
    v28 = 4;
  else
    v28 = 5;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)v27, v28);
  *(_BYTE *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"CDIV: Allowed rules per PUT Request - ", 38);
  *(_BYTE *)(a2 + 17) = 0;
  if (*(_BYTE *)(a3 + 361))
    v29 = "Multiple";
  else
    v29 = "Single";
  if (*(_BYTE *)(a3 + 361))
    v30 = 8;
  else
    v30 = 6;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)v29, v30);
  *(_BYTE *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"CDIV: Supports Target Erasure - ", 32);
  *(_BYTE *)(a2 + 17) = 0;
  if (*(_BYTE *)(a3 + 362))
    v31 = "True";
  else
    v31 = "False";
  if (*(_BYTE *)(a3 + 362))
    v32 = 4;
  else
    v32 = 5;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)v31, v32);
  *(_BYTE *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"CDIV: Supports Media Tag - ", 27);
  *(_BYTE *)(a2 + 17) = 0;
  if (*(_BYTE *)(a3 + 363))
    v33 = "True";
  else
    v33 = "False";
  if (*(_BYTE *)(a3 + 363))
    v34 = 4;
  else
    v34 = 5;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)v33, v34);
  *(_BYTE *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"CB: Unsolicited Request Support - ", 34);
  *(_BYTE *)(a2 + 17) = 0;
  if (*(_BYTE *)(a3 + 364))
    v35 = "True";
  else
    v35 = "False";
  if (*(_BYTE *)(a3 + 364))
    v36 = 4;
  else
    v36 = 5;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)v35, v36);
  *(_BYTE *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"CB: Supports Media Tag - ", 25);
  *(_BYTE *)(a2 + 17) = 0;
  if (*(_BYTE *)(a3 + 365))
    v37 = "True";
  else
    v37 = "False";
  if (*(_BYTE *)(a3 + 365))
    v38 = 4;
  else
    v38 = 5;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)v37, v38);
  *(_BYTE *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"HTTP: HTTP Version ", 19);
  *(_BYTE *)(a2 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3 + 336);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a2 + 8), (uint64_t)"*********************************************", 45);
  *(_BYTE *)(a2 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(a2 + 17) = 0;
  return result;
}

void sub_1BF16D630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void IMSXcapManager::handleRequest(uint64_t a1, uint64_t a2, ctu::cf *a3)
{
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  const void *v9;
  size_t v10;
  _BYTE *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  _QWORD *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  _BYTE *v28;
  unint64_t v29;
  unsigned __int8 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  char *v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *__p[2];
  void *v61;
  uint64_t v62;
  __int128 v63;
  void *lpsrc;
  void *v65;
  uint64_t v66;
  void (*v67)(uint64_t, const ImsResult *, void *);
  void *v68;
  uint64_t v69;
  _BYTE *v70;
  std::string v71;
  char v72;
  char v73;
  char v74;
  void *v75[2];
  char v76;
  std::string v77;

  std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v65, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"XCAP Request Dictionary: ", 25);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SHIBYTE(v61) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v67) < 0)
    operator delete(v65);
  std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::debug(ims::_logger, (uint64_t)&v65, (uint64_t)__p);
  v8 = &v77;
  ctu::cf::show(a3, v9);
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v77.__r_.__value_.__r.__words[0];
  v10 = strlen((const char *)v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)v8, v10);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v67) < 0)
    operator delete(v65);
  *(_OWORD *)__p = 0u;
  LOBYTE(__p[1]) = 1;
  v61 = 0;
  v62 = 0;
  v63 = 0uLL;
  lpsrc = 0;
  if ((CapSuppServicesInfo::deserialize((CapSuppServicesInfo *)__p, a3) & 1) != 0)
  {
    v11 = ims::getValueFromMap<std::string,XcapCarrierHandle *>(a1 + 32, (void **)a2, 0);
    if (v11)
    {
      if (((*(uint64_t (**)(void))(**(_QWORD **)v11 + 16))() & 1) != 0)
      {
        switch(BYTE9(v63))
        {
          case 0:
            if (lpsrc)
            else
              v12 = 0;
            v21 = BYTE8(v63);
            memset(&v77, 0, sizeof(v77));
            if (*(char *)(a2 + 23) < 0)
              std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
            else
              v77 = *(std::string *)a2;
            if (!v21)
            {
              v43 = *(_QWORD *)v11;
              v65 = (void *)MEMORY[0x1E0C809B0];
              v66 = 1174405120;
              v67 = ___ZN14IMSXcapManager25_handleCallWaitingRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallWaitingERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke;
              v68 = &__block_descriptor_tmp_67;
              v69 = a1;
              v70 = v11;
              if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
              else
                v71 = v77;
              (*(void (**)(uint64_t, void **))(*(_QWORD *)v43 + 72))(v43, &v65);
              goto LABEL_160;
            }
            if (v12)
            {
              v26 = *(_QWORD *)v11;
              v27 = v12[8];
              v65 = (void *)MEMORY[0x1E0C809B0];
              v66 = 1174405120;
              v67 = ___ZN14IMSXcapManager25_handleCallWaitingRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallWaitingERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_68;
              v68 = &__block_descriptor_tmp_69_2;
              v69 = a1;
              v70 = v11;
              if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
              else
                v71 = v77;
              (*(void (**)(uint64_t, BOOL, void **))(*(_QWORD *)v26 + 80))(v26, v27 != 0, &v65);
              goto LABEL_160;
            }
            std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
            std::string::basic_string[abi:ne180100]<0>(v75, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v48 = ImsLogger::warn(ims::_logger, (uint64_t)&v65, (uint64_t)v75);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v48 + 8), (uint64_t)"Invalid CW request", 18);
            *(_BYTE *)(v48 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v48 + 17) = 0;
            if (v76 < 0)
              operator delete(v75[0]);
            if (SHIBYTE(v67) < 0)
              operator delete(v65);
            IMSXcapManager::_sendGenericFailureResponse(v21, 0, a2);
            goto LABEL_163;
          case 1:
            if (lpsrc)
            else
              v17 = 0;
            v22 = BYTE8(v63);
            memset(&v77, 0, sizeof(v77));
            if (*(char *)(a2 + 23) < 0)
              std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
            else
              v77 = *(std::string *)a2;
            if (v17)
            {
              v28 = (_BYTE *)v17[2];
              if (v28 != (_BYTE *)v17[3])
              {
                v29 = v28[1];
                if (v29 >= 6)
                  v30 = 1;
                else
                  v30 = 0x60503020100uLL >> (8 * v29);
                if (v22)
                {
                  if (*v28)
                  {
                    v31 = v28[2];
                    if (v28[2] || v11[362])
                    {
                      v32 = *(_QWORD *)v11;
                      v33 = *((unsigned int *)v17 + 3);
                      v65 = (void *)MEMORY[0x1E0C809B0];
                      v66 = 1174405120;
                      v67 = ___ZN14IMSXcapManager25_handleCallForwardRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallForwardERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_79;
                      v68 = &__block_descriptor_tmp_80_0;
                      v69 = a1;
                      v70 = v11;
                      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
                        std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
                      else
                        v71 = v77;
                      (*(void (**)(uint64_t, BOOL, _QWORD, _BYTE *, uint64_t, void **))(*(_QWORD *)v32 + 96))(v32, v31 != 0, v30, v28 + 8, v33, &v65);
                    }
                    else
                    {
                      std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
                      std::string::basic_string[abi:ne180100]<0>(v75, "");
                      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
                      v58 = ImsLogger::info(ims::_logger, (uint64_t)&v65, (uint64_t)v75);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v58 + 8), (uint64_t)"CF Erasure not supported. Perform deactivation instead", 54);
                      *(_BYTE *)(v58 + 17) = 0;
                      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                      *(_BYTE *)(v58 + 17) = 0;
                      if (v76 < 0)
                        operator delete(v75[0]);
                      if (SHIBYTE(v67) < 0)
                        operator delete(v65);
                      v59 = *(_QWORD *)v11;
                      v65 = (void *)MEMORY[0x1E0C809B0];
                      v66 = 1174405120;
                      v67 = ___ZN14IMSXcapManager25_handleCallForwardRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallForwardERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_77;
                      v68 = &__block_descriptor_tmp_78_0;
                      v69 = a1;
                      v70 = v11;
                      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
                        std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
                      else
                        v71 = v77;
                      (*(void (**)(uint64_t, _QWORD, _QWORD, void **))(*(_QWORD *)v59 + 104))(v59, 0, v30, &v65);
                    }
                  }
                  else
                  {
                    v55 = *(_QWORD *)v11;
                    v56 = v28[2];
                    v65 = (void *)MEMORY[0x1E0C809B0];
                    v66 = 1174405120;
                    v67 = ___ZN14IMSXcapManager25_handleCallForwardRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallForwardERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_74;
                    v68 = &__block_descriptor_tmp_75_0;
                    v69 = a1;
                    v70 = v11;
                    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
                      std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
                    else
                      v71 = v77;
                    (*(void (**)(uint64_t, BOOL, _QWORD, void **))(*(_QWORD *)v55 + 104))(v55, v56 != 0, v30, &v65);
                  }
                }
                else
                {
                  v53 = *(_QWORD *)v11;
                  v65 = (void *)MEMORY[0x1E0C809B0];
                  v66 = 1174405120;
                  v67 = ___ZN14IMSXcapManager25_handleCallForwardRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallForwardERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke;
                  v68 = &__block_descriptor_tmp_73_1;
                  v69 = a1;
                  v70 = v11;
                  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
                  else
                    v71 = v77;
                  (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)v53 + 88))(v53, v30, &v65);
                }
                goto LABEL_160;
              }
              std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
              std::string::basic_string[abi:ne180100]<0>(v75, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v44 = ImsLogger::warn(ims::_logger, (uint64_t)&v65, (uint64_t)v75);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"No ruleset to fetch call fwd info", 33);
              *(_BYTE *)(v44 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
              std::string::basic_string[abi:ne180100]<0>(v75, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v44 = ImsLogger::warn(ims::_logger, (uint64_t)&v65, (uint64_t)v75);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"Invalid CDIV request", 20);
              *(_BYTE *)(v44 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
            *(_BYTE *)(v44 + 17) = 0;
            if (v76 < 0)
              operator delete(v75[0]);
            if (SHIBYTE(v67) < 0)
              operator delete(v65);
            IMSXcapManager::_sendGenericFailureResponse(v22, 1, a2);
            goto LABEL_163;
          case 2:
            if (lpsrc)
            else
              v18 = 0;
            v23 = BYTE8(v63);
            memset(&v77, 0, sizeof(v77));
            if (*(char *)(a2 + 23) < 0)
              std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
            else
              v77 = *(std::string *)a2;
            if (!v23)
            {
              v45 = *(_QWORD *)v11;
              v65 = (void *)MEMORY[0x1E0C809B0];
              v66 = 1174405120;
              v67 = ___ZN14IMSXcapManager17_handleOIPRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_20CallerIdPresentationERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke;
              v68 = &__block_descriptor_tmp_81_0;
              v69 = a1;
              v70 = v11;
              if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
              else
                v71 = v77;
              (*(void (**)(uint64_t, void **))(*(_QWORD *)v45 + 112))(v45, &v65);
              goto LABEL_160;
            }
            if (v18)
            {
              v34 = *(_QWORD *)v11;
              v35 = v18[8];
              v65 = (void *)MEMORY[0x1E0C809B0];
              v66 = 1174405120;
              v67 = ___ZN14IMSXcapManager17_handleOIPRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_20CallerIdPresentationERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_82;
              v68 = &__block_descriptor_tmp_83_0;
              v69 = a1;
              v70 = v11;
              if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
              else
                v71 = v77;
              (*(void (**)(uint64_t, BOOL, void **))(*(_QWORD *)v34 + 120))(v34, v35 != 0, &v65);
              goto LABEL_160;
            }
            std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
            std::string::basic_string[abi:ne180100]<0>(v75, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v49 = ImsLogger::warn(ims::_logger, (uint64_t)&v65, (uint64_t)v75);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v49 + 8), (uint64_t)"Invalid OIP request", 19);
            *(_BYTE *)(v49 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v49 + 17) = 0;
            if (v76 < 0)
              operator delete(v75[0]);
            if (SHIBYTE(v67) < 0)
              operator delete(v65);
            IMSXcapManager::_sendGenericFailureResponse(v23, 2, a2);
            goto LABEL_163;
          case 3:
            if (lpsrc)
            else
              v19 = 0;
            v24 = BYTE8(v63);
            memset(&v77, 0, sizeof(v77));
            if (*(char *)(a2 + 23) < 0)
              std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
            else
              v77 = *(std::string *)a2;
            if (v24)
            {
              if (!v19)
              {
                std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
                std::string::basic_string[abi:ne180100]<0>(v75, "");
                pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
                v50 = ImsLogger::warn(ims::_logger, (uint64_t)&v65, (uint64_t)v75);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v50 + 8), (uint64_t)"Invalid OIR request", 19);
                *(_BYTE *)(v50 + 17) = 0;
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(_BYTE *)(v50 + 17) = 0;
                if (v76 < 0)
                  operator delete(v75[0]);
                if (SHIBYTE(v67) < 0)
                  operator delete(v65);
                IMSXcapManager::_sendGenericFailureResponse(v24, 3, a2);
                goto LABEL_163;
              }
              v36 = *(_QWORD *)v11;
              v37 = v19[8];
              v38 = v19[9];
              v65 = (void *)MEMORY[0x1E0C809B0];
              v66 = 1174405120;
              v67 = ___ZN14IMSXcapManager17_handleOIRRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_19CallerIdRestrictionERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_86;
              v68 = &__block_descriptor_tmp_87_1;
              v69 = a1;
              v70 = v11;
              if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
              else
                v71 = v77;
              (*(void (**)(uint64_t, BOOL, BOOL, void **))(*(_QWORD *)v36 + 136))(v36, v37 != 0, v38 != 0, &v65);
            }
            else
            {
              v46 = *(_QWORD *)v11;
              v65 = (void *)MEMORY[0x1E0C809B0];
              v66 = 1174405120;
              v67 = ___ZN14IMSXcapManager17_handleOIRRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_19CallerIdRestrictionERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke;
              v68 = &__block_descriptor_tmp_85_0;
              v69 = a1;
              v70 = v11;
              if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
              else
                v71 = v77;
              (*(void (**)(uint64_t, void **))(*(_QWORD *)v46 + 128))(v46, &v65);
            }
LABEL_160:
            if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_163;
            v57 = (void *)v71.__r_.__value_.__r.__words[0];
            goto LABEL_162;
          case 4:
            if (lpsrc)
            else
              v20 = 0;
            v25 = BYTE8(v63);
            memset(&v77, 0, sizeof(v77));
            if (*(char *)(a2 + 23) < 0)
              std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
            else
              v77 = *(std::string *)a2;
            if (v20)
            {
              v39 = (char *)v20[2];
              if (v39 != (char *)v20[3])
              {
                v40 = *v39;
                v41 = v39[2];
                if ((v41 - 1) > 7u)
                  v42 = 0;
                else
                  v42 = qword_1BF2ABAA8[(char)(v41 - 1)];
                v51 = v39[1];
                if (v25)
                {
                  v52 = *(_QWORD *)v11;
                  if ((v51 & 1) != 0)
                  {
                    v65 = (void *)MEMORY[0x1E0C809B0];
                    v66 = 1174405120;
                    v67 = ___ZN14IMSXcapManager25_handleCallBarringRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallBarringERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_92;
                    v68 = &__block_descriptor_tmp_93_0;
                    v69 = a1;
                    v70 = v11;
                    v72 = v40;
                    v73 = v51;
                    v74 = v41;
                    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
                      std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
                    else
                      v71 = v77;
                    (*(void (**)(uint64_t, uint64_t, BOOL, uint64_t, void **))(*(_QWORD *)v52 + 152))(v52, v42, (v40 & 1) == 0, 1, &v65);
                  }
                  else
                  {
                    v65 = (void *)MEMORY[0x1E0C809B0];
                    v66 = 1174405120;
                    v67 = ___ZN14IMSXcapManager25_handleCallBarringRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallBarringERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_94;
                    v68 = &__block_descriptor_tmp_95_0;
                    v69 = a1;
                    v70 = v11;
                    v72 = v40;
                    v73 = v51;
                    v74 = v41;
                    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
                      std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
                    else
                      v71 = v77;
                    (*(void (**)(uint64_t, uint64_t, _QWORD, void **))(*(_QWORD *)v52 + 160))(v52, v42, 0, &v65);
                  }
                }
                else
                {
                  v54 = *(_QWORD *)v11;
                  v65 = (void *)MEMORY[0x1E0C809B0];
                  v66 = 1174405120;
                  v67 = ___ZN14IMSXcapManager25_handleCallBarringRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallBarringERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke;
                  v68 = &__block_descriptor_tmp_91_1;
                  v69 = a1;
                  v70 = v11;
                  v72 = v40;
                  v73 = v51;
                  v74 = v41;
                  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&v71, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
                  else
                    v71 = v77;
                  (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v54 + 144))(v54, v42, &v65);
                }
                if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
                {
                  v57 = (void *)v71.__r_.__value_.__r.__words[0];
LABEL_162:
                  operator delete(v57);
                }
LABEL_163:
                if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_164;
                v15 = (void *)v77.__r_.__value_.__r.__words[0];
LABEL_25:
                operator delete(v15);
                goto LABEL_164;
              }
              std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
              std::string::basic_string[abi:ne180100]<0>(v75, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v47 = ImsLogger::warn(ims::_logger, (uint64_t)&v65, (uint64_t)v75);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v47 + 8), (uint64_t)"No ruleset to fetch call barring info", 37);
              *(_BYTE *)(v47 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
              std::string::basic_string[abi:ne180100]<0>(v75, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v47 = ImsLogger::warn(ims::_logger, (uint64_t)&v65, (uint64_t)v75);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v47 + 8), (uint64_t)"Invalid CB request", 18);
              *(_BYTE *)(v47 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
            *(_BYTE *)(v47 + 17) = 0;
            if (v76 < 0)
              operator delete(v75[0]);
            if (SHIBYTE(v67) < 0)
              operator delete(v65);
            IMSXcapManager::_sendGenericFailureResponse(v25, 4, a2);
            goto LABEL_163;
          default:
            goto LABEL_164;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
      std::string::basic_string[abi:ne180100]<0>(&v77, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v16 = ImsLogger::error(ims::_logger, (uint64_t)&v65, (uint64_t)&v77);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"Bambi Xcap client is not initialized. Cannot send Xcap request", 62);
      *(_BYTE *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v16 + 17) = 0;
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      if (SHIBYTE(v67) < 0)
        operator delete(v65);
      IMSXcapManager::_sendGenericFailureResponse(BYTE8(v63), SBYTE9(v63), a2);
      goto LABEL_164;
    }
    std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
    std::string::basic_string[abi:ne180100]<0>(&v77, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v14 = ImsLogger::error(ims::_logger, (uint64_t)&v65, (uint64_t)&v77);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Unable to handle request for unknown stack ID ", 46);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v65, "xcap");
    std::string::basic_string[abi:ne180100]<0>(&v77, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v13 = ImsLogger::error(ims::_logger, (uint64_t)&v65, (uint64_t)&v77);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Unable to deserialize xcap data", 31);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
  }
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67) < 0)
  {
    v15 = v65;
    goto LABEL_25;
  }
LABEL_164:
  if (lpsrc)
    (*(void (**)(void *))(*(_QWORD *)lpsrc + 8))(lpsrc);
  if (SBYTE7(v63) < 0)
    operator delete(v61);
}

void sub_1BF16E968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a33 < 0)
    operator delete(__p);
  if (*(char *)(v40 - 89) < 0)
    operator delete(*(void **)(v40 - 112));
  if (a18)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 8))(a18);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

void IMSXcapManager::_sendGenericFailureResponse(unsigned __int8 a1, char a2, uint64_t a3)
{
  ctu::cf *v4;
  CFTypeRef cf;
  __int128 v6;
  void *__p;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0u;
  __p = 0;
  v8 = 0;
  v9 = 0;
  v11 = 0;
  LOBYTE(v6) = 1;
  v10 = a1;
  BYTE8(v6) = 0;
  BYTE1(v10) = a2;
  cf = 0;
  CapSuppServicesInfo::serialize((CapSuppServicesInfo *)&v6, &cf);
  v4 = (ctu::cf *)cf;
  if (cf)
    CFRetain(cf);
  IMSXcapManager::_notifyClient(&v4, a3);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v4);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&cf);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (SHIBYTE(v9) < 0)
    operator delete(__p);
}

void sub_1BF16EBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20)
{
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&a9);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&a10);
  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 8))(a20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void IMSXcapManager::handleAuthChallengeResponse(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  SipAkaAuthResponse *SyncFailureResponse;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  SipAkaAuthResponse *FailureResponse;
  uint64_t *v23;
  char v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33;
  void *v34;
  uint64_t v35;

  std::string::basic_string[abi:ne180100]<0>(&v33, "xcap");
  std::string::basic_string[abi:ne180100]<0>(v31, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v33, (uint64_t)v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"handleAuthChallengeResponse: Context: ", 38);
  *(_BYTE *)(v6 + 17) = 0;
  if (*(_BYTE *)(a3 + 8))
    v7 = "XCAP";
  else
    v7 = "SIP";
  std::string::basic_string[abi:ne180100]<0>(v29, v7);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 32))(v6, v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)", Mode: ", 8);
  *(_BYTE *)(v6 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(v27, off_1E78E51B0[*(char *)(a3 + 9)]);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 32))(v6, v27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)", Result: ", 10);
  *(_BYTE *)(v6 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, off_1E78E51D0[*(int *)(a3 + 12)]);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 32))(v6, __p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete(v27[0]);
  if (v30 < 0)
    operator delete(v29[0]);
  if (v32 < 0)
    operator delete(v31[0]);
  if (SHIBYTE(v35) < 0)
    operator delete(v33);
  v8 = ims::getValueFromMap<std::string,XcapCarrierHandle *>(a1 + 32, a2, 0);
  if (!v8)
  {
    std::string::basic_string[abi:ne180100]<0>(&v33, "xcap");
    std::string::basic_string[abi:ne180100]<0>(v31, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v12 = ImsLogger::error(ims::_logger, (uint64_t)&v33, (uint64_t)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Uknown stackID given: ", 22);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 32))(v12, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    goto LABEL_27;
  }
  v9 = v8;
  v10 = *(unsigned __int8 *)(a3 + 9);
  if (v10 == 1 || v10 == 3)
  {
    v13 = v8[54];
    if (!v13)
    {
      std::string::basic_string[abi:ne180100]<0>(&v33, "xcap");
      std::string::basic_string[abi:ne180100]<0>(v31, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v21 = ImsLogger::error(ims::_logger, (uint64_t)&v33, (uint64_t)v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"Empty auth queue. Cannot process auth challenge response.", 57);
      *(_BYTE *)(v21 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v21 + 17) = 0;
      if (v32 < 0)
        operator delete(v31[0]);
      if (SHIBYTE(v35) < 0)
        operator delete(v33);
      goto LABEL_44;
    }
    v14 = (uint64_t *)v8[53];
    v15 = v14[2];
    v16 = *v14;
    *(_QWORD *)(v16 + 8) = v14[1];
    *(_QWORD *)v14[1] = v16;
    v9[54] = v13 - 1;
    operator delete(v14);
    v17 = *(_DWORD *)(a3 + 12);
    if (v17 == 3)
    {
      FailureResponse = SipAkaAuthChallenge::createFailureResponse(*(SipAkaAuthChallenge **)v15);
    }
    else
    {
      if (v17 == 2)
      {
        SyncFailureResponse = SipAkaAuthChallenge::createSyncFailureResponse(*(const SipAkaAuthChallenge **)v15, (uint64_t **)(a3 + 112));
      }
      else
      {
        if (v17 != 1)
        {
          if (!v15)
            goto LABEL_44;
          goto LABEL_43;
        }
        SyncFailureResponse = SipAkaAuthChallenge::createSuccessResponse(*(const SipAkaAuthChallenge **)v15, (char **)(a3 + 16), a3 + 40, a3 + 64);
      }
      FailureResponse = SyncFailureResponse;
      if (!SyncFailureResponse)
      {
LABEL_43:
        v23 = AuthQueueItem<BambiClient>::~AuthQueueItem((uint64_t *)v15);
        MEMORY[0x1C3B87100](v23, 0x1032C403FAF6B48);
LABEL_44:
        if (v9[54])
        {
          if (*((_DWORD *)v9 + 58))
            v24 = 3;
          else
            v24 = 1;
          AuthQueueItem<BambiXcapClient>::sendChallenge(*(_QWORD **)(v9[53] + 16), v24);
        }
        return;
      }
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t, SipAkaAuthResponse *))(**(_QWORD **)(v15 + 8) + 16))(*(_QWORD *)(v15 + 8), *(_QWORD *)(v15 + 16), v15 + 32, FailureResponse);
    (*(void (**)(SipAkaAuthResponse *))(*(_QWORD *)FailureResponse + 8))(FailureResponse);
    goto LABEL_43;
  }
  if (v10 == 2)
  {
    v11 = *v8;
    if (*(_DWORD *)(a3 + 12) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 64))(v11, a3 + 88);
      return;
    }
    v33 = 0;
    v34 = 0;
    v35 = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 64))(v11, &v33);
    v20 = v33;
    if (v33)
    {
      v34 = v33;
      goto LABEL_31;
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v33, "xcap");
  std::string::basic_string[abi:ne180100]<0>(v31, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v19 = ImsLogger::error(ims::_logger, (uint64_t)&v33, (uint64_t)v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"Mode not handled in XCAP", 24);
  *(_BYTE *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v19 + 17) = 0;
LABEL_27:
  if (v32 < 0)
    operator delete(v31[0]);
  if (SHIBYTE(v35) < 0)
  {
    v20 = v33;
LABEL_31:
    operator delete(v20);
  }
}

void sub_1BF16F154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v35;

  v35 = *(void **)(v33 - 72);
  if (v35)
  {
    *(_QWORD *)(v33 - 64) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

void AuthQueueItem<BambiXcapClient>::sendChallenge(_QWORD *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6[2];
  __int128 v7;
  void *v8[2];
  void *v9[2];
  __int128 v10;
  void *v11[2];
  void *__p[2];
  __int128 v13;
  uint64_t v14;

  v14 = 0;
  *(_OWORD *)__p = 0u;
  v13 = 0u;
  v10 = 0u;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)v6 = 0u;
  v7 = 0u;
  LOBYTE(v6[0]) = 1;
  BYTE1(v6[0]) = a2;
  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v6[1], (char *)(v3 + 184), (char *)(v3 + 200), 0x10uLL);
  v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v8, (char *)(v4 + 200), (char *)(v4 + 216), 0x10uLL);
  LODWORD(v14) = *((_DWORD *)a1 + 6);
  v5 = IMSClientManager::delegateForStack((void **)a1 + 4);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)(v5 + 8) + 96))(v5 + 8, v6);
  if (__p[1])
  {
    *(void **)&v13 = __p[1];
    operator delete(__p[1]);
  }
  if (v11[0])
  {
    v11[1] = v11[0];
    operator delete(v11[0]);
  }
  if (v9[1])
  {
    *(void **)&v10 = v9[1];
    operator delete(v9[1]);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
  if (v6[1])
  {
    *(void **)&v7 = v6[1];
    operator delete(v6[1]);
  }
}

void sub_1BF16F318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ims::aka::Request::~Request((ims::aka::Request *)&a9);
  _Unwind_Resume(a1);
}

void IMSXcapManager::handleDigestAuthChallenge(uint64_t a1, void **a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;

  std::string::basic_string[abi:ne180100]<0>(v9, "xcap");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::warn(ims::_logger, (uint64_t)v9, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Standard Digest Challenge not supported yet", 43);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (v8 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  v5 = ims::getValueFromMap<std::string,XcapCarrierHandle *>(a1 + 32, a2, 0);
  if (v5)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*v5 + 40))(*v5);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "xcap");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::error(ims::_logger, (uint64_t)v9, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Unable to handle digewst auth challenge due to unknown stack ID ", 64);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 32))(v6, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (v8 < 0)
      operator delete(__p[0]);
    if (v10 < 0)
      operator delete(v9[0]);
  }
}

void sub_1BF16F4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSXcapManager::handleAkaAuthChallenge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  std::string __p;

  v6 = ims::getValueFromMap<std::string,XcapCarrierHandle *>(a1 + 32, (void **)a2, 0);
  if (v6)
  {
    v7 = v6;
    v8 = operator new();
    v9 = *v7;
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0;
    *(_QWORD *)(v8 + 48) = 0;
    *(_QWORD *)(v8 + 8) = a1 + 8;
    *(_QWORD *)v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
    *(_QWORD *)(v8 + 16) = v9;
    std::string::operator=((std::string *)(v8 + 32), &__p);
    v10 = _NextAuthQueueId;
    LODWORD(_NextAuthQueueId) = _NextAuthQueueId + 1;
    *(_DWORD *)(v8 + 24) = v10;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v11 = operator new(0x18uLL);
    v11[2] = v8;
    v12 = v7[52];
    *v11 = v12;
    v11[1] = v7 + 52;
    *(_QWORD *)(v12 + 8) = v11;
    v7[52] = v11;
    v13 = v7[54];
    v7[54] = v13 + 1;
    if (!v13)
    {
      if (*((_DWORD *)v7 + 58))
        v14 = 3;
      else
        v14 = 1;
      AuthQueueItem<BambiXcapClient>::sendChallenge((_QWORD *)v8, v14);
    }
  }
}

void sub_1BF16F64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1C3B87100](v14, 0x1032C403FAF6B48);
  _Unwind_Resume(a1);
}

void IMSXcapManager::fetchKsExtNaf(uint64_t a1, void **a2, char **a3, char **a4, uint64_t a5, uint64_t a6)
{
  int v10;
  char *v11;
  size_t v12;
  int v13;
  char *v14;
  size_t v15;
  uint64_t v16;
  __int128 v17;
  void *v18;
  void *v19[2];
  __int128 v20;
  void *v21[2];
  void *v22[2];
  __int128 v23;
  void *__p[2];
  void *v25[5];

  memset(v25, 0, sizeof(v25));
  v23 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v21 = 0u;
  *(_OWORD *)v22 = 0u;
  *(_OWORD *)v19 = 0u;
  v20 = 0u;
  LOWORD(v19[0]) = 513;
  if (&v22[1] != (void **)a3)
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v22[1], *a3, a3[1], a3[1] - *a3);
  if (&v19[1] != (void **)a4)
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v19[1], *a4, a4[1], a4[1] - *a4);
  v10 = *(char *)(a5 + 23);
  if (v10 >= 0)
    v11 = (char *)a5;
  else
    v11 = *(char **)a5;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a5 + 23);
  else
    v12 = *(_QWORD *)(a5 + 8);
  v18 = 0;
  v17 = 0uLL;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((char *)&v17, v11, &v11[v12], v12);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)__p = v17;
  v25[0] = v18;
  v13 = *(char *)(a6 + 23);
  if (v13 >= 0)
    v14 = (char *)a6;
  else
    v14 = *(char **)a6;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a6 + 23);
  else
    v15 = *(_QWORD *)(a6 + 8);
  v18 = 0;
  v17 = 0uLL;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((char *)&v17, v14, &v14[v15], v15);
  if (v25[1])
  {
    v25[2] = v25[1];
    operator delete(v25[1]);
  }
  *(_OWORD *)&v25[1] = v17;
  v25[3] = v18;
  v16 = IMSClientManager::delegateForStack(a2);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)(v16 + 8) + 96))(v16 + 8, v19);
  if (v25[1])
  {
    v25[2] = v25[1];
    operator delete(v25[1]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v22[1])
  {
    *(void **)&v23 = v22[1];
    operator delete(v22[1]);
  }
  if (v21[0])
  {
    v21[1] = v21[0];
    operator delete(v21[0]);
  }
  if (v19[1])
  {
    *(void **)&v20 = v19[1];
    operator delete(v19[1]);
  }
}

void sub_1BF16F82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  ims::aka::Request::~Request((ims::aka::Request *)va);
  _Unwind_Resume(a1);
}

void IMSXcapManager::fetchPreferredImpu(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  SipUri *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *__p[2];
  char v22;
  void *v23;
  __int128 *v24;
  char v25;
  SipStack *v26;
  std::__shared_weak_count *v27;
  std::string v28;
  std::string v29;
  std::vector<std::string> v30;

  memset(&v30, 0, sizeof(v30));
  memset(&v29, 0, sizeof(v29));
  memset(&v28, 0, sizeof(v28));
  v26 = 0;
  v27 = 0;
  (*(void (**)(SipStack **__return_ptr))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 168) + 192))(&v26);
  if (!v26)
    goto LABEL_7;
  v6 = *((_QWORD *)v26 + 18);
  v7 = *(SipUri **)(v6 + 536);
  if (!v7 && (v7 = *(SipUri **)(v6 + 544)) == 0 || !SipUri::isValidUri(v7) || SipUri::isAnonymousUri(v7))
  {
LABEL_6:
    SipStack::getAssociatedUris(v26, (uint64_t *)&v23);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v30, (std::string *)v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (_BYTE *)v23) >> 3));
    __p[0] = &v23;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    std::string::operator=(&v29, (const std::string *)((char *)v26 + 3736));
    std::string::operator=(&v28, (const std::string *)((char *)v26 + 3760));
LABEL_7:
    v8 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (char *)ims::getValueFromMap<std::string,XcapCarrierHandle *>(a1 + 32, a2, 0);
    v12 = v11;
    if (v11)
    {
      if (v30.__begin_ == v30.__end_)
      {
        if (&v30 != (std::vector<std::string> *)(v11 + 16))
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v30, *((std::string **)v11 + 2), *((__int128 **)v11 + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v11 + 3) - *((_QWORD *)v11 + 2)) >> 3));
        std::string::basic_string[abi:ne180100]<0>(&v23, "xcap");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v13 = ImsLogger::debug(ims::_logger, (uint64_t)&v23, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Picking IMPU from list of IMPUs sent to us by SD (read from SIM Config)", 71);
        *(_BYTE *)(v13 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v23, "xcap");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v13 = ImsLogger::debug(ims::_logger, (uint64_t)&v23, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Picking IMPU from list of IMPUs received in the 200 (OK) response during last successful registration", 101);
        *(_BYTE *)(v13 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      *(_BYTE *)(v13 + 17) = 0;
      if (v22 < 0)
        operator delete(__p[0]);
      if (v25 < 0)
        operator delete(v23);
      SipImpuRank::preferredImpu((_QWORD *)v12 + 46, (uint64_t *)&v30, (unsigned __int8 *)v12 + 64, (unsigned __int8 *)&v28, (uint64_t)&v29, (std::string *)a3);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v23, "xcap");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v14 = ImsLogger::error(ims::_logger, (uint64_t)&v23, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Preferred IMPU is empty!", 24);
      *(_BYTE *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v14 + 17) = 0;
      if (v22 < 0)
        operator delete(__p[0]);
      if (v25 < 0)
        operator delete(v23);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    goto LABEL_28;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  SipUri::asString((uint64_t)v7, 2, (_QWORD *)a3);
  v15 = *(unsigned __int8 *)(a3 + 23);
  v16 = (char)v15;
  if ((v15 & 0x80u) != 0)
    v15 = *(_QWORD *)(a3 + 8);
  if (!v15)
  {
    if (v16 < 0)
      operator delete(*(void **)a3);
    goto LABEL_6;
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, "xcap");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v17 = ImsLogger::debug(ims::_logger, (uint64_t)&v23, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Using IMPU received in the 200 (OK) response during last successful registration", 80);
  *(_BYTE *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v17 + 17) = 0;
  if (v22 < 0)
    operator delete(__p[0]);
  if (v25 < 0)
    operator delete(v23);
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
LABEL_28:
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
}

void sub_1BF16FD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v29 + 23) < 0)
    operator delete(*(void **)v29);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v30 - 57) < 0)
    operator delete(*(void **)(v30 - 80));
  *(_QWORD *)(v30 - 80) = v30 - 56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 80));
  _Unwind_Resume(a1);
}

void IMSXcapManager::_handleServiceCallWaitingResponse(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  ctu::cf *v8;
  CFTypeRef cf;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  void *__p[2];
  __int128 v14;
  _QWORD *v15;

  v12 = 0u;
  BYTE8(v12) = 1;
  __p[0] = 0;
  __p[1] = 0;
  v14 = 0uLL;
  v15 = 0;
  LOBYTE(v12) = 1;
  BYTE8(v14) = a2 == 1;
  IMSXcapManager::_fromImsResult((uint64_t)&cf, a1, a3);
  WORD4(v12) = (_WORD)cf;
  *(_OWORD *)__p = v10;
  *(_QWORD *)&v14 = v11;
  BYTE9(v14) = 0;
  if (a4)
  {
    v7 = (_QWORD *)operator new();
    *v7 = &off_1E78E80E8;
    v7[1] = 0;
    *((_BYTE *)v7 + 8) = *(_BYTE *)(a4 + 80);
    v15 = v7;
  }
  cf = 0;
  CapSuppServicesInfo::serialize((CapSuppServicesInfo *)&v12, &cf);
  v8 = (ctu::cf *)cf;
  if (cf)
    CFRetain(cf);
  IMSXcapManager::_notifyClient(&v8, a5);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v8);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&cf);
  if (v15)
    (*(void (**)(_QWORD *))(*v15 + 8))(v15);
  if (SBYTE7(v14) < 0)
    operator delete(__p[0]);
}

void sub_1BF16FF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSXcapManager::_fromImsResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  __int128 v18;
  std::string::size_type size;
  unint64_t v20;
  int v21;
  void **v22;
  uint64_t v23;
  std::string *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  BOOL v30;
  _BOOL4 v31;
  uint64_t v32;
  void *v33[2];
  char v34;
  void *v35[2];
  unsigned __int8 v36;
  void *__p[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  void *v41[2];
  __int128 v42;
  __int128 v43;
  _OWORD v44[9];
  uint64_t v45;
  std::string v46;

  *(_QWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v7 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a3 + 8) + 24))(*(_QWORD *)(a3 + 8), *(unsigned int *)(a3 + 16));
  *(_BYTE *)a1 = v7 ^ 1;
  if (((v7 ^ 1) & 1) != 0)
    goto LABEL_10;
  if (*(uint64_t **)(a3 + 8) != &SipResultDomain::_domain)
    goto LABEL_3;
  v11 = *(_QWORD *)(a2 + 304);
  v10 = *(_QWORD *)(a2 + 312);
  if (v11 == v10)
    goto LABEL_3;
  do
  {
    v12 = *(unsigned __int8 *)(v11 + 23);
    if ((v12 & 0x80u) == 0)
      v13 = *(unsigned __int8 *)(v11 + 23);
    else
      v13 = *(_QWORD *)(v11 + 8);
    if (v13 == 1)
    {
      if ((v12 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v11, IMSXcapManager::_fromImsResult(XcapCarrierHandle *,ImsResult const&)::kWildcardErrorCode, *(_QWORD *)(v11 + 8)))goto LABEL_31;
      }
      else
      {
        if (!*(_BYTE *)(v11 + 23))
          goto LABEL_31;
        v14 = 0;
        while (*(unsigned __int8 *)(v11 + v14) == IMSXcapManager::_fromImsResult(XcapCarrierHandle *,ImsResult const&)::kWildcardErrorCode[v14])
        {
          if (v12 == ++v14)
            goto LABEL_31;
        }
      }
    }
    v11 += 24;
  }
  while (v11 != v10);
  v11 = v10;
LABEL_31:
  if (v11 != v10)
  {
    *(_BYTE *)(a1 + 1) = 1;
    std::string::basic_string[abi:ne180100]<0>(__p, "xcap");
    std::string::basic_string[abi:ne180100]<0>(&v46, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v15 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"ForbiddenHttpErrorCode [*] matched", 34);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SBYTE7(v38) < 0)
      operator delete(__p[0]);
    goto LABEL_3;
  }
  v45 = 0;
  v43 = 0u;
  memset(v44, 0, sizeof(v44));
  *(_OWORD *)v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  *(_OWORD *)__p = 0u;
  v38 = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  std::ostream::operator<<();
  v16 = *(__int128 **)(a2 + 304);
  v17 = *(__int128 **)(a2 + 312);
  if (v16 == v17)
    goto LABEL_75;
  while (1)
  {
    memset(&v46, 0, sizeof(v46));
    if (*((char *)v16 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
    }
    else
    {
      v18 = *v16;
      v46.__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 2);
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
    }
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[1], v35);
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    else
      size = v46.__r_.__value_.__l.__size_;
    v20 = v36;
    v21 = (char)v36;
    if ((v36 & 0x80u) != 0)
      v20 = (unint64_t)v35[1];
    if (size != v20)
    {
      v31 = 0;
      if (((char)v36 & 0x80000000) == 0)
        goto LABEL_62;
LABEL_59:
      operator delete(v35[0]);
      goto LABEL_62;
    }
    if ((v36 & 0x80u) == 0)
      v22 = v35;
    else
      v22 = (void **)v35[0];
    if ((*((_BYTE *)&v46.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v31 = memcmp(v46.__r_.__value_.__l.__data_, v22, v46.__r_.__value_.__l.__size_) == 0;
      goto LABEL_61;
    }
    if (*((_BYTE *)&v46.__r_.__value_.__s + 23))
    {
      v23 = HIBYTE(v46.__r_.__value_.__r.__words[2]) - 1;
      v24 = &v46;
      do
      {
        v26 = v24->__r_.__value_.__s.__data_[0];
        v24 = (std::string *)((char *)v24 + 1);
        v25 = v26;
        v28 = *(unsigned __int8 *)v22;
        v22 = (void **)((char *)v22 + 1);
        v27 = v28;
        v30 = v23-- != 0;
        v31 = v25 == v27;
      }
      while (v25 == v27 && v30);
LABEL_61:
      if (v21 < 0)
        goto LABEL_59;
      goto LABEL_62;
    }
    v31 = 1;
    if ((char)v36 < 0)
      goto LABEL_59;
LABEL_62:
    if (v31)
      break;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    v16 = (__int128 *)((char *)v16 + 24);
    if (v16 == v17)
      goto LABEL_75;
  }
  *(_BYTE *)(a1 + 1) = 1;
  std::string::basic_string[abi:ne180100]<0>(v35, "xcap");
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  v32 = ims::debug((uint64_t)v35, (uint64_t)v33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"ForbiddenHttpErrorCode [", 24);
  *(_BYTE *)(v32 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v32 + 32))(v32, &v46);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"] matched", 9);
  *(_BYTE *)(v32 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v32 + 17) = 0;
  if (v34 < 0)
    operator delete(v33[0]);
  if ((char)v36 < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
LABEL_75:
  __p[0] = *(void **)MEMORY[0x1E0DE4F60];
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  __p[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  if (SHIBYTE(v42) < 0)
    operator delete(v41[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B8707C](v44);
LABEL_3:
  if (*(_BYTE *)(a2 + 328) && *(uint64_t **)(a3 + 8) == &_posixDomain)
  {
    *(_BYTE *)(a1 + 1) = 2;
    std::string::basic_string[abi:ne180100]<0>(__p, "xcap");
    std::string::basic_string[abi:ne180100]<0>(&v46, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"DisableOnNetworkError matched", 29);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SBYTE7(v38) < 0)
      operator delete(__p[0]);
  }
  ImsResult::description((ImsResult *)a3, __p);
  *(_OWORD *)v6 = *(_OWORD *)__p;
  *(_QWORD *)(v6 + 16) = v38;
LABEL_10:
  std::string::basic_string[abi:ne180100]<0>(__p, "xcap");
  std::string::basic_string[abi:ne180100]<0>(&v46, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v9 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v46);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"XCAP Result - ", 14);
  *(_BYTE *)(v9 + 17) = 0;
  CapSuppServicesInfo::Result::asString((CapSuppServicesInfo::Result *)a1, v35);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v9 + 32))(v9, v35);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if ((char)v36 < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SBYTE7(v38) < 0)
    operator delete(__p[0]);
}

void sub_1BF170570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 89) < 0)
    operator delete(*(void **)(v26 - 112));
  std::ostringstream::~ostringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void IMSXcapManager::_notifyClient(ctu::cf **a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  const void *v8;
  size_t v9;
  _QWORD v10[4];
  std::string v11;
  const void *v12;
  void *v13;
  char v14;
  void *__p[2];
  char v16;
  std::string v17;

  if (*a1)
    v2 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  else
    v2 = 0;
  if (v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "xcap");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::debug(ims::_logger, (uint64_t)&v17, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"XCAP Response Dictionary: ", 26);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (v16 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v17, "xcap");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v17, (uint64_t)__p);
    v7 = (const char *)&v13;
    ctu::cf::show(*a1, v8);
    if (v14 < 0)
      v7 = (const char *)v13;
    v9 = strlen(v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)v7, v9);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (v14 < 0)
      operator delete(v13);
    if (v16 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    memset(&v17, 0, sizeof(v17));
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v17 = *(std::string *)a2;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 1174405120;
    v10[2] = ___ZNK14IMSXcapManager13_notifyClientEN3ctu2cf11CFSharedRefIK14__CFDictionaryEERKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE_block_invoke;
    v10[3] = &__block_descriptor_tmp_45;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v11, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
    else
      v11 = v17;
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(&v12, (const void **)a1);
    dispatch_async(MEMORY[0x1E0C80D38], v10);
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v12);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_1BF170914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  _Unwind_Resume(exception_object);
}

void IMSXcapManager::_handleServiceCallForwardResponse(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  XcapCDRule **v9;
  XcapCDRule **i;
  XcapCDRule *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  ctu::cf *v22;
  std::string v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *__p[4];
  __int128 v27;
  void *v28[2];
  __int128 v29;
  uint64_t v30;

  v27 = 0u;
  BYTE8(v27) = 1;
  v28[0] = 0;
  v28[1] = 0;
  v29 = 0uLL;
  v30 = 0;
  LOBYTE(v27) = 1;
  BYTE8(v29) = a2 == 1;
  IMSXcapManager::_fromImsResult((uint64_t)__p, a1, a3);
  WORD4(v27) = __p[0];
  *(_OWORD *)v28 = *(_OWORD *)&__p[1];
  *(void **)&v29 = __p[3];
  BYTE9(v29) = 1;
  if (a4)
  {
    v7 = operator new();
    *(_QWORD *)v7 = &off_1E78E8130;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    v8 = (uint64_t *)(v7 + 16);
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    *(_BYTE *)(v7 + 8) = *(_BYTE *)(a4 + 80);
    *(_DWORD *)(v7 + 12) = *(_DWORD *)(a4 + 152);
    v9 = *(XcapCDRule ***)(a4 + 160);
    for (i = *(XcapCDRule ***)(a4 + 168); v9 != i; ++v9)
    {
      v11 = *v9;
      memset(__p, 0, sizeof(__p));
      v12 = *((_QWORD *)v11 + 11);
      v13 = (std::__shared_weak_count *)*((_QWORD *)v11 + 12);
      v24 = v12;
      v25 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = *(unsigned __int8 *)(v12 + 64);
      if (v16 >= 7)
        v17 = 1;
      else
        v17 = 0x5040303020100uLL >> (8 * v16);
      BYTE1(__p[0]) = v17;
      BYTE2(__p[0]) = *(_BYTE *)(v12 + 65);
      XcapCDRule::targetNumber(v11, &v23);
      if (SHIBYTE(__p[3]) < 0)
        operator delete(__p[1]);
      *(std::string *)&__p[1] = v23;
      v18 = *(_QWORD *)(v7 + 24);
      if (v18 >= *(_QWORD *)(v7 + 32))
      {
        v19 = std::vector<CapSuppServicesInfo::CallForward::Rule>::__push_back_slow_path<CapSuppServicesInfo::CallForward::Rule const&>(v8, (__int16 *)__p);
      }
      else
      {
        std::vector<CapSuppServicesInfo::CallForward::Rule>::__construct_one_at_end[abi:ne180100]<CapSuppServicesInfo::CallForward::Rule const&>((uint64_t)v8, (__int16 *)__p);
        v19 = v18 + 32;
      }
      *(_QWORD *)(v7 + 24) = v19;
      if (v13)
      {
        v20 = (unint64_t *)&v13->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (SHIBYTE(__p[3]) < 0)
        operator delete(__p[1]);
    }
    v30 = v7;
  }
  __p[0] = 0;
  CapSuppServicesInfo::serialize((CapSuppServicesInfo *)&v27, __p);
  v22 = (ctu::cf *)__p[0];
  if (__p[0])
    CFRetain(__p[0]);
  IMSXcapManager::_notifyClient(&v22, a5);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v22);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)__p);
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  if (SBYTE7(v29) < 0)
    operator delete(v28[0]);
}

void sub_1BF170BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31)
{
  if (a31)
    (*(void (**)(uint64_t))(*(_QWORD *)a31 + 8))(a31);
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSXcapManager::_handleServiceOIPResponse(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  ctu::cf *v8;
  CFTypeRef cf;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  void *__p[2];
  __int128 v14;
  _QWORD *v15;

  v12 = 0u;
  BYTE8(v12) = 1;
  __p[0] = 0;
  __p[1] = 0;
  v14 = 0uLL;
  v15 = 0;
  LOBYTE(v12) = 1;
  BYTE8(v14) = a2 == 1;
  IMSXcapManager::_fromImsResult((uint64_t)&cf, a1, a3);
  WORD4(v12) = (_WORD)cf;
  *(_OWORD *)__p = v10;
  *(_QWORD *)&v14 = v11;
  BYTE9(v14) = 2;
  if (a4)
  {
    v7 = (_QWORD *)operator new();
    *v7 = &off_1E78E8178;
    v7[1] = 0;
    *((_BYTE *)v7 + 8) = *(_BYTE *)(a4 + 80);
    v15 = v7;
  }
  cf = 0;
  CapSuppServicesInfo::serialize((CapSuppServicesInfo *)&v12, &cf);
  v8 = (ctu::cf *)cf;
  if (cf)
    CFRetain(cf);
  IMSXcapManager::_notifyClient(&v8, a5);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v8);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&cf);
  if (v15)
    (*(void (**)(_QWORD *))(*v15 + 8))(v15);
  if (SBYTE7(v14) < 0)
    operator delete(__p[0]);
}

void sub_1BF170D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSXcapManager::_handleServiceOIRResponse(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  ctu::cf *v8;
  CFTypeRef cf;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  void *__p[2];
  __int128 v14;
  _QWORD *v15;

  v12 = 0u;
  BYTE8(v12) = 1;
  __p[0] = 0;
  __p[1] = 0;
  v14 = 0uLL;
  v15 = 0;
  LOBYTE(v12) = 1;
  BYTE8(v14) = a2 == 1;
  IMSXcapManager::_fromImsResult((uint64_t)&cf, a1, a3);
  WORD4(v12) = (_WORD)cf;
  *(_OWORD *)__p = v10;
  *(_QWORD *)&v14 = v11;
  BYTE9(v14) = 3;
  if (a4)
  {
    v7 = (_QWORD *)operator new();
    *v7 = &off_1E78E81C0;
    v7[1] = 0;
    *((_WORD *)v7 + 4) = *(_WORD *)(a4 + 80);
    v15 = v7;
  }
  cf = 0;
  CapSuppServicesInfo::serialize((CapSuppServicesInfo *)&v12, &cf);
  v8 = (ctu::cf *)cf;
  if (cf)
    CFRetain(cf);
  IMSXcapManager::_notifyClient(&v8, a5);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v8);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&cf);
  if (v15)
    (*(void (**)(_QWORD *))(*v15 + 8))(v15);
  if (SBYTE7(v14) < 0)
    operator delete(__p[0]);
}

void sub_1BF170EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSXcapManager::_handleServiceCallBarringResponse(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  uint64_t i;
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char *v22;
  _BYTE *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int16 v32;
  char v33;
  uint64_t v34;
  ctu::cf *v35;
  CFTypeRef cf;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  void *__p[2];
  __int128 v41;
  _QWORD *v42;

  v39 = 0u;
  BYTE8(v39) = 1;
  __p[0] = 0;
  __p[1] = 0;
  v41 = 0uLL;
  v42 = 0;
  LOBYTE(v39) = 1;
  BYTE8(v41) = a2 == 1;
  IMSXcapManager::_fromImsResult((uint64_t)&cf, a1, a3);
  WORD4(v39) = (_WORD)cf;
  *(_OWORD *)__p = v37;
  *(_QWORD *)&v41 = v38;
  BYTE9(v41) = 4;
  if (a4)
  {
    v34 = a6;
    v9 = (_QWORD *)operator new();
    *v9 = &off_1E78E8208;
    v9[1] = 0;
    *((_BYTE *)v9 + 8) = 1;
    v9[2] = 0;
    v10 = (void **)(v9 + 2);
    v9[3] = 0;
    v9[4] = 0;
    v11 = *(_QWORD *)(a4 + 88);
    for (i = *(_QWORD *)(a4 + 96); v11 != i; v11 += 8)
    {
      v13 = *(_BYTE *)(*(_QWORD *)v11 + 104);
      v14 = *(_QWORD *)(*(_QWORD *)v11 + 88);
      v15 = *(std::__shared_weak_count **)(*(_QWORD *)v11 + 96);
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
        v18 = *(_BYTE *)(v14 + 64);
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        v18 = *(_BYTE *)(v14 + 64);
      }
      v20 = v13 ^ 1;
      v22 = (char *)v9[3];
      v21 = v9[4];
      if ((unint64_t)v22 >= v21)
      {
        v24 = (char *)*v10;
        v25 = 0xAAAAAAAAAAAAAAABLL * (v22 - (_BYTE *)*v10);
        v26 = v25 + 1;
        if (v25 + 1 >= 0x5555555555555556)
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        v27 = 0xAAAAAAAAAAAAAAABLL * (v21 - (_QWORD)v24);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x2AAAAAAAAAAAAAAALL)
          v28 = 0x5555555555555555;
        else
          v28 = v26;
        if (v28)
        {
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CapSuppServicesInfo::CallBarring::Rule>>((uint64_t)(v9 + 4), v28);
          v24 = (char *)v9[2];
          v22 = (char *)v9[3];
        }
        else
        {
          v29 = 0;
        }
        v30 = &v29[3 * v25];
        *v30 = v20;
        v30[1] = v18;
        v30[2] = a5;
        v31 = v30;
        if (v22 != v24)
        {
          do
          {
            v32 = *(_WORD *)(v22 - 3);
            v22 -= 3;
            v33 = v22[2];
            *(_WORD *)(v31 - 3) = v32;
            v31 -= 3;
            v31[2] = v33;
          }
          while (v22 != v24);
          v24 = (char *)*v10;
        }
        v23 = v30 + 3;
        v9[2] = v31;
        v9[3] = v30 + 3;
        v9[4] = &v29[3 * v28];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *v22 = v20;
        v22[1] = v18;
        v23 = v22 + 3;
        v22[2] = a5;
      }
      v9[3] = v23;
    }
    v42 = v9;
    a6 = v34;
  }
  cf = 0;
  CapSuppServicesInfo::serialize((CapSuppServicesInfo *)&v39, &cf);
  v35 = (ctu::cf *)cf;
  if (cf)
    CFRetain(cf);
  IMSXcapManager::_notifyClient(&v35, a6);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v35);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&cf);
  if (v42)
    (*(void (**)(_QWORD *))(*v42 + 8))(v42);
  if (SBYTE7(v41) < 0)
    operator delete(__p[0]);
}

void sub_1BF171224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27)
{
  if (a27)
    (*(void (**)(uint64_t))(*(_QWORD *)a27 + 8))(a27);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BF1712D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)va);
  _Unwind_Resume(a1);
}

const void **__copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  v4 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef((const void **)(a1 + 56), (const void **)(a2 + 56));
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1)
{
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void ___ZN14IMSXcapManager25_handleCallWaitingRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallWaitingERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke(uint64_t a1, const ImsResult *a2, void *lpsrc)
{
  void *v5;
  uint64_t v6;
  _BYTE v7[72];

  if (lpsrc)
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceCallWaitingResponse(v6, 0, (uint64_t)v7, (uint64_t)v5, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1BF171408(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 48);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void ___ZN14IMSXcapManager25_handleCallWaitingRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallWaitingERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_68(uint64_t a1, const ImsResult *a2, void *lpsrc)
{
  void *v5;
  uint64_t v6;
  _BYTE v7[72];

  if (lpsrc)
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceCallWaitingResponse(v6, 1, (uint64_t)v7, (uint64_t)v5, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1BF1714F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager25_handleCallForwardRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallForwardERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke(uint64_t a1, const ImsResult *a2, void *lpsrc)
{
  void *v5;
  uint64_t v6;
  _BYTE v7[72];

  if (lpsrc)
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceCallForwardResponse(v6, 0, (uint64_t)v7, (uint64_t)v5, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1BF171594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager25_handleCallForwardRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallForwardERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_74(uint64_t a1, const ImsResult *a2, void *lpsrc)
{
  void *v5;
  uint64_t v6;
  _BYTE v7[72];

  if (lpsrc)
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceCallForwardResponse(v6, 1, (uint64_t)v7, (uint64_t)v5, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1BF171638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager25_handleCallForwardRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallForwardERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_77(uint64_t a1, const ImsResult *a2, void *lpsrc)
{
  void *v5;
  uint64_t v6;
  _BYTE v7[72];

  if (lpsrc)
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceCallForwardResponse(v6, 1, (uint64_t)v7, (uint64_t)v5, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1BF1716DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager25_handleCallForwardRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallForwardERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_79(uint64_t a1, const ImsResult *a2, void *lpsrc)
{
  void *v5;
  uint64_t v6;
  _BYTE v7[72];

  if (lpsrc)
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceCallForwardResponse(v6, 1, (uint64_t)v7, (uint64_t)v5, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1BF171780(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager17_handleOIPRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_20CallerIdPresentationERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke(uint64_t a1, const ImsResult *a2, void *lpsrc)
{
  void *v5;
  uint64_t v6;
  _BYTE v7[72];

  if (lpsrc)
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceOIPResponse(v6, 0, (uint64_t)v7, (uint64_t)v5, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1BF171824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager17_handleOIPRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_20CallerIdPresentationERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_82(uint64_t a1, const ImsResult *a2, void *lpsrc)
{
  void *v5;
  uint64_t v6;
  _BYTE v7[72];

  if (lpsrc)
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceOIPResponse(v6, 1, (uint64_t)v7, (uint64_t)v5, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1BF1718C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager17_handleOIRRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_19CallerIdRestrictionERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke(uint64_t a1, const ImsResult *a2, void *lpsrc)
{
  void *v5;
  uint64_t v6;
  _BYTE v7[72];

  if (lpsrc)
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceOIRResponse(v6, 0, (uint64_t)v7, (uint64_t)v5, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1BF17196C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager17_handleOIRRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_19CallerIdRestrictionERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_86(uint64_t a1, const ImsResult *a2, void *lpsrc)
{
  void *v5;
  uint64_t v6;
  _BYTE v7[72];

  if (lpsrc)
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceOIRResponse(v6, 1, (uint64_t)v7, (uint64_t)v5, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1BF171A10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager25_handleCallBarringRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallBarringERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke(uint64_t a1, const ImsResult *a2, void *lpsrc)
{
  void *v5;
  uint64_t v6;
  _BYTE v7[72];

  if (lpsrc)
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceCallBarringResponse(v6, 0, (uint64_t)v7, (uint64_t)v5, *(_BYTE *)(a1 + 74), a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1BF171AB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager25_handleCallBarringRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallBarringERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_92(uint64_t a1, const ImsResult *a2, void *lpsrc)
{
  void *v5;
  uint64_t v6;
  _BYTE v7[72];

  if (lpsrc)
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceCallBarringResponse(v6, 1, (uint64_t)v7, (uint64_t)v5, *(_BYTE *)(a1 + 74), a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1BF171B60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager25_handleCallBarringRequestEP17XcapCarrierHandleN19CapSuppServicesInfo6ActionEPKNS2_11CallBarringERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE_block_invoke_94(uint64_t a1, const ImsResult *a2, void *lpsrc)
{
  void *v5;
  uint64_t v6;
  _BYTE v7[72];

  if (lpsrc)
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceCallBarringResponse(v6, 1, (uint64_t)v7, (uint64_t)v5, *(_BYTE *)(a1 + 74), a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1BF171C08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager37_triggerUnsolicitedCallForwardRequestEP17XcapCarrierHandleRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD v4[6];
  std::string __p;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(uint64_t **)(a1 + 40);
  v3 = *v2;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1174405120;
  v4[2] = ___ZN14IMSXcapManager37_triggerUnsolicitedCallForwardRequestEP17XcapCarrierHandleRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke_2;
  v4[3] = &__block_descriptor_tmp_98_0;
  v4[4] = v1;
  v4[5] = v2;
  if (*(char *)(a1 + 71) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
  else
    __p = *(std::string *)(a1 + 48);
  (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v3 + 88))(v3, 0, v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF171CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN14IMSXcapManager37_triggerUnsolicitedCallForwardRequestEP17XcapCarrierHandleRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke_2(uint64_t a1, const ImsResult *a2, void *lpsrc)
{
  void *v5;
  uint64_t v6;
  _BYTE v7[72];

  if (lpsrc)
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceCallForwardResponse(v6, 0, (uint64_t)v7, (uint64_t)v5, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1BF171D7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager37_triggerUnsolicitedCallBarringRequestEP17XcapCarrierHandleRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD v9[6];
  std::string __p;
  _QWORD v11[6];
  std::string v12;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(uint64_t **)(a1 + 40);
  v4 = *v2;
  v5 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1174405120;
  v11[2] = ___ZN14IMSXcapManager37_triggerUnsolicitedCallBarringRequestEP17XcapCarrierHandleRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke_2;
  v11[3] = &__block_descriptor_tmp_101_0;
  v11[4] = v3;
  v11[5] = v2;
  v6 = (_OWORD *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = *v6;
    v12.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 64);
  }
  (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v4 + 144))(v4, 0, v11);
  v7 = *(uint64_t **)(a1 + 40);
  v8 = *v7;
  v9[0] = v5;
  v9[1] = 1174405120;
  v9[2] = ___ZN14IMSXcapManager37_triggerUnsolicitedCallBarringRequestEP17XcapCarrierHandleRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke_102;
  v9[3] = &__block_descriptor_tmp_103;
  v9[4] = v3;
  v9[5] = v7;
  if (*(char *)(a1 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v6;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 64);
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v8 + 144))(v8, 1, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_1BF171ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN14IMSXcapManager37_triggerUnsolicitedCallBarringRequestEP17XcapCarrierHandleRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke_2(uint64_t a1, const ImsResult *a2, void *lpsrc)
{
  void *v5;
  uint64_t v6;
  _BYTE v7[72];

  if (lpsrc)
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceCallBarringResponse(v6, 0, (uint64_t)v7, (uint64_t)v5, 6, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1BF171FA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN14IMSXcapManager37_triggerUnsolicitedCallBarringRequestEP17XcapCarrierHandleRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke_102(uint64_t a1, const ImsResult *a2, void *lpsrc)
{
  void *v5;
  uint64_t v6;
  _BYTE v7[72];

  if (lpsrc)
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  ImsResult::ImsResult((ImsResult *)v7, a2);
  IMSXcapManager::_handleServiceCallBarringResponse(v6, 0, (uint64_t)v7, (uint64_t)v5, 3, a1 + 48);
  ImsResult::~ImsResult((ImsResult *)v7);
}

void sub_1BF17204C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

uint64_t IMSXcapManager::handleAuthResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, a4);
  return result;
}

uint64_t `non-virtual thunk to'IMSXcapManager::handleAuthResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, a4);
  return result;
}

void IMSXcapManager::internalDumpState(IMSXcapManager *this, ImsOutStream *a2)
{
  char *v2;
  _QWORD *v3;
  char *v4;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  BOOL v10;
  void *__p[2];
  __int128 v12;

  v2 = (char *)this + 32;
  v3 = (_QWORD *)*((_QWORD *)this + 4);
  v4 = (char *)this + 40;
  if (v3 != (_QWORD *)((char *)this + 40))
  {
    do
    {
      *(_OWORD *)__p = 0u;
      v12 = 0u;
      if (*((char *)v3 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v3[4], v3[5]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v3 + 2);
        *(_QWORD *)&v12 = v3[6];
      }
      *((_QWORD *)&v12 + 1) = v3[7];
      v6 = ims::getValueFromMap<std::string,XcapCarrierHandle *>((uint64_t)v2, __p, 0);
      if (v6)
      {
        v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 16))(*v6);
        if ((_DWORD)v7)
          IMSXcapManager::printConfig(v7, (uint64_t)a2, *((uint64_t *)&v12 + 1));
      }
      if (SBYTE7(v12) < 0)
        operator delete(__p[0]);
      v8 = (char *)v3[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (char *)v3[2];
          v10 = *(_QWORD *)v9 == (_QWORD)v3;
          v3 = v9;
        }
        while (!v10);
      }
      v3 = v9;
    }
    while (v9 != v4);
  }
}

void sub_1BF172190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(char *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _BYTE *v7;
  char v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = (_BYTE *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1BF172200(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<CapSuppServicesInfo::CallForward::Rule>::__construct_one_at_end[abi:ne180100]<CapSuppServicesInfo::CallForward::Rule const&>(uint64_t a1, __int16 *a2)
{
  uint64_t v3;
  __int16 v4;
  std::string *v5;
  __int128 v6;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  *(_BYTE *)(v3 + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)v3 = v4;
  v5 = (std::string *)(v3 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 4);
    *(_QWORD *)(v3 + 24) = *((_QWORD *)a2 + 3);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)(a1 + 8) = v3 + 32;
}

void sub_1BF172284(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<CapSuppServicesInfo::CallForward::Rule>::__push_back_slow_path<CapSuppServicesInfo::CallForward::Rule const&>(uint64_t *a1, __int16 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int16 v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v17[2];
  char *v18;
  char *v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v20 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RTCPSDesItem>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[32 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v18 = v11;
  v19 = &v10[32 * v9];
  v12 = *a2;
  v11[2] = *((_BYTE *)a2 + 2);
  *(_WORD *)v11 = v12;
  v13 = (std::string *)(v11 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
    v11 = v18;
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 4);
    *((_QWORD *)v11 + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  v18 = v11 + 32;
  std::vector<CapSuppServicesInfo::CallForward::Rule>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<CapSuppServicesInfo::CallForward::Rule>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1BF17238C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CapSuppServicesInfo::CallForward::Rule>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CapSuppServicesInfo::CallForward::Rule>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CapSuppServicesInfo::CallForward::Rule>,std::reverse_iterator<CapSuppServicesInfo::CallForward::Rule*>,std::reverse_iterator<CapSuppServicesInfo::CallForward::Rule*>,std::reverse_iterator<CapSuppServicesInfo::CallForward::Rule*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CapSuppServicesInfo::CallForward::Rule>,std::reverse_iterator<CapSuppServicesInfo::CallForward::Rule*>,std::reverse_iterator<CapSuppServicesInfo::CallForward::Rule*>,std::reverse_iterator<CapSuppServicesInfo::CallForward::Rule*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int16 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[4];
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v12[0] = a1;
  v12[1] = &v13;
  v12[2] = &v14;
  v12[3] = 1;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_WORD *)(a3 - 32);
      a3 -= 32;
      *(_BYTE *)(v7 - 30) = *(_BYTE *)(a3 + 2);
      *(_WORD *)(v7 - 32) = v8;
      v9 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(v7 - 24) = v9;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v10 = v14;
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CapSuppServicesInfo::CallForward::Rule>,std::reverse_iterator<CapSuppServicesInfo::CallForward::Rule*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CapSuppServicesInfo::CallForward::Rule>,std::reverse_iterator<CapSuppServicesInfo::CallForward::Rule*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<CapSuppServicesInfo::CallForward::Rule>,std::reverse_iterator<CapSuppServicesInfo::CallForward::Rule*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CapSuppServicesInfo::CallForward::Rule>,std::reverse_iterator<CapSuppServicesInfo::CallForward::Rule*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    v1 += 32;
  }
}

uint64_t std::__split_buffer<CapSuppServicesInfo::CallForward::Rule>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<CapSuppServicesInfo::CallForward::Rule>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<CapSuppServicesInfo::CallForward::Rule>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 32;
      *(_QWORD *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CapSuppServicesInfo::CallBarring::Rule>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x5555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(3 * a2);
}

void BambiCallHandler::BambiCallHandler(BambiCallHandler *this)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "bambi.call");
  ImsLogContainer::ImsLogContainer((uint64_t)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)this = off_1E78E8C58;
}

void sub_1BF172654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BambiStrictCallHandler::~BambiStrictCallHandler(BambiStrictCallHandler *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E78E5200;
  v2 = *((_QWORD *)this + 16);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::__list_imp<unsigned long long>::clear((_QWORD *)this + 13);
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  BambiStrictCallHandler::~BambiStrictCallHandler(this);
  JUMPOUT(0x1C3B87100);
}

_QWORD *BambiStrictCallHandler::deinitialize(BambiStrictCallHandler *this)
{
  _QWORD *v1;
  _QWORD *i;
  uint64_t v3;

  v1 = (_QWORD *)((char *)this + 104);
  for (i = (_QWORD *)*((_QWORD *)this + 14); i != v1; i = (_QWORD *)i[1])
  {
    v3 = i[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return std::__list_imp<unsigned long long>::clear(v1);
}

void BambiStrictCallHandler::startCallFromAction(ImsLogContainer *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  BambiCallHandler::startCall(a1, (uint64_t)&v9, a3);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BF1727D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiStrictCallHandler::holdCallFromAction(uint64_t a1, uint64_t a2)
{
  BambiCall *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(BambiCall **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (v2)
    BambiCall::performLocalHoldFromHandler(v2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF172874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiStrictCallHandler::resumeCallFromAction(uint64_t a1, uint64_t a2)
{
  BambiCall *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(BambiCall **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (v2)
    BambiCall::performLocalResumeFromHandler(v2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF172910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiStrictCallHandler::answerCallFromAction(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BambiCall *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(BambiCall **)a1;
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  BambiCall::answerFromHandler(v2, a2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF1729A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiStrictCallHandler::prepareCallFromAction(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(_BYTE **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (v2 && !v2[457])
    (*(void (**)(_BYTE *))(*(_QWORD *)v2 + 112))(v2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF172A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiStrictCallHandler::startCall(BambiStrictCallHandler *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t v34;
  unint64_t *p_shared_weak_owners;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  void (**v53)(ImsResult *__hidden);
  uint64_t *v54;
  int v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _QWORD v59[3];
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;

  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  v52 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *((_QWORD *)a1 + 15);
  a3[2] = 0;
  a3[3] = 0;
  a3[7] = 0;
  a3[8] = 0;
  a3[5] = 0;
  a3[6] = 0;
  *a3 = &off_1E78B7238;
  a3[1] = &_bambiDomain;
  a3[4] = 0;
  v10 = operator new();
  v11 = (_QWORD *)v10;
  v59[0] = v6;
  v59[1] = v5;
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  BambiCallActivity::BambiCallActivity(v10, v59, (uint64_t)a1);
  if (v5)
  {
    v14 = (unint64_t *)&v5->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v16 = (std::__shared_weak_count *)v11[20];
  if (!v16)
    goto LABEL_57;
  v17 = std::__shared_weak_count::lock(v16);
  v60 = v17;
  if (!v17)
    goto LABEL_57;
  v18 = v17;
  v19 = v11[19];
  v59[2] = v19;
  if (!v19)
  {
LABEL_53:
    v44 = (unint64_t *)&v18->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    goto LABEL_57;
  }
  v20 = (std::__shared_weak_count *)operator new(0x140uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E52E0;
  v61 = v19;
  v62 = v18;
  v22 = (unint64_t *)&v18->__shared_owners_;
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  v64 = v18;
  do
    v24 = __ldxr(v22);
  while (__stxr(v24 + 1, v22));
  do
    v25 = __ldxr(v22);
  while (__stxr(v25 + 1, v22));
  v63 = v19;
  v53 = (void (**)(ImsResult *__hidden))v19;
  v54 = (uint64_t *)v18;
  v51 = v20 + 1;
  BambiCallRequireCallsHeldAction::BambiCallRequireCallsHeldAction(&v20[1].__vftable, v19, v18, (uint64_t)v11);
  do
    v26 = __ldaxr(v22);
  while (__stlxr(v26 - 1, v22));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C4FB8;
  v20[1].__shared_owners_ = (uint64_t)&unk_1E78C5018;
  v27 = v64;
  if (v64)
  {
    v28 = (unint64_t *)&v64->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C4EF8;
  v20[1].__shared_owners_ = (uint64_t)&unk_1E78C4F58;
  v30 = v62;
  if (v62)
  {
    v31 = (unint64_t *)&v62->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)v20[6].__vftable;
  if (v33)
  {
    if (v33->__shared_owners_ != -1)
      goto LABEL_47;
    do
      v34 = __ldxr(v21);
    while (__stxr(v34 + 1, v21));
    p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
    do
      v36 = __ldxr(p_shared_weak_owners);
    while (__stxr(v36 + 1, p_shared_weak_owners));
    v20[5].__shared_weak_owners_ = (uint64_t)v51;
    v20[6].__vftable = (std::__shared_weak_count_vtbl *)v20;
    std::__shared_weak_count::__release_weak(v33);
  }
  else
  {
    do
      v37 = __ldxr(v21);
    while (__stxr(v37 + 1, v21));
    v38 = (unint64_t *)&v20->__shared_weak_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
    v20[5].__shared_weak_owners_ = (uint64_t)v51;
    v20[6].__vftable = (std::__shared_weak_count_vtbl *)v20;
  }
  do
    v40 = __ldaxr(v21);
  while (__stlxr(v40 - 1, v21));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_47:
  v41 = (std::__shared_weak_count *)v11[18];
  v11[17] = v51;
  v11[18] = v20;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v18 = v60;
  if (v60)
    goto LABEL_53;
LABEL_57:
  v46 = (*(uint64_t (**)(BambiStrictCallHandler *))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(BambiStrictCallHandler *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v46);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v46 + 8), (uint64_t)"queueing new activity [", 23);
  *(_BYTE *)(v46 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v46 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v46 + 8), (uint64_t)"] ", 2);
  *(_BYTE *)(v46 + 17) = 0;
  (*(void (**)(_QWORD *, uint64_t))(*v11 + 16))(v11, v46);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v46 + 17) = 0;
  v47 = operator new(0x18uLL);
  v47[1] = (char *)a1 + 104;
  v47[2] = v11;
  v48 = *((_QWORD *)a1 + 13);
  *v47 = v48;
  *(_QWORD *)(v48 + 8) = v47;
  *((_QWORD *)a1 + 13) = v47;
  ++*((_QWORD *)a1 + 15);
  if (v9)
  {
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v53 = &off_1E78B7238;
    v54 = &_bambiDomain;
    v55 = 1073741838;
  }
  else
  {
    BambiStrictCallHandler::performNextCallAction(a1, (uint64_t)&v53);
  }
  ImsResult::operator=((uint64_t)a3, (uint64_t)&v53);
  ImsResult::~ImsResult((ImsResult *)&v53);
  if (v52)
  {
    v49 = (unint64_t *)&v52->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
}

void sub_1BF172F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  ImsResult *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  void *v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v22 = va_arg(va2, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v5 - 104);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v5 - 120);
  std::__shared_weak_count::~__shared_weak_count(v4);
  operator delete(v7);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  ImsResult::~ImsResult(v3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void BambiStrictCallHandler::performLocalHold(BambiStrictCallHandler *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void (**v18)(ImsResult *__hidden);
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  _QWORD v42[9];
  void (**v43)(ImsResult *__hidden);
  uint64_t *v44;
  int v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD v49[2];
  __int128 v50;
  void (**v51)(ImsResult *__hidden);
  std::__shared_weak_count *v52;

  v3 = *a2;
  if (*a2 && (*(_DWORD *)(v3 + 440) & 0xFFFFFFFE) != 2)
  {
    v5 = (std::__shared_weak_count *)a2[1];
    v41 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v8 = *((_QWORD *)a1 + 15);
    memset(&v42[2], 0, 56);
    v42[0] = &off_1E78B7238;
    v42[1] = &_bambiDomain;
    v9 = operator new();
    v10 = v9;
    v49[0] = v3;
    v49[1] = v5;
    if (v5)
    {
      v11 = (unint64_t *)&v5->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    BambiCallActivity::BambiCallActivity(v9, v49, (uint64_t)a1);
    if (v5)
    {
      v13 = (unint64_t *)&v5->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v15 = *(std::__shared_weak_count **)(v10 + 160);
    if (v15)
    {
      v16 = std::__shared_weak_count::lock(v15);
      v52 = v16;
      if (v16)
      {
        v17 = v16;
        v18 = *(void (***)(ImsResult *__hidden))(v10 + 152);
        v51 = v18;
        if (!v18)
          goto LABEL_36;
        v19 = operator new(0x140uLL);
        v20 = v19;
        v19[1] = 0;
        v19[2] = 0;
        *v19 = &off_1E78C5138;
        v21 = (uint64_t)(v19 + 3);
        v43 = v18;
        v44 = (uint64_t *)v17;
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
        BambiCallHoldAction::BambiCallHoldAction(v19 + 3, &v43, v10);
        v24 = (std::__shared_weak_count *)v44;
        if (v44)
        {
          v25 = (unint64_t *)(v44 + 1);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_QWORD *)&v50 = v21;
        *((_QWORD *)&v50 + 1) = v20;
        std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v50, v20 + 17, v21);
        v27 = v50;
        v50 = 0uLL;
        v28 = *(std::__shared_weak_count **)(v10 + 144);
        *(_OWORD *)(v10 + 136) = v27;
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v31 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
        if (*((_QWORD *)&v50 + 1))
        {
          v32 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v17 = v52;
        if (v52)
        {
LABEL_36:
          v34 = (unint64_t *)&v17->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
    }
    v36 = (*(uint64_t (**)(BambiStrictCallHandler *))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(BambiStrictCallHandler *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"queueing new activity [", 23);
    *(_BYTE *)(v36 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v36 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"] ", 2);
    *(_BYTE *)(v36 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v36);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v36 + 17) = 0;
    v37 = operator new(0x18uLL);
    v37[1] = (char *)a1 + 104;
    v37[2] = v10;
    v38 = *((_QWORD *)a1 + 13);
    *v37 = v38;
    *(_QWORD *)(v38 + 8) = v37;
    *((_QWORD *)a1 + 13) = v37;
    ++*((_QWORD *)a1 + 15);
    if (v8)
    {
      v46 = 0u;
      v47 = 0u;
      v48 = 0u;
      v43 = &off_1E78B7238;
      v44 = &_bambiDomain;
      v45 = 1073741838;
    }
    else
    {
      BambiStrictCallHandler::performNextCallAction(a1, (uint64_t)&v43);
    }
    ImsResult::operator=((uint64_t)v42, (uint64_t)&v43);
    ImsResult::~ImsResult((ImsResult *)&v43);
    ImsResult::~ImsResult((ImsResult *)v42);
    if (v41)
    {
      v39 = (unint64_t *)&v41->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
  else
  {
    v4 = (*(uint64_t (**)(BambiStrictCallHandler *))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(BambiStrictCallHandler *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"No active call to hold", 22);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(BambiStrictCallHandler *))(*(_QWORD *)a1 + 136))(a1);
  }
}

void sub_1BF173458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  std::__shared_weak_count *v20;
  uint64_t v21;
  void *v23;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v23);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v21 - 96);
  ImsResult::~ImsResult((ImsResult *)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiStrictCallHandler::performLocalResume(BambiStrictCallHandler *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t v30;
  unint64_t *p_shared_weak_owners;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  _QWORD v49[9];
  void (**v50)(ImsResult *__hidden);
  uint64_t *v51;
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _QWORD v56[3];
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;

  v3 = *a2;
  if (!*a2 || (*(_DWORD *)(v3 + 440) & 0xFFFFFFFE) != 2)
  {
    v45 = (*(uint64_t (**)(BambiStrictCallHandler *))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(BambiStrictCallHandler *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v45 + 8), (uint64_t)"No held call to resume", 22);
    *(_BYTE *)(v45 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v45 + 17) = 0;
    (*(void (**)(BambiStrictCallHandler *))(*(_QWORD *)a1 + 144))(a1);
    return;
  }
  v4 = (std::__shared_weak_count *)a2[1];
  v48 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *((_QWORD *)a1 + 15);
  memset(&v49[2], 0, 56);
  v49[0] = &off_1E78B7238;
  v49[1] = &_bambiDomain;
  v8 = operator new();
  v9 = (_QWORD *)v8;
  v56[0] = v3;
  v56[1] = v4;
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  BambiCallActivity::BambiCallActivity(v8, v56, (uint64_t)a1);
  if (v4)
  {
    v12 = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v14 = (std::__shared_weak_count *)v9[20];
  if (v14)
  {
    v15 = std::__shared_weak_count::lock(v14);
    v57 = v15;
    if (v15)
    {
      v16 = v15;
      v17 = v9[19];
      v56[2] = v17;
      if (!v17)
      {
LABEL_48:
        v40 = (unint64_t *)&v16->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        goto LABEL_52;
      }
      v18 = (std::__shared_weak_count *)operator new(0x140uLL);
      v19 = v18;
      v18->__shared_owners_ = 0;
      v20 = (unint64_t *)&v18->__shared_owners_;
      v18->__shared_weak_owners_ = 0;
      v18->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E5330;
      v21 = &v18[1].__vftable;
      v58 = v17;
      v59 = v16;
      v22 = (unint64_t *)&v16->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      do
        v24 = __ldxr(v22);
      while (__stxr(v24 + 1, v22));
      v50 = (void (**)(ImsResult *__hidden))v17;
      v51 = (uint64_t *)v16;
      BambiCallRequireCallsHeldAction::BambiCallRequireCallsHeldAction(&v18[1].__vftable, v17, v16, (uint64_t)v9);
      do
        v25 = __ldaxr(v22);
      while (__stlxr(v25 - 1, v22));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C5248;
      v19[1].__shared_owners_ = (uint64_t)&unk_1E78C52A8;
      v26 = v59;
      if (v59)
      {
        v27 = (unint64_t *)&v59->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = (std::__shared_weak_count *)v19[6].__vftable;
      if (v29)
      {
        if (v29->__shared_owners_ != -1)
          goto LABEL_42;
        do
          v30 = __ldxr(v20);
        while (__stxr(v30 + 1, v20));
        p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
        do
          v32 = __ldxr(p_shared_weak_owners);
        while (__stxr(v32 + 1, p_shared_weak_owners));
        v19[5].__shared_weak_owners_ = (uint64_t)v21;
        v19[6].__vftable = (std::__shared_weak_count_vtbl *)v19;
        std::__shared_weak_count::__release_weak(v29);
      }
      else
      {
        do
          v33 = __ldxr(v20);
        while (__stxr(v33 + 1, v20));
        v34 = (unint64_t *)&v19->__shared_weak_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
        v19[5].__shared_weak_owners_ = (uint64_t)v21;
        v19[6].__vftable = (std::__shared_weak_count_vtbl *)v19;
      }
      do
        v36 = __ldaxr(v20);
      while (__stlxr(v36 - 1, v20));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
LABEL_42:
      v37 = (std::__shared_weak_count *)v9[18];
      v9[17] = v21;
      v9[18] = v19;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v16 = v57;
      if (!v57)
        goto LABEL_52;
      goto LABEL_48;
    }
  }
LABEL_52:
  v42 = (*(uint64_t (**)(BambiStrictCallHandler *))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(BambiStrictCallHandler *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v42);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)"queueing new activity [", 23);
  *(_BYTE *)(v42 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v42 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)"] ", 2);
  *(_BYTE *)(v42 + 17) = 0;
  (*(void (**)(_QWORD *, uint64_t))(*v9 + 16))(v9, v42);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v42 + 17) = 0;
  v43 = operator new(0x18uLL);
  v43[1] = (char *)a1 + 104;
  v43[2] = v9;
  v44 = *((_QWORD *)a1 + 13);
  *v43 = v44;
  *(_QWORD *)(v44 + 8) = v43;
  *((_QWORD *)a1 + 13) = v43;
  ++*((_QWORD *)a1 + 15);
  if (v7)
  {
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v50 = &off_1E78B7238;
    v51 = &_bambiDomain;
    v52 = 1073741838;
  }
  else
  {
    BambiStrictCallHandler::performNextCallAction(a1, (uint64_t)&v50);
  }
  ImsResult::operator=((uint64_t)v49, (uint64_t)&v50);
  ImsResult::~ImsResult((ImsResult *)&v50);
  ImsResult::~ImsResult((ImsResult *)v49);
  if (v48)
  {
    v46 = (unint64_t *)&v48->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

void sub_1BF1739F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3 - 104);
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v5);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3 - 120);
  ImsResult::~ImsResult((ImsResult *)va1);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void BambiStrictCallHandler::answerCall(BambiStrictCallHandler *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t v32;
  unint64_t *p_shared_weak_owners;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  void (**v50)(ImsResult *__hidden);
  uint64_t *v51;
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _QWORD v56[3];
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;

  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  v49 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *((_QWORD *)a1 + 15);
  a3[2] = 0;
  a3[3] = 0;
  a3[7] = 0;
  a3[8] = 0;
  a3[5] = 0;
  a3[6] = 0;
  *a3 = &off_1E78B7238;
  a3[1] = &_bambiDomain;
  a3[4] = 0;
  v10 = operator new();
  v11 = (_QWORD *)v10;
  v56[0] = v6;
  v56[1] = v5;
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  BambiCallActivity::BambiCallActivity(v10, v56, (uint64_t)a1);
  if (v5)
  {
    v14 = (unint64_t *)&v5->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v16 = (std::__shared_weak_count *)v11[20];
  if (!v16)
    goto LABEL_50;
  v17 = std::__shared_weak_count::lock(v16);
  v57 = v17;
  if (!v17)
    goto LABEL_50;
  v18 = v17;
  v19 = v11[19];
  v56[2] = v19;
  if (!v19)
  {
LABEL_46:
    v42 = (unint64_t *)&v18->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    goto LABEL_50;
  }
  v20 = (std::__shared_weak_count *)operator new(0x140uLL);
  v21 = v20;
  v20->__shared_owners_ = 0;
  v22 = (unint64_t *)&v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E5380;
  v23 = &v20[1].__vftable;
  v58 = v19;
  v59 = v18;
  v24 = (unint64_t *)&v18->__shared_owners_;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  do
    v26 = __ldxr(v24);
  while (__stxr(v26 + 1, v24));
  v50 = (void (**)(ImsResult *__hidden))v19;
  v51 = (uint64_t *)v18;
  BambiCallRequireCallsHeldAction::BambiCallRequireCallsHeldAction(&v20[1].__vftable, v19, v18, (uint64_t)v11);
  do
    v27 = __ldaxr(v24);
  while (__stlxr(v27 - 1, v24));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  v21[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C5308;
  v21[1].__shared_owners_ = (uint64_t)&unk_1E78C5368;
  v28 = v59;
  if (v59)
  {
    v29 = (unint64_t *)&v59->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)v21[6].__vftable;
  if (v31)
  {
    if (v31->__shared_owners_ != -1)
      goto LABEL_40;
    do
      v32 = __ldxr(v22);
    while (__stxr(v32 + 1, v22));
    p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
    do
      v34 = __ldxr(p_shared_weak_owners);
    while (__stxr(v34 + 1, p_shared_weak_owners));
    v21[5].__shared_weak_owners_ = (uint64_t)v23;
    v21[6].__vftable = (std::__shared_weak_count_vtbl *)v21;
    std::__shared_weak_count::__release_weak(v31);
  }
  else
  {
    do
      v35 = __ldxr(v22);
    while (__stxr(v35 + 1, v22));
    v36 = (unint64_t *)&v21->__shared_weak_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    v21[5].__shared_weak_owners_ = (uint64_t)v23;
    v21[6].__vftable = (std::__shared_weak_count_vtbl *)v21;
  }
  do
    v38 = __ldaxr(v22);
  while (__stlxr(v38 - 1, v22));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
LABEL_40:
  v39 = (std::__shared_weak_count *)v11[18];
  v11[17] = v23;
  v11[18] = v21;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v18 = v57;
  if (v57)
    goto LABEL_46;
LABEL_50:
  v44 = (*(uint64_t (**)(BambiStrictCallHandler *))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(BambiStrictCallHandler *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"queueing new activity [", 23);
  *(_BYTE *)(v44 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v44 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"] ", 2);
  *(_BYTE *)(v44 + 17) = 0;
  (*(void (**)(_QWORD *, uint64_t))(*v11 + 16))(v11, v44);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v44 + 17) = 0;
  v45 = operator new(0x18uLL);
  v45[1] = (char *)a1 + 104;
  v45[2] = v11;
  v46 = *((_QWORD *)a1 + 13);
  *v45 = v46;
  *(_QWORD *)(v46 + 8) = v45;
  *((_QWORD *)a1 + 13) = v45;
  ++*((_QWORD *)a1 + 15);
  if (v9)
  {
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v50 = &off_1E78B7238;
    v51 = &_bambiDomain;
    v52 = 1073741838;
  }
  else
  {
    BambiStrictCallHandler::performNextCallAction(a1, (uint64_t)&v50);
  }
  ImsResult::operator=((uint64_t)a3, (uint64_t)&v50);
  ImsResult::~ImsResult((ImsResult *)&v50);
  if (v49)
  {
    v47 = (unint64_t *)&v49->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
}

void sub_1BF173F08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  ImsResult *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v4 - 96);
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v6);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  ImsResult::~ImsResult(v2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void BambiStrictCallHandler::localHoldCompleted(BambiStrictCallHandler *this)
{
  _BYTE v1[72];

  BambiStrictCallHandler::performNextCallAction(this, (uint64_t)v1);
  ImsResult::~ImsResult((ImsResult *)v1);
}

void BambiStrictCallHandler::performNextCallAction(BambiStrictCallHandler *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[9];
  _QWORD v13[9];

  memset(&v13[2], 0, 56);
  v13[0] = &off_1E78B7238;
  v13[1] = &_bambiDomain;
  v4 = *((_QWORD *)this + 16);
  if (!v4)
  {
    v5 = *((_QWORD *)this + 15);
    if (!v5)
    {
      v11 = (*(uint64_t (**)(BambiStrictCallHandler *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(BambiStrictCallHandler *, uint64_t))(*(_QWORD *)this + 16))(this, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"no pending call activities", 26);
      *(_BYTE *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v11 + 17) = 0;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_OWORD *)(a2 + 56) = 0u;
      *(_QWORD *)a2 = &off_1E78B7238;
      *(_QWORD *)(a2 + 8) = &_bambiDomain;
      *(_DWORD *)(a2 + 16) = 0;
      goto LABEL_11;
    }
    v6 = (uint64_t *)*((_QWORD *)this + 14);
    *((_QWORD *)this + 16) = v6[2];
    v7 = *v6;
    *(_QWORD *)(v7 + 8) = v6[1];
    *(_QWORD *)v6[1] = v7;
    *((_QWORD *)this + 15) = v5 - 1;
    operator delete(v6);
    v8 = (*(uint64_t (**)(BambiStrictCallHandler *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(BambiStrictCallHandler *, uint64_t))(*(_QWORD *)this + 16))(this, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"starting new activity for ", 26);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), v8);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    v4 = *((_QWORD *)this + 16);
  }
  if (*(_BYTE *)(v4 + 176) && !*(_QWORD *)(v4 + 128))
  {
    v9 = (*(uint64_t (**)(BambiStrictCallHandler *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(BambiStrictCallHandler *, uint64_t))(*(_QWORD *)this + 16))(this, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"finished current activity", 25);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    v10 = *((_QWORD *)this + 16);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    *((_QWORD *)this + 16) = 0;
    BambiStrictCallHandler::performNextCallAction(v12, this);
    ImsResult::operator=((uint64_t)v13, (uint64_t)v12);
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(v12);
    ImsResult::operator=((uint64_t)v13, (uint64_t)v12);
  }
  ImsResult::~ImsResult((ImsResult *)v12);
  ImsResult::ImsResult(a2, (uint64_t)v13);
LABEL_11:
  ImsResult::~ImsResult((ImsResult *)v13);
}

void sub_1BF174218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  ImsResult::~ImsResult((ImsResult *)&a9);
  ImsResult::~ImsResult((ImsResult *)&a18);
  _Unwind_Resume(a1);
}

void BambiStrictCallHandler::localResumeCompleted(BambiStrictCallHandler *this)
{
  _BYTE v1[72];

  BambiStrictCallHandler::performNextCallAction(this, (uint64_t)v1);
  ImsResult::~ImsResult((ImsResult *)v1);
}

void BambiStrictCallHandler::prepareCompleted(BambiStrictCallHandler *this)
{
  _BYTE v1[72];

  BambiStrictCallHandler::performNextCallAction(this, (uint64_t)v1);
  ImsResult::~ImsResult((ImsResult *)v1);
}

void BambiStrictCallHandler::handleCallInvalidated(BambiStrictCallHandler *this, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BambiStrictCallHandler *v21;
  _QWORD *v22;
  BambiStrictCallHandler *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _BYTE v33[72];
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;

  v4 = *((_QWORD *)this + 16);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(v4 + 160);
    if (v5)
    {
      v6 = *(_QWORD *)(v4 + 152);
      p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
      do
        v8 = __ldxr(p_shared_weak_owners);
      while (__stxr(v8 + 1, p_shared_weak_owners));
      v36 = 0;
      v37 = std::__shared_weak_count::lock(v5);
      if (v37)
        v36 = v6;
      else
        v6 = 0;
      std::__shared_weak_count::__release_weak(v5);
    }
    else
    {
      v6 = 0;
      v36 = 0;
      v37 = 0;
    }
    if (v6 == *a2)
    {
      v16 = (*(uint64_t (**)(BambiStrictCallHandler *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(BambiStrictCallHandler *, uint64_t))(*(_QWORD *)this + 16))(this, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"removing current activity ", 26);
      *(_BYTE *)(v16 + 17) = 0;
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), v16);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v16 + 17) = 0;
      v17 = *((_QWORD *)this + 16);
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      *((_QWORD *)this + 16) = 0;
    }
    else
    {
      v9 = (_QWORD *)*((_QWORD *)this + 16);
      v10 = a2[1];
      v34 = *a2;
      v35 = (std::__shared_weak_count *)v10;
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      BambiCallActivity::invalidateCall(v9, &v34);
      v13 = v35;
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    v18 = v37;
    if (v37)
    {
      v19 = (unint64_t *)&v37->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  v21 = (BambiStrictCallHandler *)*((_QWORD *)this + 14);
  if (v21 != (BambiStrictCallHandler *)((char *)this + 104))
  {
    do
    {
      v23 = (BambiStrictCallHandler *)*((_QWORD *)v21 + 1);
      v22 = (_QWORD *)*((_QWORD *)v21 + 2);
      v24 = (std::__shared_weak_count *)v22[20];
      if (v24)
      {
        v25 = v22[19];
        v26 = (unint64_t *)&v24->__shared_weak_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        v36 = 0;
        v28 = std::__shared_weak_count::lock(v24);
        v37 = v28;
        if (v28)
          v36 = v25;
        else
          v25 = 0;
        std::__shared_weak_count::__release_weak(v24);
      }
      else
      {
        v28 = 0;
        v25 = 0;
        v36 = 0;
        v37 = 0;
      }
      if (v25 == *a2)
      {
        v29 = (*(uint64_t (**)(BambiStrictCallHandler *))(*(_QWORD *)this + 64))(this);
        (*(void (**)(BambiStrictCallHandler *, uint64_t))(*(_QWORD *)this + 16))(this, v29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"removing queued activity ", 25);
        *(_BYTE *)(v29 + 17) = 0;
        (*(void (**)(_QWORD *, uint64_t))(*v22 + 16))(v22, v29);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v29 + 17) = 0;
        v30 = *(_QWORD *)v21;
        *(_QWORD *)(v30 + 8) = *((_QWORD *)v21 + 1);
        **((_QWORD **)v21 + 1) = v30;
        --*((_QWORD *)this + 15);
        operator delete(v21);
        (*(void (**)(_QWORD *))(*v22 + 8))(v22);
        if (v28)
        {
LABEL_40:
          v31 = (unint64_t *)&v28->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
      }
      else if (v28)
      {
        goto LABEL_40;
      }
      v21 = v23;
    }
    while (v23 != (BambiStrictCallHandler *)((char *)this + 104));
  }
  BambiStrictCallHandler::performNextCallAction(this, (uint64_t)v33);
  ImsResult::~ImsResult((ImsResult *)v33);
}

void sub_1BF1745F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *BambiStrictCallHandler::logPrefix(BambiStrictCallHandler *this, ImsOutStream *a2)
{
  _QWORD *result;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"StrictCallHandler: ", 19);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

uint64_t BambiStrictCallHandler::isStrict(BambiStrictCallHandler *this)
{
  return 1;
}

void std::__shared_ptr_emplace<BambiCallStartAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E52E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiCallStartAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E52E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<BambiCallStartAction>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *BambiCallRequireCallsHeldAction::BambiCallRequireCallsHeldAction(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];

  v11[0] = a2;
  v11[1] = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  BambiCallAction::BambiCallAction((uint64_t)a1, v11, a4);
  if (a3)
  {
    v8 = (unint64_t *)&a3->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *a1 = &off_1E78C5078;
  a1[1] = &unk_1E78C50D8;
  return a1;
}

void sub_1BF174744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BambiCallResumeAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E5330;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiCallResumeAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E5330;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<BambiCallResumeAction>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<BambiCallAnswerAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E5380;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiCallAnswerAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E5380;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<BambiCallAnswerAction>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RTCPSenderInfo::packetize(RTCPSenderInfo *this@<X0>, std::vector<unsigned int> *a2@<X8>)
{
  std::vector<unsigned int>::pointer begin;

  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<unsigned int>::resize(a2, 5uLL);
  begin = a2->__begin_;
  *begin = bswap32(*(_DWORD *)this);
  begin[1] = bswap32(*((_DWORD *)this + 1));
  begin[2] = bswap32(*((_DWORD *)this + 2));
  begin[3] = bswap32(*((_DWORD *)this + 3));
  begin[4] = bswap32(*((_DWORD *)this + 4));
}

void sub_1BF17486C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

ImsOutStream *RTCPSenderInfo::toStream(RTCPSenderInfo *this, ImsOutStream *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" Sender Info - High NTP: ", 25);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" Low NTP: ", 10);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" RTP timestamp: ", 16);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" Sender's Packet Count: ", 24);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" Sender's Octet Count: ", 23);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  return a2;
}

void XcapCDNoReplyTimer::XcapCDNoReplyTimer(XcapCDNoReplyTimer *this)
{
  char *v2;
  uint64_t **v3;
  unsigned __int8 v4;
  char *v5;

  *(_QWORD *)this = &off_1E78CE278;
  v2 = (char *)this + 8;
  v4 = 0;
  v5 = (char *)&v4;
  v3 = std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v4, (uint64_t)&std::piecewise_construct, &v5);
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)v2, (__int128 *)"NoReplyTimer", (__int128 *)(v3 + 5));
  *(_QWORD *)this = &off_1E78E53D0;
  *((_QWORD *)this + 1) = &unk_1E78E5448;
  *((_DWORD *)this + 16) = 0;
}

void XcapCDNoReplyTimer::setText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  std::string::size_type size;
  std::string *p_s1;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  std::string __s1;

  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  v5 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    size = __s1.__r_.__value_.__l.__size_;
  if (size == 12)
  {
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v10 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (memcmp(__s1.__r_.__value_.__l.__data_, "NoReplyTimer", __s1.__r_.__value_.__l.__size_))
        goto LABEL_18;
    }
    else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      v8 = "NoReplyTimer";
      v9 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v8)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v8;
        if (!--v9)
          goto LABEL_12;
      }
      goto LABEL_16;
    }
LABEL_12:
    if (*(char *)(a3 + 23) >= 0)
      v11 = (const char *)a3;
    else
      v11 = *(const char **)a3;
    *(_DWORD *)(a1 + 64) = atoi(v11);
  }
LABEL_16:
  if ((v5 & 0x80) == 0)
    return;
  v10 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_18:
  operator delete(v10);
}

uint64_t XcapCDNoReplyTimer::constructTree@<X0>(XcapCDNoReplyTimer *this@<X0>, uint64_t *a2@<X8>)
{
  char *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p[2];
  char v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  _OWORD v15[4];
  void *v16[2];
  __int128 v17;
  __int128 v18;
  _BYTE v19[144];
  uint64_t v20;

  *a2 = 0;
  a2[1] = 0;
  v3 = (char *)this + 8;
  bambi::XmlTreeItem::makeNode((XcapCDNoReplyTimer *)((char *)this + 8), a2);
  v20 = 0;
  v18 = 0u;
  memset(v19, 0, sizeof(v19));
  *(_OWORD *)v16 = 0u;
  v17 = 0u;
  memset(v15, 0, sizeof(v15));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  std::ostream::operator<<();
  v4 = a2[1];
  v13 = *a2;
  v14 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15 + 8, __p);
  (*(void (**)(char *, uint64_t *, void **))(*(_QWORD *)v3 + 24))(v3, &v13, __p);
  if (v12 < 0)
    operator delete(__p[0]);
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)&v15[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v15 + *(_QWORD *)(*(_QWORD *)&v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v15[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v17) < 0)
    operator delete(v16[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v19);
}

void sub_1BF174C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a18);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'XcapCDNoReplyTimer::constructTree@<X0>(XcapCDNoReplyTimer *this@<X0>, uint64_t *a2@<X8>)
{
  return XcapCDNoReplyTimer::constructTree((XcapCDNoReplyTimer *)((char *)this - 8), a2);
}

void XcapCDNoReplyTimer::~XcapCDNoReplyTimer(void **this)
{
  bambi::XmlTreeItem::~XmlTreeItem(this + 1);
}

{
  bambi::XmlTreeItem::~XmlTreeItem(this + 1);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'XcapCDNoReplyTimer::~XcapCDNoReplyTimer(void **this)
{
  bambi::XmlTreeItem::~XmlTreeItem(this);
  JUMPOUT(0x1C3B87100);
}

void SipPathHeader::~SipPathHeader(void **this)
{
  *this = off_1E78C3C20;
  SipRouteSet::~SipRouteSet((SipRouteSet *)(this + 8));
  SipHeader::~SipHeader(this);
}

{
  *this = off_1E78C3C20;
  SipRouteSet::~SipRouteSet((SipRouteSet *)(this + 8));
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C3B87100);
}

SipRouteSetHeader *SipPathHeader::clone(SipPathHeader *this)
{
  SipRouteSetHeader *v2;

  v2 = (SipRouteSetHeader *)operator new();
  SipRouteSetHeader::SipRouteSetHeader(v2, this);
  *(_QWORD *)v2 = &off_1E78E54F8;
  return v2;
}

void sub_1BF174E08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1093C40B808BD88);
  _Unwind_Resume(a1);
}

void SipLockable::~SipLockable(SipLockable *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 48)) = a2[1];
  v4 = *((_QWORD *)this + 8);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  std::__tree<std::string>::destroy((uint64_t)this + 16, *((char **)this + 3));
}

void SipLockable::~SipLockable(SipLockable *this)
{
}

{
  JUMPOUT(0x1C3B87100);
}

void SipLockable::useBlockQueue(SipLockable *this)
{
  uint64_t v2;
  _QWORD v3[2];
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_QWORD *)v2 = &off_1E78CC4A0;
  pthread_mutex_init((pthread_mutex_t *)(v2 + 8), 0);
  *(_QWORD *)(v2 + 72) = v2 + 72;
  *(_QWORD *)(v2 + 80) = v2 + 72;
  *(_QWORD *)(v2 + 88) = 0;
  *((_QWORD *)this + 8) = v2;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v3[0] = &off_1E78B7238;
  v3[1] = &_bambiDomain;
  v4 = 0;
  ImsResult::~ImsResult((ImsResult *)v3);
}

void sub_1BF174F6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C404AE7F42ALL);
  _Unwind_Resume(a1);
}

uint64_t SipLockable::acquireTerminationLock(SipLockable *this, const LoggableString *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;

  if (*((_BYTE *)this + 12))
  {
    ++*((_DWORD *)this + 2);
    std::string::basic_string[abi:ne180100]<0>(v13, "sip.lock");
    std::string::basic_string[abi:ne180100]<0>(v11, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::spam(ims::_logger, (uint64_t)v13, (uint64_t)v11);
    (*(void (**)(void **__return_ptr, SipLockable *))(*(_QWORD *)this + 24))(__p, this);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 40))(v4, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)": acquired lock [", 17);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, const LoggableString *))(*(_QWORD *)v4 + 40))(v4, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"] (count=", 9);
    *(_BYTE *)(v4 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)")", 1);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if (v10 < 0)
      operator delete(__p[0]);
    if (v12 < 0)
      operator delete(v11[0]);
    if (v14 < 0)
      operator delete(v13[0]);
    v13[0] = a2;
    v5 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 2, (void **)a2, (__int128 **)v13);
    ++*((_DWORD *)v5 + 14);
    return *((unsigned int *)this + 2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "sip.lock");
    std::string::basic_string[abi:ne180100]<0>(v11, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)v13, (uint64_t)v11);
    (*(void (**)(void **__return_ptr, SipLockable *))(*(_QWORD *)this + 24))(__p, this);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 40))(v7, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, const LoggableString *))(*(_QWORD *)v7 + 40))(v7, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" tried to lock a dead object", 28);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v10 < 0)
      operator delete(__p[0]);
    if (v12 < 0)
      operator delete(v11[0]);
    if (v14 < 0)
      operator delete(v13[0]);
    std::string::basic_string[abi:ne180100]<0>(v13, "sip.lock");
    std::string::basic_string[abi:ne180100]<0>(v11, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::error(ims::_logger, (uint64_t)v13, (uint64_t)v11);
    (*(void (**)(void **__return_ptr, SipLockable *))(*(_QWORD *)this + 24))(__p, this);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 40))(v8, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)": I was killed by ", 18);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v8 + 40))(v8, (char *)this + 40);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v10 < 0)
      operator delete(__p[0]);
    if (v12 < 0)
      operator delete(v11[0]);
    if (v14 < 0)
      operator delete(v13[0]);
    return 0;
  }
}

void sub_1BF175318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t SipLockable::releaseTerminationLock(SipLockable *this, std::string *a2)
{
  int v4;
  uint64_t v5;
  char **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  char v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  SipLockable *v25;
  SipLockable *v26;
  SipLockable *v27;
  void *v29[2];
  __int128 v30;
  void *__p[2];
  char v32;
  std::string v33;

  if (*((_BYTE *)this + 12))
  {
    v4 = *((_DWORD *)this + 2);
    v5 = (v4 - 1);
    *((_DWORD *)this + 2) = v5;
    v6 = (char **)((char *)this + 16);
    v29[0] = a2;
    v7 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 2, (void **)&a2->__r_.__value_.__l.__data_, (__int128 **)v29);
    v8 = *((_DWORD *)v7 + 14) - 1;
    *((_DWORD *)v7 + 14) = v8;
    if (v8)
    {
      v29[0] = a2;
      if ((std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 2, (void **)&a2->__r_.__value_.__l.__data_, (__int128 **)v29)[7] & 0x80000000) == 0)
      {
LABEL_44:
        std::string::basic_string[abi:ne180100]<0>(v29, "sip.lock");
        std::string::basic_string[abi:ne180100]<0>(&v33, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v21 = ImsLogger::spam(ims::_logger, (uint64_t)v29, (uint64_t)&v33);
        (*(void (**)(void **__return_ptr, SipLockable *))(*(_QWORD *)this + 24))(__p, this);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v21 + 40))(v21, __p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)": released lock [", 17);
        *(_BYTE *)(v21 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v21 + 40))(v21, a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"] (", 3);
        *(_BYTE *)(v21 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v21 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)" remaining", 10);
        *(_BYTE *)(v21 + 17) = 0;
        if (v32 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v33.__r_.__value_.__l.__data_);
        if (SBYTE7(v30) < 0)
          operator delete(v29[0]);
        if (v4 > 1)
        {
          std::string::basic_string[abi:ne180100]<0>(v29, "sip.lock");
          std::string::basic_string[abi:ne180100]<0>(&v33, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v24 = ImsLogger::spam(ims::_logger, (uint64_t)v29, (uint64_t)&v33);
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v33.__r_.__value_.__l.__data_);
          if (SBYTE7(v30) < 0)
            operator delete(v29[0]);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)":", 1);
          *(_BYTE *)(v24 + 17) = 0;
          v25 = (SipLockable *)*((_QWORD *)this + 2);
          if (v25 != (SipLockable *)((char *)this + 24))
          {
            do
            {
              *(_OWORD *)v29 = 0u;
              v30 = 0u;
              if (*((char *)v25 + 55) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v29, *((const std::string::value_type **)v25 + 4), *((_QWORD *)v25 + 5));
              }
              else
              {
                *(_OWORD *)v29 = *((_OWORD *)v25 + 2);
                *(_QWORD *)&v30 = *((_QWORD *)v25 + 6);
              }
              DWORD2(v30) = *((_DWORD *)v25 + 14);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)" [", 2);
              *(_BYTE *)(v24 + 17) = 0;
              LoggableString::LoggableString(&v33, (const std::string *)v29);
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v24 + 40))(v24, &v33);
              if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v33.__r_.__value_.__l.__data_);
              if (SDWORD2(v30) >= 2)
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)" (", 2);
                *(_BYTE *)(v24 + 17) = 0;
                std::ostream::operator<<();
                *(_BYTE *)(v24 + 17) = 0;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)")", 1);
                *(_BYTE *)(v24 + 17) = 0;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"]", 1);
              *(_BYTE *)(v24 + 17) = 0;
              if (SBYTE7(v30) < 0)
                operator delete(v29[0]);
              v26 = (SipLockable *)*((_QWORD *)v25 + 1);
              if (v26)
              {
                do
                {
                  v27 = v26;
                  v26 = *(SipLockable **)v26;
                }
                while (v26);
              }
              else
              {
                do
                {
                  v27 = (SipLockable *)*((_QWORD *)v25 + 2);
                  v19 = *(_QWORD *)v27 == (_QWORD)v25;
                  v25 = v27;
                }
                while (!v19);
              }
              v25 = v27;
            }
            while (v27 != (SipLockable *)((char *)this + 24));
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)")", 1);
          *(_BYTE *)(v24 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v24 + 17) = 0;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v29, "sip.lock");
          std::string::basic_string[abi:ne180100]<0>(&v33, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v22 = ImsLogger::spam(ims::_logger, (uint64_t)v29, (uint64_t)&v33);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)")", 1);
          *(_BYTE *)(v22 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v22 + 17) = 0;
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v33.__r_.__value_.__l.__data_);
          if (SBYTE7(v30) < 0)
            operator delete(v29[0]);
          std::string::basic_string[abi:ne180100]<0>(v29, "sip.lock");
          std::string::basic_string[abi:ne180100]<0>(&v33, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v23 = ImsLogger::spam(ims::_logger, (uint64_t)v29, (uint64_t)&v33);
          (*(void (**)(void **__return_ptr, SipLockable *))(*(_QWORD *)this + 24))(__p, this);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v23 + 40))(v23, __p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)": terminationLocksReleased", 26);
          *(_BYTE *)(v23 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v23 + 17) = 0;
          if (v32 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v33.__r_.__value_.__l.__data_);
          if (SBYTE7(v30) < 0)
            operator delete(v29[0]);
          *((_BYTE *)this + 12) = 0;
          std::string::operator=((std::string *)((char *)this + 40), a2);
          (*(void (**)(SipLockable *))(*(_QWORD *)this + 48))(this);
        }
        return v5;
      }
      std::string::basic_string[abi:ne180100]<0>(v29, "sip.lock");
      std::string::basic_string[abi:ne180100]<0>(&v33, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v9 = ImsLogger::error(ims::_logger, (uint64_t)v29, (uint64_t)&v33);
      (*(void (**)(void **__return_ptr, SipLockable *))(*(_QWORD *)this + 24))(__p, this);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v9 + 40))(v9, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)": overrelease of lock [", 23);
      *(_BYTE *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v9 + 40))(v9, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"]", 1);
      *(_BYTE *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v9 + 17) = 0;
      if (v32 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if (SBYTE7(v30) < 0)
        operator delete(v29[0]);
    }
    v10 = (_QWORD *)*((_QWORD *)this + 3);
    if (v10)
    {
      v11 = (char *)this + 24;
      do
      {
        v12 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 4, (void **)&a2->__r_.__value_.__l.__data_);
        if (v12 >= 0)
          v13 = v10;
        else
          v13 = v10 + 1;
        if (v12 >= 0)
          v11 = (char *)v10;
        v10 = (_QWORD *)*v13;
      }
      while (*v13);
      if (v11 != (char *)this + 24
        && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v11 + 4) & 0x80) == 0)
      {
        v14 = (char *)*((_QWORD *)v11 + 1);
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = *(char **)v14;
          }
          while (v14);
        }
        else
        {
          v18 = v11;
          do
          {
            v15 = (char *)*((_QWORD *)v18 + 2);
            v19 = *(_QWORD *)v15 == (_QWORD)v18;
            v18 = v15;
          }
          while (!v19);
        }
        if (*v6 == v11)
          *v6 = v15;
        v20 = (uint64_t *)*((_QWORD *)this + 3);
        --*((_QWORD *)this + 4);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v20, (uint64_t *)v11);
        if (v11[55] < 0)
          operator delete(*((void **)v11 + 4));
        operator delete(v11);
      }
    }
    goto LABEL_44;
  }
  std::string::basic_string[abi:ne180100]<0>(v29, "sip.lock");
  std::string::basic_string[abi:ne180100]<0>(&v33, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v16 = ImsLogger::error(ims::_logger, (uint64_t)v29, (uint64_t)&v33);
  (*(void (**)(void **__return_ptr, SipLockable *))(*(_QWORD *)this + 24))(__p, this);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v16 + 40))(v16, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v16 + 40))(v16, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" tried to release a dead object", 31);
  *(_BYTE *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v16 + 17) = 0;
  if (v32 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SBYTE7(v30) < 0)
    operator delete(v29[0]);
  std::string::basic_string[abi:ne180100]<0>(v29, "sip.lock");
  std::string::basic_string[abi:ne180100]<0>(&v33, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v17 = ImsLogger::error(ims::_logger, (uint64_t)v29, (uint64_t)&v33);
  (*(void (**)(void **__return_ptr, SipLockable *))(*(_QWORD *)this + 24))(__p, this);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v17 + 40))(v17, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)": I was killed by ", 18);
  *(_BYTE *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v17 + 40))(v17, (char *)this + 40);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v17 + 17) = 0;
  if (v32 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SBYTE7(v30) < 0)
    operator delete(v29[0]);
  return 0;
}

void sub_1BF175C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void SipLockable::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "Lockable");
}

void SipLockable::printLocks(SipLockable *this, ImsOutStream *a2)
{
  _QWORD *v2;
  char *v3;
  char *v5;
  char *v6;
  BOOL v7;
  std::string __p;
  _BYTE v9[32];

  v2 = (_QWORD *)*((_QWORD *)this + 2);
  v3 = (char *)this + 24;
  if (v2 != (_QWORD *)((char *)this + 24))
  {
    do
    {
      memset(v9, 0, sizeof(v9));
      if (*((char *)v2 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v9, (const std::string::value_type *)v2[4], v2[5]);
      }
      else
      {
        *(_OWORD *)v9 = *((_OWORD *)v2 + 2);
        *(_QWORD *)&v9[16] = v2[6];
      }
      *(_DWORD *)&v9[24] = *((_DWORD *)v2 + 14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" [", 2);
      *((_BYTE *)a2 + 17) = 0;
      LoggableString::LoggableString(&__p, (const std::string *)v9);
      (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (*(int *)&v9[24] >= 2)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" (", 2);
        *((_BYTE *)a2 + 17) = 0;
        std::ostream::operator<<();
        *((_BYTE *)a2 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)")", 1);
        *((_BYTE *)a2 + 17) = 0;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"]", 1);
      *((_BYTE *)a2 + 17) = 0;
      if ((v9[23] & 0x80000000) != 0)
        operator delete(*(void **)v9);
      v5 = (char *)v2[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)v2[2];
          v7 = *(_QWORD *)v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
}

void sub_1BF175ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void SipLockable::performBlock(uint64_t a1, __int128 *a2, uint64_t *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[6];
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;

  if (*(_QWORD *)(a1 + 64))
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "sip.lock");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)v27, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"performing block ", 17);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v8 + 40))(v8, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" on SipLockable's block queue", 29);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v26 < 0)
      operator delete(__p[0]);
    if (v28 < 0)
      operator delete(v27[0]);
    v9 = *(_QWORD *)(a1 + 64);
    v10 = (std::__shared_weak_count *)a3[1];
    v23 = *a3;
    v24 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    ImsBlockQueue::addBlock<std::shared_ptr<SipLockable>>(v9, a2, (uint64_t)&v23, a4);
    v13 = v24;
    if (v24)
    {
      v14 = (unint64_t *)&v24->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
LABEL_23:
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    v16 = *a3;
    v13 = (std::__shared_weak_count *)a3[1];
    if (v13)
    {
      p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
      do
        v18 = __ldxr(p_shared_weak_owners);
      while (__stxr(v18 + 1, p_shared_weak_owners));
    }
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 1174405120;
    v21[2] = ___ZN11SipLockable12performBlockERK14LoggableStringNSt3__110shared_ptrIS_EEU13block_pointerFvvE_block_invoke;
    v21[3] = &unk_1E78E55F0;
    v21[5] = v16;
    v22 = v13;
    if (v13)
    {
      v19 = (unint64_t *)&v13->__shared_weak_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21[4] = a4;
    ims::performBlock((IMSClientManager *)v21);
    if (v22)
      std::__shared_weak_count::__release_weak(v22);
    if (v13)
      goto LABEL_23;
  }
}

void sub_1BF176108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__shared_weak_count *v24;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(exception_object);
}

void ___ZN11SipLockable12performBlockERK14LoggableStringNSt3__110shared_ptrIS_EEU13block_pointerFvvE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[5])
        (*(void (**)(void))(a1[4] + 16))();
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF1761FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11SipLockableEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11SipLockableEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void SipThreadSafeLockable::SipThreadSafeLockable(SipThreadSafeLockable *this, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2[1];
  *(_QWORD *)this = v2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v2 - 48)) = a2[2];
  *((_BYTE *)this + 12) = 1;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
  *((_DWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 48)) = a2[3];
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 72), 0);
}

void sub_1BF1762CC(_Unwind_Exception *a1)
{
  SipLockable *v1;
  uint64_t *v2;

  SipLockable::~SipLockable(v1, v2);
  _Unwind_Resume(a1);
}

void SipThreadSafeLockable::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "ThreadSafeLockable");
}

uint64_t SipThreadSafeLockable::acquireTerminationLock(SipThreadSafeLockable *this, const LoggableString *a2)
{
  uint64_t v4;
  pthread_mutex_t *v6;
  _BYTE v7[72];

  v6 = 0;
  ImsLock::set((pthread_mutex_t *)((char *)this + 72), &v6, (uint64_t)v7);
  ImsResult::~ImsResult((ImsResult *)v7);
  v4 = SipLockable::acquireTerminationLock(this, a2);
  ImsLock::~ImsLock(&v6);
  return v4;
}

void sub_1BF176354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_mutex_t *a9)
{
  ImsLock::~ImsLock(&a9);
  _Unwind_Resume(a1);
}

uint64_t SipThreadSafeLockable::releaseTerminationLock(SipThreadSafeLockable *this, std::string *a2)
{
  uint64_t v4;
  pthread_mutex_t *v6;
  _BYTE v7[72];

  v6 = 0;
  ImsLock::set((pthread_mutex_t *)((char *)this + 72), &v6, (uint64_t)v7);
  ImsResult::~ImsResult((ImsResult *)v7);
  v4 = SipLockable::releaseTerminationLock(this, a2);
  ImsLock::~ImsLock(&v6);
  return v4;
}

void sub_1BF1763C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_mutex_t *a9)
{
  ImsLock::~ImsLock(&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, __int128 **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  _QWORD *v9;
  __int128 *v10;
  uint64_t *v11;
  std::string *v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_9:
    v10 = *a3;
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = (std::string *)(v11 + 4);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v13 = *v10;
      v11[6] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    *((_DWORD *)v11 + 14) = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    *v6 = v11;
    v14 = (uint64_t *)**a1;
    v15 = v11;
    if (v14)
    {
      *a1 = v14;
      v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = v5 + 4;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0)
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_9;
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, a2) & 0x80) == 0)
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_9;
  }
  v11 = *v6;
  if (!*v6)
    goto LABEL_9;
  return v11;
}

void sub_1BF1764EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t SipParameterMap::operator==(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void **v6;
  uint64_t v7;
  void *v8;
  void *v9;
  int v10;
  const void **v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;

  if (a1[3] == *(_QWORD *)(a2 + 24))
  {
    v2 = (_QWORD *)a1[1];
    v3 = a1 + 2;
    if (v2 == a1 + 2)
      return 1;
    v4 = a2 + 8;
    v5 = (void **)(a2 + 16);
    while (1)
    {
      v6 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v4, (void **)v2 + 4);
      if (v5 == v6)
        break;
      v7 = *((unsigned __int8 *)v6 + 79);
      if ((v7 & 0x80u) == 0)
        v8 = (void *)*((unsigned __int8 *)v6 + 79);
      else
        v8 = v6[8];
      v9 = (void *)*((unsigned __int8 *)v2 + 79);
      v10 = (char)v9;
      if ((char)v9 < 0)
        v9 = (void *)v2[8];
      if (v8 != v9)
        break;
      v11 = (const void **)(v6 + 7);
      if (v10 >= 0)
        v12 = (unsigned __int8 *)(v2 + 7);
      else
        v12 = (unsigned __int8 *)v2[7];
      if ((v7 & 0x80) != 0)
      {
        if (memcmp(*v11, v12, (size_t)v6[8]))
          return 0;
      }
      else if (*((_BYTE *)v6 + 79))
      {
        while (*(unsigned __int8 *)v11 == *v12)
        {
          v11 = (const void **)((char *)v11 + 1);
          ++v12;
          if (!--v7)
            goto LABEL_20;
        }
        return 0;
      }
LABEL_20:
      v13 = (_QWORD *)v2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v2[2];
          v15 = *v14 == (_QWORD)v2;
          v2 = v14;
        }
        while (!v15);
      }
      v2 = v14;
      if (v14 == v3)
        return 1;
    }
  }
  return 0;
}

std::string *SipParameterMap::setParameter(uint64_t a1, __int128 *a2, const std::string *a3)
{
  uint64_t *v4;
  __int128 *v6;

  v6 = a2;
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 8), (void **)a2, (uint64_t)&std::piecewise_construct, &v6);
  return std::string::operator=((std::string *)(v4 + 7), a3);
}

uint64_t SipParameterMap::setParameter(uint64_t a1, __int128 *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  __int128 v7;
  uint64_t v8;
  _OWORD v9[4];
  void *__p[2];
  __int128 v11;
  __int128 v12;
  _BYTE v13[144];
  uint64_t v14;
  __int128 *v15;

  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v11 = 0u;
  v12 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v9, 0, sizeof(v9));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v9 + 8, &v7);
  v15 = a2;
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 8), (void **)a2, (uint64_t)&std::piecewise_construct, &v15);
  v5 = v4 + 7;
  if (*((char *)v4 + 79) < 0)
    operator delete((void *)*v5);
  *(_OWORD *)v5 = v7;
  v5[2] = v8;
  *(_QWORD *)&v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(*(_QWORD *)&v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v9[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v11) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v13);
}

void sub_1BF1767A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void SipParameterMap::clearParameter(uint64_t a1, void **a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;

  v3 = (uint64_t **)(a1 + 8);
  v4 = (uint64_t *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 8, a2);
  if ((uint64_t *)(a1 + 16) != v4)
  {
    v5 = v4;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(v3, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v5 + 4));
    operator delete(v5);
  }
}

std::string *SipParameterMap::addParameters(std::string *this, const SipParameterMap *a2)
{
  char *v2;
  char *v3;
  uint64_t **p_size;
  uint64_t *v5;
  char *v6;
  char *v7;
  BOOL v8;
  __int128 *v9;

  v2 = (char *)*((_QWORD *)a2 + 1);
  v3 = (char *)a2 + 16;
  if (v2 != (char *)a2 + 16)
  {
    p_size = (uint64_t **)&this->__r_.__value_.__l.__size_;
    do
    {
      v9 = (__int128 *)(v2 + 32);
      v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(p_size, (void **)v2 + 4, (uint64_t)&std::piecewise_construct, &v9);
      this = std::string::operator=((std::string *)(v5 + 7), (const std::string *)(v2 + 56));
      v6 = (char *)*((_QWORD *)v2 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v2 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
    }
    while (v7 != v3);
  }
  return this;
}

unint64_t SipParameterMap::uintParameter(uint64_t a1, void **a2, uint64_t a3)
{
  void **v5;
  __int128 *v6;

  v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 8, a2);
  if ((void **)(a1 + 16) == v5)
    v6 = &ims::kEmptyString;
  else
    v6 = (__int128 *)(v5 + 7);
  if ((*((char *)v6 + 23) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)v6 + 23))
      return a3;
    return strtoul((const char *)v6, 0, 10);
  }
  if (*((_QWORD *)v6 + 1))
  {
    v6 = *(__int128 **)v6;
    return strtoul((const char *)v6, 0, 10);
  }
  return a3;
}

ImsOutStream *SipParameterMap::toStream(SipParameterMap *this, ImsOutStream *a2, int a3, const __CFString *a4, const __CFString *a5, char a6)
{
  _QWORD *v7;
  char *v8;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v35;
  char *v37;
  char *v38;
  std::string v40;
  void *v41;
  char v42;
  std::string __p;

  v7 = (_QWORD *)*((_QWORD *)this + 1);
  v8 = (char *)this + 16;
  if (v7 != (_QWORD *)((char *)this + 16))
  {
    v14 = 0;
    do
    {
      if (a3)
      {
        if (v14)
        {
          v15 = (_QWORD *)*((_QWORD *)a2 + 1);
          v40.__r_.__value_.__s.__data_[0] = 38;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v40, 1);
          *((_BYTE *)a2 + 17) = 0;
        }
      }
      else
      {
        if (v14 || (a6 & 1) == 0)
        {
          v16 = (_QWORD *)*((_QWORD *)a2 + 1);
          v40.__r_.__value_.__s.__data_[0] = 59;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v40, 1);
          *((_BYTE *)a2 + 17) = 0;
        }
        if (!*((_BYTE *)this + 32))
        {
          LoggableString::LoggableString(&v40, (const std::string *)(v7 + 4));
          (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &v40);
          goto LABEL_16;
        }
      }
      memset(&v40, 0, sizeof(v40));
      if (*((char *)v7 + 55) < 0)
        std::string::__init_copy_ctor_external(&v40, (const std::string::value_type *)v7[4], v7[5]);
      else
        v40 = *(std::string *)(v7 + 4);
      ims::addPercentEscapes((uint64_t)&v40, a4, a5);
      LoggableString::LoggableString(&__p, &v40);
      (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_16:
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      if (*((char *)v7 + 79) < 0)
      {
        if (v7[8])
        {
LABEL_22:
          v17 = (_QWORD *)*((_QWORD *)a2 + 1);
          v40.__r_.__value_.__s.__data_[0] = 61;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v40, 1);
          *((_BYTE *)a2 + 17) = 0;
          memset(&__p, 0, sizeof(__p));
          if (*((char *)v7 + 79) < 0)
            std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v7[7], v7[8]);
          else
            __p = *(std::string *)(v7 + 7);
          if (*((_BYTE *)this + 32) || a3)
            ims::addPercentEscapes((uint64_t)&__p, a4, a5);
          if (!*((_BYTE *)this + 33) || !ImsOutStream::isRedacting(a2))
            goto LABEL_80;
          v18 = (unsigned __int16 *)(v7 + 4);
          v19 = *((unsigned __int8 *)v7 + 55);
          v20 = (char)v19;
          if ((v19 & 0x80u) != 0)
            v19 = v7[5];
          if (v19 <= 7)
          {
            if (v19 == 3)
            {
              if (v20 < 0)
                v18 = *(unsigned __int16 **)v18;
              v35 = *v18;
              v29 = *((unsigned __int8 *)v18 + 2);
              v30 = v35 == 24948;
              v31 = 103;
            }
            else
            {
              if (v19 != 6)
                goto LABEL_80;
              if (v20 < 0)
                v18 = *(unsigned __int16 **)v18;
              if (*(_DWORD *)v18 == 1752458605 && v18[2] == 25711)
                goto LABEL_72;
              if (*(_DWORD *)v18 == 1851880034 && v18[2] == 26723)
                goto LABEL_90;
              v28 = *(_DWORD *)v18;
              v29 = v18[2];
              v30 = v28 == 1949134708;
              v31 = 26465;
            }
            if (!v30 || v29 != v31)
              goto LABEL_80;
          }
          else
          {
            if (v19 != 8)
            {
              if (v19 != 16)
              {
                if (v19 != 18)
                  goto LABEL_80;
                if (v20 < 0)
                  v18 = *(unsigned __int16 **)v18;
                v21 = *(_QWORD *)v18;
                v22 = *((_QWORD *)v18 + 1);
                v23 = v18[8];
                v24 = v21 == 0x2E707067332E672BLL && v22 == 0x7974737365636361;
                if (!v24 || v23 != 25968)
                  goto LABEL_80;
LABEL_72:
                LoggableString::LoggableString(&v40, &__p);
                (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &v40);
LABEL_92:
                if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v40.__r_.__value_.__l.__data_);
LABEL_81:
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                goto LABEL_83;
              }
              if (v20 < 0)
                v18 = *(unsigned __int16 **)v18;
              v33 = *(_QWORD *)v18;
              v32 = *((_QWORD *)v18 + 1);
              if (v33 == 0x2E707067332E672BLL && v32 == 0x6665722D69736369)
                goto LABEL_72;
LABEL_80:
              (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 32))(a2, &__p);
              goto LABEL_81;
            }
            if (v20 < 0)
              v18 = *(unsigned __int16 **)v18;
            if (*(_QWORD *)v18 != 0x736563616C706552 && *(_QWORD *)v18 != 0x6761742D6D6F7266)
              goto LABEL_80;
          }
LABEL_90:
          ObfuscatedString::ObfuscatedString((uint64_t)&v40, &__p);
          (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 56))(a2, &v40);
          if (v42 < 0)
            operator delete(v41);
          goto LABEL_92;
        }
      }
      else if (*((_BYTE *)v7 + 79))
      {
        goto LABEL_22;
      }
LABEL_83:
      v37 = (char *)v7[1];
      if (v37)
      {
        do
        {
          v38 = v37;
          v37 = *(char **)v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          v38 = (char *)v7[2];
          v24 = *(_QWORD *)v38 == (_QWORD)v7;
          v7 = v38;
        }
        while (!v24);
      }
      ++v14;
      v7 = v38;
    }
    while (v38 != v8);
  }
  return a2;
}

void sub_1BF176DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t SipParameterMap::fromString(uint64_t a1, std::string *__str, std::string::size_type __pos, int a4)
{
  unsigned __int8 v8;
  uint64_t **v9;
  size_t size;
  std::string *p_s;
  _BYTE *v12;
  std::string::size_type v13;
  uint64_t *v14;
  std::string v16;
  std::string __stra;
  std::string __p;
  std::string __s;
  char v20;

  if (a4)
    v8 = 38;
  else
    v8 = 59;
  v9 = (uint64_t **)(a1 + 8);
  memset(&__s, 0, sizeof(__s));
  while (1)
  {
    __pos = ims::nextTokenQ(__str, __pos, &__s, v8);
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (__pos == -1)
      break;
    if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      size = __s.__r_.__value_.__l.__size_;
      if (__s.__r_.__value_.__l.__size_)
      {
        p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
        goto LABEL_11;
      }
    }
    else if (*((_BYTE *)&__s.__r_.__value_.__s + 23))
    {
      p_s = &__s;
LABEL_11:
      v12 = memchr(p_s, 61, size);
      memset(&__p, 0, sizeof(__p));
      memset(&__stra, 0, sizeof(__stra));
      if (!v12 || (v13 = v12 - (_BYTE *)p_s, v13 == -1))
      {
        std::string::operator=(&__p, &__s);
      }
      else
      {
        std::string::basic_string(&v16, &__s, 0, v13, (std::allocator<char> *)&v20);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p = v16;
        std::string::basic_string(&v16, &__s, v13 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v20);
        if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__stra.__r_.__value_.__l.__data_);
        __stra = v16;
      }
      ims::chomp(&__p, "\r\n\t ", 3);
      ims::chomp(&__stra, "\r\n\t ", 3);
      if (*(_BYTE *)(a1 + 32) || a4)
      {
        ims::removePercentEscapes((uint64_t)&__p);
        ims::removePercentEscapes((uint64_t)&__stra);
      }
      v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v16);
      std::string::operator=((std::string *)(v14 + 7), &__stra);
      if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__stra.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1BF177058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(uint64_t *a1, void **a2, void **a3)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(a1, a2, a3);
  return a1;
}

void sub_1BF1770D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ImsRandomStringGenerator::randomString(ImsRandomStringGenerator *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v3;
  int v6;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a2)
  {
    v3 = a2;
    do
    {
      v6 = std::uniform_int_distribution<unsigned char>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(*((_QWORD *)this + 1), *(_QWORD *)this, *((unsigned __int8 **)this + 1));
      std::string::push_back(a3, charmap[v6]);
      --v3;
    }
    while (v3);
  }
}

void sub_1BF177150(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void ImsRandomStringGenerator::makeBranchParameter(ImsRandomStringGenerator *this@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  std::string v4;

  ImsRandomStringGenerator::randomString(this, 15, &v4);
  v3 = std::string::insert(&v4, 0, "z9hG4bK", 7uLL);
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1BF1771DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *ImsRandomNumberGenerator<unsigned char>::ImsRandomNumberGenerator(_QWORD *a1, char a2, char a3)
{
  _DWORD *v6;
  unsigned int v7;
  unsigned int v8;
  _BYTE *v9;
  std::random_device v11;

  *a1 = 0;
  a1[1] = 0;
  v11.__padding_ = 0;
  std::random_device::random_device[abi:ne180100](&v11);
  v6 = (_DWORD *)operator new();
  v7 = MEMORY[0x1C3B86F80](&v11);
  v8 = v7 + ((v7 / 0x7FFFFFFF) | ((v7 / 0x7FFFFFFF) << 31));
  if (v8 <= 1)
    v8 = 1;
  *v6 = v8;
  *a1 = v6;
  v9 = (_BYTE *)operator new();
  *v9 = a2;
  v9[1] = a3;
  a1[1] = v9;
  std::random_device::~random_device(&v11);
  return a1;
}

void sub_1BF1772C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
  uint64_t v12;

  MEMORY[0x1C3B87100](v12, 0x1000C4052888210);
  std::random_device::~random_device(&a11);
  _Unwind_Resume(a1);
}

std::random_device *std::random_device::random_device[abi:ne180100](std::random_device *a1)
{
  std::string __token;

  std::string::basic_string[abi:ne180100]<0>(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__token.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF177348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::uniform_int_distribution<unsigned char>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t result;
  int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[4];

  LODWORD(result) = a3[1];
  v4 = result - *a3;
  if (v4)
  {
    v5 = v4 + 1;
    if (v4 == -1)
    {
      *(_QWORD *)&v9[0] = a2;
      *(_OWORD *)((char *)v9 + 8) = xmmword_1BF2ABC30;
      *(int64x2_t *)((char *)&v9[1] + 8) = vdupq_n_s64(2uLL);
      *(_OWORD *)((char *)&v9[2] + 8) = xmmword_1BF2ABC40;
      LOBYTE(result) = std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval((uint64_t)v9);
    }
    else
    {
      v7 = __clz(v5);
      v8 = 31;
      memset(&v9[1], 0, 40);
      if (((v5 << v7) & 0x7FFFFFFF) != 0)
        v8 = 32;
      v9[0] = 0uLL;
      std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__independent_bits_engine((uint64_t)v9, a2, v8 - v7);
      do
        LODWORD(result) = std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval((uint64_t)v9);
      while (result >= v5);
      LOBYTE(result) = *a3 + result;
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (a3 % 0x1E)
    v3 = a3 / 0x1E + 1;
  else
    v3 = a3 / 0x1E;
  v4 = a3 / v3;
  *(_QWORD *)(result + 16) = a3 / v3;
  *(_QWORD *)(result + 24) = v3;
  LODWORD(v5) = (-1 << (a3 / v3)) & 0x7FFFFFFE;
  if (a3 / v3 >= 0x20)
    v5 = 0;
  else
    v5 = v5;
  *(_DWORD *)(result + 40) = v5;
  if (v5 / v3 < (v5 ^ 0x7FFFFFFE))
  {
    ++v3;
    v4 = a3 / v3;
    *(_QWORD *)(result + 16) = a3 / v3;
    *(_QWORD *)(result + 24) = v3;
    if (a3 / v3 > 0x1F)
    {
      *(_DWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 32) = v3 + v4 * v3 - a3;
      goto LABEL_13;
    }
    *(_DWORD *)(result + 40) = (-1 << v4) & 0x7FFFFFFE;
  }
  *(_QWORD *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 <= 0x1E)
  {
    *(_DWORD *)(result + 44) = (-2 << v4) & 0x7FFFFFFE;
    v6 = 1;
    goto LABEL_14;
  }
LABEL_13:
  v6 = 0;
  *(_DWORD *)(result + 44) = 0;
LABEL_14:
  v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4)
    v7 = 0;
  v8 = 0xFFFFFFFF >> ~(_BYTE)v4;
  if (!v6)
    v8 = -1;
  *(_DWORD *)(result + 48) = v7;
  *(_DWORD *)(result + 52) = v8;
  return result;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  int v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = 0;
    LODWORD(result) = 0;
    v5 = *(_QWORD *)(a1 + 16);
    v6 = **(_DWORD **)a1;
    do
    {
      do
      {
        v7 = v6 / 0xADC8;
        v8 = 48271 * (v6 % 0xADC8);
        v7 *= 3399;
        v9 = v8 >= v7;
        v10 = v8 - v7;
        if (v9)
          v11 = 0;
        else
          v11 = 0x7FFFFFFF;
        v6 = v11 + v10;
      }
      while (v6 - 1 >= *(_DWORD *)(a1 + 40));
      v12 = (_DWORD)result << v5;
      if (v5 >= 0x20)
        v12 = 0;
      result = ((v6 - 1) & *(_DWORD *)(a1 + 48)) + v12;
      ++v3;
    }
    while (v3 != v2);
    **(_DWORD **)a1 = v6;
  }
  else
  {
    result = 0;
  }
  v13 = *(_QWORD *)(a1 + 24);
  if (v2 < v13)
  {
    v14 = *(unsigned int **)a1;
    v15 = *(_DWORD *)(a1 + 44);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_DWORD *)(a1 + 52);
    v18 = *v14;
    while (1)
    {
      v19 = v18 / 0xADC8;
      v20 = 48271 * (v18 % 0xADC8);
      v19 *= 3399;
      v9 = v20 >= v19;
      v21 = v20 - v19;
      if (v9)
        v22 = 0;
      else
        v22 = 0x7FFFFFFF;
      v18 = v22 + v21;
      if (v18 - 1 < v15)
      {
        v23 = (_DWORD)result << (v16 + 1);
        if (v16 >= 0x1F)
          v23 = 0;
        result = ((v18 - 1) & v17) + v23;
        if (++v2 == v13)
          break;
      }
    }
    *v14 = v18;
  }
  return result;
}

void SipAuthClient::SipAuthClient(SipAuthClient *this, SipUserAgent *a2)
{
  SipDigestAuthResponse *v4;
  std::__shared_weak_count *size;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.auth");
  ImsLogContainer::ImsLogContainer((uint64_t)this, &__p, (const std::string *)((char *)a2 + 56));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_1E78E5760;
  *((_QWORD *)this + 15) = (char *)this + 120;
  *((_QWORD *)this + 16) = (char *)this + 120;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 14) = a2;
  v4 = (SipDigestAuthResponse *)operator new();
  SipDigestAuthResponse::SipDigestAuthResponse(v4, 0);
  *((_QWORD *)this + 13) = v4;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 144, (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v6 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 160, (__int128 *)&__p);
  v8 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v9 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BF177790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v20 = v19;
  MEMORY[0x1C3B87100](v20, 0x10F3C405BF2102ELL);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v17);
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear(v18);
  ImsLogContainer::~ImsLogContainer(v15);
  _Unwind_Resume(a1);
}

void SipAuthClient::~SipAuthClient(SipAuthClient *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E78E5760;
  SipAuthClient::clear(this);
  v2 = *((_QWORD *)this + 13);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 160);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear((uint64_t *)this + 15);
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  SipAuthClient::~SipAuthClient(this);
  JUMPOUT(0x1C3B87100);
}

void SipAuthClient::clear(SipAuthClient *this)
{
  uint64_t (*v2)(SipAuthClient *);
  uint64_t v3;
  _BYTE *v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  if (*((_QWORD *)this + 17))
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    std::list<std::shared_ptr<SipAuthInfo>>::list(&v7, (uint64_t)this + 120);
    std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear((uint64_t *)this + 15);
    v2 = *(uint64_t (**)(SipAuthClient *))(*(_QWORD *)this + 64);
    if (v9 == 1)
    {
      v3 = v2(this);
      (*(void (**)(SipAuthClient *, uint64_t))(*(_QWORD *)this + 16))(this, v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"clearing 1 item from auth queue", 31);
      *(_BYTE *)(v3 + 17) = 0;
      v4 = (_BYTE *)(v3 + 17);
    }
    else
    {
      v3 = v2(this);
      (*(void (**)(SipAuthClient *, uint64_t))(*(_QWORD *)this + 16))(this, v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"clearing ", 9);
      *(_BYTE *)(v3 + 17) = 0;
      v4 = (_BYTE *)(v3 + 17);
      std::ostream::operator<<();
      *(_BYTE *)(v3 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" items from auth queue", 22);
      *(_BYTE *)(v3 + 17) = 0;
    }
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *v4 = 0;
    for (i = v8; i != &v7; i = (uint64_t *)i[1])
      (*(void (**)(_QWORD))(**(_QWORD **)(i[2] + 40) + 24))(*(_QWORD *)(i[2] + 40));
    std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear(&v7);
  }
  v6 = (*(uint64_t (**)(SipAuthClient *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipAuthClient *, uint64_t))(*(_QWORD *)this + 16))(this, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"clearing current auth info", 26);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 18);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 20);
}

void sub_1BF177A6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void SipAuthClient::setAuthResponse(SipAuthClient *this, const SipAuthResponse *a2)
{
  char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  SipAuthInfo *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  if (*((_QWORD *)this + 17))
  {
    v4 = (char *)this + 120;
    v5 = *((_QWORD *)this + 16);
    v7 = *(SipAuthInfo **)(v5 + 16);
    v6 = *(std::__shared_weak_count **)(v5 + 24);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    std::list<std::shared_ptr<SipAuthInfo>>::pop_front((uint64_t)v4);
    if (*((_BYTE *)v7 + 208))
      v10 = (char *)this + 160;
    else
      v10 = (char *)this + 144;
    std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100](v10);
    v11 = (*(uint64_t (**)(SipAuthClient *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipAuthClient *, uint64_t))(*(_QWORD *)this + 16))(this, v11);
    if ((*(unsigned int (**)(const SipAuthResponse *))(*(_QWORD *)a2 + 64))(a2))
    {
      if (*((_BYTE *)v7 + 208))
      {
        std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)this + 20, (uint64_t)v7, (uint64_t)v6);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"updated stored proxy auth response:", 35);
      }
      else
      {
        std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)this + 18, (uint64_t)v7, (uint64_t)v6);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"updated stored auth response:", 29);
      }
      *(_BYTE *)(v11 + 17) = 0;
      v12 = (_BYTE *)(v11 + 17);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"not caching failed auth response:", 33);
      *(_BYTE *)(v11 + 17) = 0;
      v12 = (_BYTE *)(v11 + 17);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    *v12 = 0;
    v14 = (*(uint64_t (**)(const SipAuthResponse *))(*(_QWORD *)a2 + 32))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 56))(v14, v11);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    SipAuthInfo::setResponse(v7, a2);
    if (*((_QWORD *)this + 17))
      SipAuthInfo::sendChallengeToDelegate(*(SipAuthInfo **)(*((_QWORD *)this + 16) + 16));
    if (v6)
    {
      v15 = (unint64_t *)&v6->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    v13 = (*(uint64_t (**)(SipAuthClient *, const SipAuthResponse *))(*(_QWORD *)this + 48))(this, a2);
    (*(void (**)(SipAuthClient *, uint64_t))(*(_QWORD *)this + 16))(this, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"received an auth response without a pending challenge.  Discarding.", 67);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
  }
}

void sub_1BF177D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::list<std::shared_ptr<SipAuthInfo>>::pop_front(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = *(uint64_t **)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  v3 = *v2;
  *(_QWORD *)(v3 + 8) = v2[1];
  *(_QWORD *)v2[1] = v3;
  *(_QWORD *)(a1 + 16) = v1 - 1;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 2));
  operator delete(v2);
}

void SipAuthClient::addAuthorizationToRequest(SipAuthClient *this@<X0>, SipRequest *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const std::string *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  __int128 *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  const std::string *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  const std::string *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  SipHeader *v44;
  SipAuthInfo *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  std::string::size_type v53;
  unint64_t *v54;
  unint64_t v55;
  unsigned __int8 *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unsigned __int8 *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  SipHeader *v70;
  SipAuthInfo *v71;
  uint64_t v72;
  const char *v73;
  std::__shared_weak_count *v74;
  std::string __str;
  const char *v76;

  v8 = *((_QWORD *)this + 14);
  v9 = *(_QWORD *)(v8 + 248);
  v10 = *(std::__shared_weak_count **)(v8 + 256);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = *(unsigned __int8 *)(v9 + 2656);
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (v14)
    {
      if (v13)
      {
LABEL_8:
        SipMessage::removeHeadersWithName(a2, (unsigned __int8 *)&SipHeader::kHeaderAuthorization);
        v15 = operator new();
        *(_OWORD *)(v15 + 8) = 0u;
        *(_OWORD *)(v15 + 24) = 0u;
        *(_OWORD *)(v15 + 40) = 0u;
        *(_QWORD *)v15 = &off_1E78C44E0;
        *(_QWORD *)(v15 + 112) = 0;
        *(_OWORD *)(v15 + 120) = 0u;
        *(_QWORD *)(v15 + 64) = &off_1E78B7238;
        *(_QWORD *)(v15 + 72) = &_bambiDomain;
        *(_DWORD *)(v15 + 80) = 0;
        *(_QWORD *)(v15 + 88) = 0;
        *(_OWORD *)(v15 + 96) = 0u;
        *(_OWORD *)(v15 + 136) = 0u;
        *(_OWORD *)(v15 + 152) = 0u;
        *(_OWORD *)(v15 + 168) = 0u;
        *(_OWORD *)(v15 + 184) = 0u;
        *(_QWORD *)(v15 + 200) = 0;
        *(_QWORD *)(v15 + 216) = &off_1E78D08F8;
        *(_OWORD *)(v15 + 256) = 0u;
        *(_WORD *)(v15 + 248) = 0;
        *(_QWORD *)(v15 + 240) = 0;
        *(_OWORD *)(v15 + 224) = 0u;
        *(_OWORD *)(v15 + 288) = 0u;
        *(_QWORD *)(v15 + 272) = &off_1E78B82D8;
        *(_QWORD *)(v15 + 280) = v15 + 288;
        *(_BYTE *)(v15 + 305) = 1;
        *(_QWORD *)(v15 + 208) = &off_1E78BFCE8;
        *(_QWORD *)(v15 + 520) = 0;
        *(_OWORD *)(v15 + 328) = 0u;
        *(_OWORD *)(v15 + 344) = 0u;
        *(_OWORD *)(v15 + 360) = 0u;
        *(_OWORD *)(v15 + 376) = 0u;
        *(_OWORD *)(v15 + 392) = 0u;
        *(_OWORD *)(v15 + 408) = 0u;
        *(_OWORD *)(v15 + 424) = 0u;
        *(_OWORD *)(v15 + 440) = 0u;
        *(_OWORD *)(v15 + 456) = 0u;
        *(_OWORD *)(v15 + 312) = 0u;
        *(_OWORD *)(v15 + 472) = 0u;
        *(_OWORD *)(v15 + 488) = 0u;
        *(_OWORD *)(v15 + 504) = 0u;
        *(_QWORD *)(v15 + 536) = &off_1E78B82D8;
        *(_OWORD *)(v15 + 552) = 0u;
        *(_QWORD *)(v15 + 544) = v15 + 552;
        *(_QWORD *)(v15 + 576) = &off_1E78B82D8;
        *(_OWORD *)(v15 + 592) = 0u;
        *(_QWORD *)(v15 + 584) = v15 + 592;
        *(_BYTE *)(v15 + 304) = 1;
        *(_WORD *)(v15 + 568) = 257;
        *(_WORD *)(v15 + 608) = 257;
        *(_BYTE *)(v15 + 528) = 0;
        *(_QWORD *)(v15 + 632) = 0;
        *(_OWORD *)(v15 + 616) = 0u;
        SipUri::operator=((SipUri *)(v15 + 208), (uint64_t)a2 + 112);
        v16 = *((_QWORD *)this + 14);
        v17 = *(const std::string **)(v16 + 248);
        v18 = *(std::__shared_weak_count **)(v16 + 256);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)v18;
        if (v18)
        {
          v19 = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        std::string::operator=((std::string *)(v15 + 136), v17 + 111);
        if (v18)
        {
          v21 = (unint64_t *)&v18->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v23 = *((_QWORD *)this + 14);
        v24 = *(__int128 **)(v23 + 248);
        v25 = *(std::__shared_weak_count **)(v23 + 256);
        v73 = (const char *)v24;
        v74 = v25;
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        SipRegistrationClient::registrationDomain((SipRegistrationClient *)v24, &__str);
        std::string::operator=((std::string *)(v15 + 184), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (v25)
        {
          v28 = (unint64_t *)&v25->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v30 = *((_QWORD *)this + 14);
        v31 = *(const std::string **)(v30 + 248);
        v32 = *(std::__shared_weak_count **)(v30 + 256);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)v32;
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        std::string::operator=((std::string *)(v15 + 160), v31 + 112);
        if (v32)
        {
          v35 = (unint64_t *)&v32->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v37 = *((_QWORD *)this + 14);
        v38 = *(const std::string **)(v37 + 248);
        v39 = *(std::__shared_weak_count **)(v37 + 256);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)v39;
        if (v39)
        {
          v40 = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        std::string::operator=((std::string *)(v15 + 616), v38 + 113);
        if (v39)
        {
          v42 = (unint64_t *)&v39->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        v44 = (SipHeader *)operator new();
        SipHeader::SipHeader((uint64_t)v44, &SipHeader::kHeaderAuthorization);
        *(_QWORD *)v44 = &off_1E78CC338;
        *((_QWORD *)v44 + 8) = v15;
        SipMessage::addHeader(a2, v44, 0);
        *(_OWORD *)(a4 + 24) = 0u;
        *(_OWORD *)(a4 + 40) = 0u;
        *(_OWORD *)(a4 + 56) = 0u;
        *(_QWORD *)a4 = &off_1E78B7238;
        *(_QWORD *)(a4 + 8) = &_bambiDomain;
        goto LABEL_78;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (v13)
        goto LABEL_8;
    }
  }
  else if (*(_BYTE *)(v9 + 2656))
  {
    goto LABEL_8;
  }
  v45 = (SipAuthInfo *)*((_QWORD *)this + 18);
  if (v45)
  {
    *(_QWORD *)(a4 + 64) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    SipAuthInfo::addAuthorizationToRequest(v45, a2, a4);
    if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a4 + 8) + 24))(*(_QWORD *)(a4 + 8), *(unsigned int *)(a4 + 16)))
    {
      v46 = (*(uint64_t (**)(SipAuthClient *))(*(_QWORD *)this + 56))(this);
      (*(void (**)(SipAuthClient *, uint64_t))(*(_QWORD *)this + 16))(this, v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v46 + 8), (uint64_t)"unable to add auth info to ", 27);
      *(_BYTE *)(v46 + 17) = 0;
      v47 = (*(uint64_t (**)(SipRequest *))(*(_QWORD *)a2 + 112))(a2);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 32))(v46, v47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v46 + 8), (uint64_t)" request: ", 10);
      *(_BYTE *)(v46 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, v46);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_75:
      *(_BYTE *)(v46 + 17) = 0;
      return;
    }
    ImsResult::~ImsResult((ImsResult *)a4);
  }
  else if ((a3 & 1) == 0)
  {
    SipMessage::removeHeadersWithName(a2, (unsigned __int8 *)&SipHeader::kHeaderAuthorization);
    v48 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 16))(*((_QWORD *)this + 13));
    v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
    SipUri::asString((uint64_t)a2 + 112, v49 + 56, 2);
    v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
    v51 = *((_QWORD *)this + 14);
    v53 = *(_QWORD *)(v51 + 248);
    v52 = *(std::__shared_weak_count **)(v51 + 256);
    __str.__r_.__value_.__r.__words[0] = v53;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v52;
    if (v52)
    {
      v54 = (unint64_t *)&v52->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    v73 = "username";
    v56 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v50 + 8, "username", (uint64_t)&std::piecewise_construct, (__int128 **)&v73);
    std::string::operator=((std::string *)(v56 + 40), (const std::string *)(v53 + 2048));
    if (v52)
    {
      v57 = (unint64_t *)&v52->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
    v60 = *((_QWORD *)this + 14);
    v61 = *(__int128 **)(v60 + 248);
    v62 = *(std::__shared_weak_count **)(v60 + 256);
    v73 = (const char *)v61;
    v74 = v62;
    if (v62)
    {
      v63 = (unint64_t *)&v62->__shared_owners_;
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    SipRegistrationClient::registrationDomain((SipRegistrationClient *)v61, &__str);
    v76 = "realm";
    v65 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v59 + 8, "realm", (uint64_t)&std::piecewise_construct, (__int128 **)&v76);
    std::string::operator=((std::string *)(v65 + 40), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v62)
    {
      v66 = (unint64_t *)&v62->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    v73 = "response";
    v69 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v68 + 8, "response", (uint64_t)&std::piecewise_construct, (__int128 **)&v73);
    std::string::operator=((std::string *)(v69 + 40), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v70 = (SipHeader *)operator new();
    SipHeader::SipHeader((uint64_t)v70, &SipHeader::kHeaderAuthorization);
    *(_QWORD *)v70 = &off_1E78CC338;
    *((_QWORD *)v70 + 8) = v48;
    SipMessage::addHeader(a2, v70, 0);
  }
  v71 = (SipAuthInfo *)*((_QWORD *)this + 20);
  if (v71)
  {
    *(_QWORD *)(a4 + 64) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    SipAuthInfo::addAuthorizationToRequest(v71, a2, a4);
    if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a4 + 8) + 24))(*(_QWORD *)(a4 + 8), *(unsigned int *)(a4 + 16)))
    {
      v46 = (*(uint64_t (**)(SipAuthClient *))(*(_QWORD *)this + 56))(this);
      (*(void (**)(SipAuthClient *, uint64_t))(*(_QWORD *)this + 16))(this, v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v46 + 8), (uint64_t)"unable to add proxy auth info to ", 33);
      *(_BYTE *)(v46 + 17) = 0;
      v72 = (*(uint64_t (**)(SipRequest *))(*(_QWORD *)a2 + 112))(a2);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 32))(v46, v72);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v46 + 8), (uint64_t)" request: ", 10);
      *(_BYTE *)(v46 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, v46);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_75;
    }
    ImsResult::~ImsResult((ImsResult *)a4);
  }
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_QWORD *)a4 = &off_1E78B7238;
  *(_QWORD *)(a4 + 8) = &_bambiDomain;
LABEL_78:
  *(_DWORD *)(a4 + 16) = 0;
}

void sub_1BF1785E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  MEMORY[0x1C3B87100](v17, 0x10B3C40ADE1DEA6);
  _Unwind_Resume(a1);
}

uint64_t SipAuthClient::handleUnauthorizedResponse(SipAuthClient *this, const SipResponse *a2, SipAuthChallengeSource *a3)
{
  _QWORD *v6;
  unsigned __int8 *v7;
  const void *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  unsigned __int8 *v12;
  const void *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  SipAuthenticateHeader *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  char *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  const std::string *v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::string::size_type v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unsigned __int8 *v38;
  unint64_t *v39;
  unint64_t v40;
  const void *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  std::string::size_type v47;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *p_shared_weak_owners;
  unint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *size;
  unint64_t *v57;
  unint64_t v58;
  __int128 *v59[2];
  std::string __str;

  v6 = (_QWORD *)((char *)a2 + 32);
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)a2 + 4, "WWW-Authenticate");
  if (v7
    && (v8 = (const void *)*((_QWORD *)v7 + 5)) != 0
  {
    v10 = v9;
    v11 = 0;
  }
  else
  {
    v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(v6, "Proxy-Authenticate");
    if (!v12)
      goto LABEL_27;
    v13 = (const void *)*((_QWORD *)v12 + 5);
    if (!v13)
      goto LABEL_27;
    if (!v14)
      goto LABEL_27;
    v10 = v14;
    v11 = 1;
  }
  v15 = v10[8];
  if (!v15 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15) & 1) == 0)
  {
LABEL_27:
    v28 = (*(uint64_t (**)(SipAuthClient *))(*(_QWORD *)this + 48))(this);
    (*(void (**)(SipAuthClient *, uint64_t))(*(_QWORD *)this + 16))(this, v28);
    std::ostream::operator<<();
    *(_BYTE *)(v28 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)" response didn't contain a valid Authenticate header", 52);
    *(_BYTE *)(v28 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    result = 0;
    *(_BYTE *)(v28 + 17) = 0;
    return result;
  }
  v16 = 144;
  if (v11)
    v16 = 160;
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((SipAuthClient *)((char *)this + v16));
  v17 = (SipAuthenticateHeader *)(*(uint64_t (**)(_QWORD *))(*v10 + 32))(v10);
  v18 = *((_QWORD *)v17 + 8);
  v19 = *((_QWORD *)this + 14);
  v20 = (__int128 *)std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v19 + 16));
  v59[1] = v20;
  v59[0] = *(__int128 **)(v19 + 8);
  if (*((_BYTE *)v59[0] + 176))
    v21 = "emergency";
  else
    v21 = "sip";
  std::string::basic_string[abi:ne180100]<0>(&__str, v21);
  std::string::operator=((std::string *)(v18 + 8), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v22 = (unint64_t *)v20 + 1;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    (*(void (**)(__int128 *))(*(_QWORD *)v20 + 16))(v20);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v20);
  }
  v24 = (char *)SipMessage::header<SipCallIdHeader>((uint64_t)a2);
  if (v24)
    v25 = (const std::string *)(v24 + 64);
  else
    v25 = (const std::string *)&ims::kEmptyString;
  std::string::operator=((std::string *)(v18 + 32), v25);
  v26 = SipMessage::header<SipCSeqHeader>((uint64_t)a2);
  if (v26)
    v27 = v26[15];
  else
    v27 = 0;
  *(_DWORD *)(v18 + 56) = v27;
  v30 = (*(uint64_t (**)(SipAuthClient *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipAuthClient *, uint64_t))(*(_QWORD *)this + 16))(this, v30);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"new auth challenge: ", 20);
  *(_BYTE *)(v30 + 17) = 0;
  v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v31 + 48))(v31, v30, 0);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v30 + 17) = 0;
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
  v33 = *((_QWORD *)this + 14);
  v35 = *(_QWORD *)(v33 + 248);
  v34 = *(std::__shared_weak_count **)(v33 + 256);
  __str.__r_.__value_.__r.__words[0] = v35;
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v37 = __ldxr(p_shared_owners);
    while (__stxr(v37 + 1, p_shared_owners));
  }
  v59[0] = (__int128 *)"username";
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v32 + 8, "username", (uint64_t)&std::piecewise_construct, v59);
  std::string::operator=((std::string *)(v38 + 40), (const std::string *)(v35 + 2048));
  if (v34)
  {
    v39 = (unint64_t *)&v34->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v41 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
  if (v41)
  {
    if (v42)
    {
      v43 = v42;
      v44 = SipUserAgent::config(*((SipUserAgent **)this + 14));
      if (v43 + 160 != (char *)(v44 + 1344))
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v43 + 160), *(std::string **)(v44 + 1344), *(__int128 **)(v44 + 1352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v44 + 1352) - *(_QWORD *)(v44 + 1344)) >> 3));
    }
  }
  v45 = (std::__shared_weak_count *)operator new(0xF0uLL);
  v45->__shared_owners_ = 0;
  v46 = (unint64_t *)&v45->__shared_owners_;
  v45->__shared_weak_owners_ = 0;
  v45->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E57D8;
  SipAuthInfo::SipAuthInfo((SipAuthInfo *)&v45[1], this, v17, a3);
  __str.__r_.__value_.__r.__words[0] = v47;
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
  shared_weak_owners = (std::__shared_weak_count *)v45[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    do
      v52 = __ldxr(v46);
    while (__stxr(v52 + 1, v46));
    p_shared_weak_owners = (unint64_t *)&v45->__shared_weak_owners_;
    do
      v54 = __ldxr(p_shared_weak_owners);
    while (__stxr(v54 + 1, p_shared_weak_owners));
    v45[1].__shared_owners_ = v47;
    v45[1].__shared_weak_owners_ = (uint64_t)v45;
    do
LABEL_51:
      v55 = __ldaxr(v46);
    while (__stlxr(v55 - 1, v46));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
    goto LABEL_54;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    do
      v49 = __ldxr(v46);
    while (__stxr(v49 + 1, v46));
    v50 = (unint64_t *)&v45->__shared_weak_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
    v45[1].__shared_owners_ = v47;
    v45[1].__shared_weak_owners_ = (uint64_t)v45;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    goto LABEL_51;
  }
LABEL_54:
  std::list<std::shared_ptr<SipAuthInfo>>::push_back((uint64_t *)this + 15, &__str);
  if (*((_QWORD *)this + 17) == 1)
    SipAuthInfo::sendChallengeToDelegate(*(SipAuthInfo **)(*((_QWORD *)this + 16) + 16));
  size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v57 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  return 1;
}

void sub_1BF178B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count *v16;
  void *v18;

  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v18);
  _Unwind_Resume(a1);
}

_QWORD *std::list<std::shared_ptr<SipAuthInfo>>::push_back(uint64_t *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  result = operator new(0x20uLL);
  v5 = a2[1];
  result[2] = *a2;
  result[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *a1;
  *result = *a1;
  result[1] = a1;
  *(_QWORD *)(v8 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

_QWORD *SipAuthClient::logPrefix(SipAuthClient *this, ImsOutStream *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  const char *v14;
  uint64_t v15;
  _QWORD *result;

  v3 = *((_QWORD *)this + 14);
  if (!v3)
    goto LABEL_16;
  v4 = *(std::__shared_weak_count **)(v3 + 16);
  if (!v4)
    goto LABEL_16;
  v5 = std::__shared_weak_count::lock(v4);
  if (!v5)
    goto LABEL_16;
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 8);
  if (!v7)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
    goto LABEL_16;
  }
  v8 = *(unsigned __int8 *)(v7 + 176);
  v9 = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
    if (!v8)
      goto LABEL_16;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
    if (!v8)
    {
LABEL_16:
      v13 = (_QWORD *)*((_QWORD *)a2 + 1);
      v14 = "AuthClient: ";
      v15 = 12;
      goto LABEL_17;
    }
  }
  v13 = (_QWORD *)*((_QWORD *)a2 + 1);
  v14 = "AuthClient(EMERGENCY): ";
  v15 = 23;
LABEL_17:
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

uint64_t SipAuthClient::handleAuthChallengeTimeout(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"handling auth challenge timeout for AuthInfo ", 45);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v4);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (a1[17] && *a2 == *(_QWORD *)(a1[16] + 16))
  {
    std::list<std::shared_ptr<SipAuthInfo>>::pop_front((uint64_t)(a1 + 15));
    result = *(_QWORD *)(*a2 + 40);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    if (a1[17])
      return SipAuthInfo::sendChallengeToDelegate(*(SipAuthInfo **)(a1[16] + 16));
  }
  else
  {
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"handleAuthChallengeTimeout: info is not the top of our queue. Ignoring.", 71);
    *(_BYTE *)(v5 + 17) = 0;
    result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
  }
  return result;
}

uint64_t *std::list<std::shared_ptr<SipAuthInfo>>::list(uint64_t *a1, uint64_t a2)
{
  uint64_t i;

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (i = a2; ; std::list<std::shared_ptr<SipAuthInfo>>::push_back(a1, (_QWORD *)(i + 16)))
  {
    i = *(_QWORD *)(i + 8);
    if (i == a2)
      break;
  }
  return a1;
}

void sub_1BF178EE4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipAuthInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E57D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipAuthInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78E57D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipAuthInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ImsSleepWakeMonitor::_powerChanged(ImsSleepWakeMonitor *this, void *a2, int a3, intptr_t a4, void *a5)
{
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;

  if (this)
  {
    HIDWORD(v5) = a3;
    LODWORD(v5) = a3 + 536870288;
    switch((v5 >> 4))
    {
      case 0u:
        std::string::basic_string[abi:ne180100]<0>(v19, "power");
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_41);
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v8 = ImsLogger::debug(ims::_logger, (uint64_t)v19, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"system can sleep", 16);
        *(_BYTE *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v8 + 17) = 0;
        if (v18 < 0)
          operator delete(__p[0]);
        if (v20 < 0)
          operator delete(v19[0]);
        goto LABEL_17;
      case 1u:
        std::string::basic_string[abi:ne180100]<0>(v19, "power");
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_41);
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v10 = ImsLogger::debug(ims::_logger, (uint64_t)v19, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"system will sleep", 17);
        *(_BYTE *)(v10 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v10 + 17) = 0;
        if (v18 < 0)
          operator delete(__p[0]);
        if (v20 < 0)
          operator delete(v19[0]);
        v11 = *((_QWORD *)this + 3);
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
LABEL_17:
        IOAllowPowerChange(*((_DWORD *)this + 4), a4);
        return;
      case 2u:
        std::string::basic_string[abi:ne180100]<0>(v19, "power");
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_41);
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v12 = ImsLogger::debug(ims::_logger, (uint64_t)v19, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"system will not sleep", 21);
        *(_BYTE *)(v12 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v12 + 17) = 0;
        if (v18 < 0)
          operator delete(__p[0]);
        if (v20 < 0)
          operator delete(v19[0]);
        v13 = *((_QWORD *)this + 3);
        if (!v13)
          return;
        v14 = *(void (**)(void))(*(_QWORD *)v13 + 24);
        break;
      case 9u:
        std::string::basic_string[abi:ne180100]<0>(v19, "power");
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_41);
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v15 = ImsLogger::debug(ims::_logger, (uint64_t)v19, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"system has powered on", 21);
        *(_BYTE *)(v15 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v15 + 17) = 0;
        if (v18 < 0)
          operator delete(__p[0]);
        if (v20 < 0)
          operator delete(v19[0]);
        v16 = *((_QWORD *)this + 3);
        if (!v16)
          return;
        v14 = *(void (**)(void))(*(_QWORD *)v16 + 32);
        break;
      default:
        return;
    }
    v14();
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "power");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_41);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::debug(ims::_logger, (uint64_t)v19, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"context parameter is NULL", 25);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (v18 < 0)
      operator delete(__p[0]);
    if (v20 < 0)
      operator delete(v19[0]);
  }
}

void sub_1BF179320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ImsSleepWakeMonitor::stop(io_object_t *notifier)
{
  io_connect_t v2;
  uint64_t v3;
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  if (*notifier)
  {
    IODeregisterForSystemPower(notifier);
    *notifier = 0;
  }
  v2 = notifier[4];
  if (v2)
  {
    IOServiceClose(v2);
    notifier[4] = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "power");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_41);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v3 = ImsLogger::debug(ims::_logger, (uint64_t)v6, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"SleepWakeMonitor stopped", 24);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1BF17945C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ImsSleepWakeMonitor::start(IONotificationPortRef *notifier)
{
  IONotificationPort **v2;
  io_connect_t v3;
  IONotificationPort *v4;
  NSObject *v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;

  if (!*(_DWORD *)notifier)
  {
    v2 = notifier + 1;
    v3 = IORegisterForSystemPower(notifier, notifier + 1, (IOServiceInterestCallback)ImsSleepWakeMonitor::_powerChanged, (io_object_t *)notifier);
    *((_DWORD *)notifier + 4) = v3;
    if (v3)
    {
      v4 = *v2;
      v5 = sImsDispatchQueue;
      if (!sImsDispatchQueue)
      {
        v5 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
        sImsDispatchQueue = (uint64_t)v5;
      }
      IONotificationPortSetDispatchQueue(v4, v5);
      std::string::basic_string[abi:ne180100]<0>(v9, "power");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_41);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v6 = ImsLogger::debug(ims::_logger, (uint64_t)v9, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"SleepWakeMonitor started", 24);
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v9, "power");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_41);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v6 = ImsLogger::error(ims::_logger, (uint64_t)v9, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"unable to monitor sleep/wake", 28);
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    *(_BYTE *)(v6 + 17) = 0;
    if (v8 < 0)
      operator delete(__p[0]);
    if (v10 < 0)
      operator delete(v9[0]);
  }
}

void sub_1BF179628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipParameterHeader::SipParameterHeader(SipParameterHeader *this, const SipParameterHeader *a2)
{
  _QWORD *v4;

  SipHeader::SipHeader(this, a2);
  *v4 = off_1E78E5828;
  v4[8] = &off_1E78B82D8;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(v4 + 9, *((void ***)a2 + 9), (void **)a2 + 10);
  *((_BYTE *)this + 97) = 1;
  *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
}

void sub_1BF1796D0(_Unwind_Exception *a1)
{
  void **v1;

  SipHeader::~SipHeader(v1);
  _Unwind_Resume(a1);
}

std::string::size_type SipParameterHeader::findParameterMarker(int a1, std::string *this)
{
  return std::string::find(this, 59, 0);
}

uint64_t SipParameterHeader::valueAndParamsAsString(uint64_t a1, std::string *a2)
{
  uint64_t v4;
  void **v5;
  std::string::size_type v6;
  void *__p[2];
  unsigned __int8 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((_DWORD)v4)
  {
    v12 = 0;
    v10 = 0u;
    v11 = 0u;
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v10, 1);
    SipParameterMap::toStream((SipParameterMap *)(a1 + 64), (ImsOutStream *)&v10, 0, 0, 0, 0);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v11 + 1) + 8, __p);
    if ((v9 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v9 & 0x80u) == 0)
      v6 = v9;
    else
      v6 = (std::string::size_type)__p[1];
    std::string::append(a2, (const std::string::value_type *)v5, v6);
    if ((char)v9 < 0)
      operator delete(__p[0]);
    *(_QWORD *)&v10 = &off_1E78D7A10;
    if ((_BYTE)v11 && *((_QWORD *)&v10 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 8))(*((_QWORD *)&v10 + 1));
  }
  return v4;
}

void sub_1BF1797E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a15 < 0)
    operator delete(__p);
  if (a18)
  {
    if (a17)
      (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  }
  _Unwind_Resume(exception_object);
}

ImsOutStream *SipParameterHeader::encode(SipParameterHeader *this, ImsOutStream *a2, int a3)
{
  SipHeader::encode(this, a2, a3);
  return SipParameterMap::toStream((SipParameterHeader *)((char *)this + 64), a2, 0, 0, 0, 0);
}

uint64_t SipParameterHeader::decode(uint64_t a1, const std::string *a2)
{
  std::string::size_type v4;
  std::string::size_type v5;
  uint64_t v6;
  std::string::size_type size;
  std::string v9;
  std::string __str;
  std::string __p;
  char v12;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  memset(&__p, 0, sizeof(__p));
  memset(&__str, 0, sizeof(__str));
  if (v4 == -1)
  {
    std::string::operator=(&__p, a2);
  }
  else
  {
    v5 = v4;
    std::string::basic_string(&v9, a2, 0, v4, (std::allocator<char> *)&v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v9;
    std::string::basic_string(&v9, a2, v5 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v12);
    __str = v9;
  }
  v6 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 56))(a1, &__p);
  if ((_DWORD)v6)
  {
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (size)
      SipParameterMap::fromString(a1 + 64, &__str, 0, 0);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1BF1799A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPSession::SDPSession(uint64_t a1, _QWORD *a2, __int128 *a3, uint64_t *a4, int a5, uint64_t a6, _QWORD *a7)
{
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  void *v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  time_t v37;
  _QWORD *v38;
  uint64_t v39;
  __int128 *v40;
  uint64_t i;
  SipStack *v42;
  ImsPrefs *v43;
  void **EnableBandwidthSpecifiersKey;
  void *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  unsigned __int16 *v50;
  int v51;
  int v52;
  BOOL v53;
  unsigned __int8 v54;
  ImsPrefs *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  ImsPrefs *v59;
  void *RTCPXRBasebandSupportKey;
  const void *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  const std::string::value_type *v65;
  std::string::size_type v66;
  std::string *v67;
  __int128 v68;
  void **v69;
  std::string::size_type v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  uint64_t *v74;
  uint64_t *v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  ImsPrefs *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::string::size_type v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  std::string::size_type v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  ImsPrefs *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  ImsPrefs *v121;
  unint64_t *v122;
  unint64_t v123;
  void **UseRestrictiveDirectionWhenCreatingAnswerKey;
  void *v125;
  unint64_t v126;
  std::__shared_weak_count *size;
  unint64_t *v128;
  unint64_t v129;
  void **RTTBandwidthSpecifierASValueKey;
  void *v131;
  int v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  ImsPrefs *v138;
  void **SRTPCryptoSuiteKey;
  void *v140;
  std::string *__str;
  unsigned __int8 *v143;
  uint64_t v144;
  std::__shared_weak_count *v146;
  std::__shared_weak_count *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  __int128 v150;
  void *__p[2];
  __int128 v152;
  __int128 v153;
  std::string v154;
  void *v155[2];
  int64_t v156;
  std::string v157;
  uint64_t *v158;
  _QWORD *v159[2];
  __int128 *v160;
  std::string *v161;
  unint64_t v162;
  __int128 v163;
  std::string v164;
  std::string v165;
  __int128 v166;
  SipStack *v167;
  std::__shared_weak_count *v168;

  *(_OWORD *)(a1 + 16) = 0u;
  v144 = a1 + 16;
  v12 = (std::string *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v13 = *a3;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  __str = v12;
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a4 + 128))(*a4);
  if (*(char *)(v14 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 96), *(const std::string::value_type **)v14, *(_QWORD *)(v14 + 8));
  }
  else
  {
    v15 = *(_OWORD *)v14;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 + 16);
    *(_OWORD *)(a1 + 96) = v15;
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)a6;
  v16 = *(_QWORD *)(a6 + 8);
  *(_QWORD *)(a1 + 128) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 16);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v143 = (unsigned __int8 *)(a1 + 96);
  *(_DWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 140) = 0;
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a4 + 136))(*a4);
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 141) = v19 == 2;
  *(_DWORD *)(a1 + 142) = 187105280;
  *(_BYTE *)(a1 + 146) = 1;
  *(_BYTE *)(a1 + 584) = 0;
  *(_BYTE *)(a1 + 592) = 0;
  *(_BYTE *)(a1 + 1024) = 0;
  *(_BYTE *)(a1 + 1032) = 0;
  *(_BYTE *)(a1 + 1328) = 0;
  *(_WORD *)(a1 + 1360) = 0;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_QWORD *)(a1 + 1336) = &off_1E78E58C8;
  *(_QWORD *)(a1 + 1368) = 3;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_BYTE *)(a1 + 1400) = 1;
  *(_QWORD *)(a1 + 1376) = &off_1E78C0DB8;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_BYTE *)(a1 + 1432) = 1;
  *(_QWORD *)(a1 + 1408) = &off_1E78E5908;
  *(_QWORD *)(a1 + 1440) = &off_1E78D4020;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_BYTE *)(a1 + 1488) = 1;
  *(_QWORD *)(a1 + 1464) = &off_1E78B8D40;
  *(_BYTE *)(a1 + 1496) = 0;
  *(_BYTE *)(a1 + 1856) = 0;
  *(_QWORD *)(a1 + 1880) = 0;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_QWORD *)(a1 + 1888) = *a7;
  v20 = a7[1];
  *(_QWORD *)(a1 + 1896) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *(_QWORD *)(a1 + 1920) = 0;
  *(_QWORD *)(a1 + 1912) = 0;
  *(_QWORD *)(a1 + 1904) = a1 + 1912;
  *(_QWORD *)(a1 + 1928) = *a2;
  v23 = a2[1];
  *(_QWORD *)(a1 + 1936) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 16);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *(_QWORD *)(a1 + 1976) = 0;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  IpAddress::asString(*a4, a1 + 72, 0);
  v167 = 0;
  v168 = 0;
  v26 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v26)
  {
    v27 = 0;
    goto LABEL_35;
  }
  v27 = std::__shared_weak_count::lock(v26);
  v168 = v27;
  if (!v27 || (v28 = *(_QWORD *)(a1 + 120), (v167 = (SipStack *)v28) == 0))
  {
LABEL_35:
    v150 = 0uLL;
    if (!v27)
      goto LABEL_151;
    goto LABEL_147;
  }
  v166 = 0uLL;
  v29 = *(void **)(v28 + 4280);
  v30 = *(unint64_t **)(v28 + 4288);
  __p[0] = v29;
  __p[1] = v30;
  if (v30)
  {
    v31 = v30 + 1;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  std::allocate_shared[abi:ne180100]<SDPModel,std::allocator<SDPModel>,std::shared_ptr<SDPModel>,void>((uint64_t *)&v166, (uint64_t *)__p);
  v33 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v34 = (unint64_t *)((char *)__p[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v166;
  if (!(_QWORD)v166)
    goto LABEL_140;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v166 + 40) + 24))(v166 + 40) & 1) != 0)
  {
    std::string::operator=((std::string *)(v36 + 112), __str);
    if (!*(_QWORD *)(v36 + 136) || !*(_QWORD *)(v36 + 144))
    {
      v37 = time(0);
      *(_QWORD *)(v36 + 136) = v37;
      *(_QWORD *)(v36 + 144) = v37;
    }
    std::string::operator=((std::string *)(v36 + 80), (const std::string *)(a1 + 72));
    SDPConnection::setAddressTypeFromString((SDPConnection *)(v36 + 56), v143);
    v38 = (_QWORD *)v166;
    if (*(char *)(a1 + 95) < 0)
      std::string::__init_copy_ctor_external(&v165, *(const std::string::value_type **)(a1 + 72), *(_QWORD *)(a1 + 80));
    else
      v165 = *(std::string *)(a1 + 72);
    if (*(char *)(a1 + 119) < 0)
    {
      std::string::__init_copy_ctor_external(&v164, *(const std::string::value_type **)(a1 + 96), *(_QWORD *)(a1 + 104));
    }
    else
    {
      *(_OWORD *)&v164.__r_.__value_.__l.__data_ = *(_OWORD *)v143;
      v164.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 112);
    }
    SDPModel::setConnectionAddress(v38, &v165, (uint64_t)&v164);
    if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v164.__r_.__value_.__l.__data_);
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v165.__r_.__value_.__l.__data_);
    for (i = *(_QWORD *)(v166 + 416); i != *(_QWORD *)(v166 + 424); i += 200)
    {
      if (*(_DWORD *)(i + 12) == 2)
        goto LABEL_55;
    }
    i = 0;
LABEL_55:
    v42 = v167;
    v43 = (ImsPrefs *)SipStack::prefs(v167);
    EnableBandwidthSpecifiersKey = (void **)ImsPrefs::getEnableBandwidthSpecifiersKey(v43);
    v45 = ImsPrefs::prefWithKey(v43, EnableBandwidthSpecifiersKey);
    if (v45)
    {
      if (!(*(unsigned int (**)(void *))(*(_QWORD *)v45 + 40))(v45))
      {
LABEL_80:
        v59 = (ImsPrefs *)SipStack::prefs(v167);
        RTCPXRBasebandSupportKey = ImsPrefs::getRTCPXRBasebandSupportKey(v59);
        v61 = ImsPrefs::typedPrefWithKey<ImsDictPref>(v59, (void **)RTCPXRBasebandSupportKey);
        if (v61)
          v62 = (uint64_t)v61;
        else
          v62 = *((_QWORD *)RTCPXRBasebandSupportKey + 11);
        if (v62 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 80))(v62))
        {
          v160 = 0;
          v161 = 0;
          v162 = 0;
          v159[0] = 0;
          v159[1] = 0;
          v158 = (uint64_t *)v159;
          ImsDictPref::stringMapValue(v62, &v158);
          v63 = v158;
          if (v158 != (uint64_t *)v159)
          {
            do
            {
              v152 = 0u;
              v153 = 0u;
              *(_OWORD *)__p = 0u;
              std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)__p, (__int128 *)v63 + 2);
              memset(&v157, 0, sizeof(v157));
              if (SBYTE7(v152) < 0)
              {
                std::string::__init_copy_ctor_external(&v157, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
              }
              else
              {
                *(_OWORD *)&v157.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
                v157.__r_.__value_.__r.__words[2] = v152;
              }
              v64 = HIBYTE(v153);
              if (v153 < 0)
                v64 = v153;
              if (v64)
              {
                std::string::basic_string[abi:ne180100]<0>(&v154, "=");
                if (v153 >= 0)
                  v65 = (char *)&v152 + 8;
                else
                  v65 = (const std::string::value_type *)*((_QWORD *)&v152 + 1);
                if (v153 >= 0)
                  v66 = HIBYTE(v153);
                else
                  v66 = v153;
                v67 = std::string::append(&v154, v65, v66);
                v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
                v156 = v67->__r_.__value_.__r.__words[2];
                *(_OWORD *)v155 = v68;
                v67->__r_.__value_.__l.__size_ = 0;
                v67->__r_.__value_.__r.__words[2] = 0;
                v67->__r_.__value_.__r.__words[0] = 0;
                if (v156 >= 0)
                  v69 = v155;
                else
                  v69 = (void **)v155[0];
                if (v156 >= 0)
                  v70 = HIBYTE(v156);
                else
                  v70 = (std::string::size_type)v155[1];
                std::string::append(&v157, (const std::string::value_type *)v69, v70);
                if (SHIBYTE(v156) < 0)
                  operator delete(v155[0]);
                if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v154.__r_.__value_.__l.__data_);
              }
              v71 = v161;
              if ((unint64_t)v161 >= v162)
              {
                v73 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v160, (__int128 *)&v157);
              }
              else
              {
                if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v161, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
                }
                else
                {
                  v72 = *(_OWORD *)&v157.__r_.__value_.__l.__data_;
                  v161->__r_.__value_.__r.__words[2] = v157.__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v72;
                }
                v73 = v71 + 1;
              }
              v161 = v73;
              if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v157.__r_.__value_.__l.__data_);
              if (SHIBYTE(v153) < 0)
                operator delete(*((void **)&v152 + 1));
              if (SBYTE7(v152) < 0)
                operator delete(__p[0]);
              v74 = (uint64_t *)v63[1];
              if (v74)
              {
                do
                {
                  v75 = v74;
                  v74 = (uint64_t *)*v74;
                }
                while (v74);
              }
              else
              {
                do
                {
                  v75 = (uint64_t *)v63[2];
                  v53 = *v75 == (_QWORD)v63;
                  v63 = v75;
                }
                while (!v53);
              }
              v63 = v75;
            }
            while (v75 != (uint64_t *)v159);
          }
          v76 = *(std::__shared_weak_count **)(a1 + 1896);
          v155[0] = *(void **)(a1 + 1888);
          v155[1] = v76;
          if (v76)
          {
            p_shared_owners = (unint64_t *)&v76->__shared_owners_;
            do
              v78 = __ldxr(p_shared_owners);
            while (__stxr(v78 + 1, p_shared_owners));
          }
          if (*((char *)v167 + 4159) < 0)
          {
            std::string::__init_copy_ctor_external(&v157, *((const std::string::value_type **)v167 + 517), *((_QWORD *)v167 + 518));
          }
          else
          {
            *(_OWORD *)&v157.__r_.__value_.__l.__data_ = *(_OWORD *)((char *)v167 + 4136);
            v157.__r_.__value_.__r.__words[2] = *((_QWORD *)v167 + 519);
          }
          SDPRTCPXR::SDPRTCPXR((uint64_t)__p, &v160, v155, (__int128 *)&v157);
          v79 = operator new(0x90uLL);
          *v79 = 0;
          v79[1] = 0;
          SDPRTCPXR::SDPRTCPXR((SDPRTCPXR *)(v79 + 2), (const SDPRTCPXR *)__p);
          *((_DWORD *)v79 + 34) = 0;
          v79[1] = i + 136;
          v80 = *(_QWORD *)(i + 136);
          *v79 = v80;
          *(_QWORD *)(v80 + 8) = v79;
          *(_QWORD *)(i + 136) = v79;
          ++*(_QWORD *)(i + 152);
          SDPRTCPXR::~SDPRTCPXR(__p);
          if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v157.__r_.__value_.__l.__data_);
          if (v76)
          {
            v81 = (unint64_t *)&v76->__shared_owners_;
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
              std::__shared_weak_count::__release_weak(v76);
            }
          }
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v158, v159[0]);
          __p[0] = &v160;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        }
LABEL_140:
        v150 = v166;
        v40 = &v166;
        goto LABEL_141;
      }
    }
    else if (!*((_BYTE *)EnableBandwidthSpecifiersKey + 57))
    {
      goto LABEL_80;
    }
    v163 = v166;
    if (*((_QWORD *)&v166 + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    v48 = *(unsigned __int8 *)(a1 + 119);
    v49 = (char)v48;
    if ((v48 & 0x80u) != 0)
      v48 = *(_QWORD *)(a1 + 104);
    if (v48 == 3)
    {
      if (v49 >= 0)
        v50 = (unsigned __int16 *)(a1 + 96);
      else
        v50 = *(unsigned __int16 **)v143;
      v51 = *v50;
      v52 = *((unsigned __int8 *)v50 + 2);
      v53 = v51 == 20553 && v52 == 54;
      v54 = v53;
    }
    else
    {
      v54 = 0;
    }
    v55 = (ImsPrefs *)SipStack::prefs(v42);
    SDPTemplateBuilder::addBandwidthSpecifiers(i, &v163, v54, 1, 0, v55);
    v56 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
    if (*((_QWORD *)&v163 + 1))
    {
      v57 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    goto LABEL_80;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sdp.session");
  std::string::basic_string[abi:ne180100]<0>(&v165, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v39 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)&v165);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)"No origin found in template", 27);
  *(_BYTE *)(v39 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v39 + 17) = 0;
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v165.__r_.__value_.__l.__data_);
  if (SBYTE7(v152) < 0)
    operator delete(__p[0]);
  v40 = &v150;
LABEL_141:
  *(_QWORD *)v40 = 0;
  *((_QWORD *)v40 + 1) = 0;
  v83 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v84 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v27 = v168;
  if (v168)
  {
LABEL_147:
    v86 = (unint64_t *)&v27->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
LABEL_151:
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](v144, &v150);
  v88 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
  if (*((_QWORD *)&v150 + 1))
  {
    v89 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = *(std::__shared_weak_count **)(a1 + 24);
  v148 = *(_QWORD *)(a1 + 16);
  v149 = v91;
  if (v91)
  {
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  v94 = (ImsPrefs *)SipStack::prefs(*(SipStack **)a6);
  SDPAudioSettingsBuilder::SDPAudioSettingsBuilder((ImsPrefs *)__p, &v148, v94);
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 + 1384), (uint64_t *)&__p[1]);
  *(_BYTE *)(a1 + 1400) = BYTE8(v152);
  __p[0] = &off_1E78B8D78;
  v95 = (std::__shared_weak_count *)v152;
  if ((_QWORD)v152)
  {
    v96 = (unint64_t *)(v152 + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = v149;
  if (v149)
  {
    v99 = (unint64_t *)&v149->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = *(_QWORD *)(a1 + 16);
  v102 = *(std::__shared_weak_count **)(a1 + 24);
  v147 = v102;
  if (v102)
  {
    v103 = (unint64_t *)&v102->__shared_owners_;
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
    v165.__r_.__value_.__r.__words[0] = v101;
    v165.__r_.__value_.__l.__size_ = (std::string::size_type)v102;
    do
      v105 = __ldxr(v103);
    while (__stxr(v105 + 1, v103));
  }
  else
  {
    *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v101;
  }
  SDPSettingsBuilder::SDPSettingsBuilder((uint64_t)__p, &v165, 1);
  if (v102)
  {
    v106 = (unint64_t *)&v102->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  __p[0] = &off_1E78E5908;
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 + 1416), (uint64_t *)&__p[1]);
  *(_BYTE *)(a1 + 1432) = BYTE8(v152);
  __p[0] = &off_1E78B8D78;
  v108 = (std::__shared_weak_count *)v152;
  if ((_QWORD)v152)
  {
    v109 = (unint64_t *)(v152 + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  if (v147)
  {
    v111 = (unint64_t *)&v147->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  SDPSession::setTextMediaSessionMode(a1, a5);
  v113 = *(_QWORD *)(a1 + 16);
  v114 = *(std::__shared_weak_count **)(a1 + 24);
  v146 = v114;
  if (v114)
  {
    v115 = (unint64_t *)&v114->__shared_owners_;
    do
      v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
  }
  v117 = (ImsPrefs *)SipStack::prefs(*(SipStack **)a6);
  v164.__r_.__value_.__r.__words[0] = v113;
  v164.__r_.__value_.__l.__size_ = (std::string::size_type)v114;
  if (v114)
  {
    v118 = (unint64_t *)&v114->__shared_owners_;
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
    v165.__r_.__value_.__l.__size_ = (std::string::size_type)v114;
    do
      v120 = __ldxr(v118);
    while (__stxr(v120 + 1, v118));
  }
  else
  {
    v165.__r_.__value_.__l.__size_ = 0;
  }
  v165.__r_.__value_.__r.__words[0] = v113;
  v121 = (ImsPrefs *)SDPModelBuilder::SDPModelBuilder((uint64_t)__p, &v165, v117);
  if (v114)
  {
    v122 = (unint64_t *)&v114->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  __p[0] = &off_1E78DBB68;
  UseRestrictiveDirectionWhenCreatingAnswerKey = (void **)ImsPrefs::getUseRestrictiveDirectionWhenCreatingAnswerKey(v121);
  v125 = ImsPrefs::prefWithKey(v117, UseRestrictiveDirectionWhenCreatingAnswerKey);
  if (v125)
    v126 = (*(uint64_t (**)(void *))(*(_QWORD *)v125 + 40))(v125);
  else
    v126 = *((_BYTE *)UseRestrictiveDirectionWhenCreatingAnswerKey + 57) != 0;
  BYTE9(v152) = v126;
  size = (std::__shared_weak_count *)v164.__r_.__value_.__l.__size_;
  if (v164.__r_.__value_.__l.__size_)
  {
    v128 = (unint64_t *)(v164.__r_.__value_.__l.__size_ + 8);
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  __p[0] = &off_1E78E58C8;
  *(_QWORD *)&v153 = 3;
  RTTBandwidthSpecifierASValueKey = (void **)ImsPrefs::getRTTBandwidthSpecifierASValueKey((ImsPrefs *)v126);
  v131 = ImsPrefs::prefWithKey(v117, RTTBandwidthSpecifierASValueKey);
  if (v131)
    v132 = (*(uint64_t (**)(void *))(*(_QWORD *)v131 + 56))(v131);
  else
    v132 = *((_DWORD *)RTTBandwidthSpecifierASValueKey + 15);
  *(_QWORD *)&v153 = v132;
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 + 1344), (uint64_t *)&__p[1]);
  *(_WORD *)(a1 + 1360) = WORD4(v152);
  *(_QWORD *)(a1 + 1368) = v153;
  __p[0] = off_1E78DBBA8;
  v133 = (std::__shared_weak_count *)v152;
  if ((_QWORD)v152)
  {
    v134 = (unint64_t *)(v152 + 8);
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  if (v146)
  {
    v136 = (unint64_t *)&v146->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v138 = (ImsPrefs *)SipStack::prefs(*(SipStack **)a6);
  SRTPCryptoSuiteKey = (void **)ImsPrefs::getSRTPCryptoSuiteKey(v138);
  ImsPrefs::stringValue(v138, SRTPCryptoSuiteKey);
  if (SBYTE7(v152) < 0)
  {
    v140 = __p[1];
    operator delete(__p[0]);
    if (!v140)
      return a1;
  }
  else if (!BYTE7(v152))
  {
    return a1;
  }
  SDPSession::generate_key_and_salt(a1, 2);
  if (a5)
    SDPSession::generate_key_and_salt(a1, 4);
  return a1;
}

void sub_1BF17A82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;
  void **v60;
  void **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v64 - 256, *(_QWORD **)(v64 - 248));
  a25 = (void **)(v64 - 232);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a25);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v64 - 128);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v64 - 104);
  if (*(char *)(v59 + 1983) < 0)
    operator delete(*(void **)(v59 + 1960));
  v66 = *(std::__shared_weak_count **)(v59 + 1952);
  if (v66)
    std::__shared_weak_count::__release_weak(v66);
  v67 = *(std::__shared_weak_count **)(v59 + 1936);
  if (v67)
    std::__shared_weak_count::__release_weak(v67);
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*(_QWORD **)(v59 + 1912));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(v61 + 217));
  a25 = v61 + 214;
  std::vector<SDPMedia>::__destroy_vector::operator()[abi:ne180100](&a25);
  if (*(_BYTE *)(v59 + 1856))
    SDPMediaLazuliSettings::~SDPMediaLazuliSettings((SDPMediaLazuliSettings *)(v61 + 168));
  *(_QWORD *)(v59 + 1464) = &off_1E78B8D78;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a10);
  *(_QWORD *)(v59 + 1440) = &off_1E78D4020;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a11);
  *(_QWORD *)(v59 + 1408) = &off_1E78B8D78;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v63);
  *(_QWORD *)(v59 + 1376) = &off_1E78B8D78;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v62);
  *(_QWORD *)(v59 + 1336) = off_1E78DBBA8;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a14);
  if (*(_BYTE *)(v59 + 1328))
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)(v61 + 110));
  if (*(_BYTE *)(v59 + 1024))
    SDPMediaAudioSettings::~SDPMediaAudioSettings(v61 + 55);
  if (*(_BYTE *)(v59 + 584))
    SDPMediaAudioSettings::~SDPMediaAudioSettings(v61);
  v68 = *(std::__shared_weak_count **)(v59 + 128);
  if (v68)
    std::__shared_weak_count::__release_weak(v68);
  if (*(char *)(v59 + 119) < 0)
    operator delete(*a13);
  if (*(char *)(v59 + 95) < 0)
    operator delete(*v60);
  if (*(char *)(v59 + 71) < 0)
    operator delete(*a12);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v59 + 32);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a15);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v59);
  _Unwind_Resume(a1);
}

void SDPTTYSettingsBuilder::~SDPTTYSettingsBuilder(SDPTTYSettingsBuilder *this)
{
  *(_QWORD *)this = &off_1E78B8D78;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E78B8D78;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1C3B87100);
}

void SDPSession::setTextMediaSessionMode(uint64_t a1, int a2)
{
  std::__shared_weak_count *v3;
  SipStack *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  ImsPrefs *v9;
  void **AlwaysPrintSDPFormatInfoKey;
  void *v11;
  std::__shared_weak_count *v12;
  _QWORD *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int16 *v18;
  int v19;
  int v20;
  unsigned __int8 v22;
  ImsPrefs *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  SipStack *v29;
  SDPTemplateBuilder *v30;
  ImsPrefs *v31;
  void **SRTPCryptoSuiteKey;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void *v37[2];
  char v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  SipStack *v41;
  std::__shared_weak_count *v42;

  v41 = 0;
  v42 = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (v3)
  {
    v42 = std::__shared_weak_count::lock(v3);
    if (v42)
    {
      v5 = *(SipStack **)(a1 + 120);
      v41 = v5;
      if (v5)
      {
        if (*(_DWORD *)(a1 + 136) != a2)
        {
          *(_DWORD *)(a1 + 136) = a2;
          v6 = *(_QWORD *)(a1 + 16);
          v8 = *(_QWORD *)(v6 + 416);
          v7 = *(_QWORD *)(v6 + 424);
          while (v8 != v7)
          {
            if (*(_DWORD *)(v8 + 12) == 4)
              goto LABEL_10;
            v8 += 200;
          }
          v8 = 0;
LABEL_10:
          if (a2)
          {
            SDPSession::addMediaStreamForType(a1, 4);
            if (v8)
            {
              if (*(_WORD *)(a1 + 142))
              {
                SDPMedia::setPort((SDPMedia *)v8, *(unsigned __int16 *)(a1 + 142));
                if (*(_BYTE *)(a1 + 1328))
                  *(_WORD *)(a1 + 1056) = *(_WORD *)(a1 + 142);
              }
            }
            else
            {
              v13 = *(_QWORD **)(a1 + 16);
              v12 = *(std::__shared_weak_count **)(a1 + 24);
              v39 = v13;
              v40 = v12;
              if (v12)
              {
                p_shared_owners = (unint64_t *)&v12->__shared_owners_;
                do
                  v15 = __ldxr(p_shared_owners);
                while (__stxr(v15 + 1, p_shared_owners));
              }
              v16 = *(unsigned __int8 *)(a1 + 119);
              v17 = (char)v16;
              if ((v16 & 0x80u) != 0)
                v16 = *(_QWORD *)(a1 + 104);
              if (v16 == 3)
              {
                if (v17 >= 0)
                  v18 = (unsigned __int16 *)(a1 + 96);
                else
                  v18 = *(unsigned __int16 **)(a1 + 96);
                v19 = *v18;
                v20 = *((unsigned __int8 *)v18 + 2);
                v22 = v19 == 20553 && v20 == 54;
              }
              else
              {
                v22 = 0;
              }
              v23 = (ImsPrefs *)SipStack::prefs(v5);
              SDPTemplateBuilder::createSDPTextMedia(&v39, v22, 0, v23, (uint64_t)v37);
              v24 = v13[53];
              if (v24 >= v13[54])
              {
                v25 = std::vector<SDPMedia>::__emplace_back_slow_path<SDPMedia>(v13 + 52, (const SDPMedia *)v37);
              }
              else
              {
                SDPMedia::SDPMedia((SDPMedia *)v13[53], (const SDPMedia *)v37);
                v25 = v24 + 200;
                v13[53] = v24 + 200;
              }
              v13[53] = v25;
              SDPMedia::~SDPMedia((SDPMedia *)v37);
              v26 = v40;
              if (v40)
              {
                v27 = (unint64_t *)&v40->__shared_owners_;
                do
                  v28 = __ldaxr(v27);
                while (__stlxr(v28 - 1, v27));
                if (!v28)
                {
                  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                  std::__shared_weak_count::__release_weak(v26);
                }
              }
            }
            if (!*(_BYTE *)(a1 + 1328))
            {
              v29 = v41;
              v30 = (SDPTemplateBuilder *)SipStack::prefs(v41);
              SDPTemplateBuilder::createInitialTTYSettings(v30, (uint64_t)v37);
              std::optional<SDPMediaTTYSettings>::operator=[abi:ne180100]<SDPMediaTTYSettings,void>((SDPMediaSettings *)(a1 + 1032), (SDPMediaSettings *)v37);
              SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)v37);
              v31 = (ImsPrefs *)SipStack::prefs(v29);
              SRTPCryptoSuiteKey = (void **)ImsPrefs::getSRTPCryptoSuiteKey(v31);
              ImsPrefs::stringValue(v31, SRTPCryptoSuiteKey);
              if (v38 < 0)
              {
                v33 = v37[1];
                operator delete(v37[0]);
                if (!v33)
                  goto LABEL_53;
              }
              else if (!v38)
              {
                goto LABEL_53;
              }
              SDPSession::generate_key_and_salt(a1, 4);
            }
          }
          else
          {
            if (*(_BYTE *)(a1 + 1328))
              *(_WORD *)(a1 + 1056) = 0;
            if (v8)
            {
              SDPMedia::setPort((SDPMedia *)v8, 0);
              v9 = (ImsPrefs *)SipStack::prefs(v5);
              AlwaysPrintSDPFormatInfoKey = (void **)ImsPrefs::getAlwaysPrintSDPFormatInfoKey(v9);
              v11 = ImsPrefs::prefWithKey(v9, AlwaysPrintSDPFormatInfoKey);
              if (v11)
              {
                if (!(*(unsigned int (**)(void *))(*(_QWORD *)v11 + 40))(v11))
                  goto LABEL_53;
              }
              else if (!*((_BYTE *)AlwaysPrintSDPFormatInfoKey + 57))
              {
                goto LABEL_53;
              }
              *(_BYTE *)(v8 + 184) = 1;
            }
          }
        }
      }
    }
  }
LABEL_53:
  v34 = v42;
  if (v42)
  {
    v35 = (unint64_t *)&v42->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_1BF17AEA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  SDPMedia::~SDPMedia((SDPMedia *)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 80);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 64);
  _Unwind_Resume(a1);
}

void SDPTTYBuilder::~SDPTTYBuilder(SDPTTYBuilder *this)
{
  *(_QWORD *)this = off_1E78DBBA8;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = off_1E78DBBA8;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1C3B87100);
}

void SDPSession::generate_key_and_salt(uint64_t a1, int a2)
{
  uint64_t i;
  char v5;
  void *__p;
  void *v7;
  uint64_t v8;
  std::random_device v9;

  v9.__padding_ = 0;
  std::random_device::random_device[abi:ne180100](&v9);
  __p = 0;
  v7 = 0;
  v8 = 0;
  std::vector<unsigned char>::vector(&__p, 0x1EuLL);
  for (i = 0; i != 30; ++i)
  {
    v5 = MEMORY[0x1C3B86F80](&v9);
    *((_BYTE *)__p + i) = v5;
  }
  SDPModel::setMasterKeyAndSalt(*(_QWORD **)(a1 + 16), a2, (char **)&__p);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  std::random_device::~random_device(&v9);
}

void sub_1BF17AFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, int a12, std::random_device a13, std::random_device a14)
{
  if (__p)
    operator delete(__p);
  std::random_device::~random_device(&a13);
  _Unwind_Resume(a1);
}

uint64_t SDPSession::SDPSession(uint64_t a1, _QWORD *a2, __int128 *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  void **v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::string::size_type v27;
  std::string::size_type v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *size;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  time_t v35;
  _QWORD *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  ImsPrefs *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::string::size_type v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unsigned __int8 *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  std::string __p;
  char v78;
  __int128 v79;
  std::string v80;
  int v81[4];
  uint64_t v82;
  std::__shared_weak_count *v83;
  std::string v84;

  *(_OWORD *)(a1 + 32) = 0u;
  v10 = (uint64_t *)(a1 + 32);
  v11 = (std::string *)(a1 + 48);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v12 = *a3;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a4 + 128))(*a4);
  if (*(char *)(v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 96), *(const std::string::value_type **)v13, *(_QWORD *)(v13 + 8));
  }
  else
  {
    v14 = *(_OWORD *)v13;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v13 + 16);
    *(_OWORD *)(a1 + 96) = v14;
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)a6;
  v15 = *(_QWORD *)(a6 + 8);
  *(_QWORD *)(a1 + 128) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 16);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v74 = (unsigned __int8 *)(a1 + 96);
  *(_DWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 140) = 0;
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a4 + 136))(*a4);
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 141) = v18 == 2;
  *(_DWORD *)(a1 + 142) = 187105280;
  *(_BYTE *)(a1 + 146) = 1;
  *(_BYTE *)(a1 + 584) = 0;
  *(_BYTE *)(a1 + 592) = 0;
  *(_BYTE *)(a1 + 1024) = 0;
  *(_BYTE *)(a1 + 1032) = 0;
  *(_BYTE *)(a1 + 1328) = 0;
  *(_WORD *)(a1 + 1360) = 0;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_QWORD *)(a1 + 1336) = &off_1E78E58C8;
  *(_QWORD *)(a1 + 1368) = 3;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_BYTE *)(a1 + 1400) = 1;
  *(_QWORD *)(a1 + 1376) = &off_1E78C0DB8;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_BYTE *)(a1 + 1432) = 1;
  *(_QWORD *)(a1 + 1408) = &off_1E78E5908;
  *(_QWORD *)(a1 + 1440) = &off_1E78D4020;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_BYTE *)(a1 + 1488) = 1;
  *(_QWORD *)(a1 + 1464) = &off_1E78B8D40;
  *(_BYTE *)(a1 + 1496) = 0;
  *(_BYTE *)(a1 + 1856) = 0;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_QWORD *)(a1 + 1896) = 0;
  *(_QWORD *)(a1 + 1904) = a1 + 1912;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_QWORD *)(a1 + 1944) = *a2;
  v19 = a2[1];
  *(_QWORD *)(a1 + 1952) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 16);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = (void **)(a1 + 1960);
  *(_QWORD *)(a1 + 1976) = 0;
  *(_OWORD *)(a1 + 1960) = 0uLL;
  IpAddress::asString(*a4, a1 + 72, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.session");
  std::string::basic_string[abi:ne180100]<0>(&v84, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v23 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v84);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"SDPSession::createLazuliSessionTemplate ", 40);
  *(_BYTE *)(v23 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v23 + 17) = 0;
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v82 = 0;
  v83 = 0;
  v24 = *(std::__shared_weak_count **)(a1 + 128);
  if (v24)
  {
    v25 = std::__shared_weak_count::lock(v24);
    v83 = v25;
    if (v25)
    {
      v26 = *(_QWORD *)(a1 + 120);
      v82 = v26;
      if (v26)
      {
        memset(v81, 0, sizeof(v81));
        v27 = *(_QWORD *)(v26 + 4296);
        v28 = *(_QWORD *)(v26 + 4304);
        __p.__r_.__value_.__r.__words[0] = v27;
        __p.__r_.__value_.__l.__size_ = v28;
        if (v28)
        {
          v29 = (unint64_t *)(v28 + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        std::allocate_shared[abi:ne180100]<SDPModel,std::allocator<SDPModel>,std::shared_ptr<SDPModel>,void>((uint64_t *)v81, (uint64_t *)&__p);
        size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v32 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        v34 = *(_QWORD *)v81;
        if (*(_QWORD *)v81)
        {
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)v81 + 40) + 24))(*(_QWORD *)v81 + 40) & 1) == 0)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.session");
            std::string::basic_string[abi:ne180100]<0>(&v84, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v37 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v84);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"No origin found in template", 27);
            *(_BYTE *)(v37 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v37 + 17) = 0;
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v84.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v79 = 0uLL;
            v38 = *(std::__shared_weak_count **)&v81[2];
            if (*(_QWORD *)&v81[2])
            {
              v39 = (unint64_t *)(*(_QWORD *)&v81[2] + 8);
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
LABEL_66:
            v25 = v83;
            if (!v83)
              goto LABEL_71;
            goto LABEL_67;
          }
          std::string::operator=((std::string *)(v34 + 112), v11);
          if (!*(_QWORD *)(v34 + 136) || !*(_QWORD *)(v34 + 144))
          {
            v35 = time(0);
            *(_QWORD *)(v34 + 136) = v35;
            *(_QWORD *)(v34 + 144) = v35;
          }
          std::string::operator=((std::string *)(v34 + 80), (const std::string *)(a1 + 72));
          SDPConnection::setAddressTypeFromString((SDPConnection *)(v34 + 56), v74);
          v36 = *(_QWORD **)v81;
          if (*(char *)(a1 + 95) < 0)
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 72), *(_QWORD *)(a1 + 80));
          else
            __p = *(std::string *)(a1 + 72);
          if (*(char *)(a1 + 119) < 0)
          {
            std::string::__init_copy_ctor_external(&v84, *(const std::string::value_type **)(a1 + 96), *(_QWORD *)(a1 + 104));
          }
          else
          {
            *(_OWORD *)&v84.__r_.__value_.__l.__data_ = *(_OWORD *)v74;
            v84.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 112);
          }
          SDPModel::setConnectionAddress(v36, &__p, (uint64_t)&v84);
          if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v84.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          ImsRandomStringGenerator::randomString((ImsRandomStringGenerator *)(*(_QWORD *)(v82 + 144) + 592), 10, &v80);
          if (*(char *)(a1 + 1983) < 0)
            operator delete(*v22);
          *(_OWORD *)v22 = *(_OWORD *)&v80.__r_.__value_.__l.__data_;
          *(_QWORD *)(a1 + 1976) = *((_QWORD *)&v80.__r_.__value_.__l + 2);
          v41 = *(std::__shared_weak_count **)&v81[2];
          *(_OWORD *)&v80.__r_.__value_.__l.__data_ = *(_OWORD *)v81;
          if (*(_QWORD *)&v81[2])
          {
            v42 = (unint64_t *)(*(_QWORD *)&v81[2] + 8);
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
          }
          SDPSession::setModelPath(a1, (uint64_t)&v80, 0xB27u);
          if (v41)
          {
            p_shared_owners = (unint64_t *)&v41->__shared_owners_;
            do
              v45 = __ldaxr(p_shared_owners);
            while (__stlxr(v45 - 1, p_shared_owners));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
        }
        v79 = *(_OWORD *)v81;
        goto LABEL_66;
      }
    }
  }
  else
  {
    v25 = 0;
  }
  v79 = 0uLL;
  if (!v25)
    goto LABEL_71;
LABEL_67:
  v46 = (unint64_t *)&v25->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_71:
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)v10, &v79);
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = *v10;
  if (!*v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.session");
    std::string::basic_string[abi:ne180100]<0>(&v84, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v52 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v84);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v52 + 8), (uint64_t)"_lazuliSessionTemplateSDP is null", 33);
    *(_BYTE *)(v52 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v52 + 17) = 0;
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v84.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v51 = *v10;
  }
  v53 = *(std::__shared_weak_count **)(a1 + 40);
  v75 = v51;
  v76 = v53;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v56 = (ImsPrefs *)SipStack::prefs(*(SipStack **)a6);
  SDPLazuliSettingsBuilder::SDPLazuliSettingsBuilder((ImsPrefs *)&__p, &v75, v56);
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 + 1472), (uint64_t *)&__p.__r_.__value_.__l.__size_);
  *(_BYTE *)(a1 + 1488) = v78;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B8D78;
  v57 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
  if (__p.__r_.__value_.__r.__words[2])
  {
    v58 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = v76;
  if (v76)
  {
    v61 = (unint64_t *)&v76->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = *(_QWORD *)(a1 + 32);
  v64 = *(std::__shared_weak_count **)(a1 + 40);
  if (v64)
  {
    v65 = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
    __p.__r_.__value_.__l.__size_ = v63;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v64;
    do
      v67 = __ldxr(v65);
    while (__stxr(v67 + 1, v65));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(unint64_t *)(a1 + 32);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78D4020;
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 + 1448), (uint64_t *)&__p.__r_.__value_.__l.__size_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78D4020;
  v68 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
  if (__p.__r_.__value_.__r.__words[2])
  {
    v69 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (v64)
  {
    v71 = (unint64_t *)&v64->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  return a1;
}

void sub_1BF17B8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;

  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v36 - 128);
  if (*(char *)(v28 + 1983) < 0)
    operator delete(*v34);
  v38 = *(std::__shared_weak_count **)(v28 + 1952);
  if (v38)
    std::__shared_weak_count::__release_weak(v38);
  v39 = *(std::__shared_weak_count **)(v28 + 1936);
  if (v39)
    std::__shared_weak_count::__release_weak(v39);
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*(_QWORD **)(v28 + 1912));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(v32 + 217));
  *(_QWORD *)(v36 - 128) = v32 + 214;
  std::vector<SDPMedia>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 128));
  if (*(_BYTE *)(v28 + 1856))
    SDPMediaLazuliSettings::~SDPMediaLazuliSettings((SDPMediaLazuliSettings *)(v32 + 168));
  *(_QWORD *)(v28 + 1464) = &off_1E78B8D78;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v33);
  *(_QWORD *)(v28 + 1440) = &off_1E78D4020;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v31);
  *(_QWORD *)(v28 + 1408) = &off_1E78B8D78;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v35);
  *(_QWORD *)(v28 + 1376) = &off_1E78B8D78;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a9);
  *(_QWORD *)(v28 + 1336) = off_1E78DBBA8;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a10);
  if (*(_BYTE *)(v28 + 1328))
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)(v32 + 110));
  if (*(_BYTE *)(v28 + 1024))
    SDPMediaAudioSettings::~SDPMediaAudioSettings(v32 + 55);
  if (*(_BYTE *)(v28 + 584))
    SDPMediaAudioSettings::~SDPMediaAudioSettings(v32);
  v40 = *(std::__shared_weak_count **)(v28 + 128);
  if (v40)
    std::__shared_weak_count::__release_weak(v40);
  if (*(char *)(v28 + 119) < 0)
    operator delete(*a12);
  if (*(char *)(v28 + 95) < 0)
    operator delete(*v30);
  if (*(char *)(v28 + 71) < 0)
    operator delete(*a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v29);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v28 + 16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v28);
  _Unwind_Resume(a1);
}

void SDPSession::~SDPSession(SDPSession *this)
{
  _QWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  void **v11;

  v2 = (_QWORD *)*((_QWORD *)this + 238);
  v3 = (_OWORD *)((char *)this + 1912);
  if (v2 != (_QWORD *)((char *)this + 1912))
  {
    do
    {
      v4 = v2[5];
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v5 = (_QWORD *)v2[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v2[2];
          v7 = *v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != (_QWORD *)v3);
  }
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*((_QWORD **)this + 239));
  *((_QWORD *)this + 238) = v3;
  *v3 = 0u;
  if (*((char *)this + 1983) < 0)
    operator delete(*((void **)this + 245));
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 244);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 242);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*((_QWORD **)this + 239));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 1888);
  v11 = (void **)((char *)this + 1864);
  std::vector<SDPMedia>::__destroy_vector::operator()[abi:ne180100](&v11);
  if (*((_BYTE *)this + 1856))
    SDPMediaLazuliSettings::~SDPMediaLazuliSettings((SDPSession *)((char *)this + 1496));
  *((_QWORD *)this + 183) = &off_1E78B8D78;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 1472);
  *((_QWORD *)this + 180) = &off_1E78D4020;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 1448);
  *((_QWORD *)this + 176) = &off_1E78B8D78;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 1416);
  *((_QWORD *)this + 172) = &off_1E78B8D78;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 1384);
  *((_QWORD *)this + 167) = off_1E78DBBA8;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 1344);
  if (*((_BYTE *)this + 1328))
    SDPMediaSettings::~SDPMediaSettings((SDPSession *)((char *)this + 1032));
  if (*((_BYTE *)this + 1024))
    SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)this + 74);
  if (*((_BYTE *)this + 584))
    SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)this + 19);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

uint64_t SDPSession::hasStream(SDPSession *this)
{
  SDPSession *v1;
  uint64_t v2;
  SDPSession *v3;
  SDPSession *v4;
  BOOL v5;

  v1 = (SDPSession *)*((_QWORD *)this + 238);
  if (v1 == (SDPSession *)((char *)this + 1912))
    return 0;
  while (1)
  {
    v2 = *((_QWORD *)v1 + 5);
    if (v2)
    {
      if (*(_QWORD *)(v2 + 32))
        break;
    }
    v3 = (SDPSession *)*((_QWORD *)v1 + 1);
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = *(SDPSession **)v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (SDPSession *)*((_QWORD *)v1 + 2);
        v5 = *(_QWORD *)v4 == (_QWORD)v1;
        v1 = v4;
      }
      while (!v5);
    }
    v1 = v4;
    if (v4 == (SDPSession *)((char *)this + 1912))
      return 0;
  }
  return 1;
}

uint64_t SDPSession::streamsValidForManager(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v2 = *(_QWORD **)(a1 + 1904);
  v3 = (_QWORD *)(a1 + 1912);
  if (v2 == (_QWORD *)(a1 + 1912))
    return 1;
  do
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 168) + 40))(*(_QWORD *)(*(_QWORD *)a2 + 168), *(_QWORD *)(v2[5] + 32));
    if (!(_DWORD)result)
      break;
    v6 = (_QWORD *)v2[1];
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = (_QWORD *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (_QWORD *)v2[2];
        v8 = *v7 == (_QWORD)v2;
        v2 = v7;
      }
      while (!v8);
    }
    v2 = v7;
  }
  while (v7 != v3);
  return result;
}

uint64_t SDPSession::initializeCarrierTemplateSDP(SipStack **a1)
{
  SipStack *v2;
  ImsPrefs *v3;
  SipStack *v4;
  unint64_t *v5;
  unint64_t v6;
  ImsPrefs *v7;
  unint64_t *v8;
  unint64_t v9;
  void **SDPTemplateKey;
  ImsPrefs *v11;
  void **v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  ImsPrefs *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string::size_type size;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  const ImsPrefs *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void **PacketizationTimeKey;
  void *v43;
  int v44;
  uint64_t v45;
  ImsPrefs *v46;
  void **v47;
  void *v48;
  int v49;
  uint64_t v50;
  ImsPrefs *v51;
  void **MaxPacketizationTimeKey;
  void *v53;
  int v54;
  ImsPrefs *v55;
  uint64_t i;
  void **SRTPCryptoSuiteKey;
  ImsPrefs *v58;
  std::string::size_type v59;
  void **v60;
  ImsPrefs *v61;
  void **SRTPUnencryptedSRTPKey;
  ImsPrefs *v63;
  char v64;
  void **SRTPUnencryptedSRTCPKey;
  ImsPrefs *v66;
  char v67;
  void **SRTPUnauthenticatedSRTPKey;
  ImsPrefs *v69;
  char v70;
  void **SRTPEndToAccessEdgeProtectionKey;
  void *v72;
  int v73;
  char v74;
  void *v75;
  ImsPrefs *v76;
  void **v77;
  void *v78;
  int v79;
  ImsPrefs *v80;
  uint64_t j;
  void **v82;
  std::string::size_type v83;
  void **v84;
  ImsPrefs *v85;
  void **v86;
  ImsPrefs *v87;
  char v88;
  void **v89;
  ImsPrefs *v90;
  char v91;
  void **v92;
  ImsPrefs *v93;
  char v94;
  void **v95;
  void *v96;
  int v97;
  void **HideSessionLevelDirectionKey;
  void *v99;
  uint64_t v100;
  SipStack *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  _QWORD *v111;
  std::__shared_weak_count *v112;
  std::string v113;
  void *v114;
  char v115;
  void *v116;
  char v117;
  SipStack *v118[2];
  char v119;
  __int16 v120;
  void *__p[2];
  char v122;
  std::string v123;
  __int128 v124;

  v124 = 0uLL;
  v2 = *a1;
  if (v2)
  {
    v3 = (ImsPrefs *)SipStack::prefs(v2);
    v120 = 0;
    v119 = 1;
    v4 = a1[1];
    v118[0] = *a1;
    v118[1] = v4;
    if (v4)
    {
      v5 = (unint64_t *)((char *)v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v7 = (ImsPrefs *)SDPParserSettings::initializeFromStack(&v120, v118);
    if (v4)
    {
      v8 = (unint64_t *)((char *)v4 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        (*(void (**)(SipStack *))(*(_QWORD *)v4 + 16))(v4);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
      }
    }
    SDPTemplateKey = (void **)ImsPrefs::getSDPTemplateKey(v7);
    v11 = (ImsPrefs *)ImsPrefs::stringValue(v3, SDPTemplateKey);
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    {
      size = v123.__r_.__value_.__l.__size_;
      operator delete(v123.__r_.__value_.__l.__data_);
      if (size)
        goto LABEL_12;
    }
    else if (*((_BYTE *)&v123.__r_.__value_.__s + 23))
    {
LABEL_12:
      v12 = (void **)ImsPrefs::getSDPTemplateKey(v11);
      ImsPrefs::stringValue(v3, v12);
      SDPParser::parse((BOOL *)&v119, &v123, &v120, __p);
      v13 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
      v124 = v13;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v17 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v18 = (unint64_t *)((char *)__p[1] + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v123.__r_.__value_.__l.__data_);
      v20 = (_QWORD *)v124;
      v21 = (ImsPrefs *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v124 + 24))(v124);
      if ((v21 & 1) != 0)
      {
        v23 = v20[52];
        v22 = v20[53];
        if (v23 != v22)
        {
          v24 = v23 + 136;
          while (*(_DWORD *)(v24 - 124) != 2)
          {
            v25 = v24 + 64;
            v24 += 200;
            if (v25 == v22)
              goto LABEL_29;
          }
          PacketizationTimeKey = (void **)ImsPrefs::getPacketizationTimeKey(v21);
          v43 = ImsPrefs::prefWithKey(v3, PacketizationTimeKey);
          if (v43)
            LOWORD(v44) = (*(uint64_t (**)(void *))(*(_QWORD *)v43 + 56))(v43);
          else
            v44 = *((_DWORD *)PacketizationTimeKey + 15);
          v50 = v24 - 136;
          SDPMedia::setPacketizationTime((SDPMedia *)(v24 - 136), v44);
          MaxPacketizationTimeKey = (void **)ImsPrefs::getMaxPacketizationTimeKey(v51);
          v53 = ImsPrefs::prefWithKey(v3, MaxPacketizationTimeKey);
          if (v53)
            LOWORD(v54) = (*(uint64_t (**)(void *))(*(_QWORD *)v53 + 56))(v53);
          else
            v54 = *((_DWORD *)MaxPacketizationTimeKey + 15);
          SDPMedia::setMaxPacketizationTime((SDPMedia *)(v24 - 136), v54);
          for (i = *(_QWORD *)(v24 + 8); v24 != i; i = *(_QWORD *)(i + 8))
          {
            if (*(_DWORD *)(i + 136) == 4)
              goto LABEL_67;
          }
          SDPMedia::setDirection(v24 - 136, 1);
LABEL_67:
          SRTPCryptoSuiteKey = (void **)ImsPrefs::getSRTPCryptoSuiteKey(v55);
          v58 = (ImsPrefs *)ImsPrefs::stringValue(v3, SRTPCryptoSuiteKey);
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
          {
            v59 = v123.__r_.__value_.__l.__size_;
            operator delete(v123.__r_.__value_.__l.__data_);
            if (!v59)
              goto LABEL_114;
          }
          else if (!*((_BYTE *)&v123.__r_.__value_.__s + 23))
          {
            goto LABEL_114;
          }
          v60 = (void **)ImsPrefs::getSRTPCryptoSuiteKey(v58);
          v61 = (ImsPrefs *)ImsPrefs::stringValue(v3, v60);
          SRTPUnencryptedSRTPKey = (void **)ImsPrefs::getSRTPUnencryptedSRTPKey(v61);
          v63 = (ImsPrefs *)ImsPrefs::prefWithKey(v3, SRTPUnencryptedSRTPKey);
          if (v63)
          {
            v63 = (ImsPrefs *)(*(uint64_t (**)(ImsPrefs *))(*(_QWORD *)v63 + 40))(v63);
            v64 = (char)v63;
          }
          else
          {
            v64 = *((_BYTE *)SRTPUnencryptedSRTPKey + 57) != 0;
          }
          SRTPUnencryptedSRTCPKey = (void **)ImsPrefs::getSRTPUnencryptedSRTCPKey(v63);
          v66 = (ImsPrefs *)ImsPrefs::prefWithKey(v3, SRTPUnencryptedSRTCPKey);
          if (v66)
          {
            v66 = (ImsPrefs *)(*(uint64_t (**)(ImsPrefs *))(*(_QWORD *)v66 + 40))(v66);
            v67 = (char)v66;
          }
          else
          {
            v67 = *((_BYTE *)SRTPUnencryptedSRTCPKey + 57) != 0;
          }
          SRTPUnauthenticatedSRTPKey = (void **)ImsPrefs::getSRTPUnauthenticatedSRTPKey(v66);
          v69 = (ImsPrefs *)ImsPrefs::prefWithKey(v3, SRTPUnauthenticatedSRTPKey);
          if (v69)
          {
            v69 = (ImsPrefs *)(*(uint64_t (**)(ImsPrefs *))(*(_QWORD *)v69 + 40))(v69);
            v70 = (char)v69;
          }
          else
          {
            v70 = *((_BYTE *)SRTPUnauthenticatedSRTPKey + 57) != 0;
          }
          SRTPEndToAccessEdgeProtectionKey = (void **)ImsPrefs::getSRTPEndToAccessEdgeProtectionKey(v69);
          v72 = ImsPrefs::prefWithKey(v3, SRTPEndToAccessEdgeProtectionKey);
          if (v72)
            v73 = (*(uint64_t (**)(void *))(*(_QWORD *)v72 + 40))(v72);
          else
            v73 = *((_BYTE *)SRTPEndToAccessEdgeProtectionKey + 57) != 0;
          v58 = (ImsPrefs *)SDPMedia::enableEncryption(v50, (uint64_t)&v116, v64, v67, v70, v73);
          v74 = (char)v58;
          if ((v117 & 0x80000000) == 0)
            goto LABEL_113;
          v75 = v116;
          goto LABEL_112;
        }
LABEL_29:
        std::string::basic_string[abi:ne180100]<0>(&v123, "sdp.session");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v26 = ImsLogger::error(ims::_logger, (uint64_t)&v123, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"SDPSession::initializeCarrierTemplateSDP  Media is null", 55);
        *(_BYTE *)(v26 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v123, "sdp.session");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v26 = ImsLogger::error(ims::_logger, (uint64_t)&v123, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"Invalid SDP template string in config", 37);
        *(_BYTE *)(v26 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      goto LABEL_136;
    }
    SDPTemplateBuilder::createSDPTemplate(v3, (uint64_t *)&v123);
    v30 = *(_OWORD *)&v123.__r_.__value_.__l.__data_;
    *(_OWORD *)&v123.__r_.__value_.__l.__data_ = 0uLL;
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
    v124 = v30;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = (std::__shared_weak_count *)v123.__r_.__value_.__l.__size_;
    if (v123.__r_.__value_.__l.__size_)
    {
      v35 = (unint64_t *)(v123.__r_.__value_.__l.__size_ + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v20 = (_QWORD *)v124;
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v124 + 24))(v124) & 1) != 0)
    {
      v39 = v20[52];
      v38 = v20[53];
      if (v39 != v38)
      {
        v40 = v39 + 136;
        while (*(_DWORD *)(v40 - 124) != 2)
        {
          v41 = v40 + 64;
          v40 += 200;
          if (v41 == v38)
            goto LABEL_51;
        }
        v45 = v40 - 136;
        SDPSession::setupFormatsFromConfig((SDPSession *)(v40 - 136), v3, v37);
        v47 = (void **)ImsPrefs::getPacketizationTimeKey(v46);
        v48 = ImsPrefs::prefWithKey(v3, v47);
        if (v48)
          LOWORD(v49) = (*(uint64_t (**)(void *))(*(_QWORD *)v48 + 56))(v48);
        else
          v49 = *((_DWORD *)v47 + 15);
        SDPMedia::setPacketizationTime((SDPMedia *)(v40 - 136), v49);
        v77 = (void **)ImsPrefs::getMaxPacketizationTimeKey(v76);
        v78 = ImsPrefs::prefWithKey(v3, v77);
        if (v78)
          LOWORD(v79) = (*(uint64_t (**)(void *))(*(_QWORD *)v78 + 56))(v78);
        else
          v79 = *((_DWORD *)v77 + 15);
        SDPMedia::setMaxPacketizationTime((SDPMedia *)(v40 - 136), v79);
        for (j = *(_QWORD *)(v40 + 8); v40 != j; j = *(_QWORD *)(j + 8))
        {
          if (*(_DWORD *)(j + 136) == 4)
            goto LABEL_94;
        }
        SDPMedia::setDirection(v40 - 136, 1);
LABEL_94:
        v82 = (void **)ImsPrefs::getSRTPCryptoSuiteKey(v80);
        v58 = (ImsPrefs *)ImsPrefs::stringValue(v3, v82);
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
        {
          v83 = v123.__r_.__value_.__l.__size_;
          operator delete(v123.__r_.__value_.__l.__data_);
          if (!v83)
            goto LABEL_114;
        }
        else if (!*((_BYTE *)&v123.__r_.__value_.__s + 23))
        {
          goto LABEL_114;
        }
        v84 = (void **)ImsPrefs::getSRTPCryptoSuiteKey(v58);
        v85 = (ImsPrefs *)ImsPrefs::stringValue(v3, v84);
        v86 = (void **)ImsPrefs::getSRTPUnencryptedSRTPKey(v85);
        v87 = (ImsPrefs *)ImsPrefs::prefWithKey(v3, v86);
        if (v87)
        {
          v87 = (ImsPrefs *)(*(uint64_t (**)(ImsPrefs *))(*(_QWORD *)v87 + 40))(v87);
          v88 = (char)v87;
        }
        else
        {
          v88 = *((_BYTE *)v86 + 57) != 0;
        }
        v89 = (void **)ImsPrefs::getSRTPUnencryptedSRTCPKey(v87);
        v90 = (ImsPrefs *)ImsPrefs::prefWithKey(v3, v89);
        if (v90)
        {
          v90 = (ImsPrefs *)(*(uint64_t (**)(ImsPrefs *))(*(_QWORD *)v90 + 40))(v90);
          v91 = (char)v90;
        }
        else
        {
          v91 = *((_BYTE *)v89 + 57) != 0;
        }
        v92 = (void **)ImsPrefs::getSRTPUnauthenticatedSRTPKey(v90);
        v93 = (ImsPrefs *)ImsPrefs::prefWithKey(v3, v92);
        if (v93)
        {
          v93 = (ImsPrefs *)(*(uint64_t (**)(ImsPrefs *))(*(_QWORD *)v93 + 40))(v93);
          v94 = (char)v93;
        }
        else
        {
          v94 = *((_BYTE *)v92 + 57) != 0;
        }
        v95 = (void **)ImsPrefs::getSRTPEndToAccessEdgeProtectionKey(v93);
        v96 = ImsPrefs::prefWithKey(v3, v95);
        if (v96)
          v97 = (*(uint64_t (**)(void *))(*(_QWORD *)v96 + 40))(v96);
        else
          v97 = *((_BYTE *)v95 + 57) != 0;
        v58 = (ImsPrefs *)SDPMedia::enableEncryption(v45, (uint64_t)&v114, v88, v91, v94, v97);
        v74 = (char)v58;
        if ((v115 & 0x80000000) == 0)
        {
LABEL_113:
          if ((v74 & 1) == 0)
          {
LABEL_140:
            v28 = 0;
LABEL_141:
            v107 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
            if (*((_QWORD *)&v124 + 1))
            {
              v108 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
              do
                v109 = __ldaxr(v108);
              while (__stlxr(v109 - 1, v108));
              if (!v109)
              {
                ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                std::__shared_weak_count::__release_weak(v107);
              }
            }
            return v28;
          }
LABEL_114:
          HideSessionLevelDirectionKey = (void **)ImsPrefs::getHideSessionLevelDirectionKey(v58);
          v99 = ImsPrefs::prefWithKey(v3, HideSessionLevelDirectionKey);
          if (v99)
          {
            if (((*(uint64_t (**)(void *))(*(_QWORD *)v99 + 40))(v99) & 1) != 0)
              goto LABEL_119;
          }
          else if (*((_BYTE *)HideSessionLevelDirectionKey + 57))
          {
LABEL_119:
            if (((*(uint64_t (**)(_QWORD *))(*v20 + 24))(v20) & 1) != 0)
            {
              std::string::basic_string[abi:ne180100]<0>(&v123, "sdp.session");
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v100 = ImsLogger::info(ims::_logger, (uint64_t)&v123, (uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v100 + 8), (uint64_t)"Initialized carrier template SDP (", 34);
              *(_BYTE *)(v100 + 17) = 0;
              SipStack::carrierIdentifier(*a1, &v113);
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v100 + 32))(v100, &v113);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v100 + 8), (uint64_t)"):", 2);
              *(_BYTE *)(v100 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v100 + 64))(v100, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v100 + 17) = 0;
              if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v113.__r_.__value_.__l.__data_);
              if (v122 < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v123.__r_.__value_.__l.__data_);
              v101 = *a1;
              v111 = v20;
              v112 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
              if (*((_QWORD *)&v124 + 1))
              {
                v102 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
                do
                  v103 = __ldxr(v102);
                while (__stxr(v103 + 1, v102));
              }
              std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)v101 + 535, (uint64_t *)&v111);
              v104 = v112;
              if (v112)
              {
                v105 = (unint64_t *)&v112->__shared_owners_;
                do
                  v106 = __ldaxr(v105);
                while (__stlxr(v106 - 1, v105));
                if (!v106)
                {
                  ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                  std::__shared_weak_count::__release_weak(v104);
                }
              }
              v28 = 1;
              goto LABEL_141;
            }
            std::string::basic_string[abi:ne180100]<0>(&v123, "sdp.session");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v26 = ImsLogger::error(ims::_logger, (uint64_t)&v123, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"invalid SDP template", 20);
            *(_BYTE *)(v26 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            goto LABEL_136;
          }
          SDPModel::setDirection((uint64_t)v20, 1);
          goto LABEL_119;
        }
        v75 = v114;
LABEL_112:
        operator delete(v75);
        goto LABEL_113;
      }
LABEL_51:
      std::string::basic_string[abi:ne180100]<0>(&v123, "sdp.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v26 = ImsLogger::error(ims::_logger, (uint64_t)&v123, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"SDPSession::initializeCarrierTemplateSDP  Media is null, template is empty", 74);
      *(_BYTE *)(v26 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v123, "sdp.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v26 = ImsLogger::error(ims::_logger, (uint64_t)&v123, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"Invalid default SDP template", 28);
      *(_BYTE *)(v26 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
LABEL_136:
    *(_BYTE *)(v26 + 17) = 0;
    if (v122 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v123.__r_.__value_.__l.__data_);
    goto LABEL_140;
  }
  std::string::basic_string[abi:ne180100]<0>(&v123, "sdp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v27 = ImsLogger::error(ims::_logger, (uint64_t)&v123, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"No valid SIP stack", 18);
  *(_BYTE *)(v27 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v27 + 17) = 0;
  if (v122 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v123.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1BF17C97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (*(char *)(v37 - 105) < 0)
    operator delete(*(void **)(v37 - 128));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v37 - 96);
  _Unwind_Resume(a1);
}

void SDPSession::setupFormatsFromConfig(SDPSession *this, SDPMedia *a2, const ImsPrefs *a3)
{
  void **SupportAMRWBKey;
  uint64_t AMRPacketAlignmentFromString;
  void **PacketAlignmentAMRWBKey;
  int v8;
  void **PayloadTypeBWEfficientAMRWBKey;
  void *v10;
  int v11;
  ImsPrefs *v12;
  void **ModeSetAMRWBKey;
  ImsPrefs *v14;
  uint64_t v15;
  void **v16;
  void **SuppressOctetAlignAttributeForBECodecsKey;
  ImsPrefs *v18;
  void **IncludeSDPMaxRedKey;
  uint64_t v20;
  void **MaxRedundancyKey;
  void *v22;
  void **v23;
  uint64_t v24;
  void **v25;
  void *v26;
  void **v27;
  uint64_t v28;
  void **v29;
  void *v30;
  void **v31;
  uint64_t v32;
  void **v33;
  void *v34;
  void **v35;
  void *v36;
  ImsPrefs *v37;
  void **v38;
  void *v39;
  int v40;
  _QWORD *v41;
  uint64_t v42;
  void **PayloadTypeOctetAlignAMRWBKey;
  void *v44;
  int v45;
  ImsPrefs *v46;
  void **v47;
  ImsPrefs *v48;
  uint64_t v49;
  void **v50;
  void **v51;
  uint64_t v52;
  void **v53;
  void *v54;
  void **v55;
  uint64_t v56;
  void **v57;
  void *v58;
  void **v59;
  uint64_t v60;
  void **v61;
  void *v62;
  void **v63;
  uint64_t v64;
  void **v65;
  void *v66;
  void **v67;
  void *v68;
  ImsPrefs *v69;
  void **v70;
  void *v71;
  int v72;
  _QWORD *v73;
  uint64_t v74;
  void **SupportAMRNBKey;
  uint64_t v76;
  void **PacketAlignmentAMRNBKey;
  int v78;
  void **PayloadTypeBWEfficientAMRNBKey;
  void *v80;
  int v81;
  ImsPrefs *v82;
  void **ModeSetAMRNBKey;
  ImsPrefs *v84;
  uint64_t v85;
  void **v86;
  void **v87;
  ImsPrefs *v88;
  void **v89;
  uint64_t v90;
  void **v91;
  void *v92;
  void **v93;
  uint64_t v94;
  void **v95;
  void *v96;
  void **v97;
  uint64_t v98;
  void **v99;
  void *v100;
  void **v101;
  uint64_t v102;
  void **v103;
  void *v104;
  void **v105;
  void *v106;
  ImsPrefs *v107;
  void **v108;
  void *v109;
  int v110;
  _QWORD *v111;
  uint64_t v112;
  void **PayloadTypeOctetAlignAMRNBKey;
  void *v114;
  int v115;
  ImsPrefs *v116;
  void **v117;
  ImsPrefs *v118;
  uint64_t v119;
  void **v120;
  void **v121;
  uint64_t v122;
  void **v123;
  void *v124;
  void **v125;
  uint64_t v126;
  void **v127;
  void *v128;
  void **v129;
  uint64_t v130;
  void **v131;
  void *v132;
  void **v133;
  uint64_t v134;
  void **v135;
  void *v136;
  void **v137;
  void *v138;
  ImsPrefs *v139;
  void **v140;
  void *v141;
  int v142;
  _QWORD *v143;
  uint64_t v144;
  void **SupportPCMUKey;
  ImsPrefs *v146;
  _QWORD *v147;
  uint64_t v148;
  void **SupportPCMAKey;
  ImsPrefs *v150;
  _QWORD *v151;
  uint64_t v152;
  void **PayloadTypeDTMF16KKey;
  void *v154;
  ImsPrefs *v155;
  void **v156;
  void *v157;
  ImsPrefs *v158;
  void **v159;
  void *v160;
  int v161;
  ImsPrefs *v162;
  void **v163;
  void *v164;
  int v165;
  _QWORD *v166;
  uint64_t v167;
  void **PayloadTypeDTMF8KKey;
  void *v169;
  ImsPrefs *v170;
  void **v171;
  void *v172;
  ImsPrefs *v173;
  void **v174;
  void *v175;
  int v176;
  ImsPrefs *v177;
  void **v178;
  void *v179;
  int v180;
  _QWORD *v181;
  uint64_t v182;
  void *v183[2];
  char v184;
  void *v185[2];
  char v186;
  void *v187[2];
  char v188;
  void *v189[2];
  char v190;
  void *v191[2];
  char v192;
  void *v193[2];
  char v194;
  void *v195;
  char v196;
  void *v197[2];
  char v198;
  void *v199[2];
  char v200;
  __int128 v201;
  __int128 v202;
  _QWORD v203[4];
  void *__p;
  char v205;
  void (**v206)(SDPMediaFormatDTMFParams *__hidden);
  char v207;
  std::string v208;
  __int16 v209;
  char v210;
  __int16 v211;
  int v212;
  char v213;
  __int16 v214;
  char v215;
  __int16 v216;
  char v217;
  int v218;
  int v219;
  int v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  _QWORD v231[12];

  v231[9] = *MEMORY[0x1E0C80C00];
  SupportAMRWBKey = (void **)ImsPrefs::getSupportAMRWBKey(this);
  AMRPacketAlignmentFromString = (uint64_t)ImsPrefs::prefWithKey(a2, SupportAMRWBKey);
  if (AMRPacketAlignmentFromString)
  {
    AMRPacketAlignmentFromString = (*(uint64_t (**)(uint64_t))(*(_QWORD *)AMRPacketAlignmentFromString + 40))(AMRPacketAlignmentFromString);
    if ((AMRPacketAlignmentFromString & 1) == 0)
      goto LABEL_117;
  }
  else if (!*((_BYTE *)SupportAMRWBKey + 57))
  {
    goto LABEL_117;
  }
  PacketAlignmentAMRWBKey = (void **)ImsPrefs::getPacketAlignmentAMRWBKey((ImsPrefs *)AMRPacketAlignmentFromString);
  ImsPrefs::stringValue(a2, PacketAlignmentAMRWBKey);
  AMRPacketAlignmentFromString = SDPSession::getAMRPacketAlignmentFromString((uint64_t)&__p);
  v8 = AMRPacketAlignmentFromString;
  if (v205 < 0)
    operator delete(__p);
  if ((v8 - 1) > 1)
    goto LABEL_66;
  memset(v203, 0, sizeof(v203));
  v201 = 0u;
  v202 = 0u;
  PayloadTypeBWEfficientAMRWBKey = (void **)ImsPrefs::getPayloadTypeBWEfficientAMRWBKey((ImsPrefs *)AMRPacketAlignmentFromString);
  v10 = ImsPrefs::prefWithKey(a2, PayloadTypeBWEfficientAMRWBKey);
  if (v10)
    LOWORD(v11) = (*(uint64_t (**)(void *))(*(_QWORD *)v10 + 56))(v10);
  else
    v11 = *((_DWORD *)PayloadTypeBWEfficientAMRWBKey + 15);
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v201, v11);
  *(_QWORD *)&v201 = off_1E78E9958;
  WORD1(v203[1]) = 1;
  BYTE4(v203[1]) = 0;
  BYTE2(v203[2]) = 0;
  WORD2(v203[2]) = 2;
  BYTE6(v203[2]) = 0;
  LOWORD(v203[3]) = 2;
  BYTE2(v203[3]) = 0;
  HIDWORD(v203[3]) = 0x1000000;
  *(_DWORD *)((char *)&v203[1] + 6) = 511;
  ModeSetAMRWBKey = (void **)ImsPrefs::getModeSetAMRWBKey(v12);
  v14 = (ImsPrefs *)ImsPrefs::stringValue(a2, ModeSetAMRWBKey);
  if (SBYTE7(v222) < 0)
  {
    v15 = *((_QWORD *)&v221 + 1);
    operator delete((void *)v221);
    if (!v15)
      goto LABEL_17;
  }
  else if (!BYTE7(v222))
  {
    goto LABEL_17;
  }
  v16 = (void **)ImsPrefs::getModeSetAMRWBKey(v14);
  ImsPrefs::stringValue(a2, v16);
  v14 = (ImsPrefs *)SDPMediaFormatAMRParams::modesetFromString((const std::string *)&v221);
  HIWORD(v203[1]) = (_WORD)v14;
  HIBYTE(v203[3]) = 0;
  if (SBYTE7(v222) < 0)
    operator delete((void *)v221);
LABEL_17:
  SuppressOctetAlignAttributeForBECodecsKey = (void **)ImsPrefs::getSuppressOctetAlignAttributeForBECodecsKey(v14);
  v18 = (ImsPrefs *)ImsPrefs::prefWithKey(a2, SuppressOctetAlignAttributeForBECodecsKey);
  if (v18)
  {
    v18 = (ImsPrefs *)(*(uint64_t (**)(ImsPrefs *))(*(_QWORD *)v18 + 40))(v18);
    if ((v18 & 1) != 0)
      goto LABEL_20;
    goto LABEL_19;
  }
  if (!*((_BYTE *)SuppressOctetAlignAttributeForBECodecsKey + 57))
LABEL_19:
    *(_WORD *)((char *)&v203[1] + 3) = 256;
LABEL_20:
  IncludeSDPMaxRedKey = (void **)ImsPrefs::getIncludeSDPMaxRedKey(v18);
  v20 = (uint64_t)ImsPrefs::prefWithKey(a2, IncludeSDPMaxRedKey);
  if (v20)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    if (!(_DWORD)v20)
      goto LABEL_30;
  }
  else if (!*((_BYTE *)IncludeSDPMaxRedKey + 57))
  {
    goto LABEL_30;
  }
  MaxRedundancyKey = (void **)ImsPrefs::getMaxRedundancyKey((ImsPrefs *)v20);
  v22 = ImsPrefs::prefWithKey(a2, MaxRedundancyKey);
  if (v22)
    v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v22 + 56))(v22);
  else
    v20 = *((unsigned int *)MaxRedundancyKey + 15);
  LOWORD(v203[2]) = v20;
  BYTE2(v203[2]) = 1;
LABEL_30:
  v23 = (void **)ImsPrefs::getIncludeSDPModeChangeCapabilityKey((ImsPrefs *)v20);
  v24 = (uint64_t)ImsPrefs::prefWithKey(a2, v23);
  if (v24)
  {
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
    if (!(_DWORD)v24)
      goto LABEL_38;
  }
  else if (!*((_BYTE *)v23 + 57))
  {
    goto LABEL_38;
  }
  v25 = (void **)ImsPrefs::getModeChangeCapabilityKey((ImsPrefs *)v24);
  v26 = ImsPrefs::prefWithKey(a2, v25);
  if (v26)
    v24 = (*(uint64_t (**)(void *))(*(_QWORD *)v26 + 56))(v26);
  else
    v24 = *((unsigned int *)v25 + 15);
  WORD2(v203[2]) = v24;
  BYTE6(v203[2]) = 1;
LABEL_38:
  v27 = (void **)ImsPrefs::getIncludeSDPModeChangePeriodKey((ImsPrefs *)v24);
  v28 = (uint64_t)ImsPrefs::prefWithKey(a2, v27);
  if (v28)
  {
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
    if (!(_DWORD)v28)
      goto LABEL_46;
  }
  else if (!*((_BYTE *)v27 + 57))
  {
    goto LABEL_46;
  }
  v29 = (void **)ImsPrefs::getModeChangePeriodKey((ImsPrefs *)v28);
  v30 = ImsPrefs::prefWithKey(a2, v29);
  if (v30)
    v28 = (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 56))(v30);
  else
    v28 = *((unsigned int *)v29 + 15);
  LOWORD(v203[3]) = v28;
  BYTE2(v203[3]) = 1;
LABEL_46:
  v31 = (void **)ImsPrefs::getIncludeSDPModeChangeNeighborKey((ImsPrefs *)v28);
  v32 = (uint64_t)ImsPrefs::prefWithKey(a2, v31);
  if (v32)
  {
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
    if (!(_DWORD)v32)
      goto LABEL_54;
  }
  else if (!*((_BYTE *)v31 + 57))
  {
    goto LABEL_54;
  }
  v33 = (void **)ImsPrefs::getModeChangeNeighborKey((ImsPrefs *)v32);
  v34 = ImsPrefs::prefWithKey(a2, v33);
  if (v34)
    v32 = (*(uint64_t (**)(void *))(*(_QWORD *)v34 + 56))(v34);
  else
    v32 = *((unsigned int *)v33 + 15);
  WORD2(v203[3]) = v32;
  BYTE6(v203[3]) = 1;
LABEL_54:
  memset(v231, 0, 64);
  v229 = 0u;
  v230 = 0u;
  v227 = 0u;
  v228 = 0u;
  v225 = 0u;
  v226 = 0u;
  v223 = 0u;
  v224 = 0u;
  v221 = 0u;
  v222 = 0u;
  v35 = (void **)ImsPrefs::getPayloadTypeBWEfficientAMRWBKey((ImsPrefs *)v32);
  v36 = ImsPrefs::prefWithKey(a2, v35);
  if (v36)
    v37 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v36 + 56))(v36);
  else
    v37 = (ImsPrefs *)*((unsigned int *)v35 + 15);
  *(_QWORD *)&v221 = &off_1E78E2080;
  WORD4(v221) = (_WORD)v37;
  BYTE8(v222) = 1;
  *(_QWORD *)&v224 = 0;
  v223 = 0uLL;
  *(_QWORD *)&v222 = &off_1E78EE990;
  WORD4(v224) = 255;
  *(_QWORD *)&v226 = 0;
  v225 = 0uLL;
  DWORD2(v226) = 0x10000;
  *((_QWORD *)&v227 + 1) = 1;
  *(_QWORD *)&v229 = 0;
  v228 = 0uLL;
  *((_QWORD *)&v229 + 1) = 255;
  *(_QWORD *)&v227 = &off_1E78B8590;
  v231[0] = 0;
  v230 = 0uLL;
  LODWORD(v231[7]) = 0;
  v38 = (void **)ImsPrefs::getPayloadTypeBWEfficientAMRWBKey(v37);
  v39 = ImsPrefs::prefWithKey(a2, v38);
  if (v39)
    LOWORD(v40) = (*(uint64_t (**)(void *))(*(_QWORD *)v39 + 56))(v39);
  else
    v40 = *((_DWORD *)v38 + 15);
  std::string::basic_string[abi:ne180100]<0>(v199, "AMR-WB");
  SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v206, v40, (__int128 *)v199, 16000, 1);
  BYTE8(v222) = v207;
  std::string::operator=((std::string *)&v223, &v208);
  WORD4(v224) = v209;
  std::string::operator=((std::string *)&v225, (const std::string *)((char *)&v212 + 2));
  DWORD2(v226) = v219;
  SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v206);
  if (v200 < 0)
    operator delete(v199[0]);
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v206, v203[1]);
  v206 = off_1E78E9958;
  v210 = BYTE2(v203[1]);
  v211 = *(_WORD *)((char *)&v203[1] + 3);
  v212 = *(_DWORD *)((char *)&v203[1] + 6);
  v213 = BYTE2(v203[2]);
  v214 = WORD2(v203[2]);
  v215 = BYTE6(v203[2]);
  v216 = v203[3];
  v217 = BYTE2(v203[3]);
  v218 = HIDWORD(v203[3]);
  v220 = 1;
  SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)&v221, (uint64_t)&v206);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v206);
  v41 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>((uint64_t)this + 40, 0, 0, (uint64_t)&v221);
  v41[1] = (char *)this + 40;
  v42 = *((_QWORD *)this + 5);
  *v41 = v42;
  *(_QWORD *)(v42 + 8) = v41;
  *((_QWORD *)this + 5) = v41;
  ++*((_QWORD *)this + 7);
  *(_QWORD *)&v221 = &off_1E78E2080;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v227);
  SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v222);
  *(_QWORD *)&v201 = off_1E78ED0A8;
  if (SHIBYTE(v203[0]) < 0)
  {
    operator delete((void *)v202);
    if ((v8 & 1) != 0)
      goto LABEL_117;
  }
  else if ((v8 & 1) != 0)
  {
    goto LABEL_117;
  }
LABEL_66:
  memset(v203, 0, sizeof(v203));
  v201 = 0u;
  v202 = 0u;
  PayloadTypeOctetAlignAMRWBKey = (void **)ImsPrefs::getPayloadTypeOctetAlignAMRWBKey((ImsPrefs *)AMRPacketAlignmentFromString);
  v44 = ImsPrefs::prefWithKey(a2, PayloadTypeOctetAlignAMRWBKey);
  if (v44)
    LOWORD(v45) = (*(uint64_t (**)(void *))(*(_QWORD *)v44 + 56))(v44);
  else
    v45 = *((_DWORD *)PayloadTypeOctetAlignAMRWBKey + 15);
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v201, v45);
  *(_QWORD *)&v201 = off_1E78E9958;
  WORD1(v203[1]) = 1;
  BYTE4(v203[1]) = 0;
  BYTE2(v203[2]) = 0;
  WORD2(v203[2]) = 2;
  BYTE6(v203[2]) = 0;
  LOWORD(v203[3]) = 2;
  BYTE2(v203[3]) = 0;
  HIDWORD(v203[3]) = 0x1000000;
  *(_DWORD *)((char *)&v203[1] + 6) = 511;
  v47 = (void **)ImsPrefs::getModeSetAMRWBKey(v46);
  v48 = (ImsPrefs *)ImsPrefs::stringValue(a2, v47);
  if (SBYTE7(v222) < 0)
  {
    v49 = *((_QWORD *)&v221 + 1);
    operator delete((void *)v221);
    if (!v49)
      goto LABEL_75;
  }
  else if (!BYTE7(v222))
  {
    goto LABEL_75;
  }
  v50 = (void **)ImsPrefs::getModeSetAMRWBKey(v48);
  ImsPrefs::stringValue(a2, v50);
  v48 = (ImsPrefs *)SDPMediaFormatAMRParams::modesetFromString((const std::string *)&v221);
  HIWORD(v203[1]) = (_WORD)v48;
  HIBYTE(v203[3]) = 0;
  if (SBYTE7(v222) < 0)
    operator delete((void *)v221);
LABEL_75:
  *(_WORD *)((char *)&v203[1] + 3) = 257;
  v51 = (void **)ImsPrefs::getIncludeSDPMaxRedKey(v48);
  v52 = (uint64_t)ImsPrefs::prefWithKey(a2, v51);
  if (v52)
  {
    v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 40))(v52);
    if (!(_DWORD)v52)
      goto LABEL_83;
  }
  else if (!*((_BYTE *)v51 + 57))
  {
    goto LABEL_83;
  }
  v53 = (void **)ImsPrefs::getMaxRedundancyKey((ImsPrefs *)v52);
  v54 = ImsPrefs::prefWithKey(a2, v53);
  if (v54)
    v52 = (*(uint64_t (**)(void *))(*(_QWORD *)v54 + 56))(v54);
  else
    v52 = *((unsigned int *)v53 + 15);
  LOWORD(v203[2]) = v52;
  BYTE2(v203[2]) = 1;
LABEL_83:
  v55 = (void **)ImsPrefs::getIncludeSDPModeChangeCapabilityKey((ImsPrefs *)v52);
  v56 = (uint64_t)ImsPrefs::prefWithKey(a2, v55);
  if (v56)
  {
    v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 40))(v56);
    if (!(_DWORD)v56)
      goto LABEL_91;
  }
  else if (!*((_BYTE *)v55 + 57))
  {
    goto LABEL_91;
  }
  v57 = (void **)ImsPrefs::getModeChangeCapabilityKey((ImsPrefs *)v56);
  v58 = ImsPrefs::prefWithKey(a2, v57);
  if (v58)
    v56 = (*(uint64_t (**)(void *))(*(_QWORD *)v58 + 56))(v58);
  else
    v56 = *((unsigned int *)v57 + 15);
  WORD2(v203[2]) = v56;
  BYTE6(v203[2]) = 1;
LABEL_91:
  v59 = (void **)ImsPrefs::getIncludeSDPModeChangePeriodKey((ImsPrefs *)v56);
  v60 = (uint64_t)ImsPrefs::prefWithKey(a2, v59);
  if (v60)
  {
    v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 40))(v60);
    if (!(_DWORD)v60)
      goto LABEL_99;
  }
  else if (!*((_BYTE *)v59 + 57))
  {
    goto LABEL_99;
  }
  v61 = (void **)ImsPrefs::getModeChangePeriodKey((ImsPrefs *)v60);
  v62 = ImsPrefs::prefWithKey(a2, v61);
  if (v62)
    v60 = (*(uint64_t (**)(void *))(*(_QWORD *)v62 + 56))(v62);
  else
    v60 = *((unsigned int *)v61 + 15);
  LOWORD(v203[3]) = v60;
  BYTE2(v203[3]) = 1;
LABEL_99:
  v63 = (void **)ImsPrefs::getIncludeSDPModeChangeNeighborKey((ImsPrefs *)v60);
  v64 = (uint64_t)ImsPrefs::prefWithKey(a2, v63);
  if (v64)
  {
    v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
    if (!(_DWORD)v64)
      goto LABEL_107;
LABEL_103:
    v65 = (void **)ImsPrefs::getModeChangeNeighborKey((ImsPrefs *)v64);
    v66 = ImsPrefs::prefWithKey(a2, v65);
    if (v66)
      v64 = (*(uint64_t (**)(void *))(*(_QWORD *)v66 + 56))(v66);
    else
      v64 = *((unsigned int *)v65 + 15);
    WORD2(v203[3]) = v64;
    BYTE6(v203[3]) = 1;
    goto LABEL_107;
  }
  if (*((_BYTE *)v63 + 57))
    goto LABEL_103;
LABEL_107:
  memset(v231, 0, 64);
  v229 = 0u;
  v230 = 0u;
  v227 = 0u;
  v228 = 0u;
  v225 = 0u;
  v226 = 0u;
  v223 = 0u;
  v224 = 0u;
  v221 = 0u;
  v222 = 0u;
  v67 = (void **)ImsPrefs::getPayloadTypeOctetAlignAMRWBKey((ImsPrefs *)v64);
  v68 = ImsPrefs::prefWithKey(a2, v67);
  if (v68)
    v69 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v68 + 56))(v68);
  else
    v69 = (ImsPrefs *)*((unsigned int *)v67 + 15);
  *(_QWORD *)&v221 = &off_1E78E2080;
  WORD4(v221) = (_WORD)v69;
  BYTE8(v222) = 1;
  *(_QWORD *)&v224 = 0;
  v223 = 0uLL;
  *(_QWORD *)&v222 = &off_1E78EE990;
  WORD4(v224) = 255;
  *(_QWORD *)&v226 = 0;
  v225 = 0uLL;
  DWORD2(v226) = 0x10000;
  *((_QWORD *)&v227 + 1) = 1;
  *(_QWORD *)&v229 = 0;
  v228 = 0uLL;
  *((_QWORD *)&v229 + 1) = 255;
  *(_QWORD *)&v227 = &off_1E78B8590;
  v231[0] = 0;
  v230 = 0uLL;
  LODWORD(v231[7]) = 0;
  v70 = (void **)ImsPrefs::getPayloadTypeOctetAlignAMRWBKey(v69);
  v71 = ImsPrefs::prefWithKey(a2, v70);
  if (v71)
    LOWORD(v72) = (*(uint64_t (**)(void *))(*(_QWORD *)v71 + 56))(v71);
  else
    v72 = *((_DWORD *)v70 + 15);
  std::string::basic_string[abi:ne180100]<0>(v197, "AMR-WB");
  SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v206, v72, (__int128 *)v197, 16000, 1);
  BYTE8(v222) = v207;
  std::string::operator=((std::string *)&v223, &v208);
  WORD4(v224) = v209;
  std::string::operator=((std::string *)&v225, (const std::string *)((char *)&v212 + 2));
  DWORD2(v226) = v219;
  SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v206);
  if (v198 < 0)
    operator delete(v197[0]);
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v206, v203[1]);
  v206 = off_1E78E9958;
  v210 = BYTE2(v203[1]);
  v211 = *(_WORD *)((char *)&v203[1] + 3);
  v212 = *(_DWORD *)((char *)&v203[1] + 6);
  v213 = BYTE2(v203[2]);
  v214 = WORD2(v203[2]);
  v215 = BYTE6(v203[2]);
  v216 = v203[3];
  v217 = BYTE2(v203[3]);
  v218 = HIDWORD(v203[3]);
  v220 = 1;
  SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)&v221, (uint64_t)&v206);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v206);
  v73 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>((uint64_t)this + 40, 0, 0, (uint64_t)&v221);
  v73[1] = (char *)this + 40;
  v74 = *((_QWORD *)this + 5);
  *v73 = v74;
  *(_QWORD *)(v74 + 8) = v73;
  *((_QWORD *)this + 5) = v73;
  ++*((_QWORD *)this + 7);
  *(_QWORD *)&v221 = &off_1E78E2080;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v227);
  SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v222);
  *(_QWORD *)&v201 = off_1E78ED0A8;
  if (SHIBYTE(v203[0]) < 0)
    operator delete((void *)v202);
LABEL_117:
  SupportAMRNBKey = (void **)ImsPrefs::getSupportAMRNBKey((ImsPrefs *)AMRPacketAlignmentFromString);
  v76 = (uint64_t)ImsPrefs::prefWithKey(a2, SupportAMRNBKey);
  if (v76)
  {
    v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
    if ((v76 & 1) == 0)
      goto LABEL_233;
  }
  else if (!*((_BYTE *)SupportAMRNBKey + 57))
  {
    goto LABEL_233;
  }
  PacketAlignmentAMRNBKey = (void **)ImsPrefs::getPacketAlignmentAMRNBKey((ImsPrefs *)v76);
  ImsPrefs::stringValue(a2, PacketAlignmentAMRNBKey);
  v76 = SDPSession::getAMRPacketAlignmentFromString((uint64_t)&v195);
  v78 = v76;
  if (v196 < 0)
    operator delete(v195);
  if ((v78 - 1) > 1)
    goto LABEL_182;
  memset(v203, 0, sizeof(v203));
  v201 = 0u;
  v202 = 0u;
  PayloadTypeBWEfficientAMRNBKey = (void **)ImsPrefs::getPayloadTypeBWEfficientAMRNBKey((ImsPrefs *)v76);
  v80 = ImsPrefs::prefWithKey(a2, PayloadTypeBWEfficientAMRNBKey);
  if (v80)
    LOWORD(v81) = (*(uint64_t (**)(void *))(*(_QWORD *)v80 + 56))(v80);
  else
    v81 = *((_DWORD *)PayloadTypeBWEfficientAMRNBKey + 15);
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v201, v81);
  *(_QWORD *)&v201 = off_1E78E9958;
  WORD1(v203[1]) = 0;
  BYTE4(v203[1]) = 0;
  BYTE2(v203[2]) = 0;
  WORD2(v203[2]) = 2;
  BYTE6(v203[2]) = 0;
  LOWORD(v203[3]) = 2;
  BYTE2(v203[3]) = 0;
  HIDWORD(v203[3]) = 0x1000000;
  *(_DWORD *)((char *)&v203[1] + 6) = 255;
  ModeSetAMRNBKey = (void **)ImsPrefs::getModeSetAMRNBKey(v82);
  v84 = (ImsPrefs *)ImsPrefs::stringValue(a2, ModeSetAMRNBKey);
  if (SBYTE7(v222) < 0)
  {
    v85 = *((_QWORD *)&v221 + 1);
    operator delete((void *)v221);
    if (!v85)
      goto LABEL_133;
  }
  else if (!BYTE7(v222))
  {
    goto LABEL_133;
  }
  v86 = (void **)ImsPrefs::getModeSetAMRNBKey(v84);
  ImsPrefs::stringValue(a2, v86);
  v84 = (ImsPrefs *)SDPMediaFormatAMRParams::modesetFromString((const std::string *)&v221);
  HIWORD(v203[1]) = (_WORD)v84;
  HIBYTE(v203[3]) = 0;
  if (SBYTE7(v222) < 0)
    operator delete((void *)v221);
LABEL_133:
  v87 = (void **)ImsPrefs::getSuppressOctetAlignAttributeForBECodecsKey(v84);
  v88 = (ImsPrefs *)ImsPrefs::prefWithKey(a2, v87);
  if (v88)
  {
    v88 = (ImsPrefs *)(*(uint64_t (**)(ImsPrefs *))(*(_QWORD *)v88 + 40))(v88);
    if ((v88 & 1) != 0)
      goto LABEL_136;
    goto LABEL_135;
  }
  if (!*((_BYTE *)v87 + 57))
LABEL_135:
    *(_WORD *)((char *)&v203[1] + 3) = 256;
LABEL_136:
  v89 = (void **)ImsPrefs::getIncludeSDPMaxRedKey(v88);
  v90 = (uint64_t)ImsPrefs::prefWithKey(a2, v89);
  if (v90)
  {
    v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 40))(v90);
    if (!(_DWORD)v90)
      goto LABEL_146;
  }
  else if (!*((_BYTE *)v89 + 57))
  {
    goto LABEL_146;
  }
  v91 = (void **)ImsPrefs::getMaxRedundancyKey((ImsPrefs *)v90);
  v92 = ImsPrefs::prefWithKey(a2, v91);
  if (v92)
    v90 = (*(uint64_t (**)(void *))(*(_QWORD *)v92 + 56))(v92);
  else
    v90 = *((unsigned int *)v91 + 15);
  LOWORD(v203[2]) = v90;
  BYTE2(v203[2]) = 1;
LABEL_146:
  v93 = (void **)ImsPrefs::getIncludeSDPModeChangeCapabilityKey((ImsPrefs *)v90);
  v94 = (uint64_t)ImsPrefs::prefWithKey(a2, v93);
  if (v94)
  {
    v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v94 + 40))(v94);
    if (!(_DWORD)v94)
      goto LABEL_154;
  }
  else if (!*((_BYTE *)v93 + 57))
  {
    goto LABEL_154;
  }
  v95 = (void **)ImsPrefs::getModeChangeCapabilityKey((ImsPrefs *)v94);
  v96 = ImsPrefs::prefWithKey(a2, v95);
  if (v96)
    v94 = (*(uint64_t (**)(void *))(*(_QWORD *)v96 + 56))(v96);
  else
    v94 = *((unsigned int *)v95 + 15);
  WORD2(v203[2]) = v94;
  BYTE6(v203[2]) = 1;
LABEL_154:
  v97 = (void **)ImsPrefs::getIncludeSDPModeChangePeriodKey((ImsPrefs *)v94);
  v98 = (uint64_t)ImsPrefs::prefWithKey(a2, v97);
  if (v98)
  {
    v98 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 40))(v98);
    if (!(_DWORD)v98)
      goto LABEL_162;
  }
  else if (!*((_BYTE *)v97 + 57))
  {
    goto LABEL_162;
  }
  v99 = (void **)ImsPrefs::getModeChangePeriodKey((ImsPrefs *)v98);
  v100 = ImsPrefs::prefWithKey(a2, v99);
  if (v100)
    v98 = (*(uint64_t (**)(void *))(*(_QWORD *)v100 + 56))(v100);
  else
    v98 = *((unsigned int *)v99 + 15);
  LOWORD(v203[3]) = v98;
  BYTE2(v203[3]) = 1;
LABEL_162:
  v101 = (void **)ImsPrefs::getIncludeSDPModeChangeNeighborKey((ImsPrefs *)v98);
  v102 = (uint64_t)ImsPrefs::prefWithKey(a2, v101);
  if (v102)
  {
    v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v102 + 40))(v102);
    if (!(_DWORD)v102)
      goto LABEL_170;
  }
  else if (!*((_BYTE *)v101 + 57))
  {
    goto LABEL_170;
  }
  v103 = (void **)ImsPrefs::getModeChangeNeighborKey((ImsPrefs *)v102);
  v104 = ImsPrefs::prefWithKey(a2, v103);
  if (v104)
    v102 = (*(uint64_t (**)(void *))(*(_QWORD *)v104 + 56))(v104);
  else
    v102 = *((unsigned int *)v103 + 15);
  WORD2(v203[3]) = v102;
  BYTE6(v203[3]) = 1;
LABEL_170:
  memset(v231, 0, 64);
  v229 = 0u;
  v230 = 0u;
  v227 = 0u;
  v228 = 0u;
  v225 = 0u;
  v226 = 0u;
  v223 = 0u;
  v224 = 0u;
  v221 = 0u;
  v222 = 0u;
  v105 = (void **)ImsPrefs::getPayloadTypeBWEfficientAMRNBKey((ImsPrefs *)v102);
  v106 = ImsPrefs::prefWithKey(a2, v105);
  if (v106)
    v107 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v106 + 56))(v106);
  else
    v107 = (ImsPrefs *)*((unsigned int *)v105 + 15);
  *(_QWORD *)&v221 = &off_1E78E2080;
  WORD4(v221) = (_WORD)v107;
  BYTE8(v222) = 1;
  *(_QWORD *)&v224 = 0;
  v223 = 0uLL;
  *(_QWORD *)&v222 = &off_1E78EE990;
  WORD4(v224) = 255;
  *(_QWORD *)&v226 = 0;
  v225 = 0uLL;
  DWORD2(v226) = 0x10000;
  *((_QWORD *)&v227 + 1) = 1;
  *(_QWORD *)&v229 = 0;
  v228 = 0uLL;
  *((_QWORD *)&v229 + 1) = 255;
  *(_QWORD *)&v227 = &off_1E78B8590;
  v231[0] = 0;
  v230 = 0uLL;
  LODWORD(v231[7]) = 0;
  v108 = (void **)ImsPrefs::getPayloadTypeBWEfficientAMRNBKey(v107);
  v109 = ImsPrefs::prefWithKey(a2, v108);
  if (v109)
    LOWORD(v110) = (*(uint64_t (**)(void *))(*(_QWORD *)v109 + 56))(v109);
  else
    v110 = *((_DWORD *)v108 + 15);
  std::string::basic_string[abi:ne180100]<0>(v193, "AMR");
  SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v206, v110, (__int128 *)v193, 8000, 1);
  BYTE8(v222) = v207;
  std::string::operator=((std::string *)&v223, &v208);
  WORD4(v224) = v209;
  std::string::operator=((std::string *)&v225, (const std::string *)((char *)&v212 + 2));
  DWORD2(v226) = v219;
  SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v206);
  if (v194 < 0)
    operator delete(v193[0]);
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v206, v203[1]);
  v206 = off_1E78E9958;
  v210 = BYTE2(v203[1]);
  v211 = *(_WORD *)((char *)&v203[1] + 3);
  v212 = *(_DWORD *)((char *)&v203[1] + 6);
  v213 = BYTE2(v203[2]);
  v214 = WORD2(v203[2]);
  v215 = BYTE6(v203[2]);
  v216 = v203[3];
  v217 = BYTE2(v203[3]);
  v218 = HIDWORD(v203[3]);
  v220 = 1;
  SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)&v221, (uint64_t)&v206);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v206);
  v111 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>((uint64_t)this + 40, 0, 0, (uint64_t)&v221);
  v111[1] = (char *)this + 40;
  v112 = *((_QWORD *)this + 5);
  *v111 = v112;
  *(_QWORD *)(v112 + 8) = v111;
  *((_QWORD *)this + 5) = v111;
  ++*((_QWORD *)this + 7);
  *(_QWORD *)&v221 = &off_1E78E2080;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v227);
  SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v222);
  *(_QWORD *)&v201 = off_1E78ED0A8;
  if (SHIBYTE(v203[0]) < 0)
  {
    operator delete((void *)v202);
    if ((v78 & 1) != 0)
      goto LABEL_233;
  }
  else if ((v78 & 1) != 0)
  {
    goto LABEL_233;
  }
LABEL_182:
  memset(v203, 0, sizeof(v203));
  v201 = 0u;
  v202 = 0u;
  PayloadTypeOctetAlignAMRNBKey = (void **)ImsPrefs::getPayloadTypeOctetAlignAMRNBKey((ImsPrefs *)v76);
  v114 = ImsPrefs::prefWithKey(a2, PayloadTypeOctetAlignAMRNBKey);
  if (v114)
    LOWORD(v115) = (*(uint64_t (**)(void *))(*(_QWORD *)v114 + 56))(v114);
  else
    v115 = *((_DWORD *)PayloadTypeOctetAlignAMRNBKey + 15);
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v201, v115);
  *(_QWORD *)&v201 = off_1E78E9958;
  WORD1(v203[1]) = 0;
  BYTE4(v203[1]) = 0;
  BYTE2(v203[2]) = 0;
  WORD2(v203[2]) = 2;
  BYTE6(v203[2]) = 0;
  LOWORD(v203[3]) = 2;
  BYTE2(v203[3]) = 0;
  HIDWORD(v203[3]) = 0x1000000;
  *(_DWORD *)((char *)&v203[1] + 6) = 255;
  v117 = (void **)ImsPrefs::getModeSetAMRNBKey(v116);
  v118 = (ImsPrefs *)ImsPrefs::stringValue(a2, v117);
  if (SBYTE7(v222) < 0)
  {
    v119 = *((_QWORD *)&v221 + 1);
    operator delete((void *)v221);
    if (!v119)
      goto LABEL_191;
  }
  else if (!BYTE7(v222))
  {
    goto LABEL_191;
  }
  v120 = (void **)ImsPrefs::getModeSetAMRNBKey(v118);
  ImsPrefs::stringValue(a2, v120);
  v118 = (ImsPrefs *)SDPMediaFormatAMRParams::modesetFromString((const std::string *)&v221);
  HIWORD(v203[1]) = (_WORD)v118;
  HIBYTE(v203[3]) = 0;
  if (SBYTE7(v222) < 0)
    operator delete((void *)v221);
LABEL_191:
  *(_WORD *)((char *)&v203[1] + 3) = 257;
  v121 = (void **)ImsPrefs::getIncludeSDPMaxRedKey(v118);
  v122 = (uint64_t)ImsPrefs::prefWithKey(a2, v121);
  if (v122)
  {
    v122 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 40))(v122);
    if (!(_DWORD)v122)
      goto LABEL_199;
  }
  else if (!*((_BYTE *)v121 + 57))
  {
    goto LABEL_199;
  }
  v123 = (void **)ImsPrefs::getMaxRedundancyKey((ImsPrefs *)v122);
  v124 = ImsPrefs::prefWithKey(a2, v123);
  if (v124)
    v122 = (*(uint64_t (**)(void *))(*(_QWORD *)v124 + 56))(v124);
  else
    v122 = *((unsigned int *)v123 + 15);
  LOWORD(v203[2]) = v122;
  BYTE2(v203[2]) = 1;
LABEL_199:
  v125 = (void **)ImsPrefs::getIncludeSDPModeChangeCapabilityKey((ImsPrefs *)v122);
  v126 = (uint64_t)ImsPrefs::prefWithKey(a2, v125);
  if (v126)
  {
    v126 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v126 + 40))(v126);
    if (!(_DWORD)v126)
      goto LABEL_207;
  }
  else if (!*((_BYTE *)v125 + 57))
  {
    goto LABEL_207;
  }
  v127 = (void **)ImsPrefs::getModeChangeCapabilityKey((ImsPrefs *)v126);
  v128 = ImsPrefs::prefWithKey(a2, v127);
  if (v128)
    v126 = (*(uint64_t (**)(void *))(*(_QWORD *)v128 + 56))(v128);
  else
    v126 = *((unsigned int *)v127 + 15);
  WORD2(v203[2]) = v126;
  BYTE6(v203[2]) = 1;
LABEL_207:
  v129 = (void **)ImsPrefs::getIncludeSDPModeChangePeriodKey((ImsPrefs *)v126);
  v130 = (uint64_t)ImsPrefs::prefWithKey(a2, v129);
  if (v130)
  {
    v130 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v130 + 40))(v130);
    if (!(_DWORD)v130)
      goto LABEL_215;
  }
  else if (!*((_BYTE *)v129 + 57))
  {
    goto LABEL_215;
  }
  v131 = (void **)ImsPrefs::getModeChangePeriodKey((ImsPrefs *)v130);
  v132 = ImsPrefs::prefWithKey(a2, v131);
  if (v132)
    v130 = (*(uint64_t (**)(void *))(*(_QWORD *)v132 + 56))(v132);
  else
    v130 = *((unsigned int *)v131 + 15);
  LOWORD(v203[3]) = v130;
  BYTE2(v203[3]) = 1;
LABEL_215:
  v133 = (void **)ImsPrefs::getIncludeSDPModeChangeNeighborKey((ImsPrefs *)v130);
  v134 = (uint64_t)ImsPrefs::prefWithKey(a2, v133);
  if (v134)
  {
    v134 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v134 + 40))(v134);
    if (!(_DWORD)v134)
      goto LABEL_223;
LABEL_219:
    v135 = (void **)ImsPrefs::getModeChangeNeighborKey((ImsPrefs *)v134);
    v136 = ImsPrefs::prefWithKey(a2, v135);
    if (v136)
      v134 = (*(uint64_t (**)(void *))(*(_QWORD *)v136 + 56))(v136);
    else
      v134 = *((unsigned int *)v135 + 15);
    WORD2(v203[3]) = v134;
    BYTE6(v203[3]) = 1;
    goto LABEL_223;
  }
  if (*((_BYTE *)v133 + 57))
    goto LABEL_219;
LABEL_223:
  memset(v231, 0, 64);
  v229 = 0u;
  v230 = 0u;
  v227 = 0u;
  v228 = 0u;
  v225 = 0u;
  v226 = 0u;
  v223 = 0u;
  v224 = 0u;
  v221 = 0u;
  v222 = 0u;
  v137 = (void **)ImsPrefs::getPayloadTypeOctetAlignAMRNBKey((ImsPrefs *)v134);
  v138 = ImsPrefs::prefWithKey(a2, v137);
  if (v138)
    v139 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v138 + 56))(v138);
  else
    v139 = (ImsPrefs *)*((unsigned int *)v137 + 15);
  *(_QWORD *)&v221 = &off_1E78E2080;
  WORD4(v221) = (_WORD)v139;
  BYTE8(v222) = 1;
  *(_QWORD *)&v224 = 0;
  v223 = 0uLL;
  *(_QWORD *)&v222 = &off_1E78EE990;
  WORD4(v224) = 255;
  *(_QWORD *)&v226 = 0;
  v225 = 0uLL;
  DWORD2(v226) = 0x10000;
  *((_QWORD *)&v227 + 1) = 1;
  *(_QWORD *)&v229 = 0;
  v228 = 0uLL;
  *((_QWORD *)&v229 + 1) = 255;
  *(_QWORD *)&v227 = &off_1E78B8590;
  v231[0] = 0;
  v230 = 0uLL;
  LODWORD(v231[7]) = 0;
  v140 = (void **)ImsPrefs::getPayloadTypeOctetAlignAMRNBKey(v139);
  v141 = ImsPrefs::prefWithKey(a2, v140);
  if (v141)
    LOWORD(v142) = (*(uint64_t (**)(void *))(*(_QWORD *)v141 + 56))(v141);
  else
    v142 = *((_DWORD *)v140 + 15);
  std::string::basic_string[abi:ne180100]<0>(v191, "AMR");
  SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v206, v142, (__int128 *)v191, 8000, 1);
  BYTE8(v222) = v207;
  std::string::operator=((std::string *)&v223, &v208);
  WORD4(v224) = v209;
  std::string::operator=((std::string *)&v225, (const std::string *)((char *)&v212 + 2));
  DWORD2(v226) = v219;
  SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v206);
  if (v192 < 0)
    operator delete(v191[0]);
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v206, v203[1]);
  v206 = off_1E78E9958;
  v210 = BYTE2(v203[1]);
  v211 = *(_WORD *)((char *)&v203[1] + 3);
  v212 = *(_DWORD *)((char *)&v203[1] + 6);
  v213 = BYTE2(v203[2]);
  v214 = WORD2(v203[2]);
  v215 = BYTE6(v203[2]);
  v216 = v203[3];
  v217 = BYTE2(v203[3]);
  v218 = HIDWORD(v203[3]);
  v220 = 1;
  SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)&v221, (uint64_t)&v206);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v206);
  v143 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>((uint64_t)this + 40, 0, 0, (uint64_t)&v221);
  v143[1] = (char *)this + 40;
  v144 = *((_QWORD *)this + 5);
  *v143 = v144;
  *(_QWORD *)(v144 + 8) = v143;
  *((_QWORD *)this + 5) = v143;
  ++*((_QWORD *)this + 7);
  *(_QWORD *)&v221 = &off_1E78E2080;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v227);
  SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v222);
  *(_QWORD *)&v201 = off_1E78ED0A8;
  if (SHIBYTE(v203[0]) < 0)
    operator delete((void *)v202);
LABEL_233:
  SupportPCMUKey = (void **)ImsPrefs::getSupportPCMUKey((ImsPrefs *)v76);
  v146 = (ImsPrefs *)ImsPrefs::prefWithKey(a2, SupportPCMUKey);
  if (v146)
  {
    v146 = (ImsPrefs *)(*(uint64_t (**)(ImsPrefs *))(*(_QWORD *)v146 + 40))(v146);
    if ((v146 & 1) == 0)
      goto LABEL_240;
  }
  else if (!*((_BYTE *)SupportPCMUKey + 57))
  {
    goto LABEL_240;
  }
  *((_QWORD *)&v222 + 1) = 1;
  *((_QWORD *)&v226 + 1) = 0x10000;
  *((_QWORD *)&v224 + 1) = 255;
  *((_QWORD *)&v221 + 1) = 0;
  *(_QWORD *)&v224 = 0;
  v223 = 0uLL;
  *(_QWORD *)&v221 = &off_1E78E2080;
  *(_QWORD *)&v222 = &off_1E78EE990;
  v225 = 0uLL;
  *(_QWORD *)&v226 = 0;
  *((_QWORD *)&v227 + 1) = 1;
  v228 = 0uLL;
  *(_QWORD *)&v229 = 0;
  *((_QWORD *)&v229 + 1) = 255;
  *(_QWORD *)&v227 = &off_1E78B8590;
  v230 = 0uLL;
  memset(v231, 0, 64);
  std::string::basic_string[abi:ne180100]<0>(v189, "PCMU");
  SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v206, 0, (__int128 *)v189, 8000, 1);
  BYTE8(v222) = v207;
  std::string::operator=((std::string *)&v223, &v208);
  WORD4(v224) = v209;
  std::string::operator=((std::string *)&v225, (const std::string *)((char *)&v212 + 2));
  DWORD2(v226) = v219;
  SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v206);
  if (v190 < 0)
    operator delete(v189[0]);
  v147 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>((uint64_t)this + 40, 0, 0, (uint64_t)&v221);
  v147[1] = (char *)this + 40;
  v148 = *((_QWORD *)this + 5);
  *v147 = v148;
  *(_QWORD *)(v148 + 8) = v147;
  *((_QWORD *)this + 5) = v147;
  ++*((_QWORD *)this + 7);
  *(_QWORD *)&v221 = &off_1E78E2080;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v227);
  SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v222);
LABEL_240:
  SupportPCMAKey = (void **)ImsPrefs::getSupportPCMAKey(v146);
  v150 = (ImsPrefs *)ImsPrefs::prefWithKey(a2, SupportPCMAKey);
  if (v150)
  {
    v150 = (ImsPrefs *)(*(uint64_t (**)(ImsPrefs *))(*(_QWORD *)v150 + 40))(v150);
    if ((v150 & 1) == 0)
      goto LABEL_247;
  }
  else if (!*((_BYTE *)SupportPCMAKey + 57))
  {
    goto LABEL_247;
  }
  *((_QWORD *)&v221 + 1) = 8;
  *((_QWORD *)&v222 + 1) = 1;
  *((_QWORD *)&v226 + 1) = 0x10000;
  *((_QWORD *)&v224 + 1) = 255;
  *(_QWORD *)&v221 = &off_1E78E2080;
  *(_QWORD *)&v224 = 0;
  v223 = 0uLL;
  *(_QWORD *)&v222 = &off_1E78EE990;
  v225 = 0uLL;
  *(_QWORD *)&v226 = 0;
  *((_QWORD *)&v227 + 1) = 1;
  v228 = 0uLL;
  *(_QWORD *)&v229 = 0;
  *((_QWORD *)&v229 + 1) = 255;
  *(_QWORD *)&v227 = &off_1E78B8590;
  v230 = 0uLL;
  memset(v231, 0, 64);
  std::string::basic_string[abi:ne180100]<0>(v187, "PCMA");
  SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v206, 8, (__int128 *)v187, 8000, 1);
  BYTE8(v222) = v207;
  std::string::operator=((std::string *)&v223, &v208);
  WORD4(v224) = v209;
  std::string::operator=((std::string *)&v225, (const std::string *)((char *)&v212 + 2));
  DWORD2(v226) = v219;
  SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v206);
  if (v188 < 0)
    operator delete(v187[0]);
  v151 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>((uint64_t)this + 40, 0, 0, (uint64_t)&v221);
  v151[1] = (char *)this + 40;
  v152 = *((_QWORD *)this + 5);
  *v151 = v152;
  *(_QWORD *)(v152 + 8) = v151;
  *((_QWORD *)this + 5) = v151;
  ++*((_QWORD *)this + 7);
  *(_QWORD *)&v221 = &off_1E78E2080;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v227);
  SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v222);
LABEL_247:
  PayloadTypeDTMF16KKey = (void **)ImsPrefs::getPayloadTypeDTMF16KKey(v150);
  v154 = ImsPrefs::prefWithKey(a2, PayloadTypeDTMF16KKey);
  if (v154)
    v155 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v154 + 56))(v154);
  else
    v155 = (ImsPrefs *)*((unsigned int *)PayloadTypeDTMF16KKey + 15);
  if ((_DWORD)v155)
  {
    memset(v231, 0, 64);
    v229 = 0u;
    v230 = 0u;
    v227 = 0u;
    v228 = 0u;
    v225 = 0u;
    v226 = 0u;
    v223 = 0u;
    v224 = 0u;
    v221 = 0u;
    v222 = 0u;
    v156 = (void **)ImsPrefs::getPayloadTypeDTMF16KKey(v155);
    v157 = ImsPrefs::prefWithKey(a2, v156);
    if (v157)
      v158 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v157 + 56))(v157);
    else
      v158 = (ImsPrefs *)*((unsigned int *)v156 + 15);
    *(_QWORD *)&v221 = &off_1E78E2080;
    WORD4(v221) = (_WORD)v158;
    BYTE8(v222) = 1;
    *(_QWORD *)&v224 = 0;
    v223 = 0uLL;
    *(_QWORD *)&v222 = &off_1E78EE990;
    WORD4(v224) = 255;
    *(_QWORD *)&v226 = 0;
    v225 = 0uLL;
    DWORD2(v226) = 0x10000;
    *((_QWORD *)&v227 + 1) = 1;
    *(_QWORD *)&v229 = 0;
    v228 = 0uLL;
    *((_QWORD *)&v229 + 1) = 255;
    *(_QWORD *)&v227 = &off_1E78B8590;
    v231[0] = 0;
    v230 = 0uLL;
    LODWORD(v231[7]) = 0;
    v159 = (void **)ImsPrefs::getPayloadTypeDTMF16KKey(v158);
    v160 = ImsPrefs::prefWithKey(a2, v159);
    if (v160)
      LOWORD(v161) = (*(uint64_t (**)(void *))(*(_QWORD *)v160 + 56))(v160);
    else
      v161 = *((_DWORD *)v159 + 15);
    std::string::basic_string[abi:ne180100]<0>(v185, "telephone-event");
    SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v206, v161, (__int128 *)v185, 16000, 1);
    BYTE8(v222) = v207;
    std::string::operator=((std::string *)&v223, &v208);
    WORD4(v224) = v209;
    std::string::operator=((std::string *)&v225, (const std::string *)((char *)&v212 + 2));
    DWORD2(v226) = v219;
    SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v206);
    if (v186 < 0)
      operator delete(v185[0]);
    v163 = (void **)ImsPrefs::getPayloadTypeDTMF16KKey(v162);
    v164 = ImsPrefs::prefWithKey(a2, v163);
    if (v164)
      LOWORD(v165) = (*(uint64_t (**)(void *))(*(_QWORD *)v164 + 56))(v164);
    else
      v165 = *((_DWORD *)v163 + 15);
    SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v201, v165);
    *(_QWORD *)&v201 = off_1E78B8518;
    v207 = BYTE8(v201);
    v206 = (void (**)(SDPMediaFormatDTMFParams *__hidden))off_1E78ED0A8;
    if (SHIBYTE(v203[0]) < 0)
    {
      std::string::__init_copy_ctor_external(&v208, (const std::string::value_type *)v202, *((std::string::size_type *)&v202 + 1));
    }
    else
    {
      *(_OWORD *)&v208.__r_.__value_.__l.__data_ = v202;
      v208.__r_.__value_.__r.__words[2] = v203[0];
    }
    v209 = v203[1];
    v206 = off_1E78B8518;
    v220 = 3;
    SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)&v221, (uint64_t)&v206);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v206);
    *(_QWORD *)&v201 = off_1E78ED0A8;
    if (SHIBYTE(v203[0]) < 0)
      operator delete((void *)v202);
    v166 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>((uint64_t)this + 40, 0, 0, (uint64_t)&v221);
    v166[1] = (char *)this + 40;
    v167 = *((_QWORD *)this + 5);
    *v166 = v167;
    *(_QWORD *)(v167 + 8) = v166;
    *((_QWORD *)this + 5) = v166;
    ++*((_QWORD *)this + 7);
    *(_QWORD *)&v221 = &off_1E78E2080;
    std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v227);
    SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v222);
  }
  PayloadTypeDTMF8KKey = (void **)ImsPrefs::getPayloadTypeDTMF8KKey(v155);
  v169 = ImsPrefs::prefWithKey(a2, PayloadTypeDTMF8KKey);
  if (v169)
  {
    v170 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v169 + 56))(v169);
    if (!(_DWORD)v170)
      return;
  }
  else
  {
    v170 = (ImsPrefs *)*((unsigned int *)PayloadTypeDTMF8KKey + 15);
    if (!(_DWORD)v170)
      return;
  }
  memset(v231, 0, 64);
  v229 = 0u;
  v230 = 0u;
  v227 = 0u;
  v228 = 0u;
  v225 = 0u;
  v226 = 0u;
  v223 = 0u;
  v224 = 0u;
  v221 = 0u;
  v222 = 0u;
  v171 = (void **)ImsPrefs::getPayloadTypeDTMF8KKey(v170);
  v172 = ImsPrefs::prefWithKey(a2, v171);
  if (v172)
    v173 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v172 + 56))(v172);
  else
    v173 = (ImsPrefs *)*((unsigned int *)v171 + 15);
  *(_QWORD *)&v221 = &off_1E78E2080;
  WORD4(v221) = (_WORD)v173;
  BYTE8(v222) = 1;
  *(_QWORD *)&v224 = 0;
  v223 = 0uLL;
  *(_QWORD *)&v222 = &off_1E78EE990;
  WORD4(v224) = 255;
  *(_QWORD *)&v226 = 0;
  v225 = 0uLL;
  DWORD2(v226) = 0x10000;
  *((_QWORD *)&v227 + 1) = 1;
  *(_QWORD *)&v229 = 0;
  v228 = 0uLL;
  *((_QWORD *)&v229 + 1) = 255;
  *(_QWORD *)&v227 = &off_1E78B8590;
  v231[0] = 0;
  v230 = 0uLL;
  LODWORD(v231[7]) = 0;
  v174 = (void **)ImsPrefs::getPayloadTypeDTMF8KKey(v173);
  v175 = ImsPrefs::prefWithKey(a2, v174);
  if (v175)
    LOWORD(v176) = (*(uint64_t (**)(void *))(*(_QWORD *)v175 + 56))(v175);
  else
    v176 = *((_DWORD *)v174 + 15);
  std::string::basic_string[abi:ne180100]<0>(v183, "telephone-event");
  SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v206, v176, (__int128 *)v183, 8000, 1);
  BYTE8(v222) = v207;
  std::string::operator=((std::string *)&v223, &v208);
  WORD4(v224) = v209;
  std::string::operator=((std::string *)&v225, (const std::string *)((char *)&v212 + 2));
  DWORD2(v226) = v219;
  SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v206);
  if (v184 < 0)
    operator delete(v183[0]);
  v178 = (void **)ImsPrefs::getPayloadTypeDTMF8KKey(v177);
  v179 = ImsPrefs::prefWithKey(a2, v178);
  if (v179)
    LOWORD(v180) = (*(uint64_t (**)(void *))(*(_QWORD *)v179 + 56))(v179);
  else
    v180 = *((_DWORD *)v178 + 15);
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v201, v180);
  *(_QWORD *)&v201 = off_1E78B8518;
  v207 = BYTE8(v201);
  v206 = (void (**)(SDPMediaFormatDTMFParams *__hidden))off_1E78ED0A8;
  if (SHIBYTE(v203[0]) < 0)
  {
    std::string::__init_copy_ctor_external(&v208, (const std::string::value_type *)v202, *((std::string::size_type *)&v202 + 1));
  }
  else
  {
    *(_OWORD *)&v208.__r_.__value_.__l.__data_ = v202;
    v208.__r_.__value_.__r.__words[2] = v203[0];
  }
  v209 = v203[1];
  v206 = off_1E78B8518;
  v220 = 3;
  SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)&v221, (uint64_t)&v206);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v206);
  *(_QWORD *)&v201 = off_1E78ED0A8;
  if (SHIBYTE(v203[0]) < 0)
    operator delete((void *)v202);
  v181 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>((uint64_t)this + 40, 0, 0, (uint64_t)&v221);
  v181[1] = (char *)this + 40;
  v182 = *((_QWORD *)this + 5);
  *v181 = v182;
  *(_QWORD *)(v182 + 8) = v181;
  *((_QWORD *)this + 5) = v181;
  ++*((_QWORD *)this + 7);
  *(_QWORD *)&v221 = &off_1E78E2080;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v227);
  SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v222);
}

void sub_1BF17E9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;

  if (a72 < 0)
    operator delete(__p);
  if (a46 < 0)
    operator delete(a41);
  _Unwind_Resume(a1);
}

void SDPModel::setDirection(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[4];
  char v7;

  v3 = a1 + 392;
  SDPMediaDirection::SDPMediaDirection((uint64_t)v6, a2);
  v4 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaDirection>(v3, 0, 0, (uint64_t)v6);
  v4[1] = v3;
  v5 = *(_QWORD *)(a1 + 392);
  *v4 = v5;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(a1 + 392) = v4;
  ++*(_QWORD *)(a1 + 408);
  v6[0] = off_1E78ED0A8;
  if (v7 < 0)
    operator delete((void *)v6[2]);
}

void sub_1BF17ED18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SDPSession::initializeLazuliTemplateSDP(SipStack **a1)
{
  SipStack *v1;
  int v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  SipStack *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::string v20;
  std::string v21;
  void *__p;
  char v23;
  void *v24[2];
  char v25;
  void *v26;
  std::__shared_weak_count *v27;
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v29 = 0;
  v30 = 0;
  v1 = *a1;
  if (*a1)
  {
    SipStack::prefs(*a1);
    v3 = *((unsigned __int8 *)*a1 + 2665);
    SipStack::getTlsFingerprint(*a1, &v21);
    SDPTemplateBuilder::createLazuliSDPTemplate(v3 != 0, (__int128 *)&v21, (uint64_t *)&v26);
    v5 = (uint64_t)v26;
    v4 = v27;
    v26 = 0;
    v27 = 0;
    v29 = v5;
    v30 = v4;
    if (v23 < 0)
      operator delete(__p);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v26, "sdp.session");
    std::string::basic_string[abi:ne180100]<0>(v24, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v26, (uint64_t)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Initialized lazuli template SDP (", 33);
    *(_BYTE *)(v6 + 17) = 0;
    SipStack::carrierIdentifier(*a1, &v20);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 32))(v6, &v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"):", 2);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (v25 < 0)
      operator delete(v24[0]);
    if (v28 < 0)
      operator delete(v26);
    v7 = *a1;
    v18 = v5;
    v19 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)v7 + 537, &v18);
    v10 = v19;
    if (v19)
    {
      v11 = (unint64_t *)&v19->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v26, "sdp.session");
    std::string::basic_string[abi:ne180100]<0>(v24, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v13 = ImsLogger::error(ims::_logger, (uint64_t)&v26, (uint64_t)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"No valid SIP stack", 18);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    if (v25 < 0)
      operator delete(v24[0]);
    if (v28 < 0)
      operator delete(v26);
  }
  v14 = v30;
  if (v30)
  {
    v15 = (unint64_t *)&v30->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v1 != 0;
}

void sub_1BF17F014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (*(char *)(v29 - 65) < 0)
    operator delete(*(void **)(v29 - 88));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v29 - 64);
  _Unwind_Resume(a1);
}

void SDPSession::setModelPath(uint64_t a1, uint64_t a2, unsigned int a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  SDPMedia *v10;
  char *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  void *v15[2];
  __int128 v16;
  void (**v17)(LazuliRouteSet *__hidden);
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];
  _BYTE v22[128];
  uint64_t v23;
  std::__shared_weak_count *v24;

  v4 = *(std::__shared_weak_count **)(a1 + 128);
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    v24 = v7;
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)(a1 + 120);
      v23 = v9;
      if (v9)
      {
        v10 = *(SDPMedia **)(*(_QWORD *)a2 + 416);
        memset(v22, 0, sizeof(v22));
        memset(v21, 0, sizeof(v21));
        SipHost::SipHost((uint64_t)&v17, (std::string *)(a1 + 72));
        LazuliUri::LazuliUri((LazuliUri *)v21, (const SipHost *)&v17, *(_BYTE *)(v9 + 2665));
        SipHost::~SipHost((void **)&v17);
        LazuliUri::setHostPort((LazuliUri *)v21, a3);
        std::string::operator=((std::string *)v22, (const std::string *)(a1 + 1960));
        v17 = &off_1E78EF3C0;
        v18 = 0u;
        v19 = 0u;
        v20 = 0u;
        v15[0] = 0;
        v15[1] = 0;
        __p[0] = &off_1E78B82D8;
        __p[1] = v15;
        LOWORD(v16) = 256;
        LazuliRouteSet::addHop((LazuliRouteSet *)&v17, (const LazuliUri *)v21, 0, 0, (const SipParameterMap *)__p);
        __p[0] = &off_1E78B82D8;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p[1], (_QWORD *)v15[0]);
        SDPMedia::setPath(v10, (const LazuliRouteSet *)&v17);
        SDPMedia::setPort(v10, a3);
        if (*(_BYTE *)(a1 + 146))
          v11 = "active";
        else
          v11 = "passive";
        std::string::basic_string[abi:ne180100]<0>(__p, v11);
        SDPMedia::setSetupState(v10, (__int128 *)__p);
        if (SHIBYTE(v15[0]) < 0)
          operator delete(__p[0]);
        if (*(_BYTE *)(v9 + 2665))
        {
          *(_OWORD *)v15 = 0u;
          v16 = 0u;
          *(_OWORD *)__p = 0u;
          SipStack::getTlsFingerprint((SipStack *)v9, (std::string *)__p);
          SDPMedia::setFingerprint(v10, (__int128 *)__p, (__int128 *)&v15[1]);
          if (SHIBYTE(v16) < 0)
            operator delete(v15[1]);
          if (SHIBYTE(v15[0]) < 0)
            operator delete(__p[0]);
        }
        LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)&v17);
        LazuliUri::~LazuliUri((LazuliUri *)v21);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1BF17F2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  ims::AccessNetwork::~AccessNetwork(&__p);
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)&a19);
  LazuliUri::~LazuliUri((LazuliUri *)&a26);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v26 - 80);
  _Unwind_Resume(a1);
}

uint64_t SDPSession::getAMRPacketAlignmentFromString(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v7;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  int v12;

  v1 = *(unsigned __int8 *)(a1 + 23);
  v2 = (char)v1;
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (v1 == 22)
  {
    if (v2 >= 0)
      v9 = (unint64_t *)a1;
    else
      v9 = *(unint64_t **)a1;
    v10 = 0x62616E6477696474;
    v11 = bswap64(*v9);
    if (v11 == 0x62616E6477696474
      && (v10 = 0x6845666669636965, v11 = bswap64(v9[1]), v11 == 0x6845666669636965)
      && (v10 = 0x69656E744F6E6C79, v11 = bswap64(*(unint64_t *)((char *)v9 + 14)), v11 == 0x69656E744F6E6C79))
    {
      v12 = 0;
    }
    else if (v11 < v10)
    {
      v12 = -1;
    }
    else
    {
      v12 = 1;
    }
    if (v12)
      return 2;
    else
      return 1;
  }
  else if (v1 == 16)
  {
    if (v2 >= 0)
      v3 = (uint64_t *)a1;
    else
      v3 = *(uint64_t **)a1;
    v5 = *v3;
    v4 = v3[1];
    v7 = v5 != 0x696C41746574636FLL || v4 != 0x796C6E4F64656E67;
    return (2 * v7);
  }
  else
  {
    return 2;
  }
}

void SDPSession::addMediaStreamForType(uint64_t a1, int a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  uint64_t **v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  _DWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;

  v29 = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 1936);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v29 = v5;
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 1928);
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = 0;
LABEL_6:
  v7 = (uint64_t **)(a1 + 1912);
  v8 = *(_QWORD *)(a1 + 1912);
  if (!v8)
    goto LABEL_19;
  v9 = a1 + 1912;
  do
  {
    v10 = *(_DWORD *)(v8 + 32);
    v11 = v10 < a2;
    if (v10 >= a2)
      v12 = (uint64_t *)v8;
    else
      v12 = (uint64_t *)(v8 + 8);
    if (!v11)
      v9 = v8;
    v8 = *v12;
  }
  while (*v12);
  if ((uint64_t **)v9 == v7 || *(_DWORD *)(v9 + 32) > a2 || !*(_QWORD *)(v9 + 40))
  {
LABEL_19:
    if ((a2 == 4 || a2 == 2) && v6)
    {
      v13 = operator new();
      v14 = v13;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
        *(_QWORD *)v13 = &off_1E78BA818;
        *(_QWORD *)(v13 + 8) = v6 + 72;
        *(_QWORD *)(v13 + 16) = v6;
        *(_QWORD *)(v13 + 24) = v5;
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v18 = __ldxr(p_shared_weak_owners);
        while (__stxr(v18 + 1, p_shared_weak_owners));
      }
      else
      {
        *(_QWORD *)v13 = &off_1E78BA818;
        *(_QWORD *)(v13 + 8) = v6 + 72;
        *(_QWORD *)(v13 + 16) = v6;
        *(_QWORD *)(v13 + 24) = 0;
      }
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 40) = 0;
      *(_DWORD *)(v13 + 48) = a2;
      *(_DWORD *)(v13 + 52) = 2;
      *(_WORD *)(v13 + 56) = 0;
      v19 = (uint64_t **)(a1 + 1912);
      v20 = *(uint64_t **)(a1 + 1912);
      if (v20)
      {
        do
        {
          while (1)
          {
            v19 = (uint64_t **)v20;
            v21 = *((_DWORD *)v20 + 8);
            if (v21 <= a2)
              break;
            v20 = *v19;
            v7 = v19;
            if (!*v19)
              goto LABEL_35;
          }
          if (v21 >= a2)
          {
            v24 = v19;
            goto LABEL_38;
          }
          v20 = v19[1];
        }
        while (v20);
        v7 = v19 + 1;
      }
LABEL_35:
      v24 = operator new(0x30uLL);
      v24[8] = a2;
      *((_QWORD *)v24 + 5) = 0;
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = v19;
      *v7 = (uint64_t *)v24;
      v22 = **(_QWORD **)(a1 + 1904);
      v23 = (uint64_t *)v24;
      if (v22)
      {
        *(_QWORD *)(a1 + 1904) = v22;
        v23 = *v7;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1912), v23);
      ++*(_QWORD *)(a1 + 1920);
LABEL_38:
      *((_QWORD *)v24 + 5) = v14;
      if (v5)
      {
        v25 = (unint64_t *)&v5->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
  if (v29)
  {
    v27 = (unint64_t *)&v29->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_1BF17F6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t SDPSession::handleLazuliOfferAnswer(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  SipStack *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  void (***v29)(_QWORD);
  void (***v30)(_QWORD);
  void (***v31)(_QWORD);
  void (***v32)(_QWORD);
  void (**v33)(_QWORD);
  BOOL v34;
  uint64_t v35;
  int *v36;
  int *i;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  const char *v42;
  const char *v43;
  size_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  void *__p[2];
  char v53;
  void *v54[2];
  char v55;
  int *v56;
  int *v57;
  uint64_t v58;
  uint64_t v59[2];
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  __int128 *v64[34];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  SipStack *v71;
  std::__shared_weak_count *v72;

  v5 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v5)
    return 0;
  v9 = std::__shared_weak_count::lock(v5);
  v72 = v9;
  if (!v9)
    return 0;
  v10 = v9;
  v11 = *(SipStack **)(a1 + 120);
  v71 = v11;
  if (!v11)
  {
    v25 = 0;
LABEL_75:
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v50 = __ldaxr(p_shared_owners);
    while (__stlxr(v50 - 1, p_shared_owners));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return v25;
  }
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  memset(v64, 0, sizeof(v64));
  v12 = *a3;
  if (*a3)
  {
    v13 = a2[1];
    v62 = *a2;
    v63 = (std::__shared_weak_count *)v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v12 = *a3;
    }
    v16 = (std::__shared_weak_count *)a3[1];
    v60 = v12;
    v61 = v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    SipStack::prefs(v11);
    SDPLazuliSettingsBuilder::createLazuliSettingsForOfferAnswer(a1 + 1464, &v62, &v60, (SDPMediaLazuliSettings *)v64);
    v19 = v61;
    if (v61)
    {
      v20 = (unint64_t *)&v61->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v63;
    if (v63)
    {
      v23 = (unint64_t *)&v63->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      goto LABEL_29;
    }
  }
  else
  {
    v22 = (std::__shared_weak_count *)a2[1];
    v59[0] = *a2;
    v59[1] = (uint64_t)v22;
    if (v22)
    {
      v26 = (unint64_t *)&v22->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    SipStack::prefs(v11);
    SDPLazuliSettingsBuilder::createLazuliSettingsForOffer(a1 + 1464, v59, (SDPMediaLazuliSettings *)v64);
    if (v22)
    {
      v28 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v28);
      while (__stlxr(v24 - 1, v28));
LABEL_29:
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  v29 = *(void (****)(_QWORD))(a1 + 1872);
  v30 = *(void (****)(_QWORD))(a1 + 1864);
  if (v29 != v30)
  {
    v31 = v29 - 25;
    v32 = v29 - 25;
    do
    {
      v33 = *v32;
      v32 -= 25;
      (*v33)(v31);
      v34 = v31 == v30;
      v31 = v32;
    }
    while (!v34);
  }
  *(_QWORD *)(a1 + 1872) = v30;
  v35 = *a3;
  if (!*a3)
    v35 = *a2;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  std::vector<SDPMedia>::__init_with_size[abi:ne180100]<SDPMedia*,SDPMedia*>(&v56, *(_QWORD *)(v35 + 416), *(_QWORD *)(v35 + 424), 0x8F5C28F5C28F5C29 * ((uint64_t)(*(_QWORD *)(v35 + 424) - *(_QWORD *)(v35 + 416)) >> 3));
  v36 = v56;
  for (i = v57; v36 != i; v36 += 50)
  {
    SDPMedia::SDPMedia((SDPMedia *)v54, (const SDPMedia *)v36, 0);
    v38 = *(_QWORD *)(a1 + 1872);
    if (v38 >= *(_QWORD *)(a1 + 1880))
    {
      v39 = std::vector<SDPMedia>::__emplace_back_slow_path<SDPMedia>((uint64_t *)(a1 + 1864), (const SDPMedia *)v54);
    }
    else
    {
      SDPMedia::SDPMedia(*(SDPMedia **)(a1 + 1872), (const SDPMedia *)v54);
      v39 = v38 + 200;
      *(_QWORD *)(a1 + 1872) = v38 + 200;
    }
    *(_QWORD *)(a1 + 1872) = v39;
    SDPMedia::~SDPMedia((SDPMedia *)v54);
    SDPSession::addMediaStreamForType(a1, v36[3]);
  }
  std::string::basic_string[abi:ne180100]<0>(v54, "sdp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v40 = ImsLogger::info(ims::_logger, (uint64_t)v54, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)"SDPSession::handleLazuliOfferAnswer: we have ", 45);
  *(_BYTE *)(v40 + 17) = 0;
  if (*a2)
    v41 = "both an OFFER and ANSWER";
  else
    v41 = "an ANSWER";
  v42 = "an OFFER";
  if (!*a2)
    v42 = "nothing";
  if (*a3)
    v43 = v41;
  else
    v43 = v42;
  v44 = strlen(v43);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)v43, v44);
  *(_BYTE *)(v40 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v40 + 17) = 0;
  if (v53 < 0)
    operator delete(__p[0]);
  if (v55 < 0)
    operator delete(v54[0]);
  if (BYTE8(v70) && (*((unsigned int (**)(__int128 **))v64[0] + 3))(v64))
  {
    v45 = *(unsigned __int8 *)(a1 + 1856);
    if (*(_BYTE *)(a1 + 1856))
    {
      if (!BYTE8(v70))
        std::__throw_bad_optional_access[abi:ne180100]();
      if ((*((unsigned int (**)(__int128 **, uint64_t))v64[0] + 4))(v64, a1 + 1496))
        v25 = 2;
      else
        v25 = 1;
      v45 = *(unsigned __int8 *)(a1 + 1856);
    }
    else
    {
      v25 = 2;
    }
    if (v45 == BYTE8(v70))
    {
      if (v45)
      {
        SDPMediaSettings::operator=(a1 + 1496, (uint64_t)v64);
        if ((__int128 **)(a1 + 1496) != v64)
        {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 1776), *((std::string **)&v65 + 1), (__int128 *)v66, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - *((_QWORD *)&v65 + 1)) >> 3));
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 1800), (std::string *)v67, *((__int128 **)&v67 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v67 + 1) - v67) >> 3));
        }
        std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)(a1 + 1824), *((uint64_t *)&v68 + 1), v69);
        std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)(a1 + 1840), *((uint64_t *)&v69 + 1), v70);
      }
    }
    else if (v45)
    {
      SDPMediaLazuliSettings::~SDPMediaLazuliSettings((SDPMediaLazuliSettings *)(a1 + 1496));
      *(_BYTE *)(a1 + 1856) = 0;
    }
    else
    {
      SDPMediaLazuliSettings::SDPMediaLazuliSettings((SDPMediaLazuliSettings *)(a1 + 1496), v64);
      *(_BYTE *)(a1 + 1856) = 1;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v54, "sdp.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v46 = ImsLogger::error(ims::_logger, (uint64_t)v54, (uint64_t)__p);
    v47 = v46;
    if (BYTE8(v70))
      v48 = "Invalid";
    else
      v48 = "Missing";
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v46 + 8), (uint64_t)v48, 7);
    *(_BYTE *)(v47 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v47 + 8), (uint64_t)" lazuli settings!", 17);
    *(_BYTE *)(v47 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v47 + 17) = 0;
    if (v53 < 0)
      operator delete(__p[0]);
    if (v55 < 0)
      operator delete(v54[0]);
    v25 = 0;
  }
  if (*(_BYTE *)(a1 + 1856))
    *(_QWORD *)(a1 + 1592) = a4;
  v54[0] = &v56;
  std::vector<SDPMedia>::__destroy_vector::operator()[abi:ne180100]((void ***)v54);
  if (BYTE8(v70))
    SDPMediaLazuliSettings::~SDPMediaLazuliSettings((SDPMediaLazuliSettings *)v64);
  v10 = v72;
  if (v72)
    goto LABEL_75;
  return v25;
}

void sub_1BF17FCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  uint64_t v50;

  if (a18 < 0)
    operator delete(__p);
  __p = &a41;
  std::vector<SDPMedia>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (LOBYTE(STACK[0x298]))
    SDPMediaLazuliSettings::~SDPMediaLazuliSettings((SDPMediaLazuliSettings *)&a50);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v50 - 96);
  _Unwind_Resume(a1);
}

uint64_t SDPSession::handleOfferAnswer(uint64_t a1, SDPModel **a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  SipStack *v11;
  SDPModel *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  SDPMedia *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  SDPModel *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  SDPMedia *v29;
  unint64_t *v30;
  void (***v31)(_QWORD);
  void (***v32)(_QWORD);
  void (***v33)(_QWORD);
  void (***v34)(_QWORD);
  void (**v35)(_QWORD);
  BOOL v36;
  uint64_t v37;
  int *v38;
  int *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  const char *v44;
  const char *v45;
  size_t v46;
  uint64_t i;
  SDPModel *v48;
  std::__shared_weak_count *v49;
  SDPModel *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  SDPMedia *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  SDPMedia *v60;
  __n128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  int v72;
  int v73;
  const void *v74;
  size_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  int v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  const void *v88;
  size_t v89;
  void *v90[2];
  char v91;
  void *v92[2];
  char v93;
  SDPModel *v94;
  std::__shared_weak_count *v95;
  SDPModel *v96;
  std::__shared_weak_count *v97;
  SDPModel *v98;
  std::__shared_weak_count *v99;
  void *__p;
  void *v101;
  uint64_t v102;
  char v103;
  void *v104[2];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  void *__s2[2];
  __int128 v120;
  _OWORD v121[2];
  SDPMedia *v122;
  SDPMedia *v123;
  uint64_t v124;
  SDPModel *v125[2];
  SDPModel *v126;
  std::__shared_weak_count *v127;
  SDPModel *v128;
  unint64_t *v129;
  _OWORD v130[15];
  void *v131[2];
  __int128 v132;
  _OWORD v133[2];
  __int128 v134;
  _OWORD v135[7];
  uint64_t v136;
  SipStack *v137;
  std::__shared_weak_count *v138;

  v5 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v5)
    return 0;
  v9 = std::__shared_weak_count::lock(v5);
  v138 = v9;
  if (!v9)
    return 0;
  v10 = v9;
  v11 = *(SipStack **)(a1 + 120);
  v137 = v11;
  if (!v11)
  {
    v26 = 0;
LABEL_163:
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v82 = __ldaxr(p_shared_owners);
    while (__stlxr(v82 - 1, p_shared_owners));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return v26;
  }
  v136 = 0;
  memset(v135, 0, sizeof(v135));
  v134 = 0u;
  memset(v133, 0, sizeof(v133));
  v132 = 0u;
  *(_OWORD *)v131 = 0u;
  memset(v130, 0, sizeof(v130));
  v12 = *(SDPModel **)a3;
  if (*(_QWORD *)a3)
  {
    v13 = (unint64_t *)a2[1];
    v128 = *a2;
    v129 = v13;
    if (v13)
    {
      v14 = v13 + 1;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v12 = *(SDPModel **)a3;
    }
    v16 = *(std::__shared_weak_count **)(a3 + 8);
    v126 = v12;
    v127 = v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v19 = (SDPMedia *)SipStack::prefs(v11);
    SDPAudioSettingsBuilder::createAudioSettingsForOfferAnswer(a1 + 1376, (uint64_t *)&v128, &v126, v19, (SDPMediaAudioSettings *)v130);
    v20 = v127;
    if (v127)
    {
      v21 = (unint64_t *)&v127->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (SDPModel *)v129;
    if (v129)
    {
      v24 = v129 + 1;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      goto LABEL_29;
    }
  }
  else
  {
    v23 = a2[1];
    v125[0] = *a2;
    v125[1] = v23;
    if (v23)
    {
      v27 = (unint64_t *)((char *)v23 + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v29 = (SDPMedia *)SipStack::prefs(v11);
    SDPAudioSettingsBuilder::createAudioSettingsForOffer(a1 + 1376, v125, v29, (unint64_t)v130);
    if (v23)
    {
      v30 = (unint64_t *)((char *)v23 + 8);
      do
        v25 = __ldaxr(v30);
      while (__stlxr(v25 - 1, v30));
LABEL_29:
      if (!v25)
      {
        (*(void (**)(SDPModel *))(*(_QWORD *)v23 + 16))(v23);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v23);
      }
    }
  }
  v31 = *(void (****)(_QWORD))(a1 + 1872);
  v32 = *(void (****)(_QWORD))(a1 + 1864);
  if (v31 != v32)
  {
    v33 = v31 - 25;
    v34 = v31 - 25;
    do
    {
      v35 = *v34;
      v34 -= 25;
      (*v35)(v33);
      v36 = v33 == v32;
      v33 = v34;
    }
    while (!v36);
  }
  *(_QWORD *)(a1 + 1872) = v32;
  v37 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
    v37 = (uint64_t)*a2;
  v123 = 0;
  v122 = 0;
  v124 = 0;
  std::vector<SDPMedia>::__init_with_size[abi:ne180100]<SDPMedia*,SDPMedia*>(&v122, *(_QWORD *)(v37 + 416), *(_QWORD *)(v37 + 424), 0x8F5C28F5C28F5C29 * ((uint64_t)(*(_QWORD *)(v37 + 424) - *(_QWORD *)(v37 + 416)) >> 3));
  v38 = (int *)v122;
  v39 = (int *)v123;
  if (v122 != v123)
  {
    do
    {
      SDPMedia::SDPMedia((SDPMedia *)v104, (const SDPMedia *)v38, 0);
      v40 = *(_QWORD *)(a1 + 1872);
      if (v40 >= *(_QWORD *)(a1 + 1880))
      {
        v41 = std::vector<SDPMedia>::__emplace_back_slow_path<SDPMedia>((uint64_t *)(a1 + 1864), (const SDPMedia *)v104);
      }
      else
      {
        SDPMedia::SDPMedia(*(SDPMedia **)(a1 + 1872), (const SDPMedia *)v104);
        v41 = v40 + 200;
        *(_QWORD *)(a1 + 1872) = v40 + 200;
      }
      *(_QWORD *)(a1 + 1872) = v41;
      SDPMedia::~SDPMedia((SDPMedia *)v104);
      SDPSession::addMediaStreamForType(a1, v38[3]);
      v38 += 50;
    }
    while (v38 != v39);
  }
  std::string::basic_string[abi:ne180100]<0>(v104, "sdp.session");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v42 = ImsLogger::info(ims::_logger, (uint64_t)v104, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)"SDPSession::handleOfferAnswer: we have ", 39);
  *(_BYTE *)(v42 + 17) = 0;
  if (*a2)
    v43 = "both an OFFER and ANSWER";
  else
    v43 = "an ANSWER";
  v44 = "an OFFER";
  if (!*a2)
    v44 = "nothing";
  if (*(_QWORD *)a3)
    v45 = v43;
  else
    v45 = v44;
  v46 = strlen(v45);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)v45, v46);
  *(_BYTE *)(v42 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v42 + 17) = 0;
  if (SHIBYTE(v102) < 0)
    operator delete(__p);
  if (SBYTE7(v105) < 0)
    operator delete(v104[0]);
  memset(v121, 0, sizeof(v121));
  *(_OWORD *)__s2 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  v107 = 0u;
  v108 = 0u;
  v105 = 0u;
  v106 = 0u;
  *(_OWORD *)v104 = 0u;
  if (*(_DWORD *)(a1 + 136))
  {
    for (i = *((_QWORD *)*a2 + 52); ; i += 200)
    {
      if (i == *((_QWORD *)*a2 + 53))
        goto LABEL_89;
      if (*(_DWORD *)(i + 12) == 4)
        break;
    }
    v48 = *(SDPModel **)a3;
    if (*(_QWORD *)a3)
    {
      v49 = (std::__shared_weak_count *)a2[1];
      v98 = *a2;
      v99 = v49;
      v50 = v48;
      if (v49)
      {
        v51 = (unint64_t *)&v49->__shared_owners_;
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
        v50 = *(SDPModel **)a3;
      }
      v53 = *(std::__shared_weak_count **)(a3 + 8);
      v96 = v50;
      v97 = v53;
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      v56 = (SDPMedia *)SipStack::prefs(v137);
      SDPTTYSettingsBuilder::createTTYSettingsForOfferAnswer(a1 + 1408, (uint64_t *)&v98, &v96, v56, (SDPMediaSettings *)&__p);
    }
    else
    {
      v57 = (std::__shared_weak_count *)a2[1];
      v94 = *a2;
      v95 = v57;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      v60 = (SDPMedia *)SipStack::prefs(v137);
      SDPTTYSettingsBuilder::createTTYSettingsForOffer(a1 + 1408, &v94, v60, (uint64_t)&__p);
    }
    v61.n128_f64[0] = std::__optional_storage_base<SDPMediaTTYSettings,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<SDPMediaTTYSettings,false>>((SDPMediaSettings *)v104, (SDPMediaSettings *)&__p);
    if (v103)
      SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)&__p);
    if (!v48)
    {
      v65 = v95;
      if (!v95)
        goto LABEL_89;
      v68 = (unint64_t *)&v95->__shared_owners_;
      do
        v67 = __ldaxr(v68);
      while (__stlxr(v67 - 1, v68));
      goto LABEL_87;
    }
    v62 = v97;
    if (v97)
    {
      v63 = (unint64_t *)&v97->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v62->__on_zero_shared)(v62, v61);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v65 = v99;
    if (v99)
    {
      v66 = (unint64_t *)&v99->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
LABEL_87:
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v65->__on_zero_shared)(v65, v61);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
  }
LABEL_89:
  if ((_BYTE)v136 && (*(unsigned int (**)(_OWORD *))(*(_QWORD *)&v130[0] + 24))(v130))
  {
    if (!*(_BYTE *)(a1 + 584))
      goto LABEL_187;
    if (!(_BYTE)v136)
      std::__throw_bad_optional_access[abi:ne180100]();
    if (!(*(unsigned int (**)(_OWORD *, uint64_t))(*(_QWORD *)&v130[0] + 32))(v130, a1 + 152))
    {
      v26 = 1;
    }
    else
    {
LABEL_187:
      if (*(_QWORD *)a3)
      {
        v26 = 2;
      }
      else
      {
        v84 = *(unsigned __int8 *)(a1 + 584);
        if (!*(_BYTE *)(a1 + 584))
        {
          v26 = 2;
LABEL_170:
          if (v84 == v136)
          {
            if (v84)
            {
              SDPMediaSettings::operator=(a1 + 152, (uint64_t)v130);
              std::string::operator=((std::string *)(a1 + 432), (const std::string *)((char *)v133 + 8));
              *(_QWORD *)(a1 + 456) = v134;
              *(_QWORD *)(a1 + 461) = *(_QWORD *)((char *)&v134 + 5);
              v85 = *(_OWORD *)((char *)&v135[1] + 8);
              *(_OWORD *)(a1 + 480) = *(_OWORD *)((char *)v135 + 8);
              *(_OWORD *)(a1 + 496) = v85;
              *(_WORD *)(a1 + 576) = WORD4(v135[6]);
              v86 = *(_OWORD *)((char *)&v135[5] + 8);
              *(_OWORD *)(a1 + 544) = *(_OWORD *)((char *)&v135[4] + 8);
              *(_OWORD *)(a1 + 560) = v86;
              v87 = *(_OWORD *)((char *)&v135[3] + 8);
              *(_OWORD *)(a1 + 512) = *(_OWORD *)((char *)&v135[2] + 8);
              *(_OWORD *)(a1 + 528) = v87;
            }
          }
          else if (v84)
          {
            SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)(a1 + 152));
            *(_BYTE *)(a1 + 584) = 0;
          }
          else
          {
            SDPMediaAudioSettings::SDPMediaAudioSettings((SDPMediaAudioSettings *)(a1 + 152), (const SDPMediaAudioSettings *)v130);
            *(_BYTE *)(a1 + 584) = 1;
          }
          goto LABEL_104;
        }
        v26 = 2;
        if (*(_BYTE *)(a1 + 424))
        {
          if (LOBYTE(v133[0]))
          {
            v88 = *(const void **)(a1 + 392);
            v89 = *(_QWORD *)(a1 + 400) - (_QWORD)v88;
            if (v89 != (char *)v131[1] - (char *)v131[0] || memcmp(v88, v131[0], v89))
              SDPSession::generate_key_and_salt(a1, 2);
          }
        }
      }
    }
    v84 = *(unsigned __int8 *)(a1 + 584);
    goto LABEL_170;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "sdp.session");
  std::string::basic_string[abi:ne180100]<0>(v92, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v69 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)v92);
  v70 = v69;
  if ((_BYTE)v136)
    v71 = "Invalid";
  else
    v71 = "Missing";
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v69 + 8), (uint64_t)v71, 7);
  *(_BYTE *)(v70 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v70 + 8), (uint64_t)" audio settings!", 16);
  *(_BYTE *)(v70 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v70 + 64))(v70, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v70 + 17) = 0;
  if (v93 < 0)
    operator delete(v92[0]);
  if (SHIBYTE(v102) < 0)
    operator delete(__p);
  v26 = 0;
LABEL_104:
  if (!BYTE8(v121[1]))
    goto LABEL_126;
  if (!*(_BYTE *)(a1 + 1328))
    goto LABEL_188;
  v72 = (*((uint64_t (**)(void **, uint64_t))v104[0] + 4))(v104, a1 + 1032) ^ 1;
  if ((_DWORD)v26 == 2)
    LOBYTE(v72) = 0;
  if ((v72 & 1) == 0)
  {
LABEL_188:
    if (*(_QWORD *)a3)
    {
      v26 = 2;
    }
    else
    {
      v73 = *(unsigned __int8 *)(a1 + 1328);
      if (!*(_BYTE *)(a1 + 1328))
      {
        v26 = 2;
        goto LABEL_112;
      }
      v26 = 2;
      if (*(_BYTE *)(a1 + 1304))
      {
        if (LOBYTE(v121[0]))
        {
          v74 = *(const void **)(a1 + 1272);
          v75 = *(_QWORD *)(a1 + 1280) - (_QWORD)v74;
          if (v75 != (char *)__s2[1] - (char *)__s2[0] || memcmp(v74, __s2[0], v75))
            SDPSession::generate_key_and_salt(a1, 4);
        }
      }
    }
  }
  v73 = *(unsigned __int8 *)(a1 + 1328);
LABEL_112:
  if (v73 == BYTE8(v121[1]))
  {
    if (v73)
    {
      SDPMediaSettings::operator=(a1 + 1032, (uint64_t)v104);
      *(_QWORD *)(a1 + 1312) = *((_QWORD *)&v121[0] + 1);
      *(_QWORD *)(a1 + 1317) = *(_QWORD *)((char *)v121 + 13);
    }
  }
  else if (v73)
  {
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)(a1 + 1032));
    *(_BYTE *)(a1 + 1328) = 0;
  }
  else
  {
    SDPMediaSettings::SDPMediaSettings((SDPMediaSettings *)(a1 + 1032), (const SDPMediaSettings *)v104);
    *(_QWORD *)(a1 + 1032) = &off_1E78BE690;
    *(_QWORD *)(a1 + 1312) = *((_QWORD *)&v121[0] + 1);
    *(_DWORD *)(a1 + 1320) = v121[1];
    *(_BYTE *)(a1 + 1324) = BYTE4(v121[1]);
    *(_BYTE *)(a1 + 1328) = 1;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 1032) + 24))(a1 + 1032) & 1) == 0)
    SDPSession::setTextMediaSessionMode(a1, 0);
LABEL_126:
  v76 = *(_QWORD *)(a1 + 1888);
  if (!v76 || *(_DWORD *)(v76 + 340) != 2)
    goto LABEL_156;
  __p = 0;
  v101 = 0;
  v102 = 0;
  if (*(_BYTE *)(a1 + 584))
  {
    if (SDPPayloadTypeSanitizer::sanitizePayloadType((SDPPayloadTypeSanitizer *)&__p, *(unsigned __int16 *)(a1 + 180)) != *(unsigned __int16 *)(a1 + 180))
    {
      std::string::basic_string[abi:ne180100]<0>(v92, "sdp.session");
      std::string::basic_string[abi:ne180100]<0>(v90, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v77 = ImsLogger::error(ims::_logger, (uint64_t)v92, (uint64_t)v90);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v77 + 8), (uint64_t)"Audio settings RX payload type failed sanitization: ", 52);
      *(_BYTE *)(v77 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v77 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v77 + 64))(v77, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v77 + 17) = 0;
      if (v91 < 0)
        operator delete(v90[0]);
      if (v93 < 0)
        operator delete(v92[0]);
    }
    if (SDPPayloadTypeSanitizer::sanitizePayloadType((SDPPayloadTypeSanitizer *)&__p, *(unsigned __int16 *)(a1 + 456)) == *(unsigned __int16 *)(a1 + 456))goto LABEL_141;
    std::string::basic_string[abi:ne180100]<0>(v92, "sdp.session");
    std::string::basic_string[abi:ne180100]<0>(v90, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v78 = ImsLogger::error(ims::_logger, (uint64_t)v92, (uint64_t)v90);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v78 + 8), (uint64_t)"Audio settings DTMF RX payload type failed sanitization: ", 57);
    *(_BYTE *)(v78 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v78 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v78 + 64))(v78, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v92, "sdp.session");
    std::string::basic_string[abi:ne180100]<0>(v90, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v78 = ImsLogger::error(ims::_logger, (uint64_t)v92, (uint64_t)v90);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v78 + 8), (uint64_t)"No audio settings found. The payload types used for the second audio settings will not be sanitized.", 100);
    *(_BYTE *)(v78 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v78 + 64))(v78, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(_BYTE *)(v78 + 17) = 0;
  if (v91 < 0)
    operator delete(v90[0]);
  if (v93 < 0)
    operator delete(v92[0]);
LABEL_141:
  if (*(_BYTE *)(a1 + 1328))
  {
    if (SDPPayloadTypeSanitizer::sanitizePayloadType((SDPPayloadTypeSanitizer *)&__p, *(unsigned __int16 *)(a1 + 1060)) != *(unsigned __int16 *)(a1 + 1060))
    {
      std::string::basic_string[abi:ne180100]<0>(v92, "sdp.session");
      std::string::basic_string[abi:ne180100]<0>(v90, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v79 = ImsLogger::error(ims::_logger, (uint64_t)v92, (uint64_t)v90);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v79 + 8), (uint64_t)"TTY settings RX payload type failed sanitization: ", 50);
      *(_BYTE *)(v79 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v79 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v79 + 64))(v79, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v79 + 17) = 0;
      if (v91 < 0)
        operator delete(v90[0]);
      if (v93 < 0)
        operator delete(v92[0]);
    }
    if (SDPPayloadTypeSanitizer::sanitizePayloadType((SDPPayloadTypeSanitizer *)&__p, *(unsigned __int16 *)(a1 + 1320)) != *(unsigned __int16 *)(a1 + 1320))
    {
      std::string::basic_string[abi:ne180100]<0>(v92, "sdp.session");
      std::string::basic_string[abi:ne180100]<0>(v90, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v80 = ImsLogger::error(ims::_logger, (uint64_t)v92, (uint64_t)v90);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v80 + 8), (uint64_t)"TTY settings redundant RX payload type failed sanitization: ", 60);
      *(_BYTE *)(v80 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v80 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v80 + 64))(v80, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v80 + 17) = 0;
      if (v91 < 0)
        operator delete(v90[0]);
      if (v93 < 0)
        operator delete(v92[0]);
    }
  }
  if (*(_BYTE *)(a1 + 1024))
  {
    SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)(a1 + 592));
    *(_BYTE *)(a1 + 1024) = 0;
  }
  if (__p)
  {
    v101 = __p;
    operator delete(__p);
  }
LABEL_156:
  if (*(_BYTE *)(a1 + 584))
    *(_QWORD *)(a1 + 248) = a4;
  if (BYTE8(v121[1]))
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)v104);
  v104[0] = &v122;
  std::vector<SDPMedia>::__destroy_vector::operator()[abi:ne180100]((void ***)v104);
  if ((_BYTE)v136)
    SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)v130);
  v10 = v138;
  if (v138)
    goto LABEL_163;
  return v26;
}

void sub_1BF180B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62)
{
  uint64_t v62;

  if (a17 < 0)
    operator delete(__p);
  if (a24)
    operator delete(a24);
  if (LOBYTE(STACK[0x2B8]))
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)&a62);
  a62 = &STACK[0x2C8];
  std::vector<SDPMedia>::__destroy_vector::operator()[abi:ne180100]((void ***)&a62);
  if (LOBYTE(STACK[0x4C0]))
    SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)&STACK[0x310]);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v62 - 96);
  _Unwind_Resume(a1);
}

uint64_t SDPPayloadTypeSanitizer::sanitizePayloadType(SDPPayloadTypeSanitizer *this, unsigned int a2)
{
  unsigned __int16 v2;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  unint64_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned __int16 *v15;
  char *v16;
  unsigned __int16 v17;

  if (a2 >= 0x60)
  {
    if (a2 > 0x7F)
    {
      return 255;
    }
    else
    {
      v4 = *(unsigned __int16 **)this;
      v5 = (unsigned __int16 *)*((_QWORD *)this + 1);
      v2 = a2;
      while (1)
      {
        v6 = v4;
        if (v4 != v5)
        {
          while (*v6 != v2)
          {
            if (++v6 == v5)
            {
              v6 = (unsigned __int16 *)*((_QWORD *)this + 1);
              break;
            }
          }
        }
        if (v6 == v5)
          break;
        if (((v2 + 1) & 0xFF80) != 0)
          v2 = 96;
        else
          ++v2;
        if (a2 == v2)
          return 255;
      }
      v7 = *((_QWORD *)this + 2);
      if ((unint64_t)v5 >= v7)
      {
        v9 = (char *)v5 - (char *)v4;
        if ((char *)v5 - (char *)v4 <= -3)
          std::vector<IMSCallInfo *>::__throw_length_error[abi:ne180100]();
        v10 = v9 >> 1;
        v11 = v7 - (_QWORD)v4;
        if (v11 <= (v9 >> 1) + 1)
          v12 = v10 + 1;
        else
          v12 = v11;
        if (v11 >= 0x7FFFFFFFFFFFFFFELL)
          v13 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
        {
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)this + 16, v13);
          v4 = *(unsigned __int16 **)this;
          v5 = (unsigned __int16 *)*((_QWORD *)this + 1);
        }
        else
        {
          v14 = 0;
        }
        v15 = (unsigned __int16 *)&v14[2 * v10];
        v16 = &v14[2 * v13];
        *v15 = v2;
        v8 = v15 + 1;
        while (v5 != v4)
        {
          v17 = *--v5;
          *--v15 = v17;
        }
        *(_QWORD *)this = v15;
        *((_QWORD *)this + 1) = v8;
        *((_QWORD *)this + 2) = v16;
        if (v4)
          operator delete(v4);
      }
      else
      {
        *v5 = v2;
        v8 = v5 + 1;
      }
      *((_QWORD *)this + 1) = v8;
    }
  }
  else
  {
    return (unsigned __int16)a2;
  }
  return v2;
}

void SDPSession::localSdp(SDPSession *this@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::string __p;
  _BYTE v17[304];
  void *v18[54];
  char v19;
  void *v20[2];
  char v21;
  __int128 v22;
  char v23;

  std::string::basic_string[abi:ne180100]<0>(&v22, "sdp.session");
  std::string::basic_string[abi:ne180100]<0>(v20, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v22, (uint64_t)v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"SDPSession::localSdp", 20);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v21 < 0)
    operator delete(v20[0]);
  if (v23 < 0)
    operator delete((void *)v22);
  std::__optional_copy_base<SDPMediaAudioSettings,false>::__optional_copy_base[abi:ne180100]((SDPMediaAudioSettings *)v18, (SDPSession *)((char *)this + 152));
  std::__optional_copy_base<SDPMediaTTYSettings,false>::__optional_copy_base[abi:ne180100]((SDPMediaSettings *)v17, (uint64_t)this + 1032);
  SDPModelBuilder::createSDP((uint64_t *)this + 167, (const SDPMediaAudioSettings *)v18, (uint64_t)v17, (const SDPMedia **)this + 233, a2, (SDPModel **)&v22);
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this, &v22);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v17[296])
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)v17);
  if (v19)
    SDPMediaAudioSettings::~SDPMediaAudioSettings(v18);
  v10 = *(_QWORD *)this;
  if (*((_BYTE *)this + 140))
  {
    v11 = *(_QWORD *)(v10 + 416);
    v12 = *(_QWORD *)(v10 + 424);
    if (v11 != v12)
    {
      do
      {
        if (*((char *)this + 95) < 0)
          std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
        else
          __p = *(std::string *)((_BYTE *)this + 3);
        SDPMedia::addCandidateAttribute(v11, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (!*(_QWORD *)(v11 + 192))
          *(_QWORD *)(v11 + 192) = *(_QWORD *)this;
        v11 += 200;
      }
      while (v11 != v12);
      v10 = *(_QWORD *)this;
    }
  }
  v13 = *((_QWORD *)this + 1);
  *a3 = v10;
  a3[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
}

void sub_1BF181054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,void *a50)
{
  if (a49)
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)&a12);
  if (LOBYTE(STACK[0x2F8]))
    SDPMediaAudioSettings::~SDPMediaAudioSettings(&a50);
  _Unwind_Resume(a1);
}

void SDPSession::localLazuliSdp(SDPSession *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[2];
  _BYTE v17[368];
  __int128 v18;

  v4 = (char *)this + 1440;
  std::__optional_copy_base<SDPMediaLazuliSettings,false>::__optional_copy_base[abi:ne180100]((SDPMediaLazuliSettings *)v17, (uint64_t)this + 1496);
  SDPLazuliBuilder::createSDP((uint64_t)v4, (uint64_t)v17, &v18);
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this, &v18);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v17[360])
    SDPMediaLazuliSettings::~SDPMediaLazuliSettings((SDPMediaLazuliSettings *)v17);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v16[0] = *(_QWORD *)this;
  v16[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  SDPSession::setModelPath((uint64_t)this, (uint64_t)v16, *((unsigned __int16 *)this + 72));
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = *((_QWORD *)this + 1);
  *a2 = *(_QWORD *)this;
  a2[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
}

void sub_1BF1811F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SDPSession::localTemplateSdp(SDPSession *this@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __int16 v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  BOOL v8;

  v4 = 255;
  if (*((_BYTE *)this + 584))
  {
    v5 = *((_WORD *)this + 90);
    *((_WORD *)this + 90) = 255;
    v4 = v5;
  }
  v6 = 255;
  if (*((_BYTE *)this + 1328))
  {
    v7 = *((_WORD *)this + 530);
    v8 = *((_BYTE *)this + 1324) != 0;
    *((_WORD *)this + 530) = 255;
    *((_BYTE *)this + 1324) = 1;
    v6 = v7;
  }
  else
  {
    v8 = 0;
  }
  *a3 = 0;
  a3[1] = 0;
  SDPSession::localSdp(this, a2, a3);
  if (*((_BYTE *)this + 584))
    *((_WORD *)this + 90) = v4;
  if (*((_BYTE *)this + 1328))
  {
    *((_WORD *)this + 530) = v6;
    *((_BYTE *)this + 1324) = v8;
  }
}

void SDPSession::createLocalSdpForFork(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v9;
  SipStack *v10;
  SDPModel *v11;
  unint64_t *v12;
  unint64_t v13;
  SDPMedia *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t i;
  SDPModel *v18;
  unint64_t *v19;
  unint64_t v20;
  SDPMedia *v21;
  __n128 v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _BYTE v27[304];
  void *v28[54];
  char v29;
  SDPModel *v30[2];
  _BYTE v31[304];
  _BYTE v32[288];
  __int128 v33;
  SDPModel *v34[2];
  void *v35[54];
  uint64_t v36;
  SipStack *v37;
  std::__shared_weak_count *v38;

  v37 = 0;
  v38 = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v6)
  {
    v9 = 0;
    goto LABEL_18;
  }
  v9 = std::__shared_weak_count::lock(v6);
  v38 = v9;
  if (!v9 || (v10 = *(SipStack **)(a1 + 120), (v37 = v10) == 0))
  {
LABEL_18:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    if (!v9)
      return;
    goto LABEL_39;
  }
  v36 = 0;
  memset(v35, 0, sizeof(v35));
  v11 = (SDPModel *)a3[1];
  v34[0] = *(SDPModel **)a3;
  v34[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)((char *)v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = (SDPMedia *)SipStack::prefs(v10);
  SDPAudioSettingsBuilder::createAudioSettingsForOffer(a1 + 1376, v34, v14, (unint64_t)v35);
  if (v11)
  {
    v15 = (unint64_t *)((char *)v11 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(SDPModel *))(*(_QWORD *)v11 + 16))(v11);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v11);
    }
  }
  v33 = 0u;
  memset(v32, 0, sizeof(v32));
  if (*(_DWORD *)(a1 + 136))
  {
    for (i = *(_QWORD *)(*a3 + 416); i != *(_QWORD *)(*a3 + 424); i += 200)
    {
      if (*(_DWORD *)(i + 12) == 4)
      {
        v18 = (SDPModel *)a3[1];
        v30[0] = *(SDPModel **)a3;
        v30[1] = v18;
        if (v18)
        {
          v19 = (unint64_t *)((char *)v18 + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        v21 = (SDPMedia *)SipStack::prefs(v37);
        SDPTTYSettingsBuilder::createTTYSettingsForOffer(a1 + 1408, v30, v21, (uint64_t)v31);
        v22.n128_f64[0] = std::__optional_storage_base<SDPMediaTTYSettings,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<SDPMediaTTYSettings,false>>((SDPMediaSettings *)v32, (SDPMediaSettings *)v31);
        if (v31[296])
          SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)v31);
        if (v18)
        {
          v23 = (unint64_t *)((char *)v18 + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            (*(void (**)(SDPModel *, __n128))(*(_QWORD *)v18 + 16))(v18, v22);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v18);
          }
        }
        break;
      }
    }
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  std::__optional_copy_base<SDPMediaAudioSettings,false>::__optional_copy_base[abi:ne180100]((SDPMediaAudioSettings *)v28, (const SDPMediaAudioSettings *)v35);
  std::__optional_copy_base<SDPMediaTTYSettings,false>::__optional_copy_base[abi:ne180100]((SDPMediaSettings *)v27, (uint64_t)v32);
  SDPModelBuilder::createSDP((uint64_t *)(a1 + 1336), (const SDPMediaAudioSettings *)v28, (uint64_t)v27, (const SDPMedia **)(*a3 + 416), a2, (SDPModel **)a4);
  if (v27[296])
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)v27);
  if (v29)
    SDPMediaAudioSettings::~SDPMediaAudioSettings(v28);
  if (BYTE8(v33))
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)v32);
  if ((_BYTE)v36)
    SDPMediaAudioSettings::~SDPMediaAudioSettings(v35);
  v9 = v38;
  if (v38)
  {
LABEL_39:
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BF18158C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (LOBYTE(STACK[0x428]))
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)&STACK[0x300]);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2F0]);
  if (LOBYTE(STACK[0x558]))
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)&STACK[0x430]);
  if (LOBYTE(STACK[0x720]))
    SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)&STACK[0x570]);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

void SDPSession::initializeOffer(const std::string *this)
{
  std::__shared_weak_count *size;
  SipStack *data;
  ImsPrefs *v4;
  void **EnableSDPCandidateAttributeKey;
  void *v6;
  std::string::value_type v7;
  std::string::pointer v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  ImsPrefs *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::string::size_type v16;
  const std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  int v20;
  int v21;
  std::string::size_type v23;
  std::string *v24;
  int data_low;
  int v26;
  _BOOL4 v28;
  std::string::pointer v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  int v33;
  ImsPrefs *v34;
  int v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::string::size_type v42;
  std::__shared_weak_count *v43;
  std::string v44;
  std::string::size_type v45;
  std::__shared_weak_count *v46;
  std::string v47;
  char v48;
  SipStack *v49;
  std::__shared_weak_count *v50;

  v49 = 0;
  v50 = 0;
  size = (std::__shared_weak_count *)this[5].__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_67;
  v50 = std::__shared_weak_count::lock(size);
  if (!v50)
    goto LABEL_67;
  data = (SipStack *)this[5].__r_.__value_.__l.__data_;
  v49 = data;
  if (!data)
    goto LABEL_67;
  v4 = (ImsPrefs *)SipStack::prefs(data);
  EnableSDPCandidateAttributeKey = (void **)ImsPrefs::getEnableSDPCandidateAttributeKey(v4);
  v6 = ImsPrefs::prefWithKey(v4, EnableSDPCandidateAttributeKey);
  if (v6)
    v7 = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 40))(v6);
  else
    v7 = *((_BYTE *)EnableSDPCandidateAttributeKey + 57) != 0;
  this[5].__r_.__value_.__s.__data_[20] = v7;
  v8 = this[1].__r_.__value_.__l.__data_;
  v45 = this->__r_.__value_.__r.__words[2];
  v46 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = this[5].__r_.__value_.__s.__data_[21];
  v12 = (ImsPrefs *)SipStack::prefs(data);
  SDPTemplateBuilder::createInitialSettings((uint64_t)&v45, this + 2, v11 != 0, v12, (uint64_t)&v47);
  std::__optional_storage_base<SDPMediaAudioSettings,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<SDPMediaAudioSettings,false>>((uint64_t)&this[6].__r_.__value_.__l.__size_, (unsigned __int8 *)&v47);
  if (v48)
    SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)&v47.__r_.__value_.__l.__data_);
  v13 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = this[78].__r_.__value_.__r.__words[2];
  if (v16 && *(_DWORD *)(v16 + 340) == 2 && this[24].__r_.__value_.__s.__data_[8])
  {
    v17 = this + 18;
    if (SHIBYTE(this[18].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v47, this[18].__r_.__value_.__l.__data_, this[18].__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = this[18].__r_.__value_.__r.__words[2];
    }
    v18 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v18 = v47.__r_.__value_.__l.__size_;
    if (v18 != 6)
      goto LABEL_32;
    v19 = (std::string *)v47.__r_.__value_.__r.__words[0];
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v47;
    v20 = (int)v19->__r_.__value_.__l.__data_;
    v21 = WORD2(v19->__r_.__value_.__r.__words[0]);
    if (v20 == 760368449 && v21 == 16983)
    {
      v28 = 1;
      if ((*((_BYTE *)&v47.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_51:
        if (v28)
        {
          v29 = this[1].__r_.__value_.__l.__data_;
          v42 = this->__r_.__value_.__r.__words[2];
          v43 = (std::__shared_weak_count *)v29;
          if (v29)
          {
            v30 = (unint64_t *)(v29 + 8);
            do
              v31 = __ldxr(v30);
            while (__stxr(v31 + 1, v30));
          }
          v32 = WORD2(this[19].__r_.__value_.__r.__words[0]);
          v33 = this[5].__r_.__value_.__s.__data_[21];
          v34 = (ImsPrefs *)SipStack::prefs(v49);
          if (v32 == 16000)
            v35 = 8000;
          else
            v35 = 16000;
          SDPTemplateBuilder::createInitialSecondAudioSettings((uint64_t)&v42, v35, v33 != 0, v34, (uint64_t)&v47);
          std::__optional_storage_base<SDPMediaAudioSettings,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<SDPMediaAudioSettings,false>>((uint64_t)&this[24].__r_.__value_.__r.__words[2], (unsigned __int8 *)&v47);
          if (v48)
            SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)&v47.__r_.__value_.__l.__data_);
          v36 = v43;
          if (v43)
          {
            v37 = (unint64_t *)&v43->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
        }
        goto LABEL_65;
      }
    }
    else
    {
LABEL_32:
      if (SHIBYTE(this[18].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v44, this[18].__r_.__value_.__l.__data_, this[18].__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v44.__r_.__value_.__r.__words[2] = this[18].__r_.__value_.__r.__words[2];
      }
      v23 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v23 = v44.__r_.__value_.__l.__size_;
      if (v23 == 3)
      {
        v24 = (std::string *)v44.__r_.__value_.__r.__words[0];
        if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v24 = &v44;
        data_low = LOWORD(v24->__r_.__value_.__l.__data_);
        v26 = v24->__r_.__value_.__s.__data_[2];
        v28 = data_low == 19777 && v26 == 82;
      }
      else
      {
        v28 = 0;
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      if ((*((_BYTE *)&v47.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_51;
    }
    operator delete(v47.__r_.__value_.__l.__data_);
    goto LABEL_51;
  }
LABEL_65:
  SDPSession::addMediaStreamForType((uint64_t)this, 2);
  if (LODWORD(this[5].__r_.__value_.__r.__words[2]))
    SDPSession::addMediaStreamForType((uint64_t)this, 4);
LABEL_67:
  v39 = v50;
  if (v50)
  {
    v40 = (unint64_t *)&v50->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
}

void sub_1BF18199C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v22 - 64);
  _Unwind_Resume(a1);
}

void SDPSession::initializeLazuliOffer(SDPSession *this)
{
  uint64_t v1;
  void *__p[2];
  char v3;
  void *v4[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(v4, "sdp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v1 = ImsLogger::debug(ims::_logger, (uint64_t)v4, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v1 + 8), (uint64_t)"SDPSession::initializeLazuliOffer", 33);
  *(_BYTE *)(v1 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v1 + 64))(v1, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v1 + 17) = 0;
  if (v3 < 0)
    operator delete(__p[0]);
  if (v5 < 0)
    operator delete(v4[0]);
}

void sub_1BF181AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

SDPMedia *SDPSession::updatePortForMedia(uint64_t a1, unsigned int a2, int a3)
{
  __int16 v4;
  uint64_t v6;
  SDPMedia *result;
  SDPMedia *v8;
  _WORD *v9;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 16);
  result = *(SDPMedia **)(v6 + 416);
  v8 = *(SDPMedia **)(v6 + 424);
  while (result != v8)
  {
    if (*((_DWORD *)result + 3) == a3)
    {
      result = (SDPMedia *)SDPMedia::setPort(result, a2);
      break;
    }
    result = (SDPMedia *)((char *)result + 200);
  }
  if (a3 == 4)
  {
    if (!*(_WORD *)(a1 + 142))
      *(_WORD *)(a1 + 142) = v4;
    if (*(_BYTE *)(a1 + 1328))
    {
      v9 = (_WORD *)(a1 + 1056);
      goto LABEL_14;
    }
  }
  else if (a3 == 2 && *(_BYTE *)(a1 + 584))
  {
    v9 = (_WORD *)(a1 + 176);
LABEL_14:
    *v9 = v4;
  }
  return result;
}

uint64_t SDPSession::enableRTCPBandwidthSpecifiers(uint64_t this)
{
  _QWORD *v1;
  uint64_t i;
  uint64_t v3;
  uint64_t j;
  _QWORD *v5;
  uint64_t k;

  v1 = *(_QWORD **)(this + 16);
  for (i = v1[52]; i != v1[53]; i += 200)
  {
    if (*(_DWORD *)(i + 12) == 2)
      goto LABEL_6;
  }
  i = 0;
LABEL_6:
  v3 = i + 112;
  for (j = *(_QWORD *)(i + 120); j != v3; j = *(_QWORD *)(j + 8))
  {
    if ((*(_DWORD *)(j + 28) - 3) <= 1)
      *(_BYTE *)(j + 32) = 1;
  }
  v5 = v1 + 37;
  for (k = v1[38]; (_QWORD *)k != v5; k = *(_QWORD *)(k + 8))
  {
    if ((*(_DWORD *)(k + 28) - 3) <= 1)
      *(_BYTE *)(k + 32) = 1;
  }
  return this;
}

SDPMediaSettings *std::optional<SDPMediaTTYSettings>::operator=[abi:ne180100]<SDPMediaTTYSettings,void>(SDPMediaSettings *this, SDPMediaSettings *a2)
{
  uint64_t v4;

  if (*((_BYTE *)this + 296))
  {
    SDPMediaSettings::operator=((uint64_t)this, (uint64_t)a2);
    v4 = *(_QWORD *)((char *)a2 + 285);
    *((_QWORD *)this + 35) = *((_QWORD *)a2 + 35);
    *(_QWORD *)((char *)this + 285) = v4;
  }
  else
  {
    SDPMediaSettings::SDPMediaSettings(this, a2);
    *(_QWORD *)this = &off_1E78BE690;
    *((_QWORD *)this + 35) = *((_QWORD *)a2 + 35);
    *((_DWORD *)this + 72) = *((_DWORD *)a2 + 72);
    *((_BYTE *)this + 292) = *((_BYTE *)a2 + 292);
    *((_BYTE *)this + 296) = 1;
  }
  return this;
}

void SDPTTYBuilder::adjustModel(uint64_t a1, _QWORD *a2, const SDPMediaAudioSettings *a3, uint64_t a4, int a5)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  _QWORD *v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  std::string::size_type v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  void *v51[2];
  void *v52;
  char v53;
  unsigned __int16 v54;
  __int16 v55;
  int v56;
  std::string::size_type v57;
  void *v58[2];
  char v59;
  void *__p[2];
  char v61;
  _BYTE v62[304];
  void *v63[54];
  char v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  void (**v67)(SDPMediaFormatTTYParams *__hidden);
  char v68;
  std::string v69;
  __int16 v70;
  __int16 v71;
  int v72;
  std::string v73;
  int v74;
  int v75;
  void (**v76)(SDPMediaFormatInfo *__hidden);
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v10 = (std::__shared_weak_count *)a2[1];
  v65 = *a2;
  v66 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  std::__optional_copy_base<SDPMediaAudioSettings,false>::__optional_copy_base[abi:ne180100]((SDPMediaAudioSettings *)v63, a3);
  std::__optional_copy_base<SDPMediaTTYSettings,false>::__optional_copy_base[abi:ne180100]((SDPMediaSettings *)v62, a4);
  SDPAudioBuilder::adjustModel(a1, &v65, (uint64_t)v63, (uint64_t)v62, a5);
  if (v62[296])
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)v62);
  if (v64)
    SDPMediaAudioSettings::~SDPMediaAudioSettings(v63);
  v13 = v66;
  if (v66)
  {
    v14 = (unint64_t *)&v66->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (*(_BYTE *)(a4 + 296))
  {
    v17 = *(_QWORD *)(*a2 + 416);
    v16 = *(_QWORD *)(*a2 + 424);
    if (v17 != v16)
    {
      while (*(_DWORD *)(v17 + 12) != 4)
      {
        v17 += 200;
        if (v17 == v16)
          return;
      }
      if (!*(_BYTE *)(a4 + 292))
        SDPMedia::setPort((SDPMedia *)v17, 0);
      if (*(_WORD *)(a4 + 28) != 255)
      {
        v47 = v17 + 40;
        std::__list_imp<SDPRepeatTime>::clear((uint64_t *)(v17 + 40));
        v18 = *(unsigned __int16 *)(a4 + 288);
        if (v18 != 255)
        {
          v78 = 1uLL;
          v90 = 0;
          v89 = 0u;
          v88 = 0u;
          v87 = 0u;
          *(_QWORD *)&v82 = 0x10000;
          v80 = 0xFFuLL;
          v76 = &off_1E78E2080;
          *(_QWORD *)&v77 = (unsigned __int16)v18;
          v79 = 0uLL;
          *((_QWORD *)&v77 + 1) = &off_1E78EE990;
          v81 = 0uLL;
          v83 = 1uLL;
          v84 = 0uLL;
          v85 = 0xFFuLL;
          *((_QWORD *)&v82 + 1) = &off_1E78B8590;
          v86 = 0uLL;
          std::string::basic_string[abi:ne180100]<0>(__p, "red");
          SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v67, v18, (__int128 *)__p, 1000, 1);
          LOBYTE(v78) = v68;
          std::string::operator=((std::string *)((char *)&v78 + 8), &v69);
          LOWORD(v80) = v70;
          std::string::operator=((std::string *)((char *)&v80 + 8), &v73);
          LODWORD(v82) = v74;
          SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v67);
          if (v61 < 0)
            operator delete(__p[0]);
          v19 = *(_WORD *)(a4 + 28);
          SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v51, *(_WORD *)(a4 + 288));
          v51[0] = off_1E78E9B20;
          v55 = v19;
          SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v67, v54);
          v67 = off_1E78E9B20;
          v71 = v55;
          v75 = 5;
          SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)&v76, (uint64_t)&v67);
          std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v67);
          v51[0] = off_1E78ED0A8;
          if (v53 < 0)
            operator delete(v52);
          v20 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(v47, 0, 0, (uint64_t)&v76);
          v20[1] = v47;
          v21 = *(_QWORD *)(v17 + 40);
          *v20 = v21;
          *(_QWORD *)(v21 + 8) = v20;
          *(_QWORD *)(v17 + 40) = v20;
          ++*(_QWORD *)(v17 + 56);
          v76 = &off_1E78E2080;
          std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v82 + 2);
          SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v77 + 1);
        }
        v77 = 0u;
        v78 = 0u;
        v79 = 0u;
        v90 = 0;
        v89 = 0u;
        v88 = 0u;
        v87 = 0u;
        v86 = 0u;
        v85 = 0u;
        v84 = 0u;
        v83 = 0u;
        v82 = 0u;
        v81 = 0u;
        v80 = 0u;
        v22 = *(_WORD *)(a4 + 28);
        v76 = &off_1E78E2080;
        LOWORD(v77) = v22;
        LOBYTE(v78) = 1;
        *((_QWORD *)&v78 + 1) = 0;
        v79 = 0uLL;
        *((_QWORD *)&v77 + 1) = &off_1E78EE990;
        LOWORD(v80) = 255;
        *((_QWORD *)&v80 + 1) = 0;
        v81 = 0uLL;
        LODWORD(v82) = 0x10000;
        v83 = 1uLL;
        v84 = 0uLL;
        v85 = 0xFFuLL;
        *((_QWORD *)&v82 + 1) = &off_1E78B8590;
        v86 = 0uLL;
        std::string::basic_string[abi:ne180100]<0>(v58, "t140");
        SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v67, v22, (__int128 *)v58, 1000, 1);
        LOBYTE(v78) = v68;
        std::string::operator=((std::string *)((char *)&v78 + 8), &v69);
        LOWORD(v80) = v70;
        std::string::operator=((std::string *)((char *)&v80 + 8), &v73);
        LODWORD(v82) = v74;
        SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v67);
        if (v59 < 0)
          operator delete(v58[0]);
        v23 = *(_DWORD *)(a4 + 280);
        v24 = *(_QWORD *)(a1 + 32);
        SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v51, *(_WORD *)(a4 + 28));
        v51[0] = off_1E78E9AA8;
        v56 = v23;
        v57 = v24;
        SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v67, v54);
        v67 = off_1E78E9AA8;
        v73.__r_.__value_.__r.__words[0] = v57;
        v72 = v56;
        v75 = 4;
        SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)&v76, (uint64_t)&v67);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v67);
        v51[0] = off_1E78ED0A8;
        if (v53 < 0)
          operator delete(v52);
        v25 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(v47, 0, 0, (uint64_t)&v76);
        v25[1] = v47;
        v26 = *(_QWORD *)(v17 + 40);
        *v25 = v26;
        *(_QWORD *)(v26 + 8) = v25;
        *(_QWORD *)(v17 + 40) = v25;
        ++*(_QWORD *)(v17 + 56);
        v76 = &off_1E78E2080;
        std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v82 + 2);
        SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v77 + 1);
      }
      v27 = (std::__shared_weak_count *)a2[1];
      v49 = *a2;
      v50 = v27;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      if (!*(_BYTE *)(a4 + 296))
        std::__throw_bad_optional_access[abi:ne180100]();
      if (*(_QWORD *)(a1 + 32) <= *(_QWORD *)(a4 + 48))
        v30 = *(_QWORD *)(a4 + 48);
      else
        v30 = *(_QWORD *)(a1 + 32);
      SDPModelBuilder::setBandwidthSpecifiers(a1, (uint64_t)&v49, v17, a4, v30);
      v31 = v50;
      if (v50)
      {
        v32 = (unint64_t *)&v50->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = v17 + 136;
      v35 = *(_QWORD *)(v17 + 144);
      if (v17 + 136 != v35)
      {
        v36 = *(_QWORD *)(v17 + 144);
        while (*(_DWORD *)(v36 + 136) != 4)
        {
          v36 = *(_QWORD *)(v36 + 8);
          if (v34 == v36)
            goto LABEL_66;
        }
        v37 = *(unsigned int *)(a4 + 40);
        if (!(_DWORD)v37)
        {
          v38 = *(_DWORD *)(a4 + 36);
          if (v38 <= 1)
            v37 = 1;
          else
            v37 = v38;
          v48 = v37;
          std::string::basic_string[abi:ne180100]<0>(&v76, "sdp");
          std::string::basic_string[abi:ne180100]<0>(&v67, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v39 = ImsLogger::warn(ims::_logger, (uint64_t)&v76, (uint64_t)&v67);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)"The text direction was set to undefined, setting to ", 52);
          *(_BYTE *)(v39 + 17) = 0;
          ims::toString<MediaDirection>(&v48, v51);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v39 + 32))(v39, v51);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v39 + 17) = 0;
          if (SHIBYTE(v52) < 0)
            operator delete(v51[0]);
          if (v69.__r_.__value_.__s.__data_[7] < 0)
            operator delete(v67);
          if (SHIBYTE(v77) < 0)
            operator delete(v76);
          v35 = *(_QWORD *)(v17 + 144);
        }
        while (1)
        {
          if (v34 == v35)
          {
            v40 = a5;
            v41 = 0;
            goto LABEL_65;
          }
          if (*(_DWORD *)(v35 + 136) == 4)
            break;
          v35 = *(_QWORD *)(v35 + 8);
        }
        v40 = a5;
        v41 = v35 + 16;
LABEL_65:
        *(_DWORD *)(v41 + 40) = SDPModelBuilder::getResponseDirection(a1, v37, v40);
      }
LABEL_66:
      if (*(_BYTE *)(a4 + 272))
      {
        SDPMedia::mediaCryptoList((_QWORD *)v17, &v76);
        v42 = v77;
        if ((void (***)(SDPMediaFormatInfo *__hidden))v77 != &v76)
        {
          v43 = (char *)a3 + 192;
          if (!*((_BYTE *)a3 + 272))
            v43 = 0;
          v44 = *((unsigned __int16 *)v43 + 20);
          do
          {
            v45 = *(_QWORD *)(v42 + 16);
            if (*(unsigned __int16 *)(v45 + 40) == v44)
            {
              if (*(_BYTE *)(a4 + 272))
                v46 = a4 + 192;
              else
                v46 = 0;
              *(_BYTE *)(v45 + 73) = *(_BYTE *)(v46 + 73);
              *(_WORD *)(v45 + 74) = *(_WORD *)(v46 + 74);
            }
            v42 = *(_QWORD *)(v42 + 8);
          }
          while ((void (***)(SDPMediaFormatInfo *__hidden))v42 != &v76);
        }
        std::__list_imp<unsigned long long>::clear(&v76);
      }
    }
  }
}

void sub_1BF182510(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;

  if (SLOBYTE(STACK[0x3B7]) < 0)
    operator delete(*(void **)(v2 + 16));
  if (SLOBYTE(STACK[0x437]) < 0)
    operator delete(*v1);
  _Unwind_Resume(a1);
}

void std::vector<SDPMedia>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 200;
      v7 = v4 - 200;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 200;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<SDPMedia>::__init_with_size[abi:ne180100]<SDPMedia*,SDPMedia*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<SDPMedia>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SDPMedia>,SDPMedia*,SDPMedia*,SDPMedia*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BF1827F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<SDPMedia>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<SDPMedia>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x147AE147AE147AFLL)
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SDPMedia>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[200 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<SDPMedia>,SDPMedia*,SDPMedia*,SDPMedia*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      SDPMedia::SDPMedia((SDPMedia *)(a4 + v7), (const SDPMedia *)(a2 + v7));
      v7 += 200;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1BF1828C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 200;
    do
    {
      (**(void (***)(uint64_t))(v4 + v2))(v4 + v2);
      v2 -= 200;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

double std::__optional_storage_base<SDPMediaTTYSettings,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<SDPMediaTTYSettings,false>>(SDPMediaSettings *this, SDPMediaSettings *a2)
{
  double result;
  uint64_t v5;

  if (*((unsigned __int8 *)this + 296) == *((unsigned __int8 *)a2 + 296))
  {
    if (*((_BYTE *)this + 296))
    {
      SDPMediaSettings::operator=((uint64_t)this, (uint64_t)a2);
      v5 = *(_QWORD *)((char *)a2 + 285);
      *((_QWORD *)this + 35) = *((_QWORD *)a2 + 35);
      *(_QWORD *)((char *)this + 285) = v5;
    }
  }
  else if (*((_BYTE *)this + 296))
  {
    SDPMediaSettings::~SDPMediaSettings(this);
    *((_BYTE *)this + 296) = 0;
  }
  else
  {
    SDPMediaSettings::SDPMediaSettings(this, a2);
    *(_QWORD *)this = &off_1E78BE690;
    result = *((double *)a2 + 35);
    *((double *)this + 35) = result;
    *((_DWORD *)this + 72) = *((_DWORD *)a2 + 72);
    *((_BYTE *)this + 292) = *((_BYTE *)a2 + 292);
    *((_BYTE *)this + 296) = 1;
  }
  return result;
}

SDPMediaAudioSettings *std::__optional_copy_base<SDPMediaAudioSettings,false>::__optional_copy_base[abi:ne180100](SDPMediaAudioSettings *this, const SDPMediaAudioSettings *a2)
{
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 432) = 0;
  if (*((_BYTE *)a2 + 432))
  {
    SDPMediaAudioSettings::SDPMediaAudioSettings(this, a2);
    *((_BYTE *)this + 432) = 1;
  }
  return this;
}

void sub_1BF1829D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 432))
    SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)v1);
  _Unwind_Resume(exception_object);
}

SDPMediaSettings *std::__optional_copy_base<SDPMediaTTYSettings,false>::__optional_copy_base[abi:ne180100](SDPMediaSettings *a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *((_BYTE *)a1 + 296) = 0;
  std::__optional_storage_base<SDPMediaTTYSettings,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<SDPMediaTTYSettings,false> const&>(a1, a2);
  return a1;
}

void sub_1BF182A20(_Unwind_Exception *exception_object)
{
  SDPMediaSettings *v1;

  if (*((_BYTE *)v1 + 296))
    SDPMediaSettings::~SDPMediaSettings(v1);
  _Unwind_Resume(exception_object);
}

double std::__optional_storage_base<SDPMediaTTYSettings,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<SDPMediaTTYSettings,false> const&>(SDPMediaSettings *a1, uint64_t a2)
{
  uint64_t v3;
  double result;

  if (*(_BYTE *)(a2 + 296))
  {
    SDPMediaSettings::SDPMediaSettings(a1, (const SDPMediaSettings *)a2);
    *(_QWORD *)v3 = &off_1E78BE690;
    result = *(double *)(a2 + 280);
    *(double *)(v3 + 280) = result;
    *(_DWORD *)(v3 + 288) = *(_DWORD *)(a2 + 288);
    *(_BYTE *)(v3 + 292) = *(_BYTE *)(a2 + 292);
    *(_BYTE *)(v3 + 296) = 1;
  }
  return result;
}

void std::__optional_storage_base<SDPMediaAudioSettings,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<SDPMediaAudioSettings,false>>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*(unsigned __int8 *)(a1 + 432) == a2[432])
  {
    if (*(_BYTE *)(a1 + 432))
      SDPMediaAudioSettings::operator=(a1, (uint64_t)a2);
  }
  else if (*(_BYTE *)(a1 + 432))
  {
    SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)a1);
    *(_BYTE *)(v2 + 432) = 0;
  }
  else
  {
    SDPMediaAudioSettings::SDPMediaAudioSettings((SDPMediaAudioSettings *)a1, (const SDPMediaAudioSettings *)a2);
    *(_BYTE *)(v3 + 432) = 1;
  }
}

void std::allocate_shared[abi:ne180100]<SDPModel,std::allocator<SDPModel>,std::shared_ptr<SDPModel>,void>(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9[2];

  v4 = operator new(0x1D0uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E78BB3E0;
  v5 = (uint64_t)(v4 + 3);
  v6 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = (uint64_t)v6;
  *a2 = 0;
  a2[1] = 0;
  SDPModel::SDPModel((uint64_t)(v4 + 3), v9);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *a1 = v5;
  a1[1] = (uint64_t)v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a1, v4 + 5, v5);
}

void sub_1BF182B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

_QWORD *BambiDeregisterHandler::BambiDeregisterHandler(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_1E78E5940;
  a1[1] = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 5));
  v5 = *a2;
  v4 = a2[1];
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::__shared_weak_count *)a1[4];
  a1[3] = v5;
  a1[4] = v4;
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  a1[18] = a1;
  return a1;
}

void sub_1BF182C1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v3 = *(std::__shared_weak_count **)(v1 + 32);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(exception_object);
}

void BambiDeregisterHandler::handleUpdateRegistration(BambiDeregisterHandler *this)
{
  uint64_t v2;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;

  if (*((_DWORD *)this + 46) == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "bambi");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_43);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v2 = ImsLogger::debug(ims::_logger, (uint64_t)v5, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Resetting state due to registration update while SRVCC cleanup is pending", 73);
    *(_BYTE *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v2 + 17) = 0;
    if (v4 < 0)
      operator delete(__p[0]);
    if (v6 < 0)
      operator delete(v5[0]);
    *((_QWORD *)this + 23) = 0;
  }
  else
  {
    BambiDeregisterHandler::stop(this);
  }
}

void sub_1BF182D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *BambiDeregisterHandler::stop(BambiDeregisterHandler *this)
{
  unsigned __int8 *result;
  uint64_t v3;
  unsigned int v4;
  char *v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;

  result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)this + 6, (unsigned __int8 *)&kBambiDeregisterTimer);
  if (result)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "bambi");
    std::string::basic_string[abi:ne180100]<0>(v8, (char *)&str_1_43);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::debug(ims::_logger, (uint64_t)v10, (uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"stopping timer for ", 19);
    *(_BYTE *)(v3 + 17) = 0;
    v4 = *((_DWORD *)this + 46) - 1;
    if (v4 > 2)
      v5 = "Unknown";
    else
      v5 = off_1E78E5A30[v4];
    std::string::basic_string[abi:ne180100]<0>(__p, v5);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 32))(v3, __p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    if (v7 < 0)
      operator delete(__p[0]);
    if (v9 < 0)
      operator delete(v8[0]);
    if (v11 < 0)
      operator delete(v10[0]);
    return SipTimerContainer::cancelTimer((BambiDeregisterHandler *)((char *)this + 40), &kBambiDeregisterTimer);
  }
  return result;
}

void sub_1BF182E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void BambiDeregisterHandler::handleEndRegistration(BambiDeregisterHandler *this, int a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;

  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "bambi");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_43);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::debug(ims::_logger, (uint64_t)v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"local deregistration requested", 30);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    if (v10 < 0)
      operator delete(__p[0]);
    if (v12 < 0)
      operator delete(v11[0]);
    v4 = 1;
  }
  else
  {
    v4 = 2;
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)this + 6, (unsigned __int8 *)&kBambiDeregisterTimer))
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "bambi");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_43);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::debug(ims::_logger, (uint64_t)v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"end registration requested, terminate immediately", 49);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v10 < 0)
      operator delete(__p[0]);
    if (v12 < 0)
      operator delete(v11[0]);
    *((_DWORD *)this + 47) = v4;
LABEL_21:
    BambiDeregisterHandler::performAction(this);
    return;
  }
  v5 = *((_DWORD *)this + 46);
  if (v5 != 1)
  {
    if (v5 != 2)
      return;
    std::string::basic_string[abi:ne180100]<0>(v11, "bambi");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_43);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, (uint64_t)v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"deregister requested during voice service fallback, dropping registration silently", 82);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (v10 < 0)
      operator delete(__p[0]);
    if (v12 < 0)
      operator delete(v11[0]);
    *((_DWORD *)this + 47) = 1;
    BambiDeregisterHandler::stop(this);
    goto LABEL_21;
  }
  if (*((_DWORD *)this + 47))
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "bambi");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_43);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"ignoring deregister, deregister already pending or registration state will be dropped silently", 94);
  }
  else
  {
    *((_DWORD *)this + 47) = v4;
    std::string::basic_string[abi:ne180100]<0>(v11, "bambi");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_43);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"deferring deregister request during SRVCC cleanup", 49);
  }
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v10 < 0)
    operator delete(__p[0]);
  if (v12 < 0)
    operator delete(v11[0]);
}

void sub_1BF18327C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BambiDeregisterHandler::performAction(BambiDeregisterHandler *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::string v29;
  std::string __p;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;
  SipStack *v35;
  std::__shared_weak_count *v36;

  v35 = 0;
  v36 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
  {
    v36 = std::__shared_weak_count::lock(v2);
    if (v36)
    {
      v3 = *((_QWORD *)this + 3);
      v35 = (SipStack *)v3;
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 144);
        if (v4)
        {
          v6 = *(_QWORD *)(v4 + 248);
          v5 = *(std::__shared_weak_count **)(v4 + 256);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v8 = __ldxr(p_shared_owners);
            while (__stxr(v8 + 1, p_shared_owners));
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          if (v6)
          {
            v10 = *((_DWORD *)this + 47);
            if (v10 == 2)
            {
              std::string::basic_string[abi:ne180100]<0>(v33, "bambi");
              std::string::basic_string[abi:ne180100]<0>(v31, (char *)&str_1_43);
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v14 = ImsLogger::debug(ims::_logger, (uint64_t)v33, (uint64_t)v31);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"performing termination of registration due to ", 46);
              *(_BYTE *)(v14 + 17) = 0;
              v15 = *((_DWORD *)this + 46) - 1;
              if (v15 > 2)
                v16 = "Unknown";
              else
                v16 = off_1E78E5A30[v15];
              std::string::basic_string[abi:ne180100]<0>(&v29, v16);
              LoggableString::LoggableString(&__p, &v29);
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v14 + 40))(v14, &__p);
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v14 + 17) = 0;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v29.__r_.__value_.__l.__data_);
              if (v32 < 0)
                operator delete(v31[0]);
              if (v34 < 0)
                operator delete(v33[0]);
              SipStack::endRegistration(v35);
            }
            else if (v10 == 1)
            {
              std::string::basic_string[abi:ne180100]<0>(v33, "bambi");
              std::string::basic_string[abi:ne180100]<0>(v31, (char *)&str_1_43);
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v11 = ImsLogger::debug(ims::_logger, (uint64_t)v33, (uint64_t)v31);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"performing silent drop of registration due to ", 46);
              *(_BYTE *)(v11 + 17) = 0;
              v12 = *((_DWORD *)this + 46) - 1;
              if (v12 > 2)
                v13 = "Unknown";
              else
                v13 = off_1E78E5A30[v12];
              std::string::basic_string[abi:ne180100]<0>(&v29, v13);
              LoggableString::LoggableString(&__p, &v29);
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 40))(v11, &__p);
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v11 + 17) = 0;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v29.__r_.__value_.__l.__data_);
              if (v32 < 0)
                operator delete(v31[0]);
              if (v34 < 0)
                operator delete(v33[0]);
              v17 = *((_DWORD *)this + 46) - 1;
              if (v17 > 2)
                v18 = 3;
              else
                v18 = *(unsigned int *)&asc_1BF2ABE34[4 * v17];
              v19 = *((_QWORD *)v35 + 18);
              v20 = *(void **)(v19 + 248);
              v21 = *(std::__shared_weak_count **)(v19 + 256);
              v33[0] = v20;
              v33[1] = v21;
              if (v21)
              {
                v22 = (unint64_t *)&v21->__shared_owners_;
                do
                  v23 = __ldxr(v22);
                while (__stxr(v23 + 1, v22));
              }
              (*(void (**)(void *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v20 + 168))(v20, v18, 0, 0);
              if (v21)
              {
                v24 = (unint64_t *)&v21->__shared_owners_;
                do
                  v25 = __ldaxr(v24);
                while (__stlxr(v25 - 1, v24));
                if (!v25)
                {
                  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                  std::__shared_weak_count::__release_weak(v21);
                }
              }
              SipTransportLayer::removeConnections(*((SipTransportLayer **)v35 + 20), 0, 1, 1);
            }
            *((_QWORD *)this + 23) = 0;
          }
        }
      }
    }
  }
  v26 = v36;
  if (v36)
  {
    v27 = (unint64_t *)&v36->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1BF18369C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v32 - 48);
  _Unwind_Resume(a1);
}

void BambiDeregisterHandler::start(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  char *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  SipUserAgent *v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  int v16;
  const char *v17;
  char *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string __p;
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  _BYTE v40[24];
  _BYTE *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 48), (unsigned __int8 *)&kBambiDeregisterTimer))
  {
    std::string::basic_string[abi:ne180100]<0>(v36, "bambi");
    std::string::basic_string[abi:ne180100]<0>(v34, (char *)&str_1_43);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, (uint64_t)v36, (uint64_t)v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"timer already started with reason ", 34);
    *(_BYTE *)(v6 + 17) = 0;
    v7 = *(_DWORD *)(a1 + 184) - 1;
    if (v7 > 2)
      v8 = "Unknown";
    else
      v8 = off_1E78E5A30[v7];
    std::string::basic_string[abi:ne180100]<0>(&__p, v8);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 32))(v6, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v35 < 0)
      operator delete(v34[0]);
    if (v37 < 0)
      operator delete(v36[0]);
    return;
  }
  *(_DWORD *)(a1 + 184) = a2;
  *(_DWORD *)(a1 + 188) = 0;
  v38 = 0;
  v39 = 0;
  v9 = *(std::__shared_weak_count **)(a1 + 32);
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v39 = v10;
    if (v10)
    {
      v11 = *(_QWORD *)(a1 + 24);
      v38 = v11;
      if (v11)
      {
        if (a2 == 1)
        {
          v12 = *(SipUserAgent **)(v11 + 144);
          if (v12)
            *(_DWORD *)(a1 + 188) = *(unsigned __int8 *)(SipUserAgent::config(v12) + 1121);
        }
      }
    }
  }
  else
  {
    v10 = 0;
  }
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v36, "bambi");
    std::string::basic_string[abi:ne180100]<0>(v34, (char *)&str_1_43);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v13 = ImsLogger::debug(ims::_logger, (uint64_t)v36, (uint64_t)v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"starting timer for ", 19);
    *(_BYTE *)(v13 + 17) = 0;
    v14 = *(_DWORD *)(a1 + 184) - 1;
    if (v14 > 2)
      v15 = "Unknown";
    else
      v15 = off_1E78E5A30[v14];
    std::string::basic_string[abi:ne180100]<0>(&v32, v15);
    LoggableString::LoggableString(&__p, &v32);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v13 + 40))(v13, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" with action ", 13);
    *(_BYTE *)(v13 + 17) = 0;
    v16 = *(_DWORD *)(a1 + 188);
    v17 = "None";
    if (v16 == 2)
      v17 = "Deregister";
    if (v16 == 1)
      v18 = "Drop";
    else
      v18 = (char *)v17;
    std::string::basic_string[abi:ne180100]<0>(&v30, v18);
    LoggableString::LoggableString(&v31, &v30);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v13 + 40))(v13, &v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" and timeout ", 13);
    *(_BYTE *)(v13 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (v35 < 0)
      operator delete(v34[0]);
    if (v37 < 0)
      operator delete(v36[0]);
    v20 = *(_QWORD *)(a1 + 8);
    v19 = *(std::__shared_weak_count **)(a1 + 16);
    if (v19)
    {
      p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
      do
        v22 = __ldxr(p_shared_weak_owners);
      while (__stxr(v22 + 1, p_shared_weak_owners));
      do
        v23 = __ldxr(p_shared_weak_owners);
      while (__stxr(v23 + 1, p_shared_weak_owners));
      do
        v24 = __ldxr(p_shared_weak_owners);
      while (__stxr(v24 + 1, p_shared_weak_owners));
    }
    v41 = 0;
    v25 = operator new(0x20uLL);
    *v25 = &off_1E78E59C0;
    v25[1] = a1;
    v25[2] = v20;
    v25[3] = v19;
    v41 = v25;
    SipTimerContainer::startTimer((_QWORD *)(a1 + 40), (uint64_t)&kBambiDeregisterTimer, (uint64_t)v40, a3, 0);
    v26 = v41;
    if (v41 == v40)
    {
      v27 = 4;
      v26 = v40;
    }
    else
    {
      if (!v41)
        goto LABEL_50;
      v27 = 5;
    }
    (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_50:
    if (v19)
    {
      std::__shared_weak_count::__release_weak(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    goto LABEL_52;
  }
  *(_DWORD *)(a1 + 188) = 1;
  BambiDeregisterHandler::performAction((BambiDeregisterHandler *)a1);
LABEL_52:
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1BF183BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v45 - 104);
  _Unwind_Resume(a1);
}

void BambiDeregisterHandler::handleTimer(BambiDeregisterHandler *this, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  std::string *v5;

  v2 = a2[23];
  if ((v2 & 0x80u) == 0)
    v3 = a2[23];
  else
    v3 = *((_QWORD *)a2 + 1);
  if (v3 != 20)
    return;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, &kBambiDeregisterTimer, *((_QWORD *)a2 + 1)))
      return;
LABEL_13:
    BambiDeregisterHandler::performAction(this);
    return;
  }
  if (!a2[23])
    goto LABEL_13;
  v5 = &kBambiDeregisterTimer;
  while (*a2 == v5->__r_.__value_.__s.__data_[0])
  {
    ++a2;
    v5 = (std::string *)((char *)v5 + 1);
    if (!--v2)
      goto LABEL_13;
  }
}

void BambiDeregisterHandler::~BambiDeregisterHandler(BambiDeregisterHandler *this)
{
  BambiDeregisterHandler::~BambiDeregisterHandler(this);
  JUMPOUT(0x1C3B87100);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78E5940;
  SipTimerContainer::~SipTimerContainer((BambiDeregisterHandler *)((char *)this + 40));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void BambiDeregisterHandler::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "BambiDeregisterHandler");
}

_QWORD *std::__function::__func<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0,std::allocator<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78E59C0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0,std::allocator<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78E59C0;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0,std::allocator<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78E59C0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0,std::allocator<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78E59C0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0,std::allocator<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0,std::allocator<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0,std::allocator<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF184028(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0,std::allocator<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0,std::allocator<BambiDeregisterHandler::start(BambiDeregisterHandler::BambiDeregisterReason,unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t SDPMediaAcceptWrappedTypes::SDPMediaAcceptWrappedTypes(uint64_t a1, __int128 **a2)
{
  void *__p[2];
  uint64_t v6;

  std::string::basic_string[abi:ne180100]<0>(__p, "accept-wrapped-types");
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E78ED0A8;
  if (SHIBYTE(v6) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v6) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_QWORD *)a1 = &off_1E78E5A58;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 40), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  return a1;
}

void sub_1BF184174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void SDPMediaAcceptWrappedTypes::SDPMediaAcceptWrappedTypes(SDPMediaAcceptWrappedTypes *this, const SDPMediaAcceptWrappedTypes *a2)
{
  std::string __p;

  if (*((char *)a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
  else
    __p = *(std::string *)((char *)a2 + 16);
  *((_BYTE *)this + 8) = 1;
  *(_QWORD *)this = off_1E78ED0A8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::string *)((char *)this + 16) = __p;
  }
  *(_QWORD *)this = &off_1E78E5A58;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 40), *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
}

void sub_1BF18428C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void SDPMediaAcceptWrappedTypes::~SDPMediaAcceptWrappedTypes(void **this)
{
  void **v2;

  *this = &off_1E78E5A58;
  v2 = this + 5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  *this = off_1E78ED0A8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  SDPMediaAcceptWrappedTypes::~SDPMediaAcceptWrappedTypes(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SDPMediaAcceptWrappedTypes::value@<X0>(SDPMediaAcceptWrappedTypes *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v15[4];
  void *__p[2];
  __int128 v17;
  __int128 v18;
  _OWORD v19[9];
  uint64_t v20;

  v20 = 0;
  v18 = 0u;
  memset(v19, 0, sizeof(v19));
  *(_OWORD *)__p = 0u;
  v17 = 0u;
  memset(v15, 0, sizeof(v15));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v4 = *((_QWORD *)this + 6) - *((_QWORD *)this + 5);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = v4 / 24;
    v8 = v7 - 1;
    if (v7 <= 1)
      v9 = 1;
    else
      v9 = v7;
    do
    {
      v10 = *((_QWORD *)this + 5) + v5;
      v11 = *(char *)(v10 + 23);
      if (v11 >= 0)
        v12 = *((_QWORD *)this + 5) + v5;
      else
        v12 = *(_QWORD *)v10;
      if (v11 >= 0)
        v13 = *(unsigned __int8 *)(v10 + 23);
      else
        v13 = *(_QWORD *)(v10 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v12, v13);
      if (v6 < v8)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
      ++v6;
      v5 += 24;
    }
    while (v9 != v6);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15 + 8, a2);
  *(_QWORD *)&v15[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v15 + *(_QWORD *)(*(_QWORD *)&v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v15[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v17) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v19);
}

void sub_1BF1844C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *SDPMediaAcceptWrappedTypes::key@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "accept-wrapped-types");
}

uint64_t SDPModel::SDPModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::string *v5;
  __int128 v6;
  const std::string *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t i;
  char *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const SDPMedia *v28;
  const SDPMedia *v29;
  unint64_t v30;
  uint64_t v31;
  void (**v33)(SDPConnection *__hidden);
  _BYTE v34[12];
  std::string __p;
  __int16 v36;
  void (***v37)(SDPConnection *__hidden);

  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E78E5C28;
  v4 = *a2;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(*a2 + 32);
  *(_QWORD *)(a1 + 40) = &off_1E78EEBC0;
  *(_BYTE *)(a1 + 48) = 1;
  *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 56) = off_1E78D19C0;
  *(_QWORD *)(a1 + 80) = 0;
  v5 = (std::string *)(a1 + 80);
  *(_DWORD *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  if (*(char *)(v4 + 135) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 112), *(const std::string::value_type **)(v4 + 112), *(_QWORD *)(v4 + 120));
  }
  else
  {
    v6 = *(_OWORD *)(v4 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(v4 + 128);
    *(_OWORD *)(a1 + 112) = v6;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(v4 + 136);
  v7 = (const std::string *)(v4 + 56);
  if (SDPConnection::valid(v7))
  {
    SDPConnection::SDPConnection((uint64_t)&v33, (uint64_t)v7);
    *(_BYTE *)(a1 + 64) = v34[0];
    *(_QWORD *)(a1 + 68) = *(_QWORD *)&v34[4];
    std::string::operator=(v5, &__p);
    *(_WORD *)(a1 + 104) = v36;
    v33 = off_1E78D19C0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v8 = *a2;
  if (*(char *)(*a2 + 175) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 152), *(const std::string::value_type **)(v8 + 152), *(_QWORD *)(v8 + 160));
  }
  else
  {
    v9 = *(_OWORD *)(v8 + 152);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(v8 + 168);
    *(_OWORD *)(a1 + 152) = v9;
  }
  v10 = *a2;
  if (*(char *)(*a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 176), *(const std::string::value_type **)(v10 + 176), *(_QWORD *)(v10 + 184));
  }
  else
  {
    v11 = *(_OWORD *)(v10 + 176);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(v10 + 192);
    *(_OWORD *)(a1 + 176) = v11;
  }
  v12 = *a2;
  if (*(char *)(*a2 + 223) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 200), *(const std::string::value_type **)(v12 + 200), *(_QWORD *)(v12 + 208));
  }
  else
  {
    v13 = *(_OWORD *)(v12 + 200);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(v12 + 216);
    *(_OWORD *)(a1 + 200) = v13;
  }
  std::list<std::string>::list((uint64_t *)(a1 + 224), *a2 + 224);
  std::list<std::string>::list((uint64_t *)(a1 + 248), *a2 + 248);
  *(_QWORD *)(a1 + 272) = a1 + 272;
  *(_QWORD *)(a1 + 280) = a1 + 272;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = a1 + 296;
  *(_QWORD *)(a1 + 304) = a1 + 296;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = a1 + 320;
  *(_QWORD *)(a1 + 328) = a1 + 320;
  *(_QWORD *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = a1 + 392;
  *(_QWORD *)(a1 + 400) = a1 + 392;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  v14 = *a2;
  v15 = *a2 + 272;
  v16 = *(_QWORD *)(*a2 + 280);
  if (v16 != v15)
  {
    do
    {
      v17 = std::__list_imp<SDPConnection>::__create_node[abi:ne180100]<SDPConnection const&>(a1 + 272, 0, 0, v16 + 16);
      v17[1] = a1 + 272;
      v18 = *(_QWORD *)(a1 + 272);
      *v17 = v18;
      *(_QWORD *)(v18 + 8) = v17;
      *(_QWORD *)(a1 + 272) = v17;
      ++*(_QWORD *)(a1 + 288);
      v16 = *(_QWORD *)(v16 + 8);
    }
    while (v16 != v15);
    v14 = *a2;
  }
  for (i = *(_QWORD *)(v14 + 304); i != v14 + 296; i = *(_QWORD *)(i + 8))
  {
    v20 = (char *)operator new(0x38uLL);
    v20[24] = *(_BYTE *)(i + 24);
    *((_QWORD *)v20 + 2) = &off_1E78BFAB0;
    v21 = *(_OWORD *)(i + 28);
    *(_OWORD *)(v20 + 38) = *(_OWORD *)(i + 38);
    *(_OWORD *)(v20 + 28) = v21;
    v22 = *(_QWORD *)(a1 + 296);
    *(_QWORD *)v20 = v22;
    *((_QWORD *)v20 + 1) = a1 + 296;
    *(_QWORD *)(v22 + 8) = v20;
    *(_QWORD *)(a1 + 296) = v20;
    ++*(_QWORD *)(a1 + 312);
  }
  v23 = *(_QWORD *)(v14 + 328);
  if (v23 != v14 + 320)
  {
    do
    {
      v24 = operator new(0x48uLL);
      *v24 = 0;
      v24[1] = 0;
      SDPTiming::SDPTiming((SDPTiming *)(v24 + 2), (const SDPTiming *)(v23 + 16));
      v25 = *(_QWORD *)(a1 + 320);
      *v24 = v25;
      v24[1] = a1 + 320;
      *(_QWORD *)(v25 + 8) = v24;
      *(_QWORD *)(a1 + 320) = v24;
      ++*(_QWORD *)(a1 + 336);
      v23 = *(_QWORD *)(v23 + 8);
    }
    while (v23 != v14 + 320);
    v14 = *a2;
  }
  if (*(_BYTE *)(v14 + 384))
  {
    v34[0] = 1;
    v33 = &off_1E78EDC68;
    std::list<std::pair<unsigned long long,long>>::list(&v34[8], v14 + 360);
    std::optional<SDPTimeZone>::operator=[abi:ne180100]<SDPTimeZone,void>(a1 + 344, (uint64_t)&v33);
    v33 = &off_1E78EDC68;
    std::__list_imp<unsigned long long>::clear(&v34[8]);
    v14 = *a2;
  }
  v26 = *(_QWORD *)(v14 + 400);
  if (v26 != v14 + 392)
  {
    do
    {
      v33 = (void (**)(SDPConnection *__hidden))a1;
      *(_QWORD *)v34 = a1;
      v27 = *(unsigned int *)(v26 + 136);
      if ((_DWORD)v27 == -1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v37 = &v33;
      ((void (*)(void (****)(SDPConnection *__hidden), uint64_t))off_1E78E5AE8[v27])(&v37, v26 + 16);
      v26 = *(_QWORD *)(v26 + 8);
    }
    while (v26 != v14 + 392);
    v14 = *a2;
  }
  v29 = *(const SDPMedia **)(v14 + 416);
  v28 = *(const SDPMedia **)(v14 + 424);
  while (v29 != v28)
  {
    SDPMedia::SDPMedia((SDPMedia *)&v33, v29, (SDPModel *)a1);
    v30 = *(_QWORD *)(a1 + 424);
    if (v30 >= *(_QWORD *)(a1 + 432))
    {
      v31 = std::vector<SDPMedia>::__emplace_back_slow_path<SDPMedia>((uint64_t *)(a1 + 416), (const SDPMedia *)&v33);
    }
    else
    {
      SDPMedia::SDPMedia(*(SDPMedia **)(a1 + 424), (const SDPMedia *)&v33);
      v31 = v30 + 200;
      *(_QWORD *)(a1 + 424) = v30 + 200;
    }
    *(_QWORD *)(a1 + 424) = v31;
    SDPMedia::~SDPMedia((SDPMedia *)&v33);
    v29 = (const SDPMedia *)((char *)v29 + 200);
  }
  return a1;
}

void sub_1BF18493C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  void **v25;
  std::__shared_weak_count *v27;

  if (*(char *)(v24 + 199) < 0)
    operator delete(*a10);
  if (*(char *)(v24 + 175) < 0)
    operator delete(*a11);
  SDPOrigin::~SDPOrigin(v25);
  v27 = *(std::__shared_weak_count **)(v24 + 24);
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  _Unwind_Resume(a1);
}

void SDPModel::~SDPModel(SDPModel *this)
{
  std::__shared_weak_count *v2;
  void **v3;

  *(_QWORD *)this = &off_1E78E5C28;
  v3 = (void **)((char *)this + 416);
  std::vector<SDPMedia>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::clear((unsigned int *)this + 98);
  if (*((_BYTE *)this + 384))
  {
    *((_QWORD *)this + 43) = &off_1E78EDC68;
    std::__list_imp<unsigned long long>::clear((_QWORD *)this + 45);
  }
  std::__list_imp<SDPRepeatTime>::clear((uint64_t *)this + 40);
  std::__list_imp<SDPRepeatTime>::clear((uint64_t *)this + 37);
  std::__list_imp<SDPRepeatTime>::clear((uint64_t *)this + 34);
  std::__list_imp<std::string>::clear((_QWORD *)this + 31);
  std::__list_imp<std::string>::clear((_QWORD *)this + 28);
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  if (*((char *)this + 199) < 0)
    operator delete(*((void **)this + 22));
  if (*((char *)this + 175) < 0)
    operator delete(*((void **)this + 19));
  SDPOrigin::~SDPOrigin((void **)this + 5);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

{
  SDPModel::~SDPModel(this);
  JUMPOUT(0x1C3B87100);
}

_QWORD *SDPModel::toStream(SDPModel *this, ImsOutStream *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t i;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t j;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *k;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *m;
  _BOOL4 isHeld;
  _QWORD *n;
  _QWORD *v26;
  uint64_t v27;
  uint64_t ii;
  uint64_t v29;
  _QWORD *result;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  std::string __p;
  std::string *p_p;

  v4 = (_QWORD *)*((_QWORD *)a2 + 1);
  __p.__r_.__value_.__s.__data_[0] = 118;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&__p, 1);
  *((_BYTE *)a2 + 17) = 0;
  v5 = (_QWORD *)*((_QWORD *)a2 + 1);
  __p.__r_.__value_.__s.__data_[0] = 61;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&__p, 1);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\r\n", 2);
  *((_BYTE *)a2 + 17) = 0;
  if (SDPOrigin::valid((SDPModel *)((char *)this + 40)))
  {
    SDPOrigin::toStream((SDPModel *)((char *)this + 40), a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\r\n", 2);
    *((_BYTE *)a2 + 17) = 0;
  }
  v6 = (_QWORD *)*((_QWORD *)a2 + 1);
  __p.__r_.__value_.__s.__data_[0] = 115;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&__p, 1);
  *((_BYTE *)a2 + 17) = 0;
  v7 = (_QWORD *)*((_QWORD *)a2 + 1);
  __p.__r_.__value_.__s.__data_[0] = 61;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&__p, 1);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, char *))(*(_QWORD *)a2 + 32))(a2, (char *)this + 152);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\r\n", 2);
  *((_BYTE *)a2 + 17) = 0;
  v8 = *((unsigned __int8 *)this + 199);
  if ((v8 & 0x80u) != 0)
    v8 = *((_QWORD *)this + 23);
  if (v8)
  {
    v9 = (_QWORD *)*((_QWORD *)a2 + 1);
    __p.__r_.__value_.__s.__data_[0] = 105;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&__p, 1);
    *((_BYTE *)a2 + 17) = 0;
    v10 = (_QWORD *)*((_QWORD *)a2 + 1);
    __p.__r_.__value_.__s.__data_[0] = 61;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&__p, 1);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, char *))(*(_QWORD *)a2 + 32))(a2, (char *)this + 176);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\r\n", 2);
    *((_BYTE *)a2 + 17) = 0;
  }
  v11 = *((unsigned __int8 *)this + 223);
  if ((v11 & 0x80u) != 0)
    v11 = *((_QWORD *)this + 26);
  if (v11)
  {
    v12 = (_QWORD *)*((_QWORD *)a2 + 1);
    __p.__r_.__value_.__s.__data_[0] = 117;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&__p, 1);
    *((_BYTE *)a2 + 17) = 0;
    v13 = (_QWORD *)*((_QWORD *)a2 + 1);
    __p.__r_.__value_.__s.__data_[0] = 61;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&__p, 1);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, char *))(*(_QWORD *)a2 + 32))(a2, (char *)this + 200);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\r\n", 2);
    *((_BYTE *)a2 + 17) = 0;
  }
  for (i = *((_QWORD *)this + 29); (SDPModel *)i != (SDPModel *)((char *)this + 224); i = *(_QWORD *)(i + 8))
  {
    memset(&__p, 0, sizeof(__p));
    if (*(char *)(i + 39) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(i + 16), *(_QWORD *)(i + 24));
    else
      __p = *(std::string *)(i + 16);
    v15 = (_QWORD *)*((_QWORD *)a2 + 1);
    LOBYTE(p_p) = 101;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&p_p, 1);
    *((_BYTE *)a2 + 17) = 0;
    v16 = (_QWORD *)*((_QWORD *)a2 + 1);
    LOBYTE(p_p) = 61;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&p_p, 1);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 32))(a2, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\r\n", 2);
    *((_BYTE *)a2 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  for (j = *((_QWORD *)this + 32); (SDPModel *)j != (SDPModel *)((char *)this + 248); j = *(_QWORD *)(j + 8))
  {
    memset(&__p, 0, sizeof(__p));
    if (*(char *)(j + 39) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(j + 16), *(_QWORD *)(j + 24));
    else
      __p = *(std::string *)(j + 16);
    v18 = (_QWORD *)*((_QWORD *)a2 + 1);
    LOBYTE(p_p) = 112;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&p_p, 1);
    *((_BYTE *)a2 + 17) = 0;
    v19 = (_QWORD *)*((_QWORD *)a2 + 1);
    LOBYTE(p_p) = 61;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)&p_p, 1);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 32))(a2, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\r\n", 2);
    *((_BYTE *)a2 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  for (k = (_QWORD *)*((_QWORD *)this + 35); k != (_QWORD *)((char *)this + 272); k = (_QWORD *)*(v21 - 1))
  {
    v22 = k[2];
    v21 = k + 2;
    (*(void (**)(_QWORD *, ImsOutStream *))(v22 + 16))(v21, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\r\n", 2);
    *((_BYTE *)a2 + 17) = 0;
  }
  for (m = (_QWORD *)*((_QWORD *)this + 38); m != (_QWORD *)((char *)this + 296); m = (_QWORD *)m[1])
  {
    isHeld = SDPModel::isHeld(this);
    SDPBandwidth::toStream((SDPBandwidth *)(m + 2), a2, isHeld);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\r\n", 2);
    *((_BYTE *)a2 + 17) = 0;
  }
  for (n = (_QWORD *)*((_QWORD *)this + 41); n != (_QWORD *)((char *)this + 320); n = (_QWORD *)*(v26 - 1))
  {
    v27 = n[2];
    v26 = n + 2;
    (*(void (**)(_QWORD *, ImsOutStream *))(v27 + 16))(v26, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\r\n", 2);
    *((_BYTE *)a2 + 17) = 0;
  }
  if (*((_BYTE *)this + 384))
  {
    (*(void (**)(char *, ImsOutStream *))(*((_QWORD *)this + 43) + 16))((char *)this + 344, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\r\n", 2);
    *((_BYTE *)a2 + 17) = 0;
  }
  for (ii = *((_QWORD *)this + 50); (SDPModel *)ii != (SDPModel *)((char *)this + 392); ii = *(_QWORD *)(ii + 8))
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)a2;
    v29 = *(unsigned int *)(ii + 136);
    if ((_DWORD)v29 == -1)
      std::__throw_bad_variant_access[abi:ne180100]();
    p_p = &__p;
    ((void (*)(std::string **, uint64_t))off_1E78E5B80[v29])(&p_p, ii + 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\r\n", 2);
    *((_BYTE *)a2 + 17) = 0;
  }
  result = (_QWORD *)*((_QWORD *)this + 52);
  v31 = (_QWORD *)*((_QWORD *)this + 53);
  if (result != v31)
  {
    v32 = (_QWORD *)*((_QWORD *)this + 52);
    do
    {
      v33 = *v32;
      v32 += 25;
      (*(void (**)(void))(v33 + 16))();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\r\n", 2);
      *((_BYTE *)a2 + 17) = 0;
      result = v32;
    }
    while (v32 != v31);
  }
  return result;
}

void sub_1BF185168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SDPModel::isHeld(SDPModel *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 50);
  if ((SDPModel *)v1 == (SDPModel *)((char *)this + 392))
    goto LABEL_9;
  v2 = *((_QWORD *)this + 50);
  while (*(_DWORD *)(v2 + 136) != 4)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if ((SDPModel *)v2 == (SDPModel *)((char *)this + 392))
      goto LABEL_9;
  }
  while (*(_DWORD *)(v1 + 136) != 4)
    v1 = *(_QWORD *)(v1 + 8);
  if (*(_DWORD *)(v1 + 56) != 1)
    return 1;
LABEL_9:
  for (i = *((_QWORD *)this + 52); ; i += 200)
  {
    if (i == *((_QWORD *)this + 53))
      return 0;
    if (*(_DWORD *)(i + 12) == 2)
    {
      v4 = *(_QWORD *)(i + 144);
      if (v4 != i + 136)
        break;
    }
LABEL_16:
    ;
  }
  v5 = *(_QWORD *)(i + 144);
  while (*(_DWORD *)(v5 + 136) != 4)
  {
    v5 = *(_QWORD *)(v5 + 8);
    if (v5 == i + 136)
      goto LABEL_16;
  }
  while (*(_DWORD *)(v4 + 136) != 4)
    v4 = *(_QWORD *)(v4 + 8);
  return *(_DWORD *)(v4 + 56) != 1;
}

BOOL SDPModel::valid(SDPModel *this)
{
  char *v2;
  uint64_t i;
  _QWORD *j;
  _QWORD *k;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  v2 = (char *)this + 272;
  for (i = *((_QWORD *)this + 35); (char *)i != v2; i = *(_QWORD *)(i + 8))
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(i + 16) + 24))(i + 16) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "sdp.model");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_44);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::error(ims::_logger, (uint64_t)v12, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"SDPModel::valid() Invalid connection", 36);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_28;
    }
  }
  for (j = (_QWORD *)*((_QWORD *)this + 38); j != (_QWORD *)((char *)this + 296); j = (_QWORD *)j[1])
  {
    if (((*(uint64_t (**)(_QWORD *))(j[2] + 24))(j + 2) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "sdp.model");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_44);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::error(ims::_logger, (uint64_t)v12, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"SDPModel::valid() Invalid bandwidth", 35);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_28;
    }
  }
  for (k = (_QWORD *)*((_QWORD *)this + 41); k != (_QWORD *)((char *)this + 320); k = (_QWORD *)k[1])
  {
    if (((*(uint64_t (**)(_QWORD *))(k[2] + 24))(k + 2) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "sdp.model");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_44);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::error(ims::_logger, (uint64_t)v12, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"SDPModel::valid() Invalid timing", 32);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_28;
    }
  }
  if (*((_BYTE *)this + 384)
    && ((*(uint64_t (**)(char *))(*((_QWORD *)this + 43) + 24))((char *)this + 344) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "sdp.model");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_44);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::error(ims::_logger, (uint64_t)v12, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"SDPModel::valid() Invalid timezone", 34);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_28:
    *(_BYTE *)(v8 + 17) = 0;
    if (v11 < 0)
      operator delete(__p[0]);
    if (v13 < 0)
      operator delete(v12[0]);
    return 0;
  }
  v6 = *((_QWORD *)this + 52);
  v7 = *((_QWORD *)this + 53);
  while (v6 != v7)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "sdp.model");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_44);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::error(ims::_logger, (uint64_t)v12, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"SDPModel::valid() Invalid media", 31);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_28;
    }
    v6 += 200;
  }
  if (!*((_BYTE *)this + 8) || *((_QWORD *)this + 4))
    return 0;
  result = SDPOrigin::valid((SDPModel *)((char *)this + 40));
  if ((_DWORD)result)
    return !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)this + 19, (char *)&str_1_44);
  return result;
}

void sub_1BF18561C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPModel::preferredDirection(_QWORD *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t j;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  if (a3)
  {
    v3 = a1[50];
    if ((_QWORD *)v3 == a1 + 49)
    {
LABEL_6:
      v5 = 0;
    }
    else
    {
      v4 = a1[50];
      while (*(_DWORD *)(v4 + 136) != 4)
      {
        v4 = *(_QWORD *)(v4 + 8);
        if ((_QWORD *)v4 == a1 + 49)
          goto LABEL_6;
      }
      while (*(_DWORD *)(v3 + 136) != 4)
        v3 = *(_QWORD *)(v3 + 8);
      v5 = *(_DWORD *)(v3 + 56);
    }
    for (i = a1[52]; ; i += 200)
    {
      if (i == a1[53])
      {
        if (v5 <= 1)
          return 1;
        else
          return v5;
      }
      if (*(_DWORD *)(i + 12) == a2)
      {
        v7 = *(_QWORD *)(i + 144);
        if (v7 != i + 136)
        {
          v8 = *(_QWORD *)(i + 144);
          while (*(_DWORD *)(v8 + 136) != 4)
          {
            v8 = *(_QWORD *)(v8 + 8);
            if (v8 == i + 136)
              goto LABEL_26;
          }
          if (*(_DWORD *)(v7 + 136) == 4)
          {
            if (*(_DWORD *)(v7 + 56) > (signed int)v5)
              goto LABEL_25;
          }
          else
          {
            v9 = *(_QWORD *)(i + 144);
            do
              v9 = *(_QWORD *)(v9 + 8);
            while (*(_DWORD *)(v9 + 136) != 4);
            if (*(_DWORD *)(v9 + 56) > (signed int)v5)
            {
              do
                v7 = *(_QWORD *)(v7 + 8);
              while (*(_DWORD *)(v7 + 136) != 4);
LABEL_25:
              v5 = *(_DWORD *)(v7 + 56);
              continue;
            }
          }
        }
      }
LABEL_26:
      ;
    }
  }
  for (j = a1[52]; j != a1[53]; j += 200)
  {
    if (*(_DWORD *)(j + 12) == a2)
    {
      v11 = *(_QWORD *)(j + 144);
      if (v11 != j + 136)
      {
        v12 = *(_QWORD *)(j + 144);
        while (*(_DWORD *)(v12 + 136) != 4)
        {
          v12 = *(_QWORD *)(v12 + 8);
          if (v12 == j + 136)
            goto LABEL_34;
        }
        while (*(_DWORD *)(v11 + 136) != 4)
          v11 = *(_QWORD *)(v11 + 8);
        return *(unsigned int *)(v11 + 56);
      }
    }
LABEL_34:
    ;
  }
  v14 = a1[50];
  if ((_QWORD *)v14 == a1 + 49)
    return 1;
  v15 = a1[50];
  while (*(_DWORD *)(v15 + 136) != 4)
  {
    v15 = *(_QWORD *)(v15 + 8);
    if ((_QWORD *)v15 == a1 + 49)
      return 1;
  }
  while (*(_DWORD *)(v14 + 136) != 4)
    v14 = *(_QWORD *)(v14 + 8);
  return *(unsigned int *)(v14 + 56);
}

_QWORD *SDPModel::hold(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t i;
  uint64_t v8;
  uint64_t j;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t k;

  v1 = this + 49;
  v2 = this[50];
  if ((_QWORD *)v2 != this + 49)
  {
    v3 = this[50];
    while (*(_DWORD *)(v3 + 136) != 4)
    {
      v3 = *(_QWORD *)(v3 + 8);
      if ((_QWORD *)v3 == v1)
        goto LABEL_17;
    }
    v4 = this[50];
    while (*(_DWORD *)(v4 + 136) != 4)
    {
      v4 = *(_QWORD *)(v4 + 8);
      if ((_QWORD *)v4 == v1)
      {
        v5 = 0;
        goto LABEL_12;
      }
    }
    v5 = v4 + 16;
LABEL_12:
    while (*(_DWORD *)(v2 + 136) != 4)
      v2 = *(_QWORD *)(v2 + 8);
    if (((*(_DWORD *)(v2 + 56) - 2) & 0xFFFFFFFD) != 0)
      v6 = 3;
    else
      v6 = 4;
    *(_DWORD *)(v5 + 40) = v6;
  }
LABEL_17:
  for (i = this[38]; (_QWORD *)i != this + 37; i = *(_QWORD *)(i + 8))
  {
    if ((*(_DWORD *)(i + 28) - 3) <= 1)
      *(_BYTE *)(i + 32) = 1;
  }
  v8 = this[52];
  for (j = this[53]; v8 != j; v8 += 200)
  {
    v10 = *(_DWORD *)(v8 + 12);
    if (v10 == 2)
    {
      v14 = v8 + 136;
      v15 = *(_QWORD *)(v8 + 144);
      if (v15 != v8 + 136)
      {
        v16 = *(_QWORD *)(v8 + 144);
        while (*(_DWORD *)(v16 + 136) != 4)
        {
          v16 = *(_QWORD *)(v16 + 8);
          if (v16 == v14)
            goto LABEL_58;
        }
        v19 = *(_QWORD *)(v8 + 144);
        while (*(_DWORD *)(v19 + 136) != 4)
        {
          v19 = *(_QWORD *)(v19 + 8);
          if (v19 == v14)
          {
            v20 = 0;
            goto LABEL_53;
          }
        }
        v20 = v19 + 16;
LABEL_53:
        while (*(_DWORD *)(v15 + 136) != 4)
          v15 = *(_QWORD *)(v15 + 8);
        if (((*(_DWORD *)(v15 + 56) - 2) & 0xFFFFFFFD) != 0)
          v22 = 3;
        else
          v22 = 4;
        *(_DWORD *)(v20 + 40) = v22;
      }
LABEL_58:
      for (k = *(_QWORD *)(v8 + 120); k != v8 + 112; k = *(_QWORD *)(k + 8))
      {
        if ((*(_DWORD *)(k + 28) - 3) <= 1)
          *(_BYTE *)(k + 32) = 1;
      }
    }
    else if (v10 == 4)
    {
      v11 = v8 + 136;
      v12 = *(_QWORD *)(v8 + 144);
      if (v12 != v8 + 136)
      {
        v13 = *(_QWORD *)(v8 + 144);
        while (*(_DWORD *)(v13 + 136) != 4)
        {
          v13 = *(_QWORD *)(v13 + 8);
          if (v13 == v11)
            goto LABEL_49;
        }
        v17 = *(_QWORD *)(v8 + 144);
        while (*(_DWORD *)(v17 + 136) != 4)
        {
          v17 = *(_QWORD *)(v17 + 8);
          if (v17 == v11)
          {
            v18 = 0;
            goto LABEL_44;
          }
        }
        v18 = v17 + 16;
LABEL_44:
        while (*(_DWORD *)(v12 + 136) != 4)
          v12 = *(_QWORD *)(v12 + 8);
        if (((*(_DWORD *)(v12 + 56) - 2) & 0xFFFFFFFD) != 0)
          v21 = 3;
        else
          v21 = 4;
        *(_DWORD *)(v18 + 40) = v21;
      }
    }
LABEL_49:
    ;
  }
  return this;
}

_QWORD *SDPModel::resumeAllStreams(_QWORD *this, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v2 = this + 49;
  v3 = this[50];
  if ((_QWORD *)v3 == this + 49)
    goto LABEL_18;
  v4 = this[50];
  while (*(_DWORD *)(v4 + 136) != 4)
  {
    v4 = *(_QWORD *)(v4 + 8);
    if ((_QWORD *)v4 == v2)
      goto LABEL_18;
  }
  v5 = this[50];
  do
  {
    if (*(_DWORD *)(v5 + 136) == 4)
    {
      v6 = v5 + 16;
      if ((a2 & 1) == 0)
        goto LABEL_10;
LABEL_13:
      v7 = 1;
      goto LABEL_17;
    }
    v5 = *(_QWORD *)(v5 + 8);
  }
  while ((_QWORD *)v5 != v2);
  v6 = 0;
  if ((a2 & 1) != 0)
    goto LABEL_13;
LABEL_10:
  while (*(_DWORD *)(v3 + 136) != 4)
    v3 = *(_QWORD *)(v3 + 8);
  if (*(_DWORD *)(v3 + 56) == 4)
    v7 = 2;
  else
    v7 = 1;
LABEL_17:
  *(_DWORD *)(v6 + 40) = v7;
LABEL_18:
  v8 = this[52];
  v9 = this[53];
  while (v8 != v9)
  {
    v10 = v8 + 136;
    v11 = *(_QWORD *)(v8 + 144);
    if (v11 != v8 + 136)
    {
      v12 = *(_QWORD *)(v8 + 144);
      while (*(_DWORD *)(v12 + 136) != 4)
      {
        v12 = *(_QWORD *)(v12 + 8);
        if (v12 == v10)
          goto LABEL_37;
      }
      v13 = *(_QWORD *)(v8 + 144);
      while (*(_DWORD *)(v13 + 136) != 4)
      {
        v13 = *(_QWORD *)(v13 + 8);
        if (v13 == v10)
        {
          v14 = 0;
          if ((a2 & 1) != 0)
            goto LABEL_35;
          goto LABEL_31;
        }
      }
      v14 = v13 + 16;
      if ((a2 & 1) != 0)
        goto LABEL_35;
LABEL_31:
      while (*(_DWORD *)(v11 + 136) != 4)
        v11 = *(_QWORD *)(v11 + 8);
      if (*(_DWORD *)(v11 + 56) == 4)
      {
        v15 = 2;
        goto LABEL_36;
      }
LABEL_35:
      v15 = 1;
LABEL_36:
      *(_DWORD *)(v14 + 40) = v15;
    }
LABEL_37:
    v8 += 200;
  }
  return this;
}

_QWORD *SDPModel::setDirectionForSessionAndMedia(_QWORD *result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result[50];
  if ((_QWORD *)v2 != result + 49)
  {
    v3 = result[50];
    while (*(_DWORD *)(v3 + 136) != 4)
    {
      v3 = *(_QWORD *)(v3 + 8);
      if ((_QWORD *)v3 == result + 49)
        goto LABEL_9;
    }
    while (*(_DWORD *)(v2 + 136) != 4)
      v2 = *(_QWORD *)(v2 + 8);
    *(_DWORD *)(v2 + 56) = a2;
  }
LABEL_9:
  v4 = result[52];
  v5 = result[53];
  while (v4 != v5)
  {
    v6 = *(_QWORD *)(v4 + 144);
    if (v6 != v4 + 136)
    {
      v7 = *(_QWORD *)(v4 + 144);
      while (*(_DWORD *)(v7 + 136) != 4)
      {
        v7 = *(_QWORD *)(v7 + 8);
        if (v7 == v4 + 136)
          goto LABEL_19;
      }
      while (*(_DWORD *)(v6 + 136) != 4)
        v6 = *(_QWORD *)(v6 + 8);
      *(_DWORD *)(v6 + 56) = a2;
    }
LABEL_19:
    v4 += 200;
  }
  return result;
}

uint64_t SDPModel::updateWithLocalAddressAndUsername(uint64_t a1, IpAddress **a2, const std::string *a3)
{
  uint64_t result;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t i;
  unsigned __int8 *v10;
  std::string __str;

  result = SDPOrigin::valid((SDPOrigin *)(a1 + 40));
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 24))(a1 + 56);
    if ((_DWORD)result)
    {
      std::string::operator=((std::string *)(a1 + 112), a3);
      memset(&__str, 0, sizeof(__str));
      IpAddress::asString(*a2, 0, &__str);
      std::string::operator=((std::string *)(a1 + 80), &__str);
      v7 = (unsigned __int8 *)(*(uint64_t (**)(IpAddress *))(*(_QWORD *)*a2 + 128))(*a2);
      SDPConnection::setAddressTypeFromString((SDPConnection *)(a1 + 56), v7);
      v8 = a1 + 272;
      for (i = *(_QWORD *)(a1 + 280); i != v8; i = *(_QWORD *)(i + 8))
      {
        std::string::operator=((std::string *)(i + 40), &__str);
        v10 = (unsigned __int8 *)(*(uint64_t (**)(IpAddress *))(*(_QWORD *)*a2 + 128))(*a2);
        SDPConnection::setAddressTypeFromString((SDPConnection *)(i + 16), v10);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      return 1;
    }
  }
  return result;
}

void sub_1BF185D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SDPModel::removeTextSession(SDPModel *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  void (**v11)(_QWORD);
  BOOL v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;

  std::string::basic_string[abi:ne180100]<0>(v15, "sdp");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_44);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v15, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"SDPModel::removeTextSession", 27);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v14 < 0)
    operator delete(__p[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  v4 = *((_QWORD *)this + 52);
  v3 = *((_QWORD *)this + 53);
  if (v3 != v4)
  {
    v5 = (v3 - v4) / 200;
    if (v5 <= 1)
      v5 = 1;
    while (*(_DWORD *)(v4 + 12) != 4)
    {
      v4 += 200;
      if (!--v5)
        return;
    }
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,SDPMedia *,SDPMedia *,SDPMedia *,0>(v4 + 200, v3, v4);
    v7 = v6;
    v8 = (void (***)(_QWORD))*((_QWORD *)this + 53);
    if (v8 != v6)
    {
      v9 = v8 - 25;
      v10 = v8 - 25;
      do
      {
        v11 = *v10;
        v10 -= 25;
        (*v11)(v9);
        v12 = v9 == v7;
        v9 = v10;
      }
      while (!v12);
    }
    *((_QWORD *)this + 53) = v7;
  }
}

void sub_1BF185E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *SDPModel::setMasterKeyAndSalt(_QWORD *result, int a2, char **a3)
{
  uint64_t v3;
  uint64_t i;
  _QWORD *j;
  char **v8;
  _QWORD v9[3];

  v3 = result[52];
  for (i = result[53]; v3 != i; v3 += 200)
  {
    if (*(_DWORD *)(v3 + 12) == a2)
    {
      SDPMedia::mediaCryptoList((_QWORD *)v3, v9);
      for (j = (_QWORD *)v9[1]; j != v9; j = (_QWORD *)j[1])
      {
        v8 = (char **)(j[2] + 48);
        if (v8 != a3)
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v8, *a3, a3[1], a3[1] - *a3);
      }
      result = std::__list_imp<unsigned long long>::clear(v9);
    }
  }
  return result;
}

void sub_1BF185F60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<unsigned long long>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL SDPModel::hasPreconditions(SDPModel *this)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BOOL8 result;
  BOOL v7;

  for (i = *((_QWORD *)this + 52); ; i += 200)
  {
    if (i == *((_QWORD *)this + 53))
      return 0;
    if (*(_DWORD *)(i + 12) == 2)
      break;
  }
  v3 = *(_QWORD *)(i + 160);
  v2 = *(_QWORD *)(i + 168);
  if (v3 == v2)
    return 0;
  v4 = v3 + 20;
  do
  {
    v5 = *(_DWORD *)(v4 - 4);
    result = v5 > 0;
    v7 = v5 > 0 || v4 == v2;
    v4 += 20;
  }
  while (!v7);
  return result;
}

uint64_t SDPModel::containsPreconditions(uint64_t a1, int a2, int a3)
{
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t result;
  BOOL v9;

  for (i = *(_QWORD *)(a1 + 416); ; i += 200)
  {
    if (i == *(_QWORD *)(a1 + 424))
      return 0;
    if (*(_DWORD *)(i + 12) == 2)
      break;
  }
  v5 = *(_QWORD *)(i + 160);
  v4 = *(_QWORD *)(i + 168);
  if (v5 == v4)
    return 0;
  v6 = v5 + 20;
  do
  {
    v7 = *(_DWORD *)(v6 - 12) != a2 || *(_DWORD *)(v6 - 4) < a3;
    result = !v7;
    if (!v7)
      break;
    v9 = v6 == v4;
    v6 += 20;
  }
  while (!v9);
  return result;
}

uint64_t SDPModel::setPrecondition(uint64_t result, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  void **v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  char v17;

  v6 = *(_QWORD *)(result + 416);
  v7 = *(_QWORD *)(result + 424);
  if (v6 != v7)
  {
    while (*(_DWORD *)(v6 + 12) != 2)
    {
      v6 += 200;
      if (v6 == v7)
        return result;
    }
    v13 = 0x100000001;
    v14 = a3;
    v15 = a2;
    v16 = a4;
    v17 = 1;
    v12 = (void **)(v6 + 160);
    SDPPreconditionTable::processPrecondition((void **)(v6 + 160), (int *)&v13);
    v13 = 0x100000000;
    v14 = 0;
    v15 = a2;
    v16 = a5;
    v17 = 1;
    result = SDPPreconditionTable::processPrecondition(v12, (int *)&v13);
    if (a6)
    {
      v13 = 0x100000002;
      v14 = 0;
      v15 = a2;
      v16 = a4;
      v17 = 1;
      return SDPPreconditionTable::processPrecondition(v12, (int *)&v13);
    }
  }
  return result;
}

uint64_t SDPModel::setDesiredPrecondition(uint64_t result, int a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v5 = *(_QWORD *)(result + 416);
  v4 = *(_QWORD *)(result + 424);
  if (v5 != v4)
  {
    while (*(_DWORD *)(v5 + 12) != 2)
    {
      v5 += 200;
      if (v5 == v4)
        return result;
    }
    if (a3 == 4)
      SDPMedia::setPort((SDPMedia *)v5, 0);
    v9 = 0x100000001;
    v10 = a3;
    v11 = a2;
    v12 = a4;
    v13 = 1;
    return SDPPreconditionTable::processPrecondition((void **)(v5 + 160), (int *)&v9);
  }
  return result;
}

uint64_t SDPModel::transactionPreconditionTable(SDPModel *this, SDPPreconditionTable *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;

  v3 = *((_QWORD *)this + 52);
  v2 = *((_QWORD *)this + 53);
  if (v3 == v2)
    return 0;
  for (i = v3 + 160; *(_DWORD *)(i - 148) != 2; i += 200)
  {
    v5 = i + 40;
    if (v5 == v2)
      return 0;
  }
  if ((SDPPreconditionTable *)i != a2)
    std::vector<SDPPreconditionRow>::__assign_with_size[abi:ne180100]<SDPPreconditionRow*,SDPPreconditionRow*>((char *)a2, *(char **)i, *(_QWORD *)(i + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(i + 8) - *(_QWORD *)i) >> 2));
  return 1;
}

void SDPModel::addSDPConnection(SDPModel *this, const SDPConnection *a2)
{
  char *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[5];
  char v7;

  v3 = (char *)this + 272;
  SDPConnection::SDPConnection((uint64_t)v6, (uint64_t)a2);
  v4 = std::__list_imp<SDPConnection>::__create_node[abi:ne180100]<SDPConnection>((uint64_t)v3, 0, 0, (uint64_t)v6);
  v4[1] = v3;
  v5 = *((_QWORD *)this + 34);
  *v4 = v5;
  *(_QWORD *)(v5 + 8) = v4;
  *((_QWORD *)this + 34) = v4;
  ++*((_QWORD *)this + 36);
  v6[0] = off_1E78D19C0;
  if (v7 < 0)
    operator delete((void *)v6[3]);
}

void sub_1BF18628C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SDPModel::validConnection(SDPModel *this@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  uint64_t i;
  void (**v5)(SDPConnection *__hidden);
  __int128 v6;
  void *__p[2];
  __int128 v8;

  v3 = (char *)this + 272;
  for (i = *((_QWORD *)this + 35); (char *)i != v3; i = *(_QWORD *)(i + 8))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(i + 16) + 24))(i + 16))
    {
      SDPConnection::SDPConnection(a2, i + 16);
      *(_BYTE *)(a2 + 56) = 1;
      return;
    }
  }
  v6 = 0u;
  LOBYTE(v6) = 1;
  v5 = off_1E78D19C0;
  __p[0] = 0;
  __p[1] = 0;
  v8 = 0uLL;
  SDPConnection::SDPConnection(a2, (uint64_t)&v5);
  *(_BYTE *)(a2 + 56) = 0;
  v5 = off_1E78D19C0;
  if (SBYTE7(v8) < 0)
    operator delete(__p[0]);
}

void sub_1BF186378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SDPModel::setConnectionAddress(_QWORD *a1, std::string *__str, uint64_t a3)
{
  _QWORD *v6;
  uint64_t i;
  SDPConnection *v8;
  SDPConnection *v9;
  std::string __p;
  std::string __stra;

  v6 = a1 + 34;
  for (i = a1[35]; (_QWORD *)i != v6; i = *(_QWORD *)(i + 8))
  {
    std::string::operator=((std::string *)(i + 40), __str);
    SDPConnection::setAddressTypeFromString((SDPConnection *)(i + 16), (unsigned __int8 *)a3);
  }
  v8 = (SDPConnection *)a1[52];
  v9 = (SDPConnection *)a1[53];
  while (v8 != v9)
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__stra, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    else
      __stra = *__str;
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      __p = *(std::string *)a3;
    SDPMedia::setConnectionAddress(v8, &__stra, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__stra.__r_.__value_.__l.__data_);
    v8 = (SDPConnection *)((char *)v8 + 200);
  }
}

void sub_1BF18649C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SDPModel::setConnectionAddress(_QWORD *a1, std::string *__str, int a3)
{
  _QWORD *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t j;
  std::string __p;

  v6 = a1 + 34;
  for (i = a1[35]; (_QWORD *)i != v6; i = *(_QWORD *)(i + 8))
  {
    std::string::operator=((std::string *)(i + 40), __str);
    *(_DWORD *)(i + 32) = a3;
  }
  v9 = a1[52];
  v8 = a1[53];
  while (v9 != v8)
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    else
      __p = *__str;
    for (j = *(_QWORD *)(v9 + 96); j != v9 + 88; j = *(_QWORD *)(j + 8))
    {
      std::string::operator=((std::string *)(j + 40), &__p);
      *(_DWORD *)(j + 32) = a3;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v9 += 200;
  }
}

void sub_1BF1865A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPModel::validateRemoteAddress(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  const void *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  const void *v10;
  size_t v11;
  char *v13;
  void *v14;
  char *v15;
  char *v16;
  uint64_t result;

  v2 = a1 + 272;
  v3 = *(_QWORD *)(a1 + 280);
  if (v3 == a1 + 272)
    return 0;
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (unint64_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  while (1)
  {
    v7 = (char *)(v3 + 40);
    v8 = *(unsigned __int8 *)(v3 + 63);
    v9 = v8;
    v10 = (const void *)(v3 + 40);
    if (*(char *)(v3 + 63) < 0)
    {
      v10 = *(const void **)(v3 + 40);
      v9 = *(_QWORD *)(v3 + 48);
    }
    v11 = v5 >= v9 ? v9 : v5;
    if (memcmp(v10, v6, v11) || v5 != v9)
      break;
LABEL_27:
    v3 = *(_QWORD *)(v3 + 8);
    if (v3 == v2)
      return 0;
  }
  if ((v8 & 0x80) != 0)
  {
    v7 = *(char **)(v3 + 40);
    v8 = *(_QWORD *)(v3 + 48);
  }
  if (v8 >= 8)
  {
    v13 = &v7[v8];
    v14 = v7;
    do
    {
      v15 = (char *)memchr(v14, 46, v8 - 7);
      if (!v15)
        break;
      v16 = v15;
      if (*(_QWORD *)v15 == 0x64696C61766E692ELL)
      {
        result = 1;
        if (v16 == v13 || v16 - v7 == -1)
          return result;
        goto LABEL_27;
      }
      v14 = v15 + 1;
      v8 = v13 - (v16 + 1);
    }
    while (v8 >= 8);
  }
  return 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, const SDPRTCPXR *a2)
{
  void *v2[13];

  SDPRTCPXR::SDPRTCPXR((SDPRTCPXR *)v2, a2);
  SDPRTCPXR::~SDPRTCPXR(v2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  std::string *v6;
  uint64_t v7;

  v3 = **a1;
  v4 = (char *)operator new(0x90uLL);
  v5 = v4;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v4[24] = *(_BYTE *)(a2 + 8);
  *((_QWORD *)v4 + 2) = off_1E78ED0A8;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 32), *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *((_OWORD *)v4 + 2) = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 6) = *(_QWORD *)(a2 + 32);
  }
  *((_QWORD *)v5 + 2) = &off_1E78BB4C8;
  v6 = (std::string *)(v5 + 56);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 40);
    *((_QWORD *)v5 + 9) = *(_QWORD *)(a2 + 56);
  }
  *((_DWORD *)v5 + 34) = 1;
  v7 = *(_QWORD *)(v3 + 392);
  *(_QWORD *)v5 = v7;
  *((_QWORD *)v5 + 1) = v3 + 392;
  *(_QWORD *)(v7 + 8) = v5;
  *(_QWORD *)(v3 + 392) = v5;
  ++*(_QWORD *)(v3 + 408);
}

void sub_1BF1867F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 16) = v3;
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, const SDPMediaCandidate *a2)
{
  void *v2[10];

  SDPMediaCandidate::SDPMediaCandidate((SDPMediaCandidate *)v2, a2);
  SDPMediaCandidate::~SDPMediaCandidate(v2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, const SDPMediaCrypto *a2)
{
  _BYTE v2[80];

  SDPMediaCrypto::SDPMediaCrypto((SDPMediaCrypto *)v2, a2);
  SDPMediaCrypto::~SDPMediaCrypto((SDPMediaCrypto *)v2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  std::string *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v4 = (char *)operator new(0x90uLL);
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v4[24] = *(_BYTE *)(a2 + 8);
  *((_QWORD *)v4 + 2) = off_1E78ED0A8;
  v5 = (std::string *)(v4 + 32);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 6) = *(_QWORD *)(a2 + 32);
  }
  *((_QWORD *)v4 + 2) = off_1E78CE390;
  *((_DWORD *)v4 + 14) = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v4 + 34) = 4;
  v6 = *(_QWORD *)(v3 + 392);
  *(_QWORD *)v4 = v6;
  *((_QWORD *)v4 + 1) = v3 + 392;
  *(_QWORD *)(v6 + 8) = v4;
  *(_QWORD *)(v3 + 392) = v4;
  ++*(_QWORD *)(v3 + 408);
}

void sub_1BF186928(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, const SDPMediaEndToAccessEdgeProtection *a2)
{
  _QWORD v2[4];
  char v3;

  SDPMediaEndToAccessEdgeProtection::SDPMediaEndToAccessEdgeProtection((SDPMediaEndToAccessEdgeProtection *)v2, a2);
  v2[0] = off_1E78ED0A8;
  if (v3 < 0)
    operator delete((void *)v2[2]);
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, const SDPMediaFormatUnknownParams *a2)
{
  void *v2[9];

  SDPMediaFormatUnknownParams::SDPMediaFormatUnknownParams((SDPMediaFormatUnknownParams *)v2, a2);
  SDPMediaFormatUnknownParams::~SDPMediaFormatUnknownParams(v2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, const SDPMediaFormatAMRParams *a2)
{
  _QWORD v2[4];
  char v3;

  SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)v2, a2);
  v2[0] = off_1E78ED0A8;
  if (v3 < 0)
    operator delete((void *)v2[2]);
}

void std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, const SDPMediaFormatEVSParams *a2)
{
  _QWORD v2[4];
  char v3;

  SDPMediaFormatEVSParams::SDPMediaFormatEVSParams((SDPMediaFormatEVSParams *)v2, a2);
  v2[0] = off_1E78ED0A8;
  if (v3 < 0)
    operator delete((void *)v2[2]);
}

void std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, uint64_t a2)
{
  std::string __p;
  __int16 v4;

  if (*(char *)(a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  else
    __p = *(std::string *)(a2 + 16);
  v4 = *(_WORD *)(a2 + 40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, uint64_t a2)
{
  _QWORD v3[4];
  char v4;
  int v5;
  uint64_t v6;

  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v3, *(_WORD *)(a2 + 40));
  v5 = *(_DWORD *)(a2 + 44);
  v6 = *(_QWORD *)(a2 + 48);
  v3[0] = off_1E78ED0A8;
  if (v4 < 0)
    operator delete((void *)v3[2]);
}

void std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, uint64_t a2)
{
  _QWORD v3[4];
  char v4;
  __int16 v5;

  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v3, *(_WORD *)(a2 + 40));
  v5 = *(_WORD *)(a2 + 42);
  v3[0] = off_1E78ED0A8;
  if (v4 < 0)
    operator delete((void *)v3[2]);
}

void std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, const SDPMediaRTPMap *a2)
{
  void *v2[10];

  SDPMediaRTPMap::SDPMediaRTPMap((SDPMediaRTPMap *)v2, a2);
  SDPMediaRTPMap::~SDPMediaRTPMap(v2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, const SDPPacketizationTimeAttribute *a2)
{
  _QWORD v2[4];
  char v3;

  SDPPacketizationTimeAttribute::SDPPacketizationTimeAttribute((SDPPacketizationTimeAttribute *)v2, a2);
  v2[0] = off_1E78ED0A8;
  if (v3 < 0)
    operator delete((void *)v2[2]);
}

void std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, const SDPMediaPath *a2)
{
  void *v2[12];

  SDPMediaPath::SDPMediaPath((SDPMediaPath *)v2, a2);
  SDPMediaPath::~SDPMediaPath(v2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, const SDPMediaAcceptTypes *a2)
{
  void *v2[8];

  SDPMediaAcceptTypes::SDPMediaAcceptTypes((SDPMediaAcceptTypes *)v2, a2);
  SDPMediaAcceptTypes::~SDPMediaAcceptTypes(v2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<16ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, const SDPMediaAcceptWrappedTypes *a2)
{
  void *v2[8];

  SDPMediaAcceptWrappedTypes::SDPMediaAcceptWrappedTypes((SDPMediaAcceptWrappedTypes *)v2, a2);
  SDPMediaAcceptWrappedTypes::~SDPMediaAcceptWrappedTypes(v2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<17ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, uint64_t a2)
{
  void *v2[8];

  SDPMediaSetup::SDPMediaSetup((uint64_t)v2, a2);
  SDPMediaSetup::~SDPMediaSetup(v2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<18ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::SDPModel(std::shared_ptr<SDPModel>)::$_0,SDPModel::(std::shared_ptr<SDPModel>)::$_1,SDPModel::(std::shared_ptr<SDPModel>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> &>(uint64_t a1, uint64_t a2)
{
  void *v2[11];

  SDPMediaFingerprint::SDPMediaFingerprint((uint64_t)v2, a2);
  SDPMediaFingerprint::~SDPMediaFingerprint(v2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, **a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<16ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<17ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<18ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPModel::toStream(ImsOutStream &)::$_0,SDPModel::toStream(ImsOutStream &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)a1 + 8));
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,SDPMedia *,SDPMedia *,SDPMedia *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      SDPMedia::operator=(a3, v4);
      v4 += 200;
      a3 += 200;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t *std::list<std::string>::list(uint64_t *a1, uint64_t a2)
{
  uint64_t i;
  _QWORD *v5;
  uint64_t v6;

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
  {
    v5 = std::__list_imp<std::string>::__create_node[abi:ne180100]<std::string const&>((uint64_t)a1, 0, 0, i + 16);
    v6 = *a1;
    *v5 = *a1;
    v5[1] = a1;
    *(_QWORD *)(v6 + 8) = v5;
    *a1 = (uint64_t)v5;
    ++a1[2];
  }
  return a1;
}

void sub_1BF186F64(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<std::string>::clear(v1);
  _Unwind_Resume(a1);
}

unint64_t IPTelephonyPrefs::getBoolValueFromRuntimeConfig(uint64_t a1, unint64_t a2)
{
  CFTypeID TypeID;
  int v5;
  const UInt8 *v6;
  CFIndex v7;
  CFStringRef v8;
  uint64_t (*v9)(uint64_t);
  CFPropertyListRef v10;
  CFTypeRef v11;
  uint64_t (*v12)(uint64_t);
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  CFTypeID v15;
  const __CFBoolean *v16;
  uint64_t v17;
  uint64_t v18;
  CFTypeID v20;
  const __CFBoolean *v21;
  CFTypeRef cf;
  void *__p[2];
  char v24;
  void *v25[2];
  char v26;
  CFStringRef v27;

  cf = 0;
  TypeID = CFBooleanGetTypeID();
  v5 = *(char *)(a1 + 23);
  if (v5 >= 0)
    v6 = (const UInt8 *)a1;
  else
    v6 = *(const UInt8 **)a1;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 23);
  else
    v7 = *(_QWORD *)(a1 + 8);
  v8 = CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6, v7, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  v27 = v8;
  v9 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  if (!v8)
    v9 = 0;
  if (!v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "prefs");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v17 = ImsLogger::debug(ims::_logger, (uint64_t)v25, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Failed to create CF reference for key: ", 39);
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 32))(v17, a1);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
LABEL_24:
    if (v24 < 0)
      operator delete(__p[0]);
    if (v26 < 0)
      operator delete(v25[0]);
    goto LABEL_28;
  }
  v10 = CFPreferencesCopyValue(v8, CFSTR("com.apple.ipTelephony"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  v11 = cf;
  cf = v10;
  v25[0] = (void *)v11;
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)v25);
  if (cf)
    v12 = ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get;
  else
    v12 = 0;
  if (!v12)
  {
LABEL_28:
    ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v27);
    goto LABEL_29;
  }
  if (CFGetTypeID(cf) != TypeID)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "prefs");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v18 = ImsLogger::debug(ims::_logger, (uint64_t)v25, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"Value for key \"", 15);
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 32))(v18, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"\" (type ", 8);
    *(_BYTE *)(v18 + 17) = 0;
    CFGetTypeID(cf);
    std::ostream::operator<<();
    *(_BYTE *)(v18 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)") is not of the expected type (type ", 36);
    *(_BYTE *)(v18 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v18 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)")", 1);
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v18 + 17) = 0;
    goto LABEL_24;
  }
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v27);
  if (cf)
    v13 = ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get;
  else
    v13 = 0;
  if (v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "prefs");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v14 = ImsLogger::debug(ims::_logger, (uint64_t)v25, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Key found in prefs file: ", 25);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" with value: ", 13);
    *(_BYTE *)(v14 + 17) = 0;
    LOBYTE(v27) = 0;
    if (cf)
    {
      v15 = CFGetTypeID(cf);
      if (v15 == CFBooleanGetTypeID())
        ctu::cf::assign((ctu::cf *)&v27, (BOOL *)cf, v16);
    }
    std::ostream::operator<<();
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    if (v24 < 0)
      operator delete(__p[0]);
    if (v26 < 0)
      operator delete(v25[0]);
    a2 = (unint64_t)cf;
    LOBYTE(v25[0]) = 0;
    if (cf)
    {
      v20 = CFGetTypeID(cf);
      if (v20 == CFBooleanGetTypeID())
      {
        ctu::cf::assign((ctu::cf *)v25, (BOOL *)cf, v21);
        a2 = LOBYTE(v25[0]) != 0;
      }
      else
      {
        a2 = 0;
      }
    }
  }
LABEL_29:
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return a2;
}

void sub_1BF1873B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)&a9);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void IPTelephonyPrefs::setBoolValueInRuntimeConfig(uint64_t a1, int a2)
{
  const char *v4;
  const __CFString *v5;
  const __CFString *v6;
  CFPropertyListRef *v7;
  const __CFString *v8;
  const __CFString *v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;

  if (*(char *)(a1 + 23) >= 0)
    v4 = (const char *)a1;
  else
    v4 = *(const char **)a1;
  v5 = CFStringCreateWithCString(0, v4, 0x8000100u);
  if (v5)
  {
    v6 = v5;
    v7 = (CFPropertyListRef *)MEMORY[0x1E0C9AE50];
    if (!a2)
      v7 = (CFPropertyListRef *)MEMORY[0x1E0C9AE40];
    v8 = (const __CFString *)*MEMORY[0x1E0C9B260];
    v9 = (const __CFString *)*MEMORY[0x1E0C9B230];
    CFPreferencesSetValue(v5, *v7, CFSTR("com.apple.ipTelephony"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
    CFPreferencesSynchronize(CFSTR("com.apple.ipTelephony"), v8, v9);
    CFRelease(v6);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "prefs");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::debug(ims::_logger, (uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Failed to create CF reference for key: ", 39);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, a1);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (v12 < 0)
      operator delete(__p[0]);
    if (v14 < 0)
      operator delete(v13[0]);
  }
}

void sub_1BF1875D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

const void **ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void SDPTTYSettingsBuilder::createTTYSettingsForOffer(uint64_t a1@<X0>, SDPModel **a2@<X1>, SDPMedia *a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  SDPModel *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  SDPModel *v16[2];
  uint64_t v17;
  std::__shared_weak_count *v18;

  *(_OWORD *)(a4 + 272) = 0u;
  *(_OWORD *)(a4 + 288) = 0u;
  *(_OWORD *)(a4 + 240) = 0u;
  *(_OWORD *)(a4 + 256) = 0u;
  *(_OWORD *)(a4 + 208) = 0u;
  *(_OWORD *)(a4 + 224) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  *(_OWORD *)(a4 + 192) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 8);
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = a2[1];
  v16[0] = *a2;
  v16[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)((char *)v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  SDPTTYSettingsBuilder::createTTYSettings(a1, (uint64_t)&v17, v16, a3, (SDPMediaSettings *)a4);
  if (v8)
  {
    v11 = (unint64_t *)((char *)v8 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(SDPModel *))(*(_QWORD *)v8 + 16))(v8);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
    }
  }
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (*(_BYTE *)(a4 + 296))
  {
    *(_WORD *)(a4 + 28) = *(_WORD *)(a4 + 30);
    *(_WORD *)(a4 + 288) = *(_WORD *)(a4 + 290);
  }
}

void sub_1BF18779C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SDPTTYSettingsBuilder::createTTYSettings(uint64_t a1@<X0>, uint64_t a2@<X1>, SDPModel **a3@<X2>, SDPMedia *a4@<X3>, SDPMediaSettings *a5@<X8>)
{
  SDPMediaSettings *i;
  uint64_t v10;
  uint64_t v11;
  const ImsPrefs *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  SDPModel *v21;
  SDPModel *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  SDPModel *v27[2];
  _QWORD v28[5];
  SDPModel *v29;
  std::__shared_weak_count *v30;
  _QWORD v31[3];
  int v32;
  int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[12];
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  double (*v45)(uint64_t, uint64_t);
  void (*v46)(uint64_t);
  _BYTE v47[288];
  __int128 v48;

  v42 = 0;
  v43 = &v42;
  v44 = 0x15802000000;
  v45 = __Block_byref_object_copy__5;
  v46 = __Block_byref_object_dispose__5;
  v48 = 0u;
  memset(v47, 0, sizeof(v47));
  for (i = *(SDPMediaSettings **)(*(_QWORD *)a2 + 416);
        i != *(SDPMediaSettings **)(*(_QWORD *)a2 + 424);
        i = (SDPMediaSettings *)((char *)i + 200))
  {
    if (*((_DWORD *)i + 3) == 4)
      goto LABEL_6;
  }
  i = 0;
LABEL_6:
  v11 = *((_QWORD *)*a3 + 52);
  v10 = *((_QWORD *)*a3 + 53);
  if (v11 != v10)
  {
    while (*(_DWORD *)(v11 + 12) != 4)
    {
      v11 += 200;
      if (v11 == v10)
        goto LABEL_30;
    }
    if (i)
    {
      v38 = 0;
      v34 = 0u;
      v31[1] = 0;
      v31[2] = 0;
      v32 = 0;
      v33 = 16711935;
      *(_QWORD *)((char *)&v34 + 4) = 0x100000001;
      v35 = 0u;
      v36 = 0u;
      memset(v37, 0, sizeof(v37));
      v31[0] = &off_1E78BE690;
      v39 = 0x2800000028;
      v40 = 16711935;
      v41 = 1;
      std::optional<SDPMediaTTYSettings>::operator=[abi:ne180100]<SDPMediaTTYSettings,void>((SDPMediaSettings *)v47, (SDPMediaSettings *)v31);
      SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)v31);
      if (!*((_BYTE *)v43 + 336))
        goto LABEL_33;
      SDPSettingsBuilder::copyGeneralMediaSettings((std::string *)(v43 + 5), i, (SDPMedia *)v11, a4, v12);
      if (!*((_BYTE *)v43 + 336))
        goto LABEL_33;
      v13 = (uint64_t)(v43 + 5);
      v14 = (std::__shared_weak_count *)a3[1];
      v29 = *a3;
      v30 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      SDPSettingsBuilder::copyRemoteMediaSettings(v13, &v29, (SDPMedia *)v11);
      v17 = v30;
      if (v30)
      {
        v18 = (unint64_t *)&v30->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      *((_BYTE *)v43 + 332) = *(_QWORD *)(v11 + 16) != 0;
      v28[0] = MEMORY[0x1E0C809B0];
      v28[1] = 0x40000000;
      v28[2] = ___ZNK21SDPTTYSettingsBuilder17createTTYSettingsENSt3__110shared_ptrI8SDPModelEES3_RK8ImsPrefs_block_invoke;
      v28[3] = &unk_1E78E5C50;
      v28[4] = &v42;
      SDPSettingsBuilder::findRTPMatches(a1, (uint64_t)i + 40, v11 + 40, (uint64_t)v28, (uint64_t)&__block_literal_global_7);
      if (!*((_BYTE *)v43 + 336))
LABEL_33:
        std::__throw_bad_optional_access[abi:ne180100]();
      v20 = (unint64_t)(v43 + 5);
      v21 = *a3;
      v22 = a3[1];
      v27[0] = v21;
      v27[1] = v22;
      if (v22)
      {
        v23 = (unint64_t *)((char *)v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      SDPSettingsBuilder::generateBandwidthSpecifierInfo(v20, v27, v11);
      if (v22)
      {
        v25 = (unint64_t *)((char *)v22 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          (*(void (**)(SDPModel *))(*(_QWORD *)v22 + 16))(v22);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v22);
        }
      }
    }
  }
LABEL_30:
  std::__optional_copy_base<SDPMediaTTYSettings,false>::__optional_copy_base[abi:ne180100](a5, (uint64_t)(v43 + 5));
  _Block_object_dispose(&v42, 8);
  if (BYTE8(v48))
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)v47);
}

void sub_1BF187AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  SDPMediaSettings *v56;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Block_object_dispose(&a56, 8);
  if (LOBYTE(STACK[0x2C8]))
    SDPMediaSettings::~SDPMediaSettings(v56);
  _Unwind_Resume(a1);
}

void SDPTTYSettingsBuilder::createTTYSettingsForOfferAnswer(uint64_t a1@<X0>, uint64_t *a2@<X1>, SDPModel **a3@<X2>, SDPMedia *a4@<X3>, SDPMediaSettings *a5@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  SDPModel *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  SDPModel *v16[2];
  uint64_t v17;
  std::__shared_weak_count *v18;

  v5 = (std::__shared_weak_count *)a2[1];
  v17 = *a2;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = a3[1];
  v16[0] = *a3;
  v16[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)((char *)v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  SDPTTYSettingsBuilder::createTTYSettings(a1, (uint64_t)&v17, v16, a4, a5);
  if (v8)
  {
    v11 = (unint64_t *)((char *)v8 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(SDPModel *))(*(_QWORD *)v8 + 16))(v8);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
    }
  }
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1BF187C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

double __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
  double result;

  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 336) = 0;
  if (*(_BYTE *)(a2 + 336))
  {
    SDPMediaSettings::SDPMediaSettings((SDPMediaSettings *)(a1 + 40), (const SDPMediaSettings *)(a2 + 40));
    *(_QWORD *)(a1 + 40) = &off_1E78BE690;
    result = *(double *)(a2 + 320);
    *(double *)(a1 + 320) = result;
    *(_DWORD *)(a1 + 328) = *(_DWORD *)(a2 + 328);
    *(_BYTE *)(a1 + 332) = *(_BYTE *)(a2 + 332);
    *(_BYTE *)(a1 + 336) = 1;
  }
  return result;
}

void sub_1BF187CB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  SDPMediaSettings *v2;

  if (*(_BYTE *)(v1 + 336))
    SDPMediaSettings::~SDPMediaSettings(v2);
  _Unwind_Resume(exception_object);
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 336))
    SDPMediaSettings::~SDPMediaSettings((SDPMediaSettings *)(a1 + 40));
}

void ___ZNK21SDPTTYSettingsBuilder17createTTYSettingsENSt3__110shared_ptrI8SDPModelEES3_RK8ImsPrefs_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::size_type size;
  char v7;
  std::string *v8;
  uint64_t v9;
  int v10;
  std::string *p_p;
  int data_low;
  int v13;
  uint64_t v15;
  std::string __p;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  memset(&__p, 0, sizeof(__p));
  if (*(char *)(a2 + 87) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  else
    __p = *(std::string *)(a2 + 64);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size == 3)
  {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    data_low = LOWORD(p_p->__r_.__value_.__l.__data_);
    v13 = p_p->__r_.__value_.__s.__data_[2];
    if (data_low == 25970 && v13 == 100)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      if (*(_WORD *)(v15 + 328) == 255)
      {
        *(_WORD *)(v15 + 328) = *(_WORD *)(a2 + 8);
        *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 330) = *(_WORD *)(a3 + 8);
      }
    }
  }
  else if (size == 4)
  {
    v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &__p;
    if (LODWORD(v8->__r_.__value_.__l.__data_) == 808726900)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      if (*(_WORD *)(v9 + 68) == 255)
      {
        *(_WORD *)(v9 + 68) = *(_WORD *)(a2 + 8);
        *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 70) = *(_WORD *)(a3 + 8);
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        memset(v24, 0, sizeof(v24));
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v24, (unsigned int *)(a2 + 96));
        v22 = 0u;
        v23 = 0u;
        v20 = 0u;
        v21 = 0u;
        v18 = 0u;
        v19 = 0u;
        memset(v17, 0, sizeof(v17));
        std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v17, (unsigned int *)(a3 + 96));
        v10 = DWORD2(v30);
        if (DWORD2(v23) == 4)
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 324) = HIDWORD(v18);
        if (v10 == 4)
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 320) = HIDWORD(v25);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v17);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v24);
        v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
    }
  }
  if (v7 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

